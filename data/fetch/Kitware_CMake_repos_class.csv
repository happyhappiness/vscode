file,loc,log,log_file,block,block_file,block_feature,function_file,function_loc,ddg_feature,cdg_feature,cdg_z3_feature,class_index,class_size,,1,446,0.6353276353,0.6353276353
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,23,"printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_198.cpp,"{
#if defined(KWIML_ABI_ENDIAN_ID)
  int expect;
  union { short s; unsigned char c[sizeof(short)]; } x;
  x.s = 1;
  expect = (x.c[0] == 1 ?
            KWIML_ABI_ENDIAN_ID_LITTLE : KWIML_ABI_ENDIAN_ID_BIG);
  printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);
  if(KWIML_ABI_ENDIAN_ID == expect)
    {
    printf("", PASSED\n"");
    }
  else
    {
    printf("", FAILED\n"");
    result = 0;
    }
#else
  printf(LANG ""KWIML_ABI_ENDIAN_ID: unknown, FAILED\n"");
  result = 0;
#endif
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_198.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 33, 0, 0, 3, 4, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 1, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 3, 0, 6, 0, 0, 8, 0, 8, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_198.cpp,10,[],[],,701,270,,2,118,0.1680911681,0.8034188034
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1215,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1316.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1316.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1316.cpp,51,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]",member_e_l == null_e_r,700,103,,3,53,0.0754985755,0.8789173789
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,231,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_289.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_289.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_289.cpp,12,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]",calloc_ret_e_l == null_e_r,699,67,,4,18,0.0256410256,0.9045584046
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,393,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1688.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1688.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1688.cpp,32,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]",Not(macro_e_l == unkown_e_r),695,60,,5,12,0.0170940171,0.9216524217
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,412,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1690.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1690.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1690.cpp,51,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]",macro_e_l == unkown_e_r,696,55,,6,9,0.0128205128,0.9344729345
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,271,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1851.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1851.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1851.cpp,38,"[""FILE *"", ""macro""]","[""bool""]",Not(bool_e_l == null_e_r),697,55,,7,6,0.0085470085,0.943019943
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2440,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1001.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1001.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1001.cpp,13,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]",malloc_ret_e_l == null_e_r,692,46,,8,5,0.0071225071,0.9501424501
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,269,"archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1177.cpp,"{
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1177.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1177.cpp,114,"[""member"", ""string"", ""member""]","[""member""]",Not(member_e_l == null_e_r),694,46,,9,3,0.0042735043,0.9544159544
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,104,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2084.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2084.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2084.cpp,12,"[""string""]","[""int"", ""int"", ""<""]",int_g_r < int_g_l,698,40,,10,4,0.0056980057,0.9601139601
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,498,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL entry type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1041.cpp,"{
#if HAVE_SUN_ACL
		case ARCHIVE_ENTRY_ACL_TYPE_ALLOW:
			if (ace != NULL)
				ace->a_type = ACE_ACCESS_ALLOWED_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DENY:
			if (ace != NULL)
				ace->a_type = ACE_ACCESS_DENIED_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_AUDIT:
			if (ace != NULL)
				ace->a_type = ACE_SYSTEM_AUDIT_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ALARM:
			if (ace != NULL)
				ace->a_type = ACE_SYSTEM_ALARM_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
			if (aclent == NULL)
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			if (aclent != NULL)
				aclent->a_type |= ACL_DEFAULT;
			else
				r = -1;
			break;
#else	/* !HAVE_SUN_ACL */
		case ARCHIVE_ENTRY_ACL_TYPE_ALLOW:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_ALLOW);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DENY:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_DENY);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_AUDIT:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_AUDIT);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ALARM:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_ALARM);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			// These don't translate directly into the system ACL.
			break;
#endif	/* !HAVE_SUN_ACL */
		default:
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL entry type"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1041.cpp,"[7, 0, 0, 0, 11, 0, 0, 0, 12, 1, 12, 0, 1, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 0, 0, 17, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1041.cpp,278,"[""struct archive *"", ""macro"", ""string""]","[""int""]",Not(int_e_l == null_e_r),693,39,,11,3,0.0042735043,0.9643874644
second/download/CMake/CMake/CMake/Tests/Tutorial/Step3/MathFunctions/mysqrt.cpp,22,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2300.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2300.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2300.cpp,18,"[""unkown"", ""string"", ""double"", ""constant""]","[""null"", ""int"", ""<""]",int_g_r < null_g_l,691,25,,12,3,0.0042735043,0.9686609687
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1083,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1255.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1255.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1255.cpp,17,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]",__archive_read_ahead_ret_e_l == null_e_r,690,19,,13,4,0.0056980057,0.9743589744
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,489,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_938.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_938.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_938.cpp,86,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]",Not(null_e_l == strcmp_ret_e_r),689,18,,14,2,0.0028490028,0.9772079772
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,482,"archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1699.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1699.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1699.cpp,121,"[""member"", ""macro"", ""string""]","[""format_number_ret""]",Not(format_number_ret_e_l == null_e_r),679,15,,15,3,0.0042735043,0.9814814815
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,697,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (type=0%lo)"",
			    (unsigned long)
			    archive_entry_filetype(entry_original));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1735.cpp,"{
		case AE_IFBLK:
		case AE_IFCHR:
		case AE_IFIFO:
		case AE_IFLNK:
		case AE_IFREG:
			break;
		case AE_IFDIR:
		{
			/*
			 * Ensure a trailing '/'.  Modify the original
			 * entry so the client sees the change.
			 */
#if defined(_WIN32) && !defined(__CYGWIN__)
			const wchar_t *wp;

			wp = archive_entry_pathname_w(entry_original);
			if (wp != NULL && wp[wcslen(wp) -1] != L'/') {
				struct archive_wstring ws;

				archive_string_init(&ws);
				path_length = wcslen(wp);
				if (archive_wstring_ensure(&ws,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_wstring_free(&ws);
					return(ARCHIVE_FATAL);
				}
				/* Should we keep '\' ? */
				if (wp[path_length -1] == L'\\')
					path_length--;
				archive_wstrncpy(&ws, wp, path_length);
				archive_wstrappend_wchar(&ws, L'/');
				archive_entry_copy_pathname_w(
				    entry_original, ws.s);
				archive_wstring_free(&ws);
				p = NULL;
			} else
#endif
				p = archive_entry_pathname(entry_original);
			/*
			 * On Windows, this is a backup operation just in
			 * case getting WCS failed. On POSIX, this is a
			 * normal operation.
			 */
			if (p != NULL && p[strlen(p) - 1] != '/') {
				struct archive_string as;

				archive_string_init(&as);
				path_length = strlen(p);
				if (archive_string_ensure(&as,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_string_free(&as);
					return(ARCHIVE_FATAL);
				}
#if defined(_WIN32) && !defined(__CYGWIN__)
				/* NOTE: This might break the pathname
				 * if the current code page is CP932 and
				 * the pathname includes a character '\'
				 * as a part of its multibyte pathname. */
				if (p[strlen(p) -1] == '\\')
					path_length--;
				else
#endif
				archive_strncpy(&as, p, path_length);
				archive_strappend_char(&as, '/');
				archive_entry_copy_pathname(
				    entry_original, as.s);
				archive_string_free(&as);
			}
			break;
		}
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (type=0%lo)"",
			    (unsigned long)
			    archive_entry_filetype(entry_original));
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1735.cpp,"[8, 0, 0, 0, 2, 0, 4, 0, 7, 1, 10, 0, 0, 0, 1, 130, 0, 0, 3, 3, 0, 0, 0, 16, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 6, 6, 2, 0, 30, 0, 0, 23, 0, 49, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1735.cpp,157,"[""member"", ""macro"", ""string"", ""archive_entry_filetype_ret""]","[""archive_entry_filetype_ret""]",Not(archive_entry_filetype_ret_e_l == null_e_r),680,15,,18,1,0.0014245014,0.9829059829
second/download/CMake/CMake/CMake/Tests/Tutorial/Step1/tutorial.cpp,16,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2326.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }
  double inputValue = atof(argv[1]);
  double outputValue = sqrt(inputValue);
  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2326.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 2, 2, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2326.cpp,10,"[""unkown"", ""string"", ""double"", ""double""]","[""int"", ""int"", ""<"", ""!""]",Not(int_g_r < int_g_l),688,15,,19,1,0.0014245014,0.9843304843
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1682.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1682.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1682.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""const char *"", ""null"", ""=="", ""member"", ""null"", ""=="", ""||""]","Or(member_e_l == null_e_r, const char *_e_l == null_e_r)",678,14,,25,1,0.0014245014,0.9857549858
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/MathFunctions/MakeTable.cpp,21,"fprintf(fout, ""double sqrtTable[] = {\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2321.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2321.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2321.cpp,17,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]",Not(Not(Not(FILE *_e_l == null_e_r))),687,14,,39,1,0.0014245014,0.9871794872
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1580,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_979.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			goto exit_toc;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_979.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_979.cpp,83,"[""member"", ""macro"", ""string"", ""xmlTextWriterStartElement_ret""]","[""xmlTextWriterStartElement_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterStartElement_ret_g_l,670,13,,40,1,0.0014245014,0.9886039886
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,261,"archive_set_error(
		&a->archive,
		ARCHIVE_ERRNO_FILE_FORMAT,
		""WARC can only process regular files"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1519.cpp,"{
	struct warc_s *w = a->format_data;
	struct archive_string hdr;
#define MAX_HDR_SIZE 512

	/* check whether warcinfo record needs outputting */
	if (!w->omit_warcinfo) {
		ssize_t r;
		warc_essential_hdr_t wi = {
			WT_INFO,
			/*uri*/NULL,
			/*urn*/NULL,
			/*rtm*/0,
			/*mtm*/0,
			/*cty*/""application/warc-fields"",
			/*len*/sizeof(warcinfo) - 1U,
		};
		wi.rtime = w->now;
		wi.mtime = w->now;

		archive_string_init(&hdr);
		r = _popul_ehdr(&hdr, MAX_HDR_SIZE, wi);
		if (r >= 0) {
			/* jackpot! */
			/* now also use HDR buffer for the actual warcinfo */
			archive_strncat(&hdr, warcinfo, sizeof(warcinfo) -1);

			/* append end-of-record indicator */
			archive_strncat(&hdr, ""\r\n\r\n"", 4);

			/* write to output stream */
			__archive_write_output(a, hdr.s, archive_strlen(&hdr));
		}
		/* indicate we're done with file header writing */
		w->omit_warcinfo = 1U;
		archive_string_free(&hdr);
	}

	if (archive_entry_pathname(entry) == NULL) {
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}

	w->typ = archive_entry_filetype(entry);
	w->populz = 0U;
	if (w->typ == AE_IFREG) {
		warc_essential_hdr_t rh = {
			WT_RSRC,
			/*uri*/NULL,
			/*urn*/NULL,
			/*rtm*/0,
			/*mtm*/0,
			/*cty*/NULL,
			/*len*/0,
		};
		ssize_t r;
		rh.tgturi = archive_entry_pathname(entry);
		rh.rtime = w->now;
		rh.mtime = archive_entry_mtime(entry);
		rh.cntlen = (size_t)archive_entry_size(entry);

		archive_string_init(&hdr);
		r = _popul_ehdr(&hdr, MAX_HDR_SIZE, rh);
		if (r < 0) {
			/* don't bother */
			archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");
			return (ARCHIVE_WARN);
		}
		/* otherwise append to output stream */
		__archive_write_output(a, hdr.s, r);
		/* and let subsequent calls to _data() know about the size */
		w->populz = rh.cntlen;
		archive_string_free(&hdr);
		return (ARCHIVE_OK);
	}
	/* just resort to erroring as per Tim's advice */
	archive_set_error(
		&a->archive,
		ARCHIVE_ERRNO_FILE_FORMAT,
		""WARC can only process regular files"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1519.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 147, 0, 0, 6, 6, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 88, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 5, 0, 0, 21, 0, 0, 23, 0, 39, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1519.cpp,82,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""=="", ""!""]",Not(macro_e_l == member_e_r),675,13,,46,2,0.0028490028,0.9914529915
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2731,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1632.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1632.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1632.cpp,40,"[""member"", ""macro"", ""string""]","[""archive_string_ensure_ret"", ""null"", ""==""]",archive_string_ensure_ret_e_l == null_e_r,677,13,,55,2,0.0028490028,0.9943019943
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,659,"fprintf(stderr, ""Error converting %s \""%s\"" to real path: %s\n"", desc,
                temp_path, msgbuf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1824.cpp,"{
        char msgbuf[KWSYS_SHARED_FORWARD_MAXPATH];
        kwsys_shared_forward_strerror(msgbuf);
        fprintf(stderr, ""Error converting %s \""%s\"" to real path: %s\n"", desc,
                temp_path, msgbuf);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1824.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1824.cpp,25,"[""unkown"", ""string"", ""const char *"", ""char *"", ""char *""]","[""const char *""]",Not(const char *_e_l == null_e_r),683,13,,60,1,0.0014245014,0.9957264957
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3095,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_850.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_850.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_850.cpp,67,"[""member"", ""macro"", ""string""]","[""realloc_ret"", ""null"", ""==""]",null_e_l == realloc_ret_e_r,668,12,,67,1,0.0014245014,0.9971509972
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,163,"archive_set_error(a, -1,
			    ""INTERNAL ERROR: Function '%s' invoked with""
			    "" archive structure in state '%s',""
			    "" should be in state '%s'"",
			    function,
			    write_all_states(states1, a->state),
			    write_all_states(states2, state));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1034.cpp,"archive_set_error(a, -1,
			    ""INTERNAL ERROR: Function '%s' invoked with""
			    "" archive structure in state '%s',""
			    "" should be in state '%s'"",
			    function,
			    write_all_states(states1, a->state),
			    write_all_states(states2, state))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1034.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1034.cpp,35,[],"[""bool"", ""null"", ""==""]",bool_e_l == null_e_r,671,12,,103,1,0.0014245014,0.9985754986
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,753,"archive_set_error(&a->archive, errno,
			    ""Couldn't open %s"", tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1197.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't open %s"", tree_current_path(t));
			r = ARCHIVE_FAILED;
			tree_enter_initial_dir(t);
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1197.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1197.cpp,65,"[""member"", ""unkown"", ""string"", ""tree_current_path_ret""]","[""member"", ""null"", ""<""]",null_g_r < member_g_l,672,12,,270,1,0.0014245014,1
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1682,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file (%s) %jd < %jd"",
			    iso9660->pathname.s,
			    (intmax_t)iso9660->entry_content->offset,
			    (intmax_t)iso9660->current_position);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1335.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file (%s) %jd < %jd"",
			    iso9660->pathname.s,
			    (intmax_t)iso9660->entry_content->offset,
			    (intmax_t)iso9660->current_position);
			*buff = NULL;
			*size = 0;
			*offset = iso9660->entry_sparse_offset;
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1335.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1335.cpp,36,"[""member"", ""macro"", ""string"", ""member"", ""member"", ""member""]","[""member"", ""member"", ""<""]",member_g_r < member_g_l,673,11,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/error.cpp,53,"fprintf(stderr, ""(%d) %s"", errorno, errmsg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1753.cpp,"{
    fprintf(stderr, ""(%d) %s"", errorno, errmsg);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1753.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1753.cpp,19,"[""unkown"", ""string"", ""const int"", ""char *""]","[""const char *"", ""!""]",Not(Not(const char *_e_l == null_e_r)),681,11,,,,,
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,66,"printf(""\n\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1775.cpp,"printf(""\n\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1775.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1775.cpp,13,"[""string""]","[""null"", ""null"", ""==""]",null_e_l == null_e_r,682,11,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,447,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_587.cpp,"{
	case LZO_E_OK:
		if (out_size == state->uncompressed_size)
			break;
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	case LZO_E_OUT_OF_MEMORY:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_587.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_587.cpp,90,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""=="", ""!""]",Not(member_e_l == member_e_r),666,10,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1270,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_961.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_961.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_961.cpp,154,"[""member"", ""macro"", ""string"", ""xmlTextWriterEndElement_ret""]","[""xmlTextWriterEndElement_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterEndElement_ret_g_l,669,10,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,474,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1398.cpp,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1398.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1398.cpp,33,"[""struct archive *"", ""unkown"", ""string"", ""member""]","[""member"", ""macro"", ""==""]",macro_e_l == member_e_r,674,10,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,357,"archive_set_error(
				    &self->archive->archive,
		    		    ARCHIVE_ERRNO_MISC,
				    ""Malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1539.cpp,"{
				archive_set_error(
				    &self->archive->archive,
		    		    ARCHIVE_ERRNO_MISC,
				    ""Malformed lz4 data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1539.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1539.cpp,61,"[""member"", ""macro"", ""string""]","[""__archive_read_filter_ahead_ret"", ""null"", ""==""]",__archive_read_filter_ahead_ret_e_l == null_e_r,676,10,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,328,"fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_22.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_22.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_22.cpp,28,[],"[""unkown""]",Not(null_e_l == unkown_e_r),662,9,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8004,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_745.cpp,"{
		case Z_OK: /* Decompressor made some progress.*/
		case Z_STREAM_END: /* Found end of stream. */
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_745.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_745.cpp,106,"[""member"", ""macro"", ""string"", ""inflate_ret""]","[""inflate_ret""]",Not(inflate_ret_e_l == null_e_r),667,9,,,,,
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,39,"printf(""%s is there! Good."", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2126.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2126.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2126.cpp,15,"[""string"", ""member""]","[""FileExists_ret"", ""!""]",Not(Not(FileExists_ret_e_l == null_e_r)),686,9,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1645,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_267.cpp,"{
		case LZMA_STREAM_END: /* Found end of stream. */
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
			/* FALLTHROUGH */
		case LZMA_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_267.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_267.cpp,93,"[""member"", ""macro"", ""string"", ""string"", ""lzma_code_ret""]","[""lzma_code_ret""]",Not(lzma_code_ret_e_l == null_e_r),663,8,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,864,"archive_set_error(&a->archive, errno, ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_306.cpp,"{
			archive_set_error(&a->archive, errno, ""Write failed"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_306.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_306.cpp,74,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""null"", ""<""]",null_g_r < write_ret_g_l,664,8,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1845,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_503.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_503.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_503.cpp,26,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""null"", ""<=""]",null_ge_r <= ssize_t_ge_l,665,8,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,439,"printf(""No process has been executed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1916.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1916.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1916.cpp,75,"[""string""]","[""kwsysProcess_GetState_ret""]",Not(kwsysProcess_GetState_ret_e_l == null_e_r),684,8,,,,,
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,8,"fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2037.cpp,"{
      fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");
      fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2037.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2037.cpp,5,"[""unkown"", ""string""]","[""strcmp_ret"", ""null"", ""==""]",null_e_l == strcmp_ret_e_r,685,8,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,226,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for %s decompression"",
		    self->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1633.cpp,"{
		free(out_block);
		free(state);
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for %s decompression"",
		    self->name);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1633.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1633.cpp,16,"[""member"", ""macro"", ""string"", ""member""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""||""]","Or(malloc_ret_e_l == null_e_r, calloc_ret_e_l == null_e_r)",649,7,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/util.cpp,660,"len = _snwprintf(key_name,
                     ARRAY_SIZE(key_name),
                     L""HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\%d"",
                     i);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1754.cpp,"{
    WCHAR key_name[128];
    HKEY processor_key;
    DWORD cpu_speed;
    DWORD cpu_speed_size = sizeof(cpu_speed);
    WCHAR cpu_brand[256];
    DWORD cpu_brand_size = sizeof(cpu_brand);
    size_t len;

    len = _snwprintf(key_name,
                     ARRAY_SIZE(key_name),
                     L""HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\%d"",
                     i);

    assert(len > 0 && len < ARRAY_SIZE(key_name));

    r = RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                      key_name,
                      0,
                      KEY_QUERY_VALUE,
                      &processor_key);
    if (r != ERROR_SUCCESS) {
      err = GetLastError();
      goto error;
    }

    if (RegQueryValueExW(processor_key,
                         L""~MHz"",
                         NULL,
                         NULL,
                         (BYTE*) &cpu_speed,
                         &cpu_speed_size) != ERROR_SUCCESS) {
      err = GetLastError();
      RegCloseKey(processor_key);
      goto error;
    }

    if (RegQueryValueExW(processor_key,
                         L""ProcessorNameString"",
                         NULL,
                         NULL,
                         (BYTE*) &cpu_brand,
                         &cpu_brand_size) != ERROR_SUCCESS) {
      err = GetLastError();
      RegCloseKey(processor_key);
      goto error;
    }

    RegCloseKey(processor_key);

    cpu_info = &cpu_infos[i];
    cpu_info->speed = cpu_speed;
    cpu_info->cpu_times.user = sppi[i].UserTime.QuadPart / 10000;
    cpu_info->cpu_times.sys = (sppi[i].KernelTime.QuadPart -
        sppi[i].IdleTime.QuadPart) / 10000;
    cpu_info->cpu_times.idle = sppi[i].IdleTime.QuadPart / 10000;
    cpu_info->cpu_times.irq = sppi[i].InterruptTime.QuadPart / 10000;
    cpu_info->cpu_times.nice = 0;

    uv__convert_utf16_to_utf8(cpu_brand,
                              cpu_brand_size / sizeof(WCHAR),
                              &(cpu_info->model));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1754.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 133, 0, 0, 7, 7, 0, 0, 2, 12, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 63, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 3, 3, 0, 0, 17, 0, 0, 17, 0, 33, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1754.cpp,53,[],"[""null"", ""member"", ""<""]",member_g_r < null_g_l,651,7,,,,,
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,72,"printf(""\n\t}\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1789.cpp,"printf(""\n\t}\n};\n"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1789.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1789.cpp,19,"[""string""]","[""null"", ""int"", ""==""]",int_e_l == null_e_r,652,7,,,,,
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,37,"fprintf(fout, ""&amp;"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2075.cpp,"{
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2075.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2075.cpp,33,"[""FILE *"", ""string""]","[""char *""]",Not(char *_e_l == null_e_r),657,7,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,168,"printf(""Failed: %s is an invalid test name.\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2093.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2093.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2093.cpp,76,"[""string"", ""member""]","[""int"", ""int"", ""!="", ""!""]",Not(Not(int_e_l == int_e_r)),659,7,,,,,
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/create_file.cpp,12,"fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2248.cpp,"{
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2248.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2248.cpp,9,"[""unkown"", ""string"", ""member""]","[""FILE *"", ""null"", ""==""]",FILE *_e_l == null_e_r,661,7,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2002,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_510.cpp,"{
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_510.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_510.cpp,140,"[""member"", ""macro"", ""string""]","[""__archive_ppmd7_functions . Ppmd7_DecodeSymbol_ret"", ""null"", ""<""]","null_g_r <
__archive_ppmd7_functions . Ppmd7_DecodeSymbol_ret_g_l",626,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2265,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_996.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");
			file_free(file);
			*filepp = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_996.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_996.cpp,47,"[""member"", ""macro"", ""string""]","[""get_path_component_ret"", ""null"", ""<""]",null_g_r < get_path_component_ret_g_l,636,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1749,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1279.cpp,"{
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1279.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1279.cpp,53,"[""member"", ""macro"", ""string""]","[""null"", ""int"", "">""]",int_g_l > null_g_r,641,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2671,"archive_set_error(&a->archive,
			    -1, ""Invalid central directory signature"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1295.cpp,"{
			archive_set_error(&a->archive,
			    -1, ""Invalid central directory signature"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1295.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1295.cpp,73,"[""member"", ""int"", ""string""]","[""memcmp_ret"", ""null"", ""!=""]",Not(memcmp_ret_e_l == null_e_r),642,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2081,"fprintf(stderr, ""\n ** Unexpected extended attribute length: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1360.cpp,"{
		fprintf(stderr, ""\n ** Unexpected extended attribute length: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1360.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1360.cpp,332,"[""unkown"", ""string""]","[""const unsigned char *"", ""null"", ""!=""]",Not(const unsigned char *_e_l == null_e_r),644,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,316,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1508.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1508.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1508.cpp,172,"[""member"", ""macro"", ""string""]","[""format_decimal_ret""]",Not(format_decimal_ret_e_l == null_e_r),646,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,236,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1683.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1683.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1683.cpp,25,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_ret"", ""null"", ""==""]",archive_entry_pathname_ret_e_l == null_e_r,650,6,,,,,
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,13,"fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2039.cpp,"{
      fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2039.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2039.cpp,10,"[""unkown"", ""string"", ""member""]","[""member"", ""char"", ""!=""]",Not(char_e_l == member_e_r),656,6,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,106,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2085.cpp,"{
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2085.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2085.cpp,14,"[""string"", ""null"", ""member""]","[""null"", ""unkown"", ""<""]",unkown_g_r < null_g_l,658,6,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,249,"snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_71.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_71.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_71.cpp,79,"[""malloc_ret"", ""int"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""null""]",Not(null_e_l == null_e_r),617,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,941,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_476.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size too small"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_476.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_476.cpp,123,"[""member"", ""macro"", ""string""]","[""archive_le16dec_ret"", ""int"", ""<""]",int_g_r < archive_le16dec_ret_g_l,625,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7680,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Compression failed:""
				    "" deflate() call returned status %d"",
				    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_736.cpp,"{
			case Z_OK:
			case Z_STREAM_END:
				csize = zstrm->total_out - csize;
				if (wb_consume(a, csize) != ARCHIVE_OK)
					return (ARCHIVE_FATAL);
				iso9660->zisofs.total_size += csize;
				iso9660->cur_file->cur_content->size += csize;
				zstrm->next_out = wb_buffptr(a);
				zstrm->avail_out = (uInt)wb_remaining(a);
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Compression failed:""
				    "" deflate() call returned status %d"",
				    r);
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_736.cpp,"[1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_736.cpp,85,[],"[""deflate_ret""]",Not(deflate_ret_e_l == null_e_r),632,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2928,"archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_841.cpp,"archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_841.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_841.cpp,116,"[""member"", ""int"", ""string""]","[""null"", ""macro"", ""==""]",macro_e_l == null_e_r,633,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,597,"archive_set_error(&(a->archive), errno,
				    ""lseek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_942.cpp,"{
				archive_set_error(&(a->archive), errno,
				    ""lseek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_942.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_942.cpp,73,"[""member"", ""unkown"", ""string""]","[""lseek_ret"", ""null"", ""<""]",null_g_r < lseek_ret_g_l,635,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,963,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1094.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1094.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1094.cpp,12,"[""member"", ""macro"", ""string""]","[""struct archive_entry *"", ""null"", ""==""]",null_e_l == struct archive_entry *_e_r,637,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1077,"archive_set_error(&(a->archive), EINVAL, ""date is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1100.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""date is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1100.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1100.cpp,6,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""=="", ""const char *"", ""char"", ""=="", ""||""]","Or(char_e_l == const char *_e_r,
   const char *_e_l == null_e_r)",638,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1301.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1301.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1301.cpp,33,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""int"", "">""]",int_g_l > member_g_r,643,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,374,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1407.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1407.cpp,103,"[""member"", ""macro"", ""string""]","[""__la_win_entry_in_posix_pathseparator_ret"", ""null"", ""==""]",__la_win_entry_in_posix_pathseparator_ret_e_l == null_e_r,645,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,712,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1587.cpp,"{  /* Short block at EOF; this is bad. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1587.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1587.cpp,23,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""int"", ""<""]",int_g_r < ssize_t_g_l,647,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1520,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1608.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1608.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1608.cpp,22,"[""struct archive_read *"", ""member"", ""string""]","[""archive_entry_copy_pathname_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_pathname_l_ret_e_l == null_e_r),648,5,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5276,"sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1863.cpp,"{
        // Windows 2000 and everything else.
        sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1863.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1863.cpp,157,"[""char *"", ""string"", ""member"", ""bool""]","[""member"", ""int"", ""=="", ""member"", ""int"", ""=="", ""&&"", ""!""]","Not(And(int_e_l == member_e_r, int_e_l == member_e_r))",653,5,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,940,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_105.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_105.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_105.cpp,17,"[""unsigned char *"", ""unkown"", ""string"", ""macro"", ""macro"", ""macro"", ""macro"", ""member"", ""macro"", ""macro""]","[""CURL_SB_GET_ret""]",Not(CURL_SB_GET_ret_e_l == null_e_r),618,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1203,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_253.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_253.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_253.cpp,16,"[""member"", ""macro"", ""string""]","[""int"", ""member"", ""<=""]",member_ge_r <= int_ge_l,619,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1610,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_265.cpp,"{
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_265.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_265.cpp,58,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompressEnd_ret""]",Not(BZ2_bzDecompressEnd_ret_e_l == null_e_r),620,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,687,"archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_411.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_411.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_411.cpp,24,"[""member"", ""unkown"", ""string"", ""read_ret""]","[""read_ret"", ""null"", ""<""]",null_g_r < read_ret_g_l,621,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1701,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_419.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_419.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_419.cpp,28,"[""struct archive *"", ""macro"", ""string""]","[""deflateInit2_ret"", ""macro"", ""!=""]",Not(deflateInit2_ret_e_l == macro_e_r),622,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1932,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_427.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_427.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_427.cpp,24,"[""struct archive *"", ""macro"", ""string""]","[""lzma_lzma_preset_ret""]",Not(lzma_lzma_preset_ret_e_l == null_e_r),623,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,629,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_467.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");
    rar->valid = 0;
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_467.cpp,9,"[""member"", ""macro"", ""string""]","[""rar_br_read_ahead_ret"", ""!""]",Not(Not(null_e_l == rar_br_read_ahead_ret_e_r)),624,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2433,"archive_set_error(&a->archive, ENOMEM,
                      ""Unable to allocate memory for node data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_525.cpp,"{
    archive_set_error(&a->archive, ENOMEM,
                      ""Unable to allocate memory for node data."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_525.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_525.cpp,9,"[""member"", ""macro"", ""string""]","[""new_node_ret"", ""null"", ""<""]",null_g_r < new_node_ret_g_l,627,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1397,"archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_630.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_630.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_630.cpp,124,"[""member"", ""unkown"", ""string""]","[""disk_unlink_ret"", ""null"", ""!=""]",Not(disk_unlink_ret_e_l == null_e_r),628,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_fd.cpp,87,"archive_set_error(a, errno, ""Couldn't stat fd %d"", mine->fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_653.cpp,"{
		archive_set_error(a, errno, ""Couldn't stat fd %d"", mine->fd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_653.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_653.cpp,9,"[""struct archive *"", ""unkown"", ""string"", ""member""]","[""fstat_ret"", ""null"", ""!=""]",Not(fstat_ret_e_l == null_e_r),629,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,312,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_664.cpp,"{
	case Z_OK:
		state->in_stream = 1;
		return (ARCHIVE_OK);
	case Z_STREAM_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_664.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_664.cpp,32,[],"[""inflateInit2_ret""]",Not(inflateInit2_ret_e_l == null_e_r),630,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4023,"archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_696.cpp,"{
	case KEY_FLG:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);
		break;
	case KEY_STR:
		s = va_arg(ap, const char *);
		archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);
		break;
	case KEY_INT:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);
		break;
	case KEY_HEX:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_696.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_696.cpp,14,"[""struct archive_string *"", ""string"", ""constant"", ""string"", ""const char *""]","[""enum keytype""]",Not(enum keytype_e_l == null_e_r),631,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,381,"archive_set_error(&a->archive, ERANGE,
		    ""File is too large for cpio format."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_877.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File is too large for cpio format."");
		ret_final = ARCHIVE_FAILED;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_877.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_877.cpp,107,"[""member"", ""macro"", ""string""]","[""format_octal_ret""]",Not(format_octal_ret_e_l == null_e_r),634,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,287,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1120.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");
				archive_wstring_free(&ws);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1120.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1120.cpp,53,"[""member"", ""macro"", ""string""]","[""archive_wstring_ensure_ret"", ""null"", ""==""]",archive_wstring_ensure_ret_e_l == null_e_r,639,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,866,"archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1200.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			tree_enter_initial_dir(t);
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));
			tree_enter_initial_dir(t);
			return (ARCHIVE_FAILED);
		case 0:
			tree_enter_initial_dir(t);
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1200.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 11, 0, 0, 9, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1200.cpp,15,"[""member"", ""member"", ""string"", ""tree_current_path_ret""]","[""tree_next_ret""]",Not(null_e_l == tree_next_ret_e_r),640,4,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,305,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1902.cpp,"{
  /* The grandchild just sleeps for a few seconds while ignoring signals.  */
  (void)argc;
  (void)argv;
#if defined(_WIN32)
  if (!SetConsoleCtrlHandler(test9_grandchild_handler, TRUE)) {
    return 1;
  }
#else
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGINT, &sa, 0) < 0) {
    return 1;
  }
#endif
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 9 seconds.  */
  testProcess_sleep(9);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1902.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 15, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1902.cpp,18,"[""unkown"", ""string""]","[""SetConsoleCtrlHandler_ret"", ""!"", ""!""]",Not(Not(Not(SetConsoleCtrlHandler_ret_e_l == null_e_r))),654,4,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,676,"fprintf(stdout, ""Output on stdout before test %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1930.cpp,"{
    /* This is the parent process for a requested test number.  */
    int states[10] = {
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  kwsysProcess_State_Exception,
      kwsysProcess_State_Exited,   kwsysProcess_State_Expired,
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  /* Ctrl+C handler test */
      kwsysProcess_State_Exception /* Process group test */
    };
    int exceptions[10] = {
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Fault,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Interrupt
    };
    int values[10] = { 0, 123, 1, 1, 0, 0, 0, 0, 1, 1 };
    int shares[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    int outputs[10] = { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 };
    int delays[10] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    double timeouts[10] = { 10, 10, 10, 30, 30, 10, -1, 10, 6, 4 };
    int polls[10] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
    int repeat[10] = { 257, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int createNewGroups[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    unsigned int interruptDelays[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 2 };
    int r;
    const char* cmd[4];
#ifdef _WIN32
    char* argv0 = 0;
#endif
    char* test1IterationsStr = getenv(""KWSYS_TEST_PROCESS_1_COUNT"");
    if (test1IterationsStr) {
      long int test1Iterations = strtol(test1IterationsStr, 0, 10);
      if (test1Iterations > 10 && test1Iterations != LONG_MAX) {
        repeat[0] = (int)test1Iterations;
      }
    }
#ifdef _WIN32
    if (n == 0 && (argv0 = strdup(argv[0]))) {
      /* Try converting to forward slashes to see if it works.  */
      char* c;
      for (c = argv0; *c; ++c) {
        if (*c == '\\') {
          *c = '/';
        }
      }
      cmd[0] = argv0;
    } else {
      cmd[0] = argv[0];
    }
#else
    cmd[0] = argv[0];
#endif
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    fprintf(stdout, ""Output on stdout before test %d.\n"", n);
    fprintf(stderr, ""Output on stderr before test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
    r = runChild(cmd, states[n - 1], exceptions[n - 1], values[n - 1],
                 shares[n - 1], outputs[n - 1], delays[n - 1], timeouts[n - 1],
                 polls[n - 1], repeat[n - 1], 0, createNewGroups[n - 1],
                 interruptDelays[n - 1]);
    fprintf(stdout, ""Output on stdout after test %d.\n"", n);
    fprintf(stderr, ""Output on stderr after test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
#if defined(_WIN32)
    if (argv0) {
      free(argv0);
    }
#endif
    return r;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1930.cpp,"[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 1, 173, 0, 0, 17, 17, 0, 0, 15, 139, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 6, 5, 2, 0, 14, 0, 0, 18, 0, 36, 7, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1930.cpp,127,"[""unkown"", ""string"", ""atoi_ret""]","[""atoi_ret"", ""int"", "">="", ""atoi_ret"", ""int"", ""<="", ""&&""]","And(int_ge_r <= atoi_ret_ge_l, int_ge_l >= atoi_ret_ge_r)",655,4,,,,,
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,92,"sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2146.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2146.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2146.cpp,79,"[""char *"", ""string"", ""info -> CAPI -> SourceFileGetSourceName_ret""]","[""info -> CAPI -> CommandExists_ret"", ""!""]",Not(Not(info -> CAPI -> CommandExists_ret_e_l == null_e_r)),660,4,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1545,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_37.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_37.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_37.cpp,35,"[""unkown"", ""string"", ""unkown"", ""unkown""]","[""MY_S_ISDIR_ret""]",Not(MY_S_ISDIR_ret_e_l == null_e_r),448,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/vtls.cpp,686,"snprintf(output, outlen, ""%s:"", label);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_156.cpp,"{
  struct curl_certinfo *ci = &data->info.certs;
  char *output;
  struct curl_slist *nl;
  CURLcode result = CURLE_OK;
  size_t labellen = strlen(label);
  size_t outlen = labellen + 1 + valuelen + 1; /* label:value\0 */

  output = malloc(outlen);
  if(!output)
    return CURLE_OUT_OF_MEMORY;

  /* sprintf the label and colon */
  snprintf(output, outlen, ""%s:"", label);

  /* memcpy the value (it might not be zero terminated) */
  memcpy(&output[labellen+1], value, valuelen);

  /* zero terminate the output */
  output[labellen + 1 + valuelen] = 0;

  nl = Curl_slist_append_nodup(ci->certinfo[certnum], output);
  if(!nl) {
    free(output);
    curl_slist_free_all(ci->certinfo[certnum]);
    result = CURLE_OUT_OF_MEMORY;
  }

  ci->certinfo[certnum] = nl;
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_156.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 6, 6, 0, 0, 4, 6, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 2, 2, 0, 0, 7, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_156.cpp,18,"[""malloc_ret"", ""size_t"", ""string"", ""const char *""]","[""malloc_ret"", ""!"", ""!""]",Not(Not(Not(malloc_ret_e_l == null_e_r))),455,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2022,"archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_333.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_333.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_333.cpp,136,"[""member"", ""unkown"", ""string""]","[""rmdir_ret"", ""null"", ""!=""]",Not(null_e_l == rmdir_ret_e_r),467,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1343,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_487.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Header CRC error"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_487.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_487.cpp,82,"[""member"", ""macro"", ""string""]","[""bool"", ""archive_le16dec_ret"", ""!=""]",Not(archive_le16dec_ret_e_l == bool_e_r),485,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,152,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Undefined option: `%s%s%s'"",
			    mod?mod:"""", mod?"":"":"""", opt);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_574.cpp,"{
			/* The option name is wrong. No-one used this. */
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Undefined option: `%s%s%s'"",
			    mod?mod:"""", mod?"":"":"""", opt);
			free(data);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_574.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_574.cpp,54,"[""struct archive *"", ""macro"", ""string"", ""null"", ""string"", ""null""]","[""use_option_ret"", ""macro"", ""==""]",macro_e_l == use_option_ret_e_r,489,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,224,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_606.cpp,"{
	case BZ_PARAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case BZ_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case BZ_CONFIG_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_606.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_606.cpp,61,[],"[""BZ2_bzCompressInit_ret""]",Not(BZ2_bzCompressInit_ret_e_l == null_e_r),492,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1407,"archive_set_error(&a->archive, errno,
				    ""Can't remove already-existing dir"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_631.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't remove already-existing dir"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_631.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_631.cpp,134,"[""member"", ""unkown"", ""string""]","[""disk_rmdir_ret"", ""null"", ""!=""]",Not(disk_rmdir_ret_e_l == null_e_r),494,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4955,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_707.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_707.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_707.cpp,246,"[""member"", ""macro"", ""string""]","[""archive_string_append_from_wcs_ret"", ""null"", ""<"", ""unkown"", ""macro"", ""=="", ""&&""]","And(macro_e_l == unkown_e_r,
    null_g_r < archive_string_append_from_wcs_ret_g_l)",500,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7404,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_734.cpp,"{
	case Z_OK:
		break;
	default:
	case Z_STREAM_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		return (ARCHIVE_FATAL);
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Internal error initializing ""
		    ""compression library"");
		return (ARCHIVE_FATAL);
	case Z_VERSION_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_734.cpp,"[0, 0, 0, 0, 1, 0, 3, 0, 4, 1, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_734.cpp,32,[],"[""deflateReset_ret""]",Not(deflateReset_ret_e_l == null_e_r),504,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8074,"archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_747.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);
			ret = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_747.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_747.cpp,56,"[""member"", ""unkown"", ""string"", ""read_ret""]","[""read_ret"", ""null"", ""<=""]",null_ge_r <= read_ret_ge_l,507,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1158,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_775.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_775.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_775.cpp,24,"[""member"", ""macro"", ""string""]","[""archive_encrypto_aes_ctr_update_ret"", ""null"", ""<""]",null_g_r < archive_encrypto_aes_ctr_update_ret_g_l,510,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,163,"archive_string_sprintf(&state->encoded_buff, ""begin %o %s\n"",
	    state->mode, state->name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_787.cpp,"{
	struct private_uuencode *state = (struct private_uuencode *)f->data;
	size_t bs = 65536, bpb;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != ARCHIVE_OK)
		return (ret);

	if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
		/* Buffer size should be a multiple number of the of bytes
		 * per block for performance. */
		bpb = archive_write_get_bytes_per_block(f->archive);
		if (bpb > bs)
			bs = bpb;
		else if (bpb != 0)
			bs -= bs % bpb;
	}

	state->bs = bs;
	if (archive_string_ensure(&state->encoded_buff, bs + 512) == NULL) {
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode buffer"");
		return (ARCHIVE_FATAL);
	}

	archive_string_sprintf(&state->encoded_buff, ""begin %o %s\n"",
	    state->mode, state->name.s);

	f->data = state;
	return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_787.cpp,"[5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 70, 0, 0, 3, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_787.cpp,28,"[""member"", ""string"", ""member"", ""member""]","[""archive_string_ensure_ret"", ""null"", ""=="", ""!""]",Not(archive_string_ensure_ret_e_l == null_e_r),514,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1260,"archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_814.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_814.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_814.cpp,250,"[""member"", ""macro"", ""string""]","[""__archive_ppmd7_functions . Ppmd7_Alloc_ret"", ""null"", ""==""]",__archive_ppmd7_functions . Ppmd7_Alloc_ret_e_l == null_e_r,517,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1446,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_821.cpp,"{
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(zip->bzstream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FAILED);
			}
			zip->bzstream_valid = 0;
			ret = ARCHIVE_EOF;
			break;
		case BZ_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_821.cpp,"[0, 0, 0, 0, 3, 0, 2, 1, 3, 2, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_821.cpp,140,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompress_ret""]",Not(BZ2_bzDecompress_ret_e_l == null_e_r),519,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2931,"archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_842.cpp,"archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_842.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_842.cpp,119,"[""member"", ""int"", ""string""]","[""null"", ""macro"", ""=="", ""!""]",Not(macro_e_l == null_e_r),520,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,178,"archive_set_error(&a->archive, errno,
					    ""Can't lstat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_882.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Can't lstat %s"", path);
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_882.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_882.cpp,31,"[""member"", ""unkown"", ""string"", ""archive_entry_sourcepath_ret""]","[""lstat_ret"", ""null"", ""!=""]",Not(lstat_ret_e_l == null_e_r),525,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,364,"archive_set_error(&a->archive, errno,
		    ""Could not open extended attribute file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_890.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not open extended attribute file"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_890.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_890.cpp,48,"[""member"", ""unkown"", ""string""]","[""mkstemp_ret"", ""null"", ""<""]",null_g_r < mkstemp_ret_g_l,527,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,624,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_898.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");
				return (r);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_898.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_898.cpp,174,"[""member"", ""unkown"", ""string""]","[""translate_acl_ret"", ""macro"", ""!=""]",Not(macro_e_l == translate_acl_ret_e_r),528,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1452,"archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_912.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_912.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_912.cpp,24,"[""member"", ""unkown"", ""string""]","[""fgetxattr_ret"", ""int"", ""==""]",fgetxattr_ret_e_l == int_e_r,531,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1925,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_928.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_928.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_928.cpp,52,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""int *"", ""null"", ""<""]",null_g_r < int *_g_l,533,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1588,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_980.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			goto exit_toc;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_980.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_980.cpp,91,"[""member"", ""macro"", ""string"", ""xmlTextWriterWriteAttribute_ret""]","[""xmlTextWriterWriteAttribute_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterWriteAttribute_ret_g_l,535,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1674,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_986.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_986.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_986.cpp,177,[],"[""xmlTextWriterWriteFormatAttribute_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterWriteFormatAttribute_ret_g_l,536,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2732,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1008.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1008.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1008.cpp,28,"[""struct archive *"", ""macro"", ""string""]","[""BZ2_bzCompressInit_ret"", ""macro"", ""!=""]",Not(BZ2_bzCompressInit_ret_e_l == macro_e_r),537,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2783,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1009.cpp,"{
	case BZ_RUN_OK:     /* Non-finishing */
	case BZ_FINISH_OK:  /* Finishing: There's more work to do */
		return (ARCHIVE_OK);
	case BZ_STREAM_END: /* Finishing: all done */
		/* Only occurs in finishing case */
		return (ARCHIVE_EOF);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1009.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 3, 1, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1009.cpp,40,[],"[""BZ2_bzCompress_ret""]",Not(BZ2_bzCompress_ret_e_l == null_e_r),538,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,146,"errmsg("" invoked with invalid archive handle.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1032.cpp,"{
		errmsg(""PROGRAMMER ERROR: Function "");
		errmsg(function);
		errmsg("" invoked with invalid archive handle.\n"");
		diediedie();
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1032.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1032.cpp,18,"[""string""]","[""archive_handle_type_name_ret"", ""!""]",Not(Not(archive_handle_type_name_ret_e_l == null_e_r)),540,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,440,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1231.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1231.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1231.cpp,20,"[""member"", ""macro"", ""string"", ""unsigned short"", ""size_t""]","[""int"", ""size_t"", "">""]",size_t_g_l > int_g_r,556,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1732,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1337.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1337.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1337.cpp,18,"[""member"", ""macro"", ""string""]","[""inflateEnd_ret"", ""macro"", ""!=""]",Not(inflateEnd_ret_e_l == macro_e_r),563,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1771,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of directory record"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1338.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of directory record"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1338.cpp,22,"[""member"", ""macro"", ""string""]","[""member"", ""int"", ""<""]",int_g_r < member_g_l,564,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2046,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1350.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid Rockridge CL"");
					goto fail;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1350.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1350.cpp,297,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""==""]",member_e_l == member_e_r,566,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,619,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: CRC32 error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1439.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: CRC32 error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1439.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1439.cpp,25,"[""member"", ""macro"", ""string""]","[""member"", ""archive_le32dec_ret"", ""!=""]",Not(archive_le32dec_ret_e_l == member_e_r),569,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1594,"fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1470.cpp,"{
			if (e[0] == '0')
				t->async_io = 0;
			else
				t->async_io = 1;
			fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1470.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1470.cpp,89,"[""unkown"", ""string"", ""string""]","[""getenv_ret"", ""null"", ""!=""]",Not(getenv_ret_e_l == null_e_r),570,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2178,"archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1477.cpp,"{
			la_dosmaperr(GetLastError());
			archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");
			if (h != INVALID_HANDLE_VALUE && fd < 0)
				CloseHandle(h);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1477.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1477.cpp,122,"[""member"", ""unkown"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]",GetFileInformationByHandle_ret_e_l == null_e_r,572,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,264,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1490.cpp,"{
	case Z_STREAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1490.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1490.cpp,84,[],"[""deflateInit2_ret""]",Not(deflateInit2_ret_e_l == null_e_r),573,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,425,"archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1525.cpp,"{
	static const char _ver[] = ""WARC/1.0\r\n"";
	static const char *_typ[LAST_WT] = {
		NULL, ""warcinfo"", ""metadata"", ""resource"", NULL
	};
	char std_uuid[48U];

	if (hdr.type == WT_NONE || hdr.type > WT_RSRC) {
		/* brilliant, how exactly did we get here? */
		return -1;
	}

	archive_strcpy(tgt, _ver);

	archive_string_sprintf(tgt, ""WARC-Type: %s\r\n"", _typ[hdr.type]);

	if (hdr.tgturi != NULL) {
		/* check if there's a xyz:// */
		static const char _uri[] = """";
		static const char _fil[] = ""file://"";
		const char *u;
		char *chk = strchr(hdr.tgturi, ':');

		if (chk != NULL && chk[1U] == '/' && chk[2U] == '/') {
			/* yep, it's definitely a URI */
			u = _uri;
		} else {
			/* hm, best to prepend file:// then */
			u = _fil;
		}
		archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);
	}

	/* record time is usually when the http is sent off,
	 * just treat the archive writing as such for a moment */
	xstrftime(tgt, ""WARC-Date: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.rtime);

	/* while we're at it, record the mtime */
	xstrftime(tgt, ""Last-Modified: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.mtime);

	if (hdr.recid == NULL) {
		/* generate one, grrrr */
		warc_uuid_t u;

		_gen_uuid(&u);
		/* Unfortunately, archive_string_sprintf does not
		 * handle the minimum number following '%'.
		 * So we have to use snprintf function here instead
		 * of archive_string_snprintf function. */
#if defined(_WIN32) && !defined(__CYGWIN__) && !( defined(_MSC_VER) && _MSC_VER >= 1900)
#define snprintf _snprintf
#endif
		snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);
		hdr.recid = std_uuid;
	}

	/* record-id is mandatory, fingers crossed we won't fail */
	archive_string_sprintf(tgt, ""WARC-Record-ID: %s\r\n"", hdr.recid);

	if (hdr.cnttyp != NULL) {
		archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);
	}

	/* next one is mandatory */
	archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);
	/**/
	archive_strncat(tgt, ""\r\n"", 2);

	return (archive_strlen(tgt) >= tsz)? -1: (ssize_t)archive_strlen(tgt);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1525.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 9, 143, 0, 0, 8, 8, 0, 0, 5, 35, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 91, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 6, 6, 2, 0, 18, 0, 0, 14, 0, 45, 3, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1525.cpp,73,"[""struct archive_string *"", ""string"", ""member""]","[""member"", ""macro"", ""=="", ""member"", ""macro"", "">"", ""||"", ""!""]","Not(Or(macro_g_l > member_g_r, macro_e_l == member_e_r))",575,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1006,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (body overflow)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1595.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (body overflow)"");
		return(ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1595.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1595.cpp,66,"[""member"", ""macro"", ""string""]","[""member"", ""member"", "">=""]",member_ge_l >= member_ge_r,581,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2173,"err = set_conversion_failed_error(a, tar->sconv, ""Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1625.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Uname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1625.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1625.cpp,34,"[""struct archive_read *"", ""member"", ""string""]","[""archive_entry_copy_uname_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_uname_l_ret_e_l == null_e_r),582,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2180,"err = set_conversion_failed_error(a, tar->sconv, ""Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1626.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Gname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1626.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1626.cpp,41,"[""struct archive_read *"", ""member"", ""string""]","[""archive_entry_copy_gname_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_gname_l_ret_e_l == null_e_r),583,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,881,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CAB header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1643.cpp,"{
	const unsigned char *p;
	struct cab *cab;
	struct cfheader *hd;
	size_t bytes, used;
	ssize_t len;
	int64_t skip;
	int err, i;
	int cur_folder, prev_folder;
	uint32_t offset32;
	
	a->archive.archive_format = ARCHIVE_FORMAT_CAB;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""CAB"";

	if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
		return (truncated_error(a));

	cab = (struct cab *)(a->format->data);
	if (cab->found_header == 0 &&
	    p[0] == 'M' && p[1] == 'Z') {
		/* This is an executable?  Must be self-extracting... */
		err = cab_skip_sfx(a);
		if (err < ARCHIVE_WARN)
			return (err);

		/* Re-read header after processing the SFX. */
		if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
			return (truncated_error(a));
	}

	cab->cab_offset = 0;
	/*
	 * Read CFHEADER.
	 */
	hd = &cab->cfheader;
	if (p[CFHEADER_signature+0] != 'M' || p[CFHEADER_signature+1] != 'S' ||
	    p[CFHEADER_signature+2] != 'C' || p[CFHEADER_signature+3] != 'F') {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Couldn't find out CAB header"");
		return (ARCHIVE_FATAL);
	}
	hd->total_bytes = archive_le32dec(p + CFHEADER_cbCabinet);
	hd->files_offset = archive_le32dec(p + CFHEADER_coffFiles);
	hd->minor = p[CFHEADER_versionMinor];
	hd->major = p[CFHEADER_versionMajor];
	hd->folder_count = archive_le16dec(p + CFHEADER_cFolders);
	if (hd->folder_count == 0)
		goto invalid;
	hd->file_count = archive_le16dec(p + CFHEADER_cFiles);
	if (hd->file_count == 0)
		goto invalid;
	hd->flags = archive_le16dec(p + CFHEADER_flags);
	hd->setid = archive_le16dec(p + CFHEADER_setID);
	hd->cabinet = archive_le16dec(p + CFHEADER_iCabinet);
	used = CFHEADER_iCabinet + 2;
	if (hd->flags & RESERVE_PRESENT) {
		uint16_t cfheader;
		cfheader = archive_le16dec(p + CFHEADER_cbCFHeader);
		if (cfheader > 60000U)
			goto invalid;
		hd->cffolder = p[CFHEADER_cbCFFolder];
		hd->cfdata = p[CFHEADER_cbCFData];
		used += 4;/* cbCFHeader, cbCFFolder and cbCFData */
		used += cfheader;/* abReserve */
	} else
		hd->cffolder = 0;/* Avoid compiling warning. */
	if (hd->flags & PREV_CABINET) {
		/* How many bytes are used for szCabinetPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	if (hd->flags & NEXT_CABINET) {
		/* How many bytes are used for szCabinetNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;
	used = 0;

	/*
	 * Read CFFOLDER.
	 */
	hd->folder_array = (struct cffolder *)calloc(
	    hd->folder_count, sizeof(struct cffolder));
	if (hd->folder_array == NULL)
		goto nomem;
	
	bytes = 8;
	if (hd->flags & RESERVE_PRESENT)
		bytes += hd->cffolder;
	bytes *= hd->folder_count;
	if ((p = __archive_read_ahead(a, bytes, NULL)) == NULL)
		return (truncated_error(a));
	offset32 = 0;
	for (i = 0; i < hd->folder_count; i++) {
		struct cffolder *folder = &(hd->folder_array[i]);
		folder->cfdata_offset_in_cab =
		    archive_le32dec(p + CFFOLDER_coffCabStart);
		folder->cfdata_count = archive_le16dec(p+CFFOLDER_cCFData);
		folder->comptype =
		    archive_le16dec(p+CFFOLDER_typeCompress) & 0x0F;
		folder->compdata =
		    archive_le16dec(p+CFFOLDER_typeCompress) >> 8;
		/* Get a compression name. */
		if (folder->comptype <
		    sizeof(compression_name) / sizeof(compression_name[0]))
			folder->compname = compression_name[folder->comptype];
		else
			folder->compname = ""UNKNOWN"";
		p += 8;
		used += 8;
		if (hd->flags & RESERVE_PRESENT) {
			p += hd->cffolder;/* abReserve */
			used += hd->cffolder;
		}
		/*
		 * Sanity check if each data is acceptable.
		 */
		if (offset32 >= folder->cfdata_offset_in_cab)
			goto invalid;
		offset32 = folder->cfdata_offset_in_cab;

		/* Set a request to initialize zlib for the CFDATA of
		 * this folder. */
		folder->decompress_init = 0;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;

	/*
	 * Read CFFILE.
	 */
	/* Seek read pointer to the offset of CFFILE if needed. */
	skip = (int64_t)hd->files_offset - cab->cab_offset;
	if (skip <  0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid offset of CFFILE %jd < %jd"",
		    (intmax_t)hd->files_offset, (intmax_t)cab->cab_offset);
		return (ARCHIVE_FATAL);
	}
	if (skip) {
		__archive_read_consume(a, skip);
		cab->cab_offset += skip;
	}
	/* Allocate memory for CFDATA */
	hd->file_array = (struct cffile *)calloc(
	    hd->file_count, sizeof(struct cffile));
	if (hd->file_array == NULL)
		goto nomem;

	prev_folder = -1;
	for (i = 0; i < hd->file_count; i++) {
		struct cffile *file = &(hd->file_array[i]);
		ssize_t avail;

		if ((p = __archive_read_ahead(a, 16, NULL)) == NULL)
			return (truncated_error(a));
		file->uncompressed_size = archive_le32dec(p + CFFILE_cbFile);
		file->offset = archive_le32dec(p + CFFILE_uoffFolderStart);
		file->folder = archive_le16dec(p + CFFILE_iFolder);
		file->mtime = cab_dos_time(p + CFFILE_date_time);
		file->attr = (uint8_t)archive_le16dec(p + CFFILE_attribs);
		__archive_read_consume(a, 16);

		cab->cab_offset += 16;
		if ((p = cab_read_ahead_remaining(a, 256, &avail)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p, avail-1)) <= 0)
			goto invalid;

		/* Copy a pathname.  */
		archive_string_init(&(file->pathname));
		archive_strncpy(&(file->pathname), p, len);
		__archive_read_consume(a, len + 1);
		cab->cab_offset += len + 1;

		/*
		 * Sanity check if each data is acceptable.
		 */
		if (file->uncompressed_size > 0x7FFF8000)
			goto invalid;/* Too large */
		if ((int64_t)file->offset + (int64_t)file->uncompressed_size
		    > ARCHIVE_LITERAL_LL(0x7FFF8000))
			goto invalid;/* Too large */
		switch (file->folder) {
		case iFoldCONTINUED_TO_NEXT:
			/* This must be last file in a folder. */
			if (i != hd->file_count -1)
				goto invalid;
			cur_folder = hd->folder_count -1;
			break;
		case iFoldCONTINUED_PREV_AND_NEXT:
			/* This must be only one file in a folder. */
			if (hd->file_count != 1)
				goto invalid;
			/* FALL THROUGH */
		case iFoldCONTINUED_FROM_PREV:
			/* This must be first file in a folder. */
			if (i != 0)
				goto invalid;
			prev_folder = cur_folder = 0;
			offset32 = file->offset;
			break;
		default:
			if (file->folder >= hd->folder_count)
				goto invalid;
			cur_folder = file->folder;
			break;
		}
		/* Dot not back track. */
		if (cur_folder < prev_folder)
			goto invalid;
		if (cur_folder != prev_folder)
			offset32 = 0;
		prev_folder = cur_folder;

		/* Make sure there are not any blanks from last file
		 * contents. */
		if (offset32 != file->offset)
			goto invalid;
		offset32 += file->uncompressed_size;

		/* CFDATA is available for file contents. */
		if (file->uncompressed_size > 0 &&
		    hd->folder_array[cur_folder].cfdata_count == 0)
			goto invalid;
	}

	if (hd->cabinet != 0 || hd->flags & (PREV_CABINET | NEXT_CABINET)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");
		return (ARCHIVE_WARN);
	}
	return (ARCHIVE_OK);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CAB header"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""Can't allocate memory for CAB data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1643.cpp,"[43, 0, 2, 0, 3, 0, 16, 1, 3, 1, 49, 2, 20, 0, 1, 633, 0, 0, 13, 16, 0, 0, 4, 77, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 266, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 15, 0, 46, 43, 2, 0, 60, 0, 0, 76, 0, 104, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1643.cpp,257,"[""member"", ""macro"", ""string""]","[""member"", ""int"", ""<"", ""null"", ""null"", ""!="", ""member"", ""null"", "">"", ""member"", ""null"", ""=="", ""&&"", ""null"", ""member"", ""!="", ""member"", ""constant"", "">"", ""member"", ""member"", "">="", ""cab_strnlen_ret"", ""null"", ""<="", ""member"", ""null"", ""=="", ""cab_strnlen_ret"", ""null"", ""<="", ""member"", ""int"", ""!="", ""cab_strnlen_ret"", ""null"", ""<="", ""member"", ""member"", ""!="", ""member"", ""member"", "">="", ""cab_strnlen_ret"", ""null"", ""<="", ""cab_strnlen_ret"", ""null"", ""<="", ""member"", ""null"", ""=="", ""archive_le16dec_ret"", ""constant"", "">"", ""unkown"", ""ARCHIVE_LITERAL_LL_ret"", "">"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(ARCHIVE_LITERAL_LL_ret_g_l >
                                        unkown_g_r,
                                        constant_g_l >
                                        archive_le16dec_ret_g_r),
                                        member_e_l ==
                                        null_e_r),
                                        null_ge_r <=
                                        cab_strnlen_ret_ge_l),
                                        null_ge_r <=
                                        cab_strnlen_ret_ge_l),
                                        member_ge_l >=
                                        member_ge_r),
                                        Not(member_e_l ==
                                        member_e_r)),
                                        null_ge_r <=
                                        cab_strnlen_ret_ge_l),
                                        Not(int_e_l ==
                                        member_e_r)),
                                    null_ge_r <=
                                    cab_strnlen_ret_ge_l),
                                member_e_l == null_e_r),
                            null_ge_r <=
                            cab_strnlen_ret_ge_l),
                        member_ge_l >= member_ge_r),
                    constant_g_l > member_g_r),
                Not(member_e_l == null_e_r)),
            And(member_e_l == null_e_r,
                null_g_l > member_g_r)),
        Not(null_e_l == null_e_r)),
    int_g_r < member_g_l)",584,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,495,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated ar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1716.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated ar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1716.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1716.cpp,17,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""null"", ""==""]",null_e_l == ssize_t_e_r,585,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,644,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=2"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1765.cpp,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=2"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1765.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1765.cpp,45,"[""char *"", ""string""]","[""uv__path_is_a_directory_ret"", ""null"", ""==""]",null_e_l == uv__path_is_a_directory_ret_e_r,587,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,646,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=1"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1766.cpp,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=1"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1766.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1766.cpp,47,"[""char *"", ""string""]","[""uv__path_is_a_directory_ret"", ""null"", ""=="", ""!""]",Not(null_e_l == uv__path_is_a_directory_ret_e_r),588,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,827,"snprintf(absolute_path, sizeof(absolute_path), ""%s"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1767.cpp,"{
    /* We have absolute pathname */
    snprintf(absolute_path, sizeof(absolute_path), ""%s"", filename);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1767.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1767.cpp,14,"[""char *"", ""unkown"", ""string"", ""const char *""]","[""member"", ""char"", ""==""]",char_e_l == member_e_r,589,3,,,,,
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2003,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_bytes()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1818.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1818.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1818.cpp,11,"[""string""]","[""cmListFileLexer_yyalloc_ret"", ""!""]",Not(Not(cmListFileLexer_yyalloc_ret_e_l == null_e_r)),590,3,,,,,
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,12,"fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2071.cpp,"{
    fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);
    fflush(fout);
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2071.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2071.cpp,8,"[""FILE *"", ""string"", ""const char *""]","[""stat_ret"", ""null"", ""!=""]",Not(null_e_l == stat_ret_e_r),599,3,,,,,
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/generator.cpp,14,"fprintf(stderr, ""Could not open output file \""%s\"""", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2082.cpp,"{
    fprintf(stderr, ""Could not open output file \""%s\"""", argv[1]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2082.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2082.cpp,10,"[""unkown"", ""string"", ""member""]","[""fopen_ret"", ""!""]",Not(Not(fopen_ret_e_l == null_e_r)),600,3,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,111,"printf(""Couldn't parse that input as a number\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2087.cpp,"{
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2087.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2087.cpp,19,"[""string""]","[""scanf_ret"", ""int"", ""!=""]",Not(int_e_l == scanf_ret_e_r),601,3,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,115,"printf(""%3d is an invalid test number.\n"", testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2088.cpp,"{
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2088.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2088.cpp,23,"[""string"", ""int""]","[""int"", ""unkown"", "">=""]",unkown_ge_l >= int_ge_r,602,3,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,129,"printf(""-R needs an additional parameter.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2089.cpp,"{
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2089.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2089.cpp,37,"[""string""]","[""int"", ""null"", ""!="", ""int"", ""int"", ""<"", ""&&""]","And(int_g_r < int_g_l, Not(int_e_l == null_e_r))",603,3,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,153,"printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2090.cpp,"{
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2090.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2090.cpp,61,[],"[""int"", ""null"", ""<"", ""int"", ""unkown"", "">="", ""||""]","Or(unkown_ge_l >= int_ge_r, null_g_r < int_g_l)",604,3,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,66,"printf(""got 0x%04X\n"", uc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2102.cpp,"{
    int used = static_cast<int>(e - entry.str);
    if (uc != entry.chr) {
      report_good(false, entry.str);
      printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);
      return false;
    }
    if (used != entry.n) {
      report_good(false, entry.str);
      printf(""had %d bytes, used %d\n"", entry.n, used);
      return false;
    }
    report_good(true, entry.str);
    printf(""got 0x%04X\n"", uc);
    return true;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2102.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 39, 0, 0, 1, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 8, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2102.cpp,17,"[""string"", ""unsigned int""]","[""int"", ""member"", ""!="", ""!""]",Not(Not(int_e_l == member_e_r)),605,3,,,,,
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,27,"printf(""Usage: %s <file>\n"", av[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2152.cpp,"{
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2152.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2152.cpp,3,"[""string"", ""member""]","[""int"", ""int"", ""<=""]",int_ge_r <= int_ge_l,612,3,,,,,
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,35,"printf(""File %s should be in subdirectory\n"", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2154.cpp,"{
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2154.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2154.cpp,11,"[""string"", ""member""]","[""FileExists_ret""]",Not(FileExists_ret_e_l == null_e_r),613,3,,,,,
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,29,"fprintf(stderr, ""TARGET_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2266.cpp,"{
      fprintf(stderr, ""TARGET_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));
      result = 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2266.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2266.cpp,21,"[""unkown"", ""string"", ""TO_STRING_ret""]","[""macro"", ""macro"", ""!=""]",Not(macro_e_l == macro_e_r),616,3,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,32,"fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_24.cpp,"){
      fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_24.cpp,7,"[""unkown"", ""string"", ""macro""]","[""LoadLibrary_ret"", ""null"", ""==""]",LoadLibrary_ret_e_l == null_e_r,446,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,133,"printf(""can't bz2openstream\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_29.cpp,"){
            printf(""can't bz2openstream\n"");
            exit(1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_29.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_29.cpp,65,"[""string""]","[""char * *"", ""null"", ""=="", ""BZ2_bzdopen_ret"", ""null"", ""=="", ""&&"", ""char * *"", ""null"", ""!="", ""BZ2_bzopen_ret"", ""null"", ""=="", ""&&"", ""||""]","Or(And(BZ2_bzopen_ret_e_l == null_e_r,
       Not(char * *_e_l == null_e_r)),
   And(BZ2_bzdopen_ret_e_l == null_e_r,
       char * *_e_l == null_e_r))",447,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,23,"printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_38.cpp,"{
      printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_38.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_38.cpp,16,"[""string""]","[""curl_easy_perform_ret"", ""null"", ""!=""]",Not(curl_easy_perform_ret_e_l == null_e_r),449,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,32,"printf(""Cannot create curl object\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_39.cpp,"{
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_39.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_39.cpp,25,"[""string""]","[""curl_easy_init_ret"", ""!""]",Not(Not(curl_easy_init_ret_e_l == null_e_r)),450,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,146,"path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_45.cpp,"{
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_45.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_45.cpp,77,"[""string"", ""size_t"", ""const unsigned char *""]","[""strchr_ret""]",Not(null_e_l == strchr_ret_e_r),451,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3109,"fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_63.cpp,"{
      /* only display handles that are not completed */
      fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);
      for(i=0; i < data->numsocks; i++) {
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }
      if(data->numsocks)
        fprintf(stderr, ""\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_63.cpp,"[2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 55, 0, 0, 2, 2, 0, 0, 3, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 5, 4, 2, 0, 6, 0, 0, 5, 0, 18, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_63.cpp,9,"[""unkown"", ""string"", ""member"", ""member"", ""member""]","[""member"", ""macro"", ""<""]",macro_g_r < member_g_l,452,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,4543,"data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_78.cpp,"{
        infof(data, ""Unwillingly accepted illegal URL using %d slash%s!\n"",
              s, s>1?""es"":"""");

        if(data->change.url_alloc)
          free(data->change.url);
        /* repair the URL to use two slashes */
        data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);
        if(!data->change.url)
          return CURLE_OUT_OF_MEMORY;
        data->change.url_alloc = TRUE;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_78.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 3, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_78.cpp,218,"[""string"", ""char *"", ""member"", ""char *""]","[""size_t"", ""int"", ""!=""]",Not(int_e_l == size_t_e_r),453,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,918,"len = curl_msnprintf(fptr, left, ""%ld"", width);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_129.cpp,"{
          if(width >= (long)sizeof(work))
            width = sizeof(work)-1;
          /* RECURSIVE USAGE */
          len = curl_msnprintf(fptr, left, ""%ld"", width);
          fptr += len;
          left -= len;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_129.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_129.cpp,361,"[""constant"", ""size_t"", ""string"", ""int""]","[""int"", ""null"", "">=""]",null_ge_l >= int_ge_r,454,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,431,"addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_175.cpp,"{
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_175.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_175.cpp,28,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""member"", ""unkown"", ""!="", ""||""]","Or(Not(member_e_l == unkown_e_r),
   Not(Not(null_e_l == readToken_ret_e_r)))",456,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,672,"addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_184.cpp,"return addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_184.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_184.cpp,10,"[""string"", ""Token &"", ""Location &""]","[""Location"", ""int"", ""<""]",int_g_r < Location_g_l,457,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_233.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_233.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_233.cpp,6,[],"[""bool"", ""bool"", ""!=""]",Not(bool_e_l == bool_e_r),458,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1431,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_257.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_257.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_257.cpp,18,"[""member"", ""macro"", ""string""]","[""inflateReset_ret"", ""macro"", ""!=""]",Not(inflateReset_ret_e_l == macro_e_r),459,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1500,"archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_259.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_259.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_259.cpp,87,[],"[""lzma_stream_decoder_ret"", ""enum enctype"", ""&&""]","And(Not(enum enctype_e_l == null_e_r),
    Not(lzma_stream_decoder_ret_e_l == null_e_r))",460,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1700,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_269.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_269.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_269.cpp,19,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompressEnd_ret"", ""macro"", ""!=""]",Not(BZ2_bzDecompressEnd_ret_e_l == macro_e_r),461,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3103,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_283.cpp,"{
	case XML_PARSER_SEVERITY_VALIDITY_WARNING:
	case XML_PARSER_SEVERITY_WARNING:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	case XML_PARSER_SEVERITY_VALIDITY_ERROR:
	case XML_PARSER_SEVERITY_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_283.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_283.cpp,11,"[""member"", ""macro"", ""string"", ""const char *""]","[""xmlParserSeverities""]",Not(null_e_l == xmlParserSeverities_e_r),462,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,560,"archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_296.cpp,"{
						archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);
						return (ARCHIVE_WARN);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_296.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_296.cpp,35,[],"[""size_t"", ""null"", "">""]",null_g_l > size_t_g_r,463,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,801,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_304.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_304.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_304.cpp,11,"[""member"", ""null"", ""string""]","[""member"", ""null"", ""=="", ""member"", ""null"", ""<"", ""||""]","Or(null_g_r < member_g_l, member_e_l == null_e_r)",464,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,932,"archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_308.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);
		compression_type = archive_le32dec(
		    &a->decmpfs_header_p[DECMPFS_COMPRESSION_TYPE]);
		if (compression_type == CMP_RESOURCE_FORK)
			fremovexattr(a->fd, XATTR_RESOURCEFORK_NAME,
			    XATTR_SHOWCOMPRESSION);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_308.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_308.cpp,9,"[""member"", ""unkown"", ""string"", ""macro""]","[""fsetxattr_ret"", ""null"", ""<""]",null_g_r < fsetxattr_ret_g_l,465,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2010,"archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_332.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_332.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_332.cpp,124,"[""member"", ""unkown"", ""string""]","[""unlink_ret"", ""null"", ""!=""]",Not(null_e_l == unlink_ret_e_r),466,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2350,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_337.cpp,"{
		case Z_OK:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");
			ret = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_337.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_337.cpp,31,"[""member"", ""macro"", ""string""]","[""deflateEnd_ret""]",Not(deflateEnd_ret_e_l == null_e_r),468,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2819,"fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_350.cpp,"{
		fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_350.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_350.cpp,9,"[""int *"", ""struct archive_string *"", ""macro"", ""string"", ""string""]","[""char *"", ""char"", ""==""]",char_e_l == char *_e_r,469,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3071,"archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_358.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_358.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_358.cpp,9,"[""member"", ""unkown"", ""string"", ""member""]","[""member"", ""null"", ""!="", ""member"", ""member"", ""!="", ""&&""]","And(Not(member_e_l == member_e_r),
    Not(member_e_l == null_e_r))",470,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3414,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_365.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_365.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_365.cpp,99,"[""member"", ""unkown"", ""string"", ""macro""]","[""fchmod_ret"", ""null"", ""!=""]",Not(fchmod_ret_e_l == null_e_r),471,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3754,"archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_370.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");
		ret = ARCHIVE_WARN;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_370.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_370.cpp,9,"[""member"", ""unkown"", ""string""]","[""flistxattr_ret"", ""int"", ""==""]",flistxattr_ret_e_l == int_e_r,472,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3871,"archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_380.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");
		close(tmpfd);
		tmpfd = -1;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_380.cpp,18,"[""member"", ""unkown"", ""string""]","[""copyfile_ret"", ""null"", ""<""]",null_g_r < copyfile_ret_g_l,473,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4137,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_390.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_390.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_390.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]",Not(null_e_l == strncmp_ret_e_r),474,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_393.cpp,"{
		warning_done = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_393.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_393.cpp,9,"[""member"", ""macro"", ""string""]","[""archive_entry_xattr_count_ret"", ""null"", ""!="", ""int"", ""!"", ""&&""]","And(Not(Not(int_e_l == null_e_r)),
    Not(archive_entry_xattr_count_ret_e_l == null_e_r))",475,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,405,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_407.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_407.cpp,68,"[""member"", ""macro"", ""string"", ""const char *""]","[""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||""]","Or(Or(Not(char_e_l == member_e_r),
      Not(And(char_ge_r <= member_ge_l,
              char_ge_l >= member_ge_r))),
   const char *_e_l == null_e_r)",476,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,693,"archive_set_error(&(a->archive), 0,
			    ""Truncated 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_412.cpp,"{
			archive_set_error(&(a->archive), 0,
			    ""Truncated 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_412.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_412.cpp,30,"[""member"", ""null"", ""string""]","[""read_ret"", ""null"", ""==""]",null_e_l == read_ret_e_r,477,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1762,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_421.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_421.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_421.cpp,12,"[""struct archive *"", ""macro"", ""string""]","[""deflateEnd_ret"", ""macro"", ""!=""]",Not(deflateEnd_ret_e_l == macro_e_r),478,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1884,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_425.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_425.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_425.cpp,12,"[""struct archive *"", ""macro"", ""string""]","[""BZ2_bzCompressEnd_ret"", ""macro"", ""!=""]",Not(BZ2_bzCompressEnd_ret_e_l == macro_e_r),479,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1980,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_431.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_431.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_431.cpp,72,[],"[""lzma_raw_encoder_ret""]",Not(lzma_raw_encoder_ret_e_l == null_e_r),480,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_add_passphrase.cpp,92,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_441.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_441.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_441.cpp,10,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""=="", ""member"", ""char"", ""=="", ""||""]","Or(char_e_l == member_e_r, const char *_e_l == null_e_r)",481,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1475,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed attribute \""%s\"" (%d)"", key, key[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_458.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed attribute \""%s\"" (%d)"", key, key[0]);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_458.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_458.cpp,30,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""strchr_ret"", ""null"", ""==""]",null_e_l == strchr_ret_e_r,482,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1659,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_460.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_460.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_460.cpp,214,[],"[""strcmp_ret"", ""null"", ""=="", ""!"", ""member"", ""&&""]","And(Not(member_e_l == null_e_r),
    Not(null_e_l == strcmp_ret_e_r))",483,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1162,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_482.cpp,"{
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");
            return (ARCHIVE_FAILED);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_482.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_482.cpp,73,"[""member"", ""macro"", ""string""]","[""archive_read_format_rar_read_header_ret"", ""macro"", ""!=""]",Not(archive_read_format_rar_read_header_ret_e_l == macro_e_r),484,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2143,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_515.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_515.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_515.cpp,83,"[""member"", ""macro"", ""string""]","[""__archive_ppmd7_functions . PpmdRAR_RangeDec_Init_ret"", ""!""]","Not(Not(__archive_ppmd7_functions . PpmdRAR_RangeDec_Init_ret_e_l ==
        null_e_r))",486,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,289,"archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_552.cpp,"{
	case LZMA_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_552.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_552.cpp,70,[],"[""lzma_stream_encoder_ret""]",Not(lzma_stream_encoder_ret_e_l == null_e_r),487,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,294,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_553.cpp,"{
	case LZMA_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_553.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_553.cpp,75,[],"[""lzma_stream_encoder_mt_ret""]",Not(lzma_stream_encoder_mt_ret_e_l == null_e_r),488,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,451,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_588.cpp,"{
	case LZO_E_OK:
		if (out_size == state->uncompressed_size)
			break;
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	case LZO_E_OUT_OF_MEMORY:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_588.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_588.cpp,94,"[""member"", ""macro"", ""string""]","[""lzo1x_decompress_safe_ret""]",Not(lzo1x_decompress_safe_ret_e_l == null_e_r),490,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,237,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_592.cpp,"{
		/* no good */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_592.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_592.cpp,28,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""null"", ""<""]",null_g_r < ssize_t_g_l,491,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,621,"archive_set_error(&a->archive, errno, ""Couldn't stat file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_621.cpp,"{
	if (a->pst != NULL) {
		/* Already have stat() data available. */
		return (ARCHIVE_OK);
	}
	if (a->fh != INVALID_HANDLE_VALUE &&
	    GetFileInformationByHandle(a->fh, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}

	/*
	 * XXX At this point, symlinks should not be hit, otherwise
	 * XXX a race occurred.  Do we want to check explicitly for that?
	 */
	if (file_information(a, a->name, &a->st, NULL, 1) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
	archive_set_error(&a->archive, errno, ""Couldn't stat file"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_621.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_621.cpp,21,"[""member"", ""unkown"", ""string""]","[""file_information_ret"", ""null"", ""=="", ""!""]",Not(file_information_ret_e_l == null_e_r),493,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,434,"archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_660.cpp,"{
		free(state->out_buf);
		archive_string_free(&state->description);
		free(state);
		archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_660.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_660.cpp,39,"[""member"", ""macro"", ""string"", ""const char *""]","[""__archive_create_child_ret"", ""int"", ""==""]",__archive_create_child_ret_e_l == int_e_r,495,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,352,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up gzip decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_668.cpp,"{
	case Z_OK:
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up gzip decompressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_668.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_668.cpp,14,"[""member"", ""macro"", ""string""]","[""inflateEnd_ret""]",Not(inflateEnd_ret_e_l == null_e_r),496,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1556,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_685.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_685.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_685.cpp,36,"[""member"", ""macro"", ""string""]","[""isofile_new_ret"", ""null"", ""==""]",isofile_new_ret_e_l == null_e_r,497,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1581,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_686.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_686.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_686.cpp,61,"[""member"", ""macro"", ""string""]","[""isoent_new_ret"", ""null"", ""==""]",isoent_new_ret_e_l == null_e_r,498,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,2248,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_692.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_692.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_692.cpp,18,"[""member"", ""macro"", ""string""]","[""archive_strncpy_l_ret"", ""null"", ""!="", ""unkown"", ""macro"", ""=="", ""&&""]","And(macro_e_l == unkown_e_r,
    Not(archive_strncpy_l_ret_e_l == null_e_r))",499,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5324,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_709.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_709.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_709.cpp,11,"[""member"", ""macro"", ""string""]","[""isoent_clone_ret"", ""null"", ""==""]",isoent_clone_ret_e_l == null_e_r,501,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5640,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_712.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				_isoent_free(isoent);
				*isoentpp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_712.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_712.cpp,92,"[""member"", ""macro"", ""string""]","[""isoent_create_virtual_dir_ret"", ""null"", ""==""]",isoent_create_virtual_dir_ret_e_l == null_e_r,502,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5709,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(f1->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_714.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(f1->entry));
		_isoent_free(isoent);
		*isoentpp = NULL;
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_714.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_714.cpp,161,[],"[""archive_entry_filetype_ret"", ""archive_entry_filetype_ret"", ""!=""]","Not(archive_entry_filetype_ret_e_l ==
    archive_entry_filetype_ret_e_r)",503,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7943,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_743.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_743.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_743.cpp,45,"[""member"", ""macro"", ""string""]","[""archive_le32dec_ret"", ""archive_le32dec_ret"", ""<""]",archive_le32dec_ret_g_r < archive_le32dec_ret_g_l,505,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7957,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_744.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_744.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_744.cpp,59,"[""member"", ""macro"", ""string""]","[""inflateInit_ret"", ""macro"", ""!=""]",Not(inflateInit_ret_e_l == macro_e_r),506,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,318,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_755.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_755.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_755.cpp,68,"[""member"", ""macro"", ""string""]","[""is_winzip_aes_encryption_supported_ret"", ""!""]","Not(Not(is_winzip_aes_encryption_supported_ret_e_l ==
        null_e_r))",508,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,528,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Filetype not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_764.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Filetype not supported"");
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_764.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_764.cpp,19,"[""member"", ""macro"", ""string""]","[""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""&&"", ""&&""]","And(And(Not(archive_entry_filetype_ret_e_l == macro_e_r),
        Not(archive_entry_filetype_ret_e_l == macro_e_r)),
    Not(archive_entry_filetype_ret_e_l == macro_e_r))",509,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1557,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_777.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_777.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_777.cpp,11,"[""member"", ""macro"", ""string""]","[""__archive_write_get_passphrase_ret"", ""null"", ""==""]",__archive_write_get_passphrase_ret_e_l == null_e_r,511,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1562,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_778.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_778.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_778.cpp,16,"[""member"", ""macro"", ""string""]","[""archive_random_ret"", ""macro"", ""!=""]",Not(archive_random_ret_e_l == macro_e_r),512,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1623,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_782.cpp,"{
		archive_encrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_782.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_782.cpp,42,"[""member"", ""macro"", ""string""]","[""archive_hmac_sha1_init_ret"", ""null"", ""!=""]",Not(archive_hmac_sha1_init_ret_e_l == null_e_r),513,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,815,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_795.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_795.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_795.cpp,32,"[""member"", ""macro"", ""string""]","[""read_stream_ret"", ""null"", ""==""]",null_e_l == read_stream_ret_e_r,515,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,835,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""7-Zip bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->si.ss.digests[
			    		zip->entry->ssIndex]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_796.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""7-Zip bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->si.ss.digests[
			    		zip->entry->ssIndex]);
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_796.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_796.cpp,52,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""bool"", ""member"", ""member"", ""!="", ""&&""]","And(Not(member_e_l == member_e_r),
    Not(bool_e_l == null_e_r))",516,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1358,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""BCJ2 conversion Failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_818.cpp,"{
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""BCJ2 conversion Failed"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_818.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_818.cpp,52,"[""member"", ""macro"", ""string""]","[""Bcj2_Decode_ret"", ""null"", ""<""]",null_g_r < Bcj2_Decode_ret_g_l,518,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3196,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_854.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_854.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_854.cpp,7,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<=""]",null_ge_r <= member_ge_l,521,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,252,"archive_set_error(&a->archive, -1, ""Filetype required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_866.cpp,"{
		archive_set_error(&a->archive, -1, ""Filetype required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_866.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_866.cpp,7,"[""member"", ""int"", ""string""]","[""archive_entry_filetype_ret"", ""null"", ""==""]",archive_entry_filetype_ret_e_l == null_e_r,522,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,258,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_867.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_867.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_867.cpp,13,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_l_ret"", ""null"", ""!="", ""unkown"", ""macro"", ""=="", ""&&""]","And(macro_e_l == unkown_e_r,
    Not(archive_entry_pathname_l_ret_e_l == null_e_r))",523,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,263,"archive_set_error(&a->archive, -1, ""Pathname required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_868.cpp,"{
		archive_set_error(&a->archive, -1, ""Pathname required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_868.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_868.cpp,18,"[""member"", ""int"", ""string""]","[""size_t"", ""null"", ""=="", ""const char *"", ""null"", ""=="", ""member"", ""char"", ""=="", ""||"", ""||""]","Or(Or(char_e_l == member_e_r, const char *_e_l == null_e_r),
   null_e_l == size_t_e_r)",524,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,339,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_888.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_888.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_888.cpp,23,"[""member"", ""macro"", ""string""]","[""archive_entry_sourcepath_ret"", ""null"", ""==""]",archive_entry_sourcepath_ret_e_l == null_e_r,526,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1220,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_903.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_903.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_903.cpp,58,"[""member"", ""unkown"", ""string""]","[""acl_get_entry_ret"", ""int"", ""==""]",acl_get_entry_ret_e_l == int_e_r,529,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1347,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_907.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_907.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_907.cpp,185,"[""member"", ""unkown"", ""string""]","[""acl_get_flagset_np_ret"", ""null"", ""!=""]",Not(acl_get_flagset_np_ret_e_l == null_e_r),530,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1687,"archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_923.cpp,"{
		archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_923.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_923.cpp,40,"[""member"", ""unkown"", ""string""]","[""ssize_t"", ""int"", ""==""]",int_e_l == ssize_t_e_r,532,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,805,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_946.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_946.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_946.cpp,27,"[""member"", ""macro"", ""string"", ""xmlTextWriterWriteString_ret""]","[""xmlTextWriterWriteString_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterWriteString_ret_g_l,534,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2859,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1013.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1013.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1013.cpp,36,[],"[""lzma_alone_encoder_ret""]",Not(lzma_alone_encoder_ret_e_l == null_e_r),539,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,151,"archive_set_error(a, -1,
		    ""PROGRAMMER ERROR: Function '%s' invoked""
		    "" on '%s' archive object, which is not supported."",
		    function,
		    handle_type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1033.cpp,"{
		archive_set_error(a, -1,
		    ""PROGRAMMER ERROR: Function '%s' invoked""
		    "" on '%s' archive object, which is not supported."",
		    function,
		    handle_type);
		a->state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1033.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1033.cpp,23,[],"[""member"", ""unsigned int"", ""!=""]",Not(member_e_l == unsigned int_e_r),541,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_set_format.cpp,98,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to set format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1062.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to set format"");
    r1 = (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1062.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1062.cpp,62,"[""member"", ""macro"", ""string""]","[""member"", ""!"", ""strcmp_ret"", ""||""]","Or(Not(null_e_l == strcmp_ret_e_r),
   Not(Not(member_e_l == null_e_r)))",542,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1082,"archive_set_error(&(a->archive), EINVAL, ""invalid date string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1101.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""invalid date string"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1101.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1101.cpp,11,"[""member"", ""macro"", ""string""]","[""get_date_ret"", ""int"", ""==""]",get_date_ret_e_l == int_e_r,543,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1192,"archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFile"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1108.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFile"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1108.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1108.cpp,14,"[""member"", ""unkown"", ""string""]","[""FindFirstFileW_ret"", ""macro"", ""==""]",FindFirstFileW_ret_e_l == macro_e_r,544,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,180,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1116.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1116.cpp,15,"[""member"", ""macro"", ""string"", ""unkown""]","[""unkown"", ""int"", ""!=""]",Not(int_e_l == unkown_e_r),545,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,494,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1132.cpp,"{
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");
			ret = ARCHIVE_FAILED;
			copy_length = USTAR_linkname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1132.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1132.cpp,110,"[""member"", ""macro"", ""string""]","[""size_t"", ""unkown"", "">""]",unkown_g_l > size_t_g_r,546,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,401,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1150.cpp,"{
		archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1150.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1150.cpp,23,"[""member"", ""macro"", ""string""]","[""unsigned int"", ""member"", "">""]",member_g_l > unsigned int_g_r,547,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1220,"archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for format registration"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1161.cpp,"{
	int i, number_slots;

	archive_check_magic(&a->archive,
	    ARCHIVE_READ_MAGIC, ARCHIVE_STATE_NEW,
	    ""__archive_read_register_format"");

	number_slots = sizeof(a->formats) / sizeof(a->formats[0]);

	for (i = 0; i < number_slots; i++) {
		if (a->formats[i].bid == bid)
			return (ARCHIVE_WARN); /* We've already installed */
		if (a->formats[i].bid == NULL) {
			a->formats[i].bid = bid;
			a->formats[i].options = options;
			a->formats[i].read_header = read_header;
			a->formats[i].read_data = read_data;
			a->formats[i].read_data_skip = read_data_skip;
			a->formats[i].seek_data = seek_data;
			a->formats[i].cleanup = cleanup;
			a->formats[i].data = format_data;
			a->formats[i].name = name;
			a->formats[i].format_capabilties = format_capabilities;
			a->formats[i].has_encrypted_entries = has_encrypted_entries;
			return (ARCHIVE_OK);
		}
	}

	archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for format registration"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1161.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 106, 0, 0, 1, 2, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 45, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 3, 2, 0, 0, 4, 0, 0, 14, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1161.cpp,41,"[""member"", ""macro"", ""string""]","[""null"", ""struct archive_read *"", ""<"", ""!""]",Not(struct archive_read *_g_r < null_g_l),548,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1751,"_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1169.cpp,"{
	const char *cur_charset = get_current_charset(a);
	char oemcp[16];

	/* NOTE: a check of cur_charset is unneeded but we need
	 * that get_current_charset() has been surely called at
	 * this time whatever C compiler optimized. */
	if (cur_charset != NULL &&
	    (a->current_codepage == CP_C_LOCALE ||
	     a->current_codepage == a->current_oemcp))
		return (NULL);/* no conversion. */

	_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);
	/* Make sure a null termination must be set. */
	oemcp[sizeof(oemcp)-1] = '\0';
	return (get_sconv_object(a, oemcp, cur_charset,
	    SCONV_FROM_CHARSET));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1169.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 34, 0, 0, 2, 2, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1169.cpp,14,"[""char *"", ""int"", ""string"", ""member""]","[""const char *"", ""null"", ""!="", ""member"", ""macro"", ""=="", ""member"", ""member"", ""=="", ""||"", ""&&"", ""!""]","Not(And(Or(member_e_l == member_e_r,
           macro_e_l == member_e_r),
        Not(const char *_e_l == null_e_r)))",549,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,887,"archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1202.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1202.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1202.cpp,36,"[""member"", ""unkown"", ""string"", ""tree_current_path_ret""]","[""tree_current_lstat_ret"", ""null"", ""==""]",null_e_l == tree_current_lstat_ret_e_r,550,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,917,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1203.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1203.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1203.cpp,66,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]",null_g_r < archive_match_path_excluded_ret_g_l,551,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1031,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1204.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1204.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1204.cpp,180,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]",null_g_r < archive_match_time_excluded_ret_g_l,552,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1057,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1205.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1205.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1205.cpp,206,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]",null_g_r < archive_match_owner_excluded_ret_g_l,553,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1625,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1216.cpp,"{
		archive_set_error(&a->archive, errno, ""fchdir failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1216.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1216.cpp,9,"[""member"", ""unkown"", ""string""]","[""tree_enter_working_dir_ret"", ""null"", ""!=""]",Not(null_e_l == tree_enter_working_dir_ret_e_r),554,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1645,"archive_set_error(&a->archive, errno, ""statvfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1217.cpp,"{
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, errno, ""statvfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1217.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1217.cpp,29,"[""member"", ""unkown"", ""string""]","[""fstatvfs_ret"", ""int"", ""=="", ""get_xfer_size_ret"", ""int"", ""=="", ""||""]","Or(get_xfer_size_ret_e_l == int_e_r,
   fstatvfs_ret_e_l == int_e_r)",555,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,457,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1233.cpp,"{
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1233.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1233.cpp,37,"[""member"", ""macro"", ""string""]","[""unsigned short"", ""int"", ""<"", ""archive_le64dec_ret"", ""macro"", "">"", ""||""]","Or(macro_g_l > archive_le64dec_ret_g_r,
   int_g_r < unsigned short_g_l)",557,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,946,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1246.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1246.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1246.cpp,193,"[""member"", ""macro"", ""string""]","[""member"", ""!"", ""member"", ""member"", ""!="", ""&&""]","And(Not(member_e_l == member_e_r),
    Not(Not(member_e_l == null_e_r)))",558,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1153,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1257.cpp,"{
			/* Zip archives have end-of-archive markers
			   that are longer than this, so a failure to get at
			   least 24 bytes really does indicate a truncated
			   file. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1257.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1257.cpp,26,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""ssize_t"", ""<""]",ssize_t_g_r < ssize_t_g_l,559,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1175,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1258.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1258.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1258.cpp,48,"[""member"", ""macro"", ""string""]","[""archive_le64dec_ret"", ""macro"", "">"", ""archive_le64dec_ret"", ""macro"", "">"", ""||""]","Or(macro_g_l > archive_le64dec_ret_g_r,
   macro_g_l > archive_le64dec_ret_g_r)",560,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1282,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1260.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1260.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1260.cpp,13,"[""member"", ""macro"", ""string""]","[""inflateInit2_ret"", ""macro"", ""!=""]",Not(inflateInit2_ret_e_l == macro_e_r),561,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1733,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1278.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1278.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1278.cpp,37,"[""member"", ""macro"", ""string""]","[""__archive_read_next_passphrase_ret"", ""null"", ""==""]",__archive_read_next_passphrase_ret_e_l == null_e_r,562,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1987,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1345.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1345.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1345.cpp,238,"[""member"", ""macro"", ""string""]","[""struct file_info *"", ""null"", ""=="", ""member"", ""null"", ""=="", ""||""]","Or(member_e_l == null_e_r,
   null_e_l == struct file_info *_e_r)",565,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2069,"fprintf(stderr, ""\n ** Unrecognized sequence number: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1354.cpp,"{
		fprintf(stderr, ""\n ** Unrecognized sequence number: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1354.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1354.cpp,320,"[""unkown"", ""string""]","[""toi_ret"", ""int"", ""!=""]",Not(int_e_l == toi_ret_e_r),567,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_grzip.cpp,81,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1425.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_grzip"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->bid = grzip_bidder_bid;
	reader->init = grzip_bidder_init;
	reader->options = NULL;
	reader->free = grzip_reader_free;
	/* This filter always uses an external program. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip decompression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1425.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1425.cpp,18,"[""struct archive *"", ""macro"", ""string""]","[""__archive_read_get_bidder_ret"", ""macro"", ""!="", ""!""]",Not(Not(__archive_read_get_bidder_ret_e_l == macro_e_r)),568,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2123,"archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1474.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1474.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1474.cpp,67,"[""member"", ""unkown"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]",CreateFileW_ret_e_l == macro_e_r,571,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,257,"archive_set_error(&a->archive, EINVAL,
				    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1503.cpp,"{
				archive_set_error(&a->archive, EINVAL,
				    ""Invalid string table"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1503.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1503.cpp,113,"[""member"", ""macro"", ""string""]","[""strstr_ret"", ""null"", ""==""]",null_e_l == strstr_ret_e_r,574,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,599,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1543.cpp,"{
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1543.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1543.cpp,122,"[""member"", ""macro"", ""string""]","[""LZ4_decompress_safe_ret"", ""null"", ""<""]",null_g_r < LZ4_decompress_safe_ret_g_l,576,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,829,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1569.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1569.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1569.cpp,50,"[""member"", ""macro"", ""string""]","[""lha_calcsum_ret"", ""member"", ""!=""]",Not(lha_calcsum_ret_e_l == member_e_r),577,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1012,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1573.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1573.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1573.cpp,43,"[""member"", ""macro"", ""string""]","[""lha_crc16_ret"", ""member"", ""!=""]",Not(lha_crc16_ret_e_l == member_e_r),578,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1465,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unsupported lzh compression method -%c%c%c-"",
			    lha->method[0], lha->method[1], lha->method[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1580.cpp,"{
		case ARCHIVE_OK:
			break;
		case ARCHIVE_FAILED:
        		/* Unsupported compression. */
			*buff = NULL;
			*size = 0;
			*offset = 0;
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unsupported lzh compression method -%c%c%c-"",
			    lha->method[0], lha->method[1], lha->method[2]);
			/* We know compressed size; just skip it. */
			archive_read_format_lha_read_data_skip(a);
			return (ARCHIVE_WARN);
		default:
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory ""
			    ""for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1580.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1580.cpp,19,"[""member"", ""macro"", ""string"", ""member"", ""member"", ""member""]","[""lzh_decode_init_ret""]",Not(lzh_decode_init_ret_e_l == null_e_r),579,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,982,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (count too large)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1593.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (count too large)"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1593.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1593.cpp,42,"[""member"", ""macro"", ""string""]","[""char"", ""int"", "">""]",int_g_l > char_g_r,580,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,389,"snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1759.cpp,"{
      snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);
      if (realpath(trypath, abspath) == abspath) {
        /* Check the match is executable */
        if (access(abspath, X_OK) == 0) {
          abspath_size = strlen(abspath);

          *size -= 1;
          if (*size > abspath_size)
            *size = abspath_size;

          memcpy(buffer, abspath, *size);
          buffer[*size] = '\0';

          uv__free(clonedpath);
          return 0;
        }
      }
      token = strtok(NULL, "":"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1759.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 30, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 0, 0, 8, 0, 0, 8, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1759.cpp,54,"[""char *"", ""int"", ""string"", ""strtok_ret"", ""char *""]","[""strtok_ret"", ""null"", ""!=""]",Not(null_e_l == strtok_ret_e_r),586,2,,,,,
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,819,"fprintf(stdout, ""%s\n"", kwsys_shared_forward_ldpath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1830.cpp,"{
        fprintf(stdout, ""%s\n"", kwsys_shared_forward_ldpath);
        fprintf(stdout, ""%s\n"", exe);
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1830.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1830.cpp,42,"[""unkown"", ""string"", ""unkown""]","[""int"", ""int"", "">"", ""strcmp_ret"", ""null"", ""=="", ""&&""]","And(null_e_l == strcmp_ret_e_r, int_g_l > int_g_r)",591,2,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,1117,"printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1954.cpp,"{
      case BOL:
        if (reginput != regbol)
          return (0);
        break;
      case EOL:
        if (*reginput != '\0')
          return (0);
        break;
      case ANY:
        if (*reginput == '\0')
          return (0);
        reginput++;
        break;
      case EXACTLY: {
        size_t len;
        const char* opnd;

        opnd = OPERAND(scan);
        // Inline the first character, for speed.
        if (*opnd != *reginput)
          return (0);
        len = strlen(opnd);
        if (len > 1 && strncmp(opnd, reginput, len) != 0)
          return (0);
        reginput += len;
      } break;
      case ANYOF:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) == 0)
          return (0);
        reginput++;
        break;
      case ANYBUT:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) != 0)
          return (0);
        reginput++;
        break;
      case NOTHING:
        break;
      case BACK:
        break;
      case OPEN + 1:
      case OPEN + 2:
      case OPEN + 3:
      case OPEN + 4:
      case OPEN + 5:
      case OPEN + 6:
      case OPEN + 7:
      case OPEN + 8:
      case OPEN + 9: {
        int no;
        const char* save;

        no = OP(scan) - OPEN;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set startp if some later invocation of the
          // same parentheses already has.
          //
          if (regstartp[no] == 0)
            regstartp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case CLOSE + 1:
      case CLOSE + 2:
      case CLOSE + 3:
      case CLOSE + 4:
      case CLOSE + 5:
      case CLOSE + 6:
      case CLOSE + 7:
      case CLOSE + 8:
      case CLOSE + 9: {
        int no;
        const char* save;

        no = OP(scan) - CLOSE;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set endp if some later invocation of the
          // same parentheses already has.
          //
          if (regendp[no] == 0)
            regendp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case BRANCH: {

        const char* save;

        if (OP(next) != BRANCH) // No choice.
          next = OPERAND(scan); // Avoid recursion.
        else {
          do {
            save = reginput;
            if (regmatch(OPERAND(scan)))
              return (1);
            reginput = save;
            scan = regnext(scan);
          } while (scan != 0 && OP(scan) == BRANCH);
          return (0);
          // NOTREACHED
        }
      } break;
      case STAR:
      case PLUS: {
        char nextch;
        int no;
        const char* save;
        int min_no;

        //
        // Lookahead to avoid useless match attempts when we know
        // what character comes next.
        //
        nextch = '\0';
        if (OP(next) == EXACTLY)
          nextch = *OPERAND(next);
        min_no = (OP(scan) == STAR) ? 0 : 1;
        save = reginput;
        no = regrepeat(OPERAND(scan));
        while (no >= min_no) {
          // If it could work, try it.
          if (nextch == '\0' || *reginput == nextch)
            if (regmatch(next))
              return (1);
          // Couldn't or didn't -- back up.
          no--;
          reginput = save + no;
        }
        return (0);
      }
      //              break;
      case END:
        return (1); // Success!

      default:
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");
        return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1954.cpp,"[16, 1, 0, 1, 9, 0, 17, 0, 30, 1, 27, 0, 0, 0, 5, 163, 0, 0, 11, 11, 0, 0, 0, 51, 0, 0, 0, 0, 5, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 1, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 19, 17, 4, 0, 24, 0, 0, 24, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1954.cpp,160,"[""string""]","[""OP_ret""]",Not(OP_ret_e_l == null_e_r),592,2,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/CommandLineArguments.cpp,543,"sprintf(argument, ""%s"", sit->c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1978.cpp,"{
      str << std::endl;
      char argument[100];
      sprintf(argument, ""%s"", sit->c_str());
      switch (this->Internals->Callbacks[*sit].ArgumentType) {
        case CommandLineArguments::NO_ARGUMENT:
          break;
        case CommandLineArguments::CONCAT_ARGUMENT:
          strcat(argument, ""opt"");
          break;
        case CommandLineArguments::SPACE_ARGUMENT:
          strcat(argument, "" opt"");
          break;
        case CommandLineArguments::EQUAL_ARGUMENT:
          strcat(argument, ""=opt"");
          break;
        case CommandLineArguments::MULTI_ARGUMENT:
          strcat(argument, "" opt opt ..."");
          break;
      }
      char buffer[80];
      sprintf(buffer, format, argument);
      str << buffer;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1978.cpp,"[0, 0, 0, 0, 5, 0, 0, 1, 5, 0, 2, 0, 0, 0, 0, 50, 0, 0, 2, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 7, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1978.cpp,78,"[""char *"", ""string"", ""sit -> c_str_ret""]","[""mpit -> second . begin_ret"", ""mpit -> second . end_ret"", ""!=""]","Not(mpit -> second . begin_ret_e_l ==
    mpit -> second . end_ret_e_r)",593,2,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,106,"sprintf(buf, ""%s*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1980.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1980.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1980.cpp,13,"[""int"", ""string"", ""name . c_str_ret""]","[""name . rbegin_ret"", ""char"", ""=="", ""name . rbegin_ret"", ""char"", ""=="", ""||""]","Or(char_e_l == name . rbegin_ret_e_r,
   char_e_l == name . rbegin_ret_e_r)",594,2,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4599,"sprintf(buffer, ""%ld"", osvi.dwMajorVersion);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1987.cpp,"{
        HKEY hKey;
#define BUFSIZE 80
        wchar_t szProductType[BUFSIZE];
        DWORD dwBufLen = BUFSIZE;
        LONG lRet;

        lRet =
          RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                        L""SYSTEM\\CurrentControlSet\\Control\\ProductOptions"",
                        0, KEY_QUERY_VALUE, &hKey);
        if (lRet != ERROR_SUCCESS) {
          return 0;
        }

        lRet = RegQueryValueExW(hKey, L""ProductType"", NULL, NULL,
                                (LPBYTE)szProductType, &dwBufLen);

        if ((lRet != ERROR_SUCCESS) || (dwBufLen > BUFSIZE)) {
          return 0;
        }

        RegCloseKey(hKey);

        if (lstrcmpiW(L""WINNT"", szProductType) == 0) {
          res += "" Workstation"";
        }
        if (lstrcmpiW(L""LANMANNT"", szProductType) == 0) {
          res += "" Server"";
        }
        if (lstrcmpiW(L""SERVERNT"", szProductType) == 0) {
          res += "" Advanced Server"";
        }

        res += "" "";
        sprintf(buffer, ""%ld"", osvi.dwMajorVersion);
        res += buffer;
        res += ""."";
        sprintf(buffer, ""%ld"", osvi.dwMinorVersion);
        res += buffer;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1987.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 58, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 12, 0, 24, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1987.cpp,181,"[""char *"", ""string"", ""member""]","[""LONG"", ""macro"", ""!="", ""DWORD"", ""macro"", "">"", ""||""]","Or(macro_g_l > DWORD_g_r, Not(LONG_e_l == macro_e_r))",595,2,,,,,
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,39,"fprintf(stdout, ""LoadResource worked\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2009.cpp,"{
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2009.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 60, 0, 0, 3, 3, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 56, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 3, 3, 2, 0, 14, 0, 0, 16, 0, 30, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2009.cpp,29,"[""unkown"", ""string""]","[""unkown"", ""unkown"", ""null"", "">"", ""&&""]","And(null_g_l > unkown_g_r, Not(null_e_l == unkown_e_r))",596,2,,,,,
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,17,"fprintf(stderr, ""Unable to close %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2029.cpp,"{
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2029.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2029.cpp,14,"[""unkown"", ""string"", ""member""]","[""fclose_ret""]",Not(fclose_ret_e_l == null_e_r),597,2,,,,,
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,21,"fprintf(stdout, "">> Creating %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2030.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Missing name of file to create.\n"");
    return EXIT_FAILURE;
  }

  FILE* stream = fopen(argv[1], ""w"");
  if (stream == NULL) {
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  if (fclose(stream)) {
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  fprintf(stdout, "">> Creating %s!\n"", argv[1]);

  return EXIT_SUCCESS;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2030.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 28, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 3, 0, 0, 6, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2030.cpp,18,"[""unkown"", ""string"", ""member""]","[""fclose_ret"", ""!""]",Not(Not(fclose_ret_e_l == null_e_r)),598,2,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,20,"printf(""Problem with lib1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2116.cpp,"{
    printf(""Problem with lib1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2116.cpp,3,"[""string""]","[""Lib1Func_ret"", ""constant"", ""!=""]",Not(Lib1Func_ret_e_l == constant_e_r),606,2,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,24,"printf(""Problem with lib2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2117.cpp,"{
    printf(""Problem with lib2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2117.cpp,7,"[""string""]","[""Lib2Func_ret"", ""constant"", ""!=""]",Not(Lib2Func_ret_e_l == constant_e_r),607,2,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,28,"printf(""Problem with lib4\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2118.cpp,"{
    printf(""Problem with lib4\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2118.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2118.cpp,11,"[""string""]","[""Lib4Func_ret"", ""constant"", ""!=""]",Not(Lib4Func_ret_e_l == constant_e_r),608,2,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,31,"printf(""The value of Foo: %s\n"", foo);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2119.cpp,"{
  if (Lib1Func() != 2.0) {
    printf(""Problem with lib1\n"");
    return 1;
  }
  if (Lib2Func() != 1.0) {
    printf(""Problem with lib2\n"");
    return 1;
  }
  if (Lib4Func() != 4.0) {
    printf(""Problem with lib4\n"");
    return 1;
  }
  printf(""The value of Foo: %s\n"", foo);
  return SomeFunctionInFoo() - 5;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2119.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2119.cpp,14,"[""string"", ""unkown""]","[""Lib4Func_ret"", ""constant"", ""!="", ""!""]",Not(Not(Lib4Func_ret_e_l == constant_e_r)),609,2,,,,,
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,76,"sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2145.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2145.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2145.cpp,63,"[""char *"", ""string"", ""info -> CAPI -> GetCacheMajorVersion_ret"", ""info -> CAPI -> GetCacheMinorVersion_ret"", ""info -> CAPI -> GetMajorVersion_ret"", ""info -> CAPI -> GetMinorVersion_ret""]","[""info -> CAPI -> IsOn_ret"", ""!"", ""!""]",Not(Not(Not(info -> CAPI -> IsOn_ret_e_l == null_e_r))),610,2,,,,,
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,107,"sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2148.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2148.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2148.cpp,94,"[""char *"", ""string"", ""info -> CAPI -> SourceFileGetProperty_ret""]","[""info -> CAPI -> SourceFileGetPropertyAsBool_ret"", ""!""]","Not(Not(info -> CAPI -> SourceFileGetPropertyAsBool_ret_e_l ==
        null_e_r))",611,2,,,,,
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,11,"printf(""Problem with libc1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2168.cpp,"{
    printf(""Problem with libc1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2168.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2168.cpp,4,"[""string""]","[""LibC1Func_ret"", ""constant"", ""!=""]",Not(LibC1Func_ret_e_l == constant_e_r),614,2,,,,,
second/download/CMake/CMake/CMake/Tests/CxxOnly/cxxonly.cpp,14,"printf(""Problem with libcxx1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2181.cpp,"{
    printf(""Problem with libcxx1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2181.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2181.cpp,6,"[""string""]","[""LibCxx1Class :: Method_ret"", ""constant"", ""!=""]",Not(LibCxx1Class :: Method_ret_e_l == constant_e_r),615,2,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,47,"fprintf(stderr,""GetProcAddress failed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_25.cpp,"{
      fprintf(stderr,""GetProcAddress failed.\n"");
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_25.cpp,22,"[""unkown"", ""string""]","[""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""GetProcAddress_ret"", ""!"", ""||"", ""||"", ""||"", ""||"", ""||"", ""||"", ""||""]","Or(Or(Or(Or(Or(Or(Or(Not(Not(GetProcAddress_ret_e_l ==
                             null_e_r)),
                     Not(Not(GetProcAddress_ret_e_l ==
                             null_e_r))),
                  Not(Not(GetProcAddress_ret_e_l == null_e_r))),
               Not(Not(GetProcAddress_ret_e_l == null_e_r))),
            Not(Not(GetProcAddress_ret_e_l == null_e_r))),
         Not(Not(GetProcAddress_ret_e_l == null_e_r))),
      Not(Not(GetProcAddress_ret_e_l == null_e_r))),
   Not(Not(GetProcAddress_ret_e_l == null_e_r)))",0,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,77,"fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_26.cpp,"){
      fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);
      exit(1);
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_26.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_26.cpp,9,"[""unkown"", ""string"", ""macro""]","[""BZ2DLLLoadLibrary_ret"", ""null"", ""<""]",null_g_r < BZ2DLLLoadLibrary_ret_g_l,1,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,113,"fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_32.cpp,"{
           fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );
           return 1;
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_32.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_32.cpp,40,"[""unkown"", ""string"", ""fread_ret"", ""macro""]","[""macro"", ""fread_ret"", ""!=""]",Not(fread_ret_e_l == macro_e_r),2,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,56,"sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_41.cpp,"{
      sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_41.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_41.cpp,18,"[""char *"", ""string"", ""getenv_ret""]","[""getenv_ret"", ""!""]",Not(Not(getenv_ret_e_l == null_e_r)),3,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,161,"*allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_46.cpp,"{
  CURLcode result;
  struct Curl_easy *data = conn->data;
  unsigned char *path = NULL;
  char *tmp = NULL;
  char *response;
  size_t len;
  bool have_chlg;

  /* Point to the address of the pointer that holds the string to send to the
     server, which is for a plain host or for a HTTP proxy */
  char **allocuserpwd;

  /* Point to the name and password for this */
  const char *userp;
  const char *passwdp;

  /* Point to the correct struct with this */
  struct digestdata *digest;
  struct auth *authp;

  if(proxy) {
    digest = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->http_proxy.user;
    passwdp = conn->http_proxy.passwd;
    authp = &data->state.authproxy;
  }
  else {
    digest = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp = """";

  if(!passwdp)
    passwdp = """";

#if defined(USE_WINDOWS_SSPI)
  have_chlg = digest->input_token ? TRUE : FALSE;
#else
  have_chlg = digest->nonce ? TRUE : FALSE;
#endif

  if(!have_chlg) {
    authp->done = FALSE;
    return CURLE_OK;
  }

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle) {
    tmp = strchr((char *)uripath, '?');
    if(tmp) {
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }
  }
  if(!tmp)
    path = (unsigned char *) strdup((char *) uripath);

  if(!path)
    return CURLE_OUT_OF_MEMORY;

  result = Curl_auth_create_digest_http_message(data, userp, passwdp, request,
                                                path, digest, &response, &len);
  free(path);
  if(result)
    return result;

  *allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);
  free(response);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  authp->done = TRUE;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_46.cpp,"[11, 0, 0, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 2, 166, 0, 0, 13, 13, 0, 0, 4, 7, 0, 0, 0, 0, 10, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 3, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 13, 13, 5, 0, 9, 0, 0, 24, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_46.cpp,92,"[""string"", ""string"", ""char *""]","[""Curl_auth_create_digest_http_message_ret"", ""!""]","Not(Not(Curl_auth_create_digest_http_message_ret_e_l ==
        null_e_r))",4,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,196,"stringp = aprintf(""%s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_47.cpp,"{
    /* this really shouldn't be repeated here, but can't help it */
    if(service == srv_host) {
      result = Curl_ftpsend(conn, ""AUTH GSSAPI"");
      if(result)
        return -2;

      if(Curl_GetFTPResponse(&nread, conn, NULL))
        return -1;

      if(data->state.buffer[0] != '3')
        return -1;
    }

    stringp = aprintf(""%s@%s"", service, host);
    if(!stringp)
      return -2;

    input_buffer.value = stringp;
    input_buffer.length = strlen(stringp);
    maj = gss_import_name(&min, &input_buffer, GSS_C_NT_HOSTBASED_SERVICE,
                          &gssname);
    free(stringp);
    if(maj != GSS_S_COMPLETE) {
      gss_release_name(&min, &gssname);
      if(service == srv_host) {
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }
      service = srv_host;
      continue;
    }
    /* We pass NULL as |output_name_type| to avoid a leak. */
    gss_display_name(&min, gssname, &output_buffer, NULL);
    Curl_infof(data, ""Trying against %s\n"", output_buffer.value);
    gssresp = GSS_C_NO_BUFFER;
    *context = GSS_C_NO_CONTEXT;

    do {
      /* Release the buffer at each iteration to avoid leaking: the first time
         we are releasing the memory from gss_display_name. The last item is
         taken care by a final gss_release_buffer. */
      gss_release_buffer(&min, &output_buffer);
      ret = AUTH_OK;
      maj = Curl_gss_init_sec_context(data,
                                      &min,
                                      context,
                                      gssname,
                                      &Curl_krb5_mech_oid,
                                      &chan,
                                      gssresp,
                                      &output_buffer,
                                      TRUE,
                                      NULL);

      if(gssresp) {
        free(_gssresp.value);
        gssresp = NULL;
      }

      if(GSS_ERROR(maj)) {
        Curl_infof(data, ""Error creating security context\n"");
        ret = AUTH_ERROR;
        break;
      }

      if(output_buffer.length != 0) {
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }
    } while(maj == GSS_S_CONTINUE_NEEDED);

    gss_release_name(&min, &gssname);
    gss_release_buffer(&min, &output_buffer);

    if(gssresp)
      free(_gssresp.value);

    if(ret == AUTH_OK || service == srv_host)
      return ret;

    service = srv_host;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_47.cpp,"[19, 0, 0, 1, 6, 1, 6, 0, 0, 0, 22, 0, 0, 0, 0, 198, 0, 0, 1, 1, 0, 0, 0, 25, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 20, 19, 1, 0, 30, 0, 0, 41, 0, 76, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_47.cpp,52,"[""string"", ""const char *"", ""const char *""]","[""const char *"", ""const char *"", ""=="", ""!"", ""member"", ""char"", ""!="", ""!"", ""&&""]","And(Not(Not(char_e_l == member_e_r)),
    Not(const char *_e_l == const char *_e_r))",5,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,208,"Curl_failf(data, ""Error importing service name %s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_48.cpp,"{
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_48.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_48.cpp,64,"[""struct Curl_easy *"", ""string"", ""const char *"", ""const char *""]","[""const char *"", ""const char *"", ""==""]",const char *_e_l == const char *_e_r,6,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,260,"cmd = aprintf(""ADAT %s"", p);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_49.cpp,"{
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_49.cpp,"[7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 81, 0, 0, 1, 1, 0, 0, 0, 13, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 7, 7, 1, 0, 12, 0, 0, 17, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_49.cpp,116,"[""string"", ""strstr_ret""]","[""Curl_base64_encode_ret"", ""!""]",Not(Not(Curl_base64_encode_ret_e_l == null_e_r)),7,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,291,"Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_50.cpp,"{
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_50.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_50.cpp,147,"[""struct Curl_easy *"", ""string"", ""curl_easy_strerror_ret""]","[""Curl_base64_decode_ret""]",Not(Curl_base64_decode_ret_e_l == null_e_r),8,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http2.cpp,874,"h = aprintf(""%s:%s"", name, value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_52.cpp,"{
    char *h;

    if(!stream->push_headers) {
      stream->push_headers_alloc = 10;
      stream->push_headers = malloc(stream->push_headers_alloc *
                                    sizeof(char *));
      stream->push_headers_used = 0;
    }
    else if(stream->push_headers_used ==
            stream->push_headers_alloc) {
      char **headp;
      stream->push_headers_alloc *= 2;
      headp = Curl_saferealloc(stream->push_headers,
                               stream->push_headers_alloc * sizeof(char *));
      if(!headp) {
        stream->push_headers = NULL;
        return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
      }
      stream->push_headers = headp;
    }
    h = aprintf(""%s:%s"", name, value);
    if(h)
      stream->push_headers[stream->push_headers_used++] = h;
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_52.cpp,"[4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 61, 0, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 24, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 4, 4, 0, 0, 5, 0, 0, 9, 1, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_52.cpp,50,"[""string"", ""const uint8_t *"", ""const uint8_t *""]","[""member"", ""!"", ""!"", ""member"", ""member"", ""=="", ""!"", ""Curl_saferealloc_ret"", ""!"", ""!"", ""&&"", ""&&""]","And(And(Not(Not(Not(Curl_saferealloc_ret_e_l == null_e_r))),
        Not(member_e_l == member_e_r)),
    Not(Not(Not(member_e_l == null_e_r))))",9,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/if2ip.cpp,177,"snprintf(buf, buf_size, ""%s%s"", ip, scope);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_54.cpp,"{
            void *addr;
            char *ip;
            char scope[12] = """";
            char ipstr[64];
#ifdef ENABLE_IPV6
            if(af == AF_INET6) {
              unsigned int scopeid = 0;
              unsigned int ifscope = Curl_ipv6_scope(iface->ifa_addr);

              if(ifscope != remote_scope) {
                /* We are interested only in interface addresses whose
                   scope matches the remote address we want to
                   connect to: global for global, link-local for
                   link-local, etc... */
                if(res == IF2IP_NOT_FOUND) res = IF2IP_AF_NOT_SUPPORTED;
                continue;
              }

              addr =
                &((struct sockaddr_in6 *)(void *)iface->ifa_addr)->sin6_addr;
#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
              /* Include the scope of this interface as part of the address */
              scopeid = ((struct sockaddr_in6 *)(void *)iface->ifa_addr)
                            ->sin6_scope_id;

              /* If given, scope id should match. */
              if(remote_scope_id && scopeid != remote_scope_id) {
                if(res == IF2IP_NOT_FOUND)
                  res = IF2IP_AF_NOT_SUPPORTED;

                continue;
              }
#endif
              if(scopeid)
                snprintf(scope, sizeof(scope), ""%%%u"", scopeid);
            }
            else
#endif
              addr =
                  &((struct sockaddr_in *)(void *)iface->ifa_addr)->sin_addr;
            res = IF2IP_FOUND;
            ip = (char *) Curl_inet_ntop(af, addr, ipstr, sizeof(ipstr));
            snprintf(buf, buf_size, ""%s%s"", ip, scope);
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_54.cpp,"[6, 0, 0, 0, 1, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 77, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 36, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 6, 6, 1, 0, 6, 0, 0, 9, 0, 16, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_54.cpp,63,"[""char *"", ""int"", ""string"", ""Curl_inet_ntop_ret"", ""char *""]","[""int"", ""macro"", ""=="", ""!"", ""unsigned int"", ""member"", ""unsigned int"", ""!="", ""&&"", ""!"", ""&&""]","And(Not(And(Not(member_e_l == unsigned int_e_r),
            Not(null_e_l == unsigned int_e_r))),
    Not(int_e_l == macro_e_r))",10,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/asyn-thread.cpp,646,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_56.cpp,"{
  struct addrinfo hints;
  struct in_addr in;
  Curl_addrinfo *res;
  int error;
  char sbuf[12];
  int pf = PF_INET;
#ifdef CURLRES_IPV6
  struct in6_addr in6;
#endif /* CURLRES_IPV6 */

  *waitp = 0; /* default to synchronous response */

#ifndef USE_RESOLVE_ON_IPS
  /* First check if this is an IPv4 address string */
  if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
    /* This is a dotted IP address 123.123.123.123-style */
    return Curl_ip2addr(AF_INET, &in, hostname, port);

#ifdef CURLRES_IPV6
  /* check if this is an IPv6 address string */
  if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
    /* This is an IPv6 address literal */
    return Curl_ip2addr(AF_INET6, &in6, hostname, port);
#endif /* CURLRES_IPV6 */
#endif /* !USE_RESOLVE_ON_IPS */

#ifdef CURLRES_IPV6
  /*
   * Check if a limited name resolve has been requested.
   */
  switch(conn->ip_version) {
  case CURL_IPRESOLVE_V4:
    pf = PF_INET;
    break;
  case CURL_IPRESOLVE_V6:
    pf = PF_INET6;
    break;
  default:
    pf = PF_UNSPEC;
    break;
  }

  if((pf != PF_INET) && !Curl_ipv6works())
    /* The stack seems to be a non-IPv6 one */
    pf = PF_INET;
#endif /* CURLRES_IPV6 */

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = pf;
  hints.ai_socktype = conn->socktype;

  snprintf(sbuf, sizeof(sbuf), ""%d"", port);

  /* fire up a new resolver thread! */
  if(init_resolve_thread(conn, hostname, port, &hints)) {
    *waitp = 1; /* expect asynchronous response */
    return NULL;
  }

  /* fall-back to blocking version */
  infof(conn->data, ""init_resolve_thread() failed for %s; %s\n"",
        hostname, Curl_strerror(conn, ERRNO));

  error = Curl_getaddrinfo_ex(hostname, sbuf, &hints, &res);
  if(error) {
    infof(conn->data, ""getaddrinfo() failed for %s:%d; %s\n"",
          hostname, port, Curl_strerror(conn, SOCKERRNO));
    return NULL;
  }
  else {
    Curl_addrinfo_set_port(res, port);
  }

  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_56.cpp,"[5, 0, 0, 0, 3, 0, 5, 1, 2, 1, 8, 0, 0, 0, 0, 114, 0, 0, 7, 7, 0, 0, 1, 9, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 75, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 6, 5, 1, 0, 16, 0, 0, 14, 0, 46, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_56.cpp,56,"[""char *"", ""unkown"", ""string"", ""int""]","[""Curl_inet_pton_ret"", ""null"", "">"", ""!""]",Not(null_g_l > Curl_inet_pton_ret_g_r),11,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,584,"size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_60.cpp,"{
    size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);

    if(!size) {
      free(from);
      free(auth);

      return CURLE_OUT_OF_MEMORY;
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_60.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_60.cpp,37,[],"[""member"", ""member"", ""null"", "">"", ""&&""]","And(null_g_l > member_g_r, Not(member_e_l == null_e_r))",12,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3118,"fprintf(stderr, ""INTERNAL CONFUSION\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_65.cpp,"{
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_65.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_65.cpp,18,"[""unkown"", ""string""]","[""struct Curl_sh_entry *"", ""!""]",Not(Not(null_e_l == struct Curl_sh_entry *_e_r)),13,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3121,"fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_66.cpp,"{
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_66.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_66.cpp,21,"[""unkown"", ""string"", ""string"", ""string""]","[""struct Curl_sh_entry *"", ""!"", ""!""]",Not(Not(Not(null_e_l == struct Curl_sh_entry *_e_r))),14,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,653,"DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_73.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));
    free(data);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_73.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_73.cpp,17,"[""fprintf_ret""]","[""Curl_resolver_init_ret""]",Not(Curl_resolver_init_ret_e_l == null_e_r),15,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5999,"char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_82.cpp,"{
    /* check whether the URL's hostname matches */
    size_t hostname_to_match_len;
    char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");
    if(!hostname_to_match)
      return CURLE_OUT_OF_MEMORY;
    hostname_to_match_len = strlen(hostname_to_match);
    host_match = strncasecompare(ptr, hostname_to_match,
                                 hostname_to_match_len);
    free(hostname_to_match);
    ptr += hostname_to_match_len;

    host_match = host_match && *ptr == ':';
    ptr++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_82.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 35, 0, 0, 2, 2, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 4, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_82.cpp,22,"[""string"", ""string"", ""member"", ""string""]","[""const char *"", ""char"", ""=="", ""!""]",Not(char_e_l == const char *_e_r),16,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,138,"printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_88.cpp,"{
    char  buf[INET6_ADDRSTRLEN];

    printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");
    if(Curl_printable_address(ai, buf, sizeof(buf)))
      printf(""%s\n"", buf);
    else
      printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_88.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 6, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_88.cpp,6,"[""string"", ""member"", ""member""]","[""const Curl_addrinfo *""]",Not(const Curl_addrinfo *_e_l == null_e_r),17,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,141,"printf(""%s\n"", buf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_89.cpp,"printf(""%s\n"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_89.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_89.cpp,9,"[""string"", ""char *""]","[""Curl_printable_address_ret""]",Not(Curl_printable_address_ret_e_l == null_e_r),18,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,143,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_90.cpp,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_90.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_90.cpp,11,"[""string"", ""Curl_strerror_ret""]","[""Curl_printable_address_ret"", ""!""]",Not(Not(Curl_printable_address_ret_e_l == null_e_r)),19,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,115,"len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_96.cpp,"{
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_96.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_96.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""idn2_check_version_ret""]","[""idn2_check_version_ret""]",Not(idn2_check_version_ret_e_l == null_e_r),20,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,973,"snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_108.cpp,"{
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_108.cpp,50,"[""member"", ""int"", ""string"", ""macro"", ""char *"", ""macro"", ""char *""]","[""sscanf_ret""]",Not(null_e_l == sscanf_ret_e_r),21,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,218,"DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_110.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_110.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_110.cpp,19,"[""fprintf_ret""]","[""Curl_ssl_init_ret"", ""!""]",Not(Not(Curl_ssl_init_ret_e_l == null_e_r)),22,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,224,"DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_111.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_111.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_111.cpp,25,"[""fprintf_ret""]","[""win32_init_ret""]",Not(null_e_l == win32_init_ret_e_r),23,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,230,"DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_112.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_112.cpp,31,"[""fprintf_ret""]","[""Curl_amiga_init_ret"", ""!""]",Not(Not(Curl_amiga_init_ret_e_l == null_e_r)),24,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,237,"DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_113.cpp,"{
    DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_113.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_113.cpp,38,"[""fprintf_ret""]","[""netware_init_ret""]",Not(netware_init_ret_e_l == null_e_r),25,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,242,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_114.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_114.cpp,43,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]",Not(Curl_resolver_global_init_ret_e_l == null_e_r),26,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,250,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_115.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_115.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]",Not(libssh2_init_ret_e_l == null_e_r),27,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,352,"DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_116.cpp,"{
      /* something in the global init failed, return nothing */
      DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));
      return NULL;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_116.cpp,10,"[""fprintf_ret""]","[""curl_global_init_ret""]",Not(curl_global_init_ret_e_l == null_e_r),28,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,360,"DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_117.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));
    return NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_117.cpp,18,"[""fprintf_ret""]","[""Curl_open_ret""]",Not(Curl_open_ret_e_l == null_e_r),29,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/pingpong.cpp,184,"s = vaprintf(fmt_crlf, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_119.cpp,"{
  ssize_t bytes_written;
  size_t write_len;
  char *fmt_crlf;
  char *s;
  CURLcode result;
  struct connectdata *conn = pp->conn;
  struct Curl_easy *data = conn->data;

#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  DEBUGASSERT(pp->sendleft == 0);
  DEBUGASSERT(pp->sendsize == 0);
  DEBUGASSERT(pp->sendthis == NULL);

  fmt_crlf = aprintf(""%s\r\n"", fmt); /* append a trailing CRLF */
  if(!fmt_crlf)
    return CURLE_OUT_OF_MEMORY;

  s = vaprintf(fmt_crlf, args); /* trailing CRLF appended */
  free(fmt_crlf);
  if(!s)
    return CURLE_OUT_OF_MEMORY;

  bytes_written = 0;
  write_len = strlen(s);

  Curl_pp_init(pp);

  result = Curl_convert_to_network(data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result) {
    free(s);
    return result;
  }

#ifdef HAVE_GSSAPI
  conn->data_prot = PROT_CMD;
#endif
  result = Curl_write(conn, conn->sock[FIRSTSOCKET], s, write_len,
                     &bytes_written);
#ifdef HAVE_GSSAPI
  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  conn->data_prot = data_sec;
#endif

  if(result) {
    free(s);
    return result;
  }

  if(conn->data->set.verbose)
    Curl_debug(conn->data, CURLINFO_HEADER_OUT,
               s, (size_t)bytes_written, conn);

  if(bytes_written != (ssize_t)write_len) {
    /* the whole chunk was not sent, keep it around and adjust sizes */
    pp->sendthis = s;
    pp->sendsize = write_len;
    pp->sendleft = write_len - bytes_written;
  }
  else {
    free(s);
    pp->sendthis = NULL;
    pp->sendleft = pp->sendsize = 0;
    pp->response = Curl_tvnow();
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_119.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 149, 0, 0, 8, 8, 0, 0, 3, 5, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 6, 6, 1, 0, 16, 0, 0, 24, 0, 27, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_119.cpp,24,"[""aprintf_ret"", ""va_list""]","[""aprintf_ret"", ""!"", ""!""]",Not(Not(Not(aprintf_ret_e_l == null_e_r))),30,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,212,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_120.cpp,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_120.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_120.cpp,12,"[""null"", ""int"", ""string"", ""unkown""]","[""malloc_ret"", ""const char *"", ""<""]",const char *_g_r < malloc_ret_g_l,31,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,249,"curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_121.cpp,"{
  long val = 0;
  size_t n = end - beg;

  /* Convert an ASN.1 integer value into its string representation.
     Return the dynamically allocated string, or NULL if source is not an
     ASN.1 integer value. */

  if(!n)
    return (const char *) NULL;

  if(n > 4)
    return octet2str(beg, end);

  /* Represent integers <= 32-bit as a single value. */
  if(*beg & 0x80)
    val = ~val;

  do
    val = (val << 8) | *(const unsigned char *) beg++;
  while(beg < end);
  return curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_121.cpp,"[3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 27, 0, 0, 2, 2, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 4, 1, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_121.cpp,22,"[""string"", ""string"", ""const char *""]","[""size_t"", ""int"", "">"", ""!""]",Not(int_g_l > size_t_g_r),32,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,542,"curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_123.cpp,"{
  const char *tzp;
  size_t tzl;
  const char *sec;

  /* Convert an ASN.1 UTC time to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */

  for(tzp = beg; tzp < end && *tzp >= '0' && *tzp <= '9'; tzp++)
    ;
  /* Get the seconds. */
  sec = beg + 10;
  switch(tzp - sec) {
  case 0:
    sec = ""00"";
  case 2:
    break;
  default:
    return (const char *) NULL;
  }

  /* Process timezone. */
  if(tzp >= end)
    return (const char *) NULL;
  if(*tzp == 'Z') {
    tzp = ""GMT"";
    end = tzp + 3;
  }
  else
    tzp++;

  tzl = end - tzp;
  return curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_123.cpp,"[2, 0, 1, 0, 1, 0, 3, 1, 2, 1, 6, 0, 0, 1, 4, 42, 0, 0, 3, 3, 0, 0, 1, 16, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 2, 1, 0, 1, 0, 0, 6, 0, 10, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_123.cpp,33,"[""string"", ""int"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""string"", ""string"", ""const char *""]","[""const char *"", ""const char *"", "">="", ""!""]",Not(const char *_ge_l >= const char *_ge_r),33,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1369,"fprintf(out, ""#\n# Fatal libcurl error\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_127.cpp,"{
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_127.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_127.cpp,36,"[""fopen_ret"", ""string""]","[""get_netscape_format_ret"", ""null"", ""==""]",get_netscape_format_ret_e_l == null_e_r,34,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1374,"fprintf(out, ""%s\n"", format_ptr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_128.cpp,"{
    if(!co->domain)
      continue;
    format_ptr = get_netscape_format(co);
    if(format_ptr == NULL) {
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }
    fprintf(out, ""%s\n"", format_ptr);
    free(format_ptr);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_128.cpp,"[3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_128.cpp,41,"[""fopen_ret"", ""string"", ""get_netscape_format_ret""]","[""get_netscape_format_ret"", ""null"", ""=="", ""!""]",Not(get_netscape_format_ret_e_l == null_e_r),35,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1012,"snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_138.cpp,"{
    str = txtbuf;
    snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);
    txtbuf[sizeof(txtbuf)-1] = '\0';

#ifdef _WIN32_WCE
    {
      wchar_t wbuf[256];
      wbuf[0] = L'\0';

      if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM |
                       FORMAT_MESSAGE_IGNORE_INSERTS,
                       NULL, err, LANG_NEUTRAL,
                       wbuf, sizeof(wbuf)/sizeof(wchar_t), NULL)) {
        wcstombs(msgbuf, wbuf, sizeof(msgbuf)-1);
        msg_formatted = TRUE;
      }
    }
#else
    if(FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |
                      FORMAT_MESSAGE_IGNORE_INSERTS,
                      NULL, err, LANG_NEUTRAL,
                      msgbuf, sizeof(msgbuf)-1, NULL)) {
      msg_formatted = TRUE;
    }
#endif
    if(msg_formatted) {
      msgbuf[sizeof(msgbuf)-1] = '\0';
      /* strip trailing '\r\n' or '\n' */
      p = strrchr(msgbuf, '\n');
      if(p && (p - msgbuf) >= 2)
        *p = '\0';
      p = strrchr(msgbuf, '\r');
      if(p && (p - msgbuf) >= 1)
        *p = '\0';
      msg = msgbuf;
    }
    if(msg)
      snprintf(outbuf, outmax, ""%s - %s"", str, msg);
    else
      strncpy(outbuf, str, outmax);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_138.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 73, 0, 0, 1, 1, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 66, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 6, 6, 2, 0, 15, 0, 0, 15, 0, 41, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_138.cpp,281,"[""char *"", ""unkown"", ""string"", ""string"", ""int""]","[""int"", ""macro"", ""=="", ""!""]",Not(int_e_l == macro_e_r),36,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,185,"host_port = aprintf(""%s:%hu"", hostname, remote_port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_141.cpp,"{
      /* BEGIN CONNECT PHASE */
      char *host_port;
      Curl_send_buffer *req_buffer;

      infof(data, ""Establish HTTP proxy tunnel to %s:%hu\n"",
            hostname, remote_port);

        /* This only happens if we've looped here due to authentication
           reasons, and we don't really use the newly cloned URL here
           then. Just free() it. */
      free(data->req.newurl);
      data->req.newurl = NULL;

      /* initialize a dynamic send-buffer */
      req_buffer = Curl_add_buffer_init();

      if(!req_buffer)
        return CURLE_OUT_OF_MEMORY;

      host_port = aprintf(""%s:%hu"", hostname, remote_port);
      if(!host_port) {
        Curl_add_buffer_free(req_buffer);
        return CURLE_OUT_OF_MEMORY;
      }

      /* Setup the proxy-authorization header, if any */
      result = Curl_http_output_auth(conn, ""CONNECT"", host_port, TRUE);

      free(host_port);

      if(!result) {
        char *host = NULL;
        const char *proxyconn="""";
        const char *useragent="""";
        const char *http = (conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0) ?
          ""1.0"" : ""1.1"";
        bool ipv6_ip = conn->bits.ipv6_ip;
        char *hostheader;

        /* the hostname may be different */
        if(hostname != conn->host.name)
          ipv6_ip = (strchr(hostname, ':') != NULL);
        hostheader= /* host:port with IPv6 support */
          aprintf(""%s%s%s:%hu"", ipv6_ip?""["":"""", hostname, ipv6_ip?""]"":"""",
                  remote_port);
        if(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }

        if(!Curl_checkProxyheaders(conn, ""Host:"")) {
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }
        if(!Curl_checkProxyheaders(conn, ""Proxy-Connection:""))
          proxyconn = ""Proxy-Connection: Keep-Alive\r\n"";

        if(!Curl_checkProxyheaders(conn, ""User-Agent:"") &&
           data->set.str[STRING_USERAGENT])
          useragent = conn->allocptr.uagent;

        result =
          Curl_add_bufferf(req_buffer,
                           ""CONNECT %s HTTP/%s\r\n""
                           ""%s""  /* Host: */
                           ""%s""  /* Proxy-Authorization */
                           ""%s""  /* User-Agent */
                           ""%s"", /* Proxy-Connection */
                           hostheader,
                           http,
                           host?host:"""",
                           conn->allocptr.proxyuserpwd?
                           conn->allocptr.proxyuserpwd:"""",
                           useragent,
                           proxyconn);

        if(host)
          free(host);
        free(hostheader);

        if(!result)
          result = Curl_add_custom_headers(conn, TRUE, req_buffer);

        if(!result)
          /* CRLF terminate the request */
          result = Curl_add_bufferf(req_buffer, ""\r\n"");

        if(!result) {
          /* Send the connect request to the proxy */
          /* BLOCKING */
          result =
            Curl_add_buffer_send(req_buffer, conn,
                                 &data->info.request_size, 0, sockindex);
        }
        req_buffer = NULL;
        if(result)
          failf(data, ""Failed sending CONNECT to proxy"");
      }

      Curl_add_buffer_free(req_buffer);
      if(result)
        return result;

      conn->tunnel_state[sockindex] = TUNNEL_CONNECT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_141.cpp,"[15, 0, 0, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 3, 161, 0, 0, 8, 8, 0, 0, 5, 28, 0, 0, 0, 0, 7, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 5, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 20, 20, 5, 0, 24, 0, 0, 26, 0, 55, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_141.cpp,46,"[""string"", ""const char *"", ""int""]","[""Curl_add_buffer_init_ret"", ""!"", ""!""]",Not(Not(Not(Curl_add_buffer_init_ret_e_l == null_e_r))),37,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,217,"host = aprintf(""Host: %s\r\n"", hostheader);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_143.cpp,"{
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_143.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_143.cpp,78,"[""string"", ""aprintf_ret""]","[""Curl_checkProxyheaders_ret"", ""!""]",Not(Not(Curl_checkProxyheaders_ret_e_l == null_e_r)),38,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/cram.cpp,121,"response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_149.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_149.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_149.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]",Not(Not(Not(Curl_HMAC_init_ret_e_l == null_e_r))),39,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,69,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_150.cpp,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_150.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_150.cpp,12,"[""string"", ""const char *"", ""const char *""]","[""const char *"", ""null"", ""=="", ""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||"", ""&&""]","And(Or(const long_e_l == int_e_r,
       const long_e_l == null_e_r),
    const char *_e_l == null_e_r)",40,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,71,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_151.cpp,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_151.cpp,14,"[""string"", ""const char *"", ""const char *"", ""const char *""]","[""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||""]","Or(const long_e_l == int_e_r, const long_e_l == null_e_r)",41,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,74,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_152.cpp,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_152.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_152.cpp,17,"[""string"", ""const char *"", ""const char *"", ""const long"", ""const char *""]","[""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||"", ""!""]","Not(Or(const long_e_l == int_e_r,
       const long_e_l == null_e_r))",42,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,495,"nickname = aprintf(""PEM Token #1:%s"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_159.cpp,"{
    /* we have successfully loaded a client certificate */
    CERTCertificate *cert;
    char *nickname = NULL;
    char *n = strrchr(filename, '/');
    if(n)
      n++;

    /* The following undocumented magic helps to avoid a SIGSEGV on call
     * of PK11_ReadRawAttribute() from SelectClientCert() when using an
     * immature version of libnsspem.so.  For more details, go to
     * <https://bugzilla.redhat.com/733685>. */
    nickname = aprintf(""PEM Token #1:%s"", n);
    if(nickname) {
      cert = PK11_FindCertFromNickname(nickname, NULL);
      if(cert)
        CERT_DestroyCertificate(cert);

      free(nickname);
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_159.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_159.cpp,24,"[""string"", ""char *""]","[""nss_create_object_ret"", ""!"", ""PRBool"", ""!"", ""&&""]","And(Not(Not(PRBool_e_l == null_e_r)),
    Not(Not(nss_create_object_ret_e_l == null_e_r)))",43,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1218,"config_string = aprintf(""library=%s name=%s"", library, name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_160.cpp,"{
  char *config_string;
  SECMODModule *module = *pmod;
  if(module)
    /* already loaded */
    return CURLE_OK;

  config_string = aprintf(""library=%s name=%s"", library, name);
  if(!config_string)
    return CURLE_OUT_OF_MEMORY;

  module = SECMOD_LoadUserModule(config_string, NULL, PR_FALSE);
  free(config_string);

  if(module && module->loaded) {
    /* loaded successfully */
    *pmod = module;
    return CURLE_OK;
  }

  if(module)
    SECMOD_DestroyModule(module);
  return CURLE_FAILED_INIT;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_160.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 31, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_160.cpp,9,"[""string"", ""const char *"", ""const char *""]","[""SECMODModule *"", ""!""]",Not(Not(SECMODModule *_e_l == null_e_r)),44,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1587,"char *fullpath = aprintf(""%s/%s"", capath, entry->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_162.cpp,"{
        char *fullpath = aprintf(""%s/%s"", capath, entry->name);
        if(!fullpath) {
          PR_CloseDir(dir);
          return CURLE_OUT_OF_MEMORY;
        }

        if(CURLE_OK != nss_load_cert(&conn->ssl[sockindex], fullpath, PR_TRUE))
          /* This is purposefully tolerant of errors so non-PEM files can
           * be in the same directory */
          infof(data, ""failed to load '%s' from CURLOPT_CAPATH\n"", fullpath);

        free(fullpath);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_162.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_162.cpp,57,"[""string"", ""const char *"", ""member""]","[""PR_ReadDir_ret""]",Not(PR_ReadDir_ret_e_l == null_e_r),45,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,225,"snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_165.cpp,"{
  struct tm buffer;
  const struct tm *tm = &buffer;
  char str[96];
  CURLcode result = Curl_gmtime(stamp, &buffer);
  if(result)
    return;

  snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);
  infof(data, ""%s\n"", str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_165.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 53, 0, 0, 4, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 28, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 2, 2, 1, 0, 4, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_165.cpp,11,"[""char *"", ""unkown"", ""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""CURLcode"", ""!""]",Not(Not(CURLcode_e_l == null_e_r)),46,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,109,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_167.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));
      return 0; /* pthread_mutex_lock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_167.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_167.cpp,7,"[""fprintf_ret""]","[""pthread_mutex_lock_ret""]",Not(null_e_l == pthread_mutex_lock_ret_e_r),47,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,134,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_169.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));
      return 0; /* pthread_mutex_unlock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_169.cpp,7,"[""fprintf_ret""]","[""pthread_mutex_unlock_ret""]",Not(null_e_l == pthread_mutex_unlock_ret_e_r),48,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmexpat/lib/xmlparse.cpp,797,"fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_171.cpp,"{
    fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_171.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_171.cpp,4,"[""unkown"", ""string"", ""const char *"", ""int"", ""unsigned long"", ""unkown""]","[""macro"", ""strcmp_ret"", ""!"", ""&&""]","And(Not(Not(null_e_l == strcmp_ret_e_r)),
    Not(macro_e_l == null_e_r))",49,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,139,"addError(
          ""A valid JSON document must be either an array or an object value."",
          token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_172.cpp,"{
      // Set error location to start of doc, ideally should be first token found
      // in doc
      token.type_ = tokenError;
      token.start_ = beginDoc;
      token.end_ = endDoc;
      addError(
          ""A valid JSON document must be either an array or an object value."",
          token);
      return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_172.cpp,32,"[""string"", ""const char *""]","[""root . isArray_ret"", ""!"", ""root . isObject_ret"", ""!"", ""&&""]","And(Not(Not(null_e_l == root . isObject_ret_e_r)),
    Not(Not(null_e_l == root . isArray_ret_e_r)))",50,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,234,"addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_174.cpp,"return addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_174.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_174.cpp,3,"[""const char *"", ""Token &""]","[""member"", ""TokenType"", ""!=""]",Not(TokenType_e_l == member_e_r),51,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,454,"addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_177.cpp,"{
  Token tokenName;
  std::string name;
  currentValue() = Value(objectValue);
  currentValue().setOffsetStart(tokenStart.start_ - begin_);
  while (readToken(tokenName)) {
    bool initialTokenOk = true;
    while (tokenName.type_ == tokenComment && initialTokenOk)
      initialTokenOk = readToken(tokenName);
    if (!initialTokenOk)
      break;
    if (tokenName.type_ == tokenObjectEnd && name.empty()) // empty object
      return true;
    name = """";
    if (tokenName.type_ == tokenString) {
      if (!decodeString(tokenName, name))
        return recoverFromError(tokenObjectEnd);
    } else if (tokenName.type_ == tokenNumber && features_.allowNumericKeys_) {
      Value numberName;
      if (!decodeNumber(tokenName, numberName))
        return recoverFromError(tokenObjectEnd);
      name = numberName.asString();
    } else {
      break;
    }

    Token colon;
    if (!readToken(colon) || colon.type_ != tokenMemberSeparator) {
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }
    Value& value = currentValue()[name];
    nodes_.push(&value);
    bool ok = readValue();
    nodes_.pop();
    if (!ok) // error already set
      return recoverFromError(tokenObjectEnd);

    Token comma;
    if (!readToken(comma) ||
        (comma.type_ != tokenObjectEnd && comma.type_ != tokenArraySeparator &&
         comma.type_ != tokenComment)) {
      return addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);
    }
    bool finalizeTokenOk = true;
    while (comma.type_ == tokenComment && finalizeTokenOk)
      finalizeTokenOk = readToken(comma);
    if (comma.type_ == tokenObjectEnd)
      return true;
  }
  return addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_177.cpp,"[10, 3, 0, 0, 2, 0, 8, 0, 0, 0, 15, 0, 0, 0, 0, 127, 0, 0, 9, 9, 0, 0, 4, 8, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 0, 13, 10, 1, 0, 23, 0, 0, 8, 1, 24, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_177.cpp,51,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""member"", ""unkown"", ""=="", ""member"", ""&&"", ""!"", ""readToken_ret"", ""!"", ""&&"", ""&&""]","And(And(Not(Not(null_e_l == readToken_ret_e_r)),
        Not(And(Not(member_e_l == null_e_r),
                member_e_l == unkown_e_r))),
    Not(Not(null_e_l == readToken_ret_e_r)))",52,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,486,"addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_178.cpp,"{
      return addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_178.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_178.cpp,28,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""bool"", ""||""]","Or(Not(bool_e_l == null_e_r),
   Not(Not(null_e_l == readToken_ret_e_r)))",53,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,528,"addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_179.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_179.cpp,23,"[""string"", ""Token &""]","[""Char"", ""char"", ""<"", ""Char"", ""char"", "">"", ""||""]","Or(char_g_l > Char_g_r, char_g_r < Char_g_l)",54,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,592,"addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_181.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_181.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_181.cpp,29,"[""string"", ""Token &""]","[""sscanf_ret"", ""int"", ""!=""]",Not(int_e_l == sscanf_ret_e_r),55,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,619,"addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_182.cpp,"return addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_182.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_182.cpp,10,"[""string"", ""Token &"", ""Char""]","[""Char"", ""Location"", ""==""]",Char_e_l == Location_e_r,56,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,653,"addError(""Bad escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_183.cpp,"{
      case '""':
        decoded += '""';
        break;
      case '/':
        decoded += '/';
        break;
      case '\\':
        decoded += '\\';
        break;
      case 'b':
        decoded += '\b';
        break;
      case 'f':
        decoded += '\f';
        break;
      case 'n':
        decoded += '\n';
        break;
      case 'r':
        decoded += '\r';
        break;
      case 't':
        decoded += '\t';
        break;
      case 'u': {
        unsigned int unicode;
        if (!decodeUnicodeCodePoint(token, current, end, unicode))
          return false;
        decoded += codePointToUTF8(unicode);
      } break;
      default:
        return addError(""Bad escape sequence in string"", token, current);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_183.cpp,"[1, 0, 0, 0, 9, 0, 2, 0, 9, 1, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_183.cpp,44,"[""string"", ""Token &"", ""Char""]","[""Char""]",Not(Char_e_l == null_e_r),57,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,683,"addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_185.cpp,"return addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_185.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_185.cpp,21,[],"[""decodeUnicodeEscapeSequence_ret"", ""Location &"", ""char"", ""=="", ""Location &"", ""char"", ""=="", ""&&"", ""!"", ""&&""]","And(Not(And(Location &_e_l == char_e_r,
            Location &_e_l == char_e_r)),
    Not(decodeUnicodeEscapeSequence_ret_e_l == null_e_r))",58,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,711,"addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_187.cpp,"return addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_187.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_187.cpp,20,"[""string"", ""Token &"", ""Char""]","[""Char"", ""char"", "">="", ""Char"", ""char"", ""<="", ""&&"", ""!""]","Not(And(char_ge_r <= Char_ge_l, char_ge_l >= Char_ge_r))",59,1,,,,,
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,27,"printf("", PASSED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_199.cpp,"{
    printf("", PASSED\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_199.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_199.cpp,14,"[""string""]","[""macro"", ""macro"", ""==""]",macro_e_l == macro_e_r,60,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,965,"archive_string_sprintf(str, "" nlink=%u"", me->nlink);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_212.cpp,"archive_string_sprintf(str, "" nlink=%u"", me->nlink)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_212.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_212.cpp,44,"[""member"", ""string"", ""member""]","[""bool"", ""null"", ""!="", ""member"", ""int"", ""!="", ""member"", ""macro"", ""!="", ""&&"", ""&&""]","And(And(Not(macro_e_l == member_e_r),
        Not(int_e_l == member_e_r)),
    Not(bool_e_l == null_e_r))",61,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1124,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_223.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_223.cpp,18,"[""member"", ""macro"", ""string""]","[""attr_counter_set_collect_ret"", ""null"", ""<""]",null_g_r < attr_counter_set_collect_ret_g_l,62,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1897,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_227.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_227.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_227.cpp,11,"[""member"", ""macro"", ""string""]","[""archive_entry_new_ret"", ""null"", ""==""]",archive_entry_new_ret_e_l == null_e_r,63,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1909,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_228.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_228.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_228.cpp,23,"[""member"", ""macro"", ""string""]","[""mtree_entry_new_ret"", ""macro"", ""<""]",macro_g_r < mtree_entry_new_ret_g_l,64,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,542,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_236.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_236.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_236.cpp,21,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""macro"", ""<""]",macro_g_r < ssize_t_g_l,65,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,549,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_237.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_237.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_237.cpp,28,"[""member"", ""macro"", ""string""]","[""archive_be32dec_ret"", ""macro"", ""!=""]",Not(archive_be32dec_ret_e_l == macro_e_r),66,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,555,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_238.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_238.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_238.cpp,34,"[""member"", ""macro"", ""string"", ""archive_be16dec_ret""]","[""archive_be16dec_ret"", ""macro"", ""!=""]",Not(archive_be16dec_ret_e_l == macro_e_r),67,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,591,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_239.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_239.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_239.cpp,70,"[""member"", ""macro"", ""string""]","[""member"", ""archive_be64dec_ret"", ""!=""]",Not(archive_be64dec_ret_e_l == member_e_r),68,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,608,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_240.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_240.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_240.cpp,87,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""member"", ""<""]",member_g_r < ssize_t_g_l,69,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,805,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_249.cpp,"{
			archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");
			r = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_249.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_249.cpp,150,"[""member"", ""macro"", ""string""]","[""size_t"", ""member"", ""!=""]",Not(member_e_l == size_t_e_r),70,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,971,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_251.cpp,"{
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_251.cpp,19,"[""member"", ""macro"", ""string""]","[""int64_t"", ""macro"", ""==""]",int64_t_e_l == macro_e_r,71,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1408,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_256.cpp,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_256.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_256.cpp,12,"[""member"", ""macro"", ""string""]","[""_checksum_final_ret"", ""macro"", ""!=""]",Not(_checksum_final_ret_e_l == macro_e_r),72,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1463,"archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_258.cpp,"{
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_258.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_258.cpp,50,"[""member"", ""int"", ""string"", ""string""]","[""enum enctype"", ""BZ2_bzDecompressInit_ret"", ""macro"", ""!="", ""&&""]","And(Not(BZ2_bzDecompressInit_ret_e_l == macro_e_r),
    Not(enum enctype_e_l == null_e_r))",73,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1514,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_261.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_261.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_261.cpp,101,[],"[""lzma_alone_decoder_ret""]",Not(lzma_alone_decoder_ret_e_l == null_e_r),74,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_262.cpp,"{
	case NONE:
		break;
	case GZIP:
		if (xar->stream_valid)
			r = inflateReset(&(xar->stream));
		else
			r = inflateInit(&(xar->stream));
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}
		xar->stream_valid = 1;
		xar->stream.total_in = 0;
		xar->stream.total_out = 0;
		break;
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	case BZIP2:
		if (xar->bzstream_valid) {
			BZ2_bzDecompressEnd(&(xar->bzstream));
			xar->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}
		xar->bzstream_valid = 1;
		xar->bzstream.total_in_lo32 = 0;
		xar->bzstream.total_in_hi32 = 0;
		xar->bzstream.total_out_lo32 = 0;
		xar->bzstream.total_out_hi32 = 0;
		break;
#endif
#if defined(HAVE_LZMA_H) && defined(HAVE_LIBLZMA)
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	case XZ:
	case LZMA:
		if (xar->lzstream_valid) {
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
		}
		if (xar->entry_encoding == XZ)
			r = lzma_stream_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT,/* memlimit */
			    LZMA_CONCATENATED);
		else
			r = lzma_alone_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT);/* memlimit */
		if (r != LZMA_OK) {
			switch (r) {
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}
			return (ARCHIVE_FATAL);
		}
		xar->lzstream_valid = 1;
		xar->lzstream.total_in = 0;
		xar->lzstream.total_out = 0;
		break;
#endif
	/*
	 * Unsupported compression.
	 */
	default:
#if !defined(HAVE_BZLIB_H) || !defined(BZ_CONFIG_ERROR)
	case BZIP2:
#endif
#if !defined(HAVE_LZMA_H) || !defined(HAVE_LIBLZMA)
	case LZMA:
	case XZ:
#endif
		switch (xar->entry_encoding) {
		case BZIP2: detail = ""bzip2""; break;
		case LZMA: detail = ""lzma""; break;
		case XZ: detail = ""xz""; break;
		default: detail = ""??""; break;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_262.cpp,"[13, 0, 0, 0, 14, 0, 4, 3, 16, 3, 14, 0, 0, 0, 0, 204, 0, 0, 1, 1, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 1, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 9, 4, 0, 22, 0, 0, 37, 0, 43, 13, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_262.cpp,131,"[""member"", ""macro"", ""string"", ""string""]","[""enum enctype""]",Not(enum enctype_e_l == null_e_r),75,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3123,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_285.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_285.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_285.cpp,9,"[""member"", ""macro"", ""string""]","[""xmlReaderForIO_ret"", ""null"", ""==""]",null_e_l == xmlReaderForIO_ret_e_r,76,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3185,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_286.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			free(attr);
			free(name);
			free(value);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_286.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_286.cpp,16,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""=="", ""strdup_ret"", ""null"", ""=="", ""strdup_ret"", ""null"", ""=="", ""||"", ""||""]","Or(Or(null_e_l == strdup_ret_e_r,
      null_e_l == strdup_ret_e_r),
   malloc_ret_e_l == null_e_r)",77,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3247,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_287.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_287.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_287.cpp,15,"[""member"", ""macro"", ""string""]","[""XML_ParserCreate_ret"", ""null"", ""==""]",XML_ParserCreate_ret_e_l == null_e_r,78,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3276,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_288.cpp,"{
			XML_ParserFree(parser);
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_288.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_288.cpp,44,"[""member"", ""macro"", ""string""]","[""XML_Parse_ret"", ""macro"", ""==""]",XML_Parse_ret_e_l == macro_e_r,79,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,671,"archive_set_error(&a->archive, errno,
			    ""chdir() failure"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_303.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""chdir() failure"");
			ret = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_303.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_303.cpp,192,"[""member"", ""unkown"", ""string""]","[""fchdir_ret"", ""null"", ""!=""]",Not(fchdir_ret_e_l == null_e_r),80,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,894,"archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_307.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_307.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_307.cpp,10,"[""member"", ""unkown"", ""string""]","[""fchflags_ret"", ""null"", ""!=""]",Not(fchflags_ret_e_l == null_e_r),81,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1066,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_310.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_310.cpp,11,"[""member"", ""macro"", ""string""]","[""deflateReset_ret"", ""macro"", ""!=""]",Not(deflateReset_ret_e_l == macro_e_r),82,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1093,"archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_311.cpp,"{
			archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_311.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_311.cpp,18,"[""member"", ""macro"", ""string""]","[""fgetxattr_ret"", ""archive_le32dec_ret"", ""!=""]",Not(archive_le32dec_ret_e_l == fgetxattr_ret_e_r),83,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1108,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_312.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_312.cpp,33,"[""member"", ""macro"", ""string""]","[""uncompress_ret"", ""macro"", ""!=""]",Not(macro_e_l == uncompress_ret_e_r),84,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1129,"archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_314.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_314.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_314.cpp,54,"[""member"", ""unkown"", ""string""]","[""fremovexattr_ret"", ""int"", ""==""]",fremovexattr_ret_e_l == int_e_r,85,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1456,"archive_set_error(&a->archive, errno,
					    ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_322.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Write failed"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_322.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_322.cpp,43,"[""member"", ""unkown"", ""string""]","[""hfs_write_decmpfs_block_ret"", ""null"", ""<""]",null_g_r < hfs_write_decmpfs_block_ret_g_l,86,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1504,"archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_323.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_323.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_323.cpp,18,"[""member"", ""null"", ""string"", ""member""]","[""hfs_write_data_block_ret"", ""size_t"", ""<""]",size_t_g_r < hfs_write_data_block_ret_g_l,87,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1572,"archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_324.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_324.cpp,43,"[""member"", ""unkown"", ""string""]","[""ftruncate_ret"", ""int"", ""=="", ""member"", ""null"", ""=="", ""&&""]","And(member_e_l == null_e_r, ftruncate_ret_e_l == int_e_r)",88,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1930,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_328.cpp,"{
		archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_328.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_328.cpp,44,"[""member"", ""create_filesystem_object_ret"", ""string"", ""archive_entry_hardlink_ret""]","[""create_filesystem_object_ret"", ""macro"", ""=="", ""archive_entry_hardlink_ret"", ""null"", ""!="", ""&&""]","And(Not(archive_entry_hardlink_ret_e_l == null_e_r),
    create_filesystem_object_ret_e_l == macro_e_r)",89,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2000,"archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_331.cpp,"{
			archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_331.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_331.cpp,114,"[""member"", ""null"", ""string""]","[""member"", ""member"", ""member"", ""=="", ""member"", ""member"", ""=="", ""&&"", ""&&""]","And(And(member_e_l == member_e_r, member_e_l == member_e_r),
    Not(member_e_l == null_e_r))",90,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2469,"archive_string_sprintf(a_estr, errstr, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_339.cpp,"archive_string_sprintf(a_estr, errstr, path)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_339.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_339.cpp,7,"[""struct archive_string *"", ""const char *"", ""const char *""]","[""struct archive_string *""]",Not(null_e_l == struct archive_string *_e_r),91,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2729,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_349.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_349.cpp,10,"[""member"", ""int"", ""string"", ""member""]","[""check_symlinks_fsobj_ret"", ""macro"", ""!=""]",Not(check_symlinks_fsobj_ret_e_l == macro_e_r),92,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2918,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_353.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_353.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_353.cpp,10,"[""member"", ""int"", ""string"", ""member""]","[""cleanup_pathname_fsobj_ret"", ""macro"", ""!=""]",Not(cleanup_pathname_fsobj_ret_e_l == macro_e_r),93,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3047,"archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_357.cpp,"{
	struct stat st;
	struct fixup_entry *le;
	char *slash, *base;
	mode_t mode_final, mode;
	int r;

	/* Check for special names and just skip them. */
	slash = strrchr(path, '/');
	if (slash == NULL)
		base = path;
	else
		base = slash + 1;

	if (base[0] == '\0' ||
	    (base[0] == '.' && base[1] == '\0') ||
	    (base[0] == '.' && base[1] == '.' && base[2] == '\0')) {
		/* Don't bother trying to create null path, '.', or '..'. */
		if (slash != NULL) {
			*slash = '\0';
			r = create_dir(a, path);
			*slash = '/';
			return (r);
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Yes, this should be stat() and not lstat().  Using lstat()
	 * here loses the ability to extract through symlinks.  Also note
	 * that this should not use the a->st cache.
	 */
	if (stat(path, &st) == 0) {
		if (S_ISDIR(st.st_mode))
			return (ARCHIVE_OK);
		if ((a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);
			return (ARCHIVE_FAILED);
		}
		if (unlink(path) != 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}
	} else if (errno != ENOENT && errno != ENOTDIR) {
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);
		return (ARCHIVE_FAILED);
	} else if (slash != NULL) {
		*slash = '\0';
		r = create_dir(a, path);
		*slash = '/';
		if (r != ARCHIVE_OK)
			return (r);
	}

	/*
	 * Mode we want for the final restored directory.  Per POSIX,
	 * implicitly-created dirs must be created obeying the umask.
	 * There's no mention whether this is different for privileged
	 * restores (which the rest of this code handles by pretending
	 * umask=0).  I've chosen here to always obey the user's umask for
	 * implicit dirs, even if _EXTRACT_PERM was specified.
	 */
	mode_final = DEFAULT_DIR_MODE & ~a->user_umask;
	/* Mode we want on disk during the restore process. */
	mode = mode_final;
	mode |= MINIMUM_DIR_MODE;
	mode &= MAXIMUM_DIR_MODE;
	if (mkdir(path, mode) == 0) {
		if (mode != mode_final) {
			le = new_fixup(a, path);
			if (le == NULL)
				return (ARCHIVE_FATAL);
			le->fixup |=TODO_MODE_BASE;
			le->mode = mode_final;
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Without the following check, a/b/../b/c/d fails at the
	 * second visit to 'b', so 'd' can't be created.  Note that we
	 * don't add it to the fixup list here, as it's already been
	 * added.
	 */
	if (stat(path, &st) == 0 && S_ISDIR(st.st_mode))
		return (ARCHIVE_OK);

	archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_357.cpp,"[14, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 0, 144, 0, 0, 5, 7, 0, 0, 0, 27, 0, 0, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 14, 14, 1, 0, 14, 0, 0, 20, 2, 33, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_357.cpp,95,"[""member"", ""unkown"", ""string"", ""char *""]","[""stat_ret"", ""null"", ""=="", ""S_ISDIR_ret"", ""&&"", ""!""]","Not(And(Not(S_ISDIR_ret_e_l == null_e_r),
        null_e_l == stat_ret_e_r))",94,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3102,"archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_359.cpp,"{
#ifndef __CYGWIN__
/* unfortunately, on win32 there is no 'root' user with uid 0,
   so we just have to try the chown and see if it works */

	/* If we know we can't change it, don't bother trying. */
	if (a->user_uid != 0  &&  a->user_uid != a->uid) {
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}
#endif

#ifdef HAVE_FCHOWN
	/* If we have an fd, we can avoid a race. */
	if (a->fd >= 0 && fchown(a->fd, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	/* We prefer lchown() but will use chown() if that's all we have. */
	/* Of course, if we have neither, this will always fail. */
#ifdef HAVE_LCHOWN
	if (lchown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#elif HAVE_CHOWN
	if (!S_ISLNK(a->mode) && chown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_359.cpp,"[4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 0, 0, 5, 0, 20, 7, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_359.cpp,40,"[""member"", ""unkown"", ""string"", ""member"", ""member"", ""member""]","[""lchown_ret"", ""null"", ""=="", ""!""]",Not(lchown_ret_e_l == null_e_r),95,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3266,"archive_set_error(&a->archive, errno,
				  ""Can't restore time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_360.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Can't restore time"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_360.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_360.cpp,51,"[""member"", ""unkown"", ""string""]","[""set_time_ret"", ""null"", ""!="", ""set_time_ret"", ""null"", ""!="", ""||""]","Or(Not(null_e_l == set_time_ret_e_r),
   Not(null_e_l == set_time_ret_e_r))",96,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3423,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_366.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_366.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_366.cpp,108,"[""member"", ""unkown"", ""string"", ""macro""]","[""chmod_ret"", ""null"", ""!=""]",Not(chmod_ret_e_l == null_e_r),97,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3588,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_368.cpp,"{
	int r;

	(void)mode; /* UNUSED */
	if (set == 0  && clear == 0)
		return (ARCHIVE_OK);

	/*
	 * XXX Is the stat here really necessary?  Or can I just use
	 * the 'set' flags directly?  In particular, I'm not sure
	 * about the correct approach if we're overwriting an existing
	 * file that already has flags on it. XXX
	 */
	if ((r = lazy_stat(a)) != ARCHIVE_OK)
		return (r);

	a->st.st_flags &= ~clear;
	a->st.st_flags |= set;
#ifdef HAVE_FCHFLAGS
	/* If platform has fchflags() and we were given an fd, use it. */
	if (fd >= 0 && fchflags(fd, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	/*
	 * If we can't use the fd to set the flags, we'll use the
	 * pathname to set flags.  We prefer lchflags() but will use
	 * chflags() if we must.
	 */
#ifdef HAVE_LCHFLAGS
	if (lchflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#elif defined(HAVE_CHFLAGS)
	if (S_ISLNK(a->st.st_mode)) {
		archive_set_error(&a->archive, errno,
		    ""Can't set file flags on symlink."");
		return (ARCHIVE_WARN);
	}
	if (chflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_368.cpp,"[6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 65, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 6, 0, 0, 8, 0, 0, 5, 0, 15, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_368.cpp,43,"[""member"", ""unkown"", ""string""]","[""lchflags_ret"", ""null"", ""=="", ""!""]",Not(lchflags_ret_e_l == null_e_r),98,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3687,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_369.cpp,"{
	int		 ret;
	int		 myfd = fd;
	int newflags, oldflags;
	int sf_mask = 0;

	if (set == 0 && clear == 0)
		return (ARCHIVE_OK);
	/* Only regular files and dirs can have flags. */
	if (!S_ISREG(mode) && !S_ISDIR(mode))
		return (ARCHIVE_OK);

	/* If we weren't given an fd, open it ourselves. */
	if (myfd < 0) {
		myfd = open(name, O_RDONLY | O_NONBLOCK | O_BINARY | O_CLOEXEC);
		__archive_ensure_cloexec_flag(myfd);
	}
	if (myfd < 0)
		return (ARCHIVE_OK);

	/*
	 * Linux has no define for the flags that are only settable by
	 * the root user.  This code may seem a little complex, but
	 * there seem to be some Linux systems that lack these
	 * defines. (?)  The code below degrades reasonably gracefully
	 * if sf_mask is incomplete.
	 */
#if defined(FS_IMMUTABLE_FL)
	sf_mask |= FS_IMMUTABLE_FL;
#elif defined(EXT2_IMMUTABLE_FL)
	sf_mask |= EXT2_IMMUTABLE_FL;
#endif
#if defined(FS_APPEND_FL)
	sf_mask |= FS_APPEND_FL;
#elif defined(EXT2_APPEND_FL)
	sf_mask |= EXT2_APPEND_FL;
#endif
#if defined(FS_JOURNAL_DATA_FL)
	sf_mask |= FS_JOURNAL_DATA_FL;
#endif
	/*
	 * XXX As above, this would be way simpler if we didn't have
	 * to read the current flags from disk. XXX
	 */
	ret = ARCHIVE_OK;

	/* Read the current file flags. */
	if (ioctl(myfd,
#ifdef FS_IOC_GETFLAGS
	    FS_IOC_GETFLAGS,
#else
	    EXT2_IOC_GETFLAGS,
#endif
	    &oldflags) < 0)
		goto fail;

	/* Try setting the flags as given. */
	newflags = (oldflags & ~clear) | set;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;
	if (errno != EPERM)
		goto fail;

	/* If we couldn't set all the flags, try again with a subset. */
	newflags &= ~sf_mask;
	oldflags &= sf_mask;
	newflags |= oldflags;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;

	/* We couldn't set the flags, so report the failure. */
fail:
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	ret = ARCHIVE_WARN;
cleanup:
	if (fd < 0)
		close(myfd);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_369.cpp,"[12, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 4, 0, 0, 99, 0, 0, 4, 5, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 9, 9, 3, 0, 14, 0, 0, 15, 0, 26, 17, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_369.cpp,87,"[""member"", ""unkown"", ""string""]","[""open_ret"", ""null"", ""<"", ""!"", ""unkown"", ""macro"", ""!="", ""&&""]","And(Not(macro_e_l == unkown_e_r),
    Not(null_g_r < open_ret_g_l))",99,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3804,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_376.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_376.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_376.cpp,59,"[""member"", ""unkown"", ""string""]","[""fsetxattr_ret"", ""int"", ""==""]",fsetxattr_ret_e_l == int_e_r,100,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3901,"archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_381.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");
			close(tmpfd);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_381.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_381.cpp,20,"[""member"", ""unkown"", ""string""]","[""open_ret"", ""int"", ""==""]",int_e_l == open_ret_e_r,101,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3953,"archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_384.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_384.cpp,27,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""size_t"", ""!=""]",Not(size_t_e_l == write_ret_e_r),102,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4102,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_389.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_389.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_389.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]","Not(And(And(Not(null_e_l == strncmp_ret_e_r),
            Not(null_e_l == strncmp_ret_e_r)),
        Not(const char *_e_l == null_e_r)))",103,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,672,"archive_set_error(&(a->archive), errno, ""lseek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_410.cpp,"{
		archive_set_error(&(a->archive), errno, ""lseek failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_410.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_410.cpp,9,"[""member"", ""unkown"", ""string""]","[""member"", ""null"", "">"", ""lseek_ret"", ""null"", ""<"", ""&&""]","And(null_g_r < lseek_ret_g_l, null_g_l > member_g_r)",104,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1944,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma_properties_size failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_428.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma_properties_size failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_428.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_428.cpp,36,"[""struct archive *"", ""macro"", ""string""]","[""lzma_properties_size_ret"", ""macro"", ""!=""]",Not(lzma_properties_size_ret_e_l == macro_e_r),105,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1961,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""lzma_properties_encode failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_430.cpp,"{
			free(strm);
			lastrm->real_stream = NULL;
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""lzma_properties_encode failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_430.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_430.cpp,53,"[""struct archive *"", ""macro"", ""string""]","[""lzma_properties_encode_ret"", ""macro"", ""!=""]",Not(lzma_properties_encode_ret_e_l == macro_e_r),106,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1038,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Can't parse line %ju"", counter);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_448.cpp,"{
	ssize_t len;
	uintmax_t counter;
	char *p;
	struct mtree_option *global;
	struct mtree_entry *last_entry;
	int r, is_form_d;

	mtree->archive_format = ARCHIVE_FORMAT_MTREE;
	mtree->archive_format_name = ""mtree"";

	global = NULL;
	last_entry = NULL;

	(void)detect_form(a, &is_form_d);

	for (counter = 1; ; ++counter) {
		len = readline(a, mtree, &p, 65536);
		if (len == 0) {
			mtree->this_entry = mtree->entries;
			free_options(global);
			return (ARCHIVE_OK);
		}
		if (len < 0) {
			free_options(global);
			return ((int)len);
		}
		/* Leading whitespace is never significant, ignore it. */
		while (*p == ' ' || *p == '\t') {
			++p;
			--len;
		}
		/* Skip content lines and blank lines. */
		if (*p == '#')
			continue;
		if (*p == '\r' || *p == '\n' || *p == '\0')
			continue;
		if (*p != '/') {
			r = process_add_entry(a, mtree, &global, p, len,
			    &last_entry, is_form_d);
		} else if (len > 4 && strncmp(p, ""/set"", 4) == 0) {
			if (p[4] != ' ' && p[4] != '\t')
				break;
			r = process_global_set(a, &global, p);
		} else if (len > 6 && strncmp(p, ""/unset"", 6) == 0) {
			if (p[6] != ' ' && p[6] != '\t')
				break;
			r = process_global_unset(a, &global, p);
		} else
			break;

		if (r != ARCHIVE_OK) {
			free_options(global);
			return r;
		}
	}

	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Can't parse line %ju"", counter);
	free_options(global);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_448.cpp,"[10, 1, 1, 0, 3, 2, 4, 0, 0, 0, 14, 0, 0, 0, 0, 110, 0, 0, 6, 7, 0, 0, 1, 29, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 12, 10, 1, 0, 12, 0, 0, 17, 2, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_448.cpp,59,"[""member"", ""macro"", ""string"", ""int""]","[""member"", ""constant"", ""!="", ""member"", ""char"", ""!="", ""&&"", ""member"", ""constant"", ""!="", ""member"", ""char"", ""!="", ""&&"", ""readline_ret"", ""int"", "">"", ""strncmp_ret"", ""null"", ""=="", ""&&"", ""!"", ""&&"", ""&&""]","And(And(Not(And(null_e_l == strncmp_ret_e_r,
                int_g_l > readline_ret_g_r)),
        And(Not(char_e_l == member_e_r),
            Not(constant_e_l == member_e_r))),
    And(Not(char_e_l == member_e_r),
        Not(constant_e_l == member_e_r)))",107,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1194,"archive_set_error(&a->archive, errno,
						""Can't open %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_449.cpp,"{
				archive_set_error(&a->archive, errno,
						""Can't open %s"", path);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_449.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_449.cpp,85,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""member"", ""int"", ""=="", ""unkown"", ""macro"", ""!="", ""archive_strlen_ret"", ""null"", "">"", ""||"", ""&&""]","And(Or(null_g_l > archive_strlen_ret_g_r,
       Not(macro_e_l == unkown_e_r)),
    int_e_l == member_e_r)",108,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1203,"archive_set_error(&a->archive, errno,
						""Could not fstat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_450.cpp,"{
				archive_set_error(&a->archive, errno,
						""Could not fstat %s"", path);
				r = ARCHIVE_WARN;
				/* If we can't stat it, don't keep it open. */
				close(mtree->fd);
				mtree->fd = -1;
				st = NULL;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_450.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_450.cpp,94,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""fstat_ret"", ""int"", ""==""]",fstat_ret_e_l == int_e_r,109,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1256,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_451.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));
					r = ARCHIVE_WARN;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_451.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_451.cpp,147,[],"[""parse_line_ret"", ""macro"", ""==""]",macro_e_l == parse_line_ret_e_r,110,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1355,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Missing type keyword in mtree specification"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_452.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Missing type keyword in mtree specification"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_452.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_452.cpp,13,"[""member"", ""macro"", ""string""]","[""parse_keyword_ret"", ""macro"", ""=="", ""bool"", ""null"", ""=="", ""&&""]","And(bool_e_l == null_e_r,
    macro_e_l == parse_keyword_ret_e_r)",111,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1404,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_453.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);
			return ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_453.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_453.cpp,19,"[""struct archive *"", ""macro"", ""string"", ""char *""]","[""pack_find_ret"", ""null"", ""==""]",null_e_l == pack_find_ret_e_r,112,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1411,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing number"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_454.cpp,"{
				archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing number"");
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_454.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_454.cpp,26,"[""struct archive *"", ""macro"", ""string""]","[""la_strsep_ret"", ""char"", ""==""]",char_e_l == la_strsep_ret_e_r,113,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1416,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Too many arguments"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_455.cpp,"{
				archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Too many arguments"");
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_455.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_455.cpp,31,"[""struct archive *"", ""macro"", ""string""]","[""mtree_atol_ret"", ""macro"", "">=""]",macro_ge_l >= mtree_atol_ret_ge_r,114,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1423,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Not enough arguments"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_456.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Not enough arguments"");
			return ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_456.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_456.cpp,38,"[""struct archive *"", ""macro"", ""string""]","[""mtree_atol_ret"", ""int"", ""<""]",int_g_r < mtree_atol_ret_g_l,115,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1542,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_459.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_459.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_459.cpp,97,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!""]","Not(And(char_ge_r <= member_ge_l, char_ge_l >= member_ge_r))",116,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,783,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Couldn't find out RAR header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_469.cpp,"{
  const void *h;
  const char *p, *q;
  size_t skip, total;
  ssize_t bytes, window;

  total = 0;
  window = 4096;
  while (total + window <= (1024 * 128)) {
    h = __archive_read_ahead(a, window, &bytes);
    if (h == NULL) {
      /* Remaining bytes are less than window. */
      window >>= 1;
      if (window < 0x40)
      	goto fatal;
      continue;
    }
    if (bytes < 0x40)
      goto fatal;
    p = h;
    q = p + bytes;

    /*
     * Scan ahead until we find something that looks
     * like the RAR header.
     */
    while (p + 7 < q) {
      if (memcmp(p, RAR_SIGNATURE, 7) == 0) {
      	skip = p - (const char *)h;
      	__archive_read_consume(a, skip);
      	return (ARCHIVE_OK);
      }
      p += 0x10;
    }
    skip = p - (const char *)h;
    __archive_read_consume(a, skip);
	total += skip;
  }
fatal:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Couldn't find out RAR header"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_469.cpp,"[4, 2, 0, 0, 0, 1, 2, 0, 0, 0, 7, 1, 2, 0, 4, 62, 0, 0, 4, 7, 0, 0, 0, 12, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 4, 0, 0, 5, 0, 0, 13, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_469.cpp,41,"[""member"", ""macro"", ""string""]","[""null"", ""int"", ""<="", ""!"", ""ssize_t"", ""constant"", ""<"", ""int"", ""constant"", ""<"", ""&&"", ""&&""]","And(And(constant_g_r < int_g_l, constant_g_r < ssize_t_g_l),
    Not(int_ge_r <= null_ge_l))",117,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1414,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid filename size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_490.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid filename size"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_490.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_490.cpp,153,"[""member"", ""macro"", ""string""]","[""archive_le16dec_ret"", ""int"", "">""]",int_g_l > archive_le16dec_ret_g_r,118,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1493,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_492.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid filename"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_492.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_492.cpp,232,"[""member"", ""macro"", ""string""]","[""uint8_t"", ""int"", "">""]",int_g_l > uint8_t_g_r,119,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1604,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_496.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_496.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_496.cpp,343,"[""member"", ""macro"", ""string""]","[""read_exttime_ret"", ""null"", ""<""]",null_g_r < read_exttime_ret_g_l,120,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1970,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                              ""Parsing filters is unsupported."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_507.cpp,"{
          case 0:
            rar->start_new_table = 1;
            return read_data_compressed(a, buff, size, offset);

          case 2:
            rar->ppmd_eod = 1;/* End Of ppmd Data. */
            continue;

          case 3:
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                              ""Parsing filters is unsupported."");
            return (ARCHIVE_FAILED);

          case 4:
            lzss_offset = 0;
            for (i = 2; i >= 0; i--)
            {
              if ((code = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
                &rar->ppmd7_context, &rar->range_dec.p)) < 0)
              {
                archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                  ""Invalid symbol"");
                return (ARCHIVE_FATAL);
              }
              lzss_offset |= code << (i * 8);
            }
            if ((length = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
              &rar->ppmd7_context, &rar->range_dec.p)) < 0)
            {
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }
            lzss_emit_match(rar, lzss_offset + 2, length + 32);
            rar->bytes_uncopied += length + 32;
            break;

          case 5:
            if ((length = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
              &rar->ppmd7_context, &rar->range_dec.p)) < 0)
            {
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }
            lzss_emit_match(rar, 1, length + 4);
            rar->bytes_uncopied += length + 4;
            break;

         default:
           lzss_emit_literal(rar, sym);
           rar->bytes_uncopied++;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_507.cpp,"[3, 0, 1, 0, 2, 1, 5, 0, 5, 1, 5, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 11, 0, 0, 14, 0, 30, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_507.cpp,108,"[""member"", ""macro"", ""string""]","[""__archive_ppmd7_functions . Ppmd7_DecodeSymbol_ret""]","Not(__archive_ppmd7_functions . Ppmd7_DecodeSymbol_ret_e_l ==
    null_e_r)",121,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2475,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid repeat position"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_526.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid repeat position"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_526.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_526.cpp,19,"[""member"", ""macro"", ""string""]","[""int"", ""null"", ""=="", ""int"", ""null"", "">="", ""bool"", ""null"", ""=="", ""bool"", ""int"", ""=="", ""||"", ""&&"", ""||""]","Or(And(Or(bool_e_l == int_e_r, bool_e_l == null_e_r),
       null_ge_l >= int_ge_r),
   int_e_l == null_e_r)",122,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2499,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid repeating code"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_528.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid repeating code"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_528.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_528.cpp,43,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<"", ""!""]",Not(null_g_r < member_g_l),123,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2606,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid location to Huffman tree specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_534.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid location to Huffman tree specified."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_534.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_534.cpp,15,"[""member"", ""macro"", ""string""]","[""int"", ""null"", ""<"", ""int"", ""member"", "">="", ""||""]","Or(member_ge_l >= int_ge_r, null_g_r < int_g_l)",124,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2735,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_535.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_535.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_535.cpp,90,"[""member"", ""macro"", ""string""]","[""read_next_symbol_ret"", ""int"", ""==""]",int_e_l == read_next_symbol_ret_e_r,125,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2863,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_536.cpp,"{
  static const unsigned char lengthbases[] =
    {   0,   1,   2,   3,   4,   5,   6,
        7,   8,  10,  12,  14,  16,  20,
       24,  28,  32,  40,  48,  56,  64,
       80,  96, 112, 128, 160, 192, 224 };
  static const unsigned char lengthbits[] =
    { 0, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 1, 2, 2,
      2, 2, 3, 3, 3, 3, 4,
      4, 4, 4, 5, 5, 5, 5 };
  static const unsigned int offsetbases[] =
    {       0,       1,       2,       3,       4,       6,
            8,      12,      16,      24,      32,      48,
           64,      96,     128,     192,     256,     384,
          512,     768,    1024,    1536,    2048,    3072,
         4096,    6144,    8192,   12288,   16384,   24576,
        32768,   49152,   65536,   98304,  131072,  196608,
       262144,  327680,  393216,  458752,  524288,  589824,
       655360,  720896,  786432,  851968,  917504,  983040,
      1048576, 1310720, 1572864, 1835008, 2097152, 2359296,
      2621440, 2883584, 3145728, 3407872, 3670016, 3932160 };
  static const unsigned char offsetbits[] =
    {  0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,
       5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10,
      11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,
      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
      18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
  static const unsigned char shortbases[] =
    { 0, 4, 8, 16, 32, 64, 128, 192 };
  static const unsigned char shortbits[] =
    { 2, 2, 3, 4, 5, 6, 6, 6 };

  int symbol, offs, len, offsindex, lensymbol, i, offssymbol, lowoffsetsymbol;
  unsigned char newfile;
  struct rar *rar = (struct rar *)(a->format->data);
  struct rar_br *br = &(rar->br);

  if (rar->filterstart < end)
    end = rar->filterstart;

  while (1)
  {
    if (rar->output_last_match &&
      lzss_position(&rar->lzss) + rar->lastlength <= end)
    {
      lzss_emit_match(rar, rar->lastoffset, rar->lastlength);
      rar->output_last_match = 0;
    }

    if(rar->is_ppmd_block || rar->output_last_match ||
      lzss_position(&rar->lzss) >= end)
      return lzss_position(&rar->lzss);

    if ((symbol = read_next_symbol(a, &rar->maincode)) < 0)
      return (ARCHIVE_FATAL);
    rar->output_last_match = 0;

    if (symbol < 256)
    {
      lzss_emit_literal(rar, symbol);
      continue;
    }
    else if (symbol == 256)
    {
      if (!rar_br_read_ahead(a, br, 1))
        goto truncated_data;
      newfile = !rar_br_bits(br, 1);
      rar_br_consume(br, 1);

      if(newfile)
      {
        rar->start_new_block = 1;
        if (!rar_br_read_ahead(a, br, 1))
          goto truncated_data;
        rar->start_new_table = rar_br_bits(br, 1);
        rar_br_consume(br, 1);
        return lzss_position(&rar->lzss);
      }
      else
      {
        if (parse_codes(a) != ARCHIVE_OK)
          return (ARCHIVE_FATAL);
        continue;
      }
    }
    else if(symbol==257)
    {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }
    else if(symbol==258)
    {
      if(rar->lastlength == 0)
        continue;

      offs = rar->lastoffset;
      len = rar->lastlength;
    }
    else if (symbol <= 262)
    {
      offsindex = symbol - 259;
      offs = rar->oldoffset[offsindex];

      if ((lensymbol = read_next_symbol(a, &rar->lengthcode)) < 0)
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[lensymbol] + 2;
      if (lengthbits[lensymbol] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[lensymbol]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[lensymbol]);
        rar_br_consume(br, lengthbits[lensymbol]);
      }

      for (i = offsindex; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else if(symbol<=270)
    {
      offs = shortbases[symbol-263] + 1;
      if(shortbits[symbol-263] > 0) {
        if (!rar_br_read_ahead(a, br, shortbits[symbol-263]))
          goto truncated_data;
        offs += rar_br_bits(br, shortbits[symbol-263]);
        rar_br_consume(br, shortbits[symbol-263]);
      }

      len = 2;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else
    {
      if (symbol-271 > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (symbol-271 > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[symbol-271]+3;
      if(lengthbits[symbol-271] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[symbol-271]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[symbol-271]);
        rar_br_consume(br, lengthbits[symbol-271]);
      }

      if ((offssymbol = read_next_symbol(a, &rar->offsetcode)) < 0)
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbases)/sizeof(offsetbases[0])))
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbits)/sizeof(offsetbits[0])))
        goto bad_data;
      offs = offsetbases[offssymbol]+1;
      if(offsetbits[offssymbol] > 0)
      {
        if(offssymbol > 9)
        {
          if(offsetbits[offssymbol] > 4) {
            if (!rar_br_read_ahead(a, br, offsetbits[offssymbol] - 4))
              goto truncated_data;
            offs += rar_br_bits(br, offsetbits[offssymbol] - 4) << 4;
            rar_br_consume(br, offsetbits[offssymbol] - 4);
	  }

          if(rar->numlowoffsetrepeats > 0)
          {
            rar->numlowoffsetrepeats--;
            offs += rar->lastlowoffset;
          }
          else
          {
            if ((lowoffsetsymbol =
              read_next_symbol(a, &rar->lowoffsetcode)) < 0)
              return (ARCHIVE_FATAL);
            if(lowoffsetsymbol == 16)
            {
              rar->numlowoffsetrepeats = 15;
              offs += rar->lastlowoffset;
            }
            else
            {
              offs += lowoffsetsymbol;
              rar->lastlowoffset = lowoffsetsymbol;
            }
          }
        }
        else {
          if (!rar_br_read_ahead(a, br, offsetbits[offssymbol]))
            goto truncated_data;
          offs += rar_br_bits(br, offsetbits[offssymbol]);
          rar_br_consume(br, offsetbits[offssymbol]);
        }
      }

      if (offs >= 0x40000)
        len++;
      if (offs >= 0x2000)
        len++;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }

    rar->lastoffset = offs;
    rar->lastlength = len;
    rar->output_last_match = 1;
  }
truncated_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");
  rar->valid = 0;
  return (ARCHIVE_FATAL);
bad_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_536.cpp,"[39, 1, 3, 0, 0, 3, 8, 0, 0, 0, 55, 2, 15, 0, 12, 454, 0, 0, 10, 17, 0, 0, 11, 268, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 441, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 46, 0, 43, 39, 5, 0, 53, 0, 0, 50, 5, 94, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_536.cpp,218,"[""member"", ""macro"", ""string""]","[""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""rar_br_read_ahead_ret"", ""!"", ""int"", ""!"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(And(And(And(Not(Not(int_e_l == null_e_r)),
                            Not(Not(null_e_l ==
                                    rar_br_read_ahead_ret_e_r))),
                        Not(Not(null_e_l ==
                                rar_br_read_ahead_ret_e_r))),
                    Not(Not(null_e_l ==
                            rar_br_read_ahead_ret_e_r))),
                Not(Not(null_e_l ==
                        rar_br_read_ahead_ret_e_r))),
            Not(Not(null_e_l == rar_br_read_ahead_ret_e_r))),
        Not(Not(null_e_l == rar_br_read_ahead_ret_e_r))),
    Not(Not(null_e_l == rar_br_read_ahead_ret_e_r)))",126,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2868,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_537.cpp,"{
  static const unsigned char lengthbases[] =
    {   0,   1,   2,   3,   4,   5,   6,
        7,   8,  10,  12,  14,  16,  20,
       24,  28,  32,  40,  48,  56,  64,
       80,  96, 112, 128, 160, 192, 224 };
  static const unsigned char lengthbits[] =
    { 0, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 1, 2, 2,
      2, 2, 3, 3, 3, 3, 4,
      4, 4, 4, 5, 5, 5, 5 };
  static const unsigned int offsetbases[] =
    {       0,       1,       2,       3,       4,       6,
            8,      12,      16,      24,      32,      48,
           64,      96,     128,     192,     256,     384,
          512,     768,    1024,    1536,    2048,    3072,
         4096,    6144,    8192,   12288,   16384,   24576,
        32768,   49152,   65536,   98304,  131072,  196608,
       262144,  327680,  393216,  458752,  524288,  589824,
       655360,  720896,  786432,  851968,  917504,  983040,
      1048576, 1310720, 1572864, 1835008, 2097152, 2359296,
      2621440, 2883584, 3145728, 3407872, 3670016, 3932160 };
  static const unsigned char offsetbits[] =
    {  0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,
       5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10,
      11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,
      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
      18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
  static const unsigned char shortbases[] =
    { 0, 4, 8, 16, 32, 64, 128, 192 };
  static const unsigned char shortbits[] =
    { 2, 2, 3, 4, 5, 6, 6, 6 };

  int symbol, offs, len, offsindex, lensymbol, i, offssymbol, lowoffsetsymbol;
  unsigned char newfile;
  struct rar *rar = (struct rar *)(a->format->data);
  struct rar_br *br = &(rar->br);

  if (rar->filterstart < end)
    end = rar->filterstart;

  while (1)
  {
    if (rar->output_last_match &&
      lzss_position(&rar->lzss) + rar->lastlength <= end)
    {
      lzss_emit_match(rar, rar->lastoffset, rar->lastlength);
      rar->output_last_match = 0;
    }

    if(rar->is_ppmd_block || rar->output_last_match ||
      lzss_position(&rar->lzss) >= end)
      return lzss_position(&rar->lzss);

    if ((symbol = read_next_symbol(a, &rar->maincode)) < 0)
      return (ARCHIVE_FATAL);
    rar->output_last_match = 0;

    if (symbol < 256)
    {
      lzss_emit_literal(rar, symbol);
      continue;
    }
    else if (symbol == 256)
    {
      if (!rar_br_read_ahead(a, br, 1))
        goto truncated_data;
      newfile = !rar_br_bits(br, 1);
      rar_br_consume(br, 1);

      if(newfile)
      {
        rar->start_new_block = 1;
        if (!rar_br_read_ahead(a, br, 1))
          goto truncated_data;
        rar->start_new_table = rar_br_bits(br, 1);
        rar_br_consume(br, 1);
        return lzss_position(&rar->lzss);
      }
      else
      {
        if (parse_codes(a) != ARCHIVE_OK)
          return (ARCHIVE_FATAL);
        continue;
      }
    }
    else if(symbol==257)
    {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }
    else if(symbol==258)
    {
      if(rar->lastlength == 0)
        continue;

      offs = rar->lastoffset;
      len = rar->lastlength;
    }
    else if (symbol <= 262)
    {
      offsindex = symbol - 259;
      offs = rar->oldoffset[offsindex];

      if ((lensymbol = read_next_symbol(a, &rar->lengthcode)) < 0)
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[lensymbol] + 2;
      if (lengthbits[lensymbol] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[lensymbol]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[lensymbol]);
        rar_br_consume(br, lengthbits[lensymbol]);
      }

      for (i = offsindex; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else if(symbol<=270)
    {
      offs = shortbases[symbol-263] + 1;
      if(shortbits[symbol-263] > 0) {
        if (!rar_br_read_ahead(a, br, shortbits[symbol-263]))
          goto truncated_data;
        offs += rar_br_bits(br, shortbits[symbol-263]);
        rar_br_consume(br, shortbits[symbol-263]);
      }

      len = 2;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else
    {
      if (symbol-271 > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (symbol-271 > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[symbol-271]+3;
      if(lengthbits[symbol-271] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[symbol-271]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[symbol-271]);
        rar_br_consume(br, lengthbits[symbol-271]);
      }

      if ((offssymbol = read_next_symbol(a, &rar->offsetcode)) < 0)
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbases)/sizeof(offsetbases[0])))
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbits)/sizeof(offsetbits[0])))
        goto bad_data;
      offs = offsetbases[offssymbol]+1;
      if(offsetbits[offssymbol] > 0)
      {
        if(offssymbol > 9)
        {
          if(offsetbits[offssymbol] > 4) {
            if (!rar_br_read_ahead(a, br, offsetbits[offssymbol] - 4))
              goto truncated_data;
            offs += rar_br_bits(br, offsetbits[offssymbol] - 4) << 4;
            rar_br_consume(br, offsetbits[offssymbol] - 4);
	  }

          if(rar->numlowoffsetrepeats > 0)
          {
            rar->numlowoffsetrepeats--;
            offs += rar->lastlowoffset;
          }
          else
          {
            if ((lowoffsetsymbol =
              read_next_symbol(a, &rar->lowoffsetcode)) < 0)
              return (ARCHIVE_FATAL);
            if(lowoffsetsymbol == 16)
            {
              rar->numlowoffsetrepeats = 15;
              offs += rar->lastlowoffset;
            }
            else
            {
              offs += lowoffsetsymbol;
              rar->lastlowoffset = lowoffsetsymbol;
            }
          }
        }
        else {
          if (!rar_br_read_ahead(a, br, offsetbits[offssymbol]))
            goto truncated_data;
          offs += rar_br_bits(br, offsetbits[offssymbol]);
          rar_br_consume(br, offsetbits[offssymbol]);
        }
      }

      if (offs >= 0x40000)
        len++;
      if (offs >= 0x2000)
        len++;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }

    rar->lastoffset = offs;
    rar->lastlength = len;
    rar->output_last_match = 1;
  }
truncated_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");
  rar->valid = 0;
  return (ARCHIVE_FATAL);
bad_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_537.cpp,"[39, 1, 3, 0, 0, 3, 8, 0, 0, 0, 55, 2, 15, 0, 12, 454, 0, 0, 10, 17, 0, 0, 11, 268, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 441, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 46, 0, 43, 39, 5, 0, 53, 0, 0, 50, 5, 94, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_537.cpp,223,"[""member"", ""macro"", ""string""]","[""int"", ""unkown"", "">"", ""int"", ""unkown"", "">"", ""read_next_symbol_ret"", ""null"", ""<"", ""read_next_symbol_ret"", ""unkown"", "">"", ""read_next_symbol_ret"", ""unkown"", "">"", ""read_next_symbol_ret"", ""unkown"", "">"", ""read_next_symbol_ret"", ""unkown"", "">"", ""read_next_symbol_ret"", ""null"", ""<"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(And(And(And(null_g_r <
                            read_next_symbol_ret_g_l,
                            unkown_g_l >
                            read_next_symbol_ret_g_r),
                        unkown_g_l >
                        read_next_symbol_ret_g_r),
                    unkown_g_l > read_next_symbol_ret_g_r),
                unkown_g_l > read_next_symbol_ret_g_r),
            null_g_r < read_next_symbol_ret_g_l),
        unkown_g_l > int_g_r),
    unkown_g_l > int_g_r)",127,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2897,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_539.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_539.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_539.cpp,24,"[""member"", ""macro"", ""string""]","[""lzss_offset_for_position_ret"", ""null"", ""<""]",null_g_r < lzss_offset_for_position_ret_g_l,128,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2911,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_540.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_540.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_540.cpp,38,"[""member"", ""macro"", ""string""]","[""int"", ""lzss_size_ret"", ""<="", ""!""]",Not(lzss_size_ret_ge_r <= int_ge_l),129,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_filter_by_ext.cpp,112,"archive_set_error(a, EINVAL, ""No such format '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_544.cpp,"{
  int names_index = get_array_index(filename);
  
  if (names_index >= 0)
  {  
    int format_state = (names[names_index].format)(a);
    if (format_state == ARCHIVE_OK)
      return ((names[names_index].filter)(a));
    else
      return format_state;
  }    

  archive_set_error(a, EINVAL, ""No such format '%s'"", filename);
  a->state = ARCHIVE_STATE_FATAL;
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_544.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_544.cpp,14,"[""struct archive *"", ""macro"", ""string"", ""const char *""]","[""int"", ""null"", "">="", ""!""]",Not(null_ge_l >= int_ge_r),130,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_filter_by_ext.cpp,134,"archive_set_error(a, EINVAL, ""No such format '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_545.cpp,"{
  int names_index = get_array_index(filename);
  
  if (names_index < 0)
    names_index = get_array_index(def_ext);
  
  if (names_index >= 0)
  {  
    int format_state = (names[names_index].format)(a);
    if (format_state == ARCHIVE_OK)
      return ((names[names_index].filter)(a));
    else
      return format_state;
  }    

  archive_set_error(a, EINVAL, ""No such format '%s'"", filename);
  a->state = ARCHIVE_STATE_FATAL;
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_545.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 33, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_545.cpp,17,"[""struct archive *"", ""macro"", ""string"", ""const char *""]","[""get_array_index_ret"", ""null"", "">="", ""!""]",Not(null_ge_l >= get_array_index_ret_ge_r),131,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,276,"archive_set_error(&self->archive->archive, err,
				    ""Internal error initializing decompressor%s%s"",
				    detail == NULL ? """" : "": "",
				    detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_563.cpp,"{
				const char *detail = NULL;
				int err = ARCHIVE_ERRNO_MISC;
				switch (ret) {
				case BZ_PARAM_ERROR:
					detail = ""invalid setup parameter"";
					break;
				case BZ_MEM_ERROR:
					err = ENOMEM;
					detail = ""out of memory"";
					break;
				case BZ_CONFIG_ERROR:
					detail = ""mis-compiled library"";
					break;
				}
				archive_set_error(&self->archive->archive, err,
				    ""Internal error initializing decompressor%s%s"",
				    detail == NULL ? """" : "": "",
				    detail);
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_563.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 1, 25, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_563.cpp,55,"[""member"", ""macro"", ""string"", ""string"", ""const char *""]","[""BZ2_bzDecompressInit_ret"", ""macro"", ""!=""]",Not(BZ2_bzDecompressInit_ret_e_l == macro_e_r),132,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,112,"archive_set_error(a,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_572.cpp,"{
		archive_set_error(a,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_572.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_572.cpp,14,"[""struct archive *"", ""macro"", ""string""]","[""strdup_ret"", ""null"", ""==""]",null_e_l == strdup_ret_e_r,133,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,229,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_577.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_577.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_577.cpp,30,"[""member"", ""macro"", ""string""]","[""unsigned"", ""constant"", ""<""]",constant_g_r < unsigned_g_l,134,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,256,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_579.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_579.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_579.cpp,57,"[""member"", ""macro"", ""string""]","[""unsigned"", ""int"", "">""]",int_g_l > unsigned_g_r,135,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,300,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_581.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p, *_p;
	unsigned checksum, flags, len, method, version;

	/*
	 * Check LZOP magic code.
	 */
	p = __archive_read_filter_ahead(self->upstream,
		LZOP_HEADER_MAGIC_LEN, NULL);
	if (p == NULL)
		return (ARCHIVE_EOF);

	if (memcmp(p, LZOP_HEADER_MAGIC, LZOP_HEADER_MAGIC_LEN))
		return (ARCHIVE_EOF);
	__archive_read_filter_consume(self->upstream,
	    LZOP_HEADER_MAGIC_LEN);

	p = __archive_read_filter_ahead(self->upstream, 29, NULL);
	if (p == NULL)
		goto truncated;
	_p = p;
	version = archive_be16dec(p);
	p += 4;/* version(2 bytes) + library version(2 bytes) */

	if (version >= 0x940) {
		unsigned reqversion = archive_be16dec(p); p += 2;
		if (reqversion < 0x900) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");
			return (ARCHIVE_FAILED);
		}
	}

	method = *p++;
	if (method < 1 || method > 3) {
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Unsupported method"");
		return (ARCHIVE_FAILED);
	}

	if (version >= 0x940) {
		unsigned level = *p++;
#if 0
		unsigned default_level[] = {0, 3, 1, 9};
#endif
		if (level == 0)
			/* Method is 1..3 here due to check above. */
#if 0	/* Avoid an error Clang Static Analyzer claims
	  ""Value stored to 'level' is never read"". */
			level = default_level[method];
#else
			;/* NOP */
#endif
		else if (level > 9) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");
			return (ARCHIVE_FAILED);
		}
	}

	flags = archive_be32dec(p); p += 4;

	if (flags & FILTER)
		p += 4; /* Skip filter */
	p += 4; /* Skip mode */
	if (version >= 0x940)
		p += 8; /* Skip mtime */
	else
		p += 4; /* Skip mtime */
	len = *p++; /* Read filename length */
	len += p - _p;
	/* Make sure we have all bytes we need to calculate checksum. */
	p = __archive_read_filter_ahead(self->upstream, len + 4, NULL);
	if (p == NULL)
		goto truncated;
	if (flags & CRC32_HEADER)
		checksum = crc32(crc32(0, NULL, 0), p, len);
	else
		checksum = adler32(adler32(0, NULL, 0), p, len);
	if (archive_be32dec(p + len) != checksum)
		goto corrupted;
	__archive_read_filter_consume(self->upstream, len + 4);
	if (flags & EXTRA_FIELD) {
		/* Skip extra field */
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		len = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, len + 4 + 4);
	}
	state->flags = flags;
	state->in_stream = 1;
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_581.cpp,"[18, 0, 0, 0, 0, 0, 8, 0, 0, 0, 19, 2, 4, 1, 1, 185, 0, 0, 5, 10, 0, 0, 3, 33, 0, 0, 0, 0, 3, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 16, 16, 3, 0, 23, 0, 0, 30, 1, 54, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_581.cpp,101,"[""member"", ""macro"", ""string""]","[""archive_be32dec_ret"", ""crc32_ret"", ""!=""]",Not(archive_be32dec_ret_e_l == crc32_ret_e_r),136,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,352,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_583.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p;
	unsigned flags = state->flags;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->uncompressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->uncompressed_size == 0)
		return (ARCHIVE_EOF);
	if (state->uncompressed_size > MAX_BLOCK_SIZE)
		goto corrupted;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->compressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->compressed_size > state->uncompressed_size)
		goto corrupted;

	if (flags & (CRC32_UNCOMPRESSED | ADLER32_UNCOMPRESSED)) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = state->uncompressed_cksum =
		    archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	if ((flags & (CRC32_COMPRESSED | ADLER32_COMPRESSED)) &&
	    state->compressed_size < state->uncompressed_size) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_583.cpp,"[9, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 6, 0, 1, 136, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 9, 0, 0, 14, 0, 0, 14, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_583.cpp,47,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", "">"", ""member"", ""member"", "">"", ""&&""]","And(member_g_l > member_g_r, macro_g_l > member_g_r)",137,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,421,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_586.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_586.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_586.cpp,64,"[""member"", ""macro"", ""string""]","[""crc32_ret"", ""member"", ""!=""]",Not(crc32_ret_e_l == member_e_r),138,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,469,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_590.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_590.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_590.cpp,112,"[""member"", ""macro"", ""string""]","[""adler32_ret"", ""member"", ""!=""]",Not(adler32_ret_e_l == member_e_r),139,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,252,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_593.cpp,"{
		/* still no good, the header end might be beyond the
		 * probe we've requested, but then again who'd cram
		 * so much stuff into the header *and* be 28500-compliant */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_593.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_593.cpp,43,"[""member"", ""macro"", ""string""]","[""_warc_find_eoh_ret"", ""null"", ""==""]",_warc_find_eoh_ret_e_l == null_e_r,140,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_594.cpp,"{
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_594.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_594.cpp,51,"[""member"", ""macro"", ""string""]","[""_warc_rdver_ret"", ""constant"", ""==""]",_warc_rdver_ret_e_l == constant_e_r,141,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,265,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_595.cpp,"{
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_595.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_595.cpp,56,"[""member"", ""macro"", ""string"", ""int"", ""int""]","[""_warc_rdver_ret"", ""constant"", ""<"", ""_warc_rdver_ret"", ""constant"", "">"", ""||""]","Or(constant_g_l > _warc_rdver_ret_g_r,
   constant_g_r < _warc_rdver_ret_g_l)",142,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,275,"archive_set_error(
			&a->archive, EINVAL,
			""Bad content length"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_596.cpp,"{
		/* nightmare!  the specs say content-length is mandatory
		 * so I don't feel overly bad stopping the reader here */
		archive_set_error(
			&a->archive, EINVAL,
			""Bad content length"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_596.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_596.cpp,66,"[""member"", ""macro"", ""string""]","[""_warc_rdlen_ret"", ""null"", ""<""]",null_g_r < _warc_rdlen_ret_g_l,143,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,284,"archive_set_error(
			&a->archive, EINVAL,
			""Bad record time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_597.cpp,"{
		/* record time is mandatory as per WARC/1.0,
		 * so just barf here, fast and loud */
		archive_set_error(
			&a->archive, EINVAL,
			""Bad record time"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_597.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_597.cpp,75,"[""member"", ""macro"", ""string""]","[""_warc_rdrtm_ret"", ""int"", ""==""]",_warc_rdrtm_ret_e_l == int_e_r,144,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_598.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_598.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_598.cpp,85,"[""member"", ""string"", ""int"", ""int""]","[""_warc_rdver_ret"", ""member"", ""!=""]",Not(_warc_rdver_ret_e_l == member_e_r),145,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,279,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_607.cpp,"{
	case BZ_OK:
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_607.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_607.cpp,19,"[""member"", ""macro"", ""string""]","[""BZ2_bzCompressEnd_ret""]",Not(BZ2_bzCompressEnd_ret_e_l == null_e_r),146,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,161,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""lzo_init(type check) failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_610.cpp,"{
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""lzo_init(type check) failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_610.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_610.cpp,26,"[""struct archive *"", ""macro"", ""string""]","[""lzo_init_ret"", ""macro"", ""!=""]",Not(lzo_init_ret_e_l == macro_e_r),147,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,167,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""liblzo library is too old(%s < 0.940)"",
		    lzo_version_string());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_611.cpp,"{
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""liblzo library is too old(%s < 0.940)"",
		    lzo_version_string());
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_611.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_611.cpp,32,"[""struct archive *"", ""macro"", ""string"", ""lzo_version_string_ret""]","[""lzo_version_ret"", ""constant"", ""<""]",constant_g_r < lzo_version_ret_g_l,148,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,358,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzop compression failed: returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_617.cpp,"{
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzop compression failed: returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_617.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_617.cpp,39,"[""member"", ""macro"", ""string"", ""lzo1x_999_compress_level_ret""]","[""lzo1x_1_compress_ret"", ""macro"", ""!=""]",Not(lzo1x_1_compress_ret_e_l == macro_e_r),149,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,931,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_622.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_622.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_622.cpp,12,"[""member"", ""null"", ""string""]","[""member"", ""null"", ""=="", ""member"", ""macro"", ""=="", ""||""]","Or(macro_e_l == member_e_r, member_e_l == null_e_r)",150,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,988,"archive_set_error(&a->archive, errno, ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_623.cpp,"{
			DWORD lasterr;

			lasterr = GetLastError();
			if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Write failed"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_623.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 16, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_623.cpp,69,"[""member"", ""macro"", ""string""]","[""WriteFile_ret"", ""!""]",Not(Not(WriteFile_ret_e_l == null_e_r)),151,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1015,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_624.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_624.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_624.cpp,15,"[""member"", ""null"", ""string""]","[""write_data_block_ret"", ""size_t"", ""<""]",size_t_g_r < write_data_block_ret_g_l,152,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1060,"archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_625.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_625.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_625.cpp,23,"[""member"", ""unkown"", ""string""]","[""la_ftruncate_ret"", ""int"", ""==""]",int_e_l == la_ftruncate_ret_e_r,153,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1389,"archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_629.cpp,"{
			archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_629.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_629.cpp,116,"[""member"", ""null"", ""string""]","[""member"", ""bhfi_dev_ret"", ""member"", ""=="", ""bhfi_ino_ret"", ""member"", ""=="", ""&&"", ""&&""]","And(And(bhfi_ino_ret_e_l == member_e_r,
        bhfi_dev_ret_e_l == member_e_r),
    Not(member_e_l == null_e_r))",154,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1431,"archive_set_error(&a->archive, en, ""Can't create '%ls'"",
		    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_632.cpp,"{
		/* Everything failed; give up here. */
		archive_set_error(&a->archive, en, ""Can't create '%ls'"",
		    a->name);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_632.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_632.cpp,158,"[""member"", ""create_filesystem_object_ret"", ""string"", ""member""]","[""create_filesystem_object_ret""]",Not(create_filesystem_object_ret_e_l == null_e_r),155,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1854,"archive_set_error(&a->archive, 0,
					    ""Removing symlink %ls"",
					    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_634.cpp,"{
					archive_set_error(&a->archive, 0,
					    ""Removing symlink %ls"",
					    a->name);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_634.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_634.cpp,54,"[""member"", ""null"", ""string"", ""member""]","[""S_ISLNK_ret"", ""!""]",Not(Not(S_ISLNK_ret_e_l == null_e_r)),156,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2210,"archive_set_error(&a->archive, errno, ""Failed to create dir '%ls'"",
	    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_644.cpp,"{
	BY_HANDLE_FILE_INFORMATION st;
	struct fixup_entry *le;
	wchar_t *slash, *base, *full;
	mode_t mode_final, mode, st_mode;
	int r;

	/* Check for special names and just skip them. */
	slash = wcsrchr(path, L'\\');
	if (slash == NULL)
		base = path;
	else
		base = slash + 1;

	if (base[0] == L'\0' ||
	    (base[0] == L'.' && base[1] == L'\0') ||
	    (base[0] == L'.' && base[1] == L'.' && base[2] == L'\0')) {
		/* Don't bother trying to create null path, '.', or '..'. */
		if (slash != NULL) {
			*slash = L'\0';
			r = create_dir(a, path);
			*slash = L'\\';
			return (r);
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Yes, this should be stat() and not lstat().  Using lstat()
	 * here loses the ability to extract through symlinks.  Also note
	 * that this should not use the a->st cache.
	 */
	if (file_information(a, path, &st, &st_mode, 0) == 0) {
		if (S_ISDIR(st_mode))
			return (ARCHIVE_OK);
		if ((a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%ls'"", path);
			return (ARCHIVE_FAILED);
		}
		if (disk_unlink(path) != 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%ls': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}
	} else if (errno != ENOENT && errno != ENOTDIR) {
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%ls'"", path);
		return (ARCHIVE_FAILED);
	} else if (slash != NULL) {
		*slash = '\0';
		r = create_dir(a, path);
		*slash = '\\';
		if (r != ARCHIVE_OK)
			return (r);
	}

	/*
	 * Mode we want for the final restored directory.  Per POSIX,
	 * implicitly-created dirs must be created obeying the umask.
	 * There's no mention whether this is different for privileged
	 * restores (which the rest of this code handles by pretending
	 * umask=0).  I've chosen here to always obey the user's umask for
	 * implicit dirs, even if _EXTRACT_PERM was specified.
	 */
	mode_final = DEFAULT_DIR_MODE & ~a->user_umask;
	/* Mode we want on disk during the restore process. */
	mode = mode_final;
	mode |= MINIMUM_DIR_MODE;
	mode &= MAXIMUM_DIR_MODE;
	/*
	 * Apply __la_win_permissive_name_w to path in order to
	 * remove '../' path string.
	 */
	full = __la_win_permissive_name_w(path);
	if (full == NULL)
		errno = EINVAL;
	else if (CreateDirectoryW(full, NULL) != 0) {
		if (mode != mode_final) {
			le = new_fixup(a, path);
			le->fixup |=TODO_MODE_BASE;
			le->mode = mode_final;
		}
		free(full);
		return (ARCHIVE_OK);
	} else {
		la_dosmaperr(GetLastError());
	}
	free(full);

	/*
	 * Without the following check, a/b/../b/c/d fails at the
	 * second visit to 'b', so 'd' can't be created.  Note that we
	 * don't add it to the fixup list here, as it's already been
	 * added.
	 */
	if (file_information(a, path, &st, &st_mode, 0) == 0 &&
	    S_ISDIR(st_mode))
		return (ARCHIVE_OK);

	archive_set_error(&a->archive, errno, ""Failed to create dir '%ls'"",
	    path);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_644.cpp,"[14, 0, 0, 0, 0, 0, 10, 0, 0, 0, 17, 0, 0, 0, 0, 154, 0, 0, 5, 9, 0, 0, 0, 29, 0, 0, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 14, 14, 2, 0, 19, 0, 0, 25, 3, 43, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_644.cpp,105,"[""member"", ""macro"", ""string"", ""unkown""]","[""file_information_ret"", ""null"", ""=="", ""S_ISDIR_ret"", ""&&"", ""!""]","Not(And(Not(S_ISDIR_ret_e_l == null_e_r),
        file_information_ret_e_l == null_e_r))",157,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2238,"archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %ls"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_646.cpp,"{
/* unfortunately, on win32 there is no 'root' user with uid 0,
   so we just have to try the chown and see if it works */

	/* If we know we can't change it, don't bother trying. */
	if (a->user_uid != 0  &&  a->user_uid != a->uid) {
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}

	archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %ls"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_646.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_646.cpp,13,"[""member"", ""unkown"", ""string"", ""member"", ""member"", ""member""]","[""member"", ""null"", ""!="", ""member"", ""member"", ""!="", ""&&"", ""!""]","Not(And(Not(member_e_l == member_e_r),
        Not(member_e_l == null_e_r)))",158,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2305,"archive_set_error(&a->archive, EINVAL, ""Can't restore time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_647.cpp,"{
#define EPOC_TIME ARCHIVE_LITERAL_ULL(116444736000000000)
#define WINTIME(sec, nsec) ((Int32x32To64(sec, 10000000) + EPOC_TIME)\
	 + (((nsec)/1000)*10))

	HANDLE hw = 0;
	ULARGE_INTEGER wintm;
	FILETIME *pfbtime;
	FILETIME fatime, fbtime, fmtime;

	(void)ctime_sec; /* UNUSED */
	(void)ctime_nanos; /* UNUSED */

	if (h != INVALID_HANDLE_VALUE) {
		hw = NULL;
	} else {
		wchar_t *ws;

		if (S_ISLNK(mode))
			return (ARCHIVE_OK);
		ws = __la_win_permissive_name_w(name);
		if (ws == NULL)
			goto settimes_failed;
		hw = CreateFileW(ws, FILE_WRITE_ATTRIBUTES,
		    0, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);
		free(ws);
		if (hw == INVALID_HANDLE_VALUE)
			goto settimes_failed;
		h = hw;
	}

	wintm.QuadPart = WINTIME(atime, atime_nanos);
	fatime.dwLowDateTime = wintm.LowPart;
	fatime.dwHighDateTime = wintm.HighPart;
	wintm.QuadPart = WINTIME(mtime, mtime_nanos);
	fmtime.dwLowDateTime = wintm.LowPart;
	fmtime.dwHighDateTime = wintm.HighPart;
	/*
	 * SetFileTime() supports birthtime.
	 */
	if (birthtime > 0 || birthtime_nanos > 0) {
		wintm.QuadPart = WINTIME(birthtime, birthtime_nanos);
		fbtime.dwLowDateTime = wintm.LowPart;
		fbtime.dwHighDateTime = wintm.HighPart;
		pfbtime = &fbtime;
	} else
		pfbtime = NULL;
	if (SetFileTime(h, pfbtime, &fatime, &fmtime) == 0)
		goto settimes_failed;
	CloseHandle(hw);
	return (ARCHIVE_OK);

settimes_failed:
	CloseHandle(hw);
	archive_set_error(&a->archive, EINVAL, ""Can't restore time"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_647.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 1, 3, 0, 0, 126, 0, 0, 5, 7, 0, 0, 1, 6, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 6, 6, 2, 0, 11, 2, 0, 21, 0, 25, 2, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_647.cpp,61,"[""member"", ""macro"", ""string""]","[""SetFileTime_ret"", ""null"", ""=="", ""__la_win_permissive_name_w_ret"", ""null"", ""=="", ""CreateFileW_ret"", ""macro"", ""=="", ""&&"", ""&&""]","And(And(CreateFileW_ret_e_l == macro_e_r,
        __la_win_permissive_name_w_ret_e_l == null_e_r),
    SetFileTime_ret_e_l == null_e_r)",159,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2397,"archive_set_error(&a->archive, errno,
			    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_648.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't set permissions to 0%o"", (int)mode);
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_648.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_648.cpp,48,"[""member"", ""unkown"", ""string"", ""macro""]","[""lchmod_ret"", ""null"", ""!=""]",Not(lchmod_ret_e_l == null_e_r),160,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2421,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_650.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_650.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_650.cpp,72,"[""member"", ""unkown"", ""string"", ""int""]","[""la_chmod_ret"", ""null"", ""!=""]",Not(la_chmod_ret_e_l == null_e_r),161,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,174,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_655.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;
	struct program_bidder *state;

	/*
	 * Get a bidder object from the read core.
	 */
	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	/*
	 * Allocate our private state.
	 */
	state = (struct program_bidder *)calloc(1, sizeof (*state));
	if (state == NULL)
		goto memerr;
	state->cmd = strdup(cmd);
	if (state->cmd == NULL)
		goto memerr;

	return set_bidder_signature(bidder, state, signature, signature_len);
memerr:
	free_state(state);
	archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_655.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 1, 2, 0, 0, 48, 0, 0, 3, 3, 0, 0, 1, 2, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_655.cpp,27,"[""struct archive *"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""member"", ""null"", ""=="", ""&&""]","And(member_e_l == null_e_r, calloc_ret_e_l == null_e_r)",162,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,281,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited with signal %d"",
		    WTERMSIG(state->exit_status));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_657.cpp,"{
#ifdef SIGPIPE
		/* If the child died because we stopped reading before
		 * it was done, that's okay.  Some archive formats
		 * have padding at the end that we routinely ignore. */
		/* The alternative to this would be to add a step
		 * before close(child_stdout) above to read from the
		 * child until the child has no more to write. */
		if (WTERMSIG(state->exit_status) == SIGPIPE)
			return (ARCHIVE_OK);
#endif
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited with signal %d"",
		    WTERMSIG(state->exit_status));
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_657.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 1, 0, 6, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_657.cpp,44,"[""member"", ""macro"", ""string"", ""WTERMSIG_ret""]","[""WTERMSIG_ret"", ""macro"", ""=="", ""!""]",Not(WTERMSIG_ret_e_l == macro_e_r),163,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,292,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Child process exited with status %d"",
		    WEXITSTATUS(state->exit_status));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_658.cpp,"{
		if (WEXITSTATUS(state->exit_status) == 0)
			return (ARCHIVE_OK);

		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Child process exited with status %d"",
		    WEXITSTATUS(state->exit_status));
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_658.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_658.cpp,55,"[""member"", ""macro"", ""string"", ""WEXITSTATUS_ret""]","[""WEXITSTATUS_ret"", ""null"", ""=="", ""!""]",Not(WEXITSTATUS_ret_e_l == null_e_r),164,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,410,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate input data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_659.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate input data"");
		if (state != NULL) {
			archive_string_free(&state->description);
			free(state);
		}
		free(out_buf);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_659.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_659.cpp,15,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""archive_string_ensure_ret"", ""null"", ""=="", ""||"", ""||""]","Or(Or(archive_string_ensure_ret_e_l == null_e_r,
      malloc_ret_e_l == null_e_r),
   calloc_ret_e_l == null_e_r)",165,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Value is longer than %zu characters ""
		    ""for option ``%s''"", maxsize, key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_674.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Value is longer than %zu characters ""
		    ""for option ``%s''"", maxsize, key);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_674.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_674.cpp,6,[],"[""strlen_ret"", ""size_t"", "">""]",size_t_g_l > strlen_ret_g_r,166,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1224,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value for option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_676.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value for option ``%s''"", key);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_676.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_676.cpp,21,"[""member"", ""macro"", ""string"", ""const char *""]","[""const char *"", ""char"", "">="", ""const char *"", ""char"", ""<="", ""&&"", ""!""]","Not(And(char_ge_r <= const char *_ge_l,
        char_ge_l >= const char *_ge_r))",167,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1329,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_679.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_679.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_679.cpp,80,[],"[""char"", ""constant"", "">""]",constant_g_l > char_g_r,168,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1515,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Invalid value for option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_682.cpp,"{
	struct iso9660 *iso9660 = a->format_data;
	const char *p;
	int r;

	switch (key[0]) {
	case 'a':
		if (strcmp(key, ""abstract-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->abstract_file_identifier),
			    ABSTRACT_FILE_SIZE, key, value);
			iso9660->opt.abstract_file = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""application-id"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->application_identifier),
			    APPLICATION_IDENTIFIER_SIZE, key, value);
			iso9660->opt.application_id = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""allow-vernum"") == 0) {
			iso9660->opt.allow_vernum = value != NULL;
			return (ARCHIVE_OK);
		}
		break;
	case 'b':
		if (strcmp(key, ""biblio-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->bibliographic_file_identifier),
			    BIBLIO_FILE_SIZE, key, value);
			iso9660->opt.biblio_file = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""boot"") == 0) {
			if (value == NULL)
				iso9660->opt.boot = 0;
			else {
				iso9660->opt.boot = 1;
				archive_strcpy(
				    &(iso9660->el_torito.boot_filename),
				    value);
			}
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-catalog"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->el_torito.catalog_filename),
			    1024, key, value);
			iso9660->opt.boot_catalog = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""boot-info-table"") == 0) {
			iso9660->opt.boot_info_table = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-load-seg"") == 0) {
			uint32_t seg;

			iso9660->opt.boot_load_seg = 0;
			if (value == NULL)
				goto invalid_value;
			seg = 0;
			p = value;
			if (p[0] == '0' && (p[1] == 'x' || p[1] == 'X'))
				p += 2;
			while (*p) {
				if (seg)
					seg <<= 4;
				if (*p >= 'A' && *p <= 'F')
					seg += *p - 'A' + 0x0a;
				else if (*p >= 'a' && *p <= 'f')
					seg += *p - 'a' + 0x0a;
				else if (*p >= '0' && *p <= '9')
					seg += *p - '0';
				else
					goto invalid_value;
				if (seg > 0xffff) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);
					return (ARCHIVE_FATAL);
				}
				p++;
			}
			iso9660->el_torito.boot_load_seg = (uint16_t)seg;
			iso9660->opt.boot_load_seg = 1;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-load-size"") == 0) {
			int num = 0;
			r = get_num_opt(a, &num, 0xffff, 1, key, value);
			iso9660->opt.boot_load_size = r == ARCHIVE_OK;
			if (r != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			iso9660->el_torito.boot_load_size = (uint16_t)num;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-type"") == 0) {
			if (value == NULL)
				goto invalid_value;
			if (strcmp(value, ""no-emulation"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_NO_EMU;
			else if (strcmp(value, ""fd"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_FD;
			else if (strcmp(value, ""hard-disk"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_HARD_DISK;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'c':
		if (strcmp(key, ""compression-level"") == 0) {
#ifdef HAVE_ZLIB_H
			if (value == NULL ||
			    !(value[0] >= '0' && value[0] <= '9') ||
			    value[1] != '\0')
				goto invalid_value;
                	iso9660->zisofs.compression_level = value[0] - '0';
			iso9660->opt.compression_level = 1;
                	return (ARCHIVE_OK);
#else
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Option ``%s'' ""
			    ""is not supported on this platform."", key);
			return (ARCHIVE_FATAL);
#endif
		}
		if (strcmp(key, ""copyright-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->copyright_file_identifier),
			    COPYRIGHT_FILE_SIZE, key, value);
			iso9660->opt.copyright_file = r == ARCHIVE_OK;
			return (r);
		}
#ifdef DEBUG
		/* Specifies Volume creation date and time;
		 * year(4),month(2),day(2),hour(2),minute(2),second(2).
		 * e.g. ""20090929033757""
		 */
		if (strcmp(key, ""creation"") == 0) {
			struct tm tm;
			char buf[5];

			p = value;
			if (p == NULL || strlen(p) < 14)
				goto invalid_value;
			memset(&tm, 0, sizeof(tm));
			memcpy(buf, p, 4); buf[4] = '\0'; p += 4;
			tm.tm_year = strtol(buf, NULL, 10) - 1900;
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_mon = strtol(buf, NULL, 10) - 1;
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_mday = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_hour = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_min = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0';
			tm.tm_sec = strtol(buf, NULL, 10);
			iso9660->birth_time = mktime(&tm);
			return (ARCHIVE_OK);
		}
#endif
		break;
	case 'i':
		if (strcmp(key, ""iso-level"") == 0) {
			if (value != NULL && value[1] == '\0' &&
			    (value[0] >= '1' && value[0] <= '4')) {
				iso9660->opt.iso_level = value[0]-'0';
				return (ARCHIVE_OK);
			}
			goto invalid_value;
		}
		break;
	case 'j':
		if (strcmp(key, ""joliet"") == 0) {
			if (value == NULL)
				iso9660->opt.joliet = OPT_JOLIET_DISABLE;
			else if (strcmp(value, ""1"") == 0)
				iso9660->opt.joliet = OPT_JOLIET_ENABLE;
			else if (strcmp(value, ""long"") == 0)
				iso9660->opt.joliet = OPT_JOLIET_LONGNAME;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'l':
		if (strcmp(key, ""limit-depth"") == 0) {
			iso9660->opt.limit_depth = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""limit-dirs"") == 0) {
			iso9660->opt.limit_dirs = value != NULL;
			return (ARCHIVE_OK);
		}
		break;
	case 'p':
		if (strcmp(key, ""pad"") == 0) {
			iso9660->opt.pad = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""publisher"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->publisher_identifier),
			    PUBLISHER_IDENTIFIER_SIZE, key, value);
			iso9660->opt.publisher = r == ARCHIVE_OK;
			return (r);
		}
		break;
	case 'r':
		if (strcmp(key, ""rockridge"") == 0 ||
		    strcmp(key, ""Rockridge"") == 0) {
			if (value == NULL)
				iso9660->opt.rr = OPT_RR_DISABLED;
			else if (strcmp(value, ""1"") == 0)
				iso9660->opt.rr = OPT_RR_USEFUL;
			else if (strcmp(value, ""strict"") == 0)
				iso9660->opt.rr = OPT_RR_STRICT;
			else if (strcmp(value, ""useful"") == 0)
				iso9660->opt.rr = OPT_RR_USEFUL;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'v':
		if (strcmp(key, ""volume-id"") == 0) {
			r = get_str_opt(a, &(iso9660->volume_identifier),
			    VOLUME_IDENTIFIER_SIZE, key, value);
			iso9660->opt.volume_id = r == ARCHIVE_OK;
			return (r);
		}
		break;
	case 'z':
		if (strcmp(key, ""zisofs"") == 0) {
			if (value == NULL)
				iso9660->opt.zisofs = OPT_ZISOFS_DISABLED;
			else {
#ifdef HAVE_ZLIB_H
				iso9660->opt.zisofs = OPT_ZISOFS_DIRECT;
#else
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""``zisofs'' ""
				    ""is not supported on this platform."");
				return (ARCHIVE_FATAL);
#endif
			}
			return (ARCHIVE_OK);
		}
		break;
	}

	/* Note: The ""warn"" return is just to inform the options
	 * supervisor that we didn't handle it.  It will generate
	 * a suitable error if no one used this option. */
	return (ARCHIVE_WARN);

invalid_value:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Invalid value for option ``%s''"", key);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_682.cpp,"[46, 1, 0, 0, 10, 0, 28, 1, 10, 0, 55, 1, 9, 0, 1, 549, 0, 0, 7, 7, 0, 0, 2, 160, 0, 0, 0, 0, 2, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 350, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 19, 0, 48, 46, 8, 0, 60, 0, 0, 81, 9, 162, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_682.cpp,266,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!"", ""int"", ""char"", "">="", ""int"", ""char"", ""<="", ""&&"", ""!"", ""const char *"", ""null"", ""=="", ""strcmp_ret"", ""null"", ""=="", ""!"", ""const char *"", ""null"", ""=="", ""strlen_ret"", ""int"", ""<"", ""||"", ""const char *"", ""null"", ""=="", ""strcmp_ret"", ""null"", ""=="", ""!"", ""const char *"", ""null"", ""!="", ""member"", ""char"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""&&"", ""&&"", ""!"", ""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(And(And(And(And(Or(Or(Not(char_e_l ==
                                        member_e_r),
                                      Not(And(char_ge_r <=
                                        member_ge_l,
                                        char_ge_l >=
                                        member_ge_r))),
                                   const char *_e_l ==
                                   null_e_r),
                                Not(And(And(And(char_ge_r <=
                                        member_ge_l,
                                        char_ge_l >=
                                        member_ge_r),
                                        char_e_l ==
                                        member_e_r),
                                        Not(const char *_e_l ==
                                        null_e_r)))),
                            Not(null_e_l == strcmp_ret_e_r)),
                        const char *_e_l == null_e_r),
                    Or(int_g_r < strlen_ret_g_l,
                       const char *_e_l == null_e_r)),
                Not(null_e_l == strcmp_ret_e_r)),
            const char *_e_l == null_e_r),
        Not(And(char_ge_r <= int_ge_l,
                char_ge_l >= int_ge_r))),
    Not(null_e_l == strcmp_ret_e_r))",169,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1535,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignore symlink file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_683.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignore symlink file."");
		iso9660->cur_file = NULL;
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_683.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_683.cpp,15,"[""member"", ""macro"", ""string""]","[""archive_entry_filetype_ret"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""&&""]","And(macro_e_l == member_e_r,
    archive_entry_filetype_ret_e_l == macro_e_r)",170,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,3651,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_consume()""
		    "" size=%jd, wbuff_remaining=%jd"",
		    (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_693.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_consume()""
		    "" size=%jd, wbuff_remaining=%jd"",
		    (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_693.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_693.cpp,7,[],"[""size_t"", ""member"", "">"", ""member"", ""null"", ""=="", ""||""]","Or(member_e_l == null_e_r, member_g_l > size_t_g_r)",171,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,3795,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Not Found %s `%s'."",
			    label, ids);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_695.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Not Found %s `%s'."",
			    label, ids);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_695.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_695.cpp,22,"[""member"", ""macro"", ""string"", ""const char *"", ""member""]","[""isoent_find_entry_ret"", ""null"", ""==""]",isoent_find_entry_ret_e_l == null_e_r,172,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6311,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""The regulation of Joliet extensions;""
			    "" A length of a full-pathname of `%s' is ""
			    ""longer than 240 bytes, (p=%d, b=%d)"",
			    archive_entry_pathname(np->file->entry),
			    (int)parent_len, (int)np->mb_len);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_719.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""The regulation of Joliet extensions;""
			    "" A length of a full-pathname of `%s' is ""
			    ""longer than 240 bytes, (p=%d, b=%d)"",
			    archive_entry_pathname(np->file->entry),
			    (int)parent_len, (int)np->mb_len);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_719.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_719.cpp,89,[],"[""int"", ""int"", "">"", ""member"", ""int"", "">"", ""int"", ""int"", "">"", ""||"", ""||""]","Or(Or(int_g_l > int_g_r, int_g_l > member_g_r),
   int_g_l > int_g_r)",173,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7073,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Too many directories(%d) over 65535."", dir_number);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_725.cpp,"{
		/*
		 * Maximum number of directories is 65535(0xffff)
		 * doe to size(16bit) of Parent Directory Number of
		 * the Path Table.
		 * See also ISO9660 Standard 9.4.
		 */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Too many directories(%d) over 65535."", dir_number);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_725.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_725.cpp,88,"[""member"", ""macro"", ""string"", ""int""]","[""member"", ""int"", ""constant"", "">"", ""&&""]","And(constant_g_l > int_g_r, Not(member_e_l == null_e_r))",174,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7195,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Boot image file(``%s'') size is too big ""
			    ""for fd type."",
			    iso9660->el_torito.boot_filename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_729.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Boot image file(``%s'') size is too big ""
			    ""for fd type."",
			    iso9660->el_torito.boot_filename.s);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_729.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_729.cpp,91,[],"[""archive_entry_size_ret"", ""macro"", ""<="", ""!""]",Not(macro_ge_r <= archive_entry_size_ret_ge_l),175,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7325,"archive_set_error(&a->archive, errno,
		    ""Boot file(%jd) is too small"", (intmax_t)size + 64);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_730.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Boot file(%jd) is too small"", (intmax_t)size + 64);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_730.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_730.cpp,14,"[""member"", ""unkown"", ""string"", ""int""]","[""int"", ""null"", ""<=""]",null_ge_r <= int_ge_l,176,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7789,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_737.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_737.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_737.cpp,9,"[""member"", ""macro"", ""string""]","[""member"", ""deflateEnd_ret"", ""macro"", ""!="", ""&&""]","And(Not(deflateEnd_ret_e_l == macro_e_r),
    Not(member_e_l == null_e_r))",177,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8115,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_748.cpp,"{
        	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_748.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_748.cpp,97,"[""member"", ""macro"", ""string""]","[""member"", ""inflateEnd_ret"", ""macro"", ""!="", ""&&""]","And(Not(inflateEnd_ret_e_l == macro_e_r),
    Not(member_e_l == null_e_r))",178,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,308,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_754.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_754.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_754.cpp,58,"[""member"", ""macro"", ""string""]","[""is_traditional_pkware_encryption_supported_ret"", ""!""]","Not(Not(is_traditional_pkware_encryption_supported_ret_e_l ==
        null_e_r))",179,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,538,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_765.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_765.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_765.cpp,29,"[""member"", ""macro"", ""string""]","[""archive_entry_size_is_set_ret"", ""archive_entry_size_ret"", ""macro"", "">"", ""&&""]","And(macro_g_l > archive_entry_size_ret_g_r,
    Not(archive_entry_size_is_set_ret_e_l == null_e_r))",180,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_766.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_766.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_766.cpp,35,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", "">""]",macro_g_l > member_g_r,181,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1241,"archive_set_error(&a->archive, ENOMEM,
				""Can't allocate zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_776.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
				""Can't allocate zip data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_776.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_776.cpp,107,"[""member"", ""macro"", ""string""]","[""cd_alloc_ret"", ""null"", ""==""]",cd_alloc_ret_e_l == null_e_r,182,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1615,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_781.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_781.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_781.cpp,34,"[""member"", ""macro"", ""string""]","[""archive_encrypto_aes_ctr_init_ret"", ""null"", ""!=""]",Not(archive_encrypto_aes_ctr_init_ret_e_l == null_e_r),183,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,603,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out 7-Zip header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_790.cpp,"{
	const void *h;
	const char *p, *q;
	size_t skip, offset;
	ssize_t bytes, window;

	/*
	 * If bytes_avail > SFX_MIN_ADDR we do not have to call
	 * __archive_read_seek() at this time since we have
	 * already had enough data.
	 */
	if (bytes_avail > SFX_MIN_ADDR)
		__archive_read_consume(a, SFX_MIN_ADDR);
	else if (__archive_read_seek(a, SFX_MIN_ADDR, SEEK_SET) < 0)
		return (ARCHIVE_FATAL);

	offset = 0;
	window = 1;
	while (offset + window <= SFX_MAX_ADDR - SFX_MIN_ADDR) {
		h = __archive_read_ahead(a, window, &bytes);
		if (h == NULL) {
			/* Remaining bytes are less than window. */
			window >>= 1;
			if (window < 0x40)
				goto fatal;
			continue;
		}
		if (bytes < 6) {
			/* This case might happen when window == 1. */
			window = 4096;
			continue;
		}
		p = (const char *)h;
		q = p + bytes;

		/*
		 * Scan ahead until we find something that looks
		 * like the 7-Zip header.
		 */
		while (p + 32 < q) {
			int step = check_7zip_header_in_sfx(p);
			if (step == 0) {
				struct _7zip *zip =
				    (struct _7zip *)a->format->data;
				skip = p - (const char *)h;
				__archive_read_consume(a, skip);
				zip->seek_base = SFX_MIN_ADDR + offset + skip;
				return (ARCHIVE_OK);
			}
			p += step;
		}
		skip = p - (const char *)h;
		__archive_read_consume(a, skip);
		offset += skip;
		if (window == 1)
			window = 4096;
	}
fatal:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out 7-Zip header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_790.cpp,"[7, 2, 0, 0, 0, 2, 3, 0, 0, 0, 10, 1, 1, 0, 5, 95, 0, 0, 6, 9, 0, 0, 2, 12, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 7, 0, 0, 7, 0, 0, 17, 1, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_790.cpp,60,"[""member"", ""macro"", ""string""]","[""int"", ""macro"", ""<="", ""!"", ""int"", ""constant"", ""<"", ""&&""]","And(constant_g_r < int_g_l, Not(macro_ge_r <= int_ge_l))",184,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,777,"sprintf(zip->format_name, ""7-Zip"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_794.cpp,"{
	struct _7zip *zip = (struct _7zip *)a->format->data;
	struct _7zip_entry *zip_entry;
	int r, ret = ARCHIVE_OK;
	struct _7z_folder *folder = 0;
	uint64_t fidx = 0;

	/*
	 * It should be sufficient to call archive_read_next_header() for
	 * a reader to determine if an entry is encrypted or not. If the
	 * encryption of an entry is only detectable when calling
	 * archive_read_data(), so be it. We'll do the same check there
	 * as well.
	 */
	if (zip->has_encrypted_entries == ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW) {
		zip->has_encrypted_entries = 0;
	}

	a->archive.archive_format = ARCHIVE_FORMAT_7ZIP;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""7-Zip"";

	if (zip->entries == NULL) {
		struct _7z_header_info header;

		memset(&header, 0, sizeof(header));
		r = slurp_central_directory(a, zip, &header);
		free_Header(&header);
		if (r != ARCHIVE_OK)
			return (r);
		zip->entries_remaining = (size_t)zip->numFiles;
		zip->entry = zip->entries;
	} else {
		++zip->entry;
	}
	zip_entry = zip->entry;

	if (zip->entries_remaining <= 0 || zip_entry == NULL)
		return ARCHIVE_EOF;
	--zip->entries_remaining;

	zip->entry_offset = 0;
	zip->end_of_entry = 0;
	zip->entry_crc32 = crc32(0, NULL, 0);

	/* Setup a string conversion for a filename. */
	if (zip->sconv == NULL) {
		zip->sconv = archive_string_conversion_from_charset(
		    &a->archive, ""UTF-16LE"", 1);
		if (zip->sconv == NULL)
			return (ARCHIVE_FATAL);
	}

	/* Figure out if the entry is encrypted by looking at the folder
	   that is associated to the current 7zip entry. If the folder
	   has a coder with a _7Z_CRYPTO codec then the folder is encrypted.
	   Hence the entry must also be encrypted. */
	if (zip_entry && zip_entry->folderIndex < zip->si.ci.numFolders) {
		folder = &(zip->si.ci.folders[zip_entry->folderIndex]);
		for (fidx=0; folder && fidx<folder->numCoders; fidx++) {
			switch(folder->coders[fidx].codec) {
				case _7Z_CRYPTO_MAIN_ZIP:
				case _7Z_CRYPTO_RAR_29:
				case _7Z_CRYPTO_AES_256_SHA_256: {
					archive_entry_set_is_data_encrypted(entry, 1);
					zip->has_encrypted_entries = 1;
					break;
				}
			}
		}
	}

	/* Now that we've checked for encryption, if there were still no
	 * encrypted entries found we can say for sure that there are none.
	 */
	if (zip->has_encrypted_entries == ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW) {
		zip->has_encrypted_entries = 0;
	}

	if (archive_entry_copy_pathname_l(entry,
	    (const char *)zip_entry->utf16name,
	    zip_entry->name_len, zip->sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(zip->sconv));
		ret = ARCHIVE_WARN;
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	if (zip_entry->flg & MTIME_IS_SET)
		archive_entry_set_mtime(entry, zip_entry->mtime,
			zip_entry->mtime_ns);
	if (zip_entry->flg & CTIME_IS_SET)
		archive_entry_set_ctime(entry, zip_entry->ctime,
		    zip_entry->ctime_ns);
	if (zip_entry->flg & ATIME_IS_SET)
		archive_entry_set_atime(entry, zip_entry->atime,
		    zip_entry->atime_ns);
	if (zip_entry->ssIndex != (uint32_t)-1) {
		zip->entry_bytes_remaining =
		    zip->si.ss.unpackSizes[zip_entry->ssIndex];
		archive_entry_set_size(entry, zip->entry_bytes_remaining);
	} else {
		zip->entry_bytes_remaining = 0;
		archive_entry_set_size(entry, 0);
	}

	/* If there's no body, force read_data() to return EOF immediately. */
	if (zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	if ((zip_entry->mode & AE_IFMT) == AE_IFLNK) {
		unsigned char *symname = NULL;
		size_t symsize = 0;

		/*
		 * Symbolic-name is recorded as its contents. We have to
		 * read the contents at this time.
		 */
		while (zip->entry_bytes_remaining > 0) {
			const void *buff;
			unsigned char *mem;
			size_t size;
			int64_t offset;

			r = archive_read_format_7zip_read_data(a, &buff,
				&size, &offset);
			if (r < ARCHIVE_WARN) {
				free(symname);
				return (r);
			}
			mem = realloc(symname, symsize + size + 1);
			if (mem == NULL) {
				free(symname);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symname"");
				return (ARCHIVE_FATAL);
			}
			symname = mem;
			memcpy(symname+symsize, buff, size);
			symsize += size;
		}
		if (symsize == 0) {
			/* If there is no symname, handle it as a regular
			 * file. */
			zip_entry->mode &= ~AE_IFMT;
			zip_entry->mode |= AE_IFREG;
			archive_entry_set_mode(entry, zip_entry->mode);
		} else {
			symname[symsize] = '\0';
			archive_entry_copy_symlink(entry,
			    (const char *)symname);
		}
		free(symname);
		archive_entry_set_size(entry, 0);
	}

	/* Set up a more descriptive format name. */
	sprintf(zip->format_name, ""7-Zip"");
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_794.cpp,"[20, 1, 1, 0, 1, 0, 7, 1, 3, 0, 28, 0, 0, 0, 3, 364, 0, 0, 12, 13, 0, 0, 7, 33, 0, 0, 0, 0, 6, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 159, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 23, 20, 3, 0, 28, 0, 0, 48, 0, 66, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_794.cpp,169,"[""member"", ""string""]","[""member"", ""null"", "">"", ""!"", ""bool"", ""macro"", ""=="", ""!"", ""&&""]","And(Not(bool_e_l == macro_e_r), Not(null_g_l > member_g_r))",185,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1194,"archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_808.cpp,"{
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_808.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 1, 27, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_808.cpp,184,"[""member"", ""macro"", ""string"", ""string""]","[""BZ2_bzDecompressInit_ret"", ""macro"", ""!="", ""member"", ""&&""]","And(Not(member_e_l == null_e_r),
    Not(BZ2_bzDecompressInit_ret_e_l == macro_e_r))",186,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1252,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_813.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_813.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_813.cpp,242,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""<"", ""member"", ""macro"", "">"", ""archive_le32dec_ret"", ""macro"", ""<"", ""archive_le32dec_ret"", ""macro"", "">"", ""||"", ""||"", ""||""]","Or(Or(Or(macro_g_l > archive_le32dec_ret_g_r,
         macro_g_r < archive_le32dec_ret_g_l),
      macro_g_l > member_g_r),
   macro_g_r < member_g_l)",187,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1483,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Decompression internal error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_823.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Decompression internal error"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_823.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_823.cpp,177,"[""member"", ""macro"", ""string""]","[""member"", ""!"", ""member"", ""null"", ""<"", ""size_t *"", ""null"", ""<="", ""||"", ""||""]","Or(Or(null_ge_r <= size_t *_ge_l, null_g_r < member_g_l),
   Not(Not(member_e_l == null_e_r)))",188,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1500,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to initialize PPMd range decorder"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_824.cpp,"{
				zip->ppmd7_stat = -1;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to initialize PPMd range decorder"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_824.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_824.cpp,194,"[""member"", ""macro"", ""string""]","[""__archive_ppmd7_functions . Ppmd7z_RangeDec_Init_ret"", ""null"", ""==""]","__archive_ppmd7_functions . Ppmd7z_RangeDec_Init_ret_e_l ==
null_e_r",189,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2041,"archive_set_error(&a->archive, -1,
		    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_831.cpp,"{
	case 0:
		ci->folders =
			calloc((size_t)ci->numFolders, sizeof(*ci->folders));
		if (ci->folders == NULL)
			return (-1);
		for (i = 0; i < ci->numFolders; i++) {
			if (read_Folder(a, &(ci->folders[i])) < 0)
				goto failed;
		}
		break;
	case 1:
		if (parse_7zip_uint64(a, &(ci->dataStreamIndex)) < 0)
			return (-1);
		if (UMAX_ENTRY < ci->dataStreamIndex)
			return (-1);
		if (ci->numFolders > 0) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			goto failed;
		}
		break;
	default:
		archive_set_error(&a->archive, -1,
		    ""Malformed 7-Zip archive"");
		goto failed;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_831.cpp,"[5, 0, 1, 0, 2, 0, 3, 0, 2, 1, 7, 0, 3, 0, 0, 50, 0, 0, 0, 0, 0, 0, 1, 13, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 30, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 5, 0, 0, 6, 0, 0, 3, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_831.cpp,51,"[""member"", ""int"", ""string""]","[""header_bytes_ret""]",Not(header_bytes_ret_e_l == null_e_r),190,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2772,"archive_set_error(&a->archive, -1, ""Malformed Header offset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_835.cpp,"{
		archive_set_error(&a->archive, -1, ""Malformed Header offset"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_835.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_835.cpp,24,"[""member"", ""int"", ""string""]","[""member"", ""member"", ""<"", ""member"", ""null"", ""<"", ""member"", ""null"", ""=="", ""member"", ""null"", ""<"", ""||"", ""||"", ""||""]","Or(Or(Or(null_g_r < member_g_l, member_e_l == null_e_r),
      null_g_r < member_g_l),
   member_g_r < member_g_l)",191,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2844,"archive_set_error(&a->archive, -1, ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_837.cpp,"{
		archive_set_error(&a->archive, -1, ""Header CRC error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_837.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_837.cpp,32,"[""member"", ""int"", ""string""]","[""crc32_ret"", ""archive_le32dec_ret"", ""!=""]",Not(archive_le32dec_ret_e_l == crc32_ret_e_r),192,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2857,"archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_838.cpp,"{
		archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_838.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_838.cpp,45,"[""member"", ""int"", ""string""]","[""archive_le64dec_ret"", ""null"", ""<""]",null_g_r < archive_le64dec_ret_g_l,193,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2878,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_839.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_839.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_839.cpp,66,"[""member"", ""macro"", ""string""]","[""header_bytes_ret"", ""null"", ""==""]",header_bytes_ret_e_l == null_e_r,194,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2894,"archive_set_error(&a->archive, -1,
			    ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_840.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Damaged 7-Zip archive"");
			r = -1;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_840.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_840.cpp,82,"[""member"", ""int"", ""string""]","[""decode_encoded_header_info_ret"", ""null"", ""=="", ""member"", ""archive_le32dec_ret"", ""!="", ""&&""]","And(Not(archive_le32dec_ret_e_l == member_e_r),
    decode_encoded_header_info_ret_e_l == null_e_r)",195,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2940,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_843.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_843.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_843.cpp,128,"[""member"", ""int"", ""string""]","[""header_bytes_ret"", ""null"", ""=="", ""header_bytes_ret"", ""unkown"", ""!="", ""||""]","Or(Not(header_bytes_ret_e_l == unkown_e_r),
   header_bytes_ret_e_l == null_e_r)",196,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2947,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_844.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_844.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_844.cpp,135,"[""member"", ""int"", ""string""]","[""int"", ""member"", ""archive_le32dec_ret"", ""!="", ""&&""]","And(Not(archive_le32dec_ret_e_l == member_e_r),
    Not(int_e_l == null_e_r))",197,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3040,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_848.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_848.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_848.cpp,12,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""=="", ""ssize_t"", ""null"", ""<="", ""||""]","Or(null_ge_r <= ssize_t_ge_l,
   __archive_read_ahead_ret_e_l == null_e_r)",198,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3174,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_852.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_852.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_852.cpp,146,"[""member"", ""macro"", ""string""]","[""int"", ""ssize_t"", ""null"", ""=="", ""member"", ""null"", ""=="", ""&&"", ""||""]","Or(And(member_e_l == null_e_r, null_e_l == ssize_t_e_r),
   Not(int_e_l == null_e_r))",199,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3181,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_853.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_853.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_853.cpp,153,"[""member"", ""macro"", ""string""]","[""member"", ""size_t"", ""<""]",size_t_g_r < member_g_l,200,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3306,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_856.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated 7-Zip file body"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_856.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_856.cpp,92,"[""member"", ""macro"", ""string""]","[""member"", ""null"", "">"", ""!""]",Not(null_g_l > member_g_r),201,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3386,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""The %s is encoded with many filters, ""
		    ""but currently not supported"", cname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_858.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""The %s is encoded with many filters, ""
		    ""but currently not supported"", cname);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_858.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_858.cpp,62,[],"[""member"", ""int"", "">"", ""int"", ""!"", ""&&"", ""int"", ""int"", "">"", ""||""]","Or(int_g_l > int_g_r,
   And(Not(Not(int_e_l == null_e_r)), int_g_l > member_g_r))",202,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3474,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unsupported form of BCJ2 streams"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_860.cpp,"{
			/* We got an unexpected form. */
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unsupported form of BCJ2 streams"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_860.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_860.cpp,150,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""!="", ""member"", ""macro"", ""=="", ""member"", ""int"", ""=="", ""member"", ""int"", ""=="", ""member"", ""int"", ""=="", ""&&"", ""&&"", ""&&"", ""&&"", ""!""]","Not(And(And(And(And(int_e_l == member_e_r,
                    int_e_l == member_e_r),
                int_e_l == member_e_r),
            macro_e_l == member_e_r),
        Not(member_e_l == null_e_r)))",203,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,268,"archive_set_error(&a->archive, -1, ""Size required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_869.cpp,"{
		archive_set_error(&a->archive, -1, ""Size required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_869.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_869.cpp,23,"[""member"", ""int"", ""string""]","[""archive_entry_size_is_set_ret"", ""!"", ""archive_entry_size_ret"", ""null"", ""<"", ""||""]","Or(null_g_r < archive_entry_size_ret_g_l,
   Not(Not(archive_entry_size_is_set_ret_e_l == null_e_r)))",204,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,330,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory for ino translation table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_873.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for ino translation table"");
		ret_final = ARCHIVE_FATAL;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_873.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_873.cpp,56,"[""member"", ""macro"", ""string""]","[""synthesize_ino_value_ret"", ""null"", ""<""]",null_g_r < synthesize_ino_value_ret_g_l,205,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,335,"archive_set_error(&a->archive, ERANGE,
		    ""Too many files for this cpio format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_874.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Too many files for this cpio format"");
		ret_final = ARCHIVE_FATAL;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_874.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_874.cpp,61,"[""member"", ""macro"", ""string""]","[""synthesize_ino_value_ret"", ""int"", "">""]",int_g_l > synthesize_ino_value_ret_g_r,206,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_extract2.cpp,146,"archive_set_error(ar, archive_errno(aw),
			    ""%s"", archive_error_string(aw));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_879.cpp,"{
			archive_set_error(ar, archive_errno(aw),
			    ""%s"", archive_error_string(aw));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_879.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_879.cpp,22,"[""struct archive *"", ""archive_errno_ret"", ""string"", ""archive_error_string_ret""]","[""archive_write_data_block_ret"", ""macro"", ""<""]",macro_g_r < archive_write_data_block_ret_g_l,207,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,268,"archive_set_error(&a->archive, errno,
			    ""Couldn't read link data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_886.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't read link data"");
			free(linkbuffer);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_886.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_886.cpp,121,"[""member"", ""unkown"", ""string""]","[""readlinkat_ret"", ""null"", ""<""]",null_g_r < readlinkat_ret_g_l,208,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,334,"archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_887.cpp,"{
		archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");
			return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_887.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_887.cpp,18,"[""member"", ""unkown"", ""string""]","[""member"", ""null"", ""!="", ""a -> tree_enter_working_dir_ret"", ""null"", ""!="", ""&&""]","And(Not(a -> tree_enter_working_dir_ret_e_l == null_e_r),
    Not(member_e_l == null_e_r))",209,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,347,"archive_set_error(&a->archive, errno,
			""Could not check extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_889.cpp,"{
		archive_set_error(&a->archive, errno,
			""Could not check extended attributes"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_889.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_889.cpp,31,"[""member"", ""unkown"", ""string""]","[""copyfile_ret"", ""int"", ""==""]",copyfile_ret_e_l == int_e_r,210,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,376,"archive_set_error(&a->archive, errno,
		    ""Could not pack extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_891.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not pack extended attributes"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_891.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_891.cpp,60,"[""member"", ""unkown"", ""string""]","[""copyfile_ret""]",Not(copyfile_ret_e_l == null_e_r),211,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,395,"archive_set_error(&a->archive, errno,
		    ""Could not read extended attributes into memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_894.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not read extended attributes into memory"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_894.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_894.cpp,79,"[""member"", ""unkown"", ""string""]","[""member"", ""read_ret"", ""!=""]",Not(member_e_l == read_ret_e_r),212,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1188,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_899.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_899.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_899.cpp,26,"[""member"", ""unkown"", ""string""]","[""acl_get_brand_np_ret"", ""null"", ""!=""]",Not(acl_get_brand_np_ret_e_l == null_e_r),213,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1236,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_904.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_904.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_904.cpp,74,"[""member"", ""unkown"", ""string""]","[""acl_get_tag_type_ret"", ""null"", ""!=""]",Not(acl_get_tag_type_ret_e_l == null_e_r),214,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1316,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_905.cpp,"{
				archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_905.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_905.cpp,154,[],"[""acl_get_entry_type_np_ret"", ""null"", ""!=""]",Not(acl_get_entry_type_np_ret_e_l == null_e_r),215,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1334,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_906.cpp,"{
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_906.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_906.cpp,172,"[""member"", ""unkown"", ""string""]","[""acl_entry_type_t""]",Not(acl_entry_type_t_e_l == null_e_r),216,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1355,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_908.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_908.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_908.cpp,193,[],"[""acl_get_flag_np_ret"", ""int"", ""==""]",acl_get_flag_np_ret_e_l == int_e_r,217,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1366,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_909.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_909.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_909.cpp,204,"[""member"", ""unkown"", ""string""]","[""acl_get_permset_ret"", ""null"", ""!=""]",Not(acl_get_permset_ret_e_l == null_e_r),218,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1377,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_910.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_910.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_910.cpp,215,"[""member"", ""unkown"", ""string""]","[""ACL_GET_PERM_ret"", ""int"", ""==""]",ACL_GET_PERM_ret_e_l == int_e_r,219,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1458,"archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_913.cpp,"{
		archive_set_error(&a->archive, errno, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_913.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_913.cpp,30,"[""member"", ""unkown"", ""string""]","[""lgetxattr_ret"", ""null"", "">"", ""malloc_ret"", ""null"", ""=="", ""&&""]","And(malloc_ret_e_l == null_e_r,
    null_g_l > lgetxattr_ret_g_r)",220,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1479,"archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_914.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_914.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_914.cpp,51,"[""member"", ""unkown"", ""string""]","[""getxattr_ret"", ""int"", ""==""]",getxattr_ret_e_l == int_e_r,221,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1567,"archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_918.cpp,"{
		archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");
		free(list);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_918.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_918.cpp,77,"[""member"", ""unkown"", ""string""]","[""listxattr_ret"", ""int"", ""==""]",int_e_l == listxattr_ret_e_r,222,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1971,"archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_DATA) failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_930.cpp,"{
			if (errno == ENXIO) {
				off_e = lseek(*fd, 0, SEEK_END);
				if (off_e != (off_t)-1)
					break;/* no more data */
			}
			archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_DATA) failed"");
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_930.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_930.cpp,98,"[""member"", ""unkown"", ""string""]","[""lseek_ret"", ""int"", ""!="", ""!"", ""unkown"", ""macro"", ""=="", ""!"", ""&&""]","And(Not(macro_e_l == unkown_e_r),
    Not(Not(int_e_l == lseek_ret_e_r)))",223,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,503,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_939.cpp,"{
			xar->opt_threads = 1;
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_939.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_939.cpp,100,"[""member"", ""macro"", ""string"", ""const char *""]","[""member"", ""null"", ""=="", ""unkown"", ""null"", ""!="", ""&&""]","And(Not(null_e_l == unkown_e_r), member_e_l == null_e_r)",224,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,545,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_940.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_940.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_940.cpp,21,"[""member"", ""macro"", ""string""]","[""file_new_ret"", ""null"", ""==""]",file_new_ret_e_l == null_e_r,225,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1163,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteBase64() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_957.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteBase64() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_957.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_957.cpp,47,"[""member"", ""macro"", ""string"", ""xmlTextWriterWriteBase64_ret""]","[""xmlTextWriterWriteBase64_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterWriteBase64_ret_g_l,226,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1207,"archive_string_sprintf(&linkto, ""%d"",
				    file->hardlink_target->id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_959.cpp,"archive_string_sprintf(&linkto, ""%d"",
				    file->hardlink_target->id)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_959.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_959.cpp,91,"[""unkown"", ""string"", ""member""]","[""member"", ""struct file *"", ""=="", ""!""]",Not(member_e_l == struct file *_e_r),227,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1517,"archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_973.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_973.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_973.cpp,20,[],"[""xmlBufferCreate_ret"", ""null"", ""==""]",null_e_l == xmlBufferCreate_ret_e_r,228,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1524,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_974.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_974.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_974.cpp,27,[],"[""xmlNewTextWriterMemory_ret"", ""null"", ""==""]",null_e_l == xmlNewTextWriterMemory_ret_e_r,229,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1532,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_975.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_975.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_975.cpp,35,"[""member"", ""macro"", ""string"", ""xmlTextWriterStartDocument_ret""]","[""xmlTextWriterStartDocument_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterStartDocument_ret_g_l,230,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1539,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_976.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_976.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_976.cpp,42,"[""member"", ""macro"", ""string"", ""xmlTextWriterSetIndent_ret""]","[""xmlTextWriterSetIndent_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterSetIndent_ret_g_l,231,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1687,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_987.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_987.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_987.cpp,190,"[""member"", ""macro"", ""string"", ""xmlTextWriterEndDocument_ret""]","[""xmlTextWriterEndDocument_ret"", ""null"", ""<""]",null_g_r < xmlTextWriterEndDocument_ret_g_l,232,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1693,"fprintf(stderr, ""\n---TOC-- %d bytes --\n%s\n"",
	    strlen((const char *)bp->content), bp->content);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_988.cpp,"{
	struct xar *xar;
	struct file *np;
	xmlBufferPtr bp;
	xmlTextWriterPtr writer;
	int algsize;
	int r, ret;

	xar = (struct xar *)a->format_data;

	ret = ARCHIVE_FATAL;

	/*
	 * Initialize xml writer.
	 */
	writer = NULL;
	bp = xmlBufferCreate();
	if (bp == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");
		goto exit_toc;
	}
	writer = xmlNewTextWriterMemory(bp, 0);
	if (writer == NULL) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");
		goto exit_toc;
	}
	r = xmlTextWriterStartDocument(writer, ""1.0"", ""UTF-8"", NULL);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}
	r = xmlTextWriterSetIndent(writer, 4);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);
		goto exit_toc;
	}

	/*
	 * Start recording TOC
	 */
	r = xmlTextWriterStartElement(writer, BAD_CAST(""xar""));
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);
		goto exit_toc;
	}
	r = xmlTextWriterStartElement(writer, BAD_CAST(""toc""));
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}

	/*
	 * Record the creation time of the archive file.
	 */
	r = xmlwrite_time(a, writer, ""creation-time"", time(NULL), 0);
	if (r < 0)
		goto exit_toc;

	/*
	 * Record the checksum value of TOC
	 */
	algsize = getalgsize(xar->opt_toc_sumalg);
	if (algsize) {
		/*
		 * Record TOC checksum
		 */
		r = xmlTextWriterStartElement(writer, BAD_CAST(""checksum""));
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			goto exit_toc;
		}
		r = xmlTextWriterWriteAttribute(writer, BAD_CAST(""style""),
		    BAD_CAST_CONST(getalgname(xar->opt_toc_sumalg)));
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			goto exit_toc;
		}

		/*
		 * Record the offset of the value of checksum of TOC
		 */
		r = xmlwrite_string(a, writer, ""offset"", ""0"");
		if (r < 0)
			goto exit_toc;

		/*
		 * Record the size of the value of checksum of TOC
		 */
		r = xmlwrite_fstring(a, writer, ""size"", ""%d"", algsize);
		if (r < 0)
			goto exit_toc;

		r = xmlTextWriterEndElement(writer);
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			goto exit_toc;
		}
	}

	np = xar->root;
	do {
		if (np != np->parent) {
			r = make_file_entry(a, writer, np);
			if (r != ARCHIVE_OK)
				goto exit_toc;
		}

		if (np->dir && np->children.first != NULL) {
			/* Enter to sub directories. */
			np = np->children.first;
			r = xmlTextWriterStartElement(writer,
			    BAD_CAST(""file""));
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterStartElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			r = xmlTextWriterWriteFormatAttribute(
			    writer, BAD_CAST(""id""), ""%d"", np->id);
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterWriteAttribute() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			continue;
		}
		while (np != np->parent) {
			r = xmlTextWriterEndElement(writer);
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterEndElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			if (np->chnext == NULL) {
				/* Return to the parent directory. */
				np = np->parent;
			} else {
				np = np->chnext;
				r = xmlTextWriterStartElement(writer,
				    BAD_CAST(""file""));
				if (r < 0) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterStartElement() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}
				r = xmlTextWriterWriteFormatAttribute(
				    writer, BAD_CAST(""id""), ""%d"", np->id);
				if (r < 0) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}
				break;
			}
		}
	} while (np != np->parent);

	r = xmlTextWriterEndDocument(writer);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);
		goto exit_toc;
	}
#if DEBUG_PRINT_TOC
	fprintf(stderr, ""\n---TOC-- %d bytes --\n%s\n"",
	    strlen((const char *)bp->content), bp->content);
#endif

	/*
	 * Compress the TOC and calculate the sum of the TOC.
	 */
	xar->toc.temp_offset = xar->temp_offset;
	xar->toc.size = bp->use;
	checksum_init(&(xar->a_sumwrk), xar->opt_toc_sumalg);

	r = compression_init_encoder_gzip(&(a->archive),
	    &(xar->stream), 6, 1);
	if (r != ARCHIVE_OK)
		goto exit_toc;
	xar->stream.next_in = bp->content;
	xar->stream.avail_in = bp->use;
	xar->stream.total_in = 0;
	xar->stream.next_out = xar->wbuff;
	xar->stream.avail_out = sizeof(xar->wbuff);
	xar->stream.total_out = 0;
	for (;;) {
		size_t size;

		r = compression_code(&(a->archive),
		    &(xar->stream), ARCHIVE_Z_FINISH);
		if (r != ARCHIVE_OK && r != ARCHIVE_EOF)
			goto exit_toc;
		size = sizeof(xar->wbuff) - xar->stream.avail_out;
		checksum_update(&(xar->a_sumwrk), xar->wbuff, size);
		if (write_to_temp(a, xar->wbuff, size) != ARCHIVE_OK)
			goto exit_toc;
		if (r == ARCHIVE_EOF)
			break;
		xar->stream.next_out = xar->wbuff;
		xar->stream.avail_out = sizeof(xar->wbuff);
	}
	r = compression_end(&(a->archive), &(xar->stream));
	if (r != ARCHIVE_OK)
		goto exit_toc;
	xar->toc.length = xar->stream.total_out;
	xar->toc.compression = GZIP;
	checksum_final(&(xar->a_sumwrk), &(xar->toc.a_sum));

	ret = ARCHIVE_OK;
exit_toc:
	if (writer)
		xmlFreeTextWriter(writer);
	if (bp)
		xmlBufferFree(bp);

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_988.cpp,"[31, 1, 1, 1, 2, 1, 1, 0, 0, 0, 35, 1, 23, 0, 1, 463, 0, 0, 7, 8, 0, 0, 1, 63, 0, 0, 0, 0, 2, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 0, 247, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 33, 30, 1, 0, 60, 0, 0, 65, 0, 148, 2, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_988.cpp,196,"[""unkown"", ""string"", ""strlen_ret"", ""member""]","[""xmlTextWriterEndDocument_ret"", ""null"", ""<"", ""!""]",Not(null_g_r < xmlTextWriterEndDocument_ret_g_l),233,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2311,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_998.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				file_free(file);
				*filepp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_998.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_998.cpp,93,"[""member"", ""macro"", ""string""]","[""file_create_virtual_dir_ret"", ""null"", ""==""]",file_create_virtual_dir_ret_e_l == null_e_r,234,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,128,"archive_set_error(_a, ENOMEM,
	    ""Can't allocate memory for filter program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1022.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct private_data *data;
	static const char *prefix = ""Program: "";

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_program"");

	f->data = calloc(1, sizeof(*data));
	if (f->data == NULL)
		goto memerr;
	data = (struct private_data *)f->data;

	data->cmd = strdup(cmd);
	if (data->cmd == NULL)
		goto memerr;

	data->pdata = __archive_write_program_allocate(cmd);
	if (data->pdata == NULL)
		goto memerr;

	/* Make up a description string. */
	if (archive_string_ensure(&data->description,
	    strlen(prefix) + strlen(cmd) + 1) == NULL)
		goto memerr;
	archive_strcpy(&data->description, prefix);
	archive_strcat(&data->description, cmd);

	f->name = data->description.s;
	f->code = ARCHIVE_FILTER_PROGRAM;
	f->open = archive_compressor_program_open;
	f->write = archive_compressor_program_write;
	f->close = archive_compressor_program_close;
	f->free = archive_compressor_program_free;
	return (ARCHIVE_OK);
memerr:
	archive_compressor_program_free(f);
	archive_set_error(_a, ENOMEM,
	    ""Can't allocate memory for filter program"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1022.cpp,"[4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 1, 4, 0, 2, 106, 0, 0, 3, 3, 0, 0, 2, 5, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 45, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 4, 0, 0, 13, 0, 0, 15, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1022.cpp,39,"[""struct archive *"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""member"", ""null"", ""=="", ""member"", ""null"", ""=="", ""archive_string_ensure_ret"", ""null"", ""=="", ""&&"", ""&&"", ""&&""]","And(And(And(archive_string_ensure_ret_e_l == null_e_r,
            member_e_l == null_e_r),
        member_e_l == null_e_r),
    member_e_l == null_e_r)",235,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,338,"archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1026.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1026.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1026.cpp,14,"[""member"", ""macro"", ""string"", ""member""]","[""child_write_ret"", ""int"", ""=="", ""child_write_ret"", ""null"", ""=="", ""||""]","Or(child_write_ret_e_l == null_e_r,
   child_write_ret_e_l == int_e_r)",236,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,377,"archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1027.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1027.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1027.cpp,26,"[""member"", ""unkown"", ""string"", ""member""]","[""read_ret"", ""int"", ""==""]",int_e_l == read_ret_e_r,237,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,270,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1036.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");
		acl_free(acl);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1036.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1036.cpp,50,"[""struct archive *"", ""macro"", ""string""]","[""acl_type_t"", ""macro"", ""=="", ""!""]",Not(acl_type_t_e_l == macro_e_r),238,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,575,"archive_set_error(a, errno,
				    ""Failed to clear flags from an NFSv4 ACL flagset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1047.cpp,"{
				archive_set_error(a, errno,
				    ""Failed to clear flags from an NFSv4 ACL flagset"");
				ret = ARCHIVE_FAILED;
				goto exit_free;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1047.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1047.cpp,355,"[""struct archive *"", ""unkown"", ""string""]","[""acl_clear_flags_np_ret"", ""null"", ""!=""]",Not(acl_clear_flags_np_ret_e_l == null_e_r),239,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,490,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1078.cpp,"{
			/* Non-ascii character is found. */
			if (uudecode->state == ST_FIND_HEAD &&
			    (uudecode->total > 0 || total > 0)) {
				uudecode->state = ST_IGNORE;
				used = avail_in;
				goto finish;
			}
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1078.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1078.cpp,56,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""=="", ""member"", ""null"", "">"", ""null"", ""null"", "">"", ""||"", ""&&"", ""!""]","Not(And(Or(null_g_l > null_g_r, null_g_l > member_g_r),
        macro_e_l == member_e_r))",240,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,499,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing format data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1079.cpp,"{
				/* There is nothing more to read, fail */
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing format data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1079.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1079.cpp,65,"[""member"", ""macro"", ""string""]","[""null"", ""null"", ""=="", ""ssize_t"", ""null"", ""<="", ""&&""]","And(null_ge_r <= ssize_t_ge_l, null_e_l == null_e_r)",241,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,529,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Invalid format data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1080.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Invalid format data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1080.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1080.cpp,95,"[""member"", ""macro"", ""string""]","[""null"", ""macro"", "">=""]",macro_ge_l >= null_ge_r,242,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,555,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1081.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1081.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1081.cpp,121,"[""member"", ""macro"", ""string""]","[""member"", ""!"", ""get_line_ret"", ""null"", ""<="", ""||""]","Or(null_ge_r <= get_line_ret_ge_l,
   Not(Not(member_e_l == null_e_r)))",243,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,564,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1082.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1082.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1082.cpp,130,"[""member"", ""macro"", ""string""]","[""UUDECODE_ret"", ""get_line_ret"", "">""]",get_line_ret_g_l > UUDECODE_ret_g_r,244,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,600,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1083.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1083.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1083.cpp,166,"[""member"", ""macro"", ""string""]","[""UUDECODE_ret""]",Not(UUDECODE_ret_e_l == null_e_r),245,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,610,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1084.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1084.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1084.cpp,176,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""int"", ""=="", ""memcmp_ret"", ""null"", ""=="", ""&&"", ""!""]","Not(And(memcmp_ret_e_l == null_e_r, int_e_l == ssize_t_e_r))",246,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,656,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1085.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1085.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1085.cpp,222,"[""member"", ""macro"", ""string""]","[""get_line_ret"", ""member"", ""char"", ""!="", ""&&""]","And(Not(char_e_l == member_e_r),
    Not(get_line_ret_e_l == null_e_r))",247,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,578,"archive_set_error(&(a->archive), ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1093.cpp,"{
		archive_set_error(&(a->archive), ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1093.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1093.cpp,14,"[""member"", ""macro"", ""string""]","[""archive_read_new_ret"", ""null"", ""==""]",archive_read_new_ret_e_l == null_e_r,248,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1168,"archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFileA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1106.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFileA"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1106.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1106.cpp,15,"[""member"", ""unkown"", ""string""]","[""FindFirstFileA_ret"", ""macro"", ""==""]",FindFirstFileA_ret_e_l == macro_e_r,249,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1377,"archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1113.cpp,"{
		free(f);
		archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1113.cpp,16,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_w_ret"", ""null"", ""==""]",archive_entry_pathname_w_ret_e_l == null_e_r,250,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,451,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1127.cpp,"{
			/* Prefix is too long. */
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1127.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1127.cpp,67,"[""member"", ""macro"", ""string""]","[""strchr_ret"", ""const char *"", "">""]",const char *_g_l > strchr_ret_g_r,251,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,540,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Group name too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1138.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Group name too long"");
			ret = ARCHIVE_FAILED;
			copy_length = USTAR_gname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1138.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1138.cpp,156,"[""member"", ""macro"", ""string""]","[""strlen_ret"", ""unkown"", "">""]",unkown_g_l > strlen_ret_g_r,252,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,607,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1154.cpp,"{
	int number_bidders, i, bid, best_bid, number_filters;
	struct archive_read_filter_bidder *bidder, *best_bidder;
	struct archive_read_filter *filter;
	ssize_t avail;
	int r;

	for (number_filters = 0; number_filters < MAX_NUMBER_FILTERS; ++number_filters) {
		number_bidders = sizeof(a->bidders) / sizeof(a->bidders[0]);

		best_bid = 0;
		best_bidder = NULL;

		bidder = a->bidders;
		for (i = 0; i < number_bidders; i++, bidder++) {
			if (bidder->bid != NULL) {
				bid = (bidder->bid)(bidder, a->filter);
				if (bid > best_bid) {
					best_bid = bid;
					best_bidder = bidder;
				}
			}
		}

		/* If no bidder, we're done. */
		if (best_bidder == NULL) {
			/* Verify the filter by asking it for some data. */
			__archive_read_filter_ahead(a->filter, 1, &avail);
			if (avail < 0) {
				__archive_read_free_filters(a);
				return (ARCHIVE_FATAL);
			}
			a->archive.compression_name = a->filter->name;
			a->archive.compression_code = a->filter->code;
			return (ARCHIVE_OK);
		}

		filter
		    = (struct archive_read_filter *)calloc(1, sizeof(*filter));
		if (filter == NULL)
			return (ARCHIVE_FATAL);
		filter->bidder = best_bidder;
		filter->archive = a;
		filter->upstream = a->filter;
		a->filter = filter;
		r = (best_bidder->init)(a->filter);
		if (r != ARCHIVE_OK) {
			__archive_read_free_filters(a);
			return (ARCHIVE_FATAL);
		}
	}
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1154.cpp,"[6, 0, 2, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 131, 0, 0, 5, 10, 0, 0, 2, 8, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 54, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 8, 6, 0, 0, 10, 0, 0, 19, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1154.cpp,53,"[""member"", ""macro"", ""string""]","[""null"", ""macro"", ""<"", ""!""]",Not(macro_g_r < null_g_l),253,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,635,"archive_set_error(&a->archive, EIO,
			    ""Premature end-of-file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1155.cpp,"archive_set_error(&a->archive, EIO,
			    ""Premature end-of-file."")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1155.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1155.cpp,20,"[""member"", ""macro"", ""string""]","[""archive_read_data_skip_ret"", ""macro"", ""==""]",archive_read_data_skip_ret_e_l == macro_e_r,254,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,737,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized archive format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1157.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized archive format"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1157.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1157.cpp,43,"[""member"", ""macro"", ""string""]","[""a -> format -> bid_ret"", ""int"", ""<""]",int_g_r < a -> format -> bid_ret_g_l,255,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1424,"archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1163.cpp,"{ /* Integer overflow! */
						archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");
						filter->fatal = 1;
						if (avail != NULL)
							*avail = ARCHIVE_FATAL;
						return (NULL);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1163.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1163.cpp,117,[],"[""int"", ""size_t"", ""<=""]",size_t_ge_r <= int_ge_l,256,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1504,"archive_set_error(&filter->archive->archive,
	    ARCHIVE_ERRNO_MISC,
	    ""Truncated input file (needed %jd bytes, only %jd available)"",
	    (intmax_t)request, (intmax_t)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1165.cpp,"{
	int64_t skipped;

	if (request < 0)
		return ARCHIVE_FATAL;
	if (request == 0)
		return 0;

	skipped = advance_file_pointer(filter, request);
	if (skipped == request)
		return (skipped);
	/* We hit EOF before we satisfied the skip request. */
	if (skipped < 0)  /* Map error code to 0 for error message below. */
		skipped = 0;
	archive_set_error(&filter->archive->archive,
	    ARCHIVE_ERRNO_MISC,
	    ""Truncated input file (needed %jd bytes, only %jd available)"",
	    (intmax_t)request, (intmax_t)skipped);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1165.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 4, 0, 0, 2, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1165.cpp,17,"[""member"", ""macro"", ""string"", ""int64_t"", ""advance_file_pointer_ret""]","[""advance_file_pointer_ret"", ""int64_t"", ""=="", ""!""]",Not(advance_file_pointer_ret_e_l == int64_t_e_r),257,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1644,"archive_set_error(a, ENOMEM,
			    ""Could not allocate memory for ""
			    ""a string conversion object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1166.cpp,"archive_set_error(a, ENOMEM,
			    ""Could not allocate memory for ""
			    ""a string conversion object"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1166.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1166.cpp,20,[],"[""create_sconv_object_ret"", ""null"", ""==""]",create_sconv_object_ret_e_l == null_e_r,258,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1657,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""iconv_open failed : Cannot handle ``%s''"",
			    (flag & SCONV_TO_CHARSET)?tc:fc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1167.cpp,"{
#if HAVE_ICONV
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""iconv_open failed : Cannot handle ``%s''"",
			    (flag & SCONV_TO_CHARSET)?tc:fc);
#else
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""A character-set conversion not fully supported ""
			    ""on this platform"");
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1167.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 7, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1167.cpp,33,"[""struct archive *"", ""macro"", ""string"", ""const char *""]","[""struct archive *"", ""null"", ""!=""]",Not(null_e_l == struct archive *_e_r),259,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,197,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1172.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1172.cpp,42,"[""member"", ""macro"", ""string""]","[""archive_entry_hardlink_ret"", ""null"", ""=="", ""archive_entry_symlink_ret"", ""null"", ""=="", ""&&""]","And(archive_entry_symlink_ret_e_l == null_e_r,
    archive_entry_hardlink_ret_e_l == null_e_r)",260,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,207,"archive_string_sprintf(&shar->work, ""echo x %s\n"", shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1173.cpp,"{
	const char *linkname;
	const char *name;
	char *p, *pp;
	struct shar *shar;

	shar = (struct shar *)a->format_data;
	if (!shar->wrote_header) {
		archive_strcat(&shar->work, ""#!/bin/sh\n"");
		archive_strcat(&shar->work, ""# This is a shell archive\n"");
		shar->wrote_header = 1;
	}

	/* Save the entry for the closing. */
	if (shar->entry)
		archive_entry_free(shar->entry);
	shar->entry = archive_entry_clone(entry);
	name = archive_entry_pathname(entry);

	/* Handle some preparatory issues. */
	switch(archive_entry_filetype(entry)) {
	case AE_IFREG:
		/* Only regular files have non-zero size. */
		break;
	case AE_IFDIR:
		archive_entry_set_size(entry, 0);
		/* Don't bother trying to recreate '.' */
		if (strcmp(name, ""."") == 0  ||  strcmp(name, ""./"") == 0)
			return (ARCHIVE_OK);
		break;
	case AE_IFIFO:
	case AE_IFCHR:
	case AE_IFBLK:
		/* All other file types have zero size in the archive. */
		archive_entry_set_size(entry, 0);
		break;
	default:
		archive_entry_set_size(entry, 0);
		if (archive_entry_hardlink(entry) == NULL &&
		    archive_entry_symlink(entry) == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");
			return (ARCHIVE_WARN);
		}
	}

	archive_string_empty(&shar->quoted_name);
	shar_quote(&shar->quoted_name, name, 1);

	/* Stock preparation for all file types. */
	archive_string_sprintf(&shar->work, ""echo x %s\n"", shar->quoted_name.s);

	if (archive_entry_filetype(entry) != AE_IFDIR) {
		/* Try to create the dir. */
		p = strdup(name);
		pp = strrchr(p, '/');
		/* If there is a / character, try to create the dir. */
		if (pp != NULL) {
			*pp = '\0';

			/* Try to avoid a lot of redundant mkdir commands. */
			if (strcmp(p, ""."") == 0) {
				/* Don't try to ""mkdir ."" */
				free(p);
			} else if (shar->last_dir == NULL) {
				archive_strcat(&shar->work, ""mkdir -p "");
				shar_quote(&shar->work, p, 1);
				archive_strcat(&shar->work,
				    "" > /dev/null 2>&1\n"");
				shar->last_dir = p;
			} else if (strcmp(p, shar->last_dir) == 0) {
				/* We've already created this exact dir. */
				free(p);
			} else if (strlen(p) < strlen(shar->last_dir) &&
			    strncmp(p, shar->last_dir, strlen(p)) == 0) {
				/* We've already created a subdir. */
				free(p);
			} else {
				archive_strcat(&shar->work, ""mkdir -p "");
				shar_quote(&shar->work, p, 1);
				archive_strcat(&shar->work,
				    "" > /dev/null 2>&1\n"");
				shar->last_dir = p;
			}
		} else {
			free(p);
		}
	}

	/* Handle file-type specific issues. */
	shar->has_data = 0;
	if ((linkname = archive_entry_hardlink(entry)) != NULL) {
		archive_strcat(&shar->work, ""ln -f "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	} else if ((linkname = archive_entry_symlink(entry)) != NULL) {
		archive_strcat(&shar->work, ""ln -fs "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	} else {
		switch(archive_entry_filetype(entry)) {
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}
	}

	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1173.cpp,"[16, 0, 0, 0, 8, 0, 4, 2, 10, 2, 24, 0, 0, 0, 2, 352, 0, 0, 5, 6, 0, 0, 1, 51, 0, 0, 0, 0, 5, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 18, 16, 5, 0, 64, 0, 0, 53, 4, 125, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1173.cpp,52,"[""member"", ""string"", ""member""]","[""strcmp_ret"", ""null"", ""=="", ""strcmp_ret"", ""null"", ""=="", ""||"", ""!"", ""archive_entry_hardlink_ret"", ""null"", ""=="", ""archive_entry_symlink_ret"", ""null"", ""=="", ""&&"", ""archive_entry_filetype_ret"", ""&&"", ""&&""]","And(And(Not(archive_entry_filetype_ret_e_l == null_e_r),
        And(archive_entry_symlink_ret_e_l == null_e_r,
            archive_entry_hardlink_ret_e_l == null_e_r)),
    Not(Or(null_e_l == strcmp_ret_e_r,
           null_e_l == strcmp_ret_e_r)))",261,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,251,"archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1174.cpp,"{
		archive_strcat(&shar->work, ""ln -f "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1174.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1174.cpp,96,"[""member"", ""string"", ""member""]","[""archive_entry_hardlink_ret"", ""null"", ""!=""]",Not(archive_entry_hardlink_ret_e_l == null_e_r),262,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,256,"archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1175.cpp,"{
		archive_strcat(&shar->work, ""ln -fs "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1175.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1175.cpp,101,"[""member"", ""string"", ""member""]","[""archive_entry_symlink_ret"", ""null"", ""!=""]",Not(archive_entry_symlink_ret_e_l == null_e_r),263,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,263,"archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1176.cpp,"{
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1176.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1176.cpp,108,"[""member"", ""string"", ""member"", ""member""]","[""archive_entry_size_ret"", ""null"", ""==""]",archive_entry_size_ret_e_l == null_e_r,264,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,444,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""Buffer overflow"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1186.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""Buffer overflow"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1186.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1186.cpp,34,"[""member"", ""macro"", ""string""]","[""char"", ""member"", "">""]",member_g_l > char_g_r,265,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,556,"archive_string_sprintf(&shar->work, ""chflags %s "", p);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1188.cpp,"{
			archive_string_sprintf(&shar->work, ""chflags %s "", p);
			shar_quote(&shar->work,
			    archive_entry_pathname(shar->entry), 1);
			archive_strcat(&shar->work, ""\n"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1188.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1188.cpp,47,"[""member"", ""string"", ""archive_entry_fflags_text_ret""]","[""archive_entry_fflags_text_ret"", ""null"", ""!=""]",Not(archive_entry_fflags_text_ret_e_l == null_e_r),266,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1760,"archive_set_error(&a->archive, errno, ""statfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1221.cpp,"{
		t->current_filesystem->synthetic = -1;
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, errno, ""statfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1221.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1221.cpp,67,"[""member"", ""unkown"", ""string""]","[""fstatfs_ret"", ""int"", ""=="", ""get_xfer_size_ret"", ""int"", ""=="", ""fstatvfs_ret"", ""int"", ""=="", ""||"", ""||""]","Or(Or(fstatvfs_ret_e_l == int_e_r,
      get_xfer_size_ret_e_l == int_e_r),
   fstatfs_ret_e_l == int_e_r)",267,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,446,"fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1232.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);

		offset += 4;
		if (offset + datasize > extra_length) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));
			return ARCHIVE_FAILED;
		}
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->uncompressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->compressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}
				zip_entry->local_header_offset = t;
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
#ifdef DEBUG
		case 0x0017:
		{
			/* Strong encryption field. */
			if (archive_le16dec(p + offset) == 2) {
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}
			break;
		}
#endif
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c78:
		{
			/* Experimental 'xl' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes (and other
			 * fields that ordinarily appear only in
			 * central directory) in local file header.
			 * This provides file type and permission
			 * information necessary to support full
			 * streaming extraction.  Currently being
			 * discussed with other Zip developers
			 * ... subject to change.
			 *
			 * Format:
			 *  The field starts with a bitmap that specifies
			 *  which additional fields are included.  The
			 *  bitmap is variable length and can be extended in
			 *  the future.
			 *
			 *  n bytes - feature bitmap: first byte has low-order
			 *    7 bits.  If high-order bit is set, a subsequent
			 *    byte holds the next 7 bits, etc.
			 *
			 *  if bitmap & 1, 2 byte ""version made by""
			 *  if bitmap & 2, 2 byte ""internal file attributes""
			 *  if bitmap & 4, 4 byte ""external file attributes""
			 *  if bitmap & 8, 2 byte comment length + n byte comment
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				/* 2 byte ""version made by"" */
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				/* 2 byte ""internal file attributes"" */
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				/* Not used by libarchive at present. */
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				/* 4 byte ""external file attributes"" */
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				} else if (zip_entry->system == 0) {
					// Interpret MSDOS directory bit
					if (0x10 == (external_attributes & 0x10)) {
						zip_entry->mode = AE_IFDIR | 0775;
					} else {
						zip_entry->mode = AE_IFREG | 0664;
					}
					if (0x01 == (external_attributes & 0x01)) {
						// Read-only bit; strip write permissions
						zip_entry->mode &= 0555;
					}
				} else {
					zip_entry->mode = 0;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				/* 2 byte comment length + comment */
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				/* Comment is not supported by libarchive */
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = 0xff & (int)p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = 0xff & (int)p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		case 0x9901:
			/* WinZip AES extra data field. */
			if (p[offset + 2] == 'A' && p[offset + 3] == 'E') {
				/* Vendor version. */
				zip_entry->aes_extra.vendor =
				    archive_le16dec(p + offset);
				/* AES encryption strength. */
				zip_entry->aes_extra.strength = p[offset + 4];
				/* Actual compression method. */
				zip_entry->aes_extra.compression =
				    p[offset + 5];
			}
			break;
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1232.cpp,"[40, 1, 0, 0, 18, 0, 4, 1, 8, 1, 50, 0, 0, 0, 0, 406, 0, 0, 14, 16, 0, 0, 11, 126, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 10, 0, 42, 40, 2, 0, 39, 0, 0, 72, 3, 62, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1232.cpp,26,"[""unkown"", ""string"", ""unsigned short"", ""unsigned short""]","[""int"", ""size_t"", "">"", ""!""]",Not(size_t_g_l > int_g_r),268,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,481,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1235.cpp,"{
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1235.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1235.cpp,61,"[""member"", ""macro"", ""string""]","[""int"", ""int"", ""<"", ""archive_le64dec_ret"", ""macro"", "">"", ""||""]","Or(macro_g_l > archive_le64dec_ret_g_r, int_g_r < int_g_l)",269,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,504,"fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1236.cpp,"{
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1236.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 3, 3, 0, 0, 3, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1236.cpp,84,[],"[""archive_le16dec_ret"", ""int"", ""==""]",archive_le16dec_ret_e_l == int_e_r,270,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,678,"fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1238.cpp,"{
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->uncompressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->compressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}
				zip_entry->local_header_offset = t;
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
#ifdef DEBUG
		case 0x0017:
		{
			/* Strong encryption field. */
			if (archive_le16dec(p + offset) == 2) {
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}
			break;
		}
#endif
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c78:
		{
			/* Experimental 'xl' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes (and other
			 * fields that ordinarily appear only in
			 * central directory) in local file header.
			 * This provides file type and permission
			 * information necessary to support full
			 * streaming extraction.  Currently being
			 * discussed with other Zip developers
			 * ... subject to change.
			 *
			 * Format:
			 *  The field starts with a bitmap that specifies
			 *  which additional fields are included.  The
			 *  bitmap is variable length and can be extended in
			 *  the future.
			 *
			 *  n bytes - feature bitmap: first byte has low-order
			 *    7 bits.  If high-order bit is set, a subsequent
			 *    byte holds the next 7 bits, etc.
			 *
			 *  if bitmap & 1, 2 byte ""version made by""
			 *  if bitmap & 2, 2 byte ""internal file attributes""
			 *  if bitmap & 4, 4 byte ""external file attributes""
			 *  if bitmap & 8, 2 byte comment length + n byte comment
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				/* 2 byte ""version made by"" */
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				/* 2 byte ""internal file attributes"" */
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				/* Not used by libarchive at present. */
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				/* 4 byte ""external file attributes"" */
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				} else if (zip_entry->system == 0) {
					// Interpret MSDOS directory bit
					if (0x10 == (external_attributes & 0x10)) {
						zip_entry->mode = AE_IFDIR | 0775;
					} else {
						zip_entry->mode = AE_IFREG | 0664;
					}
					if (0x01 == (external_attributes & 0x01)) {
						// Read-only bit; strip write permissions
						zip_entry->mode &= 0555;
					}
				} else {
					zip_entry->mode = 0;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				/* 2 byte comment length + comment */
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				/* Comment is not supported by libarchive */
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = 0xff & (int)p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = 0xff & (int)p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		case 0x9901:
			/* WinZip AES extra data field. */
			if (p[offset + 2] == 'A' && p[offset + 3] == 'E') {
				/* Vendor version. */
				zip_entry->aes_extra.vendor =
				    archive_le16dec(p + offset);
				/* AES encryption strength. */
				zip_entry->aes_extra.strength = p[offset + 4];
				/* Actual compression method. */
				zip_entry->aes_extra.compression =
				    p[offset + 5];
			}
			break;
		default:
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1238.cpp,"[39, 1, 0, 0, 18, 0, 3, 0, 8, 1, 48, 0, 0, 0, 0, 371, 0, 0, 12, 14, 0, 0, 9, 122, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 10, 0, 40, 39, 2, 0, 34, 0, 0, 68, 3, 50, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1238.cpp,258,"[""unkown"", ""string"", ""archive_le16dec_ret"", ""archive_le16dec_ret""]","[""unsigned short""]",Not(null_e_l == unsigned short_e_r),271,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1029,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1252.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1252.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1252.cpp,276,[],"[""member"", ""member"", ""!="", ""bool"", ""null"", ""=="", ""||""]","Or(bool_e_l == null_e_r, Not(member_e_l == member_e_r))",272,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1041,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1253.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1253.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1253.cpp,288,"[""member"", ""macro"", ""string""]","[""__archive_read_consume_ret"", ""null"", ""<""]",null_g_r < __archive_read_consume_ret_g_l,273,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1058,"archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1254.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip->init_decryption = (zip_entry->zip_flags & ZIP_ENCRYPTED);
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	if (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
		zip_entry->decdat = p[11];
	else
		zip_entry->decdat = p[17];
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (ARCHIVE_OK != process_extra(a, h, extra_length, zip_entry)) {
		return ARCHIVE_FATAL;
	}
	__archive_read_consume(a, extra_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	/* If the mode is totally empty, set some sane default. */
	if (zip_entry->mode == 0) {
		zip_entry->mode |= 0664;
	}

	/* Make sure that entries with a trailing '/' are marked as directories
	 * even if the External File Attributes contains bogus values.  If this
	 * is not a directory and there is no type, assume regularfile. */
	if ((zip_entry->mode & AE_IFMT) != AE_IFDIR) {
		int has_slash;

		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			has_slash = len > 0 && wp[len - 1] == L'/';
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			has_slash = len > 0 && cp[len - 1] == '/';
		}
		/* Correct file type as needed. */
		if (has_slash) {
			zip_entry->mode &= ~AE_IFMT;
			zip_entry->mode |= AE_IFDIR;
			zip_entry->mode |= 0111;
		} else if ((zip_entry->mode & AE_IFMT) == 0) {
			zip_entry->mode |= AE_IFREG;
		}
	}

	/* Make sure directories end in '/' */
	if ((zip_entry->mode & AE_IFMT) == AE_IFDIR) {
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] != L'/') {
				struct archive_wstring s;
				archive_string_init(&s);
				archive_wstrcat(&s, wp);
				archive_wstrappend_wchar(&s, L'/');
				archive_entry_copy_pathname_w(entry, s.s);
				archive_wstring_free(&s);
			}
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] != '/') {
				struct archive_string s;
				archive_string_init(&s);
				archive_strcat(&s, cp);
				archive_strappend_char(&s, '/');
				archive_entry_set_pathname(entry, s.s);
				archive_string_free(&s);
			}
		}
	}

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length;

		if (zip_entry->compressed_size > 64 * 1024) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");
			return ARCHIVE_FATAL;
		}

		linkname_length = (size_t)zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;

		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name.s;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1254.cpp,"[44, 0, 0, 0, 0, 0, 13, 0, 0, 0, 49, 0, 0, 0, 4, 704, 0, 0, 14, 16, 0, 0, 2, 90, 0, 0, 0, 0, 6, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 2, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 46, 46, 6, 0, 70, 0, 0, 100, 6, 157, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1254.cpp,305,"[""member"", ""string"", ""member"", ""member"", ""compression_name_ret""]","[""__archive_read_consume_ret"", ""null"", ""<"", ""!"", ""bool"", ""macro"", ""=="", ""!"", ""&&""]","And(Not(bool_e_l == macro_e_r),
    Not(null_g_r < __archive_read_consume_ret_g_l))",274,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1527,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1267.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1267.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1267.cpp,44,"[""member"", ""macro"", ""string"", ""archive_le16dec_ret""]","[""archive_le16dec_ret"", ""int"", ""!=""]",Not(archive_le16dec_ret_e_l == int_e_r),275,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1581,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1270.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1270.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1270.cpp,98,"[""member"", ""macro"", ""string"", ""member""]","[""bool"", ""null"", ""=="", ""bool"", ""constant"", ""=="", ""||""]","Or(bool_e_l == constant_e_r, bool_e_l == null_e_r)",276,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1660,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1271.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1271.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1271.cpp,177,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""=="", ""!""]",Not(__archive_read_ahead_ret_e_l == null_e_r),277,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1668,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1273.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1273.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1273.cpp,185,"[""member"", ""macro"", ""string""]","[""archive_le32dec_ret"", ""null"", ""!="", ""bool"", ""null"", ""!="", ""member"", ""archive_le32dec_ret"", "">"", ""member"", ""member"", ""<"", ""||"", ""||"", ""archive_le32dec_ret"", ""int"", ""<"", ""archive_le32dec_ret"", ""int"", "">"", ""||"", ""bool"", ""null"", ""!="", ""member"", ""archive_le32dec_ret"", "">"", ""member"", ""member"", ""<"", ""||"", ""||"", ""&&"", ""&&"", ""&&""]","And(And(And(Or(Or(member_g_r < member_g_l,
                  archive_le32dec_ret_g_l > member_g_r),
               Not(bool_e_l == null_e_r)),
            Or(int_g_l > archive_le32dec_ret_g_r,
               int_g_r < archive_le32dec_ret_g_l)),
        Or(Or(member_g_r < member_g_l,
              archive_le32dec_ret_g_l > member_g_r),
           Not(bool_e_l == null_e_r))),
    Not(archive_le32dec_ret_e_l == null_e_r))",278,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1714,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated Zip encrypted body: only %jd bytes available"",
		    (intmax_t)zip->entry_bytes_remaining);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1276.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated Zip encrypted body: only %jd bytes available"",
		    (intmax_t)zip->entry_bytes_remaining);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1276.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1276.cpp,18,"[""member"", ""macro"", ""string"", ""member""]","[""null"", ""bool"", ""=="", ""member"", ""macro"", ""<"", ""&&""]","And(macro_g_r < member_g_l, bool_e_l == null_e_r)",279,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1807,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1281.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1281.cpp,39,[],"[""archive_pbkdf2_sha1_ret"", ""null"", ""!=""]",Not(archive_pbkdf2_sha1_ret_e_l == null_e_r),280,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1283.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1283.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1283.cpp,60,"[""member"", ""macro"", ""string""]","[""archive_decrypto_aes_ctr_init_ret"", ""null"", ""!=""]",Not(archive_decrypto_aes_ctr_init_ret_e_l == null_e_r),281,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1856,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1286.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const void *p;
	const uint8_t *pv;
	size_t key_len, salt_len;
	uint8_t derived_key[MAX_DERIVED_KEY_BUF_SIZE];
	int retry;
	int r;

	if (zip->cctx_valid || zip->hctx_valid)
		return (ARCHIVE_OK);

	switch (zip->entry->aes_extra.strength) {
	case 1: salt_len = 8;  key_len = 16; break;
	case 2: salt_len = 12; key_len = 24; break;
	case 3: salt_len = 16; key_len = 32; break;
	default: goto corrupted;
	}
	p = __archive_read_ahead(a, salt_len + 2, NULL);
	if (p == NULL)
		goto truncated;

	for (retry = 0;; retry++) {
		const char *passphrase;

		passphrase = __archive_read_next_passphrase(a);
		if (passphrase == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}
		memset(derived_key, 0, sizeof(derived_key));
		r = archive_pbkdf2_sha1(passphrase, strlen(passphrase),
		    p, salt_len, 1000, derived_key, key_len * 2 + 2);
		if (r != 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");
			return (ARCHIVE_FAILED);
		}

		/* Check password verification value. */
		pv = ((const uint8_t *)p) + salt_len;
		if (derived_key[key_len * 2] == pv[0] &&
		    derived_key[key_len * 2 + 1] == pv[1])
			break;/* The passphrase is OK. */
		if (retry > 10000) {
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}
	}

	r = archive_decrypto_aes_ctr_init(&zip->cctx, derived_key, key_len);
	if (r != 0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}
	r = archive_hmac_sha1_init(&zip->hctx, derived_key + key_len, key_len);
	if (r != 0) {
		archive_decrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
	}
	zip->cctx_valid = zip->hctx_valid = 1;
	__archive_read_consume(a, salt_len + 2);
	zip->entry_bytes_remaining -= salt_len + 2 + AUTH_CODE_SIZE;
	if (0 == (zip->entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 0)
		goto corrupted;
	zip->entry_compressed_bytes_read += salt_len + 2 + AUTH_CODE_SIZE;
	zip->decrypted_bytes_remaining = 0;

	zip->entry->compression = zip->entry->aes_extra.compression;
	return (zip_alloc_decryption_buffer(a));

truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1286.cpp,"[9, 0, 1, 0, 4, 0, 9, 1, 3, 1, 12, 2, 3, 0, 4, 196, 0, 0, 8, 9, 0, 0, 2, 41, 0, 0, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 107, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 0, 12, 10, 1, 0, 18, 0, 0, 27, 0, 47, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1286.cpp,88,"[""member"", ""macro"", ""string""]","[""null"", ""bool"", ""=="", ""member"", ""null"", ""<"", ""&&"", ""member"", ""&&""]","And(Not(member_e_l == null_e_r),
    And(null_g_r < member_g_l, bool_e_l == null_e_r))",282,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2941,"archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1305.cpp,"{
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1305.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 0, 2, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1305.cpp,115,"[""member"", ""macro"", ""string""]","[""inflate_ret"", ""member"", ""&&""]","And(Not(member_e_l == null_e_r),
    Not(inflate_ret_e_l == null_e_r))",283,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1224,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1317.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1317.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1317.cpp,60,"[""member"", ""macro"", ""string""]","[""build_pathname_utf16be_ret"", ""null"", ""!=""]",Not(build_pathname_utf16be_ret_e_l == null_e_r),284,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1339,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1324.cpp,"{
			/* We can't seek backwards to extract it, so issue
			 * a warning.  Note that this can only happen if
			 * this entry was added to the heap after we passed
			 * this offset, that is, only if the directory
			 * mentioning this entry is later than the body of
			 * the entry. Such layouts are very unusual; most
			 * ISO9660 writers lay out and record all directory
			 * information first, then store all file bodies. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);
			iso9660->entry_bytes_remaining = 0;
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1324.cpp,175,"[""member"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""__archive_read_seek_ret"", ""member"", ""!=""]",Not(__archive_read_seek_ret_e_l == member_e_r),285,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1777,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of file identifier"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1339.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of file identifier"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1339.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1339.cpp,28,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<"", ""member"", ""null"", ""=="", ""||""]","Or(member_e_l == null_e_r, member_g_r < member_g_l)",286,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1791,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1340.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1340.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1340.cpp,42,"[""member"", ""macro"", ""string""]","[""archive_le32dec_ret"", ""null"", "">"", ""member"", ""member"", "">"", ""&&""]","And(member_g_l > member_g_r,
    null_g_l > archive_le32dec_ret_g_r)",287,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1798,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1341.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1341.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1341.cpp,49,"[""member"", ""macro"", ""string""]","[""toi_ret"", ""null"", ""!="", ""archive_le32dec_ret"", ""null"", ""<"", ""&&""]","And(null_g_r < archive_le32dec_ret_g_l,
    Not(null_e_l == toi_ret_e_r))",288,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2054,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1351.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1351.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1351.cpp,305,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""=="", ""member"", ""||""]","Or(Not(member_e_l == null_e_r), member_e_l == member_e_r)",289,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2277,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid parameter in SUSP \""CE\"" extension"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1362.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid parameter in SUSP \""CE\"" extension"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1362.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1362.cpp,19,"[""member"", ""macro"", ""string""]","[""bool"", ""macro"", ""=="", ""member"", ""member"", "">="", ""&&"", ""member"", ""member"", ""<"", ""member"", ""member"", "">"", ""member"", ""member"", "">"", ""||"", ""||"", ""||""]","Or(Or(Or(member_g_l > member_g_r, member_g_l > member_g_r),
      member_g_r < member_g_l),
   And(member_ge_l >= member_ge_r, bool_e_l == macro_e_r))",290,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2911,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1367.cpp,"{
	struct file_info *file;
	struct {
		struct file_info	*first;
		struct file_info	**last;
	}	empty_files;
	int64_t number;
	int count;

	file = cache_get_entry(iso9660);
	if (file != NULL) {
		*pfile = file;
		return (ARCHIVE_OK);
	}

	for (;;) {
		struct file_info *re, *d;

		*pfile = file = next_entry(iso9660);
		if (file == NULL) {
			/*
			 * If directory entries all which are descendant of
			 * rr_moved are still remaining, expose their.
			 */
			if (iso9660->re_files.first != NULL && 
			    iso9660->rr_moved != NULL &&
			    iso9660->rr_moved->rr_moved_has_re_only)
				/* Expose ""rr_moved"" entry. */
				cache_add_entry(iso9660, iso9660->rr_moved);
			while ((re = re_get_entry(iso9660)) != NULL) {
				/* Expose its descendant dirs. */
				while ((d = rede_get_entry(re)) != NULL)
					cache_add_entry(iso9660, d);
			}
			if (iso9660->cache_files.first != NULL)
				return (next_cache_entry(a, iso9660, pfile));
			return (ARCHIVE_EOF);
		}

		if (file->cl_offset) {
			struct file_info *first_re = NULL;
			int nexted_re = 0;

			/*
			 * Find ""RE"" dir for the current file, which
			 * has ""CL"" flag.
			 */
			while ((re = re_get_entry(iso9660))
			    != first_re) {
				if (first_re == NULL)
					first_re = re;
				if (re->offset == file->cl_offset) {
					re->parent->subdirs--;
					re->parent = file->parent;
					re->re = 0;
					if (re->parent->re_descendant) {
						nexted_re = 1;
						re->re_descendant = 1;
						if (rede_add_entry(re) < 0)
							goto fatal_rr;
						/* Move a list of descendants
						 * to a new ancestor. */
						while ((d = rede_get_entry(
						    re)) != NULL)
							if (rede_add_entry(d)
							    < 0)
								goto fatal_rr;
						break;
					}
					/* Replace the current file
					 * with ""RE"" dir */
					*pfile = file = re;
					/* Expose its descendant */
					while ((d = rede_get_entry(
					    file)) != NULL)
						cache_add_entry(
						    iso9660, d);
					break;
				} else
					re_add_entry(iso9660, re);
			}
			if (nexted_re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				continue;
			}
		} else if ((file->mode & AE_IFMT) == AE_IFDIR) {
			int r;

			/* Read file entries in this dir. */
			r = read_children(a, file);
			if (r != ARCHIVE_OK)
				return (r);

			/*
			 * Handle a special dir of Rockridge extensions,
			 * ""rr_moved"".
			 */
			if (file->rr_moved) {
				/*
				 * If this has only the subdirectories which
				 * have ""RE"" flags, do not expose at this time.
				 */
				if (file->rr_moved_has_re_only)
					continue;
				/* Otherwise expose ""rr_moved"" entry. */
			} else if (file->re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				re_add_entry(iso9660, file);
				continue;
			} else if (file->re_descendant) {
				/*
				 * If the top level ""RE"" entry of this entry
				 * is not exposed, we, accordingly, should not
				 * expose this entry at this time because
				 * we cannot make its proper full-path name.
				 */
				if (rede_add_entry(file) == 0)
					continue;
				/* Otherwise we can expose this entry because
				 * it seems its top level ""RE"" has already been
				 * exposed. */
			}
		}
		break;
	}

	if ((file->mode & AE_IFMT) != AE_IFREG || file->number == -1)
		return (ARCHIVE_OK);

	count = 0;
	number = file->number;
	iso9660->cache_files.first = NULL;
	iso9660->cache_files.last = &(iso9660->cache_files.first);
	empty_files.first = NULL;
	empty_files.last = &empty_files.first;
	/* Collect files which has the same file serial number.
	 * Peek pending_files so that file which number is different
	 * is not put back. */
	while (iso9660->pending_files.used > 0 &&
	    (iso9660->pending_files.files[0]->number == -1 ||
	     iso9660->pending_files.files[0]->number == number)) {
		if (file->number == -1) {
			/* This file has the same offset
			 * but it's wrong offset which empty files
			 * and symlink files have.
			 * NOTE: This wrong offset was recorded by
			 * old mkisofs utility. If ISO images is
			 * created by latest mkisofs, this does not
			 * happen.
			 */
			file->next = NULL;
			*empty_files.last = file;
			empty_files.last = &(file->next);
		} else {
			count++;
			cache_add_entry(iso9660, file);
		}
		file = next_entry(iso9660);
	}

	if (count == 0) {
		*pfile = file;
		return ((file == NULL)?ARCHIVE_EOF:ARCHIVE_OK);
	}
	if (file->number == -1) {
		file->next = NULL;
		*empty_files.last = file;
		empty_files.last = &(file->next);
	} else {
		count++;
		cache_add_entry(iso9660, file);
	}

	if (count > 1) {
		/* The count is the same as number of hardlink,
		 * so much so that each nlinks of files in cache_file
		 * is overwritten by value of the count.
		 */
		for (file = iso9660->cache_files.first;
		    file != NULL; file = file->next)
			file->nlinks = count;
	}
	/* If there are empty files, that files are added
	 * to the tail of the cache_files. */
	if (empty_files.first != NULL) {
		*iso9660->cache_files.last = empty_files.first;
		iso9660->cache_files.last = empty_files.last;
	}
	*pfile = cache_get_entry(iso9660);
	return ((*pfile == NULL)?ARCHIVE_EOF:ARCHIVE_OK);

fatal_rr:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1367.cpp,"[24, 6, 2, 0, 3, 4, 8, 0, 0, 0, 37, 1, 2, 0, 0, 335, 0, 0, 9, 11, 0, 0, 4, 19, 0, 0, 0, 0, 7, 0, 22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 209, 2, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 0, 34, 26, 5, 0, 22, 0, 0, 39, 3, 36, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1367.cpp,203,[],"[""rede_add_entry_ret"", ""null"", ""<"", ""rede_add_entry_ret"", ""null"", ""<"", ""&&""]","And(null_g_r < rede_add_entry_ret_g_l,
    null_g_r < rede_add_entry_ret_g_l)",291,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,372,"archive_set_error(&(a->archive),
					    -1, ""write overrun"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1381.cpp,"{
					archive_set_error(&(a->archive),
					    -1, ""write overrun"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1381.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1381.cpp,51,"[""member"", ""int"", ""string""]","[""a -> client_writer_ret"", ""a -> client_writer_ret"", "">""]",a -> client_writer_ret_g_l > a -> client_writer_ret_g_r,292,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,643,"archive_set_error(&a->archive, 0,
		    ""Can't add archive to itself"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1383.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Can't add archive to itself"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1383.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1383.cpp,31,"[""member"", ""null"", ""string""]","[""member"", ""archive_entry_dev_is_set_ret"", ""archive_entry_ino_is_set_ret"", ""archive_entry_dev_ret"", ""member"", ""=="", ""archive_entry_ino64_ret"", ""member"", ""=="", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(archive_entry_ino64_ret_e_l == member_e_r,
                archive_entry_dev_ret_e_l == member_e_r),
            Not(archive_entry_ino_is_set_ret_e_l == null_e_r)),
        Not(archive_entry_dev_is_set_ret_e_l == null_e_r)),
    Not(member_e_l == null_e_r))",293,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,165,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1385.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1385.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1385.cpp,8,"[""struct archive *"", ""macro"", ""string""]","[""struct read_file_data *"", ""!""]",Not(Not(null_e_l == struct read_file_data *_e_r)),294,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,255,"archive_set_error(a, errno,
			    ""Failed to open '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1388.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to open '%s'"", filename);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1388.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1388.cpp,39,"[""struct archive *"", ""unkown"", ""string"", ""member""]","[""open_ret"", ""null"", ""<""]",null_g_r < open_ret_g_l,295,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,272,"archive_set_error(a, errno,
			    ""Failed to open '%S'"", wfilename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1389.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to open '%S'"", wfilename);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1389.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1389.cpp,56,"[""struct archive *"", ""unkown"", ""string"", ""member""]","[""_wopen_ret"", ""null"", ""<""]",null_g_r < _wopen_ret_g_l,296,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,611,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Remaining data is less bytes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1438.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Remaining data is less bytes"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1438.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1438.cpp,17,"[""member"", ""macro"", ""string""]","[""__archive_read_filter_ahead_ret"", ""null"", ""=="", ""ssize_t"", ""int"", ""<"", ""||""]","Or(int_g_r < ssize_t_g_l,
   __archive_read_filter_ahead_ret_e_l == null_e_r)",297,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,626,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Uncompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1440.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Uncompressed size error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1440.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1440.cpp,32,"[""member"", ""macro"", ""string""]","[""member"", ""archive_le64dec_ret"", ""!=""]",Not(archive_le64dec_ret_e_l == member_e_r),298,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,634,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Member size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1441.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Member size error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1441.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1441.cpp,40,"[""member"", ""macro"", ""string""]","[""member"", ""int"", ""=="", ""int"", ""archive_le64dec_ret"", ""!="", ""&&""]","And(Not(archive_le64dec_ret_e_l == int_e_r),
    int_e_l == member_e_r)",299,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,683,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1442.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1442.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1442.cpp,28,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ssize_t"", ""null"", ""<"", ""&&""]","And(null_g_r < ssize_t_g_l, member_e_l == null_e_r)",300,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,572,"archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1449.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1449.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1449.cpp,18,"[""member"", ""macro"", ""string""]","[""VirtualAlloc_ret"", ""null"", ""==""]",VirtualAlloc_ret_e_l == null_e_r,301,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,624,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Reading file truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1451.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Reading file truncated"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1451.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1451.cpp,70,"[""member"", ""macro"", ""string""]","[""GetLastError_ret"", ""macro"", ""==""]",GetLastError_ret_e_l == macro_e_r,302,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,635,"archive_set_error(&a->archive, errno, ""Read error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1452.cpp,"{
			if (lasterr == ERROR_NO_DATA)
				errno = EAGAIN;
			else if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Read error"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1452.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 5, 1, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1452.cpp,81,"[""member"", ""macro"", ""string""]","[""GetLastError_ret"", ""macro"", ""!=""]",Not(GetLastError_ret_e_l == macro_e_r),303,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,696,"archive_set_error(&a->archive, errno,
		    ""GetOverlappedResult failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1453.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&a->archive, errno,
		    ""GetOverlappedResult failed"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		r = ARCHIVE_FATAL;
		goto abort_read_data;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1453.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1453.cpp,41,"[""member"", ""unkown"", ""string""]","[""GetOverlappedResult_ret"", ""!""]",Not(Not(GetOverlappedResult_ret_e_l == null_e_r)),304,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,706,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Reading file truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1454.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Reading file truncated"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		r = ARCHIVE_FATAL;
		goto abort_read_data;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1454.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1454.cpp,51,"[""member"", ""macro"", ""string""]","[""DWORD"", ""null"", ""=="", ""member"", ""DWORD"", ""!="", ""||""]","Or(Not(DWORD_e_l == member_e_r), DWORD_e_l == null_e_r)",305,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1355,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1467.cpp,"{
		free(path);
		t->current_filesystem->remote = -1;
		t->current_filesystem->bytesPerSector = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1467.cpp,13,"[""member"", ""macro"", ""string"", ""GetLastError_ret""]","[""GetVolumePathNameW_ret"", ""!""]",Not(Not(GetVolumePathNameW_ret_e_l == null_e_r)),306,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1376,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1468.cpp,"{
		t->current_filesystem->bytesPerSector = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1468.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1468.cpp,34,"[""member"", ""macro"", ""string"", ""GetLastError_ret""]","[""GetDiskFreeSpaceW_ret"", ""!""]",Not(Not(GetDiskFreeSpaceW_ret_e_l == null_e_r)),307,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2074,"archive_set_error(&a->archive, EINVAL,
		    ""Can't get a wide character version of the path"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1471.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Can't get a wide character version of the path"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1471.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1471.cpp,18,"[""member"", ""macro"", ""string""]","[""archive_entry_sourcepath_w_ret"", ""null"", ""==""]",archive_entry_sourcepath_w_ret_e_l == null_e_r,308,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2285,"archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1480.cpp,"{
			la_dosmaperr(GetLastError());
			archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1480.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1480.cpp,73,"[""member"", ""unkown"", ""string"", ""GetLastError_ret""]","[""DeviceIoControl_ret"", ""null"", ""!="", ""!""]",Not(Not(DeviceIoControl_ret_e_l == null_e_r)),309,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_file.cpp,116,"archive_set_error(a, errno, ""Error reading file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1482.cpp,"{
		archive_set_error(a, errno, ""Error reading file"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1482.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1482.cpp,9,"[""struct archive *"", ""unkown"", ""string""]","[""fread_ret"", ""member"", ""<"", ""ferror_ret"", ""&&""]","And(Not(ferror_ret_e_l == null_e_r),
    member_g_r < fread_ret_g_l)",310,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_data_into_fd.cpp,59,"archive_set_error(a, errno, ""Seek error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1495.cpp,"{
			archive_set_error(a, errno, ""Seek error"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1495.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1495.cpp,12,"[""struct archive *"", ""unkown"", ""string""]","[""lseek_ret"", ""int64_t"", ""!=""]",Not(int64_t_e_l == lseek_ret_e_r),311,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,167,"archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1499.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1499.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1499.cpp,23,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_ret"", ""null"", ""=="", ""archive_entry_pathname_ret"", ""char"", ""=="", ""||""]","Or(archive_entry_pathname_ret_e_l == char_e_r,
   archive_entry_pathname_ret_e_l == null_e_r)",312,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,214,"archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1500.cpp,"{
		/* Reject filenames with trailing ""/"" */
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1500.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1500.cpp,70,"[""member"", ""macro"", ""string""]","[""ar_basename_ret"", ""null"", ""==""]",ar_basename_ret_e_l == null_e_r,313,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,330,"archive_set_error(&a->archive, EINVAL,
		    ""Regular file required for non-pseudo member"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1510.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Regular file required for non-pseudo member"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1510.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1510.cpp,186,"[""member"", ""macro"", ""string""]","[""ar_basename_ret"", ""null"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""&&""]","And(Not(archive_entry_filetype_ret_e_l == macro_e_r),
    Not(ar_basename_ret_e_l == null_e_r))",314,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,247,"archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1518.cpp,"{
			/* don't bother */
			archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1518.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1518.cpp,68,"[""member"", ""macro"", ""string""]","[""_popul_ehdr_ret"", ""null"", ""<""]",null_g_r < _popul_ehdr_ret_g_l,315,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,472,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1542.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	const char *read_buf;
	ssize_t bytes_remaining;
	ssize_t descriptor_bytes;
	unsigned char flag, bd;
	unsigned int chsum, chsum_verifier;

	/* Make sure we have 2 bytes for flags. */
	read_buf = __archive_read_filter_ahead(self->upstream, 2,
	    &bytes_remaining);
	if (read_buf == NULL) {
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""truncated lz4 input"");
		return (ARCHIVE_FATAL);
	}

	/*
	   Parse flags.
	 */
	flag = (unsigned char)read_buf[0];
	/* Verify version number. */
	if ((flag & 0xc0) != 1<<6)
		goto malformed_error;
	/* A reserved bit must be zero. */
	if (flag & 0x02)
		goto malformed_error;
	state->flags.block_independence = (flag & 0x20) != 0;
	state->flags.block_checksum = (flag & 0x10)?4:0;
	state->flags.stream_size = (flag & 0x08) != 0;
	state->flags.stream_checksum = (flag & 0x04) != 0;
	state->flags.preset_dictionary = (flag & 0x01) != 0;

	/* BD */
	bd = (unsigned char)read_buf[1];
	/* Reserved bits must be zero. */
	if (bd & 0x8f)
		goto malformed_error;
	/* Get a maximum block size. */
	switch (read_buf[1] >> 4) {
	case 4: /* 64 KB */
		state->flags.block_maximum_size = 64 * 1024;
		break;
	case 5: /* 256 KB */
		state->flags.block_maximum_size = 256 * 1024;
		break;
	case 6: /* 1 MB */
		state->flags.block_maximum_size = 1024 * 1024;
		break;
	case 7: /* 4 MB */
		state->flags.block_maximum_size = 4 * 1024 * 1024;
		break;
	default:
		goto malformed_error;
	}

	/* Read the whole descriptor in a stream block. */
	descriptor_bytes = 3;
	if (state->flags.stream_size)
		descriptor_bytes += 8;
	if (state->flags.preset_dictionary)
		descriptor_bytes += 4;
	if (bytes_remaining < descriptor_bytes) {
		read_buf = __archive_read_filter_ahead(self->upstream,
		    descriptor_bytes, &bytes_remaining);
		if (read_buf == NULL) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
	}
	/* Check if a descriptor is corrupted */
	chsum = __archive_xxhash.XXH32(read_buf, (int)descriptor_bytes -1, 0);
	chsum = (chsum >> 8) & 0xff;
	chsum_verifier = read_buf[descriptor_bytes-1] & 0xff;
	if (chsum != chsum_verifier)
		goto malformed_error;

	__archive_read_filter_consume(self->upstream, descriptor_bytes);

	/* Make sure we have an enough buffer for uncompressed data. */
	if (lz4_allocate_out_block(self) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);
	if (state->flags.stream_checksum)
		state->xxh32_state = __archive_xxhash.XXH32_init(0);

	state->decoded_size = 0;
	/* Success */
	return (ARCHIVE_OK);
malformed_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1542.cpp,"[11, 0, 0, 0, 4, 0, 5, 1, 4, 1, 13, 1, 5, 0, 1, 173, 0, 0, 6, 8, 0, 0, 1, 48, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 1, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 13, 12, 1, 0, 9, 0, 0, 25, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1542.cpp,94,"[""member"", ""macro"", ""string""]","[""bool"", ""bool"", ""bool"", ""!="", ""member"", ""bool"", ""int"", ""!="", ""bool"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(Not(bool_e_l == null_e_r),
                Not(bool_e_l == int_e_r)),
            Not(member_e_l == null_e_r)),
        Not(bool_e_l == bool_e_r)),
    Not(bool_e_l == null_e_r))",316,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,610,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1544.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	ssize_t compressed_size;
	const char *read_buf;
	ssize_t bytes_remaining;
	int checksum_size;
	ssize_t uncompressed_size;
	size_t prefix64k;

	*p = NULL;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4,
	    &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;
	compressed_size = archive_le32dec(read_buf);
	if ((compressed_size & ~(1 << 31)) > state->flags.block_maximum_size)
		goto malformed_error;
	/* A compressed size == 0 means the end of stream blocks. */
	if (compressed_size == 0) {
		__archive_read_filter_consume(self->upstream, 4);
		return 0;
	}

	checksum_size = state->flags.block_checksum;
	/* Check if the block is uncompressed. */
	if (compressed_size & (1 << 31)) {
		compressed_size &= ~(1 << 31);
		uncompressed_size = compressed_size;
	} else
		uncompressed_size = 0;/* Unknown yet. */

	/*
	  Unfortunately, lz4 decompression API requires a whole block
	  for its decompression speed, so we read a whole block and allocate
	  a huge buffer used for decoded data.
	*/
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed_size + checksum_size, &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;

	/* Optional process, checking a block sum. */
	if (checksum_size) {
		unsigned int chsum = __archive_xxhash.XXH32(
			read_buf + 4, (int)compressed_size, 0);
		unsigned int chsum_block =
		    archive_le32dec(read_buf + 4 + compressed_size);
		if (chsum != chsum_block)
			goto malformed_error;
	}


	/* If the block is uncompressed, there is nothing to do. */
	if (uncompressed_size) {
		/* Prepare a prefix 64k block for next block. */
		if (!state->flags.block_independence) {
			prefix64k = 64 * 1024;
			if (uncompressed_size < (ssize_t)prefix64k) {
				memcpy(state->out_block
					+ prefix64k - uncompressed_size,
				    read_buf + 4,
				    uncompressed_size);
				memset(state->out_block, 0,
				    prefix64k - uncompressed_size);
			} else {
				memcpy(state->out_block,
				    read_buf + 4
					+ uncompressed_size - prefix64k,
				    prefix64k);
			}
			state->decoded_size = 0;
		}
		state->unconsumed = 4 + uncompressed_size + checksum_size;
		*p = read_buf + 4;
		return uncompressed_size;
	}

	/*
	   Decompress a block data.
	 */
	if (state->flags.block_independence) {
		prefix64k = 0;
		uncompressed_size = LZ4_decompress_safe(read_buf + 4,
		    state->out_block, (int)compressed_size,
		    state->flags.block_maximum_size);
	} else {
		prefix64k = 64 * 1024;
		if (state->decoded_size) {
			if (state->decoded_size < prefix64k) {
				memmove(state->out_block
					+ prefix64k - state->decoded_size,
				    state->out_block + prefix64k,
				    state->decoded_size);
				memset(state->out_block, 0,
				    prefix64k - state->decoded_size);
			} else {
				memmove(state->out_block,
				    state->out_block + state->decoded_size,
				    prefix64k);
			}
		}
#if LZ4_VERSION_MAJOR >= 1 && LZ4_VERSION_MINOR >= 7
		uncompressed_size = LZ4_decompress_safe_usingDict(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size,
		    state->out_block,
		    prefix64k);
#else
		uncompressed_size = LZ4_decompress_safe_withPrefix64k(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size);
#endif
	}

	/* Check if an error occurred in the decompression process. */
	if (uncompressed_size < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}

	state->unconsumed = 4 + compressed_size + checksum_size;
	*p = state->out_block + prefix64k;
	state->decoded_size = uncompressed_size;
	return uncompressed_size;

malformed_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");
	return (ARCHIVE_FATAL);
truncated_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""truncated lz4 input"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1544.cpp,"[15, 0, 0, 0, 0, 0, 6, 0, 0, 0, 19, 2, 4, 0, 1, 257, 0, 0, 9, 9, 0, 0, 3, 37, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 14, 14, 5, 0, 18, 0, 0, 30, 0, 54, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1544.cpp,133,"[""member"", ""macro"", ""string""]","[""bool"", ""member"", "">"", ""unsigned int"", ""unsigned int"", ""!="", ""&&""]","And(Not(unsigned int_e_l == unsigned int_e_r),
    member_g_l > bool_g_r)",317,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,660,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""lz4 stream cheksum error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1547.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""lz4 stream cheksum error"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1547.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1547.cpp,41,"[""member"", ""macro"", ""string""]","[""archive_le32dec_ret"", ""__archive_xxhash . XXH32_digest_ret"", ""!=""]","Not(__archive_xxhash . XXH32_digest_ret_e_l ==
    archive_le32dec_ret_e_r)",318,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,100,"archive_set_error(a, ENOMEM,
		    ""Can't allocate uname/gname lookup cache"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1553.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate uname/gname lookup cache"");
		free(ucache);
		free(gcache);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1553.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1553.cpp,7,"[""struct archive *"", ""macro"", ""string""]","[""struct name_cache *"", ""null"", ""=="", ""struct name_cache *"", ""null"", ""=="", ""||""]","Or(null_e_l == struct name_cache *_e_r,
   null_e_l == struct name_cache *_e_r)",319,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,220,"archive_set_error(cache->archive, errno,
		    ""Can't lookup user for id %d"", (int)id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1554.cpp,"{
		archive_set_error(cache->archive, errno,
		    ""Can't lookup user for id %d"", (int)id);
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1554.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1554.cpp,35,"[""member"", ""unkown"", ""string"", ""id_t""]","[""getpwuid_r_ret"", ""null"", ""!=""]",Not(getpwuid_r_ret_e_l == null_e_r),320,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,287,"archive_set_error(cache->archive, errno,
		    ""Can't lookup group for id %d"", (int)id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1555.cpp,"{
		archive_set_error(cache->archive, errno,
		    ""Can't lookup group for id %d"", (int)id);
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1555.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1555.cpp,33,"[""member"", ""unkown"", ""string"", ""id_t""]","[""getgrgid_r_ret"", ""null"", ""!=""]",Not(getgrgid_r_ret_e_l == null_e_r),321,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,458,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1558.cpp,"{
	const void *h;
	const char *p, *q;
	size_t next, skip;
	ssize_t bytes, window;

	window = 4096;
	for (;;) {
		h = __archive_read_ahead(a, window, &bytes);
		if (h == NULL) {
			/* Remaining bytes are less than window. */
			window >>= 1;
			if (window < (H_SIZE + 3))
				goto fatal;
			continue;
		}
		if (bytes < H_SIZE)
			goto fatal;
		p = h;
		q = p + bytes;

		/*
		 * Scan ahead until we find something that looks
		 * like the lha header.
		 */
		while (p + H_SIZE < q) {
			if ((next = lha_check_header_format(p)) == 0) {
				skip = p - (const char *)h;
				__archive_read_consume(a, skip);
				return (ARCHIVE_OK);
			}
			p += next;
		}
		skip = p - (const char *)h;
		__archive_read_consume(a, skip);
	}
fatal:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1558.cpp,"[4, 1, 1, 0, 0, 1, 2, 0, 0, 0, 7, 1, 2, 0, 4, 61, 0, 0, 4, 7, 0, 0, 1, 5, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 4, 0, 0, 5, 0, 0, 11, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1558.cpp,39,"[""member"", ""macro"", ""string""]","[""int"", ""macro"", ""<"", ""ssize_t"", ""macro"", ""<"", ""&&""]","And(macro_g_r < ssize_t_g_l, macro_g_r < int_g_l)",322,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,525,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1560.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1560.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1560.cpp,54,"[""member"", ""macro"", ""string""]","[""lha_check_header_format_ret"", ""null"", ""!=""]",Not(lha_check_header_format_ret_e_l == null_e_r),323,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,609,"archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1562.cpp,"{
			/* We couldn't get the symlink-name. */
			archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");
			archive_string_free(&pathname);
			archive_string_free(&linkname);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1562.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1562.cpp,138,"[""member"", ""macro"", ""string""]","[""lha_parse_linkname_ret"", ""!""]",Not(Not(lha_parse_linkname_ret_e_l == null_e_r)),324,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,712,"sprintf(lha->format_name, ""lha -%c%c%c-"",
	    lha->method[0], lha->method[1], lha->method[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1567.cpp,"{
	struct archive_string linkname;
	struct archive_string pathname;
	struct lha *lha;
	const unsigned char *p;
	const char *signature;
	int err;
	
	lha_crc16_init();

	a->archive.archive_format = ARCHIVE_FORMAT_LHA;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""lha"";

	lha = (struct lha *)(a->format->data);
	lha->decompress_init = 0;
	lha->end_of_entry = 0;
	lha->end_of_entry_cleanup = 0;
	lha->entry_unconsumed = 0;

	if ((p = __archive_read_ahead(a, H_SIZE, NULL)) == NULL) {
		/*
		 * LHa archiver added 0 to the tail of its archive file as
		 * the mark of the end of the archive.
		 */
		signature = __archive_read_ahead(a, sizeof(signature[0]), NULL);
		if (signature == NULL || signature[0] == 0)
			return (ARCHIVE_EOF);
		return (truncated_error(a));
	}

	signature = (const char *)p;
	if (lha->found_first_header == 0 &&
	    signature[0] == 'M' && signature[1] == 'Z') {
                /* This is an executable?  Must be self-extracting... 	*/
		err = lha_skip_sfx(a);
		if (err < ARCHIVE_WARN)
			return (err);

		if ((p = __archive_read_ahead(a, sizeof(*p), NULL)) == NULL)
			return (truncated_error(a));
		signature = (const char *)p;
	}
	/* signature[0] == 0 means the end of an LHa archive file. */
	if (signature[0] == 0)
		return (ARCHIVE_EOF);

	/*
	 * Check the header format and method type.
	 */
	if (lha_check_header_format(p) != 0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");
		return (ARCHIVE_FATAL);
	}

	/* We've found the first header. */
	lha->found_first_header = 1;
	/* Set a default value and common data */
	lha->header_size = 0;
	lha->level = p[H_LEVEL_OFFSET];
	lha->method[0] = p[H_METHOD_OFFSET+1];
	lha->method[1] = p[H_METHOD_OFFSET+2];
	lha->method[2] = p[H_METHOD_OFFSET+3];
	if (memcmp(lha->method, ""lhd"", 3) == 0)
		lha->directory = 1;
	else
		lha->directory = 0;
	if (memcmp(lha->method, ""lh0"", 3) == 0 ||
	    memcmp(lha->method, ""lz4"", 3) == 0)
		lha->entry_is_compressed = 0;
	else
		lha->entry_is_compressed = 1;

	lha->compsize = 0;
	lha->origsize = 0;
	lha->setflag = 0;
	lha->birthtime = 0;
	lha->birthtime_tv_nsec = 0;
	lha->mtime = 0;
	lha->mtime_tv_nsec = 0;
	lha->atime = 0;
	lha->atime_tv_nsec = 0;
	lha->mode = (lha->directory)? 0777 : 0666;
	lha->uid = 0;
	lha->gid = 0;
	archive_string_empty(&lha->dirname);
	archive_string_empty(&lha->filename);
	lha->dos_attr = 0;
	if (lha->opt_sconv != NULL)
		lha->sconv = lha->opt_sconv;
	else
		lha->sconv = NULL;

	switch (p[H_LEVEL_OFFSET]) {
	case 0:
		err = lha_read_file_header_0(a, lha);
		break;
	case 1:
		err = lha_read_file_header_1(a, lha);
		break;
	case 2:
		err = lha_read_file_header_2(a, lha);
		break;
	case 3:
		err = lha_read_file_header_3(a, lha);
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported LHa header level %d"", p[H_LEVEL_OFFSET]);
		err = ARCHIVE_FATAL;
		break;
	}
	if (err < ARCHIVE_WARN)
		return (err);


	if (!lha->directory && archive_strlen(&lha->filename) == 0)
		/* The filename has not been set */
		return (truncated_error(a));

	/*
	 * Make a pathname from a dirname and a filename.
	 */
	archive_string_concat(&lha->dirname, &lha->filename);
	archive_string_init(&pathname);
	archive_string_init(&linkname);
	archive_string_copy(&pathname, &lha->dirname);

	if ((lha->mode & AE_IFMT) == AE_IFLNK) {
		/*
	 	 * Extract the symlink-name if it's included in the pathname.
	 	 */
		if (!lha_parse_linkname(&linkname, &pathname)) {
			/* We couldn't get the symlink-name. */
			archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");
			archive_string_free(&pathname);
			archive_string_free(&linkname);
			return (ARCHIVE_FAILED);
		}
	} else {
		/*
		 * Make sure a file-type is set.
		 * The mode has been overridden if it is in the extended data.
		 */
		lha->mode = (lha->mode & ~AE_IFMT) |
		    ((lha->directory)? AE_IFDIR: AE_IFREG);
	}
	if ((lha->setflag & UNIX_MODE_IS_SET) == 0 &&
	    (lha->dos_attr & 1) != 0)
		lha->mode &= ~(0222);/* read only. */

	/*
	 * Set basic file parameters.
	 */
	if (archive_entry_copy_pathname_l(entry, pathname.s,
	    pathname.length, lha->sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(lha->sconv));
		err = ARCHIVE_WARN;
	}
	archive_string_free(&pathname);
	if (archive_strlen(&linkname) > 0) {
		if (archive_entry_copy_symlink_l(entry, linkname.s,
		    linkname.length, lha->sconv) != 0) {
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(lha->sconv));
			err = ARCHIVE_WARN;
		}
	} else
		archive_entry_set_symlink(entry, NULL);
	archive_string_free(&linkname);
	/*
	 * When a header level is 0, there is a possibility that
	 * a pathname and a symlink has '\' character, a directory
	 * separator in DOS/Windows. So we should convert it to '/'.
	 */
	if (p[H_LEVEL_OFFSET] == 0)
		lha_replace_path_separator(lha, entry);

	archive_entry_set_mode(entry, lha->mode);
	archive_entry_set_uid(entry, lha->uid);
	archive_entry_set_gid(entry, lha->gid);
	if (archive_strlen(&lha->uname) > 0)
		archive_entry_set_uname(entry, lha->uname.s);
	if (archive_strlen(&lha->gname) > 0)
		archive_entry_set_gname(entry, lha->gname.s);
	if (lha->setflag & BIRTHTIME_IS_SET) {
		archive_entry_set_birthtime(entry, lha->birthtime,
		    lha->birthtime_tv_nsec);
		archive_entry_set_ctime(entry, lha->birthtime,
		    lha->birthtime_tv_nsec);
	} else {
		archive_entry_unset_birthtime(entry);
		archive_entry_unset_ctime(entry);
	}
	archive_entry_set_mtime(entry, lha->mtime, lha->mtime_tv_nsec);
	if (lha->setflag & ATIME_IS_SET)
		archive_entry_set_atime(entry, lha->atime,
		    lha->atime_tv_nsec);
	else
		archive_entry_unset_atime(entry);
	if (lha->directory || archive_entry_symlink(entry) != NULL)
		archive_entry_unset_size(entry);
	else
		archive_entry_set_size(entry, lha->origsize);

	/*
	 * Prepare variables used to read a file content.
	 */
	lha->entry_bytes_remaining = lha->compsize;
	lha->entry_offset = 0;
	lha->entry_crc_calculated = 0;

	/*
	 * This file does not have a content.
	 */
	if (lha->directory || lha->compsize == 0)
		lha->end_of_entry = 1;

	sprintf(lha->format_name, ""lha -%c%c%c-"",
	    lha->method[0], lha->method[1], lha->method[2]);
	a->archive.archive_format_name = lha->format_name;

	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1567.cpp,"[28, 0, 0, 0, 5, 0, 12, 1, 4, 1, 38, 0, 0, 0, 4, 535, 0, 0, 6, 6, 0, 0, 0, 83, 0, 0, 0, 0, 3, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 2, 277, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 18, 0, 31, 30, 10, 0, 62, 0, 0, 85, 0, 123, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1567.cpp,241,"[""member"", ""string"", ""member"", ""member"", ""member""]","[""archive_strlen_ret"", ""null"", "">"", ""!"", ""archive_entry_copy_symlink_l_ret"", ""null"", ""!="", ""!"", ""unkown"", ""macro"", ""=="", ""&&"", ""&&""]","And(And(macro_e_l == unkown_e_r,
        Not(Not(archive_entry_copy_symlink_l_ret_e_l ==
                null_e_r))),
    Not(null_g_l > archive_strlen_ret_g_r))",325,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,796,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1568.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1568.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1568.cpp,17,"[""member"", ""macro"", ""string""]","[""member"", ""int"", "">"", ""macro"", ""null"", ""<"", ""||"", ""macro"", ""int"", ""!="", ""&&""]","And(Not(int_e_l == macro_e_r),
    Or(null_g_r < macro_g_l, int_g_l > member_g_r))",326,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,936,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1571.cpp,"{
	const unsigned char *p;
	size_t extdsize;
	int i, err, err2;
	int namelen, padding;
	unsigned char headersum, sum_calculated;

	err = ARCHIVE_OK;

	if ((p = __archive_read_ahead(a, H1_FIXED_SIZE, NULL)) == NULL)
		return (truncated_error(a));

	lha->header_size = p[H1_HEADER_SIZE_OFFSET] + 2;
	headersum = p[H1_HEADER_SUM_OFFSET];
	/* Note: An extended header size is included in a compsize. */
	lha->compsize = archive_le32dec(p + H1_COMP_SIZE_OFFSET);
	lha->origsize = archive_le32dec(p + H1_ORIG_SIZE_OFFSET);
	lha->mtime = lha_dos_time(p + H1_DOS_TIME_OFFSET);
	namelen = p[H1_NAME_LEN_OFFSET];
	/* Calculate a padding size. The result will be normally 0 only(?) */
	padding = ((int)lha->header_size) - H1_FIXED_SIZE - namelen;

	if (namelen > 230 || padding < 0)
		goto invalid;

	if ((p = __archive_read_ahead(a, lha->header_size, NULL)) == NULL)
		return (truncated_error(a));

	for (i = 0; i < namelen; i++) {
		if (p[i + H1_FILE_NAME_OFFSET] == 0xff)
			goto invalid;/* Invalid filename. */
	}
	archive_strncpy(&lha->filename, p + H1_FILE_NAME_OFFSET, namelen);
	lha->crc = archive_le16dec(p + H1_FILE_NAME_OFFSET + namelen);
	lha->setflag |= CRC_IS_SET;

	sum_calculated = lha_calcsum(0, p, 2, lha->header_size - 2);
	/* Consume used bytes but not include `next header size' data
	 * since it will be consumed in lha_read_file_extended_header(). */
	__archive_read_consume(a, lha->header_size - 2);

	/* Read extended headers */
	err2 = lha_read_file_extended_header(a, lha, NULL, 2,
	    (size_t)(lha->compsize + 2), &extdsize);
	if (err2 < ARCHIVE_WARN)
		return (err2);
	if (err2 < err)
		err = err2;
	/* Get a real compressed file size. */
	lha->compsize -= extdsize - 2;

	if (lha->compsize < 0)
		goto invalid;	/* Invalid compressed file size */

	if (sum_calculated != headersum) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");
		return (ARCHIVE_FATAL);
	}
	return (err);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1571.cpp,"[8, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 1, 3, 0, 1, 157, 0, 0, 5, 9, 0, 0, 1, 15, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 0, 9, 8, 0, 0, 15, 0, 0, 18, 0, 34, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1571.cpp,63,"[""member"", ""macro"", ""string""]","[""member"", ""int"", "">"", ""macro"", ""null"", ""<"", ""||"", ""member"", ""null"", ""<"", ""member"", ""constant"", ""=="", ""&&"", ""&&""]","And(And(constant_e_l == member_e_r, null_g_r < member_g_l),
    Or(null_g_r < macro_g_l, int_g_l > member_g_r))",327,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1086,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1575.cpp,"{
	const unsigned char *p;
	size_t extdsize;
	int err;
	uint16_t header_crc;

	if ((p = __archive_read_ahead(a, H3_FIXED_SIZE, NULL)) == NULL)
		return (truncated_error(a));

	if (archive_le16dec(p + H3_FIELD_LEN_OFFSET) != 4)
		goto invalid;
	lha->header_size =archive_le32dec(p + H3_HEADER_SIZE_OFFSET);
	lha->compsize = archive_le32dec(p + H3_COMP_SIZE_OFFSET);
	lha->origsize = archive_le32dec(p + H3_ORIG_SIZE_OFFSET);
	lha->mtime = archive_le32dec(p + H3_TIME_OFFSET);
	lha->crc = archive_le16dec(p + H3_CRC_OFFSET);
	lha->setflag |= CRC_IS_SET;

	if (lha->header_size < H3_FIXED_SIZE + 4)
		goto invalid;
	header_crc = lha_crc16(0, p, H3_FIXED_SIZE);
	__archive_read_consume(a, H3_FIXED_SIZE);

	/* Read extended headers */
	err = lha_read_file_extended_header(a, lha, &header_crc, 4,
		  lha->header_size - H3_FIXED_SIZE, &extdsize);
	if (err < ARCHIVE_WARN)
		return (err);

	if (header_crc != lha->header_crc) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");
		return (ARCHIVE_FATAL);
	}
	return (err);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1575.cpp,"[5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 1, 2, 0, 1, 98, 0, 0, 4, 4, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 13, 0, 0, 11, 0, 27, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1575.cpp,38,"[""member"", ""macro"", ""string""]","[""archive_le16dec_ret"", ""int"", ""!="", ""member"", ""macro"", ""<"", ""&&""]","And(macro_g_r < member_g_l,
    Not(archive_le16dec_ret_e_l == int_e_r))",328,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1267,"archive_string_sprintf(&cp, ""CP%d"",
					    (int)archive_le32dec(extdheader));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1576.cpp,"{
				case 65001: /* UTF-8 */
					charset = ""UTF-8"";
					break;
				default:
					archive_string_sprintf(&cp, ""CP%d"",
					    (int)archive_le32dec(extdheader));
					charset = cp.s;
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1576.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1576.cpp,162,"[""unkown"", ""string"", ""archive_le32dec_ret""]","[""archive_le32dec_ret""]",Not(archive_le32dec_ret_e_l == null_e_r),329,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1511,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Bad lzh data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1583.cpp,"{
	case ARCHIVE_OK:
		break;
	case ARCHIVE_EOF:
		lha->end_of_entry = 1;
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Bad lzh data"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1583.cpp,"[0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1583.cpp,65,"[""member"", ""macro"", ""string""]","[""lzh_decode_ret""]",Not(lzh_decode_ret_e_l == null_e_r),330,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,624,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1586.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated tar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1586.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1586.cpp,40,"[""member"", ""macro"", ""string""]","[""const void * *"", ""null"", ""==""]",const void * *_e_l == null_e_r,331,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,754,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1588.cpp,"{
		tar_flush_unconsumed(a, unconsumed);
		archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");
		return (ARCHIVE_RETRY); /* Retryable: Invalid header */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1588.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1588.cpp,65,"[""member"", ""macro"", ""string""]","[""checksum_ret"", ""!""]",Not(Not(checksum_ret_e_l == null_e_r)),332,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,853,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unrecognized GNU sparse file format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1590.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unrecognized GNU sparse file format"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1590.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1590.cpp,164,"[""member"", ""macro"", ""string""]","[""member"", ""int"", ""=="", ""member"", ""null"", ""=="", ""&&"", ""!""]","Not(And(member_e_l == null_e_r, int_e_l == member_e_r))",333,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,864,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1591.cpp,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1591.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1591.cpp,175,"[""member"", ""macro"", ""string""]","[""header_Solaris_ACL_ret"", ""macro"", ""==""]",header_Solaris_ACL_ret_e_l == macro_e_r,334,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (invalid digit)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1592.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (invalid digit)"");
			return(ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1592.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1592.cpp,35,"[""member"", ""macro"", ""string""]","[""member"", ""char"", ""<"", ""member"", ""char"", "">"", ""||""]","Or(char_g_l > member_g_r, char_g_r < member_g_l)",335,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1124,"archive_set_error(&a->archive, EINVAL,
		    ""Special header too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1601.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Special header too large"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1601.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1601.cpp,12,"[""member"", ""macro"", ""string""]","[""tar_atol_ret"", ""int"", "">"", ""tar_atol_ret"", ""null"", ""<"", ""||""]","Or(null_g_r < tar_atol_ret_g_l, int_g_l > tar_atol_ret_g_r)",336,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1206,"err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1605.cpp,"{
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1605.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1605.cpp,45,"[""struct archive_read *"", ""member"", ""string""]","[""archive_entry_copy_hardlink_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_hardlink_l_ret_e_l == null_e_r),337,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1274,"err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1606.cpp,"{
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1606.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1606.cpp,113,"[""struct archive_read *"", ""member"", ""string""]","[""archive_entry_copy_symlink_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_symlink_l_ret_e_l == null_e_r),338,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1598,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Ignoring malformed pax extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1611.cpp,"{
				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Ignoring malformed pax extended attributes"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1611.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1611.cpp,32,"[""member"", ""macro"", ""string""]","[""char *"", ""char"", ""<"", ""char *"", ""char"", "">"", ""||""]","Or(char_g_l > char *_g_r, char_g_r < char *_g_l)",339,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1622,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring malformed pax extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1613.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring malformed pax extended attribute"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1613.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1613.cpp,56,"[""member"", ""macro"", ""string""]","[""char"", ""member"", "">"", ""char"", ""int"", ""<"", ""member"", ""char"", ""!="", ""||"", ""||""]","Or(Or(Not(char_e_l == member_e_r), int_g_r < char_g_l),
   member_g_l > char_g_r)",340,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1693,"err = set_conversion_failed_error(a, sconv, ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1616.cpp,"{
			err = set_conversion_failed_error(a, sconv, ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
			/* Use a converted an original name. */
			archive_entry_copy_link(entry, tar->entry_linkpath.s);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1616.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1616.cpp,127,"[""struct archive_read *"", ""archive_string_conversion_from_charset_ret"", ""string""]","[""archive_entry_copy_link_l_ret"", ""null"", ""!=""]",Not(archive_entry_copy_link_l_ret_e_l == null_e_r),341,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1819,"archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1620.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1620.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1620.cpp,35,"[""member"", ""macro"", ""string"", ""string"", ""string""]","[""archive_acl_from_text_l_ret"", ""macro"", ""==""]",archive_acl_from_text_l_ret_e_l == macro_e_r,342,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1824,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1621.cpp,"{
		if (r == ARCHIVE_FATAL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);
			return (r);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1621.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1621.cpp,40,"[""member"", ""macro"", ""string"", ""string"", ""string""]","[""archive_acl_from_text_l_ret"", ""macro"", ""=="", ""!""]",Not(archive_acl_from_text_l_ret_e_l == macro_e_r),343,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1622.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1622.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1622.cpp,16,"[""member"", ""macro"", ""string""]","[""strncmp_ret"", ""null"", ""=="", ""member"", ""!"", ""&&""]","And(Not(Not(member_e_l == null_e_r)),
    null_e_l == strncmp_ret_e_r)",344,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1990,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SUN.holesdata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1623.cpp,"{
				if (r == ARCHIVE_FATAL)
					return (r);
				err = r;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SUN.holesdata"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1623.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1623.cpp,147,"[""member"", ""macro"", ""string""]","[""solaris_sparse_parse_ret"", ""macro"", ""=="", ""!""]",Not(macro_e_l == solaris_sparse_parse_ret_e_r),345,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2240,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Malformed sparse map data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1628.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Malformed sparse map data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1628.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1628.cpp,17,"[""member"", ""macro"", ""string""]","[""int64_t"", ""null"", ""<"", ""int64_t"", ""null"", ""<"", ""||""]","Or(null_g_r < int64_t_g_l, null_g_r < int64_t_g_l)",346,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,247,"archive_set_error(&self->archive->archive, -1,
		    ""Invalid compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1634.cpp,"{
		archive_set_error(&self->archive->archive, -1,
		    ""Invalid compressed data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1634.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1634.cpp,37,"[""member"", ""int"", ""string""]","[""bool"", ""int"", "">""]",int_g_l > bool_g_r,347,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,382,"archive_set_error(&(self->archive->archive), -1,
		    ""Invalid compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1635.cpp,"{
		/* An invalid code is a fatal error. */
		archive_set_error(&(self->archive->archive), -1,
		    ""Invalid compressed data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1635.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1635.cpp,47,"[""member"", ""int"", ""string""]","[""getbits_ret"", ""member"", "">"", ""getbits_ret"", ""member"", ""=="", ""member"", ""null"", ""<"", ""&&"", ""||""]","Or(And(null_g_r < member_g_l, getbits_ret_e_l == member_e_r),
   member_g_l > getbits_ret_g_r)",348,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,875,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1642.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1642.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1642.cpp,251,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""!="", ""bool"", ""||""]","Or(Not(bool_e_l == null_e_r), Not(member_e_l == null_e_r))",349,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1007,"sprintf(cab->format_name, ""CAB %d.%d (%s)"",
	    hd->major, hd->minor, cab->entry_cffolder->compname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1647.cpp,"{
	struct cab *cab;
	struct cfheader *hd;
	struct cffolder *prev_folder;
	struct cffile *file;
	struct archive_string_conv *sconv;
	int err = ARCHIVE_OK, r;
	
	cab = (struct cab *)(a->format->data);
	if (cab->found_header == 0) {
		err = cab_read_header(a); 
		if (err < ARCHIVE_WARN)
			return (err);
		/* We've found the header. */
		cab->found_header = 1;
	}
	hd = &cab->cfheader;

	if (hd->file_index >= hd->file_count) {
		cab->end_of_archive = 1;
		return (ARCHIVE_EOF);
	}
	file = &hd->file_array[hd->file_index++];

	cab->end_of_entry = 0;
	cab->end_of_entry_cleanup = 0;
	cab->entry_compressed_bytes_read = 0;
	cab->entry_uncompressed_bytes_read = 0;
	cab->entry_unconsumed = 0;
	cab->entry_cffile = file;

	/*
	 * Choose a proper folder.
	 */
	prev_folder = cab->entry_cffolder;
	switch (file->folder) {
	case iFoldCONTINUED_FROM_PREV:
	case iFoldCONTINUED_PREV_AND_NEXT:
		cab->entry_cffolder = &hd->folder_array[0];
		break;
	case iFoldCONTINUED_TO_NEXT:
		cab->entry_cffolder = &hd->folder_array[hd->folder_count-1];
		break;
	default:
		cab->entry_cffolder = &hd->folder_array[file->folder];
		break;
	}
	/* If a cffolder of this file is changed, reset a cfdata to read
	 * file contents from next cfdata. */
	if (prev_folder != cab->entry_cffolder)
		cab->entry_cfdata = NULL;

	/* If a pathname is UTF-8, prepare a string conversion object
	 * for UTF-8 and use it. */
	if (file->attr & ATTR_NAME_IS_UTF) {
		if (cab->sconv_utf8 == NULL) {
			cab->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&(a->archive), ""UTF-8"", 1);
			if (cab->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = cab->sconv_utf8;
	} else if (cab->sconv != NULL) {
		/* Choose the conversion specified by the option. */
		sconv = cab->sconv;
	} else {
		/* Choose the default conversion. */
		if (!cab->init_default_conversion) {
			cab->sconv_default =
			    archive_string_default_conversion_for_read(
			      &(a->archive));
			cab->init_default_conversion = 1;
		}
		sconv = cab->sconv_default;
	}

	/*
	 * Set a default value and common data
	 */
	r = cab_convert_path_separator_1(&(file->pathname), file->attr);
	if (archive_entry_copy_pathname_l(entry, file->pathname.s,
	    archive_strlen(&(file->pathname)), sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		err = ARCHIVE_WARN;
	}
	if (r < 0) {
		/* Convert a path separator '\' -> '/' */
		cab_convert_path_separator_2(cab, entry);
	}

	archive_entry_set_size(entry, file->uncompressed_size);
	if (file->attr & ATTR_RDONLY)
		archive_entry_set_mode(entry, AE_IFREG | 0555);
	else
		archive_entry_set_mode(entry, AE_IFREG | 0666);
	archive_entry_set_mtime(entry, file->mtime, 0);

	cab->entry_bytes_remaining = file->uncompressed_size;
	cab->entry_offset = 0;
	/* We don't need compress data. */
	if (file->uncompressed_size == 0)
		cab->end_of_entry_cleanup = cab->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	sprintf(cab->format_name, ""CAB %d.%d (%s)"",
	    hd->major, hd->minor, cab->entry_cffolder->compname);
	a->archive.archive_format_name = cab->format_name;

	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1647.cpp,"[14, 0, 0, 0, 3, 0, 5, 1, 3, 1, 18, 0, 0, 0, 0, 273, 0, 0, 6, 7, 0, 0, 1, 25, 0, 0, 0, 0, 5, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 15, 14, 2, 0, 15, 0, 0, 37, 1, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1647.cpp,117,"[""member"", ""string"", ""member"", ""member"", ""member""]","[""archive_entry_copy_pathname_l_ret"", ""null"", ""!="", ""!"", ""unkown"", ""macro"", ""=="", ""!"", ""&&""]","And(Not(macro_e_l == unkown_e_r),
    Not(Not(archive_entry_copy_pathname_l_ret_e_l ==
            null_e_r)))",350,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1335,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CFDATA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1652.cpp,"{
	struct cab *cab = (struct cab *)(a->format->data);
	struct cfdata *cfdata = cab->entry_cfdata;

	/* There are remaining bytes in current CFDATA, use it first. */
	if (cfdata != NULL && cfdata->uncompressed_bytes_remaining > 0)
		return (ARCHIVE_OK);

	if (cfdata == NULL) {
		int64_t skip;

		cab->entry_cffolder->cfdata_index = 0;

		/* Seek read pointer to the offset of CFDATA if needed. */
		skip = cab->entry_cffolder->cfdata_offset_in_cab
			- cab->cab_offset;
		if (skip < 0) {
			int folder_index;
			switch (cab->entry_cffile->folder) {
			case iFoldCONTINUED_FROM_PREV:
			case iFoldCONTINUED_PREV_AND_NEXT:
				folder_index = 0;
				break;
			case iFoldCONTINUED_TO_NEXT:
				folder_index = cab->cfheader.folder_count-1;
				break;
			default:
				folder_index = cab->entry_cffile->folder;
				break;
			}
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid offset of CFDATA in folder(%d) %jd < %jd"",
			    folder_index,
			    (intmax_t)cab->entry_cffolder->cfdata_offset_in_cab,
			    (intmax_t)cab->cab_offset);
			return (ARCHIVE_FATAL);
		}
		if (skip > 0) {
			if (__archive_read_consume(a, skip) < 0)
				return (ARCHIVE_FATAL);
			cab->cab_offset =
			    cab->entry_cffolder->cfdata_offset_in_cab;
		}
	}

	/*
	 * Read a CFDATA.
	 */
	if (cab->entry_cffolder->cfdata_index <
	    cab->entry_cffolder->cfdata_count) {
		const unsigned char *p;
		int l;

		cfdata = &(cab->entry_cffolder->cfdata);
		cab->entry_cffolder->cfdata_index++;
		cab->entry_cfdata = cfdata;
		cfdata->sum_calculated = 0;
		cfdata->sum_extra_avail = 0;
		cfdata->sum_ptr = NULL;
		l = 8;
		if (cab->cfheader.flags & RESERVE_PRESENT)
			l += cab->cfheader.cfdata;
		if ((p = __archive_read_ahead(a, l, NULL)) == NULL)
			return (truncated_error(a));
		cfdata->sum = archive_le32dec(p + CFDATA_csum);
		cfdata->compressed_size = archive_le16dec(p + CFDATA_cbData);
		cfdata->compressed_bytes_remaining = cfdata->compressed_size;
		cfdata->uncompressed_size =
		    archive_le16dec(p + CFDATA_cbUncomp);
		cfdata->uncompressed_bytes_remaining =
		    cfdata->uncompressed_size;
		cfdata->uncompressed_avail = 0;
		cfdata->read_offset = 0;
		cfdata->unconsumed = 0;

		/*
		 * Sanity check if data size is acceptable.
		 */
		if (cfdata->compressed_size == 0 ||
		    cfdata->compressed_size > (0x8000+6144))
			goto invalid;
		if (cfdata->uncompressed_size > 0x8000)
			goto invalid;
		if (cfdata->uncompressed_size == 0) {
			switch (cab->entry_cffile->folder) {
			case iFoldCONTINUED_PREV_AND_NEXT:
			case iFoldCONTINUED_TO_NEXT:
				break;
			case iFoldCONTINUED_FROM_PREV:
			default:
				goto invalid;
			}
		}
		/* If CFDATA is not last in a folder, an uncompressed
		 * size must be 0x8000(32KBi) */
		if ((cab->entry_cffolder->cfdata_index <
		     cab->entry_cffolder->cfdata_count) &&
		       cfdata->uncompressed_size != 0x8000)
			goto invalid;

		/* A compressed data size and an uncompressed data size must
		 * be the same in no compression mode. */
		if (cab->entry_cffolder->comptype == COMPTYPE_NONE &&
		    cfdata->compressed_size != cfdata->uncompressed_size)
			goto invalid;

		/*
		 * Save CFDATA image for sum check.
		 */
		if (cfdata->memimage_size < (size_t)l) {
			free(cfdata->memimage);
			cfdata->memimage = malloc(l);
			if (cfdata->memimage == NULL) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for CAB data"");
				return (ARCHIVE_FATAL);
			}
			cfdata->memimage_size = l;
		}
		memcpy(cfdata->memimage, p, l);

		/* Consume bytes as much as we used. */
		__archive_read_consume(a, l);
		cab->cab_offset += l;
	} else if (cab->entry_cffolder->cfdata_count > 0) {
		/* Run out of all CFDATA in a folder. */
		cfdata->compressed_size = 0;
		cfdata->uncompressed_size = 0;
		cfdata->compressed_bytes_remaining = 0;
		cfdata->uncompressed_bytes_remaining = 0;
	} else {
		/* Current folder does not have any CFDATA. */
		cfdata = &(cab->entry_cffolder->cfdata);
		cab->entry_cfdata = cfdata;
		memset(cfdata, 0, sizeof(*cfdata));
	}
	return (ARCHIVE_OK);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CFDATA"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1652.cpp,"[16, 0, 0, 0, 4, 0, 7, 2, 6, 2, 20, 1, 5, 0, 1, 304, 0, 0, 6, 6, 0, 0, 2, 28, 0, 0, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 18, 16, 1, 0, 15, 0, 0, 38, 1, 32, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1652.cpp,140,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""=="", ""member"", ""member"", ""!="", ""&&"", ""member"", ""member"", ""constant"", "">"", ""member"", ""member"", ""<"", ""member"", ""constant"", ""!="", ""&&"", ""member"", ""null"", ""=="", ""member"", ""constant"", "">"", ""||"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(Or(constant_g_l > member_g_r,
                   member_e_l == null_e_r),
                And(Not(constant_e_l == member_e_r),
                    member_g_r < member_g_l)),
            constant_g_l > member_g_r),
        Not(member_e_l == null_e_r)),
    And(Not(member_e_l == member_e_r),
        macro_e_l == member_e_r))",351,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1606,"archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1657.cpp,"{
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1657.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1657.cpp,200,"[""member"", ""macro"", ""string""]","[""inflateReset_ret""]",Not(inflateReset_ret_e_l == null_e_r),352,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1617,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""CFDATA incorrect(no MSZIP signature)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1659.cpp,"{
	struct cab *cab = (struct cab *)(a->format->data);
	struct cfdata *cfdata;
	const void *d;
	int r, mszip;
	uint16_t uavail;
	char eod = 0;

	cfdata = cab->entry_cfdata;
	/* If the buffer hasn't been allocated, allocate it now. */
	if (cab->uncompressed_buffer == NULL) {
		cab->uncompressed_buffer_size = 0x8000;
		cab->uncompressed_buffer
		    = (unsigned char *)malloc(cab->uncompressed_buffer_size);
		if (cab->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}

	uavail = cfdata->uncompressed_avail;
	if (uavail == cfdata->uncompressed_size) {
		d = cab->uncompressed_buffer + cfdata->read_offset;
		*avail = uavail - cfdata->read_offset;
		return (d);
	}

	if (!cab->entry_cffolder->decompress_init) {
		cab->stream.next_in = NULL;
		cab->stream.avail_in = 0;
		cab->stream.total_in = 0;
		cab->stream.next_out = NULL;
		cab->stream.avail_out = 0;
		cab->stream.total_out = 0;
		if (cab->stream_valid)
			r = inflateReset(&cab->stream);
		else
			r = inflateInit2(&cab->stream,
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize deflate decompression."");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
		/* Stream structure has been set up. */
		cab->stream_valid = 1;
		/* We've initialized decompression for this stream. */
		cab->entry_cffolder->decompress_init = 1;
	}

	if (cfdata->compressed_bytes_remaining == cfdata->compressed_size)
		mszip = 2;
	else
		mszip = 0;
	eod = 0;
	cab->stream.total_out = uavail;
	/*
	 * We always uncompress all data in current CFDATA.
	 */
	while (!eod && cab->stream.total_out < cfdata->uncompressed_size) {
		ssize_t bytes_avail;

		cab->stream.next_out =
		    cab->uncompressed_buffer + cab->stream.total_out;
		cab->stream.avail_out =
		    cfdata->uncompressed_size - cab->stream.total_out;

		d = __archive_read_ahead(a, 1, &bytes_avail);
		if (bytes_avail <= 0) {
			*avail = truncated_error(a);
			return (NULL);
		}
		if (bytes_avail > cfdata->compressed_bytes_remaining)
			bytes_avail = cfdata->compressed_bytes_remaining;
		/*
		 * A bug in zlib.h: stream.next_in should be marked 'const'
		 * but isn't (the library never alters data through the
		 * next_in pointer, only reads it).  The result: this ugly
		 * cast to remove 'const'.
		 */
		cab->stream.next_in = (Bytef *)(uintptr_t)d;
		cab->stream.avail_in = (uInt)bytes_avail;
		cab->stream.total_in = 0;

		/* Cut out a tow-byte MSZIP signature(0x43, 0x4b). */
		if (mszip > 0) {
			if (bytes_avail <= 0)
				goto nomszip;
			if (bytes_avail <= mszip) {
				if (mszip == 2) {
					if (cab->stream.next_in[0] != 0x43)
						goto nomszip;
					if (bytes_avail > 1 &&
					    cab->stream.next_in[1] != 0x4b)
						goto nomszip;
				} else if (cab->stream.next_in[0] != 0x4b)
					goto nomszip;
				cfdata->unconsumed = bytes_avail;
				cfdata->sum_ptr = d;
				if (cab_minimum_consume_cfdata(
				    a, cfdata->unconsumed) < 0) {
					*avail = ARCHIVE_FATAL;
					return (NULL);
				}
				mszip -= (int)bytes_avail;
				continue;
			}
			if (mszip == 1 && cab->stream.next_in[0] != 0x4b)
				goto nomszip;
			else if (cab->stream.next_in[0] != 0x43 ||
			    cab->stream.next_in[1] != 0x4b)
				goto nomszip;
			cab->stream.next_in += mszip;
			cab->stream.avail_in -= mszip;
			cab->stream.total_in += mszip;
			mszip = 0;
		}

		r = inflate(&cab->stream, 0);
		switch (r) {
		case Z_OK:
			break;
		case Z_STREAM_END:
			eod = 1;
			break;
		default:
			goto zlibfailed;
		}
		cfdata->unconsumed = cab->stream.total_in;
		cfdata->sum_ptr = d;
		if (cab_minimum_consume_cfdata(a, cfdata->unconsumed) < 0) {
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}
	uavail = (uint16_t)cab->stream.total_out;

	if (uavail < cfdata->uncompressed_size) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid uncompressed size (%d < %d)"",
		    uavail, cfdata->uncompressed_size);
		*avail = ARCHIVE_FATAL;
		return (NULL);
	}

	/*
	 * Note: I suspect there is a bug in makecab.exe because, in rare
	 * case, compressed bytes are still remaining regardless we have
	 * gotten all uncompressed bytes, which size is recorded in CFDATA,
	 * as much as we need, and we have to use the garbage so as to
	 * correctly compute the sum of CFDATA accordingly.
	 */
	if (cfdata->compressed_bytes_remaining > 0) {
		ssize_t bytes_avail;

		d = __archive_read_ahead(a, cfdata->compressed_bytes_remaining,
		    &bytes_avail);
		if (bytes_avail <= 0) {
			*avail = truncated_error(a);
			return (NULL);
		}
		cfdata->unconsumed = cfdata->compressed_bytes_remaining;
		cfdata->sum_ptr = d;
		if (cab_minimum_consume_cfdata(a, cfdata->unconsumed) < 0) {
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}

	/*
	 * Set dictionary data for decompressing of next CFDATA, which
	 * in the same folder. This is why we always do decompress CFDATA
	 * even if beginning CFDATA or some of CFDATA are not used in
	 * skipping file data.
	 */
	if (cab->entry_cffolder->cfdata_index <
	    cab->entry_cffolder->cfdata_count) {
		r = inflateReset(&cab->stream);
		if (r != Z_OK)
			goto zlibfailed;
		r = inflateSetDictionary(&cab->stream,
		    cab->uncompressed_buffer, cfdata->uncompressed_size);
		if (r != Z_OK)
			goto zlibfailed;
	}

	d = cab->uncompressed_buffer + cfdata->read_offset;
	*avail = uavail - cfdata->read_offset;
	cfdata->uncompressed_avail = uavail;

	return (d);

zlibfailed:
	switch (r) {
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);
		break;
	}
	*avail = ARCHIVE_FATAL;
	return (NULL);
nomszip:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""CFDATA incorrect(no MSZIP signature)"");
	*avail = ARCHIVE_FATAL;
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1659.cpp,"[27, 1, 0, 0, 4, 1, 12, 2, 3, 2, 33, 2, 9, 0, 1, 446, 0, 0, 8, 9, 0, 0, 2, 46, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 30, 27, 2, 0, 19, 0, 0, 63, 2, 45, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1659.cpp,211,"[""member"", ""macro"", ""string""]","[""int"", ""int"", ""=="", ""member"", ""constant"", ""!="", ""&&"", ""member"", ""constant"", ""!="", ""member"", ""constant"", ""!="", ""member"", ""constant"", ""!="", ""member"", ""constant"", ""!="", ""||"", ""ssize_t"", ""null"", ""<="", ""ssize_t"", ""int"", "">"", ""member"", ""constant"", ""!="", ""&&"", ""&&"", ""&&"", ""&&"", ""&&"", ""&&""]","And(And(And(And(And(And(Not(constant_e_l == member_e_r),
                        int_g_l > ssize_t_g_r),
                    null_ge_r <= ssize_t_ge_l),
                Or(Not(constant_e_l == member_e_r),
                   Not(constant_e_l == member_e_r))),
            Not(constant_e_l == member_e_r)),
        Not(constant_e_l == member_e_r)),
    And(Not(constant_e_l == member_e_r), int_e_l == int_e_r))",353,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1670,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize LZX decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1662.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize LZX decompression."");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1662.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1662.cpp,34,"[""member"", ""macro"", ""string""]","[""lzx_decode_init_ret"", ""macro"", ""!=""]",Not(lzx_decode_init_ret_e_l == macro_e_r),354,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1711,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LZX decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1664.cpp,"{
		case ARCHIVE_OK:
		case ARCHIVE_EOF:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LZX decompression failed (%d)"", r);
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1664.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1664.cpp,75,"[""member"", ""macro"", ""string"", ""lzx_decode_ret""]","[""lzx_decode_ret""]",Not(lzx_decode_ret_e_l == null_e_r),355,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1940,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT, ""Invalid CFDATA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1666.cpp,"{
			/* All of CFDATA in a folder has been handled. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT, ""Invalid CFDATA"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1666.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1666.cpp,23,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""null"", ""=="", ""member"", ""null"", ""=="", ""&&""]","And(member_e_l == null_e_r, null_e_l == ssize_t_e_r)",356,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,209,"archive_set_error(&a->archive, -1, ""Size required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1672.cpp,"{
		archive_set_error(&a->archive, -1, ""Size required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1672.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1672.cpp,24,"[""member"", ""int"", ""string""]","[""archive_entry_hardlink_ret"", ""null"", ""=="", ""archive_entry_size_is_set_ret"", ""!"", ""archive_entry_size_ret"", ""null"", ""<"", ""||"", ""&&""]","And(Or(null_g_r < archive_entry_size_ret_g_l,
       Not(Not(archive_entry_size_is_set_ret_e_l == null_e_r))),
    archive_entry_hardlink_ret_e_l == null_e_r)",357,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,274,"archive_set_error(&a->archive, ERANGE,
		    ""large inode number truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1676.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""large inode number truncated"");
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1676.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1676.cpp,59,"[""member"", ""macro"", ""string""]","[""archive_entry_ino64_ret"", ""constant"", "">""]",constant_g_l > archive_entry_ino64_ret_g_r,358,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,323,"archive_set_error(&a->archive, ERANGE,
		    ""File is too large for this format."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1679.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File is too large for this format."");
		ret_final = ARCHIVE_FAILED;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1679.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1679.cpp,108,"[""member"", ""macro"", ""string""]","[""format_hex_ret""]",Not(format_hex_ret_e_l == null_e_r),359,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,404,"archive_set_error(&a->archive, ENAMETOOLONG,
		    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1689.cpp,"{
		/* Prefix is too long. */
		archive_set_error(&a->archive, ENAMETOOLONG,
		    ""Pathname too long"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1689.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1689.cpp,43,"[""member"", ""macro"", ""string""]","[""int"", ""!"", ""size_t"", ""unkown"", ""<="", ""&&"", ""!""]","Not(And(unkown_ge_r <= size_t_ge_l,
        Not(Not(int_e_l == null_e_r))))",360,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,441,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1694.cpp,"{
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");
			ret = ARCHIVE_FAILED;
			copy_length = V7TAR_linkname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1694.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1694.cpp,80,"[""member"", ""macro"", ""string""]","[""size_t"", ""unkown"", "">=""]",unkown_ge_l >= size_t_ge_r,361,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,245,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found entry with empty filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1707.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found entry with empty filename"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1707.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1707.cpp,79,"[""member"", ""macro"", ""string""]","[""int"", ""char *"", ""<""]",char *_g_r < int_g_l,362,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,262,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Filename table too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1708.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Filename table too large"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1708.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1708.cpp,96,"[""member"", ""macro"", ""string""]","[""ar_atol10_ret"", ""macro"", "">"", ""ar_atol10_ret"", ""int"", "">"", ""||""]","Or(int_g_l > ar_atol10_ret_g_r,
   macro_g_l > ar_atol10_ret_g_r)",363,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,268,"archive_set_error(&a->archive, EINVAL,
			    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1709.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Invalid string table"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1709.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1709.cpp,102,"[""member"", ""macro"", ""string""]","[""ar_atol10_ret"", ""null"", ""==""]",ar_atol10_ret_e_l == null_e_r,364,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,318,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1712.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1712.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1712.cpp,152,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ar_atol10_ret"", ""member"", "">="", ""||""]","Or(member_ge_l >= ar_atol10_ret_ge_r,
   member_e_l == null_e_r)",365,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,351,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Bad input file size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1713.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Bad input file size"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1713.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1713.cpp,185,"[""member"", ""macro"", ""string""]","[""ar_atol10_ret"", ""macro"", "">"", ""ar_atol10_ret"", ""int"", "">"", ""ar_atol10_ret"", ""member"", "">"", ""||"", ""||""]","Or(Or(member_g_l > ar_atol10_ret_g_r,
      int_g_l > ar_atol10_ret_g_r),
   macro_g_l > ar_atol10_ret_g_r)",366,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,516,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
					""Truncated ar archive- failed consuming padding"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1717.cpp,"{
				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
					""Truncated ar archive- failed consuming padding"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1717.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1717.cpp,38,"[""member"", ""macro"", ""string""]","[""int64_t"", ""null"", "">=""]",null_ge_l >= int64_t_ge_r,367,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,580,"archive_set_error(&a->archive, EINVAL,
	    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1718.cpp,"{
	struct ar *ar;
	char *p;
	size_t size;

	ar = (struct ar*)(a->format->data);
	size = ar->strtab_size;

	for (p = ar->strtab; p < ar->strtab + size - 1; ++p) {
		if (*p == '/') {
			*p++ = '\0';
			if (*p != '\n')
				goto bad_string_table;
			*p = '\0';
		}
	}
	/*
	 * GNU ar always pads the table to an even size.
	 * The pad character is either '\n' or '`'.
	 */
	if (p != ar->strtab + size && *p != '\n' && *p != '`')
		goto bad_string_table;

	/* Enforce zero termination. */
	ar->strtab[size - 1] = '\0';

	return (ARCHIVE_OK);

bad_string_table:
	archive_set_error(&a->archive, EINVAL,
	    ""Invalid string table"");
	free(ar->strtab);
	ar->strtab = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1718.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 1, 2, 0, 0, 61, 0, 0, 3, 3, 0, 0, 1, 10, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 4, 3, 0, 0, 2, 0, 0, 8, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1718.cpp,31,"[""member"", ""macro"", ""string""]","[""char"", ""member"", ""!="", ""char"", ""char"", ""!="", ""char"", ""char"", ""!="", ""&&"", ""&&"", ""char"", ""char"", ""!="", ""&&""]","And(Not(char_e_l == char_e_r),
    And(And(Not(char_e_l == char_e_r),
            Not(char_e_l == char_e_r)),
        Not(char_e_l == member_e_r)))",368,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,607,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"", hardlink,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1731.cpp,"{
		r = get_entry_hardlink(a, entry_original, &hardlink,
		    &hardlink_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"", hardlink,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1731.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1731.cpp,67,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""get_entry_hardlink_ret"", ""macro"", ""=="", ""!""]",Not(get_entry_hardlink_ret_e_l == macro_e_r),369,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,801,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1736.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1736.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1736.cpp,261,"[""member"", ""macro"", ""string""]","[""archive_entry_clone_ret"", ""null"", ""==""]",archive_entry_clone_ret_e_l == null_e_r,370,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,844,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"", path,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1737.cpp,"{
		r = get_entry_pathname(a, entry_main, &path,
		    &path_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"", path,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1737.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1737.cpp,304,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""get_entry_pathname_ret"", ""macro"", ""=="", ""!""]",Not(get_entry_pathname_ret_e_l == macro_e_r),371,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,857,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"", uname,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1738.cpp,"{
		r = get_entry_uname(a, entry_main, &uname, &uname_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"", uname,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1738.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1738.cpp,317,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""get_entry_uname_ret"", ""macro"", ""=="", ""!""]",Not(get_entry_uname_ret_e_l == macro_e_r),372,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,870,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"", gname,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1739.cpp,"{
		r = get_entry_gname(a, entry_main, &gname, &gname_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"", gname,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1739.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1739.cpp,330,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""get_entry_gname_ret"", ""macro"", ""=="", ""!""]",Not(get_entry_gname_ret_e_l == macro_e_r),373,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,888,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"", linkpath,
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1740.cpp,"{
			r = get_entry_symlink(a, entry_main, &linkpath,
			    &linkpath_length, NULL);
			if (r == ARCHIVE_FATAL)
				return (r);
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"", linkpath,
			    archive_string_conversion_charset_name(sconv));
			ret = ARCHIVE_WARN;
			sconv = NULL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1740.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1740.cpp,348,"[""member"", ""macro"", ""string"", ""const char *"", ""archive_string_conversion_charset_name_ret""]","[""get_entry_symlink_ret"", ""macro"", ""=="", ""!""]",Not(get_entry_symlink_ret_e_l == macro_e_r),374,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1215,"archive_string_sprintf(&(pax->sparse_map), ""%d\n"",
			    sparse_count);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1741.cpp,"{
			int64_t soffset, slength;

			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.major"", 1);
			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.minor"", 0);
			add_pax_attr(&(pax->pax_header),
			    ""GNU.sparse.name"", entry_name.s);
			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.realsize"",
			    archive_entry_size(entry_main));

			/* Rename the file name which will be used for
			 * ustar header to a special name, which GNU
			 * PAX Format 1.0 requires */
			archive_entry_set_pathname(entry_main,
			    build_gnu_sparse_name(gnu_sparse_name,
			        entry_name.s));

			/*
			 * - Make a sparse map, which will precede a file data.
			 * - Get the total size of available data of sparse.
			 */
			archive_string_sprintf(&(pax->sparse_map), ""%d\n"",
			    sparse_count);
			while (archive_entry_sparse_next(entry_main,
			    &soffset, &slength) == ARCHIVE_OK) {
				archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);
				sparse_total += slength;
				if (sparse_list_add(pax, soffset, slength)
				    != ARCHIVE_OK) {
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}
			}
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1741.cpp,"[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 66, 0, 0, 1, 2, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 14, 0, 0, 11, 0, 35, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1741.cpp,675,"[""member"", ""string"", ""archive_entry_sparse_reset_ret""]","[""archive_entry_sparse_reset_ret"", ""null"", "">""]",null_g_l > archive_entry_sparse_reset_ret_g_r,375,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1219,"archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1742.cpp,"{
				archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);
				sparse_total += slength;
				if (sparse_list_add(pax, soffset, slength)
				    != ARCHIVE_OK) {
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1742.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1742.cpp,679,"[""member"", ""string"", ""int64_t"", ""int64_t""]","[""archive_entry_sparse_next_ret"", ""macro"", ""==""]",archive_entry_sparse_next_ret_e_l == macro_e_r,376,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1226,"archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1743.cpp,"{
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1743.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1743.cpp,686,"[""member"", ""macro"", ""string""]","[""sparse_list_add_ret"", ""macro"", ""!=""]",Not(macro_e_l == sparse_list_add_ret_e_r),377,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1374,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""archive_write_pax_header: ""
			    ""'x' header failed?!  This can't happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1744.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""archive_write_pax_header: ""
			    ""'x' header failed?!  This can't happen.\n"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1744.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1744.cpp,834,[],"[""__archive_write_format_header_ustar_ret"", ""macro"", ""<""]",macro_g_r < __archive_write_format_header_ustar_ret_g_l,378,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1636,"sprintf(buff, ""PaxHeader.%d"", getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1745.cpp,"{
	char buff[64];
	const char *p;

	/* Handle the null filename case. */
	if (src == NULL || *src == '\0') {
		strcpy(dest, ""PaxHeader/blank"");
		return (dest);
	}

	/* Prune final '/' and other unwanted final elements. */
	p = src + strlen(src);
	for (;;) {
		/* Ends in ""/"", remove the '/' */
		if (p > src && p[-1] == '/') {
			--p;
			continue;
		}
		/* Ends in ""/."", remove the '.' */
		if (p > src + 1 && p[-1] == '.'
		    && p[-2] == '/') {
			--p;
			continue;
		}
		break;
	}

	/* Pathological case: After above, there was nothing left.
	 * This includes ""/."" ""/./."" ""/.//./."" etc. */
	if (p == src) {
		strcpy(dest, ""/PaxHeader/rootdir"");
		return (dest);
	}

	/* Convert unadorned ""."" into a suitable filename. */
	if (*src == '.' && p == src + 1) {
		strcpy(dest, ""PaxHeader/currentdir"");
		return (dest);
	}

	/*
	 * TODO: Push this string into the 'pax' structure to avoid
	 * recomputing it every time.  That will also open the door
	 * to having clients override it.
	 */
#if HAVE_GETPID && 0  /* Disable this for now; see above comment. */
	sprintf(buff, ""PaxHeader.%d"", getpid());
#else
	/* If the platform can't fetch the pid, don't include it. */
	strcpy(buff, ""PaxHeader"");
#endif
	/* General case: build a ustar-compatible name adding
	 * ""/PaxHeader/"". */
	build_ustar_entry_name(dest, src, p - src, buff);

	return (dest);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1745.cpp,"[6, 0, 1, 0, 1, 2, 4, 0, 0, 0, 7, 0, 0, 0, 1, 51, 0, 0, 2, 2, 0, 0, 1, 17, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 6, 5, 1, 0, 8, 0, 0, 9, 0, 16, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1745.cpp,48,"[""char *"", ""string"", ""getpid_ret""]","[""const char *"", ""char"", ""=="", ""strlen_ret"", ""const char *"", ""=="", ""&&"", ""!""]","Not(And(const char *_e_l == strlen_ret_e_r,
        char_e_l == const char *_e_r))",379,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1685,"sprintf(buff, ""GNUSparseFile.%d"", getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1746.cpp,"{
	char buff[64];
	const char *p;

	/* Handle the null filename case. */
	if (src == NULL || *src == '\0') {
		strcpy(dest, ""GNUSparseFile/blank"");
		return (dest);
	}

	/* Prune final '/' and other unwanted final elements. */
	p = src + strlen(src);
	for (;;) {
		/* Ends in ""/"", remove the '/' */
		if (p > src && p[-1] == '/') {
			--p;
			continue;
		}
		/* Ends in ""/."", remove the '.' */
		if (p > src + 1 && p[-1] == '.'
		    && p[-2] == '/') {
			--p;
			continue;
		}
		break;
	}

#if HAVE_GETPID && 0  /* Disable this as pax attribute name. */
	sprintf(buff, ""GNUSparseFile.%d"", getpid());
#else
	/* If the platform can't fetch the pid, don't include it. */
	strcpy(buff, ""GNUSparseFile"");
#endif
	/* General case: build a ustar-compatible name adding
	 * ""/GNUSparseFile/"". */
	build_ustar_entry_name(dest, src, p - src, buff);

	return (dest);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1746.cpp,"[4, 0, 1, 0, 1, 2, 2, 0, 0, 0, 5, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 1, 13, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 4, 3, 1, 0, 6, 0, 0, 7, 0, 12, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1746.cpp,30,"[""char *"", ""string"", ""getpid_ret""]","[""const char *"", ""null"", ""=="", ""const char *"", ""char"", ""=="", ""||"", ""!""]","Not(Or(char_e_l == const char *_e_r,
       const char *_e_l == null_e_r))",380,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/inet.cpp,138,"tp += sprintf(tp, ""%x"", words[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1749.cpp,"{
    /* Are we inside the best run of 0x00's? */
    if (best.base != -1 && i >= best.base &&
        i < (best.base + best.len)) {
      if (i == best.base)
        *tp++ = ':';
      continue;
    }
    /* Are we following an initial run of 0x00s or any real hex? */
    if (i != 0)
      *tp++ = ':';
    /* Is this address an encapsulated IPv4? */
    if (i == 6 && best.base == 0 && (best.len == 6 ||
        (best.len == 7 && words[7] != 0x0001) ||
        (best.len == 5 && words[5] == 0xffff))) {
      int err = inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp));
      if (err)
        return err;
      tp += strlen(tp);
      break;
    }
    tp += sprintf(tp, ""%x"", words[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1749.cpp,"[5, 0, 0, 0, 1, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 57, 0, 0, 1, 1, 0, 0, 1, 15, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 5, 5, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1749.cpp,71,"[""sprintf_ret"", ""string"", ""member""]","[""null"", ""int"", ""=="", ""member"", ""null"", ""=="", ""member"", ""int"", ""=="", ""member"", ""int"", ""=="", ""member"", ""constant"", ""!="", ""&&"", ""member"", ""int"", ""=="", ""member"", ""constant"", ""=="", ""&&"", ""||"", ""||"", ""&&"", ""&&"", ""!""]","Not(And(And(Or(Or(And(constant_e_l == member_e_r,
                      int_e_l == member_e_r),
                  And(Not(constant_e_l == member_e_r),
                      int_e_l == member_e_r)),
               int_e_l == member_e_r),
            member_e_l == null_e_r),
        int_e_l == null_e_r))",381,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/sunos.cpp,350,"snprintf(buf, sizeof(buf), ""/proc/%lu/path/a.out"", (unsigned long) getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1757.cpp,"{
  ssize_t res;
  char buf[128];

  if (buffer == NULL || size == NULL || *size == 0)
    return -EINVAL;

  snprintf(buf, sizeof(buf), ""/proc/%lu/path/a.out"", (unsigned long) getpid());

  res = *size - 1;
  if (res > 0)
    res = readlink(buf, buffer, res);

  if (res == -1)
    return -errno;

  buffer[res] = '\0';
  *size = res;
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1757.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1757.cpp,7,"[""char *"", ""unkown"", ""string"", ""getpid_ret""]","[""char *"", ""null"", ""=="", ""size_t *"", ""null"", ""=="", ""size_t *"", ""null"", ""=="", ""||"", ""||"", ""!""]","Not(Or(Or(null_e_l == size_t *_e_r,
          null_e_l == size_t *_e_r),
       char *_e_l == null_e_r))",382,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/fs.cpp,188,"snprintf(path, sizeof(path), ""/proc/self/fd/%d"", (int) req->file);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1758.cpp,"{
#if defined(__linux__)
  /* utimesat() has nanosecond resolution but we stick to microseconds
   * for the sake of consistency with other platforms.
   */
  static int no_utimesat;
  struct timespec ts[2];
  struct timeval tv[2];
  char path[sizeof(""/proc/self/fd/"") + 3 * sizeof(int)];
  int r;

  if (no_utimesat)
    goto skip;

  ts[0].tv_sec  = req->atime;
  ts[0].tv_nsec = (uint64_t)(req->atime * 1000000) % 1000000 * 1000;
  ts[1].tv_sec  = req->mtime;
  ts[1].tv_nsec = (uint64_t)(req->mtime * 1000000) % 1000000 * 1000;

  r = uv__utimesat(req->file, NULL, ts, 0);
  if (r == 0)
    return r;

  if (errno != ENOSYS)
    return r;

  no_utimesat = 1;

skip:

  tv[0].tv_sec  = req->atime;
  tv[0].tv_usec = (uint64_t)(req->atime * 1000000) % 1000000;
  tv[1].tv_sec  = req->mtime;
  tv[1].tv_usec = (uint64_t)(req->mtime * 1000000) % 1000000;
  snprintf(path, sizeof(path), ""/proc/self/fd/%d"", (int) req->file);

  r = utimes(path, tv);
  if (r == 0)
    return r;

  switch (errno) {
  case ENOENT:
    if (fcntl(req->file, F_GETFL) == -1 && errno == EBADF)
      break;
    /* Fall through. */

  case EACCES:
  case ENOTDIR:
    errno = ENOSYS;
    break;
  }

  return r;

#elif defined(__APPLE__)                                                      \
    || defined(__DragonFly__)                                                 \
    || defined(__FreeBSD__)                                                   \
    || defined(__FreeBSD_kernel__)                                            \
    || defined(__NetBSD__)                                                    \
    || defined(__OpenBSD__)                                                   \
    || defined(__sun)
  struct timeval tv[2];
  tv[0].tv_sec  = req->atime;
  tv[0].tv_usec = (uint64_t)(req->atime * 1000000) % 1000000;
  tv[1].tv_sec  = req->mtime;
  tv[1].tv_usec = (uint64_t)(req->mtime * 1000000) % 1000000;
# if defined(__sun)
  return futimesat(req->file, NULL, tv);
# else
  return futimes(req->file, tv);
# endif
#elif defined(_AIX71)
  struct timespec ts[2];
  ts[0].tv_sec  = req->atime;
  ts[0].tv_nsec = (uint64_t)(req->atime * 1000000) % 1000000 * 1000;
  ts[1].tv_sec  = req->mtime;
  ts[1].tv_nsec = (uint64_t)(req->mtime * 1000000) % 1000000 * 1000;
  return futimens(req->file, ts);
#elif defined(__MVS__)
  attrib_t atr;
  memset(&atr, 0, sizeof(atr));
  atr.att_mtimechg = 1;
  atr.att_atimechg = 1;
  atr.att_mtime = req->mtime;
  atr.att_atime = req->atime;
  return __fchattr(req->file, &atr, sizeof(atr));
#else
  errno = ENOSYS;
  return -1;
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1758.cpp,"[7, 0, 0, 0, 2, 0, 9, 1, 3, 0, 7, 1, 1, 0, 1, 244, 0, 0, 8, 8, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 120, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 21, 0, 6, 5, 2, 0, 33, 0, 0, 27, 0, 49, 9, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1758.cpp,34,"[""char *"", ""unkown"", ""string"", ""member""]","[""int"", ""unkown"", ""macro"", ""!="", ""!"", ""&&""]","And(Not(Not(macro_e_l == unkown_e_r)),
    Not(int_e_l == null_e_r))",383,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,840,"snprintf(absolute_path, sizeof(absolute_path), ""%s%s"", readlink_cwd,
             filename + str_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1769.cpp,"{
    /* We have a relative pathname, compose the absolute pathname */
    snprintf(cwd, sizeof(cwd), ""/proc/%lu/cwd"", (unsigned long) getpid());
    rc = readlink(cwd, readlink_cwd, sizeof(readlink_cwd) - 1);
    if (rc < 0)
      return rc;
    /* readlink does not null terminate our string */
    readlink_cwd[rc] = '\0';

    if (filename[0] == '.' && filename[1] == '/')
      str_offset = 2;

    snprintf(absolute_path, sizeof(absolute_path), ""%s%s"", readlink_cwd,
             filename + str_offset);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1769.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 26, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 7, 0, 0, 5, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1769.cpp,27,"[""char *"", ""unkown"", ""string"", ""char *"", ""const char *""]","[""readlink_ret"", ""null"", ""<"", ""!""]",Not(null_g_r < readlink_ret_g_l),384,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/async.cpp,179,"snprintf(buf, sizeof(buf), ""/proc/self/fd/%d"", pipefd[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1771.cpp,"{
      char buf[32];
      int fd;

      snprintf(buf, sizeof(buf), ""/proc/self/fd/%d"", pipefd[0]);
      fd = uv__open_cloexec(buf, O_RDWR);
      if (fd >= 0) {
        uv__close(pipefd[0]);
        uv__close(pipefd[1]);
        pipefd[0] = fd;
        pipefd[1] = fd;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1771.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 2, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 22, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 1, 1, 0, 0, 5, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1771.cpp,23,"[""char *"", ""unkown"", ""string"", ""member""]","[""uv__make_pipe_ret"", ""null"", ""==""]",null_e_l == uv__make_pipe_ret_e_r,385,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,68,"printf(""%4"" PRIu32, rc_prices[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1776.cpp,"{
		if (i % 8 == 0)
			printf(""\n\t"");

		printf(""%4"" PRIu32, rc_prices[i]);

		if (i != array_size - 1)
			printf("","");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1776.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1776.cpp,15,[],"[""null"", ""const size_t"", ""<""]",const size_t_g_r < null_g_l,386,1,,,,,
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,71,"printf("","");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1777.cpp,"printf("","")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1777.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1777.cpp,18,"[""string""]","[""null"", ""const size_t"", ""!=""]",Not(const size_t_e_l == null_e_r),387,1,,,,,
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,172,"fprintf(out, ""%s \\\n"", tmp.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1805.cpp,"{
    tmp = *it;
    // The paths need to match the ones used to identify build artifacts in the
    // build.ninja file.  Therefore we need to canonicalize the path to use
    // backward slashes and relativize the path to the build directory.
    replaceAll(tmp, ""/"", ""\\"");
    if (startsWith(tmp, cwd))
      tmp = tmp.substr(cwd.size());
    escapePath(tmp);
    fprintf(out, ""%s \\\n"", tmp.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1805.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1805.cpp,34,"[""FILE *"", ""string"", ""tmp . c_str_ret""]","[""std :: vector < std :: string > :: iterator"", ""incs . end_ret"", ""!=""]","Not(incs . end_ret_e_l ==
    std :: vector < std :: string > :: iterator_e_r)",388,1,,,,,
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2012,"YY_FATAL_ERROR( ""bad buffer in cmListFileLexer_yy_scan_bytes()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1819.cpp,"YY_FATAL_ERROR( ""bad buffer in cmListFileLexer_yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1819.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1819.cpp,20,"[""string""]","[""cmListFileLexer_yy_scan_buffer_ret"", ""!""]",Not(Not(cmListFileLexer_yy_scan_buffer_ret_e_l == null_e_r)),389,1,,,,,
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,463,"_snprintf(message, KWSYS_SHARED_FORWARD_MAXPATH,
              ""Error 0x%X (FormatMessage failed with error 0x%X)"", original,
              GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1823.cpp,"{
    /* FormatMessage failed.  Use a default message.  */
    _snprintf(message, KWSYS_SHARED_FORWARD_MAXPATH,
              ""Error 0x%X (FormatMessage failed with error 0x%X)"", original,
              GetLastError());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1823.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1823.cpp,11,"[""char *"", ""macro"", ""string"", ""DWORD"", ""GetLastError_ret""]","[""DWORD"", ""int"", ""<"", ""DWORD"", ""macro"", "">"", ""||""]","Or(macro_g_l > DWORD_g_r, int_g_r < DWORD_g_l)",390,1,,,,,
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,698,"fprintf(stderr, ""Error converting self path \""%s\"" to real path: %s\n"",
            self_path, msgbuf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1825.cpp,"{
    char msgbuf[KWSYS_SHARED_FORWARD_MAXPATH];
    kwsys_shared_forward_strerror(msgbuf);
    fprintf(stderr, ""Error converting self path \""%s\"" to real path: %s\n"",
            self_path, msgbuf);
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1825.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1825.cpp,28,"[""unkown"", ""string"", ""const char *"", ""char *""]","[""kwsys_shared_forward_realpath_ret"", ""!""]",Not(Not(kwsys_shared_forward_realpath_ret_e_l == null_e_r)),391,1,,,,,
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,856,"fprintf(stderr, ""Error locating executable \""%s\"".\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1833.cpp,"{
    /* Could not find this executable.  */
    fprintf(stderr, ""Error locating executable \""%s\"".\n"", argv[0]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1833.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1833.cpp,79,"[""unkown"", ""string"", ""member""]","[""kwsys_shared_forward_self_path_ret"", ""!""]",Not(Not(kwsys_shared_forward_self_path_ret_e_l == null_e_r)),392,1,,,,,
second/download/CMake/CMake/CMake/Source/CursesDialog/form/fty_int.cpp,119,"sprintf(buf,""%.*ld"",(prec>0?prec:0),val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1835.cpp,"{
	  val = atol(s);
	  if (low<high)
	    {
	      if (val<low || val>high) return FALSE;
	    }
	  sprintf(buf,""%.*ld"",(prec>0?prec:0),val);
	  set_field_buffer(field,0,buf);
	  return TRUE;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1835.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1835.cpp,28,"[""char *"", ""string"", ""int"", ""atol_ret""]","[""atol_ret"", ""long"", ""<"", ""atol_ret"", ""long"", "">"", ""||"", ""!"", ""long"", ""long"", ""<"", ""!"", ""&&""]","And(Not(long_g_r < long_g_l),
    Not(Or(long_g_l > atol_ret_g_r, long_g_r < atol_ret_g_l)))",393,1,,,,,
second/download/CMake/CMake/CMake/Source/CursesDialog/form/fty_num.cpp,142,"sprintf(buf,""%.*f"",(prec>0?prec:0),val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1836.cpp,"{
	  val = atof(s);
	  if (low<high)
	    {
	      if (val<low || val>high) return FALSE;
	    }
	  sprintf(buf,""%.*f"",(prec>0?prec:0),val);
	  set_field_buffer(field,0,buf);
	  return TRUE;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1836.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1836.cpp,42,"[""char *"", ""string"", ""int"", ""atof_ret""]","[""atof_ret"", ""double"", ""<"", ""atof_ret"", ""double"", "">"", ""||"", ""!"", ""double"", ""double"", ""<"", ""!"", ""&&""]","And(Not(double_g_r < double_g_l),
    Not(Or(double_g_l > atof_ret_g_r,
           double_g_r < atof_ret_g_l)))",394,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,236,"fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1841.cpp,"{
    fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1841.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1841.cpp,3,"[""FILE *"", ""macro""]","[""int"", ""unkown"", ""==""]",int_e_l == unkown_e_r,395,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,2787,"sprintf(sn, ""%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x"",
          ((SerialNumber[1] & 0xff000000) >> 24),
          ((SerialNumber[1] & 0x00ff0000) >> 16),
          ((SerialNumber[1] & 0x0000ff00) >> 8),
          ((SerialNumber[1] & 0x000000ff) >> 0),
          ((SerialNumber[2] & 0xff000000) >> 24),
          ((SerialNumber[2] & 0x00ff0000) >> 16),
          ((SerialNumber[2] & 0x0000ff00) >> 8),
          ((SerialNumber[2] & 0x000000ff) >> 0),
          ((SerialNumber[3] & 0xff000000) >> 24),
          ((SerialNumber[3] & 0x00ff0000) >> 16),
          ((SerialNumber[3] & 0x0000ff00) >> 8),
          ((SerialNumber[3] & 0x000000ff) >> 0));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1860.cpp,"{
  // Check to see if the processor supports the processor serial number.
  if (!this->Features.HasSerial) {
    return false;
  }

#if USE_CPUID
  int SerialNumber[4];

  if (!call_cpuid(3, SerialNumber)) {
    return false;
  }

  // Process the returned information.
  //    ; eax = 3 --> ebx: top 32 bits are the processor signature bits --> NB:
  //    Transmeta only ?!?
  //    ;        ecx: middle 32 bits are the processor signature bits
  //    ;        edx: bottom 32 bits are the processor signature bits
  char sn[128];
  sprintf(sn, ""%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x"",
          ((SerialNumber[1] & 0xff000000) >> 24),
          ((SerialNumber[1] & 0x00ff0000) >> 16),
          ((SerialNumber[1] & 0x0000ff00) >> 8),
          ((SerialNumber[1] & 0x000000ff) >> 0),
          ((SerialNumber[2] & 0xff000000) >> 24),
          ((SerialNumber[2] & 0x00ff0000) >> 16),
          ((SerialNumber[2] & 0x0000ff00) >> 8),
          ((SerialNumber[2] & 0x000000ff) >> 0),
          ((SerialNumber[3] & 0xff000000) >> 24),
          ((SerialNumber[3] & 0x00ff0000) >> 16),
          ((SerialNumber[3] & 0x0000ff00) >> 8),
          ((SerialNumber[3] & 0x000000ff) >> 0));
  this->ChipID.SerialNumber = sn;
  return true;

#else
  return false;
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1860.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 2, 2, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1860.cpp,20,"[""char *"", ""string"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool"", ""bool""]","[""call_cpuid_ret"", ""!"", ""!""]",Not(Not(Not(call_cpuid_ret_e_l == null_e_r))),396,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5204,"sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1861.cpp,"{
        if (osvi.wProductType == VER_NT_WORKSTATION) {
          if (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 0) {
            this->OSRelease = ""Vista"";
          }
          if (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 1) {
            this->OSRelease = ""7"";
          }
// VER_SUITE_PERSONAL may not be defined
#ifdef VER_SUITE_PERSONAL
          else {
            if (osvi.wSuiteMask & VER_SUITE_PERSONAL) {
              this->OSRelease += "" Personal"";
            } else {
              this->OSRelease += "" Professional"";
            }
          }
#endif
        } else if (osvi.wProductType == VER_NT_SERVER) {
          // Check for .NET Server instead of Windows XP.
          if (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1) {
            this->OSRelease = "".NET"";
          }

          // Continue with the type detection.
          if (osvi.wSuiteMask & VER_SUITE_DATACENTER) {
            this->OSRelease += "" DataCenter Server"";
          } else if (osvi.wSuiteMask & VER_SUITE_ENTERPRISE) {
            this->OSRelease += "" Advanced Server"";
          } else {
            this->OSRelease += "" Server"";
          }
        }

        sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1861.cpp,"[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 0, 1, 0, 0, 10, 2, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1861.cpp,85,"[""char *"", ""string"", ""member"", ""bool""]","[""GetVersionExW_ret""]",Not(GetVersionExW_ret_e_l == null_e_r),397,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5248,"sprintf(operatingSystem, ""version %ld.%ld %ls (Build %ld)"",
                osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1862.cpp,"{
        // NB: NT 4.0 and earlier.
        sprintf(operatingSystem, ""version %ld.%ld %ls (Build %ld)"",
                osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1862.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1862.cpp,129,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""bool""]","[""member"", ""int"", ""<=""]",int_ge_r <= member_ge_l,398,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/ProcessUNIX.cpp,2525,"sprintf(fname, ""/proc/%d/stat"", pid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1868.cpp,"{
        struct stat finfo;
        sprintf(fname, ""/proc/%d/stat"", pid);
        if (stat(fname, &finfo) == 0) {
          FILE* f = fopen(fname, ""r"");
          if (f) {
            size_t nread = fread(buffer, 1, KWSYSPE_PIPE_BUFFER_SIZE, f);
            fclose(f);
            buffer[nread] = '\0';
            if (nread > 0) {
              const char* rparen = strrchr(buffer, ')');
              int ppid;
              if (rparen && (sscanf(rparen + 1, ""%*s %d"", &ppid) == 1)) {
                if (ppid == process_id) {
                  /* Recursively kill this child and its children.  */
                  kwsysProcessKill(pid);
                }
              }
            }
          }
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1868.cpp,"[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 41, 0, 0, 5, 5, 0, 0, 3, 10, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 4, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1868.cpp,41,"[""char *"", ""string"", ""int""]","[""sscanf_ret"", ""int"", ""=="", ""int"", ""null"", ""!="", ""&&""]","And(Not(int_e_l == null_e_r), int_e_l == sscanf_ret_e_r)",399,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/ProcessWin32.cpp,1868,"_snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""FormatMessage failed with error 0x%X"",
                  error, GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1869.cpp,"{
        /* FormatMessage failed.  Use a default message.  */
        _snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""FormatMessage failed with error 0x%X"",
                  error, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1869.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1869.cpp,15,[],"[""DWORD"", ""int"", ""<""]",int_g_r < DWORD_g_l,400,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/ProcessWin32.cpp,1876,"_snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""WideCharToMultiByte failed with error 0x%X"",
                  error, GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1870.cpp,"{
        /* WideCharToMultiByte failed.  Use a default message.  */
        _snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""WideCharToMultiByte failed with error 0x%X"",
                  error, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1870.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1870.cpp,23,[],"[""WideCharToMultiByte_ret"", ""!""]",Not(Not(WideCharToMultiByte_ret_e_l == null_e_r)),401,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,404,"fprintf(stdout, ""WaitForData timeout reached.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1914.cpp,"{
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if (++poll >= MAXPOLL) {
            fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);
            kwsysProcess_Kill(kp);
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1914.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1914.cpp,40,"[""unkown"", ""string""]","[""int"", ""kwsysProcess_WaitForData_ret"", ""unkown"", ""=="", ""&&""]","And(kwsysProcess_WaitForData_ret_e_l == unkown_e_r,
    Not(int_e_l == null_e_r))",402,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,410,"fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1915.cpp,"{
            fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);
            kwsysProcess_Kill(kp);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1915.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1915.cpp,46,"[""unkown"", ""string"", ""macro""]","[""int"", ""macro"", "">=""]",macro_ge_l >= int_ge_r,403,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,472,"fprintf(stderr, ""Mismatch in exit exception.  ""
                      ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1924.cpp,"{
      fprintf(stderr, ""Mismatch in exit exception.  ""
                      ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1924.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1924.cpp,108,[],"[""int"", ""kwsysProcess_GetExitException_ret"", ""!=""]",Not(int_e_l == kwsysProcess_GetExitException_ret_e_r),404,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,477,"fprintf(stderr, ""Mismatch in exit value.  ""
                      ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1925.cpp,"{
      fprintf(stderr, ""Mismatch in exit value.  ""
                      ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1925.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1925.cpp,113,[],"[""int"", ""kwsysProcess_GetExitValue_ret"", ""!=""]",Not(int_e_l == kwsysProcess_GetExitValue_ret_e_r),405,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,484,"fprintf(stderr, ""Mismatch in state.  ""
                    ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1926.cpp,"{
    fprintf(stderr, ""Mismatch in state.  ""
                    ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1926.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1926.cpp,120,[],"[""kwsysProcess_GetState_ret"", ""int"", ""!=""]",Not(int_e_l == kwsysProcess_GetState_ret_e_r),406,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,493,"fprintf(stderr, ""Poll count is %d, which is less than %d.\n"", poll,
            MINPOLL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1927.cpp,"{
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"", poll,
            MINPOLL);
    result = 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1927.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1927.cpp,129,"[""unkown"", ""string"", ""int"", ""macro""]","[""int"", ""int"", ""macro"", ""<"", ""&&""]","And(macro_g_r < int_g_l, Not(int_e_l == null_e_r))",407,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,535,"fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1928.cpp,"{
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1928.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1928.cpp,7,"[""unkown"", ""string""]","[""kwsysProcess *"", ""!""]",Not(Not(kwsysProcess *_e_l == null_e_r)),408,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,617,"fprintf(stderr, ""Invalid test number %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1929.cpp,"{
    /* This is the child process for a requested test number.  */
    switch (n) {
      case 1:
        return test1(argc, argv);
      case 2:
        return test2(argc, argv);
      case 3:
        return test3(argc, argv);
      case 4:
        return test4(argc, argv);
      case 5:
        return test5(argc, argv);
      case 6:
        test6(argc, argv);
        return 0;
      case 7:
        return test7(argc, argv);
      case 8:
        return test8(argc, argv);
      case 9:
        return test9(argc, argv);
      case 10:
        return test10(argc, argv);
      case 108:
        return test8_grandchild(argc, argv);
      case 109:
        return test9_grandchild(argc, argv);
      case 110:
        return test10_grandchild(argc, argv);
    }
    fprintf(stderr, ""Invalid test number %d.\n"", n);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1929.cpp,"[0, 0, 0, 0, 0, 0, 14, 1, 13, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 2, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1929.cpp,68,"[""unkown"", ""string"", ""atoi_ret""]","[""atoi_ret""]",Not(atoi_ret_e_l == null_e_r),409,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,707,"fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1934.cpp,"{
    /* Improper usage.  */
    fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1934.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1934.cpp,158,"[""unkown"", ""string"", ""member""]","[""int"", ""int"", "">"", ""strcmp_ret"", ""null"", ""=="", ""&&"", ""!""]","Not(And(null_e_l == strcmp_ret_e_r, int_g_l > int_g_r))",410,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,350,"printf(""RegularExpression::compile(): Error in compile.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1938.cpp,"{
    printf(""RegularExpression::compile(): Error in compile.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1938.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1938.cpp,20,"[""string""]","[""reg_ret"", ""!""]",Not(Not(null_e_l == reg_ret_e_r)),411,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,358,"printf(""RegularExpression::compile(): Expression too big.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1939.cpp,"{ // Probably could be 65535L.
    // RAISE Error, SYM(RegularExpression), SYM(Expr_Too_Big),
    printf(""RegularExpression::compile(): Expression too big.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1939.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1939.cpp,28,"[""string""]","[""constant"", ""constant"", "">=""]",constant_ge_l >= constant_ge_r,412,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,444,"printf(""RegularExpression::compile(): Too many parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1941.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Too_Many_Parens),
      printf(""RegularExpression::compile(): Too many parentheses.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1941.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1941.cpp,14,"[""string""]","[""unkown"", ""unkown"", "">=""]",unkown_ge_l >= unkown_ge_r,413,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,486,"printf(""RegularExpression::compile(): Unmatched parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1942.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Parens),
    printf(""RegularExpression::compile(): Unmatched parentheses.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1942.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1942.cpp,56,"[""string""]","[""int"", ""unkown"", ""char"", ""!="", ""&&""]","And(Not(char_e_l == unkown_e_r), Not(int_e_l == null_e_r))",414,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,491,"printf(""RegularExpression::compile(): Unmatched parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1943.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Parens),
      printf(""RegularExpression::compile(): Unmatched parentheses.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1943.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1943.cpp,61,"[""string""]","[""int"", ""char"", ""==""]",char_e_l == int_e_r,415,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,495,"printf(""RegularExpression::compile(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1944.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
      printf(""RegularExpression::compile(): Internal error.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1944.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1944.cpp,65,"[""string""]","[""int"", ""char"", ""=="", ""!""]",Not(char_e_l == int_e_r),416,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,564,"printf(""RegularExpression::compile() : *+ operand could be empty.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1945.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Empty_Operand),
    printf(""RegularExpression::compile() : *+ operand could be empty.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1945.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1945.cpp,19,"[""string""]","[""bool"", ""!"", ""unkown"", ""char"", ""!="", ""&&""]","And(Not(char_e_l == unkown_e_r),
    Not(Not(bool_e_l == null_e_r)))",417,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,598,"printf(""RegularExpression::compile(): Nested *?+.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1946.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Nested_Operand),
    printf(""RegularExpression::compile(): Nested *?+.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1946.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1946.cpp,53,"[""string""]","[""ISMULT_ret""]",Not(ISMULT_ret_e_l == null_e_r),418,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,664,"printf(""RegularExpression::compile(): Unmatched [].\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1948.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Bracket),
        printf(""RegularExpression::compile(): Unmatched [].\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1948.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1948.cpp,52,"[""string""]","[""unkown"", ""char"", ""!=""]",Not(char_e_l == unkown_e_r),419,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,691,"printf(""RegularExpression::compile(): Trailing backslash.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1951.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Trailing_Backslash),
        printf(""RegularExpression::compile(): Trailing backslash.\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1951.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1951.cpp,79,"[""string""]","[""unkown"", ""char"", ""==""]",char_e_l == unkown_e_r,420,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,707,"printf(""RegularExpression::compile(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1952.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(""RegularExpression::compile(): Internal error.\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1952.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1952.cpp,95,"[""string""]","[""int_ret"", ""null"", ""<=""]",null_ge_r <= int_ret_ge_l,421,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,873,"printf(
      ""RegularExpression::find(): Compiled regular expression corrupted.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1953.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
    printf(
      ""RegularExpression::find(): Compiled regular expression corrupted.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1953.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1953.cpp,13,"[""string""]","[""UCHARAT_ret"", ""macro"", ""!=""]",Not(UCHARAT_ret_e_l == macro_e_r),422,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,1129,"printf(""RegularExpression::find(): Internal error -- corrupted pointers.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1955.cpp,"{
  const char* scan; // Current node.
  const char* next; // Next node.

  scan = prog;

  while (scan != 0) {

    next = regnext(scan);

    switch (OP(scan)) {
      case BOL:
        if (reginput != regbol)
          return (0);
        break;
      case EOL:
        if (*reginput != '\0')
          return (0);
        break;
      case ANY:
        if (*reginput == '\0')
          return (0);
        reginput++;
        break;
      case EXACTLY: {
        size_t len;
        const char* opnd;

        opnd = OPERAND(scan);
        // Inline the first character, for speed.
        if (*opnd != *reginput)
          return (0);
        len = strlen(opnd);
        if (len > 1 && strncmp(opnd, reginput, len) != 0)
          return (0);
        reginput += len;
      } break;
      case ANYOF:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) == 0)
          return (0);
        reginput++;
        break;
      case ANYBUT:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) != 0)
          return (0);
        reginput++;
        break;
      case NOTHING:
        break;
      case BACK:
        break;
      case OPEN + 1:
      case OPEN + 2:
      case OPEN + 3:
      case OPEN + 4:
      case OPEN + 5:
      case OPEN + 6:
      case OPEN + 7:
      case OPEN + 8:
      case OPEN + 9: {
        int no;
        const char* save;

        no = OP(scan) - OPEN;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set startp if some later invocation of the
          // same parentheses already has.
          //
          if (regstartp[no] == 0)
            regstartp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case CLOSE + 1:
      case CLOSE + 2:
      case CLOSE + 3:
      case CLOSE + 4:
      case CLOSE + 5:
      case CLOSE + 6:
      case CLOSE + 7:
      case CLOSE + 8:
      case CLOSE + 9: {
        int no;
        const char* save;

        no = OP(scan) - CLOSE;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set endp if some later invocation of the
          // same parentheses already has.
          //
          if (regendp[no] == 0)
            regendp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case BRANCH: {

        const char* save;

        if (OP(next) != BRANCH) // No choice.
          next = OPERAND(scan); // Avoid recursion.
        else {
          do {
            save = reginput;
            if (regmatch(OPERAND(scan)))
              return (1);
            reginput = save;
            scan = regnext(scan);
          } while (scan != 0 && OP(scan) == BRANCH);
          return (0);
          // NOTREACHED
        }
      } break;
      case STAR:
      case PLUS: {
        char nextch;
        int no;
        const char* save;
        int min_no;

        //
        // Lookahead to avoid useless match attempts when we know
        // what character comes next.
        //
        nextch = '\0';
        if (OP(next) == EXACTLY)
          nextch = *OPERAND(next);
        min_no = (OP(scan) == STAR) ? 0 : 1;
        save = reginput;
        no = regrepeat(OPERAND(scan));
        while (no >= min_no) {
          // If it could work, try it.
          if (nextch == '\0' || *reginput == nextch)
            if (regmatch(next))
              return (1);
          // Couldn't or didn't -- back up.
          no--;
          reginput = save + no;
        }
        return (0);
      }
      //              break;
      case END:
        return (1); // Success!

      default:
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");
        return 0;
    }
    scan = next;
  }

  //
  //  We get here only if there's trouble -- normally ""case END"" is the
  //  terminating point.
  //
  // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
  printf(""RegularExpression::find(): Internal error -- corrupted pointers.\n"");
  return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1955.cpp,"[16, 2, 0, 1, 9, 0, 18, 1, 30, 1, 29, 0, 0, 0, 7, 178, 0, 0, 13, 13, 0, 0, 0, 54, 0, 0, 0, 0, 7, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 1, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 21, 17, 4, 0, 27, 0, 0, 28, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1955.cpp,172,"[""string""]","[""OPERAND_ret"", ""null"", ""!="", ""!""]",Not(Not(OPERAND_ret_e_l == null_e_r)),423,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,112,"sprintf(buf, ""%s\\*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1981.cpp,"{
      sprintf(buf, ""%s\\*"", name.c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1981.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1981.cpp,19,"[""int"", ""string"", ""name . c_str_ret""]","[""name . find_ret"", ""unkown"", ""!=""]",Not(name . find_ret_e_l == unkown_e_r),424,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,114,"sprintf(buf, ""%s/*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1982.cpp,"{
      sprintf(buf, ""%s/*"", name.c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1982.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1982.cpp,21,"[""int"", ""string"", ""name . c_str_ret""]","[""name . find_ret"", ""unkown"", ""!="", ""!""]",Not(Not(name . find_ret_e_l == unkown_e_r)),425,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,151,"sprintf(buf, ""%s/*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1984.cpp,"{
    buf = new char[n + 2 + 1];
    sprintf(buf, ""%s/*"", name.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1984.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1984.cpp,15,"[""int"", ""string"", ""name . c_str_ret""]","[""name . rbegin_ret"", ""char"", ""=="", ""!""]",Not(char_e_l == name . rbegin_ret_e_r),426,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4622,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1989.cpp,"{
          res += "" Service Pack 6a (Build "";
          sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1989.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1989.cpp,204,"[""char *"", ""string"", ""bool""]","[""LONG"", ""macro"", ""==""]",LONG_e_l == macro_e_r,427,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4630,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1990.cpp,"{
          res += "" "";
          res += osvi.szCSDVersion;
          res += "" (Build "";
          sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1990.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1990.cpp,212,"[""char *"", ""string"", ""bool""]","[""LONG"", ""macro"", ""=="", ""!""]",Not(LONG_e_l == macro_e_r),428,1,,,,,
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4641,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1991.cpp,"{
        res += "" "";
        res += osvi.szCSDVersion;
        res += "" (Build "";
        sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
        res += buffer;
        res += "")"";
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1991.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1991.cpp,223,"[""char *"", ""string"", ""bool""]","[""member"", ""int"", ""=="", ""lstrcmpiA_ret"", ""null"", ""=="", ""&&"", ""!""]","Not(And(lstrcmpiA_ret_e_l == null_e_r,
        int_e_l == member_e_r))",429,1,,,,,
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,17,"fprintf(stderr, ""1 warning generated.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2040.cpp,"{
  int i;
  for (i = 1; i < argc; ++i) {
    if (strcmp(argv[i], ""-bad"") == 0) {
      fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");
      fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");
      return 1;
    }
    if (argv[i][0] != '-') {
      fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);
      break;
    }
  }
  fprintf(stderr, ""1 warning generated.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2040.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 2, 0, 0, 5, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2040.cpp,14,"[""unkown"", ""string""]","[""int"", ""int"", ""<"", ""!"", ""member"", ""char"", ""!="", ""&&""]","And(Not(char_e_l == member_e_r), Not(int_g_r < int_g_l))",430,1,,,,,
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/generator.cpp,11,"fprintf(fout, ""static const char* %s_string = \""%s\"";\n"", argv[2], foo());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2081.cpp,"{
    fprintf(fout, ""static const char* %s_string = \""%s\"";\n"", argv[2], foo());
    fclose(fout);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2081.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2081.cpp,7,"[""fopen_ret"", ""string"", ""member"", ""foo_ret""]","[""fopen_ret""]",Not(fopen_ret_e_l == null_e_r),431,1,,,,,
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,70,"printf(""failed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2103.cpp,"{
  unsigned int uc;
  if (const char* e =
        cm_utf8_decode_character(entry.str, entry.str + 4, &uc)) {
    int used = static_cast<int>(e - entry.str);
    if (uc != entry.chr) {
      report_good(false, entry.str);
      printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);
      return false;
    }
    if (used != entry.n) {
      report_good(false, entry.str);
      printf(""had %d bytes, used %d\n"", entry.n, used);
      return false;
    }
    report_good(true, entry.str);
    printf(""got 0x%04X\n"", uc);
    return true;
  }
  report_good(false, entry.str);
  printf(""failed\n"");
  return false;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2103.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 57, 0, 0, 2, 3, 0, 0, 2, 13, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 38, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 11, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2103.cpp,21,"[""string""]","[""unkown"", ""cm_utf8_decode_character_ret"", ""!""]",Not(Not(cm_utf8_decode_character_ret_e_l == null_e_r)),432,1,,,,,
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,15,"printf(""Problem with libc2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2169.cpp,"{
    printf(""Problem with libc2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2169.cpp,8,"[""string""]","[""LibC2Func_ret"", ""constant"", ""!=""]",Not(LibC2Func_ret_e_l == constant_e_r),433,1,,,,,
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,18,"printf(""Foo: %s %d\n"", foo, class);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2170.cpp,"{
  int class = 0;
  if (LibC1Func() != 2.0) {
    printf(""Problem with libc1\n"");
    return 1;
  }
  if (LibC2Func() != 1.0) {
    printf(""Problem with libc2\n"");
    return 1;
  }
  printf(""Foo: %s %d\n"", foo, class);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2170.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2170.cpp,11,[],"[""LibC2Func_ret"", ""constant"", ""!="", ""!""]",Not(Not(LibC2Func_ret_e_l == constant_e_r)),434,1,,,,,
second/download/CMake/CMake/CMake/Tests/CTestTest/SmallAndFast/intentional_compile_warning.cpp,7,"fprintf(stdout, ""%s\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2175.cpp,"{
    fprintf(stdout, ""%s\n"", argv[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2175.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2175.cpp,5,"[""unkown"", ""string"", ""member""]","[""unsigned int"", ""int"", ""<""]",int_g_r < unsigned int_g_l,435,1,,,,,
second/download/CMake/CMake/CMake/Tests/CxxOnly/cxxonly.cpp,18,"printf(""Problem with libcxx2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2182.cpp,"{
    printf(""Problem with libcxx2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2182.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2182.cpp,10,"[""string""]","[""LibCxx2Class :: Method_ret"", ""constant"", ""!=""]",Not(LibCxx2Class :: Method_ret_e_l == constant_e_r),436,1,,,,,
second/download/CMake/CMake/CMake/Tests/TestDriver/test1.cpp,17,"printf(""test1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2188.cpp,"{
  if (!testExtraStuff2()) {
    return -1;
  }
  if (!testExtraStuff()) {
    return -1;
  }
  if (!testExtraStuff3()) {
    return -1;
  }

  printf(""test1\n"");
  for (int i = 0; i < ac; i++)
    printf(""arg %d is %s\n"", ac, av[i]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2188.cpp,"[3, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 3, 0, 0, 5, 0, 0, 2, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2188.cpp,12,"[""string""]","[""testExtraStuff3_ret"", ""!"", ""!""]",Not(Not(Not(null_e_l == testExtraStuff3_ret_e_r))),437,1,,,,,
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,13,"printf(""Cannot find file: %s\n"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2209.cpp,"{
    printf(""Cannot find file: %s\n"", filename);
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2209.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2209.cpp,6,"[""string"", ""char *""]","[""access_ret"", ""null"", ""!=""]",Not(access_ret_e_l == null_e_r),438,1,,,,,
second/download/CMake/CMake/CMake/Tests/FindGTK2/cairo/main.cpp,10,"fprintf(stderr, ""Usage: %s OUTPUT_FILENAME\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2217.cpp,"{
    fprintf(stderr, ""Usage: %s OUTPUT_FILENAME\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2217.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2217.cpp,4,"[""unkown"", ""string"", ""member""]","[""int"", ""int"", ""!=""]",Not(int_e_l == int_e_r),439,1,,,,,
second/download/CMake/CMake/CMake/Tests/FindGTK2/cairo/main.cpp,44,"fprintf(stderr, ""Could not save png to '%s'\n"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2218.cpp,"{
    fprintf(stderr, ""Could not save png to '%s'\n"", filename);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2218.cpp,38,"[""unkown"", ""string"", ""member""]","[""cairo_status_t"", ""macro"", ""!=""]",Not(cairo_status_t_e_l == macro_e_r),440,1,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirD/t9.cpp,19,"fprintf(stderr, ""Something wrong with T7\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2225.cpp,"{
    fprintf(stderr, ""Something wrong with T7\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2225.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2225.cpp,9,"[""unkown"", ""string""]","[""tlib7func_ret"", ""int"", ""!=""]",Not(int_e_l == tlib7func_ret_e_r),441,1,,,,,
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirB/t7.cpp,9,"fprintf(stderr, ""Something wrong with T2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2227.cpp,"{
    fprintf(stderr, ""Something wrong with T2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2227.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2227.cpp,5,"[""unkown"", ""string""]","[""tlib2func_ret"", ""int"", ""!=""]",Not(int_e_l == tlib2func_ret_e_r),442,1,,,,,
second/download/CMake/CMake/CMake/Tests/Wrapping/qtwrappingmain.cpp,20,"printf(""Environment variable DISPLAY is not set. I will pretend like the ""
           ""test passed, but you should really set it.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2239.cpp,"{
    printf(""Environment variable DISPLAY is not set. I will pretend like the ""
           ""test passed, but you should really set it.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2239.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2239.cpp,12,[],"[""const char *"", ""strlen_ret"", ""null"", "">"", ""&&"", ""!""]","Not(And(null_g_l > strlen_ret_g_r,
        Not(const char *_e_l == null_e_r)))",443,1,,,,,
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/MathFunctions/mysqrt.cpp,18,"fprintf(stdout, ""Computing sqrt of %g to be %g using log\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2311.cpp,"{
  if (x <= 0) {
    return 0;
  }

  double result;

// if we have both log and exp then use them
#if defined(HAVE_LOG) && defined(HAVE_EXP)
  result = exp(log(x) * 0.5);
  fprintf(stdout, ""Computing sqrt of %g to be %g using log\n"", x, result);
#else
  double delta;
  result = x;

  // do ten iterations
  int i;
  for (i = 0; i < 10; ++i) {
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }
#endif
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2311.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 39, 0, 0, 3, 3, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 2, 1, 0, 6, 0, 0, 7, 0, 12, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2311.cpp,11,"[""unkown"", ""string"", ""double"", ""exp_ret""]","[""double"", ""null"", ""<="", ""!""]",Not(null_ge_r <= double_ge_l),444,1,,,,,
second/download/CMake/CMake/CMake/Tests/TryCompile/expect_arg.cpp,15,"printf(""arg1 and arg2 missing!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2346.cpp,"{
  int i;
  printf(""ac = [%d]\n"", ac);
  for (i = 0; i < ac; i++) {
    printf(""arg[%d] = %s\n"", i, av[i]);
  }
  if (ac == 3) {
    if (strcmp(av[1], ""arg1"") == 0 && strcmp(av[2], ""arg2"") == 0) {
      printf(""arg1 and arg2 present and accounted for!\n"");
      return 0;
    }
  }
  printf(""arg1 and arg2 missing!\n"");
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2346.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 3, 2, 0, 0, 6, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2346.cpp,13,"[""string""]","[""strcmp_ret"", ""null"", ""=="", ""strcmp_ret"", ""null"", ""=="", ""&&"", ""!"", ""int"", ""int"", ""=="", ""!"", ""&&""]","And(Not(int_e_l == int_e_r),
    Not(And(null_e_l == strcmp_ret_e_r,
            null_e_l == strcmp_ret_e_r)))",445,1,,,,,
