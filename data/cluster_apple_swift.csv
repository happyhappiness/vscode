commit_message,file_name,change_type,log_node,cdg_nodes,neighbor_nodes,condition_lists,store_name,log_loc,cluster_index
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,+,"[""2017"", ""True"", ""Condition"", ""shouldPrint ( E , Options )""]","[[[""False"", ""True""], [2108, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [2026, ""True"", "")"", ""Statement""]], ["""", [2027, ""True"", ""Synthesized"", ""Statement""]], ["""", [2028, ""True"", ""bool"", ""Statement""]], ["""", [2029, ""True"", "","", ""Statement""]]]","[[[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]]]",/data/download/swift/apple_swift0_new.cpp,342,71
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"[""26097"", ""True"", ""Condition"", ""! shouldPrint ( E , Options )""]","[[[""True""], [26139, ""True"", ""! Unhandled . empty ( )"", ""Condition""]], [[""True"", ""False"", ""True"", ""True"", ""True"", ""False"", ""True""], [26247, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [26108, ""True"", "")"", ""Statement""]], ["""", [26109, ""True"", "")"", ""Statement""]], ["""", [26110, ""True"", ""("", ""Statement""]], ["""", [26111, ""True"", ""getExtensions"", ""Statement""]]]","[[[""!"", ""Unhandled . empty"", null]], [[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]]]",/data/download/swift/apple_swift0_old.cpp,348,71
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"[""25996"", ""True"", ""Condition"", ""! shouldPrint ( E , Options )""]","[[[""False""], [26247, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [26007, ""True"", "")"", ""Statement""]], ["""", [26008, ""True"", "")"", ""Statement""]], ["""", [26009, ""True"", ""("", ""Statement""]], ["""", [26010, ""True"", ""getExtensions"", ""Statement""]]]","[[[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]]]",/data/download/swift/apple_swift0_old.cpp,364,71
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170970"", ""True"", ""ExpressionStatement"", ""assert ( constraintType && \""Missing constraint type?\"" )""]",[],"[["""", [170979, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [170988, ""True"", ""auto"", ""Statement""]]]","[[[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]]]",/data/download/swift/apple_swift1_new.cpp,2457,81
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170931"", ""True"", ""Condition"", ""source . getLoc ( ) . isValid ( ) && ! constraintType -> hasError ( )""]","[[[], [170952, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [170970, ""True"", ""assert ( constraintType && \""Missing constraint type?\"" )"", ""ExpressionStatement""]], ["""", [170979, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [170988, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""assert""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]]]",/data/download/swift/apple_swift1_new.cpp,2460,81
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170723"", ""True"", ""ExpressionStatement"", ""assert ( subjectPA && \""No potential archetype?\"" )""]","[[[""False""], [170803, ""True"", ""resolvedSubject -> isType ( )"", ""Condition""]], [[""False""], [170839, ""True"", ""! resolvedSubject"", ""Condition""]], [[""False""], [170952, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [170732, ""True"", ""subjectPA = resolvedSubject -> getPotentialArchetype ( )"", ""ExpressionStatement""]], ["""", [170741, ""True"", ""auto"", ""Statement""]]]","[[[null]], [[""!"", ""resolvedSubject"", null]], [[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]]]",/data/download/swift/apple_swift1_new.cpp,2504,84
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,-,"[""192520"", ""True"", ""ExpressionStatement"", ""assert ( req . getSecondType ( ) -> getClassOrBoundGenericClass ( ) )""]","[[[""case RequirementKind :: Superclass""], [192540, ""True"", ""! pa"", ""Condition""]], [[""case RequirementKind :: Superclass""], [192568, ""True"", ""req . getKind ( )"", ""Condition""]]]","[["""", [192544, ""True"", ""PotentialArchetype * pa = resolveArchetype ( subst ( req . getFirstType ( ) ) ) ;"", ""IdentifierDeclStatement""]], ["""", [192566, ""True"", ""case RequirementKind :: Superclass :"", ""Label""]]]","[[[""! pa"", ""RequirementKind :: Superclass"", ""==""]], [[""req . getKind ( )"", ""RequirementKind :: Superclass"", ""==""]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[""RequirementKind :: Superclass""]]]",/data/download/swift/apple_swift1_old.cpp,2819,36
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529950"", ""True"", ""ExpressionStatement"", ""assert ( constraintType && \""Missing constraint type?\"" )""]",[],"[["""", [529959, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [529968, ""True"", ""auto"", ""Statement""]]]","[[[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]]]",/data/download/swift/apple_swift2_new.cpp,2457,81
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529911"", ""True"", ""Condition"", ""source . getLoc ( ) . isValid ( ) && ! constraintType -> hasError ( )""]","[[[], [529932, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [529950, ""True"", ""assert ( constraintType && \""Missing constraint type?\"" )"", ""ExpressionStatement""]], ["""", [529959, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [529968, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""assert""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]]]",/data/download/swift/apple_swift2_new.cpp,2460,81
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529703"", ""True"", ""ExpressionStatement"", ""assert ( subjectPA && \""No potential archetype?\"" )""]","[[[""False""], [529783, ""True"", ""resolvedSubject -> isType ( )"", ""Condition""]], [[""False""], [529819, ""True"", ""! resolvedSubject"", ""Condition""]], [[""False""], [529932, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [529712, ""True"", ""subjectPA = resolvedSubject -> getPotentialArchetype ( )"", ""ExpressionStatement""]], ["""", [529721, ""True"", ""auto"", ""Statement""]]]","[[[null]], [[""!"", ""resolvedSubject"", null]], [[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]]]",/data/download/swift/apple_swift2_new.cpp,2504,84
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,-,"[""551853"", ""True"", ""ExpressionStatement"", ""assert ( req . getSecondType ( ) -> getClassOrBoundGenericClass ( ) )""]","[[[""case RequirementKind :: Superclass""], [551873, ""True"", ""! pa"", ""Condition""]], [[""case RequirementKind :: Superclass""], [551901, ""True"", ""req . getKind ( )"", ""Condition""]]]","[["""", [551877, ""True"", ""PotentialArchetype * pa = resolveArchetype ( subst ( req . getFirstType ( ) ) ) ;"", ""IdentifierDeclStatement""]], ["""", [551899, ""True"", ""case RequirementKind :: Superclass :"", ""Label""]]]","[[[""! pa"", ""RequirementKind :: Superclass"", ""==""]], [[""req . getKind ( )"", ""RequirementKind :: Superclass"", ""==""]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[null, ""pa"", ""pa"", ""resolveArchetype"", ""="", null]], [[""RequirementKind :: Superclass""]]]",/data/download/swift/apple_swift2_old.cpp,2916,36
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,-,"[""842916"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , opts . getSingleOutputFilename ( ) ) ;""]","[[[""False""], [842935, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [[""False""], [842982, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [[""False""], [843025, ""True"", ""Context . hadError ( )"", ""Condition""]], [[""True"", ""False"", ""True""], [843147, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [842986, ""True"", ""bool moduleIsPublic = ! Instance -> getMainModule ( ) -> hasEntryPoint ( ) && opts . ImplicitObjCHeaderPath . empty ( ) && ! Context . LangOpts . EnableAppExtensionRestrictions ;"", ""IdentifierDeclStatement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]]]",/data/download/swift/apple_swift3_old.cpp,553,68
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,+,"[""836887"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , hasMultipleIRGenThreads , opts . getSingleOutputFilename ( ) ) ;""]","[[[""True""], [836922, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [[""False""], [836969, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [[""False""], [837012, ""True"", ""Context . hadError ( )"", ""Condition""]], [[""True"", ""False"", ""True""], [837134, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [836908, ""True"", ""hasMultipleIRGenThreads = Invocation . getSILOptions ( ) . NumThreads > 1"", ""ExpressionStatement""]], ["""", [836921, ""True"", ""auto"", ""Statement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]]]",/data/download/swift/apple_swift3_new.cpp,554,35
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,-,"[""1061433"", ""True"", ""Parameter"", ""StringRef OutputFilename""]",[],"[["""", [1061436, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1061537, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""M""]], [[null, ""M""]], [[""ENTRY""]]]",/data/download/swift/apple_swift4_old.cpp,41,89
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,+,"[""1061154"", ""True"", ""Parameter"", ""bool hasMultipleIRGenThreads""]",[],"[["""", [1061157, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1061262, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""M""]], [[null, ""M""]], [[""ENTRY""]]]",/data/download/swift/apple_swift4_new.cpp,41,89
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1258850"", ""True"", ""ExpressionStatement"", ""assert ( selfReferencing || matching )""]","[[[""False"", ""True"", ""True""], [1258865, ""True"", ""! selfReferencing && ! matching"", ""Condition""]], [[], [1258905, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]], [[""True"", ""False"", ""True""], [1258905, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]]]","[["""", [1258877, ""True"", ""matching = false"", ""ExpressionStatement""]], ["""", [1258886, ""True"", ""CommonConst = C"", ""ExpressionStatement""]], ["""", [1258915, ""True"", ""Value * Op = FI . CurrentInst -> getOperand ( OpIdx ) ;"", ""IdentifierDeclStatement""]], ["""", [1258931, ""True"", "")"", ""Statement""]], ["""", [1258895, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1258895, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1258932, ""True"", ""FInfos"", ""Statement""]]]","[[[""!"", ""bool"", null]], [[""!"", ""bool"", null]], [[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""matching"", ""false"", ""=""]], [[""matching"", ""false"", ""=""]], [[""matching"", ""false"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]]]",/data/download/swift/apple_swift5_new.cpp,809,45
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1259243"", ""True"", ""ExpressionStatement"", ""DEBUG ( dbgs ( ) << \""    Erase \"" << OrigFunc -> getName ( ) << '\\n' )""]","[[[""True""], [1259327, ""True"", ""replaceDirectCallers ( OrigFunc , NewFunction , Params , FIdx )"", ""Condition""]], [[""True""], [1259354, ""True"", ""FIdx < NumFuncs"", ""Condition""]]]","[["""", [1259264, ""True"", ""FuncEntries . erase ( Iter )"", ""ExpressionStatement""]], ["""", [1259273, ""True"", ""Iter -> second -> F = nullptr"", ""ExpressionStatement""]], ["""", [1259281, ""True"", ""assert ( ! isInEquivalenceClass ( & * Iter -> second ) )"", ""ExpressionStatement""]], ["""", [1259301, ""True"", ""assert ( Iter != FuncEntries . end ( ) )"", ""ExpressionStatement""]]]","[[[null]], [[""FIdx"", ""NumFuncs"", ""<""]], [[""FuncEntries . erase""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""assert""]], [[""assert""]]]",/data/download/swift/apple_swift5_new.cpp,917,69
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1260331"", ""True"", ""ExpressionStatement"", ""assert ( Old -> use_empty ( ) && \""should have replaced all uses of old function\"" )""]","[[[""False"", ""True""], [1260721, ""True"", ""! AllReplaced"", ""Condition""]]]","[["""", [1260346, ""True"", ""CI -> eraseFromParent ( )"", ""ExpressionStatement""]], ["""", [1260353, ""True"", ""CI -> replaceAllUsesWith ( NewCI )"", ""ExpressionStatement""]], ["""", [1260362, ""True"", ""NewCI -> setAttributes ( CallSiteAttrs )"", ""ExpressionStatement""]], ["""", [1260371, ""True"", ""NewCI -> setCallingConv ( CI -> getCallingConv ( ) )"", ""ExpressionStatement""]]]","[[[""!"", ""bool"", null]], [[""CI -> eraseFromParent""]], [[""CI -> replaceAllUsesWith""]], [[""NewCI -> setAttributes""]], [[""NewCI -> setCallingConv""]]]",/data/download/swift/apple_swift5_new.cpp,1102,29
"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1396983"", ""True"", ""ExpressionStatement"", ""assert ( selfReferencing || matching )""]","[[[""False"", ""True"", ""True""], [1397038, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]], [[], [1396998, ""True"", ""! selfReferencing && ! matching"", ""Condition""]], [[""True"", ""False"", ""True""], [1397038, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]]]","[["""", [1397010, ""True"", ""matching = false"", ""ExpressionStatement""]], ["""", [1397019, ""True"", ""CommonConst = C"", ""ExpressionStatement""]], ["""", [1397048, ""True"", ""Value * Op = FI . CurrentInst -> getOperand ( OpIdx ) ;"", ""IdentifierDeclStatement""]], ["""", [1397064, ""True"", "")"", ""Statement""]], ["""", [1397028, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1397028, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1397065, ""True"", ""FInfos"", ""Statement""]]]","[[[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""!"", ""bool"", null]], [[""!"", ""bool"", null]], [[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""matching"", ""false"", ""=""]], [[""matching"", ""false"", ""=""]], [[""matching"", ""false"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[""CommonConst"", ""C"", ""=""]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[null, ""Op"", ""Op"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]], [[""selfReferencing"", ""false"", ""=""]]]",/data/download/swift/apple_swift6_new.cpp,809,45
"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1397376"", ""True"", ""ExpressionStatement"", ""DEBUG ( dbgs ( ) << \""    Erase \"" << OrigFunc -> getName ( ) << '\\n' )""]","[[[""True""], [1397460, ""True"", ""replaceDirectCallers ( OrigFunc , NewFunction , Params , FIdx )"", ""Condition""]], [[""True""], [1397487, ""True"", ""FIdx < NumFuncs"", ""Condition""]]]","[["""", [1397397, ""True"", ""FuncEntries . erase ( Iter )"", ""ExpressionStatement""]], ["""", [1397406, ""True"", ""Iter -> second -> F = nullptr"", ""ExpressionStatement""]], ["""", [1397414, ""True"", ""assert ( ! isInEquivalenceClass ( & * Iter -> second ) )"", ""ExpressionStatement""]], ["""", [1397434, ""True"", ""assert ( Iter != FuncEntries . end ( ) )"", ""ExpressionStatement""]]]","[[[null]], [[""FIdx"", ""NumFuncs"", ""<""]], [[""FuncEntries . erase""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""assert""]], [[""assert""]]]",/data/download/swift/apple_swift6_new.cpp,917,69
"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1398464"", ""True"", ""ExpressionStatement"", ""assert ( Old -> use_empty ( ) && \""should have replaced all uses of old function\"" )""]","[[[""False"", ""True""], [1398854, ""True"", ""! AllReplaced"", ""Condition""]]]","[["""", [1398479, ""True"", ""CI -> eraseFromParent ( )"", ""ExpressionStatement""]], ["""", [1398486, ""True"", ""CI -> replaceAllUsesWith ( NewCI )"", ""ExpressionStatement""]], ["""", [1398495, ""True"", ""NewCI -> setAttributes ( CallSiteAttrs )"", ""ExpressionStatement""]], ["""", [1398504, ""True"", ""NewCI -> setCallingConv ( CI -> getCallingConv ( ) )"", ""ExpressionStatement""]]]","[[[""!"", ""bool"", null]], [[""CI -> eraseFromParent""]], [[""CI -> replaceAllUsesWith""]], [[""NewCI -> setAttributes""]], [[""NewCI -> setCallingConv""]]]",/data/download/swift/apple_swift6_new.cpp,1102,29
"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"[""1425835"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""NodeStack[%u] at position %zd:\\n\"" , Idx , NodeStack [ Idx ] . Pos )""]","[[[""True""], [1425855, ""True"", ""Idx < NodeStack . size ( )"", ""Condition""]]]","[["""", [1425852, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [1425864, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]], ["""", [1425815, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [1425872, ""True"", ""ENTRY"", ""CFGEntryNode""]], ["""", [1425824, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]]]","[[[""Idx"", ""NodeStack . size"", ""<""]], [[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[""fprintf""]], [[""ENTRY""]], [[""NodeStack [ Idx ] . Node -> dump""]]]",/data/download/swift/apple_swift7_new.cpp,65,84
"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"[""1425815"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""\\n\"" )""]","[[[""True""], [1425855, ""True"", ""Idx < NodeStack . size ( )"", ""Condition""]]]","[["""", [1425824, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]], ["""", [1425835, ""True"", ""fprintf ( stderr , \""NodeStack[%u] at position %zd:\\n\"" , Idx , NodeStack [ Idx ] . Pos )"", ""ExpressionStatement""]], ["""", [1425852, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [1425864, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]]]","[[[""Idx"", ""NodeStack . size"", ""<""]], [[""NodeStack [ Idx ] . Node -> dump""]], [[""fprintf""]], [[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]]]",/data/download/swift/apple_swift7_new.cpp,67,84
"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"[""1425778"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""Position = %zd:\\n%.*s\\n%*s\\n\"" , Pos , ( int ) Text . size ( ) , Text . data ( ) , ( int ) Pos + 1 , \""^\"" )""]",[],"[["""", [1425852, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [1425864, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]], ["""", [1425815, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [1425872, ""True"", ""ENTRY"", ""CFGEntryNode""]], ["""", [1425824, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]]]","[[[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[""fprintf""]], [[""ENTRY""]], [[""NodeStack [ Idx ] . Node -> dump""]]]",/data/download/swift/apple_swift7_new.cpp,69,84
[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/FrontendTool.cpp,-,"[""1434172"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , opts . getSingleOutputFilename ( ) ) ;""]","[[[""False""], [1434191, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [[""False""], [1434238, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [[""False""], [1434281, ""True"", ""Context . hadError ( )"", ""Condition""]], [[""True"", ""False"", ""True""], [1434403, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [1434242, ""True"", ""bool moduleIsPublic = ! Instance -> getMainModule ( ) -> hasEntryPoint ( ) && opts . ImplicitObjCHeaderPath . empty ( ) && ! Context . LangOpts . EnableAppExtensionRestrictions ;"", ""IdentifierDeclStatement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]], [[null, ""moduleIsPublic"", ""moduleIsPublic"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]]]",/data/download/swift/apple_swift8_old.cpp,528,68
[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/FrontendTool.cpp,+,"[""1428597"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , hasMultipleIRGenThreads , opts . getSingleOutputFilename ( ) ) ;""]","[[[""True""], [1428632, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [[""False""], [1428679, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [[""False""], [1428722, ""True"", ""Context . hadError ( )"", ""Condition""]], [[""True"", ""False"", ""True""], [1428844, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [1428618, ""True"", ""hasMultipleIRGenThreads = Invocation . getSILOptions ( ) . NumThreads > 1"", ""ExpressionStatement""]], ["""", [1428631, ""True"", ""auto"", ""Statement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]]]",/data/download/swift/apple_swift8_new.cpp,529,35
[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/TBD.cpp,-,"[""1437330"", ""True"", ""Parameter"", ""StringRef OutputFilename""]",[],"[["""", [1437333, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1437434, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""M""]], [[null, ""M""]], [[""ENTRY""]]]",/data/download/swift/apple_swift9_old.cpp,41,89
[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/TBD.cpp,+,"[""1437051"", ""True"", ""Parameter"", ""bool hasMultipleIRGenThreads""]",[],"[["""", [1437054, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1437159, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""M""]], [[null, ""M""]], [[""ENTRY""]]]",/data/download/swift/apple_swift9_new.cpp,41,89
"Merge pull request #8599 from rudkx/propagate-constraints

[Constraint system] Fix some issues with constraint propagation.",lib/Sema/CSPropagate.cpp,+,"[""48570"", ""True"", ""ExpressionStatement"", ""assert ( ! constraint -> isDisabled ( ) && \""Unexpected disabled constraint!\"" )""]","[[[""True""], [48621, ""True"", ""! ActiveConstraints . empty ( )"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [48500, ""True"", ""failed"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [48621, ""True"", ""! ActiveConstraints . empty ( )"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [48500, ""True"", ""failed"", ""Condition""]]]","[["""", [48586, ""True"", ""assert ( constraint -> isActive ( ) && \""Expected constraints to be active?\"" )"", ""ExpressionStatement""]], ["""", [48600, ""True"", ""ActiveConstraints . pop_front ( )"", ""ExpressionStatement""]], ["""", [48607, ""True"", ""* constraint = & ActiveConstraints . front ( )"", ""ExpressionStatement""]], ["""", [48620, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""ActiveConstraints . empty"", null]], [[null]], [[""!"", ""ActiveConstraints . empty"", null]], [[null]], [[""assert""]], [[""ActiveConstraints . pop_front""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]]]",/data/download/swift/apple_swift10_new.cpp,72,63
"Merge pull request #8599 from rudkx/propagate-constraints

[Constraint system] Fix some issues with constraint propagation.",lib/Sema/CSPropagate.cpp,+,"[""48708"", ""True"", ""ExpressionStatement"", ""assert ( tyvar && \""Expected type variable!\"" )""]",[],"[["""", [48717, ""True"", """", ""ExpressionStatement""]], ["""", [48718, ""True"", "")"", ""Statement""]], ["""", [48719, ""True"", ""("", ""Statement""]], ["""", [48720, ""True"", "">"", ""Statement""]]]",[],/data/download/swift/apple_swift10_new.cpp,109,0
Merge pull request #8600 from adrian-prantl/31482203,lib/IRGen/DebugTypeInfo.cpp,-,"[""51366"", ""True"", ""ExpressionStatement"", ""assert ( ( ! isArchetype ( ) || ( isArchetype ( ) && DC ) ) && \""archetype without a declcontext\"" )""]",[],"[["""", [51324, ""True"", ""Alignment align"", ""Parameter""]], ["""", [51327, ""True"", ""Size size"", ""Parameter""]], ["""", [51330, ""True"", ""llvm :: Type * StorageTy"", ""Parameter""]], ["""", [51333, ""True"", ""swift :: Type Ty"", ""Parameter""]]]","[[[null, ""align""]], [[null, ""align""]], [[null, ""size""]], [[null, ""size""]], [[null, ""StorageTy""]], [[null, ""StorageTy""]], [[null, ""Ty""]], [[null, ""Ty""]]]",/data/download/swift/apple_swift11_old.cpp,33,82
"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"[""52721"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""NodeStack[%u] at position %zd:\\n\"" , Idx , NodeStack [ Idx ] . Pos )""]","[[[""True""], [52741, ""True"", ""Idx < NodeStack . size ( )"", ""Condition""]]]","[["""", [52738, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [52750, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]], ["""", [52701, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [52758, ""True"", ""ENTRY"", ""CFGEntryNode""]], ["""", [52710, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]]]","[[[""Idx"", ""NodeStack . size"", ""<""]], [[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[""fprintf""]], [[""ENTRY""]], [[""NodeStack [ Idx ] . Node -> dump""]]]",/data/download/swift/apple_swift12_new.cpp,65,84
"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"[""52701"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""\\n\"" )""]","[[[""True""], [52741, ""True"", ""Idx < NodeStack . size ( )"", ""Condition""]]]","[["""", [52710, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]], ["""", [52721, ""True"", ""fprintf ( stderr , \""NodeStack[%u] at position %zd:\\n\"" , Idx , NodeStack [ Idx ] . Pos )"", ""ExpressionStatement""]], ["""", [52738, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [52750, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]]]","[[[""Idx"", ""NodeStack . size"", ""<""]], [[""NodeStack [ Idx ] . Node -> dump""]], [[""fprintf""]], [[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]]]",/data/download/swift/apple_swift12_new.cpp,67,84
"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"[""52664"", ""True"", ""ExpressionStatement"", ""fprintf ( stderr , \""Position = %zd:\\n%.*s\\n%*s\\n\"" , Pos , ( int ) Text . size ( ) , Text . data ( ) , ( int ) Pos + 1 , \""^\"" )""]",[],"[["""", [52738, ""True"", ""++ Idx"", ""UnaryExpression""]], ["""", [52750, ""True"", ""unsigned Idx = 0 ;"", ""ForInit""]], ["""", [52701, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [52758, ""True"", ""ENTRY"", ""CFGEntryNode""]], ["""", [52710, ""True"", ""NodeStack [ Idx ] . Node -> dump ( )"", ""ExpressionStatement""]]]","[[[null, ""Idx""]], [[null, ""Idx""]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[null, ""Idx"", ""Idx"", ""0"", ""="", null, null]], [[""fprintf""]], [[""ENTRY""]], [[""NodeStack [ Idx ] . Node -> dump""]]]",/data/download/swift/apple_swift12_new.cpp,69,84
"Remove obsolete assertion.

b872127 made this check unncessary because we are now using the
GenericEnvironment to map Archetypes.

rdar://problem/31482203",lib/IRGen/DebugTypeInfo.cpp,-,"[""53883"", ""True"", ""ExpressionStatement"", ""assert ( ( ! isArchetype ( ) || ( isArchetype ( ) && DC ) ) && \""archetype without a declcontext\"" )""]",[],"[["""", [53841, ""True"", ""Alignment align"", ""Parameter""]], ["""", [53844, ""True"", ""Size size"", ""Parameter""]], ["""", [53847, ""True"", ""llvm :: Type * StorageTy"", ""Parameter""]], ["""", [53850, ""True"", ""swift :: Type Ty"", ""Parameter""]]]","[[[null, ""align""]], [[null, ""align""]], [[null, ""size""]], [[null, ""size""]], [[null, ""StorageTy""]], [[null, ""StorageTy""]], [[null, ""Ty""]], [[null, ""Ty""]]]",/data/download/swift/apple_swift13_old.cpp,33,82
"[Constraint system] Fix some issues with constraint propagation.

There are a handful of things, but the primary ones are that we really
don't want to track depth of recursion so much as whether we are
processing at the ""top level"" of constraints we're looking at or not so
that we can determine whether we can disable elements from a
disjunction.

Related, there are places where we can bail out earlier if we know
that *any* neighboring constraint passes.

Also updating the way we gather neighboring constraints to be
independent of the function that simplifies them. The original code was
wrong in that in bailed as soon as one of the simplifications
failed (which meant we might not gather all of them).",lib/Sema/CSPropagate.cpp,+,"[""55200"", ""True"", ""ExpressionStatement"", ""assert ( ! constraint -> isDisabled ( ) && \""Unexpected disabled constraint!\"" )""]","[[[""True""], [55251, ""True"", ""! ActiveConstraints . empty ( )"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [55130, ""True"", ""failed"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [55251, ""True"", ""! ActiveConstraints . empty ( )"", ""Condition""]], [[""case SolutionKind :: Unsolved"", ""case SolutionKind :: Solved"", ""case SolutionKind :: Error"", ""True""], [55130, ""True"", ""failed"", ""Condition""]]]","[["""", [55216, ""True"", ""assert ( constraint -> isActive ( ) && \""Expected constraints to be active?\"" )"", ""ExpressionStatement""]], ["""", [55230, ""True"", ""ActiveConstraints . pop_front ( )"", ""ExpressionStatement""]], ["""", [55237, ""True"", ""* constraint = & ActiveConstraints . front ( )"", ""ExpressionStatement""]], ["""", [55250, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""ActiveConstraints . empty"", null]], [[null]], [[""!"", ""ActiveConstraints . empty"", null]], [[null]], [[""assert""]], [[""ActiveConstraints . pop_front""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]], [[""*"", ""constraint"", null, ""&"", ""ActiveConstraints . front"", null, ""=""]]]",/data/download/swift/apple_swift14_new.cpp,72,63
"[Constraint system] Fix some issues with constraint propagation.

There are a handful of things, but the primary ones are that we really
don't want to track depth of recursion so much as whether we are
processing at the ""top level"" of constraints we're looking at or not so
that we can determine whether we can disable elements from a
disjunction.

Related, there are places where we can bail out earlier if we know
that *any* neighboring constraint passes.

Also updating the way we gather neighboring constraints to be
independent of the function that simplifies them. The original code was
wrong in that in bailed as soon as one of the simplifications
failed (which meant we might not gather all of them).",lib/Sema/CSPropagate.cpp,+,"[""55338"", ""True"", ""ExpressionStatement"", ""assert ( tyvar && \""Expected type variable!\"" )""]",[],"[["""", [55347, ""True"", """", ""ExpressionStatement""]], ["""", [55348, ""True"", "")"", ""Statement""]], ["""", [55349, ""True"", ""("", ""Statement""]], ["""", [55350, ""True"", "">"", ""Statement""]]]",[],/data/download/swift/apple_swift14_new.cpp,109,1
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""58317"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""FORWARD \"" << TheForwardingValue << \""  to\"" << * I )""]","[[[""False""], [58346, ""True"", ""! TheForwardingValue"", ""Condition""]], [[""False""], [58385, ""True"", ""! Ctx . collectLocationValues ( I -> getParent ( ) , L , Values , getForwardValIn ( ) )"", ""Condition""]]]","[["""", [58337, ""True"", ""RedundantLoads [ I ] = TheForwardingValue"", ""ExpressionStatement""]], ["""", [58350, ""True"", ""SILValue TheForwardingValue = LSValue :: reduce ( L , Mod , Values , I ) ;"", ""IdentifierDeclStatement""]], ["""", [58368, ""True"", ""SILModule * Mod = & I -> getModule ( ) ;"", ""IdentifierDeclStatement""]]]","[[[""!"", ""SILValue"", null]], [[""!"", ""Ctx . collectLocationValues"", null]], [[""RedundantLoads"", ""SILInstruction *"", null, ""SILValue"", ""=""]], [[""RedundantLoads"", ""SILInstruction *"", null, ""SILValue"", ""=""]], [[""RedundantLoads"", ""SILInstruction *"", null, ""SILValue"", ""=""]], [[""RedundantLoads"", ""SILInstruction *"", null, ""SILValue"", ""=""]], [[""RedundantLoads"", ""SILInstruction *"", null, ""SILValue"", ""=""]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""TheForwardingValue"", ""TheForwardingValue"", ""LSValue :: reduce"", ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]], [[null, ""Mod"", ""Mod"", ""&"", ""I -> getModule"", null, ""="", null]]]",/data/download/swift/apple_swift15_new.cpp,728,78
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""60630"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""WRITE \"" << * Inst )""]","[[[""False""], [60646, ""True"", ""Inst -> mayWriteToMemory ( )"", ""Condition""]], [[""False""], [60655, ""True"", ""! Inst -> mayReadOrWriteMemory ( )"", ""Condition""]], [[], [60666, ""True"", ""isRLEInertInstruction ( Inst )"", ""Condition""]]]",[],"[[[null]], [[""!"", ""Inst -> mayReadOrWriteMemory"", null]], [[null]]]",/data/download/swift/apple_swift15_new.cpp,1080,68
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""60600"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""READ \"" << * Inst )""]","[[[""False""], [60646, ""True"", ""Inst -> mayWriteToMemory ( )"", ""Condition""]], [[""False""], [60655, ""True"", ""! Inst -> mayReadOrWriteMemory ( )"", ""Condition""]], [[], [60666, ""True"", ""isRLEInertInstruction ( Inst )"", ""Condition""]]]",[],"[[[null]], [[""!"", ""Inst -> mayReadOrWriteMemory"", null]], [[null]]]",/data/download/swift/apple_swift15_new.cpp,1084,68
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62336"", ""True"", ""ExpressionStatement"", ""llvm :: dbgs ( ) << \""PROCESS \"" << printCtx . getID ( BB ) << \"" for Gen/Kill:\\n\""""]",[],"[["""", [62354, ""True"", ""("", ""Statement""]], ["""", [62355, ""True"", ""DEBUG"", ""Statement""]], ["""", [62356, ""True"", "")"", ""Statement""]], ["""", [62357, ""True"", "")"", ""Statement""]]]",[],/data/download/swift/apple_swift15_new.cpp,1361,2
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62322"", ""True"", ""ExpressionStatement"", """"]",[],"[["""", [62323, ""True"", "")"", ""Statement""]], ["""", [62324, ""True"", "")"", ""Statement""]], ["""", [62325, ""True"", ""printCtx"", ""Statement""]], ["""", [62326, ""True"", "","", ""Statement""]]]",[],/data/download/swift/apple_swift15_new.cpp,1363,3
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62145"", ""True"", ""ExpressionStatement"", ""DEBUG ( S . dump ( * this ) )""]",[],"[["""", [62162, ""True"", ""S . processInstructionWithKind ( * this , & * I , RLEKind :: ComputeAvailGenKillSet )"", ""ExpressionStatement""]], ["""", [62182, ""True"", ""S . processStoreInst ( * this , SI , RLEKind :: ComputeAvailSetMax )"", ""ExpressionStatement""]], ["""", [62197, ""True"", "")"", ""Statement""]], ["""", [62198, ""True"", "")"", ""Statement""]]]","[[[""S . processInstructionWithKind""]], [[""S . processStoreInst""]]]",/data/download/swift/apple_swift15_new.cpp,1386,4
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62494"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""PROCESS \"" << printCtx . getID ( BB ) << \"" with Gen/Kill.\\n\"" )""]","[[[""True""], [62529, ""True"", ""! WorkList . empty ( )"", ""Condition""]]]","[["""", [62517, ""True"", ""SILBasicBlock * BB = WorkList . pop_back_val ( ) ;"", ""IdentifierDeclStatement""]], ["""", [62397, ""True"", ""DEBUG ( Forwarder . dump ( * this ) )"", ""ExpressionStatement""]], ["""", [62426, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [62539, ""True"", ""HandledBBs . insert ( BB )"", ""ExpressionStatement""]], ["""", [62416, ""True"", ""WorkList . push_back ( X )"", ""ExpressionStatement""]], ["""", [62548, ""True"", ""WorkList . push_back ( BB )"", ""ExpressionStatement""]]]","[[[""!"", ""WorkList . empty"", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[null, ""BB"", ""BB"", ""WorkList . pop_back_val"", ""="", null]], [[""DEBUG""]], [[""HandledBBs . insert""]], [[""WorkList . push_back""]], [[""WorkList . push_back""]]]",/data/download/swift/apple_swift15_new.cpp,1405,5
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62397"", ""True"", ""ExpressionStatement"", ""DEBUG ( Forwarder . dump ( * this ) )""]","[[[""False"", ""True""], [62427, ""True"", ""HandledBBs . find ( X ) != HandledBBs . end ( )"", ""Condition""]], [[], [62455, ""True"", ""Forwarder . processBasicBlockWithGenKillSet ( )"", ""Condition""]], [[""True""], [62455, ""True"", ""Forwarder . processBasicBlockWithGenKillSet ( )"", ""Condition""]], [[""True""], [62529, ""True"", ""! WorkList . empty ( )"", ""Condition""]], [[""True""], [62529, ""True"", ""! WorkList . empty ( )"", ""Condition""]]]",[],"[[[""HandledBBs . find"", ""HandledBBs . end"", ""!=""]], [[null]], [[null]], [[""!"", ""WorkList . empty"", null]], [[""!"", ""WorkList . empty"", null]]]",/data/download/swift/apple_swift15_new.cpp,1423,85
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62661"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""PROCESS \"" << printCtx . getID ( BB ) << \"" for available.\\n\"" )""]",[],"[["""", [62684, ""True"", "")"", ""Statement""]], ["""", [62685, ""True"", "")"", ""Statement""]], ["""", [62686, ""True"", ""("", ""Statement""]], ["""", [62687, ""True"", ""getReversePostOrder"", ""Statement""]]]",[],/data/download/swift/apple_swift15_new.cpp,1429,6
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62602"", ""True"", ""ExpressionStatement"", ""DEBUG ( Forwarder . dump ( * this ) )""]",[],"[["""", [62618, ""True"", ""Forwarder . updateForwardValOut ( )"", ""ExpressionStatement""]], ["""", [62625, ""True"", ""Forwarder . processBasicBlockWithKind ( * this , RLEKind :: ComputeAvailValue )"", ""ExpressionStatement""]], ["""", [62638, ""True"", ""Forwarder . mergePredecessorAvailSetAndValue ( * this )"", ""ExpressionStatement""]], ["""", [62649, ""True"", ""BlockState & Forwarder = getBlockState ( BB ) ;"", ""IdentifierDeclStatement""]]]","[[[""Forwarder . updateForwardValOut""]], [[""Forwarder . processBasicBlockWithKind""]], [[""Forwarder . mergePredecessorAvailSetAndValue""]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]]]",/data/download/swift/apple_swift15_new.cpp,1449,64
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62807"", ""True"", ""ExpressionStatement"", ""DEBUG ( llvm :: dbgs ( ) << \""PROCESS \"" << printCtx . getID ( BB ) << \"" for RLE.\\n\"" )""]",[],"[["""", [62830, ""True"", "")"", ""Statement""]], ["""", [62831, ""True"", "")"", ""Statement""]], ["""", [62832, ""True"", ""("", ""Statement""]], ["""", [62833, ""True"", ""getReversePostOrder"", ""Statement""]]]",[],/data/download/swift/apple_swift15_new.cpp,1455,7
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""62748"", ""True"", ""ExpressionStatement"", ""DEBUG ( Forwarder . dump ( * this ) )""]",[],"[["""", [62764, ""True"", ""Forwarder . mergePredecessorAvailSetAndValue ( * this )"", ""ExpressionStatement""]], ["""", [62775, ""True"", ""BlockState & Forwarder = getBlockState ( BB ) ;"", ""IdentifierDeclStatement""]], ["""", [62807, ""True"", ""DEBUG ( llvm :: dbgs ( ) << \""PROCESS \"" << printCtx . getID ( BB ) << \"" for RLE.\\n\"" )"", ""ExpressionStatement""]]]","[[[""Forwarder . mergePredecessorAvailSetAndValue""]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[null, ""Forwarder"", ""Forwarder"", ""getBlockState"", ""="", null]], [[""DEBUG""]]]",/data/download/swift/apple_swift15_new.cpp,1472,64
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,-,"[""69169"", ""True"", ""ExpressionStatement"", ""llvm :: dbgs ( ) << \""RLE START\\n\""""]","[[[""False""], [69281, ""True"", ""Kind == ProcessKind :: ProcessNone"", ""Condition""]]]","[["""", [69176, ""True"", ""("", ""Statement""]], ["""", [69177, ""True"", ""DEBUG"", ""Statement""]], ["""", [69179, ""True"", ""BBToLocState [ & B ] . init ( & B , LocationVault . size ( ) , Optimistic && BBToProcess . find ( & B ) != BBToProcess . end ( ) )"", ""ExpressionStatement""]], ["""", [69221, ""True"", ""BBToLocState [ & B ] = BlockState ( )"", ""ExpressionStatement""]]]","[[[""ProcessKind"", ""ProcessKind :: ProcessNone"", ""==""]], [[""BBToLocState [ & B ] . init""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]], [[""BBToLocState"", ""&"", ""B"", null, null, ""BlockState"", ""=""]]]",/data/download/swift/apple_swift15_old.cpp,1481,8
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,-,"[""69114"", ""True"", ""ExpressionStatement"", ""getLocation ( i ) . print ( llvm :: dbgs ( ) , & Fn -> getModule ( ) )""]","[[[""True""], [69152, ""True"", ""i < LocationVault . size ( )"", ""Condition""]], [[""True"", ""False""], [69281, ""True"", ""Kind == ProcessKind :: ProcessNone"", ""Condition""]]]","[["""", [69140, ""True"", ""llvm :: dbgs ( ) << \""LSLocation #\"" << i"", ""ExpressionStatement""]], ["""", [69149, ""True"", ""++ i"", ""UnaryExpression""]], ["""", [69161, ""True"", ""unsigned i = 0 ;"", ""ForInit""]], ["""", [69114, ""True"", ""getLocation ( i ) . print ( llvm :: dbgs ( ) , & Fn -> getModule ( ) )"", ""ExpressionStatement""]], ["""", [69169, ""True"", ""llvm :: dbgs ( ) << \""RLE START\\n\"""", ""ExpressionStatement""]]]","[[[""i"", ""LocationVault . size"", ""<""]], [[""ProcessKind"", ""ProcessKind :: ProcessNone"", ""==""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[null, ""i""]], [[null, ""i""]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[""getLocation ( i ) . print""]], [[""llvm :: dbgs"", ""\""RLE START\\n\"""", ""<<""]], [[""llvm :: dbgs"", ""\""RLE START\\n\"""", ""<<""]], [[""llvm :: dbgs"", ""\""RLE START\\n\"""", ""<<""]]]",/data/download/swift/apple_swift15_old.cpp,1484,48
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""63139"", ""True"", ""UnaryExpression"", ""++ i""]","[[[""True""], [63142, ""True"", ""i < LocationVault . size ( )"", ""Condition""]], [[""True"", ""False""], [63264, ""True"", ""Kind == ProcessKind :: ProcessNone"", ""Condition""]]]","[["""", [63104, ""True"", ""getLocation ( i ) . print ( llvm :: dbgs ( ) , & Fn -> getModule ( ) )"", ""ExpressionStatement""]], ["""", [63130, ""True"", ""llvm :: dbgs ( ) << \""LSLocation #\"" << i"", ""ExpressionStatement""]], ["""", [63139, ""True"", ""++ i"", ""UnaryExpression""]], ["""", [63151, ""True"", ""unsigned i = 0 ;"", ""ForInit""]]]","[[[""i"", ""LocationVault . size"", ""<""]], [[""ProcessKind"", ""ProcessKind :: ProcessNone"", ""==""]], [[""getLocation ( i ) . print""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[null, ""i""]], [[null, ""i""]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]]]",/data/download/swift/apple_swift15_new.cpp,1550,48
[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"[""63104"", ""True"", ""ExpressionStatement"", ""getLocation ( i ) . print ( llvm :: dbgs ( ) , & Fn -> getModule ( ) )""]","[[[""True""], [63142, ""True"", ""i < LocationVault . size ( )"", ""Condition""]], [[""True"", ""False""], [63264, ""True"", ""Kind == ProcessKind :: ProcessNone"", ""Condition""]]]","[["""", [63130, ""True"", ""llvm :: dbgs ( ) << \""LSLocation #\"" << i"", ""ExpressionStatement""]], ["""", [63139, ""True"", ""++ i"", ""UnaryExpression""]], ["""", [63151, ""True"", ""unsigned i = 0 ;"", ""ForInit""]], ["""", [63104, ""True"", ""getLocation ( i ) . print ( llvm :: dbgs ( ) , & Fn -> getModule ( ) )"", ""ExpressionStatement""]], ["""", [63159, ""True"", ""("", ""Statement""]]]","[[[""i"", ""LocationVault . size"", ""<""]], [[""ProcessKind"", ""ProcessKind :: ProcessNone"", ""==""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[""llvm :: dbgs"", ""\""LSLocation #\"""", ""i"", ""<<"", ""<<""]], [[null, ""i""]], [[null, ""i""]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[null, ""i"", ""i"", ""0"", ""="", null, null]], [[""getLocation ( i ) . print""]]]",/data/download/swift/apple_swift15_new.cpp,1552,48
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""69617"", ""True"", ""Parameter"", ""raw_ostream & OS""]",[],"[["""", [69658, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,113,60
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""69676"", ""True"", ""ExpressionStatement"", ""i . print ( OS )""]",[],"[["""", [69666, ""True"", ""SILPrintContext :: ID i"", ""Parameter""]], ["""", [69669, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [69685, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""i""]], [[null, ""i""]], [[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,127,85
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,"[""89145"", ""True"", ""ExpressionStatement"", ""* this << \"":\""""]",[],"[["""", [89151, ""True"", ""printBlockArguments ( BB )"", ""ExpressionStatement""]], ["""", [89158, ""True"", ""* this << getID ( BB )"", ""ExpressionStatement""]], ["""", [89169, ""True"", ""printBlockArgumentUses ( BB )"", ""ExpressionStatement""]], ["""", [89002, ""True"", ""const SILBasicBlock * BB"", ""Parameter""]]]","[[[""printBlockArguments""]], [[""*"", ""this"", null, ""getID"", ""<<""]], [[""*"", ""this"", null, ""getID"", ""<<""]], [[""*"", ""this"", null, ""getID"", ""<<""]], [[""*"", ""this"", null, ""getID"", ""<<""]], [[""*"", ""this"", null, ""getID"", ""<<""]], [[""printBlockArgumentUses""]], [[null, ""BB""]], [[null, ""BB""]]]",/data/download/swift/apple_swift16_old.cpp,554,86
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""71820"", ""True"", ""ExpressionStatement"", ""printBlockArguments ( BB )""]",[],"[["""", [71827, ""True"", ""* this << Ctx . getID ( BB )"", ""ExpressionStatement""]], ["""", [71840, ""True"", ""printBlockArgumentUses ( BB )"", ""ExpressionStatement""]], ["""", [71669, ""True"", ""const SILBasicBlock * BB"", ""Parameter""]], ["""", [71847, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""*"", ""this"", null, ""Ctx . getID"", ""<<""]], [[""*"", ""this"", null, ""Ctx . getID"", ""<<""]], [[""*"", ""this"", null, ""Ctx . getID"", ""<<""]], [[""*"", ""this"", null, ""Ctx . getID"", ""<<""]], [[""*"", ""this"", null, ""Ctx . getID"", ""<<""]], [[""printBlockArgumentUses""]], [[null, ""BB""]], [[null, ""BB""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,540,86
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,"[""91201"", ""True"", ""ExpressionStatement"", ""* this << \"", error \"" << getID ( AI -> getErrorBB ( ) )""]",[],"[["""", [91219, ""True"", ""* this << \"", normal \"" << getID ( AI -> getNormalBB ( ) )"", ""ExpressionStatement""]], ["""", [91237, ""True"", ""* this << \"") : \"" << AI -> getCallee ( ) -> getType ( )"", ""ExpressionStatement""]], ["""", [91255, ""True"", """", ""ExpressionStatement""]], ["""", [91256, ""True"", "")"", ""Statement""]]]","[[[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]]]",/data/download/swift/apple_swift16_old.cpp,956,65
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""73892"", ""True"", ""ExpressionStatement"", ""* this << \"", error \"" << Ctx . getID ( AI -> getErrorBB ( ) )""]",[],"[["""", [73912, ""True"", ""* this << \"", normal \"" << Ctx . getID ( AI -> getNormalBB ( ) )"", ""ExpressionStatement""]], ["""", [73932, ""True"", ""* this << \"") : \"" << AI -> getCallee ( ) -> getType ( )"", ""ExpressionStatement""]], ["""", [73950, ""True"", """", ""ExpressionStatement""]], ["""", [73951, ""True"", "")"", ""Statement""]]]","[[[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"", normal \"""", ""Ctx . getID"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]], [[""*"", ""this"", null, ""\"") : \"""", ""AI -> getCallee ( ) -> getType"", ""<<"", ""<<""]]]",/data/download/swift/apple_swift16_new.cpp,942,65
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""81562"", ""True"", ""Parameter"", ""SILBasicBlock * bb""]",[],"[["""", [81565, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [81586, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,1761,85
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,"[""98925"", ""True"", ""ExpressionStatement"", ""OS << SILPrinter ( Ctx ) . getID ( this )""]",[],"[["""", [98941, ""True"", ""SILPrintContext Ctx ( OS ) ;"", ""IdentifierDeclStatement""]], ["""", [98917, ""True"", ""bool PrintType"", ""Parameter""]], ["""", [98920, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [98946, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Ctx"", ""OS"", null]], [[null, ""Ctx"", ""OS"", null]], [[null, ""Ctx"", ""OS"", null]], [[null, ""Ctx"", ""OS"", null]], [[null, ""PrintType""]], [[null, ""PrintType""]], [[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_old.cpp,1801,85
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""81602"", ""True"", ""ExpressionStatement"", ""printBlockID ( OS , this )""]",[],"[["""", [81594, ""True"", ""bool PrintType"", ""Parameter""]], ["""", [81597, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [81611, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""PrintType""]], [[null, ""PrintType""]], [[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,1767,85
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""81721"", ""True"", ""Parameter"", ""SILPrintContext & Ctx""]",[],"[["""", [81724, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [81743, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,1794,85
SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"[""81729"", ""True"", ""ExpressionStatement"", ""SILPrinter ( Ctx ) . print ( this )""]",[],"[["""", [81721, ""True"", ""SILPrintContext & Ctx"", ""Parameter""]], ["""", [81724, ""True"", ""raw_ostream & OS"", ""Parameter""]], ["""", [81743, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Ctx""]], [[null, ""Ctx""]], [[null, ""OS""]], [[null, ""OS""]], [[""ENTRY""]]]",/data/download/swift/apple_swift16_new.cpp,1795,85
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""99662"", ""True"", ""Parameter"", ""inner_t Inner""]",[],"[["""", [99675, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,231,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""99689"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [99698, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,234,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""99712"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [99721, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,239,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""99735"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [99744, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,244,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""100147"", ""True"", ""Statement"", "")""]","[[[""True""], [100155, ""True"", ""! Result . HasCompatibleOwnership"", ""Condition""]]]","[["""", [100148, ""True"", ""("", ""Statement""]], ["""", [100149, ""True"", ""]"", ""Statement""]], ["""", [100150, ""True"", ""&"", ""Statement""]], ["""", [100151, ""True"", ""["", ""Statement""]]]","[[[""!"", ""Result"", ""HasCompatibleOwnership"", null, null]]]",/data/download/swift/apple_swift17_new.cpp,341,37
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""102896"", ""True"", ""ExpressionStatement"", ""assert ( Value && \""Can not initialize a checker with an empty SILValue\"" )""]",[],"[["""", [102880, ""True"", ""llvm :: SmallPtrSet < SILBasicBlock * , 32 > & VisitedBlocks"", ""Parameter""]], ["""", [102883, ""True"", ""ErrorBehaviorKind ErrorBehavior"", ""Parameter""]], ["""", [102886, ""True"", ""SILValue V"", ""Parameter""]], ["""", [102889, ""True"", ""const TransitivelyUnreachableBlocksInfo & TUB"", ""Parameter""]]]","[[[null, ""VisitedBlocks""]], [[null, ""VisitedBlocks""]], [[null, ""ErrorBehavior""]], [[null, ""ErrorBehavior""]], [[null, ""V""]], [[null, ""V""]], [[null, ""TUB""]], [[null, ""TUB""]]]",/data/download/swift/apple_swift17_new.cpp,1258,70
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103032"", ""True"", ""ExpressionStatement"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )""]",[],"[["""", [103046, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,1281,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103018"", ""True"", ""ExpressionStatement"", ""assert ( Result . getValue ( ) && \""Can not call if check() returned false\"" )""]",[],"[["""", [103032, ""True"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )"", ""ExpressionStatement""]], ["""", [103046, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,1282,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103112"", ""True"", ""ExpressionStatement"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )""]",[],"[["""", [103126, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,1295,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103098"", ""True"", ""ExpressionStatement"", ""assert ( Result . getValue ( ) && \""Can not call if check() returned false\"" )""]",[],"[["""", [103112, ""True"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )"", ""ExpressionStatement""]], ["""", [103126, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[""ENTRY""]]]",/data/download/swift/apple_swift17_new.cpp,1296,60
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103365"", ""True"", ""Statement"", "")""]","[[[""True""], [103374, ""True"", ""LifetimeEndingUser . isCondBranchUser ( )"", ""Condition""]], [[""False""], [103393, ""True"", ""Iter == BlocksWithNonLifetimeEndingUses . end ( )"", ""Condition""]]]","[["""", [103366, ""True"", ""("", ""Statement""]], ["""", [103367, ""True"", ""]"", ""Statement""]], ["""", [103368, ""True"", ""&"", ""Statement""]], ["""", [103369, ""True"", ""["", ""Statement""]]]","[[[null]], [[""Iter"", ""BlocksWithNonLifetimeEndingUses . end"", ""==""]]]",/data/download/swift/apple_swift17_new.cpp,1374,82
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103234"", ""True"", ""Statement"", ""]""]",[],"[["""", [103235, ""True"", ""&"", ""Statement""]], ["""", [103236, ""True"", ""["", ""Statement""]], ["""", [103237, ""True"", ""("", ""Statement""]], ["""", [103238, ""True"", ""handleError"", ""Statement""]]]",[],/data/download/swift/apple_swift17_new.cpp,1400,9
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"[""109978"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""Block: bb\"" << UserBlock -> getDebugID ( ) << \""\\n\\n\""""]","[[[""True"", ""False""], [110050, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [109995, ""True"", ""llvm :: errs ( ) << \""User: \"" << * LifetimeEndingUser . getValue ( )"", ""ExpressionStatement""]], ["""", [110018, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [110018, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [109965, ""True"", ""bool ShouldInsert"", ""Parameter""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[null, ""ShouldInsert""]], [[null, ""ShouldInsert""]]]",/data/download/swift/apple_swift17_old.cpp,1308,88
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103518"", ""True"", ""Statement"", ""]""]","[[[""False""], [103528, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [103519, ""True"", ""&"", ""Statement""]], ["""", [103520, ""True"", ""["", ""Statement""]], ["""", [103521, ""True"", ""("", ""Statement""]], ["""", [103522, ""True"", ""handleError"", ""Statement""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]]]",/data/download/swift/apple_swift17_new.cpp,1422,88
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""103449"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""Block: bb\"" << UserBlock -> getDebugID ( ) << \""\\n\\n\""""]","[[[""True"", ""False""], [103528, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [103466, ""True"", ""llvm :: errs ( ) << \""User: \"" << * LifetimeEndingUser . getValue ( )"", ""ExpressionStatement""]], ["""", [103489, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [103489, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [103518, ""True"", ""]"", ""Statement""]], ["""", [103518, ""True"", ""]"", ""Statement""]], ["""", [103519, ""True"", ""&"", ""Statement""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]]]",/data/download/swift/apple_swift17_new.cpp,1428,88
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104201"", ""True"", ""Statement"", ""]""]","[[[""False""], [104211, ""True"", ""TUB . isUnreachable ( Arg -> getParent ( ) )"", ""Condition""]], [[""case ValueOwnershipKind :: Owned"", ""case ValueOwnershipKind :: Any""], [104247, ""True"", ""Arg -> getOwnershipKind ( )"", ""Condition""]]]","[["""", [104202, ""True"", ""&"", ""Statement""]], ["""", [104203, ""True"", ""["", ""Statement""]], ["""", [104204, ""True"", ""("", ""Statement""]], ["""", [104205, ""True"", ""handleError"", ""Statement""]]]","[[[null]], [[null]]]",/data/download/swift/apple_swift17_new.cpp,1574,82
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104308"", ""True"", ""Statement"", ""]""]","[[[""True""], [104315, ""True"", ""! isValueAddressOrTrivial ( Value , Mod )"", ""Condition""]], [[""False""], [104369, ""True"", ""TUB . isUnreachable ( ParentBlock )"", ""Condition""]], [[""False""], [104393, ""True"", ""Value . getOwnershipKind ( ) == ValueOwnershipKind :: Unowned"", ""Condition""]], [[""False""], [104405, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]]]","[["""", [104309, ""True"", ""&"", ""Statement""]], ["""", [104310, ""True"", ""["", ""Statement""]], ["""", [104311, ""True"", ""("", ""Statement""]], ["""", [104312, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""isValueAddressOrTrivial"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Unowned"", ""==""]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]]]",/data/download/swift/apple_swift17_new.cpp,1612,82
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104551"", ""True"", ""Statement"", ""]""]","[[[""False""], [104560, ""True"", ""Arg -> getOwnershipKind ( ) != ValueOwnershipKind :: Guaranteed"", ""Condition""]]]","[["""", [104552, ""True"", ""&"", ""Statement""]], ["""", [104553, ""True"", ""["", ""Statement""]], ["""", [104554, ""True"", ""("", ""Statement""]], ["""", [104555, ""True"", ""handleError"", ""Statement""]]]","[[[""Arg -> getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""!=""]]]",/data/download/swift/apple_swift17_new.cpp,1630,51
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104650"", ""True"", ""Statement"", ""]""]",[],"[["""", [104651, ""True"", ""&"", ""Statement""]], ["""", [104652, ""True"", ""["", ""Statement""]], ["""", [104653, ""True"", ""("", ""Statement""]], ["""", [104654, ""True"", ""handleError"", ""Statement""]]]",[],/data/download/swift/apple_swift17_new.cpp,1644,10
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104848"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [104856, ""True"", ""doesBlockDoubleConsume ( UserBlock , User , true )"", ""Condition""]], [[""False"", ""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [104903, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104935, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[""False""], [104976, ""True"", ""LifetimeEndingUsers . empty ( ) && checkValueWithoutLifetimeEndingUses ( )"", ""Condition""]], [[""False""], [104935, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]]]",[],"[[[null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[null]], [[null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]]]",/data/download/swift/apple_swift17_new.cpp,1730,67
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104829"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [104837, ""True"", ""doesBlockContainUseAfterFree ( User , UserBlock )"", ""Condition""]], [[""True"", ""False"", ""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [104903, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104935, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[""False""], [104976, ""True"", ""LifetimeEndingUsers . empty ( ) && checkValueWithoutLifetimeEndingUses ( )"", ""Condition""]], [[""False""], [104935, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]]]",[],"[[[null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[null]], [[null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]]]",/data/download/swift/apple_swift17_new.cpp,1735,67
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""104697"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [104705, ""True"", ""doesBlockDoubleConsume ( PredBlock , User )"", ""Condition""]], [[""False""], [104743, ""True"", ""LifetimeEndingUsers . size ( ) == 1 && LifetimeEndingUsers [ 0 ] . getParent ( ) == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [104903, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104935, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [104914, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]]]",[],"[[[null]], [[""LifetimeEndingUsers . size"", ""1"", ""==""]], [[""LifetimeEndingUsers [ 0 ] . getParent"", ""Value -> getParentBlock"", ""==""]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]]]",/data/download/swift/apple_swift17_new.cpp,1775,67
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105263"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [105271, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[""False""], [105292, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [105313, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]], [[""True""], [105324, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]]]","[["""", [105264, ""True"", "")"", ""Statement""]], ["""", [105266, ""True"", ""]"", ""Statement""]], ["""", [105267, ""True"", ""["", ""Statement""]], ["""", [105268, ""True"", ""("", ""Statement""]]]","[[[null]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[null]], [[null]]]",/data/download/swift/apple_swift17_new.cpp,1846,67
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"[""111724"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""        bb\"" << BB -> getDebugID ( )""]","[[[""True""], [111777, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]], [[""True"", ""True"", ""True"", ""True"", ""False""], [111957, ""True"", ""! Worklist . empty ( )"", ""Condition""]], [[""False"", ""True"", ""True"", ""True"", ""True""], [111885, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]], [[], [111874, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]], [[], [111832, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[], [111830, ""True"", ""IsSILOwnershipVerifierTestingEnabled"", ""Condition""]], [[], [111853, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""True""], [111957, ""True"", ""! Worklist . empty ( )"", ""Condition""]], [[""True""], [111885, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]], [[""False""], [111853, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [111832, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[""False""], [111874, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]]]",[],"[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]], [[""!"", ""Worklist . empty"", null]], [[null]], [[null]], [[null]], [[null]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[""!"", ""Worklist . empty"", null]], [[null]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[null]], [[null]]]",/data/download/swift/apple_swift17_old.cpp,1760,68
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105213"", ""True"", ""Statement"", ""]""]","[[[""True""], [105219, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]]]","[["""", [105214, ""True"", ""&"", ""Statement""]], ["""", [105215, ""True"", ""["", ""Statement""]], ["""", [105216, ""True"", ""("", ""Statement""]], ["""", [105217, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]]]",/data/download/swift/apple_swift17_new.cpp,1861,79
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105160"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""        bb\"" << BB -> getDebugID ( )""]","[[[""True""], [105219, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]]]","[["""", [105174, ""True"", "")"", ""Statement""]], ["""", [105175, ""True"", ""SuccessorBlocksThatMustBeVisited"", ""Statement""]], ["""", [105176, ""True"", ""BB :"", ""Label""]], ["""", [105178, ""True"", ""*"", ""Statement""]]]","[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]], [[""BB""]]]",/data/download/swift/apple_swift17_new.cpp,1867,79
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105132"", ""True"", ""Statement"", ""]""]","[[[""True""], [105138, ""True"", ""! BlocksWithNonLifetimeEndingUses . empty ( )"", ""Condition""]]]","[["""", [105133, ""True"", ""&"", ""Statement""]], ["""", [105134, ""True"", ""["", ""Statement""]], ["""", [105135, ""True"", ""("", ""Statement""]], ["""", [105136, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""BlocksWithNonLifetimeEndingUses . empty"", null]]]",/data/download/swift/apple_swift17_new.cpp,1877,52
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105843"", ""True"", ""ExpressionStatement"", ""assert ( F && \""Instructions and arguments should have a function\"" )""]","[[[""False""], [105867, ""True"", ""isa < SILUndef > ( Value )"", ""Condition""]]]","[["""", [105852, ""True"", ""SILFunction * F = Value -> getFunction ( ) ;"", ""IdentifierDeclStatement""]], ["""", [105873, ""True"", ""LiveBlocks . clear ( )"", ""ExpressionStatement""]], ["""", [105880, ""True"", ""LifetimeEndingUsers . clear ( )"", ""ExpressionStatement""]]]","[[[""isa"", ""SILUndef"", ""SILValue"", "">"", ""<""]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[""LiveBlocks . clear""]], [[""LifetimeEndingUsers . clear""]]]",/data/download/swift/apple_swift17_new.cpp,1985,30
Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"[""105828"", ""True"", ""IdentifierDeclStatement"", ""ErrorBehaviorKind ErrorBehavior ( ErrorBehaviorKind :: ReturnFalse ) ;""]","[[[""False""], [105836, ""True"", ""F -> hasUnqualifiedOwnership ( )"", ""Condition""]], [[""False""], [105867, ""True"", ""isa < SILUndef > ( Value )"", ""Condition""]]]","[["""", [105843, ""True"", ""assert ( F && \""Instructions and arguments should have a function\"" )"", ""ExpressionStatement""]], ["""", [105852, ""True"", ""SILFunction * F = Value -> getFunction ( ) ;"", ""IdentifierDeclStatement""]]]","[[[null]], [[""isa"", ""SILUndef"", ""SILValue"", "">"", ""<""]], [[""assert""]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]]]",/data/download/swift/apple_swift17_new.cpp,1992,68
"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""118873"", ""True"", ""ExpressionStatement"", ""assert ( F && \""Instructions and arguments should have a function\"" )""]","[[[""False""], [118897, ""True"", ""isa < SILUndef > ( Value )"", ""Condition""]]]","[["""", [118882, ""True"", ""SILFunction * F = Value -> getFunction ( ) ;"", ""IdentifierDeclStatement""]], ["""", [118903, ""True"", ""LiveBlocks . clear ( )"", ""ExpressionStatement""]], ["""", [118910, ""True"", ""LifetimeEndingUsers . clear ( )"", ""ExpressionStatement""]]]","[[[""isa"", ""SILUndef"", ""SILValue"", "">"", ""<""]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[""LiveBlocks . clear""]], [[""LifetimeEndingUsers . clear""]]]",/data/download/swift/apple_swift18_new.cpp,1991,30
"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""118858"", ""True"", ""IdentifierDeclStatement"", ""ErrorBehaviorKind ErrorBehavior ( ErrorBehaviorKind :: ReturnFalse ) ;""]","[[[""False""], [118866, ""True"", ""F -> hasUnqualifiedOwnership ( )"", ""Condition""]], [[""False""], [118897, ""True"", ""isa < SILUndef > ( Value )"", ""Condition""]]]","[["""", [118873, ""True"", ""assert ( F && \""Instructions and arguments should have a function\"" )"", ""ExpressionStatement""]], ["""", [118882, ""True"", ""SILFunction * F = Value -> getFunction ( ) ;"", ""IdentifierDeclStatement""]]]","[[[null]], [[""isa"", ""SILUndef"", ""SILValue"", "">"", ""<""]], [[""assert""]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]], [[null, ""F"", ""F"", ""Value -> getFunction"", ""="", null]]]",/data/download/swift/apple_swift18_new.cpp,1998,68
Merge pull request #8571 from DougGregor/where-clause-validation,lib/AST/GenericSignatureBuilder.cpp,+,"[""134825"", ""True"", ""Condition"", ""! Req -> getFirstType ( ) -> hasError ( ) && ! Req -> getSecondType ( ) -> hasError ( )""]","[[[""case RequirementReprKind :: SameType""], [134853, ""True"", ""! Req -> getFirstType ( ) -> hasTypeParameter ( ) && ! Req -> getSecondType ( ) -> hasTypeParameter ( )"", ""Condition""]], [[""case RequirementReprKind :: SameType""], [135160, ""True"", ""Req -> getKind ( )"", ""Condition""]]]","[["""", [134881, ""True"", ""case RequirementReprKind :: SameType :"", ""Label""]], ["""", [135167, ""True"", """", ""ExpressionStatement""]]]","[[[""! Req -> getFirstType ( ) -> hasTypeParameter ( ) && ! Req -> getSecondType ( ) -> hasTypeParameter ( )"", ""RequirementReprKind :: SameType"", ""==""]], [[""Req -> getKind ( )"", ""RequirementReprKind :: SameType"", ""==""]], [[""RequirementReprKind :: SameType""]]]",/data/download/swift/apple_swift19_new.cpp,2773,38
"[Type checker] Continue validating requirements after an error.

We want to validate both type in same-type or conformance constraints,
even when the first type is ill-formed, so we don't leave null types
around for later phases to crash on.

Fixes rdar://problem/31093854.",lib/AST/GenericSignatureBuilder.cpp,+,"[""210559"", ""True"", ""Condition"", ""! Req -> getFirstType ( ) -> hasError ( ) && ! Req -> getSecondType ( ) -> hasError ( )""]","[[[""case RequirementReprKind :: SameType""], [210587, ""True"", ""! Req -> getFirstType ( ) -> hasTypeParameter ( ) && ! Req -> getSecondType ( ) -> hasTypeParameter ( )"", ""Condition""]], [[""case RequirementReprKind :: SameType""], [210894, ""True"", ""Req -> getKind ( )"", ""Condition""]]]","[["""", [210615, ""True"", ""case RequirementReprKind :: SameType :"", ""Label""]], ["""", [210901, ""True"", """", ""ExpressionStatement""]]]","[[[""! Req -> getFirstType ( ) -> hasTypeParameter ( ) && ! Req -> getSecondType ( ) -> hasTypeParameter ( )"", ""RequirementReprKind :: SameType"", ""==""]], [[""Req -> getKind ( )"", ""RequirementReprKind :: SameType"", ""==""]], [[""RequirementReprKind :: SameType""]]]",/data/download/swift/apple_swift20_new.cpp,2773,38
"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""239937"", ""True"", ""ExpressionStatement"", ""assert ( Value && \""Can not initialize a checker with an empty SILValue\"" )""]",[],"[["""", [239924, ""True"", ""ErrorBehaviorKind ErrorBehavior"", ""Parameter""]], ["""", [239927, ""True"", ""SILValue V"", ""Parameter""]], ["""", [239930, ""True"", ""const TransitivelyUnreachableBlocksInfo & TUB"", ""Parameter""]], ["""", [239933, ""True"", ""SILModule & M"", ""Parameter""]]]","[[[null, ""ErrorBehavior""]], [[null, ""ErrorBehavior""]], [[null, ""V""]], [[null, ""V""]], [[null, ""TUB""]], [[null, ""TUB""]], [[null, ""M""]], [[null, ""M""]]]",/data/download/swift/apple_swift21_new.cpp,1259,72
"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""240072"", ""True"", ""ExpressionStatement"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )""]",[],"[["""", [240086, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift21_new.cpp,1282,60
"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""240058"", ""True"", ""ExpressionStatement"", ""assert ( Result . getValue ( ) && \""Can not call if check() returned false\"" )""]",[],"[["""", [240072, ""True"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )"", ""ExpressionStatement""]], ["""", [240086, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[""ENTRY""]]]",/data/download/swift/apple_swift21_new.cpp,1283,60
"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""240152"", ""True"", ""ExpressionStatement"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )""]",[],"[["""", [240166, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift21_new.cpp,1296,60
"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""240138"", ""True"", ""ExpressionStatement"", ""assert ( Result . getValue ( ) && \""Can not call if check() returned false\"" )""]",[],"[["""", [240152, ""True"", ""assert ( Result . hasValue ( ) && \""Can not call until check() is called\"" )"", ""ExpressionStatement""]], ["""", [240166, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[""ENTRY""]]]",/data/download/swift/apple_swift21_new.cpp,1297,60
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""249883"", ""True"", ""Parameter"", ""inner_t Inner""]",[],"[["""", [249896, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift22_new.cpp,233,60
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""249910"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [249919, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift22_new.cpp,236,60
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""249933"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [249942, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift22_new.cpp,241,60
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""249956"", ""True"", ""ExpressionStatement"", ""assert ( Value != Invalid )""]",[],"[["""", [249965, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift22_new.cpp,246,60
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""250368"", ""True"", ""Statement"", "")""]","[[[""True""], [250376, ""True"", ""! Result . HasCompatibleOwnership"", ""Condition""]]]","[["""", [250369, ""True"", ""("", ""Statement""]], ["""", [250370, ""True"", ""]"", ""Statement""]], ["""", [250371, ""True"", ""&"", ""Statement""]], ["""", [250372, ""True"", ""["", ""Statement""]]]","[[[""!"", ""Result"", ""HasCompatibleOwnership"", null, null]]]",/data/download/swift/apple_swift22_new.cpp,343,37
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""253379"", ""True"", ""Statement"", "")""]","[[[""True""], [253388, ""True"", ""LifetimeEndingUser . isCondBranchUser ( )"", ""Condition""]], [[""False""], [253407, ""True"", ""Iter == BlocksWithNonLifetimeEndingUses . end ( )"", ""Condition""]]]","[["""", [253380, ""True"", ""("", ""Statement""]], ["""", [253381, ""True"", ""]"", ""Statement""]], ["""", [253382, ""True"", ""&"", ""Statement""]], ["""", [253383, ""True"", ""["", ""Statement""]]]","[[[null]], [[""Iter"", ""BlocksWithNonLifetimeEndingUses . end"", ""==""]]]",/data/download/swift/apple_swift22_new.cpp,1329,82
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""253248"", ""True"", ""Statement"", ""]""]",[],"[["""", [253249, ""True"", ""&"", ""Statement""]], ["""", [253250, ""True"", ""["", ""Statement""]], ["""", [253251, ""True"", ""("", ""Statement""]], ["""", [253252, ""True"", ""handleError"", ""Statement""]]]",[],/data/download/swift/apple_swift22_new.cpp,1355,11
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"[""259830"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""Block: bb\"" << UserBlock -> getDebugID ( ) << \""\\n\\n\""""]","[[[""True"", ""False""], [259902, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [259847, ""True"", ""llvm :: errs ( ) << \""User: \"" << * LifetimeEndingUser . getValue ( )"", ""ExpressionStatement""]], ["""", [259870, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [259870, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [259817, ""True"", ""bool ShouldInsert"", ""Parameter""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[null, ""ShouldInsert""]], [[null, ""ShouldInsert""]]]",/data/download/swift/apple_swift22_old.cpp,1308,88
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""253532"", ""True"", ""Statement"", ""]""]","[[[""False""], [253542, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [253533, ""True"", ""&"", ""Statement""]], ["""", [253534, ""True"", ""["", ""Statement""]], ["""", [253535, ""True"", ""("", ""Statement""]], ["""", [253536, ""True"", ""handleError"", ""Statement""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]]]",/data/download/swift/apple_swift22_new.cpp,1377,88
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""253463"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""Block: bb\"" << UserBlock -> getDebugID ( ) << \""\\n\\n\""""]","[[[""True"", ""False""], [253542, ""True"", ""( ShouldInsert && BlocksWithLifetimeEndingUses . insert ( UserBlock ) . second ) || ! BlocksWithLifetimeEndingUses . count ( UserBlock )"", ""Condition""]]]","[["""", [253480, ""True"", ""llvm :: errs ( ) << \""User: \"" << * LifetimeEndingUser . getValue ( )"", ""ExpressionStatement""]], ["""", [253503, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [253503, ""True"", ""llvm :: errs ( ) << \""Function: '\"" << Value -> getFunction ( ) -> getName ( ) << \""'\\n\"" << \""Found over consume?!\\n\"" << \""Value: \"" << * Value"", ""ExpressionStatement""]], ["""", [253532, ""True"", ""]"", ""Statement""]], ["""", [253532, ""True"", ""]"", ""Statement""]], ["""", [253533, ""True"", ""&"", ""Statement""]]]","[[[""bool"", ""BlocksWithLifetimeEndingUses . insert"", ""second"", null, ""&&"", ""!"", ""BlocksWithLifetimeEndingUses . count"", null, ""||""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""User: \"""", ""*"", ""LifetimeEndingUser . getValue"", null, ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]], [[""llvm :: errs"", ""\""Function: '\"""", ""Value -> getFunction ( ) -> getName"", ""\""'\\n\"""", ""\""Found over consume?!\\n\"""", ""\""Value: \"""", ""*"", ""Value"", null, ""<<"", ""<<"", ""<<"", ""<<"", ""<<"", ""<<""]]]",/data/download/swift/apple_swift22_new.cpp,1383,88
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254215"", ""True"", ""Statement"", ""]""]","[[[""False""], [254225, ""True"", ""TUB . isUnreachable ( Arg -> getParent ( ) )"", ""Condition""]], [[""case ValueOwnershipKind :: Owned"", ""case ValueOwnershipKind :: Any""], [254261, ""True"", ""Arg -> getOwnershipKind ( )"", ""Condition""]]]","[["""", [254216, ""True"", ""&"", ""Statement""]], ["""", [254217, ""True"", ""["", ""Statement""]], ["""", [254218, ""True"", ""("", ""Statement""]], ["""", [254219, ""True"", ""handleError"", ""Statement""]]]","[[[null]], [[null]]]",/data/download/swift/apple_swift22_new.cpp,1529,82
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254322"", ""True"", ""Statement"", ""]""]","[[[""True""], [254329, ""True"", ""! isValueAddressOrTrivial ( Value , Mod )"", ""Condition""]], [[""False""], [254383, ""True"", ""TUB . isUnreachable ( ParentBlock )"", ""Condition""]], [[""False""], [254407, ""True"", ""Value . getOwnershipKind ( ) == ValueOwnershipKind :: Unowned"", ""Condition""]], [[""False""], [254419, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]]]","[["""", [254323, ""True"", ""&"", ""Statement""]], ["""", [254324, ""True"", ""["", ""Statement""]], ["""", [254325, ""True"", ""("", ""Statement""]], ["""", [254326, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""isValueAddressOrTrivial"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Unowned"", ""==""]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]]]",/data/download/swift/apple_swift22_new.cpp,1567,82
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254565"", ""True"", ""Statement"", ""]""]","[[[""False""], [254574, ""True"", ""Arg -> getOwnershipKind ( ) != ValueOwnershipKind :: Guaranteed"", ""Condition""]]]","[["""", [254566, ""True"", ""&"", ""Statement""]], ["""", [254567, ""True"", ""["", ""Statement""]], ["""", [254568, ""True"", ""("", ""Statement""]], ["""", [254569, ""True"", ""handleError"", ""Statement""]]]","[[[""Arg -> getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""!=""]]]",/data/download/swift/apple_swift22_new.cpp,1585,51
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254664"", ""True"", ""Statement"", ""]""]",[],"[["""", [254665, ""True"", ""&"", ""Statement""]], ["""", [254666, ""True"", ""["", ""Statement""]], ["""", [254667, ""True"", ""("", ""Statement""]], ["""", [254668, ""True"", ""handleError"", ""Statement""]]]",[],/data/download/swift/apple_swift22_new.cpp,1599,12
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254862"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [254870, ""True"", ""doesBlockDoubleConsume ( UserBlock , User , true )"", ""Condition""]], [[""False"", ""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [254917, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254949, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[""False""], [254990, ""True"", ""LifetimeEndingUsers . empty ( ) && checkValueWithoutLifetimeEndingUses ( )"", ""Condition""]], [[""False""], [254949, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]]]",[],"[[[null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[null]], [[null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]]]",/data/download/swift/apple_swift22_new.cpp,1687,67
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254843"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [254851, ""True"", ""doesBlockContainUseAfterFree ( User , UserBlock )"", ""Condition""]], [[""True"", ""False"", ""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [254917, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254949, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[""False""], [254990, ""True"", ""LifetimeEndingUsers . empty ( ) && checkValueWithoutLifetimeEndingUses ( )"", ""Condition""]], [[""False""], [254949, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]]]",[],"[[[null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[null]], [[null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]]]",/data/download/swift/apple_swift22_new.cpp,1692,67
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""254711"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [254719, ""True"", ""doesBlockDoubleConsume ( PredBlock , User )"", ""Condition""]], [[""False""], [254757, ""True"", ""LifetimeEndingUsers . size ( ) == 1 && LifetimeEndingUsers [ 0 ] . getParent ( ) == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]], [[], [254917, ""True"", ""! isSubobjectProjectionWithLifetimeEndingUses ( Value , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254949, ""True"", ""! isGuaranteedFunctionArgWithLifetimeEndingUses ( Arg , LifetimeEndingUsers )"", ""Condition""]], [[""False""], [254928, ""True"", ""isOwnershipForwardingValue ( Value ) && Value . getOwnershipKind ( ) == ValueOwnershipKind :: Guaranteed"", ""Condition""]]]",[],"[[[null]], [[""LifetimeEndingUsers . size"", ""1"", ""==""]], [[""LifetimeEndingUsers [ 0 ] . getParent"", ""Value -> getParentBlock"", ""==""]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]], [[""!"", ""isSubobjectProjectionWithLifetimeEndingUses"", null]], [[""!"", ""isGuaranteedFunctionArgWithLifetimeEndingUses"", null]], [[null]], [[""Value . getOwnershipKind"", ""ValueOwnershipKind :: Guaranteed"", ""==""]]]",/data/download/swift/apple_swift22_new.cpp,1732,67
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""255285"", ""True"", ""ExpressionStatement"", """"]","[[[""True""], [255293, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[""False""], [255314, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [255335, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]], [[""True""], [255346, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]]]","[["""", [255286, ""True"", "")"", ""Statement""]], ["""", [255288, ""True"", ""]"", ""Statement""]], ["""", [255289, ""True"", ""["", ""Statement""]], ["""", [255290, ""True"", ""("", ""Statement""]]]","[[[null]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[null]], [[null]]]",/data/download/swift/apple_swift22_new.cpp,1803,67
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"[""261576"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""        bb\"" << BB -> getDebugID ( )""]","[[[""True""], [261629, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]], [[""True"", ""True"", ""True"", ""True"", ""False""], [261809, ""True"", ""! Worklist . empty ( )"", ""Condition""]], [[""False"", ""True"", ""True"", ""True"", ""True""], [261684, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[], [261726, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]], [[], [261682, ""True"", ""IsSILOwnershipVerifierTestingEnabled"", ""Condition""]], [[], [261737, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]], [[], [261705, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""False""], [261705, ""True"", ""BB == Value -> getParentBlock ( )"", ""Condition""]], [[""True""], [261737, ""True"", ""VisitedBlocks . count ( SuccBlock )"", ""Condition""]], [[""False""], [261684, ""True"", ""doesBlockDoubleConsume ( PredBlock )"", ""Condition""]], [[""True""], [261809, ""True"", ""! Worklist . empty ( )"", ""Condition""]], [[""False""], [261726, ""True"", ""TUB . isUnreachable ( SuccBlock )"", ""Condition""]]]",[],"[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]], [[""!"", ""Worklist . empty"", null]], [[null]], [[null]], [[null]], [[null]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[""SILBasicBlock *"", ""Value -> getParentBlock"", ""==""]], [[null]], [[null]], [[""!"", ""Worklist . empty"", null]], [[null]]]",/data/download/swift/apple_swift22_old.cpp,1760,68
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""255235"", ""True"", ""Statement"", ""]""]","[[[""True""], [255241, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]]]","[["""", [255236, ""True"", ""&"", ""Statement""]], ["""", [255237, ""True"", ""["", ""Statement""]], ["""", [255238, ""True"", ""("", ""Statement""]], ["""", [255239, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]]]",/data/download/swift/apple_swift22_new.cpp,1818,79
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""255182"", ""True"", ""ExpressionStatement"", ""llvm :: errs ( ) << \""        bb\"" << BB -> getDebugID ( )""]","[[[""True""], [255241, ""True"", ""! SuccessorBlocksThatMustBeVisited . empty ( )"", ""Condition""]]]","[["""", [255196, ""True"", "")"", ""Statement""]], ["""", [255197, ""True"", ""SuccessorBlocksThatMustBeVisited"", ""Statement""]], ["""", [255198, ""True"", ""BB :"", ""Label""]], ["""", [255200, ""True"", ""*"", ""Statement""]]]","[[[""!"", ""SuccessorBlocksThatMustBeVisited . empty"", null]], [[""BB""]]]",/data/download/swift/apple_swift22_new.cpp,1824,79
"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"[""255154"", ""True"", ""Statement"", ""]""]","[[[""True""], [255160, ""True"", ""! BlocksWithNonLifetimeEndingUses . empty ( )"", ""Condition""]]]","[["""", [255155, ""True"", ""&"", ""Statement""]], ["""", [255156, ""True"", ""["", ""Statement""]], ["""", [255157, ""True"", ""("", ""Statement""]], ["""", [255158, ""True"", ""handleError"", ""Statement""]]]","[[[""!"", ""BlocksWithNonLifetimeEndingUses . empty"", null]]]",/data/download/swift/apple_swift22_new.cpp,1834,52
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/ProtocolConformance.cpp,-,"[""269535"", ""True"", ""ExpressionStatement"", ""assert ( ( conforms || specializedType -> isTypeVariableOrMember ( ) || specializedType -> isTypeParameter ( ) || specializedType -> hasError ( ) ) && \""Improperly checked substitution\"" )""]","[[[""False""], [269626, ""True"", ""specializedType . getPointer ( ) == genericWitness . getReplacement ( ) . getPointer ( )"", ""Condition""]], [[""False"", ""True""], [269743, ""True"", ""known != TypeWitnesses . end ( )"", ""Condition""]]]","[["""", [269565, ""True"", ""conforms = conformingModule -> lookupConformance ( specializedType , proto , resolver )"", ""ExpressionStatement""]], ["""", [269580, ""True"", ""auto"", ""Statement""]], ["""", [269581, ""True"", "")"", ""Statement""]], ["""", [269582, ""True"", "")"", ""Statement""]]]","[[[""specializedType . getPointer"", ""genericWitness . getReplacement ( ) . getPointer"", ""==""]], [[""known"", ""TypeWitnesses . end"", ""!=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]]]",/data/download/swift/apple_swift23_old.cpp,596,53
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/SubstitutionMap.cpp,-,"[""274200"", ""True"", ""Statement"", ""&&""]",[],"[["""", [274201, ""True"", "")"", ""Statement""]], ["""", [274202, ""True"", ""("", ""Statement""]], ["""", [274203, ""True"", ""hasArchetype"", ""Statement""]], ["""", [274204, ""True"", ""->"", ""Statement""]]]",[],/data/download/swift/apple_swift24_old.cpp,77,13
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/SubstitutionMap.cpp,+,"[""273879"", ""True"", ""ExpressionStatement"", ""getGenericSignature ( ) -> print ( out )""]",[],"[["""", [273891, ""True"", ""out << \""Generic signature: \"""", ""ExpressionStatement""]], ["""", [273729, ""True"", ""llvm :: raw_ostream & out"", ""Parameter""]], ["""", [273895, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""out"", ""\""Generic signature: \"""", ""<<""]], [[""out"", ""\""Generic signature: \"""", ""<<""]], [[""out"", ""\""Generic signature: \"""", ""<<""]], [[null, ""out""]], [[null, ""out""]], [[""ENTRY""]]]",/data/download/swift/apple_swift24_new.cpp,391,49
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/CSApply.cpp,-,"[""312526"", ""True"", ""ExpressionStatement"", ""assert ( conformance && \""Missing conformance information\"" )""]","[[[""False""], [312538, ""True"", ""! assocType"", ""Condition""]]]","[["""", [312547, ""True"", ""assocType = dyn_cast < AssociatedTypeDecl > ( member )"", ""ExpressionStatement""]], ["""", [312555, ""True"", "")"", ""Statement""]]]","[[[""!"", ""AssociatedTypeDecl *"", null]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift25_old.cpp,53,33
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"[""384858"", ""True"", ""ExpressionStatement"", ""assert ( ! replacement -> isTypeParameter ( ) && \""Can't be dependent\"" )""]",[],"[["""", [384743, ""True"", ""Type replacement"", ""Parameter""]], ["""", [384746, ""True"", ""ArrayRef < ProtocolDecl * > protocols"", ""Parameter""]], ["""", [384749, ""True"", ""DeclContext * dc"", ""Parameter""]], ["""", [384752, ""True"", ""TypeChecker & tc"", ""Parameter""]]]","[[[null, ""replacement""]], [[null, ""replacement""]], [[null, ""protocols""]], [[null, ""protocols""]], [[null, ""dc""]], [[null, ""dc""]], [[null, ""tc""]], [[null, ""tc""]]]",/data/download/swift/apple_swift26_old.cpp,2383,68
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"[""384842"", ""True"", ""IdentifierDeclStatement"", ""bool isError = replacement -> hasError ( ) ;""]",[],"[["""", [384854, ""True"", ""SmallVector < ProtocolConformanceRef , 4 > conformances ;"", ""IdentifierDeclStatement""]], ["""", [384858, ""True"", ""assert ( ! replacement -> isTypeParameter ( ) && \""Can't be dependent\"" )"", ""ExpressionStatement""]], ["""", [384743, ""True"", ""Type replacement"", ""Parameter""]], ["""", [384746, ""True"", ""ArrayRef < ProtocolDecl * > protocols"", ""Parameter""]]]","[[[null, ""conformances"", null]], [[null, ""conformances"", null]], [[null, ""conformances"", null]], [[""assert""]], [[null, ""replacement""]], [[null, ""replacement""]], [[null, ""protocols""]], [[null, ""protocols""]]]",/data/download/swift/apple_swift26_old.cpp,2386,62
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"[""384806"", ""True"", ""ExpressionStatement"", ""assert ( ( conformance || isError ) && \""Conformance should already have been verified\"" )""]",[],"[["""", [384817, ""True"", ""conformance = tc . conformsToProtocol ( replacement , proto , dc , None )"", ""ExpressionStatement""]], ["""", [384834, ""True"", ""auto"", ""Statement""]], ["""", [384835, ""True"", "")"", ""Statement""]], ["""", [384836, ""True"", ""protocols"", ""Statement""]]]","[[[""conformance"", ""tc . conformsToProtocol"", ""=""]], [[""conformance"", ""tc . conformsToProtocol"", ""=""]], [[""conformance"", ""tc . conformsToProtocol"", ""=""]]]",/data/download/swift/apple_swift26_old.cpp,2390,54
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"[""385653"", ""True"", ""ExpressionStatement"", ""assert ( Conformance -> getTypeWitness ( assocType , nullptr ) . getReplacement ( ) -> isEqual ( type ) && \""Conflicting type witness deductions\"" )""]","[[[], [385683, ""True"", ""Conformance -> hasTypeWitness ( assocType )"", ""Condition""]]]","[["""", [385168, ""True"", ""bool performRedeclarationCheck"", ""Parameter""]], ["""", [385171, ""True"", ""TypeDecl * typeDecl"", ""Parameter""]], ["""", [385174, ""True"", ""Type type"", ""Parameter""]]]","[[[null]], [[null, ""performRedeclarationCheck""]], [[null, ""performRedeclarationCheck""]], [[null, ""typeDecl""]], [[null, ""typeDecl""]], [[null, ""type""]], [[null, ""type""]]]",/data/download/swift/apple_swift26_old.cpp,2481,68
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"[""358356"", ""True"", ""ExpressionStatement"", ""assert ( Conformance -> getTypeWitness ( assocType , nullptr ) -> isEqual ( type ) && \""Conflicting type witness deductions\"" )""]","[[[], [358381, ""True"", ""Conformance -> hasTypeWitness ( assocType )"", ""Condition""]]]","[["""", [357892, ""True"", ""bool performRedeclarationCheck"", ""Parameter""]], ["""", [357895, ""True"", ""TypeDecl * typeDecl"", ""Parameter""]], ["""", [357898, ""True"", ""Type type"", ""Parameter""]]]","[[[null]], [[null, ""performRedeclarationCheck""]], [[null, ""performRedeclarationCheck""]], [[null, ""typeDecl""]], [[null, ""typeDecl""]], [[null, ""type""]], [[null, ""type""]]]",/data/download/swift/apple_swift26_new.cpp,2451,68
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"[""360885"", ""True"", ""Condition"", ""Conformance -> getTypeWitness ( assocType , nullptr ) -> hasError ( )""]",[],"[["""", [360901, ""True"", "")"", ""Statement""]], ["""", [360902, ""True"", "")"", ""Statement""]], ["""", [360903, ""True"", ""requirement"", ""Statement""]], ["""", [360904, ""True"", ""("", ""Statement""]]]",[],/data/download/swift/apple_swift26_new.cpp,2747,14
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"[""368814"", ""True"", ""Condition"", ""Conformance -> getTypeWitness ( assocType , nullptr ) -> hasError ( )""]","[[[""False""], [368847, ""True"", ""! requirement -> isProtocolRequirement ( )"", ""Condition""]], [[""False"", ""True""], [368866, ""True"", ""requirement -> isInvalid ( ) || ! requirement -> hasValidSignature ( )"", ""Condition""]]]","[["""", [368830, ""True"", "")"", ""Statement""]], ["""", [368831, ""True"", "")"", ""Statement""]], ["""", [368832, ""True"", ""requirement"", ""Statement""]], ["""", [368833, ""True"", ""("", ""Statement""]]]","[[[""!"", ""requirement -> isProtocolRequirement"", null]], [[""requirement -> isInvalid"", ""!"", ""requirement -> hasValidSignature"", null, ""||""]]]",/data/download/swift/apple_swift26_new.cpp,4717,46
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Serialization/Deserialization.cpp,-,"[""445759"", ""True"", ""ExpressionStatement"", ""assert ( third . hasValue ( ) )""]","[[[""True""], [445817, ""True"", ""typeCount --"", ""Condition""]]]","[["""", [445771, ""True"", ""third = maybeReadSubstitution ( DeclTypeCursor )"", ""ExpressionStatement""]], ["""", [445780, ""True"", ""auto"", ""Statement""]], ["""", [445781, ""True"", ""second = cast_or_null < TypeDecl > ( getDecl ( * rawIDIter ++ ) )"", ""ExpressionStatement""]], ["""", [445798, ""True"", ""auto"", ""Statement""]]]","[[[""unsigned"", null, null]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift27_old.cpp,4435,40
Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Serialization/Serialization.cpp,-,"[""478249"", ""True"", ""ExpressionStatement"", ""writeSubstitutions ( witness , DeclTypeAbbrCodes )""]","[[[""False""], [478378, ""True"", ""! witness . getDecl ( )"", ""Condition""]]]","[["""", [478258, ""True"", "")"", ""Statement""]], ["""", [478259, ""True"", ""typeDecl"", ""Statement""]], ["""", [478260, ""True"", ""*"", ""Statement""]], ["""", [478261, ""True"", ""TypeDecl"", ""Statement""]]]","[[[""!"", ""witness . getDecl"", null]]]",/data/download/swift/apple_swift28_old.cpp,1347,55
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""508027"", ""True"", ""Parameter"", ""Optional < SILLocation > OptLoc""]",[],"[["""", [508056, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift29_old.cpp,217,60
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496207"", ""True"", ""Parameter"", ""SILLocation Loc""]",[],"[["""", [496239, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,225,60
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496232"", ""True"", ""Condition"", ""Loc . isDebugInfoLoc ( )""]",[],"[["""", [496207, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [496239, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,226,89
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496225"", ""True"", ""ReturnStatement"", ""return Loc . getDebugInfoLoc ( ) ;""]","[[[], [496232, ""True"", ""Loc . isDebugInfoLoc ( )"", ""Condition""]]]","[["""", [496207, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [496239, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null]], [[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,227,89
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496212"", ""True"", ""ReturnStatement"", ""return decodeSourceLoc ( Loc . getDebugSourceLoc ( ) ) ;""]","[[[], [496232, ""True"", ""Loc . isDebugInfoLoc ( )"", ""Condition""]]]","[["""", [496207, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [496239, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null]], [[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,228,89
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496249"", ""True"", ""Parameter"", ""Optional < SILLocation > OptLoc""]",[],"[["""", [496278, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,232,60
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""508032"", ""True"", ""ReturnStatement"", ""return OptLoc -> decodeDebugLoc ( SM ) ;""]",[],"[["""", [508041, ""True"", """", ""ExpressionStatement""]], ["""", [508044, ""True"", ""return"", ""Statement""]], ["""", [508024, ""True"", ""SourceManager & SM"", ""Parameter""]], ["""", [508024, ""True"", ""SourceManager & SM"", ""Parameter""]], ["""", [508027, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]]]","[[[null, ""SM""]], [[null, ""SM""]], [[null, ""SM""]], [[null, ""SM""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]]]",/data/download/swift/apple_swift29_old.cpp,221,67
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496254"", ""True"", ""ReturnStatement"", ""return decodeDebugLoc ( * OptLoc ) ;""]",[],"[["""", [496263, ""True"", """", ""ExpressionStatement""]], ["""", [496266, ""True"", ""return"", ""Statement""]], ["""", [496249, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]], ["""", [496249, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]], ["""", [496278, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""OptLoc""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift29_new.cpp,236,77
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""508211"", ""True"", ""ExpressionStatement"", ""L = CS -> Loc . decodeDebugLoc ( SM )""]","[[[""True""], [508266, ""True"", ""N < Scopes . size ( )"", ""Condition""]], [[""False"", ""True""], [508340, ""True"", ""DS"", ""Condition""]]]","[["""", [508224, ""True"", ""auto"", ""Statement""]], ["""", [508225, ""True"", ""* ParentScope = getOrCreateScope ( Parent )"", ""ExpressionStatement""]], ["""", [508236, ""True"", ""auto"", ""Statement""]], ["""", [508237, ""True"", """", ""ExpressionStatement""]]]","[[[""unsigned"", ""Scopes . size"", ""<""]], [[null]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,263,76
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496501"", ""True"", ""ExpressionStatement"", ""L = decodeDebugLoc ( CS -> Loc )""]","[[[""False""], [496522, ""True"", ""CachedInlinedAt != InlinedAtCache . end ( )"", ""Condition""]], [[""False""], [496546, ""True"", ""! CS"", ""Condition""]]]","[["""", [496512, ""True"", ""auto"", ""Statement""]], ["""", [496531, ""True"", ""CachedInlinedAt = InlinedAtCache . find ( CS )"", ""ExpressionStatement""]], ["""", [496542, ""True"", ""auto"", ""Statement""]]]","[[[""CachedInlinedAt"", ""InlinedAtCache . end"", ""!=""]], [[""!"", ""CS"", null]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,283,56
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""508743"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc , SM )""]","[[[""False""], [508757, ""True"", ""! Scope"", ""Condition""]]]","[["""", [508754, ""True"", ""auto"", ""Statement""]], ["""", [508761, ""True"", ""* Scope = getOrCreateScope ( DS -> getInlinedScope ( ) )"", ""ExpressionStatement""]], ["""", [508777, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""Scope"", null]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,308,44
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""496866"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc )""]","[[[""False""], [496894, ""True"", ""shouldIgnoreAbstractClosure ( Loc , DS ) || ( Fn && Fn -> isThunk ( ) )"", ""Condition""]], [[""False""], [496930, ""True"", ""! Scope"", ""Condition""]]]","[["""", [496912, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [496916, ""True"", ""SILFunction * Fn = DS -> getInlinedFunction ( ) ;"", ""IdentifierDeclStatement""]]]","[[[""shouldIgnoreAbstractClosure"", ""SILFunction *"", ""Fn -> isThunk"", ""&&"", ""||""]], [[""!"", ""Scope"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]]]",/data/download/swift/apple_swift29_new.cpp,337,74
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""509934"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( SM , NTD )""]",[],"[["""", [509945, ""True"", ""auto"", ""Statement""]]]",[],/data/download/swift/apple_swift29_old.cpp,552,15
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""498122"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( * this , NTD )""]",[],"[["""", [498135, ""True"", ""auto"", ""Statement""]]]",[],/data/download/swift/apple_swift29_new.cpp,556,16
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""510981"", ""True"", ""ExpressionStatement"", ""L = DS -> Loc . decodeDebugLoc ( SM )""]","[[[""False"", ""False"", ""True""], [510994, ""True"", ""DS && ( ! SILFn || ( ! SILFn -> isBare ( ) && ! SILFn -> isThunk ( ) ) )"", ""Condition""]], [[""False"", ""False"", ""True""], [511168, ""True"", ""Cached != ScopeCache . end ( )"", ""Condition""]]]","[["""", [511018, ""True"", ""unsigned ScopeLine = 0 ;"", ""IdentifierDeclStatement""]], ["""", [511025, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [511033, ""True"", ""Name = getName ( DS -> Loc )"", ""ExpressionStatement""]], ["""", [511044, ""True"", ""Name = SILFn -> getName ( )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""SILFn"", null, ""!"", ""SILFn -> isBare"", null, ""!"", ""SILFn -> isThunk"", null, ""&&"", ""||""]], [[""Cached"", ""ScopeCache . end"", ""!=""]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,669,74
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""499175"", ""True"", ""ExpressionStatement"", ""L = decodeDebugLoc ( DS -> Loc )""]","[[[""False"", ""False"", ""True""], [499186, ""True"", ""DS && ( ! SILFn || ( ! SILFn -> isBare ( ) && ! SILFn -> isThunk ( ) ) )"", ""Condition""]], [[""False"", ""False"", ""True""], [499360, ""True"", ""Cached != ScopeCache . end ( )"", ""Condition""]]]","[["""", [499210, ""True"", ""unsigned ScopeLine = 0 ;"", ""IdentifierDeclStatement""]], ["""", [499217, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [499225, ""True"", ""Name = getName ( DS -> Loc )"", ""ExpressionStatement""]], ["""", [499236, ""True"", ""Name = SILFn -> getName ( )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""SILFn"", null, ""!"", ""SILFn -> isBare"", null, ""!"", ""SILFn -> isThunk"", null, ""&&"", ""||""]], [[""Cached"", ""ScopeCache . end"", ""!=""]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,673,74
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""511309"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , D )""]","[[[""False""], [511348, ""True"", ""! M"", ""Condition""]], [[""True"", ""False""], [511410, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]]]","[["""", [511320, ""True"", ""auto"", ""Statement""]], ["""", [511321, ""True"", """", ""ExpressionStatement""]], ["""", [511322, ""True"", "")"", ""Statement""]], ["""", [511324, ""True"", ""M"", ""Statement""]]]","[[[""!"", ""swift :: ModuleDecl *"", null]], [[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]]]",/data/download/swift/apple_swift29_old.cpp,760,47
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""499507"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , D )""]","[[[""False""], [499548, ""True"", ""! M"", ""Condition""]], [[""True"", ""False""], [499610, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]]]","[["""", [499520, ""True"", ""auto"", ""Statement""]], ["""", [499521, ""True"", """", ""ExpressionStatement""]], ["""", [499522, ""True"", "")"", ""Statement""]], ["""", [499524, ""True"", ""M"", ""Statement""]]]","[[[""!"", ""swift :: ModuleDecl *"", null]], [[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]]]",/data/download/swift/apple_swift29_new.cpp,764,47
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""512808"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( SM , VarDecl )""]","[[[""False"", ""True""], [512869, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]], [[""False"", ""True""], [512877, ""True"", ""! DS"", ""Condition""]]]","[["""", [512819, ""True"", ""auto"", ""Statement""]], ["""", [512820, ""True"", ""assert ( Scope && \""variable has no local scope\"" )"", ""ExpressionStatement""]], ["""", [512829, ""True"", ""* Scope = dyn_cast < llvm :: DILocalScope > ( getOrCreateScope ( DS ) )"", ""ExpressionStatement""]], ["""", [512844, ""True"", ""auto"", ""Statement""]]]","[[[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]], [[""!"", ""const SILDebugScope *"", null]], [[""assert""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,899,87
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""501009"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( * this , VarDecl )""]","[[[""False"", ""True""], [501072, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]], [[""False"", ""True""], [501080, ""True"", ""! DS"", ""Condition""]]]","[["""", [501022, ""True"", ""auto"", ""Statement""]], ["""", [501023, ""True"", ""assert ( Scope && \""variable has no local scope\"" )"", ""ExpressionStatement""]], ["""", [501032, ""True"", ""* Scope = dyn_cast < llvm :: DILocalScope > ( getOrCreateScope ( DS ) )"", ""ExpressionStatement""]], ["""", [501047, ""True"", ""auto"", ""Statement""]]]","[[[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]], [[""!"", ""const SILDebugScope *"", null]], [[""assert""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,903,87
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""518078"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Struct""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [518089, ""True"", ""auto"", ""Statement""]], ["""", [518090, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [518101, ""True"", ""auto"", ""Statement""]], ["""", [518102, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Struct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1476,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""506303"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Struct""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [506316, ""True"", ""auto"", ""Statement""]], ["""", [506317, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [506328, ""True"", ""auto"", ""Statement""]], ["""", [506329, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Struct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1480,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517952"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Class""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517963, ""True"", ""auto"", ""Statement""]], ["""", [517964, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [517975, ""True"", ""auto"", ""Statement""]], ["""", [517976, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Class"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1494,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""506175"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Class""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [506188, ""True"", ""auto"", ""Statement""]], ["""", [506189, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [506200, ""True"", ""auto"", ""Statement""]], ["""", [506201, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Class"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1498,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517689"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Protocol""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517700, ""True"", ""auto"", ""Statement""]], ["""", [517701, ""True"", ""* Decl = ProtocolTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [517712, ""True"", ""auto"", ""Statement""]], ["""", [517713, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Protocol"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1534,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505910"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Protocol""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505923, ""True"", ""auto"", ""Statement""]], ["""", [505924, ""True"", ""* Decl = ProtocolTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [505935, ""True"", ""auto"", ""Statement""]], ["""", [505936, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Protocol"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1538,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517618"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: ProtocolComposition""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517629, ""True"", ""auto"", ""Statement""]], ["""", [517630, ""True"", ""* Decl = DbgTy . getDecl ( )"", ""ExpressionStatement""]], ["""", [517641, ""True"", ""auto"", ""Statement""]], ["""", [517642, ""True"", ""case TypeKind :: ProtocolComposition :"", ""Label""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: ProtocolComposition"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""TypeKind :: ProtocolComposition""]]]",/data/download/swift/apple_swift29_old.cpp,1543,39
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505837"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: ProtocolComposition""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505850, ""True"", ""auto"", ""Statement""]], ["""", [505851, ""True"", ""* Decl = DbgTy . getDecl ( )"", ""ExpressionStatement""]], ["""", [505862, ""True"", ""auto"", ""Statement""]], ["""", [505863, ""True"", ""case TypeKind :: ProtocolComposition :"", ""Label""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: ProtocolComposition"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""TypeKind :: ProtocolComposition""]]]",/data/download/swift/apple_swift29_new.cpp,1547,39
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517534"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: UnboundGeneric""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517545, ""True"", ""auto"", ""Statement""]], ["""", [517546, ""True"", ""* Decl = UnboundTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [517557, ""True"", ""auto"", ""Statement""]], ["""", [517558, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: UnboundGeneric"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1556,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505751"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: UnboundGeneric""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505764, ""True"", ""auto"", ""Statement""]], ["""", [505765, ""True"", ""* Decl = UnboundTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [505776, ""True"", ""auto"", ""Statement""]], ["""", [505777, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: UnboundGeneric"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1560,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517445"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericStruct""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517456, ""True"", ""auto"", ""Statement""]], ["""", [517457, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [517468, ""True"", ""auto"", ""Statement""]], ["""", [517469, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericStruct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1566,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505660"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericStruct""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505673, ""True"", ""auto"", ""Statement""]], ["""", [505674, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [505685, ""True"", ""auto"", ""Statement""]], ["""", [505686, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericStruct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1570,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517373"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericClass""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517384, ""True"", ""auto"", ""Statement""]], ["""", [517385, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [517396, ""True"", ""auto"", ""Statement""]], ["""", [517397, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericClass"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1575,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505586"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericClass""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505599, ""True"", ""auto"", ""Statement""]], ["""", [505600, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [505611, ""True"", ""auto"", ""Statement""]], ["""", [505612, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericClass"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1579,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""517161"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Archetype -> getAssocType ( ) )""]","[[[""case TypeKind :: Archetype""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [517177, ""True"", ""auto"", ""Statement""]], ["""", [517178, ""True"", """", ""ExpressionStatement""]], ["""", [517179, ""True"", "")"", ""Statement""]], ["""", [517180, ""True"", ""("", ""Statement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Archetype"", ""==""]], [[""!"", ""TypeBase *"", null]]]",/data/download/swift/apple_swift29_old.cpp,1611,61
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505372"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Archetype -> getAssocType ( ) )""]","[[[""case TypeKind :: Archetype""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505390, ""True"", ""auto"", ""Statement""]], ["""", [505391, ""True"", """", ""ExpressionStatement""]], ["""", [505392, ""True"", "")"", ""Statement""]], ["""", [505393, ""True"", ""("", ""Statement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Archetype"", ""==""]], [[""!"", ""TypeBase *"", null]]]",/data/download/swift/apple_swift29_new.cpp,1615,61
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""516892"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: Metatype"", ""case TypeKind :: ExistentialMetatype""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [516908, ""True"", ""auto"", ""Statement""]], ["""", [516909, ""True"", ""Flags |= llvm :: DINode :: FlagArtificial"", ""ExpressionStatement""]], ["""", [516913, ""True"", ""case TypeKind :: Metatype :"", ""Label""]], ["""", [516915, ""True"", ""case TypeKind :: ExistentialMetatype :"", ""Label""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""TypeKind :: Metatype""]], [[""TypeKind :: ExistentialMetatype""]]]",/data/download/swift/apple_swift29_old.cpp,1648,34
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""505101"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: Metatype"", ""case TypeKind :: ExistentialMetatype""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [505119, ""True"", ""auto"", ""Statement""]], ["""", [505120, ""True"", ""Flags |= llvm :: DINode :: FlagArtificial"", ""ExpressionStatement""]], ["""", [505124, ""True"", ""case TypeKind :: Metatype :"", ""Label""]], ["""", [505126, ""True"", ""case TypeKind :: ExistentialMetatype :"", ""Label""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""TypeKind :: Metatype""]], [[""TypeKind :: ExistentialMetatype""]]]",/data/download/swift/apple_swift29_new.cpp,1652,34
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""516754"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Enum""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [516765, ""True"", ""auto"", ""Statement""]], ["""", [516766, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [516777, ""True"", ""auto"", ""Statement""]], ["""", [516778, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Enum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1670,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""504961"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Enum""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [504974, ""True"", ""auto"", ""Statement""]], ["""", [504975, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [504986, ""True"", ""auto"", ""Statement""]], ["""", [504987, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Enum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1674,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""516638"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericEnum""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [516649, ""True"", ""auto"", ""Statement""]], ["""", [516650, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [516661, ""True"", ""auto"", ""Statement""]], ["""", [516662, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericEnum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1683,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""504843"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericEnum""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [504856, ""True"", ""auto"", ""Statement""]], ["""", [504857, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [504868, ""True"", ""auto"", ""Statement""]], ["""", [504869, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericEnum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1687,90
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""516431"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: WeakStorage"", ""case TypeKind :: UnmanagedStorage"", ""case TypeKind :: UnownedStorage""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [516447, ""True"", ""auto"", ""Statement""]], ["""", [516448, ""True"", ""CanTy = ReferenceTy -> getReferentType ( )"", ""ExpressionStatement""]], ["""", [516457, ""True"", ""auto"", ""Statement""]], ["""", [516458, ""True"", ""* ReferenceTy = cast < ReferenceStorageType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1712,83
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""504634"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: WeakStorage"", ""case TypeKind :: UnmanagedStorage"", ""case TypeKind :: UnownedStorage""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [504652, ""True"", ""auto"", ""Statement""]], ["""", [504653, ""True"", ""CanTy = ReferenceTy -> getReferentType ( )"", ""ExpressionStatement""]], ["""", [504662, ""True"", ""auto"", ""Statement""]], ["""", [504663, ""True"", ""* ReferenceTy = cast < ReferenceStorageType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1716,83
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"[""516355"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: NameAlias""], [518488, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [518567, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [516366, ""True"", ""auto"", ""Statement""]], ["""", [516367, ""True"", ""* Decl = NameAliasTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [516378, ""True"", ""auto"", ""Statement""]], ["""", [516379, ""True"", ""* NameAliasTy = cast < NameAliasType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: NameAlias"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_old.cpp,1724,32
Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"[""504556"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: NameAlias""], [506715, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [506794, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [504569, ""True"", ""auto"", ""Statement""]], ["""", [504570, ""True"", ""* Decl = NameAliasTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [504581, ""True"", ""auto"", ""Statement""]], ["""", [504582, ""True"", ""* NameAliasTy = cast < NameAliasType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: NameAlias"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift29_new.cpp,1728,32
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"[""557844"", ""True"", ""Parameter"", ""SILFunction * SILFn""]",[],"[["""", [557847, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [557873, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift30_new.cpp,25,89
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"[""557858"", ""True"", ""ExpressionStatement"", ""assert ( SILFn && \""no parent provided\"" )""]","[[[], [557871, ""True"", ""ParentScope"", ""Condition""]]]","[["""", [557838, ""True"", ""const SILDebugScope * InlinedCallSite"", ""Parameter""]], ["""", [557841, ""True"", ""const SILDebugScope * ParentScope"", ""Parameter""]], ["""", [557844, ""True"", ""SILFunction * SILFn"", ""Parameter""]]]","[[[null]], [[null, ""InlinedCallSite""]], [[null, ""InlinedCallSite""]], [[null, ""ParentScope""]], [[null, ""ParentScope""]], [[null, ""SILFn""]], [[null, ""SILFn""]]]",/data/download/swift/apple_swift30_new.cpp,32,68
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"[""557883"", ""True"", ""Parameter"", ""SILLocation Loc""]",[],"[["""", [557887, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift30_new.cpp,37,60
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"[""557908"", ""True"", ""ExpressionStatement"", """"]","[[[""False""], [557965, ""True"", ""Parent . isNull ( )"", ""Condition""]]]","[["""", [557909, ""True"", "")"", ""Statement""]], ["""", [557910, ""True"", ""\""orphaned scope\"""", ""Statement""]], ["""", [557911, ""True"", ""&&"", ""Statement""]], ["""", [557912, ""True"", "")"", ""Statement""]]]",[[[null]]],/data/download/swift/apple_swift30_new.cpp,47,70
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILPrinter.cpp,-,"[""578043"", ""True"", ""ExpressionStatement"", ""CallSite . getSourceLoc ( ) . print ( PrintState . OS , M . getASTContext ( ) . SourceMgr , LastBufferID )""]","[[[""False"", ""True""], [578070, ""True"", ""! CallSite . isNull ( ) && CallSite . isASTNode ( )"", ""Condition""]], [[""False"", ""True""], [578166, ""True"", ""DS"", ""Condition""]]]","[["""", [578086, ""True"", ""CallSite = CS -> Loc"", ""ExpressionStatement""]], ["""", [578092, ""True"", ""auto"", ""Statement""]], ["""", [578093, ""True"", ""* this << \"" perf_inlined_at \"""", ""ExpressionStatement""]]]","[[[""!"", ""CallSite . isNull"", null]], [[null]], [[null]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]]]",/data/download/swift/apple_swift31_old.cpp,761,89
Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILPrinter.cpp,+,"[""561154"", ""True"", ""ExpressionStatement"", ""CallSite . getSourceLoc ( ) . print ( PrintState . OS , M . getASTContext ( ) . SourceMgr , LastBufferID )""]","[[[""True""], [561181, ""True"", ""! CallSite . isNull ( ) && CallSite . isASTNode ( )"", ""Condition""]], [[""True""], [561244, ""True"", ""CS = CS -> InlinedCallSite"", ""Condition""]], [[""False"", ""True"", ""False""], [561266, ""True"", ""! DS"", ""Condition""]]]","[["""", [561197, ""True"", ""CallSite = CS -> Loc"", ""ExpressionStatement""]], ["""", [561203, ""True"", ""auto"", ""Statement""]], ["""", [561204, ""True"", ""* this << \"" perf_inlined_at \"""", ""ExpressionStatement""]]]","[[[""!"", ""CallSite . isNull"", null]], [[null]], [[""const SILDebugScope *"", ""const SILDebugScope *"", ""InlinedCallSite"", null, ""=""]], [[""!"", ""const SILDebugScope *"", null]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]]]",/data/download/swift/apple_swift31_new.cpp,761,89
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""594249"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( AI . getLoc ( ) , & F , AIScope )""]","[[[""False""], [594282, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [594594, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [594267, ""True"", "")"", ""Statement""]], ["""", [594268, ""True"", "")"", ""Statement""]], ["""", [594269, ""True"", ""("", ""Statement""]], ["""", [594270, ""True"", ""getModule"", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]]]",/data/download/swift/apple_swift32_old.cpp,74,73
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""594233"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> getParentFunction ( ) == & F )""]","[[[""False""], [594282, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [594594, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [594249, ""True"", ""SILDebugScope ( AI . getLoc ( ) , & F , AIScope )"", ""ExpressionStatement""]], ["""", [594267, ""True"", "")"", ""Statement""]], ["""", [594268, ""True"", "")"", ""Statement""]], ["""", [594269, ""True"", ""("", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]], [[""SILDebugScope""]]]",/data/download/swift/apple_swift32_old.cpp,75,73
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""592456"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( AI . getLoc ( ) , nullptr , AIScope , AIScope -> InlinedCallSite )""]","[[[""False""], [592491, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [592803, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [592476, ""True"", "")"", ""Statement""]], ["""", [592477, ""True"", "")"", ""Statement""]], ["""", [592478, ""True"", ""("", ""Statement""]], ["""", [592479, ""True"", ""getModule"", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]]]",/data/download/swift/apple_swift32_new.cpp,74,73
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""592428"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> getParentFunction ( ) == & F )""]","[[[""True"", ""False""], [592803, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [592444, ""True"", ""assert ( CallSiteScope && \""call site has no scope\"" )"", ""ExpressionStatement""]], ["""", [592456, ""True"", ""SILDebugScope ( AI . getLoc ( ) , nullptr , AIScope , AIScope -> InlinedCallSite )"", ""ExpressionStatement""]], ["""", [592487, ""True"", ""CallSiteScope = AIScope"", ""ExpressionStatement""]], ["""", [592476, ""True"", "")"", ""Statement""]], ["""", [592477, ""True"", "")"", ""Statement""]], ["""", [592498, ""True"", ""AI . getInstruction ( ) -> replaceAllUsesWith ( RetArg )"", ""ExpressionStatement""]], ["""", [592636, ""True"", ""AIScope = AI . getFunction ( ) -> getDebugScope ( )"", ""ExpressionStatement""]]]","[[[""AI . getFunction"", ""SILFunction *"", ""==""]], [[""assert""]], [[""SILDebugScope""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""AI . getInstruction ( ) -> replaceAllUsesWith""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]]]",/data/download/swift/apple_swift32_new.cpp,77,43
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""594878"", ""True"", ""ExpressionStatement"", ""assert ( CalleeScope )""]",[],"[["""", [594794, ""True"", ""const SILDebugScope * CalleeScope"", ""Parameter""]], ["""", [594885, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""CalleeScope""]], [[null, ""CalleeScope""]], [[""ENTRY""]]]",/data/download/swift/apple_swift32_old.cpp,201,89
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""594826"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( CallSiteScope , CalleeScope )""]","[[[""False""], [594857, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]]]","[["""", [594835, ""True"", "")"", ""Statement""]], ["""", [594836, ""True"", "")"", ""Statement""]], ["""", [594837, ""True"", ""("", ""Statement""]], ["""", [594838, ""True"", ""getModule"", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]]]",/data/download/swift/apple_swift32_old.cpp,207,80
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""594811"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> Parent == InlineScope -> InlinedCallSite -> Parent )""]","[[[""False""], [594857, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]]]","[["""", [594826, ""True"", ""SILDebugScope ( CallSiteScope , CalleeScope )"", ""ExpressionStatement""]], ["""", [594835, ""True"", "")"", ""Statement""]], ["""", [594836, ""True"", "")"", ""Statement""]], ["""", [594837, ""True"", ""("", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]], [[""SILDebugScope""]]]",/data/download/swift/apple_swift32_old.cpp,208,80
Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""593054"", ""True"", ""Statement"", ""(""]","[[[""False""], [593101, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]], [[""False""], [593125, ""True"", ""! CalleeScope"", ""Condition""]]]","[["""", [593055, ""True"", ""SILDebugScope"", ""Statement""]], ["""", [593056, ""True"", "")"", ""Statement""]], ["""", [593057, ""True"", ""M"", ""Statement""]], ["""", [593058, ""True"", ""("", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]], [[""!"", ""const SILDebugScope *"", null]]]",/data/download/swift/apple_swift32_new.cpp,210,57
[AST] Remove GenericEnvironment from SubstitutionMap; it's unnecessary.,lib/AST/SubstitutionMap.cpp,-,"[""598079"", ""True"", ""Statement"", ""&&""]",[],"[["""", [598080, ""True"", "")"", ""Statement""]], ["""", [598081, ""True"", ""("", ""Statement""]], ["""", [598082, ""True"", ""hasArchetype"", ""Statement""]], ["""", [598083, ""True"", ""->"", ""Statement""]]]",[],/data/download/swift/apple_swift33_old.cpp,77,17
"[SubstitutionMap] Dump generic signature in debug output.

You can't interpret a conformance map without a generic signature, so
add it to the debug output.",lib/AST/SubstitutionMap.cpp,+,"[""602594"", ""True"", ""ExpressionStatement"", ""getGenericSignature ( ) -> print ( out )""]",[],"[["""", [602606, ""True"", ""out << \""Generic signature: \"""", ""ExpressionStatement""]], ["""", [602444, ""True"", ""llvm :: raw_ostream & out"", ""Parameter""]], ["""", [602610, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""out"", ""\""Generic signature: \"""", ""<<""]], [[""out"", ""\""Generic signature: \"""", ""<<""]], [[""out"", ""\""Generic signature: \"""", ""<<""]], [[null, ""out""]], [[null, ""out""]], [[""ENTRY""]]]",/data/download/swift/apple_swift34_new.cpp,398,49
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/AST/ProtocolConformance.cpp,-,"[""612462"", ""True"", ""ExpressionStatement"", ""assert ( ( conforms || specializedType -> isTypeVariableOrMember ( ) || specializedType -> isTypeParameter ( ) || specializedType -> hasError ( ) ) && \""Improperly checked substitution\"" )""]","[[[""False""], [612553, ""True"", ""specializedType . getPointer ( ) == genericWitness . getReplacement ( ) . getPointer ( )"", ""Condition""]], [[""False"", ""True""], [612670, ""True"", ""known != TypeWitnesses . end ( )"", ""Condition""]]]","[["""", [612492, ""True"", ""conforms = conformingModule -> lookupConformance ( specializedType , proto , resolver )"", ""ExpressionStatement""]], ["""", [612507, ""True"", ""auto"", ""Statement""]], ["""", [612508, ""True"", "")"", ""Statement""]], ["""", [612509, ""True"", "")"", ""Statement""]]]","[[[""specializedType . getPointer"", ""genericWitness . getReplacement ( ) . getPointer"", ""==""]], [[""known"", ""TypeWitnesses . end"", ""!=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]], [[""conforms"", ""conformingModule -> lookupConformance"", ""=""]]]",/data/download/swift/apple_swift35_old.cpp,596,53
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/CSApply.cpp,-,"[""650696"", ""True"", ""ExpressionStatement"", ""assert ( conformance && \""Missing conformance information\"" )""]","[[[""False""], [650708, ""True"", ""! assocType"", ""Condition""]]]","[["""", [650717, ""True"", ""assocType = dyn_cast < AssociatedTypeDecl > ( member )"", ""ExpressionStatement""]], ["""", [650725, ""True"", "")"", ""Statement""]]]","[[[""!"", ""AssociatedTypeDecl *"", null]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]], [[""assocType"", ""dyn_cast"", ""AssociatedTypeDecl"", ""member"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift36_old.cpp,53,33
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"[""723028"", ""True"", ""ExpressionStatement"", ""assert ( ! replacement -> isTypeParameter ( ) && \""Can't be dependent\"" )""]",[],"[["""", [722913, ""True"", ""Type replacement"", ""Parameter""]], ["""", [722916, ""True"", ""ArrayRef < ProtocolDecl * > protocols"", ""Parameter""]], ["""", [722919, ""True"", ""DeclContext * dc"", ""Parameter""]], ["""", [722922, ""True"", ""TypeChecker & tc"", ""Parameter""]]]","[[[null, ""replacement""]], [[null, ""replacement""]], [[null, ""protocols""]], [[null, ""protocols""]], [[null, ""dc""]], [[null, ""dc""]], [[null, ""tc""]], [[null, ""tc""]]]",/data/download/swift/apple_swift37_old.cpp,2383,68
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"[""723012"", ""True"", ""IdentifierDeclStatement"", ""bool isError = replacement -> hasError ( ) ;""]",[],"[["""", [723024, ""True"", ""SmallVector < ProtocolConformanceRef , 4 > conformances ;"", ""IdentifierDeclStatement""]], ["""", [723028, ""True"", ""assert ( ! replacement -> isTypeParameter ( ) && \""Can't be dependent\"" )"", ""ExpressionStatement""]], ["""", [722913, ""True"", ""Type replacement"", ""Parameter""]], ["""", [722916, ""True"", ""ArrayRef < ProtocolDecl * > protocols"", ""Parameter""]]]","[[[null, ""conformances"", null]], [[null, ""conformances"", null]], [[null, ""conformances"", null]], [[""assert""]], [[null, ""replacement""]], [[null, ""replacement""]], [[null, ""protocols""]], [[null, ""protocols""]]]",/data/download/swift/apple_swift37_old.cpp,2386,62
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"[""722976"", ""True"", ""ExpressionStatement"", ""assert ( ( conformance || isError ) && \""Conformance should already have been verified\"" )""]",[],"[["""", [722987, ""True"", ""conformance = tc . conformsToProtocol ( replacement , proto , dc , None )"", ""ExpressionStatement""]], ["""", [723004, ""True"", ""auto"", ""Statement""]], ["""", [723005, ""True"", "")"", ""Statement""]], ["""", [723006, ""True"", ""protocols"", ""Statement""]]]","[[[""conformance"", ""tc . conformsToProtocol"", ""=""]], [[""conformance"", ""tc . conformsToProtocol"", ""=""]], [[""conformance"", ""tc . conformsToProtocol"", ""=""]]]",/data/download/swift/apple_swift37_old.cpp,2390,54
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"[""723823"", ""True"", ""ExpressionStatement"", ""assert ( Conformance -> getTypeWitness ( assocType , nullptr ) . getReplacement ( ) -> isEqual ( type ) && \""Conflicting type witness deductions\"" )""]","[[[], [723853, ""True"", ""Conformance -> hasTypeWitness ( assocType )"", ""Condition""]]]","[["""", [723338, ""True"", ""bool performRedeclarationCheck"", ""Parameter""]], ["""", [723341, ""True"", ""TypeDecl * typeDecl"", ""Parameter""]], ["""", [723344, ""True"", ""Type type"", ""Parameter""]]]","[[[null]], [[null, ""performRedeclarationCheck""]], [[null, ""performRedeclarationCheck""]], [[null, ""typeDecl""]], [[null, ""typeDecl""]], [[null, ""type""]], [[null, ""type""]]]",/data/download/swift/apple_swift37_old.cpp,2481,68
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"[""696526"", ""True"", ""ExpressionStatement"", ""assert ( Conformance -> getTypeWitness ( assocType , nullptr ) -> isEqual ( type ) && \""Conflicting type witness deductions\"" )""]","[[[], [696551, ""True"", ""Conformance -> hasTypeWitness ( assocType )"", ""Condition""]]]","[["""", [696062, ""True"", ""bool performRedeclarationCheck"", ""Parameter""]], ["""", [696065, ""True"", ""TypeDecl * typeDecl"", ""Parameter""]], ["""", [696068, ""True"", ""Type type"", ""Parameter""]]]","[[[null]], [[null, ""performRedeclarationCheck""]], [[null, ""performRedeclarationCheck""]], [[null, ""typeDecl""]], [[null, ""typeDecl""]], [[null, ""type""]], [[null, ""type""]]]",/data/download/swift/apple_swift37_new.cpp,2451,68
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"[""699055"", ""True"", ""Condition"", ""Conformance -> getTypeWitness ( assocType , nullptr ) -> hasError ( )""]",[],"[["""", [699071, ""True"", "")"", ""Statement""]], ["""", [699072, ""True"", "")"", ""Statement""]], ["""", [699073, ""True"", ""requirement"", ""Statement""]], ["""", [699074, ""True"", ""("", ""Statement""]]]",[],/data/download/swift/apple_swift37_new.cpp,2747,18
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"[""706984"", ""True"", ""Condition"", ""Conformance -> getTypeWitness ( assocType , nullptr ) -> hasError ( )""]","[[[""False""], [707017, ""True"", ""! requirement -> isProtocolRequirement ( )"", ""Condition""]], [[""False"", ""True""], [707036, ""True"", ""requirement -> isInvalid ( ) || ! requirement -> hasValidSignature ( )"", ""Condition""]]]","[["""", [707000, ""True"", "")"", ""Statement""]], ["""", [707001, ""True"", "")"", ""Statement""]], ["""", [707002, ""True"", ""requirement"", ""Statement""]], ["""", [707003, ""True"", ""("", ""Statement""]]]","[[[""!"", ""requirement -> isProtocolRequirement"", null]], [[""requirement -> isInvalid"", ""!"", ""requirement -> hasValidSignature"", null, ""||""]]]",/data/download/swift/apple_swift37_new.cpp,4717,46
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Serialization/Deserialization.cpp,-,"[""783929"", ""True"", ""ExpressionStatement"", ""assert ( third . hasValue ( ) )""]","[[[""True""], [783987, ""True"", ""typeCount --"", ""Condition""]]]","[["""", [783941, ""True"", ""third = maybeReadSubstitution ( DeclTypeCursor )"", ""ExpressionStatement""]], ["""", [783950, ""True"", ""auto"", ""Statement""]], ["""", [783951, ""True"", ""second = cast_or_null < TypeDecl > ( getDecl ( * rawIDIter ++ ) )"", ""ExpressionStatement""]], ["""", [783968, ""True"", ""auto"", ""Statement""]]]","[[[""unsigned"", null, null]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""third"", ""maybeReadSubstitution"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]], [[""second"", ""cast_or_null"", ""TypeDecl"", ""getDecl"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift38_old.cpp,4435,40
"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Serialization/Serialization.cpp,-,"[""816419"", ""True"", ""ExpressionStatement"", ""writeSubstitutions ( witness , DeclTypeAbbrCodes )""]","[[[""False""], [816548, ""True"", ""! witness . getDecl ( )"", ""Condition""]]]","[["""", [816428, ""True"", "")"", ""Statement""]], ["""", [816429, ""True"", ""typeDecl"", ""Statement""]], ["""", [816430, ""True"", ""*"", ""Statement""]], ["""", [816431, ""True"", ""TypeDecl"", ""Statement""]]]","[[[""!"", ""witness . getDecl"", null]]]",/data/download/swift/apple_swift39_old.cpp,1347,55
"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,"[""849512"", ""True"", ""ExpressionStatement"", ""assert ( var -> getDeclContext ( ) -> isTypeContext ( ) && ! var -> isInstanceMember ( ) )""]","[[[""False""], [849550, ""True"", ""var -> getDeclContext ( ) -> isModuleScopeContext ( )"", ""Condition""]], [[""True""], [849574, ""True"", ""var -> getDeclContext ( ) -> isLocalContext ( )"", ""Condition""]], [[""case AccessStrategy :: Storage""], [849586, ""True"", ""! var -> isLet ( )"", ""Condition""]], [[""case AccessStrategy :: Storage""], [849727, ""True"", ""var -> getAccessStrategy ( semantics , accessKind )"", ""Condition""]]]","[["""", [849595, ""True"", ""Optional < SILAccessEnforcement > enforcement ;"", ""IdentifierDeclStatement""]]]","[[[null]], [[null]], [[""! var -> isLet ( )"", ""AccessStrategy :: Storage"", ""==""]], [[""var -> getAccessStrategy ( semantics , accessKind )"", ""AccessStrategy :: Storage"", ""==""]], [[null, ""enforcement"", null]], [[null, ""enforcement"", null]], [[null, ""enforcement"", null]]]",/data/download/swift/apple_swift40_new.cpp,1702,68
Rearrange IRGenDebugInfo::setCurrentLoc() to avoid decoding throwaway locations.,lib/IRGen/IRGenDebugInfo.cpp,-,"[""876088"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc )""]","[[[""False""], [876100, ""True"", ""! Scope"", ""Condition""]]]","[["""", [876097, ""True"", ""auto"", ""Statement""]], ["""", [876104, ""True"", ""* Scope = getOrCreateScope ( DS )"", ""ExpressionStatement""]], ["""", [876115, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""Scope"", null]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift41_old.cpp,307,44
Rearrange IRGenDebugInfo::setCurrentLoc() to avoid decoding throwaway locations.,lib/IRGen/IRGenDebugInfo.cpp,+,"[""864180"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc )""]","[[[""False""], [864208, ""True"", ""shouldIgnoreAbstractClosure ( Loc , DS ) || ( Fn && Fn -> isThunk ( ) )"", ""Condition""]], [[""False""], [864244, ""True"", ""! Scope"", ""Condition""]]]","[["""", [864226, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [864230, ""True"", ""SILFunction * Fn = DS -> getInlinedFunction ( ) ;"", ""IdentifierDeclStatement""]]]","[[[""shouldIgnoreAbstractClosure"", ""SILFunction *"", ""Fn -> isThunk"", ""&&"", ""||""]], [[""!"", ""Scope"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]], [[null, ""Fn"", ""Fn"", ""DS -> getInlinedFunction"", ""="", null]]]",/data/download/swift/apple_swift41_new.cpp,337,74
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""899045"", ""True"", ""Parameter"", ""Optional < SILLocation > OptLoc""]",[],"[["""", [899074, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift42_old.cpp,217,60
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887243"", ""True"", ""Parameter"", ""SILLocation Loc""]",[],"[["""", [887275, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,225,60
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887268"", ""True"", ""Condition"", ""Loc . isDebugInfoLoc ( )""]",[],"[["""", [887243, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [887275, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,226,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887261"", ""True"", ""ReturnStatement"", ""return Loc . getDebugInfoLoc ( ) ;""]","[[[], [887268, ""True"", ""Loc . isDebugInfoLoc ( )"", ""Condition""]]]","[["""", [887243, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [887275, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null]], [[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,227,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887248"", ""True"", ""ReturnStatement"", ""return decodeSourceLoc ( Loc . getDebugSourceLoc ( ) ) ;""]","[[[], [887268, ""True"", ""Loc . isDebugInfoLoc ( )"", ""Condition""]]]","[["""", [887243, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [887275, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null]], [[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,228,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887285"", ""True"", ""Parameter"", ""Optional < SILLocation > OptLoc""]",[],"[["""", [887314, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,232,60
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""899050"", ""True"", ""ReturnStatement"", ""return OptLoc -> decodeDebugLoc ( SM ) ;""]",[],"[["""", [899059, ""True"", """", ""ExpressionStatement""]], ["""", [899062, ""True"", ""return"", ""Statement""]], ["""", [899042, ""True"", ""SourceManager & SM"", ""Parameter""]], ["""", [899042, ""True"", ""SourceManager & SM"", ""Parameter""]], ["""", [899045, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]]]","[[[null, ""SM""]], [[null, ""SM""]], [[null, ""SM""]], [[null, ""SM""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]]]",/data/download/swift/apple_swift42_old.cpp,221,67
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887290"", ""True"", ""ReturnStatement"", ""return decodeDebugLoc ( * OptLoc ) ;""]",[],"[["""", [887299, ""True"", """", ""ExpressionStatement""]], ["""", [887302, ""True"", ""return"", ""Statement""]], ["""", [887285, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]], ["""", [887285, ""True"", ""Optional < SILLocation > OptLoc"", ""Parameter""]], ["""", [887314, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""OptLoc""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]], [[null, ""OptLoc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift42_new.cpp,236,77
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""899229"", ""True"", ""ExpressionStatement"", ""L = CS -> Loc . decodeDebugLoc ( SM )""]","[[[""True""], [899284, ""True"", ""N < Scopes . size ( )"", ""Condition""]], [[""False"", ""True""], [899358, ""True"", ""DS"", ""Condition""]]]","[["""", [899242, ""True"", ""auto"", ""Statement""]], ["""", [899243, ""True"", ""* ParentScope = getOrCreateScope ( Parent )"", ""ExpressionStatement""]], ["""", [899254, ""True"", ""auto"", ""Statement""]], ["""", [899255, ""True"", """", ""ExpressionStatement""]]]","[[[""unsigned"", ""Scopes . size"", ""<""]], [[null]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""ParentScope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,263,76
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887493"", ""True"", ""ExpressionStatement"", ""L = decodeDebugLoc ( CS -> Loc )""]","[[[""False""], [887514, ""True"", ""CachedInlinedAt != InlinedAtCache . end ( )"", ""Condition""]], [[""False""], [887538, ""True"", ""! CS"", ""Condition""]]]","[["""", [887504, ""True"", ""auto"", ""Statement""]], ["""", [887523, ""True"", ""CachedInlinedAt = InlinedAtCache . find ( CS )"", ""ExpressionStatement""]], ["""", [887534, ""True"", ""auto"", ""Statement""]]]","[[[""CachedInlinedAt"", ""InlinedAtCache . end"", ""!=""]], [[""!"", ""CS"", null]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]], [[""CachedInlinedAt"", ""InlinedAtCache . find"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,266,56
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""899761"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc , SM )""]","[[[""False""], [899775, ""True"", ""! Scope"", ""Condition""]]]","[["""", [899772, ""True"", ""auto"", ""Statement""]], ["""", [899779, ""True"", ""* Scope = getOrCreateScope ( DS -> getInlinedScope ( ) )"", ""ExpressionStatement""]], ["""", [899795, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""Scope"", null]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,308,44
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""887940"", ""True"", ""ExpressionStatement"", ""L = getDebugLocation ( Loc )""]","[[[""False""], [887952, ""True"", ""! Scope"", ""Condition""]]]","[["""", [887949, ""True"", ""auto"", ""Statement""]], ["""", [887956, ""True"", ""* Scope = getOrCreateScope ( DS )"", ""ExpressionStatement""]], ["""", [887967, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""Scope"", null]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]], [[""*"", ""Scope"", null, ""getOrCreateScope"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,307,44
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""900952"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( SM , NTD )""]",[],"[["""", [900963, ""True"", ""auto"", ""Statement""]]]",[],/data/download/swift/apple_swift42_old.cpp,552,19
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""889140"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( * this , NTD )""]",[],"[["""", [889153, ""True"", ""auto"", ""Statement""]]]",[],/data/download/swift/apple_swift42_new.cpp,550,20
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""901999"", ""True"", ""ExpressionStatement"", ""L = DS -> Loc . decodeDebugLoc ( SM )""]","[[[""False"", ""False"", ""True""], [902012, ""True"", ""DS && ( ! SILFn || ( ! SILFn -> isBare ( ) && ! SILFn -> isThunk ( ) ) )"", ""Condition""]], [[""False"", ""False"", ""True""], [902186, ""True"", ""Cached != ScopeCache . end ( )"", ""Condition""]]]","[["""", [902036, ""True"", ""unsigned ScopeLine = 0 ;"", ""IdentifierDeclStatement""]], ["""", [902043, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [902051, ""True"", ""Name = getName ( DS -> Loc )"", ""ExpressionStatement""]], ["""", [902062, ""True"", ""Name = SILFn -> getName ( )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""SILFn"", null, ""!"", ""SILFn -> isBare"", null, ""!"", ""SILFn -> isThunk"", null, ""&&"", ""||""]], [[""Cached"", ""ScopeCache . end"", ""!=""]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,669,74
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""890193"", ""True"", ""ExpressionStatement"", ""L = decodeDebugLoc ( DS -> Loc )""]","[[[""False"", ""False"", ""True""], [890204, ""True"", ""DS && ( ! SILFn || ( ! SILFn -> isBare ( ) && ! SILFn -> isThunk ( ) ) )"", ""Condition""]], [[""False"", ""False"", ""True""], [890378, ""True"", ""Cached != ScopeCache . end ( )"", ""Condition""]]]","[["""", [890228, ""True"", ""unsigned ScopeLine = 0 ;"", ""IdentifierDeclStatement""]], ["""", [890235, ""True"", ""SILLocation :: DebugLoc L ;"", ""IdentifierDeclStatement""]], ["""", [890243, ""True"", ""Name = getName ( DS -> Loc )"", ""ExpressionStatement""]], ["""", [890254, ""True"", ""Name = SILFn -> getName ( )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""SILFn"", null, ""!"", ""SILFn -> isBare"", null, ""!"", ""SILFn -> isThunk"", null, ""&&"", ""||""]], [[""Cached"", ""ScopeCache . end"", ""!=""]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""ScopeLine"", ""ScopeLine"", ""0"", ""="", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[null, ""L"", null]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]], [[""Name"", ""SILFn -> getName"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,667,74
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""902327"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , D )""]","[[[""False""], [902366, ""True"", ""! M"", ""Condition""]], [[""True"", ""False""], [902428, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]]]","[["""", [902338, ""True"", ""auto"", ""Statement""]], ["""", [902339, ""True"", """", ""ExpressionStatement""]], ["""", [902340, ""True"", "")"", ""Statement""]], ["""", [902342, ""True"", ""M"", ""Statement""]]]","[[[""!"", ""swift :: ModuleDecl *"", null]], [[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]]]",/data/download/swift/apple_swift42_old.cpp,760,47
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""890525"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , D )""]","[[[""False""], [890566, ""True"", ""! M"", ""Condition""]], [[""True"", ""False""], [890628, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]]]","[["""", [890538, ""True"", ""auto"", ""Statement""]], ["""", [890539, ""True"", """", ""ExpressionStatement""]], ["""", [890540, ""True"", "")"", ""Statement""]], ["""", [890542, ""True"", ""M"", ""Statement""]]]","[[[""!"", ""swift :: ModuleDecl *"", null]], [[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]]]",/data/download/swift/apple_swift42_new.cpp,758,47
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""903826"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( SM , VarDecl )""]","[[[""False"", ""True""], [903887, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]], [[""False"", ""True""], [903895, ""True"", ""! DS"", ""Condition""]]]","[["""", [903837, ""True"", ""auto"", ""Statement""]], ["""", [903838, ""True"", ""assert ( Scope && \""variable has no local scope\"" )"", ""ExpressionStatement""]], ["""", [903847, ""True"", ""* Scope = dyn_cast < llvm :: DILocalScope > ( getOrCreateScope ( DS ) )"", ""ExpressionStatement""]], ["""", [903862, ""True"", ""auto"", ""Statement""]]]","[[[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]], [[""!"", ""const SILDebugScope *"", null]], [[""assert""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,899,87
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""892027"", ""True"", ""ExpressionStatement"", ""Loc = getDebugLoc ( * this , VarDecl )""]","[[[""False"", ""True""], [892090, ""True"", ""Opts . DebugInfoKind <= IRGenDebugInfoKind :: LineTables"", ""Condition""]], [[""False"", ""True""], [892098, ""True"", ""! DS"", ""Condition""]]]","[["""", [892040, ""True"", ""auto"", ""Statement""]], ["""", [892041, ""True"", ""assert ( Scope && \""variable has no local scope\"" )"", ""ExpressionStatement""]], ["""", [892050, ""True"", ""* Scope = dyn_cast < llvm :: DILocalScope > ( getOrCreateScope ( DS ) )"", ""ExpressionStatement""]], ["""", [892065, ""True"", ""auto"", ""Statement""]]]","[[[""Opts"", ""DebugInfoKind"", null, ""IRGenDebugInfoKind :: LineTables"", ""<=""]], [[""!"", ""const SILDebugScope *"", null]], [[""assert""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]], [[""*"", ""Scope"", null, ""dyn_cast"", ""llvm :: DILocalScope"", ""getOrCreateScope"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,897,87
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""909096"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Struct""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [909107, ""True"", ""auto"", ""Statement""]], ["""", [909108, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [909119, ""True"", ""auto"", ""Statement""]], ["""", [909120, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Struct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1476,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""897321"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Struct""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [897334, ""True"", ""auto"", ""Statement""]], ["""", [897335, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [897346, ""True"", ""auto"", ""Statement""]], ["""", [897347, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Struct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1474,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908970"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Class""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908981, ""True"", ""auto"", ""Statement""]], ["""", [908982, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [908993, ""True"", ""auto"", ""Statement""]], ["""", [908994, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Class"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1494,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""897193"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Class""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [897206, ""True"", ""auto"", ""Statement""]], ["""", [897207, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [897218, ""True"", ""auto"", ""Statement""]], ["""", [897219, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Class"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1492,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908707"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Protocol""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908718, ""True"", ""auto"", ""Statement""]], ["""", [908719, ""True"", ""* Decl = ProtocolTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [908730, ""True"", ""auto"", ""Statement""]], ["""", [908731, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Protocol"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1534,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896928"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Protocol""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896941, ""True"", ""auto"", ""Statement""]], ["""", [896942, ""True"", ""* Decl = ProtocolTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [896953, ""True"", ""auto"", ""Statement""]], ["""", [896954, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Protocol"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ProtocolTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1532,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908636"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: ProtocolComposition""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908647, ""True"", ""auto"", ""Statement""]], ["""", [908648, ""True"", ""* Decl = DbgTy . getDecl ( )"", ""ExpressionStatement""]], ["""", [908659, ""True"", ""auto"", ""Statement""]], ["""", [908660, ""True"", ""case TypeKind :: ProtocolComposition :"", ""Label""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: ProtocolComposition"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""TypeKind :: ProtocolComposition""]]]",/data/download/swift/apple_swift42_old.cpp,1543,39
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896855"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: ProtocolComposition""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896868, ""True"", ""auto"", ""Statement""]], ["""", [896869, ""True"", ""* Decl = DbgTy . getDecl ( )"", ""ExpressionStatement""]], ["""", [896880, ""True"", ""auto"", ""Statement""]], ["""", [896881, ""True"", ""case TypeKind :: ProtocolComposition :"", ""Label""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: ProtocolComposition"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""*"", ""Decl"", null, ""DbgTy . getDecl"", ""=""]], [[""TypeKind :: ProtocolComposition""]]]",/data/download/swift/apple_swift42_new.cpp,1541,39
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908552"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: UnboundGeneric""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908563, ""True"", ""auto"", ""Statement""]], ["""", [908564, ""True"", ""* Decl = UnboundTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [908575, ""True"", ""auto"", ""Statement""]], ["""", [908576, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: UnboundGeneric"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1556,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896769"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: UnboundGeneric""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896782, ""True"", ""auto"", ""Statement""]], ["""", [896783, ""True"", ""* Decl = UnboundTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [896794, ""True"", ""auto"", ""Statement""]], ["""", [896795, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: UnboundGeneric"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""UnboundTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1554,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908463"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericStruct""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908474, ""True"", ""auto"", ""Statement""]], ["""", [908475, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [908486, ""True"", ""auto"", ""Statement""]], ["""", [908487, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericStruct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1566,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896678"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericStruct""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896691, ""True"", ""auto"", ""Statement""]], ["""", [896692, ""True"", ""* Decl = StructTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [896703, ""True"", ""auto"", ""Statement""]], ["""", [896704, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericStruct"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""StructTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1564,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908391"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericClass""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908402, ""True"", ""auto"", ""Statement""]], ["""", [908403, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [908414, ""True"", ""auto"", ""Statement""]], ["""", [908415, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericClass"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1575,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896604"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericClass""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896617, ""True"", ""auto"", ""Statement""]], ["""", [896618, ""True"", ""* Decl = ClassTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [896629, ""True"", ""auto"", ""Statement""]], ["""", [896630, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericClass"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""ClassTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1573,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""908179"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Archetype -> getAssocType ( ) )""]","[[[""case TypeKind :: Archetype""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [908195, ""True"", ""auto"", ""Statement""]], ["""", [908196, ""True"", """", ""ExpressionStatement""]], ["""", [908197, ""True"", "")"", ""Statement""]], ["""", [908198, ""True"", ""("", ""Statement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Archetype"", ""==""]], [[""!"", ""TypeBase *"", null]]]",/data/download/swift/apple_swift42_old.cpp,1611,61
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896390"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Archetype -> getAssocType ( ) )""]","[[[""case TypeKind :: Archetype""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896408, ""True"", ""auto"", ""Statement""]], ["""", [896409, ""True"", """", ""ExpressionStatement""]], ["""", [896410, ""True"", "")"", ""Statement""]], ["""", [896411, ""True"", ""("", ""Statement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Archetype"", ""==""]], [[""!"", ""TypeBase *"", null]]]",/data/download/swift/apple_swift42_new.cpp,1609,61
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""907910"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: Metatype"", ""case TypeKind :: ExistentialMetatype""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [907926, ""True"", ""auto"", ""Statement""]], ["""", [907927, ""True"", ""Flags |= llvm :: DINode :: FlagArtificial"", ""ExpressionStatement""]], ["""", [907931, ""True"", ""case TypeKind :: Metatype :"", ""Label""]], ["""", [907933, ""True"", ""case TypeKind :: ExistentialMetatype :"", ""Label""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""TypeKind :: Metatype""]], [[""TypeKind :: ExistentialMetatype""]]]",/data/download/swift/apple_swift42_old.cpp,1648,34
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""896119"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: Metatype"", ""case TypeKind :: ExistentialMetatype""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [896137, ""True"", ""auto"", ""Statement""]], ["""", [896138, ""True"", ""Flags |= llvm :: DINode :: FlagArtificial"", ""ExpressionStatement""]], ["""", [896142, ""True"", ""case TypeKind :: Metatype :"", ""Label""]], ["""", [896144, ""True"", ""case TypeKind :: ExistentialMetatype :"", ""Label""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""llvm :: DINode :: DIFlags"", ""llvm :: DINode :: FlagArtificial"", ""|=""]], [[""TypeKind :: Metatype""]], [[""TypeKind :: ExistentialMetatype""]]]",/data/download/swift/apple_swift42_new.cpp,1646,34
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""907772"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: Enum""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [907783, ""True"", ""auto"", ""Statement""]], ["""", [907784, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [907795, ""True"", ""auto"", ""Statement""]], ["""", [907796, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Enum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1670,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""895979"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: Enum""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [895992, ""True"", ""auto"", ""Statement""]], ["""", [895993, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [896004, ""True"", ""auto"", ""Statement""]], ["""", [896005, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: Enum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1668,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""907656"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: BoundGenericEnum""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [907667, ""True"", ""auto"", ""Statement""]], ["""", [907668, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [907679, ""True"", ""auto"", ""Statement""]], ["""", [907680, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericEnum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1683,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""895861"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: BoundGenericEnum""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [895874, ""True"", ""auto"", ""Statement""]], ["""", [895875, ""True"", ""* Decl = EnumTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [895886, ""True"", ""auto"", ""Statement""]], ["""", [895887, ""True"", """", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: BoundGenericEnum"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""EnumTy -> getDecl"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1681,90
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""907449"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: WeakStorage"", ""case TypeKind :: UnmanagedStorage"", ""case TypeKind :: UnownedStorage""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [907465, ""True"", ""auto"", ""Statement""]], ["""", [907466, ""True"", ""CanTy = ReferenceTy -> getReferentType ( )"", ""ExpressionStatement""]], ["""", [907475, ""True"", ""auto"", ""Statement""]], ["""", [907476, ""True"", ""* ReferenceTy = cast < ReferenceStorageType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1712,83
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""895652"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , DbgTy . getDecl ( ) )""]","[[[""case TypeKind :: WeakStorage"", ""case TypeKind :: UnmanagedStorage"", ""case TypeKind :: UnownedStorage""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [895670, ""True"", ""auto"", ""Statement""]], ["""", [895671, ""True"", ""CanTy = ReferenceTy -> getReferentType ( )"", ""ExpressionStatement""]], ["""", [895680, ""True"", ""auto"", ""Statement""]], ["""", [895681, ""True"", ""* ReferenceTy = cast < ReferenceStorageType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""TypeBase *"", null]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""CanTy"", ""ReferenceTy -> getReferentType"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""ReferenceTy"", null, ""cast"", ""ReferenceStorageType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1710,83
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"[""907373"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( SM , Decl )""]","[[[""case TypeKind :: NameAlias""], [909506, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [909585, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [907384, ""True"", ""auto"", ""Statement""]], ["""", [907385, ""True"", ""* Decl = NameAliasTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [907396, ""True"", ""auto"", ""Statement""]], ["""", [907397, ""True"", ""* NameAliasTy = cast < NameAliasType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: NameAlias"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_old.cpp,1724,32
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"[""895574"", ""True"", ""ExpressionStatement"", ""L = getDebugLoc ( * this , Decl )""]","[[[""case TypeKind :: NameAlias""], [897733, ""True"", ""BaseTy -> getKind ( )"", ""Condition""]], [[], [897812, ""True"", ""! BaseTy"", ""Condition""]]]","[["""", [895587, ""True"", ""auto"", ""Statement""]], ["""", [895588, ""True"", ""* Decl = NameAliasTy -> getDecl ( )"", ""ExpressionStatement""]], ["""", [895599, ""True"", ""auto"", ""Statement""]], ["""", [895600, ""True"", ""* NameAliasTy = cast < NameAliasType > ( BaseTy )"", ""ExpressionStatement""]]]","[[[""BaseTy -> getKind ( )"", ""TypeKind :: NameAlias"", ""==""]], [[""!"", ""TypeBase *"", null]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""Decl"", null, ""NameAliasTy -> getDecl"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]], [[""*"", ""NameAliasTy"", null, ""cast"", ""NameAliasType"", ""TypeBase *"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift42_new.cpp,1722,32
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"[""910373"", ""True"", ""Parameter"", ""SILFunction * SILFn""]",[],"[["""", [910376, ""True"", ""SILLocation Loc"", ""Parameter""]], ["""", [910402, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Loc""]], [[null, ""Loc""]], [[""ENTRY""]]]",/data/download/swift/apple_swift43_new.cpp,25,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"[""910387"", ""True"", ""ExpressionStatement"", ""assert ( SILFn && \""no parent provided\"" )""]","[[[], [910400, ""True"", ""ParentScope"", ""Condition""]]]","[["""", [910367, ""True"", ""const SILDebugScope * InlinedCallSite"", ""Parameter""]], ["""", [910370, ""True"", ""const SILDebugScope * ParentScope"", ""Parameter""]], ["""", [910373, ""True"", ""SILFunction * SILFn"", ""Parameter""]]]","[[[null]], [[null, ""InlinedCallSite""]], [[null, ""InlinedCallSite""]], [[null, ""ParentScope""]], [[null, ""ParentScope""]], [[null, ""SILFn""]], [[null, ""SILFn""]]]",/data/download/swift/apple_swift43_new.cpp,32,68
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"[""910412"", ""True"", ""Parameter"", ""SILLocation Loc""]",[],"[["""", [910416, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift43_new.cpp,37,60
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"[""910437"", ""True"", ""ExpressionStatement"", """"]","[[[""False""], [910494, ""True"", ""Parent . isNull ( )"", ""Condition""]]]","[["""", [910438, ""True"", "")"", ""Statement""]], ["""", [910439, ""True"", ""\""orphaned scope\"""", ""Statement""]], ["""", [910440, ""True"", ""&&"", ""Statement""]], ["""", [910441, ""True"", "")"", ""Statement""]]]",[[[null]]],/data/download/swift/apple_swift43_new.cpp,47,72
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILPrinter.cpp,-,"[""930572"", ""True"", ""ExpressionStatement"", ""CallSite . getSourceLoc ( ) . print ( PrintState . OS , M . getASTContext ( ) . SourceMgr , LastBufferID )""]","[[[""False"", ""True""], [930599, ""True"", ""! CallSite . isNull ( ) && CallSite . isASTNode ( )"", ""Condition""]], [[""False"", ""True""], [930695, ""True"", ""DS"", ""Condition""]]]","[["""", [930615, ""True"", ""CallSite = CS -> Loc"", ""ExpressionStatement""]], ["""", [930621, ""True"", ""auto"", ""Statement""]], ["""", [930622, ""True"", ""* this << \"" perf_inlined_at \"""", ""ExpressionStatement""]]]","[[[""!"", ""CallSite . isNull"", null]], [[null]], [[null]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""CallSite"", ""CS"", ""Loc"", null, ""=""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]]]",/data/download/swift/apple_swift44_old.cpp,761,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILPrinter.cpp,+,"[""913683"", ""True"", ""ExpressionStatement"", ""CallSite . getSourceLoc ( ) . print ( PrintState . OS , M . getASTContext ( ) . SourceMgr , LastBufferID )""]","[[[""True""], [913710, ""True"", ""! CallSite . isNull ( ) && CallSite . isASTNode ( )"", ""Condition""]], [[""True""], [913773, ""True"", ""CS = CS -> InlinedCallSite"", ""Condition""]], [[""False"", ""True"", ""False""], [913795, ""True"", ""! DS"", ""Condition""]]]","[["""", [913726, ""True"", ""CallSite = CS -> Loc"", ""ExpressionStatement""]], ["""", [913732, ""True"", ""auto"", ""Statement""]], ["""", [913733, ""True"", ""* this << \"" perf_inlined_at \"""", ""ExpressionStatement""]]]","[[[""!"", ""CallSite . isNull"", null]], [[null]], [[""const SILDebugScope *"", ""const SILDebugScope *"", ""InlinedCallSite"", null, ""=""]], [[""!"", ""const SILDebugScope *"", null]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""CallSite"", ""const SILDebugScope *"", ""Loc"", null, ""=""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]], [[""*"", ""this"", null, ""\"" perf_inlined_at \"""", ""<<""]]]",/data/download/swift/apple_swift44_new.cpp,761,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""946778"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( AI . getLoc ( ) , & F , AIScope )""]","[[[""False""], [946811, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [947123, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [946796, ""True"", "")"", ""Statement""]], ["""", [946797, ""True"", "")"", ""Statement""]], ["""", [946798, ""True"", ""("", ""Statement""]], ["""", [946799, ""True"", ""getModule"", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]]]",/data/download/swift/apple_swift45_old.cpp,74,73
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""946762"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> getParentFunction ( ) == & F )""]","[[[""False""], [946811, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [947123, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [946778, ""True"", ""SILDebugScope ( AI . getLoc ( ) , & F , AIScope )"", ""ExpressionStatement""]], ["""", [946796, ""True"", "")"", ""Statement""]], ["""", [946797, ""True"", "")"", ""Statement""]], ["""", [946798, ""True"", ""("", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]], [[""SILDebugScope""]]]",/data/download/swift/apple_swift45_old.cpp,75,73
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""944985"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( AI . getLoc ( ) , nullptr , AIScope , AIScope -> InlinedCallSite )""]","[[[""False""], [945020, ""True"", ""IKind == InlineKind :: MandatoryInline"", ""Condition""]], [[""False"", ""True"", ""True""], [945332, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [945005, ""True"", "")"", ""Statement""]], ["""", [945006, ""True"", "")"", ""Statement""]], ["""", [945007, ""True"", ""("", ""Statement""]], ["""", [945008, ""True"", ""getModule"", ""Statement""]]]","[[[""IKind"", ""InlineKind :: MandatoryInline"", ""==""]], [[""AI . getFunction"", ""SILFunction *"", ""==""]]]",/data/download/swift/apple_swift45_new.cpp,74,73
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""944957"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> getParentFunction ( ) == & F )""]","[[[""True"", ""False""], [945332, ""True"", ""AI . getFunction ( ) == CalleeFunction"", ""Condition""]]]","[["""", [944973, ""True"", ""assert ( CallSiteScope && \""call site has no scope\"" )"", ""ExpressionStatement""]], ["""", [944985, ""True"", ""SILDebugScope ( AI . getLoc ( ) , nullptr , AIScope , AIScope -> InlinedCallSite )"", ""ExpressionStatement""]], ["""", [945016, ""True"", ""CallSiteScope = AIScope"", ""ExpressionStatement""]], ["""", [945005, ""True"", "")"", ""Statement""]], ["""", [945006, ""True"", "")"", ""Statement""]], ["""", [945027, ""True"", ""AI . getInstruction ( ) -> replaceAllUsesWith ( RetArg )"", ""ExpressionStatement""]], ["""", [945165, ""True"", ""AIScope = AI . getFunction ( ) -> getDebugScope ( )"", ""ExpressionStatement""]]]","[[[""AI . getFunction"", ""SILFunction *"", ""==""]], [[""assert""]], [[""SILDebugScope""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""CallSiteScope"", ""AIScope"", ""=""]], [[""AI . getInstruction ( ) -> replaceAllUsesWith""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]], [[""AIScope"", ""AI . getFunction ( ) -> getDebugScope"", ""=""]]]",/data/download/swift/apple_swift45_new.cpp,77,43
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""947407"", ""True"", ""ExpressionStatement"", ""assert ( CalleeScope )""]",[],"[["""", [947323, ""True"", ""const SILDebugScope * CalleeScope"", ""Parameter""]], ["""", [947414, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""CalleeScope""]], [[null, ""CalleeScope""]], [[""ENTRY""]]]",/data/download/swift/apple_swift45_old.cpp,201,89
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""947355"", ""True"", ""ExpressionStatement"", ""SILDebugScope ( CallSiteScope , CalleeScope )""]","[[[""False""], [947386, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]]]","[["""", [947364, ""True"", "")"", ""Statement""]], ["""", [947365, ""True"", "")"", ""Statement""]], ["""", [947366, ""True"", ""("", ""Statement""]], ["""", [947367, ""True"", ""getModule"", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]]]",/data/download/swift/apple_swift45_old.cpp,207,80
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"[""947340"", ""True"", ""ExpressionStatement"", ""assert ( CallSiteScope -> Parent == InlineScope -> InlinedCallSite -> Parent )""]","[[[""False""], [947386, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]]]","[["""", [947355, ""True"", ""SILDebugScope ( CallSiteScope , CalleeScope )"", ""ExpressionStatement""]], ["""", [947364, ""True"", "")"", ""Statement""]], ["""", [947365, ""True"", "")"", ""Statement""]], ["""", [947366, ""True"", ""("", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]], [[""SILDebugScope""]]]",/data/download/swift/apple_swift45_old.cpp,208,80
"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,"[""945583"", ""True"", ""Statement"", ""(""]","[[[""False""], [945630, ""True"", ""it != InlinedScopeCache . end ( )"", ""Condition""]], [[""False""], [945654, ""True"", ""! CalleeScope"", ""Condition""]]]","[["""", [945584, ""True"", ""SILDebugScope"", ""Statement""]], ["""", [945585, ""True"", "")"", ""Statement""]], ["""", [945586, ""True"", ""M"", ""Statement""]], ["""", [945587, ""True"", ""("", ""Statement""]]]","[[[""it"", ""InlinedScopeCache . end"", ""!=""]], [[""!"", ""const SILDebugScope *"", null]]]",/data/download/swift/apple_swift45_new.cpp,210,57
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"[""957007"", ""True"", ""ExpressionStatement"", ""assert ( inherited -> getType ( ) -> isEqual ( spec -> getGenericConformance ( ) -> getType ( ) ) && \""inherited conformance doesn't match type?!\"" )""]","[[[""case ProtocolConformanceKind :: Specialized""], [957066, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [957038, ""True"", ""inherited = spec -> getGenericConformance ( ) -> getInheritedConformance ( protocol )"", ""ExpressionStatement""]], ["""", [957054, ""True"", ""auto"", ""Statement""]], ["""", [957055, ""True"", ""spec = cast < SpecializedProtocolConformance > ( this )"", ""ExpressionStatement""]], ["""", [957063, ""True"", ""auto"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Specialized"", ""==""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift46_old.cpp,785,41
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"[""956916"", ""True"", ""ExpressionStatement"", ""assert ( getType ( ) -> isEqual ( r -> getType ( ) ) && \""substitution didn't produce conformance for same type?!\"" )""]","[[[""case ProtocolConformanceKind :: Specialized""], [957066, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [956940, ""True"", """", ""ExpressionStatement""]], ["""", [956941, ""True"", "")"", ""Statement""]], ["""", [956942, ""True"", "")"", ""Statement""]], ["""", [956943, ""True"", ""subMap"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Specialized"", ""==""]]]",/data/download/swift/apple_swift46_old.cpp,796,58
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"[""956854"", ""True"", ""ExpressionStatement"", ""assert ( protoInherited -> getType ( ) -> isEqual ( classInherited -> getInheritedConformance ( ) -> getType ( ) ) && \""inherited conformance doesn't match type?!\"" )""]","[[[""case ProtocolConformanceKind :: Inherited""], [957066, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [956885, ""True"", ""protoInherited = classInherited -> getInheritedConformance ( ) -> getInheritedConformance ( protocol )"", ""ExpressionStatement""]], ["""", [956901, ""True"", ""auto"", ""Statement""]], ["""", [956902, ""True"", ""classInherited = cast < InheritedProtocolConformance > ( this )"", ""ExpressionStatement""]], ["""", [956910, ""True"", ""auto"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Inherited"", ""==""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift46_old.cpp,805,42
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"[""956751"", ""True"", ""ExpressionStatement"", ""assert ( ! isComplete ( ) && \""Missing inherited mapping in conformance\"" )""]","[[[""False""], [956777, ""True"", ""inheritedMapping . first -> inheritsFrom ( protocol )"", ""Condition""]], [[""False""], [956801, ""True"", ""known != inherited . end ( )"", ""Condition""]], [[""case ProtocolConformanceKind :: Normal""], [957066, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [956788, ""True"", "")"", ""Statement""]], ["""", [956789, ""True"", ""inherited"", ""Statement""]], ["""", [956790, ""True"", ""inheritedMapping :"", ""Label""]]]","[[[null]], [[""known"", ""inherited . end"", ""!=""]], [[""getKind ( )"", ""ProtocolConformanceKind :: Normal"", ""==""]], [[""inheritedMapping""]]]",/data/download/swift/apple_swift46_old.cpp,831,72
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"[""956737"", ""True"", ""ExpressionStatement"", ""assert ( C . getLazyResolver ( ) && \""Need a lazy resolver\"" )""]","[[[""False""], [956777, ""True"", ""inheritedMapping . first -> inheritsFrom ( protocol )"", ""Condition""]], [[""False""], [956801, ""True"", ""known != inherited . end ( )"", ""Condition""]], [[""case ProtocolConformanceKind :: Normal""], [957066, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [956751, ""True"", ""assert ( ! isComplete ( ) && \""Missing inherited mapping in conformance\"" )"", ""ExpressionStatement""]], ["""", [956788, ""True"", "")"", ""Statement""]], ["""", [956789, ""True"", ""inherited"", ""Statement""]]]","[[[null]], [[""known"", ""inherited . end"", ""!=""]], [[""getKind ( )"", ""ProtocolConformanceKind :: Normal"", ""==""]], [[""assert""]]]",/data/download/swift/apple_swift46_old.cpp,832,62
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/SILGen/SILGenType.cpp,-,"[""965024"", ""True"", ""ExpressionStatement"", ""assert ( foundBaseConformance != Conformance -> getInheritedConformances ( ) . end ( ) && \""no inherited conformance for base protocol\"" )""]",[],"[["""", [965045, ""True"", ""foundBaseConformance = Conformance -> getInheritedConformances ( ) . find ( baseProtocol )"", ""ExpressionStatement""]], ["""", [965061, ""True"", ""auto"", ""Statement""]], ["""", [965062, ""True"", ""assert ( Lowering :: TypeConverter :: protocolRequiresWitnessTable ( baseProtocol ) )"", ""ExpressionStatement""]], ["""", [964967, ""True"", ""ProtocolDecl * baseProtocol"", ""Parameter""]]]","[[[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""assert""]], [[null, ""baseProtocol""]], [[null, ""baseProtocol""]]]",/data/download/swift/apple_swift47_old.cpp,392,50
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/Serialization/Deserialization.cpp,-,"[""993118"", ""True"", ""ExpressionStatement"", ""assert ( inheritedRef . isConcrete ( ) )""]","[[[""True""], [993140, ""True"", ""inheritedCount --"", ""Condition""]], [[""True"", ""False"", ""True""], [993235, ""True"", ""conformanceEntry . isComplete ( )"", ""Condition""]], [[""False""], [993357, ""True"", ""kind != NORMAL_PROTOCOL_CONFORMANCE"", ""Condition""]], [[""False""], [993414, ""True"", ""entry . Kind != llvm :: BitstreamEntry :: Record"", ""Condition""]]]","[["""", [993130, ""True"", ""inheritedRef = readConformance ( DeclTypeCursor )"", ""ExpressionStatement""]], ["""", [993139, ""True"", ""auto"", ""Statement""]], ["""", [993097, ""True"", ""inheritedConformances [ inherited -> getProtocol ( ) ] = inherited"", ""ExpressionStatement""]], ["""", [993144, ""True"", ""InheritedConformanceMap inheritedConformances ;"", ""IdentifierDeclStatement""]]]","[[[""unsigned"", null, null]], [[null]], [[""unsigned"", ""NORMAL_PROTOCOL_CONFORMANCE"", ""!=""]], [[""entry"", ""Kind"", null, ""llvm :: BitstreamEntry :: Record"", ""!=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[null, ""inheritedConformances"", null]], [[null, ""inheritedConformances"", null]], [[null, ""inheritedConformances"", null]]]",/data/download/swift/apple_swift48_old.cpp,748,70
Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/Serialization/Serialization.cpp,-,"[""1043751"", ""True"", ""ExpressionStatement"", ""writeConformance ( conformance -> getInheritedConformance ( inheritedProto ) , DeclTypeAbbrCodes )""]",[],"[["""", [1043767, ""True"", "")"", ""Statement""]], ["""", [1043768, ""True"", ""inheritedProtos"", ""Statement""]], ["""", [1043769, ""True"", ""inheritedProto :"", ""Label""]], ["""", [1043771, ""True"", ""auto"", ""Statement""]]]","[[[""inheritedProto""]]]",/data/download/swift/apple_swift49_old.cpp,1329,28
"Start emitting begin_access markers for local and global vars.
NFC by default.

I had a much more comprehensive version of this patch that I had to
back out in order to just get something in to unblock progress.
There's a lot of technical debt in SILGen around l-values.

Enabling this will almost certainly not get past the SIL passes.",lib/SILGen/SILGenLValue.cpp,+,"[""1065259"", ""True"", ""ExpressionStatement"", ""assert ( var -> getDeclContext ( ) -> isTypeContext ( ) && ! var -> isInstanceMember ( ) )""]","[[[""False""], [1065297, ""True"", ""var -> getDeclContext ( ) -> isModuleScopeContext ( )"", ""Condition""]], [[""True""], [1065321, ""True"", ""var -> getDeclContext ( ) -> isLocalContext ( )"", ""Condition""]], [[""case AccessStrategy :: Storage""], [1065333, ""True"", ""! var -> isLet ( )"", ""Condition""]], [[""case AccessStrategy :: Storage""], [1065474, ""True"", ""var -> getAccessStrategy ( semantics , accessKind )"", ""Condition""]]]","[["""", [1065342, ""True"", ""Optional < SILAccessEnforcement > enforcement ;"", ""IdentifierDeclStatement""]]]","[[[null]], [[null]], [[""! var -> isLet ( )"", ""AccessStrategy :: Storage"", ""==""]], [[""var -> getAccessStrategy ( semantics , accessKind )"", ""AccessStrategy :: Storage"", ""==""]], [[null, ""enforcement"", null]], [[null, ""enforcement"", null]], [[null, ""enforcement"", null]]]",/data/download/swift/apple_swift50_new.cpp,1702,68
"[AST] Eliminate ""inherited conformances"" from NormalProtocolConformance.

All of this information is recoverable from the more-general,
more-sane signature conformances, so stop
recording/serializing/deserializing all of this extra stuff.",lib/Serialization/Deserialization.cpp,-,"[""1120341"", ""True"", ""ExpressionStatement"", ""assert ( inheritedRef . isConcrete ( ) )""]","[[[""True""], [1120363, ""True"", ""inheritedCount --"", ""Condition""]], [[""True"", ""False"", ""True""], [1120458, ""True"", ""conformanceEntry . isComplete ( )"", ""Condition""]], [[""False""], [1120580, ""True"", ""kind != NORMAL_PROTOCOL_CONFORMANCE"", ""Condition""]], [[""False""], [1120637, ""True"", ""entry . Kind != llvm :: BitstreamEntry :: Record"", ""Condition""]]]","[["""", [1120353, ""True"", ""inheritedRef = readConformance ( DeclTypeCursor )"", ""ExpressionStatement""]], ["""", [1120362, ""True"", ""auto"", ""Statement""]], ["""", [1120320, ""True"", ""inheritedConformances [ inherited -> getProtocol ( ) ] = inherited"", ""ExpressionStatement""]], ["""", [1120367, ""True"", ""InheritedConformanceMap inheritedConformances ;"", ""IdentifierDeclStatement""]]]","[[[""unsigned"", null, null]], [[null]], [[""unsigned"", ""NORMAL_PROTOCOL_CONFORMANCE"", ""!=""]], [[""entry"", ""Kind"", null, ""llvm :: BitstreamEntry :: Record"", ""!=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""inheritedRef"", ""readConformance"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[""InheritedConformanceMap"", ""inherited -> getProtocol"", null, ""inherited"", ""=""]], [[null, ""inheritedConformances"", null]], [[null, ""inheritedConformances"", null]], [[null, ""inheritedConformances"", null]]]",/data/download/swift/apple_swift52_old.cpp,748,70
"[AST] Eliminate ""inherited conformances"" from NormalProtocolConformance.

All of this information is recoverable from the more-general,
more-sane signature conformances, so stop
recording/serializing/deserializing all of this extra stuff.",lib/Serialization/Serialization.cpp,-,"[""1170974"", ""True"", ""ExpressionStatement"", ""writeConformance ( conformance -> getInheritedConformance ( inheritedProto ) , DeclTypeAbbrCodes )""]",[],"[["""", [1170990, ""True"", "")"", ""Statement""]], ["""", [1170991, ""True"", ""inheritedProtos"", ""Statement""]], ["""", [1170992, ""True"", ""inheritedProto :"", ""Label""]], ["""", [1170994, ""True"", ""auto"", ""Statement""]]]","[[[""inheritedProto""]]]",/data/download/swift/apple_swift53_old.cpp,1329,28
Stop using ProtocolConformance::getInheritedConformances(),lib/SILGen/SILGenType.cpp,-,"[""1195385"", ""True"", ""ExpressionStatement"", ""assert ( foundBaseConformance != Conformance -> getInheritedConformances ( ) . end ( ) && \""no inherited conformance for base protocol\"" )""]",[],"[["""", [1195406, ""True"", ""foundBaseConformance = Conformance -> getInheritedConformances ( ) . find ( baseProtocol )"", ""ExpressionStatement""]], ["""", [1195422, ""True"", ""auto"", ""Statement""]], ["""", [1195423, ""True"", ""assert ( Lowering :: TypeConverter :: protocolRequiresWitnessTable ( baseProtocol ) )"", ""ExpressionStatement""]], ["""", [1195328, ""True"", ""ProtocolDecl * baseProtocol"", ""Parameter""]]]","[[[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""foundBaseConformance"", ""Conformance -> getInheritedConformances ( ) . find"", ""=""]], [[""assert""]], [[null, ""baseProtocol""]], [[null, ""baseProtocol""]]]",/data/download/swift/apple_swift54_old.cpp,392,50
"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"[""1207847"", ""True"", ""ExpressionStatement"", ""assert ( inherited -> getType ( ) -> isEqual ( spec -> getGenericConformance ( ) -> getType ( ) ) && \""inherited conformance doesn't match type?!\"" )""]","[[[""case ProtocolConformanceKind :: Specialized""], [1207906, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [1207878, ""True"", ""inherited = spec -> getGenericConformance ( ) -> getInheritedConformance ( protocol )"", ""ExpressionStatement""]], ["""", [1207894, ""True"", ""auto"", ""Statement""]], ["""", [1207895, ""True"", ""spec = cast < SpecializedProtocolConformance > ( this )"", ""ExpressionStatement""]], ["""", [1207903, ""True"", ""auto"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Specialized"", ""==""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""inherited"", ""spec -> getGenericConformance ( ) -> getInheritedConformance"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""spec"", ""cast"", ""SpecializedProtocolConformance"", ""this"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift55_old.cpp,785,41
"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"[""1207756"", ""True"", ""ExpressionStatement"", ""assert ( getType ( ) -> isEqual ( r -> getType ( ) ) && \""substitution didn't produce conformance for same type?!\"" )""]","[[[""case ProtocolConformanceKind :: Specialized""], [1207906, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [1207780, ""True"", """", ""ExpressionStatement""]], ["""", [1207781, ""True"", "")"", ""Statement""]], ["""", [1207782, ""True"", "")"", ""Statement""]], ["""", [1207783, ""True"", ""subMap"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Specialized"", ""==""]]]",/data/download/swift/apple_swift55_old.cpp,796,58
"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"[""1207694"", ""True"", ""ExpressionStatement"", ""assert ( protoInherited -> getType ( ) -> isEqual ( classInherited -> getInheritedConformance ( ) -> getType ( ) ) && \""inherited conformance doesn't match type?!\"" )""]","[[[""case ProtocolConformanceKind :: Inherited""], [1207906, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [1207725, ""True"", ""protoInherited = classInherited -> getInheritedConformance ( ) -> getInheritedConformance ( protocol )"", ""ExpressionStatement""]], ["""", [1207741, ""True"", ""auto"", ""Statement""]], ["""", [1207742, ""True"", ""classInherited = cast < InheritedProtocolConformance > ( this )"", ""ExpressionStatement""]], ["""", [1207750, ""True"", ""auto"", ""Statement""]]]","[[[""getKind ( )"", ""ProtocolConformanceKind :: Inherited"", ""==""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""protoInherited"", ""classInherited -> getInheritedConformance ( ) -> getInheritedConformance"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]], [[""classInherited"", ""cast"", ""InheritedProtocolConformance"", ""this"", "">"", ""<"", ""=""]]]",/data/download/swift/apple_swift55_old.cpp,805,42
"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"[""1207591"", ""True"", ""ExpressionStatement"", ""assert ( ! isComplete ( ) && \""Missing inherited mapping in conformance\"" )""]","[[[""False""], [1207617, ""True"", ""inheritedMapping . first -> inheritsFrom ( protocol )"", ""Condition""]], [[""False""], [1207641, ""True"", ""known != inherited . end ( )"", ""Condition""]], [[""case ProtocolConformanceKind :: Normal""], [1207906, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [1207628, ""True"", "")"", ""Statement""]], ["""", [1207629, ""True"", ""inherited"", ""Statement""]], ["""", [1207630, ""True"", ""inheritedMapping :"", ""Label""]]]","[[[null]], [[""known"", ""inherited . end"", ""!=""]], [[""getKind ( )"", ""ProtocolConformanceKind :: Normal"", ""==""]], [[""inheritedMapping""]]]",/data/download/swift/apple_swift55_old.cpp,831,72
"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"[""1207577"", ""True"", ""ExpressionStatement"", ""assert ( C . getLazyResolver ( ) && \""Need a lazy resolver\"" )""]","[[[""False""], [1207617, ""True"", ""inheritedMapping . first -> inheritsFrom ( protocol )"", ""Condition""]], [[""False""], [1207641, ""True"", ""known != inherited . end ( )"", ""Condition""]], [[""case ProtocolConformanceKind :: Normal""], [1207906, ""True"", ""getKind ( )"", ""Condition""]]]","[["""", [1207591, ""True"", ""assert ( ! isComplete ( ) && \""Missing inherited mapping in conformance\"" )"", ""ExpressionStatement""]], ["""", [1207628, ""True"", "")"", ""Statement""]], ["""", [1207629, ""True"", ""inherited"", ""Statement""]]]","[[[null]], [[""known"", ""inherited . end"", ""!=""]], [[""getKind ( )"", ""ProtocolConformanceKind :: Normal"", ""==""]], [[""assert""]]]",/data/download/swift/apple_swift55_old.cpp,832,62
"Cache Code Completion results from PCH files

- Add CompilerInvocation::getPCHHash
  This will be used when creating a unique filename for a persistent
  precompiled bridging header.

- Automatically generate and use a precompiled briding header
  When we're given both -import-objc-header and -pch-output-dir
  arguments, we will try to:
  - Validate what we think the PCH filename should be for the bridging
    header, based on the Swift PCH hash and the clang module hash.
    - If we're successful, we'll just use it.
    - If it's out of date or something else is wrong, we'll try to
      emit it.
  - This gives us a single filename which we can `stat` to check for the
    validity of our code completion cache, which is keyed off of module
    name, module filename, and module file age.

- Cache code completion results from imported modules
  If we just have a single .PCH file imported, we can use that file as
  part of the key used to cache declarations in a module.  Because
  multiple files can contribute to the __ObjC module, we've always given
  it the phony filename ""<imports>"", which never exists, so `stat`-ing it
  always fails and we never cache declarations in it.

  This is extremely problematic for projects with huge bridging headers.
  In the case where we have a single PCH import, this can bring warm code
  completion times down to about 500ms from over 2-3s, so it can provide a
  nice performance win for IDEs.

- Add a new test that performs two code-completion requests with a bridging header.
- Add some -pch-output-dir flags to existing SourceKit tests that import a bridging
  header.

rdar://problem/31198982",tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,+,"[""1210391"", ""True"", ""ExpressionStatement"", ""llvm :: InitializeAllAsmPrinters ( )""]",[],"[["""", [1210396, ""True"", ""llvm :: InitializeAllTargetMCs ( )"", ""ExpressionStatement""]], ["""", [1210401, ""True"", ""llvm :: InitializeAllTargets ( )"", ""ExpressionStatement""]], ["""", [1210406, ""True"", ""initializeTracing ( )"", ""ExpressionStatement""]], ["""", [1210411, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""llvm :: InitializeAllTargetMCs""]], [[""llvm :: InitializeAllTargets""]], [[""initializeTracing""]], [[""ENTRY""]]]",/data/download/swift/apple_swift56_new.cpp,256,31
"Cache Code Completion results from PCH files

- Add CompilerInvocation::getPCHHash
  This will be used when creating a unique filename for a persistent
  precompiled bridging header.

- Automatically generate and use a precompiled briding header
  When we're given both -import-objc-header and -pch-output-dir
  arguments, we will try to:
  - Validate what we think the PCH filename should be for the bridging
    header, based on the Swift PCH hash and the clang module hash.
    - If we're successful, we'll just use it.
    - If it's out of date or something else is wrong, we'll try to
      emit it.
  - This gives us a single filename which we can `stat` to check for the
    validity of our code completion cache, which is keyed off of module
    name, module filename, and module file age.

- Cache code completion results from imported modules
  If we just have a single .PCH file imported, we can use that file as
  part of the key used to cache declarations in a module.  Because
  multiple files can contribute to the __ObjC module, we've always given
  it the phony filename ""<imports>"", which never exists, so `stat`-ing it
  always fails and we never cache declarations in it.

  This is extremely problematic for projects with huge bridging headers.
  In the case where we have a single PCH import, this can bring warm code
  completion times down to about 500ms from over 2-3s, so it can provide a
  nice performance win for IDEs.

- Add a new test that performs two code-completion requests with a bridging header.
- Add some -pch-output-dir flags to existing SourceKit tests that import a bridging
  header.

rdar://problem/31198982",tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,+,"[""1213596"", ""True"", ""ExpressionStatement"", ""llvm :: InitializeAllAsmPrinters ( )""]",[],"[["""", [1213601, ""True"", ""llvm :: InitializeAllTargetMCs ( )"", ""ExpressionStatement""]], ["""", [1213606, ""True"", ""llvm :: InitializeAllTargets ( )"", ""ExpressionStatement""]], ["""", [1213611, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""llvm :: InitializeAllTargetMCs""]], [[""llvm :: InitializeAllTargets""]], [[""ENTRY""]]]",/data/download/swift/apple_swift57_new.cpp,155,31
Merge pull request #8546 from rudkx/propagate-constraints,lib/Sema/CSPropagate.cpp,-,"[""1242433"", ""True"", ""ExpressionStatement"", ""assert ( tyvar -> isEqual ( found -> getNestedConstraints ( ) . front ( ) -> getFirstType ( ) ) )""]","[[[""False""], [1242531, ""True"", ""! found"", ""Condition""]]]","[["""", [1242462, ""True"", ""assert ( found -> getNestedConstraints ( ) . front ( ) -> getKind ( ) == ConstraintKind :: BindOverload )"", ""ExpressionStatement""]], ["""", [1242487, ""True"", ""assert ( constraint -> getKind ( ) != ConstraintKind :: Disjunction && \""Type variable is involved in more than one disjunction!\"" )"", ""ExpressionStatement""]], ["""", [1242509, ""True"", "")"", ""Statement""]]]","[[[""!"", ""Constraint *"", null]], [[""assert""]], [[""assert""]]]",/data/download/swift/apple_swift58_old.cpp,59,87
"Merge pull request #8454 from swiftix/wip-warn-about-unused-generic-params

[type-checker] More correct way to determine if a given generic parameter of a function cannot be inferred because it is not used",lib/Sema/TypeCheckGeneric.cpp,+,"[""1246753"", ""True"", ""ExpressionStatement"", ""assert ( t -> isTypeParameter ( ) )""]","[[[""False"", ""True""], [1246992, ""True"", ""! genericParams"", ""Condition""]]]","[["""", [1246765, ""True"", "")"", ""Statement""]], ["""", [1246766, ""True"", ""t"", ""Statement""]], ["""", [1246767, ""True"", ""CanType"", ""Statement""]], ["""", [1246768, ""True"", ""("", ""Statement""]]]","[[[""!"", ""genericParams"", null]]]",/data/download/swift/apple_swift59_new.cpp,694,21
"[Constraint solver] Remove invalid assert from constraint propagation.

It turns out that for disjunctions formed for subscripts, we have an
explicit function type (e.g. ($T1)->$T2) for the LHS of the bind
overload constraint, and when a subscript is mixed with an explicit
call (e.g. x[i](2)) we end up with an applicable function constraint
where the RHS is $T2 (which is a function type itself), so this assert
was invalid.

Fundamentally the assert wasn't checking anything important, so it won't
be missed. The important check here is that the applicable function
constraint that we started with is only involved in one disjunction
since we're only returning one.

This shows up in test/Constraints/overload.swift when I run it with
-propagate-constraints enabled:
  func test20886179(_ handlers: [(Int) -> Void], buttonIndex: Int) {
    handlers[buttonIndex](buttonIndex)
  }",lib/Sema/CSPropagate.cpp,-,"[""1267233"", ""True"", ""ExpressionStatement"", ""assert ( tyvar -> isEqual ( found -> getNestedConstraints ( ) . front ( ) -> getFirstType ( ) ) )""]","[[[""False""], [1267331, ""True"", ""! found"", ""Condition""]]]","[["""", [1267262, ""True"", ""assert ( found -> getNestedConstraints ( ) . front ( ) -> getKind ( ) == ConstraintKind :: BindOverload )"", ""ExpressionStatement""]], ["""", [1267287, ""True"", ""assert ( constraint -> getKind ( ) != ConstraintKind :: Disjunction && \""Type variable is involved in more than one disjunction!\"" )"", ""ExpressionStatement""]], ["""", [1267309, ""True"", "")"", ""Statement""]]]","[[[""!"", ""Constraint *"", null]], [[""assert""]], [[""assert""]]]",/data/download/swift/apple_swift60_old.cpp,59,87
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,-,"[""1275875"", ""True"", ""Parameter"", ""RCIdentityFunctionInfo * RCFI""]",[],"[["""", [1275884, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift61_old.cpp,668,60
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,"[""1271370"", ""True"", ""Statement"", "")""]",[],"[["""", [1271371, ""True"", "")"", ""Statement""]], ["""", [1271372, ""True"", ""Arg"", ""Statement""]], ["""", [1271373, ""True"", ""("", ""Statement""]], ["""", [1271374, ""True"", ""getNonDebugUses"", ""Statement""]]]",[],/data/download/swift/apple_swift61_new.cpp,802,22
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1280391"", ""True"", ""ExpressionStatement"", ""llvm :: dbgs ( ) << \""None of generic parameters are used by \"" << F -> getName ( ) << \""\\n\""""]","[[[""True""], [1280409, ""True"", ""! UsesGenerics"", ""Condition""]], [[""True""], [1280426, ""True"", ""HasGenericSignature"", ""Condition""]]]","[["""", [1280407, ""True"", ""("", ""Statement""]], ["""", [1280408, ""True"", ""DEBUG"", ""Statement""]], ["""", [1280413, ""True"", ""UsesGenerics = usesGenerics ( F , InterfaceParams , InterfaceResults )"", ""ExpressionStatement""]]]","[[[""!"", ""bool"", null]], [[null]], [[""UsesGenerics"", ""usesGenerics"", ""=""]], [[""UsesGenerics"", ""usesGenerics"", ""=""]], [[""UsesGenerics"", ""usesGenerics"", ""=""]]]",/data/download/swift/apple_swift62_new.cpp,597,78
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1280295"", ""True"", ""Condition"", ""ExpectedFTy -> hasErrorResult ( )""]",[],"[["""", [1280302, ""True"", ""Optional < SILResultInfo > InterfaceErrorResult ;"", ""IdentifierDeclStatement""]], ["""", [1280308, ""True"", ""ExtInfo = ExtInfo . withRepresentation ( SILFunctionTypeRepresentation :: Thin )"", ""ExpressionStatement""]], ["""", [1280321, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]], ["""", [1280321, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]], ["""", [1280330, ""True"", ""auto"", ""Statement""]]]","[[[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]]]",/data/download/swift/apple_swift62_new.cpp,619,59
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1280286"", ""True"", ""ExpressionStatement"", ""InterfaceErrorResult = ExpectedFTy -> getErrorResult ( )""]","[[[""False"", ""True""], [1280295, ""True"", ""ExpectedFTy -> hasErrorResult ( )"", ""Condition""]]]","[["""", [1280302, ""True"", ""Optional < SILResultInfo > InterfaceErrorResult ;"", ""IdentifierDeclStatement""]], ["""", [1280308, ""True"", ""ExtInfo = ExtInfo . withRepresentation ( SILFunctionTypeRepresentation :: Thin )"", ""ExpressionStatement""]], ["""", [1280321, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]]]","[[[null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]]]",/data/download/swift/apple_swift62_new.cpp,620,59
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"[""1286533"", ""True"", ""ExpressionStatement"", ""Retains = EA -> get ( F ) -> computeEpilogueARCInstructions ( EpilogueARCContext :: EpilogueARCKind :: Retain , RV )""]","[[[""False""], [1286566, ""True"", ""! RV"", ""Condition""]], [[""True""], [1286580, ""True"", ""ResultDescList [ 0 ] . hasConvention ( ResultConvention :: Owned )"", ""Condition""]], [[""False""], [1286601, ""True"", ""fnConv . getNumDirectSILResults ( ) != 1"", ""Condition""]]]","[["""", [1286553, ""True"", ""auto"", ""Statement""]], ["""", [1286554, ""True"", ""& RI = ResultDescList [ 0 ]"", ""ExpressionStatement""]], ["""", [1286562, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""RV"", null]], [[null]], [[""fnConv . getNumDirectSILResults"", ""1"", ""!=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]]]",/data/download/swift/apple_swift62_old.cpp,665,77
"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1282297"", ""True"", ""ExpressionStatement"", ""Retains = EA -> get ( F ) -> computeEpilogueARCInstructions ( EpilogueARCContext :: EpilogueARCKind :: Retain , RV )""]","[[[""False""], [1282330, ""True"", ""! RV"", ""Condition""]], [[""True""], [1282344, ""True"", ""ResultDescList [ 0 ] . hasConvention ( ResultConvention :: Owned )"", ""Condition""]], [[""False""], [1282365, ""True"", ""! fnConv . getIndirectSILResults ( ) . empty ( )"", ""Condition""]], [[], [1282382, ""True"", ""fnConv . getNumDirectSILResults ( ) != 1"", ""Condition""]]]","[["""", [1282317, ""True"", ""auto"", ""Statement""]], ["""", [1282318, ""True"", ""& RI = ResultDescList [ 0 ]"", ""ExpressionStatement""]], ["""", [1282326, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""RV"", null]], [[null]], [[""!"", ""fnConv . getIndirectSILResults ( ) . empty"", null]], [[""fnConv . getNumDirectSILResults"", ""1"", ""!=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]]]",/data/download/swift/apple_swift62_new.cpp,911,77
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/GenericEnvironment.cpp,-,"[""1291846"", ""True"", ""ExpressionStatement"", ""assert ( secondArchetype == archetype )""]",[],"[["""", [1291855, ""True"", """", ""ExpressionStatement""]], ["""", [1291856, ""True"", "")"", ""Statement""]], ["""", [1291857, ""True"", ""("", ""Statement""]], ["""", [1291858, ""True"", "">"", ""Statement""]]]",[],/data/download/swift/apple_swift63_old.cpp,365,23
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/ProtocolConformance.cpp,+,"[""1294745"", ""True"", ""ExpressionStatement"", ""assert ( ! getSignatureConformances ( ) . empty ( ) && \""signature conformances not yet computed\"" )""]",[],"[["""", [1294764, ""True"", ""assert ( assocType -> isTypeParameter ( ) && \""associated type must be a type parameter\"" )"", ""ExpressionStatement""]], ["""", [1294647, ""True"", ""LazyResolver * resolver"", ""Parameter""]], ["""", [1294650, ""True"", ""ProtocolDecl * protocol"", ""Parameter""]], ["""", [1294653, ""True"", ""Type assocType"", ""Parameter""]]]","[[[""assert""]], [[null, ""resolver""]], [[null, ""resolver""]], [[null, ""protocol""]], [[null, ""protocol""]], [[null, ""assocType""]], [[null, ""assocType""]]]",/data/download/swift/apple_swift64_new.cpp,476,63
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,+,"[""1303071"", ""True"", ""ExpressionStatement"", ""assert ( ! ( type -> isTypeParameter ( ) && ! getGenericSignature ( ) ) && \""type parameter substitution map without generic signature\"" )""]",[],"[["""", [1302993, ""True"", ""Type replacement"", ""Parameter""]], ["""", [1302996, ""True"", ""CanSubstitutableType type"", ""Parameter""]], ["""", [1303094, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""replacement""]], [[null, ""replacement""]], [[null, ""type""]], [[null, ""type""]], [[""ENTRY""]]]",/data/download/swift/apple_swift65_new.cpp,75,89
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,+,"[""1303061"", ""True"", ""Statement"", ""&&""]",[],"[["""", [1303062, ""True"", "")"", ""Statement""]], ["""", [1303063, ""True"", ""("", ""Statement""]], ["""", [1303064, ""True"", ""hasArchetype"", ""Statement""]], ["""", [1303065, ""True"", ""->"", ""Statement""]]]",[],/data/download/swift/apple_swift65_new.cpp,77,24
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,"[""1306259"", ""True"", ""ExpressionStatement"", ""assert ( type && parent && assocType )""]",[],"[["""", [1306225, ""True"", ""AssociatedTypeDecl * assocType"", ""Parameter""]], ["""", [1306228, ""True"", ""CanType parent"", ""Parameter""]], ["""", [1306231, ""True"", ""CanType type"", ""Parameter""]], ["""", [1306270, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""assocType""]], [[null, ""assocType""]], [[null, ""parent""]], [[null, ""parent""]], [[null, ""type""]], [[null, ""type""]], [[""ENTRY""]]]",/data/download/swift/apple_swift65_old.cpp,229,76
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,"[""1307766"", ""True"", ""ExpressionStatement"", ""parent . first -> print ( out )""]",[],"[["""", [1307777, ""True"", ""out . indent ( 2 )"", ""ExpressionStatement""]], ["""", [1307786, ""True"", "")"", ""Statement""]], ["""", [1307787, ""True"", ""parentMap"", ""Statement""]], ["""", [1307788, ""True"", ""parent :"", ""Label""]]]","[[[""out . indent""]], [[""parent""]]]",/data/download/swift/apple_swift65_old.cpp,474,25
Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,"[""1307724"", ""True"", ""ExpressionStatement"", ""parentType . first -> print ( out )""]",[],"[["""", [1307735, ""True"", "")"", ""Statement""]], ["""", [1307736, ""True"", ""parentType"", ""Statement""]], ["""", [1307737, ""True"", ""ParentType"", ""Statement""]], ["""", [1307738, ""True"", ""::"", ""Statement""]]]",[],/data/download/swift/apple_swift65_old.cpp,478,26
"[ClangImporter] Fix versioned stubs for functions-as-members. (#8539)

That is, the stubs we generate when you rename a C global function
imported as a type member using the SwiftName API note. (See the
test case changes.) Previously we hit an assertion.

For good measure, also fix versioned stubs for types-as-members,
which were always added to their original context rather than the
new context.

rdar://problem/31435658",lib/ClangImporter/ImportDecl.cpp,-,"[""1364118"", ""True"", ""ExpressionStatement"", ""assert ( ! correctSwiftName && \""Swift 2 didn't support import-as-member!\"" )""]","[[[""False""], [1364129, ""True"", ""importedName . importAsMember ( )"", ""Condition""]], [[""False""], [1364158, ""True"", ""! dc"", ""Condition""]]]","[["""", [1364136, ""True"", ""DeclName name = owningStorage ? DeclName ( ) : importedName . getDeclName ( ) ;"", ""IdentifierDeclStatement""]], ["""", [1364162, ""True"", ""dc = Impl . importDeclContextOf ( decl , importedName . getEffectiveContext ( ) )"", ""ExpressionStatement""]]]","[[[null]], [[""!"", ""dc"", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[null, ""name"", ""name"", ""AbstractStorageDecl *"", null, ""DeclName"", ""importedName . getDeclName"", null, ""="", null]], [[""dc"", ""Impl . importDeclContextOf"", ""=""]], [[""dc"", ""Impl . importDeclContextOf"", ""=""]], [[""dc"", ""Impl . importDeclContextOf"", ""=""]]]",/data/download/swift/apple_swift66_old.cpp,3140,68
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1390982"", ""True"", ""ExpressionStatement"", ""assert ( Arg -> hasValue ( ) && \""Expected to have a result\"" )""]",[],"[["""", [1390931, ""True"", ""INST Inst * Arg"", ""Parameter""]], ["""", [1390996, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Arg""]], [[null, ""Arg""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,23,75
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1390940"", ""True"", ""ExpressionStatement"", ""assert ( ( Arg -> getType ( ) . isAddress ( ) || Arg -> getType ( ) . isTrivial ( Arg -> getModule ( ) ) ) && \""Trivial ownership requires a trivial type or an address\"" )""]","[[[], [1390978, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1390982, ""True"", ""assert ( Arg -> hasValue ( ) && \""Expected to have a result\"" )"", ""ExpressionStatement""]], ["""", [1390931, ""True"", ""INST Inst * Arg"", ""Parameter""]], ["""", [1390996, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Arg""]], [[null, ""Arg""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,25,75
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1391064"", ""True"", ""ExpressionStatement"", ""assert ( ! I -> hasValue ( ) && \""Expected an instruction without a result\"" )""]",[],"[["""", [1391052, ""True"", ""INST Inst * I"", ""Parameter""]], ["""", [1391080, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""I""]], [[null, ""I""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,142,89
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1391410"", ""True"", ""ExpressionStatement"", ""assert ( I -> hasValue ( ) && \""Expected to have a value\"" )""]",[],"[["""", [1391398, ""True"", ""INST Inst * I"", ""Parameter""]], ["""", [1391424, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""I""]], [[null, ""I""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,258,89
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1392047"", ""True"", ""ExpressionStatement"", ""assert ( BI -> hasValue ( ) && \""Can only get here if we have a SILValue\"" )""]",[],"[["""", [1392011, ""True"", ""llvm :: Intrinsic :: ID ID"", ""Parameter""]], ["""", [1392014, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1392061, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""ID""]], [[null, ""ID""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,409,66
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1392021"", ""True"", ""ExpressionStatement"", ""assert ( BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""LLVM intrinsics should always be trivial\"" )""]",[],"[["""", [1392047, ""True"", ""assert ( BI -> hasValue ( ) && \""Can only get here if we have a SILValue\"" )"", ""ExpressionStatement""]], ["""", [1392011, ""True"", ""llvm :: Intrinsic :: ID ID"", ""Parameter""]], ["""", [1392014, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1392061, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[null, ""ID""]], [[null, ""ID""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,410,66
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1392148"", ""True"", ""ExpressionStatement"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )""]",[],"[["""", [1392076, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1392079, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1392162, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift68_new.cpp,425,83
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1392118"", ""True"", ""ExpressionStatement"", ""assert ( BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""Only trivial types can have trivial ownership\"" )""]","[[[], [1392144, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1392148, ""True"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )"", ""ExpressionStatement""]], ["""", [1392076, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1392079, ""True"", ""BuiltinInst * BI"", ""Parameter""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]]]",/data/download/swift/apple_swift68_new.cpp,427,69
Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1392089"", ""True"", ""ExpressionStatement"", ""assert ( ! BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""Only non trivial types can have non trivial ownership\"" )""]","[[[], [1392144, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1392148, ""True"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )"", ""ExpressionStatement""]], ["""", [1392076, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1392079, ""True"", ""BuiltinInst * BI"", ""Parameter""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]]]",/data/download/swift/apple_swift68_new.cpp,430,69
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1404491"", ""True"", ""ExpressionStatement"", ""assert ( Arg -> hasValue ( ) && \""Expected to have a result\"" )""]",[],"[["""", [1404440, ""True"", ""INST Inst * Arg"", ""Parameter""]], ["""", [1404505, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Arg""]], [[null, ""Arg""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,23,75
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1404449"", ""True"", ""ExpressionStatement"", ""assert ( ( Arg -> getType ( ) . isAddress ( ) || Arg -> getType ( ) . isTrivial ( Arg -> getModule ( ) ) ) && \""Trivial ownership requires a trivial type or an address\"" )""]","[[[], [1404487, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1404491, ""True"", ""assert ( Arg -> hasValue ( ) && \""Expected to have a result\"" )"", ""ExpressionStatement""]], ["""", [1404440, ""True"", ""INST Inst * Arg"", ""Parameter""]], ["""", [1404505, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Arg""]], [[null, ""Arg""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,25,75
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1404573"", ""True"", ""ExpressionStatement"", ""assert ( ! I -> hasValue ( ) && \""Expected an instruction without a result\"" )""]",[],"[["""", [1404561, ""True"", ""INST Inst * I"", ""Parameter""]], ["""", [1404589, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""I""]], [[null, ""I""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,142,89
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1404919"", ""True"", ""ExpressionStatement"", ""assert ( I -> hasValue ( ) && \""Expected to have a value\"" )""]",[],"[["""", [1404907, ""True"", ""INST Inst * I"", ""Parameter""]], ["""", [1404933, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""I""]], [[null, ""I""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,258,89
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1405556"", ""True"", ""ExpressionStatement"", ""assert ( BI -> hasValue ( ) && \""Can only get here if we have a SILValue\"" )""]",[],"[["""", [1405520, ""True"", ""llvm :: Intrinsic :: ID ID"", ""Parameter""]], ["""", [1405523, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1405570, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""ID""]], [[null, ""ID""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,409,66
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1405530"", ""True"", ""ExpressionStatement"", ""assert ( BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""LLVM intrinsics should always be trivial\"" )""]",[],"[["""", [1405556, ""True"", ""assert ( BI -> hasValue ( ) && \""Can only get here if we have a SILValue\"" )"", ""ExpressionStatement""]], ["""", [1405520, ""True"", ""llvm :: Intrinsic :: ID ID"", ""Parameter""]], ["""", [1405523, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1405570, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""assert""]], [[null, ""ID""]], [[null, ""ID""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,410,66
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1405657"", ""True"", ""ExpressionStatement"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )""]",[],"[["""", [1405585, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1405588, ""True"", ""BuiltinInst * BI"", ""Parameter""]], ["""", [1405671, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]], [[""ENTRY""]]]",/data/download/swift/apple_swift70_new.cpp,425,83
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1405627"", ""True"", ""ExpressionStatement"", ""assert ( BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""Only trivial types can have trivial ownership\"" )""]","[[[], [1405653, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1405657, ""True"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )"", ""ExpressionStatement""]], ["""", [1405585, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1405588, ""True"", ""BuiltinInst * BI"", ""Parameter""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]]]",/data/download/swift/apple_swift70_new.cpp,427,69
"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"[""1405598"", ""True"", ""ExpressionStatement"", ""assert ( ! BI -> getType ( ) . isTrivial ( BI -> getModule ( ) ) && \""Only non trivial types can have non trivial ownership\"" )""]","[[[], [1405653, ""True"", ""ValueOwnershipKind :: OWNERSHIP == ValueOwnershipKind :: Trivial"", ""Condition""]]]","[["""", [1405657, ""True"", ""assert ( BI -> hasValue ( ) && \""Expected to have type\"" )"", ""ExpressionStatement""]], ["""", [1405585, ""True"", ""StringRef Attr"", ""Parameter""]], ["""", [1405588, ""True"", ""BuiltinInst * BI"", ""Parameter""]]]","[[[""ValueOwnershipKind :: OWNERSHIP"", ""ValueOwnershipKind :: Trivial"", ""==""]], [[""assert""]], [[null, ""Attr""]], [[null, ""Attr""]], [[null, ""BI""]], [[null, ""BI""]]]",/data/download/swift/apple_swift70_new.cpp,430,69
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,-,"[""1413462"", ""True"", ""Parameter"", ""RCIdentityFunctionInfo * RCFI""]",[],"[["""", [1413471, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",/data/download/swift/apple_swift71_old.cpp,668,60
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,"[""1408957"", ""True"", ""Statement"", "")""]",[],"[["""", [1408958, ""True"", "")"", ""Statement""]], ["""", [1408959, ""True"", ""Arg"", ""Statement""]], ["""", [1408960, ""True"", ""("", ""Statement""]], ["""", [1408961, ""True"", ""getNonDebugUses"", ""Statement""]]]",[],/data/download/swift/apple_swift71_new.cpp,802,27
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1417978"", ""True"", ""ExpressionStatement"", ""llvm :: dbgs ( ) << \""None of generic parameters are used by \"" << F -> getName ( ) << \""\\n\""""]","[[[""True""], [1417996, ""True"", ""! UsesGenerics"", ""Condition""]], [[""True""], [1418013, ""True"", ""HasGenericSignature"", ""Condition""]]]","[["""", [1417994, ""True"", ""("", ""Statement""]], ["""", [1417995, ""True"", ""DEBUG"", ""Statement""]], ["""", [1418000, ""True"", ""UsesGenerics = usesGenerics ( F , InterfaceParams , InterfaceResults )"", ""ExpressionStatement""]]]","[[[""!"", ""bool"", null]], [[null]], [[""UsesGenerics"", ""usesGenerics"", ""=""]], [[""UsesGenerics"", ""usesGenerics"", ""=""]], [[""UsesGenerics"", ""usesGenerics"", ""=""]]]",/data/download/swift/apple_swift72_new.cpp,597,78
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1417882"", ""True"", ""Condition"", ""ExpectedFTy -> hasErrorResult ( )""]",[],"[["""", [1417889, ""True"", ""Optional < SILResultInfo > InterfaceErrorResult ;"", ""IdentifierDeclStatement""]], ["""", [1417895, ""True"", ""ExtInfo = ExtInfo . withRepresentation ( SILFunctionTypeRepresentation :: Thin )"", ""ExpressionStatement""]], ["""", [1417908, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]], ["""", [1417908, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]], ["""", [1417917, ""True"", ""auto"", ""Statement""]]]","[[[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]]]",/data/download/swift/apple_swift72_new.cpp,619,59
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1417873"", ""True"", ""ExpressionStatement"", ""InterfaceErrorResult = ExpectedFTy -> getErrorResult ( )""]","[[[""False"", ""True""], [1417882, ""True"", ""ExpectedFTy -> hasErrorResult ( )"", ""Condition""]]]","[["""", [1417889, ""True"", ""Optional < SILResultInfo > InterfaceErrorResult ;"", ""IdentifierDeclStatement""]], ["""", [1417895, ""True"", ""ExtInfo = ExtInfo . withRepresentation ( SILFunctionTypeRepresentation :: Thin )"", ""ExpressionStatement""]], ["""", [1417908, ""True"", ""ExtInfo = FTy -> getExtInfo ( )"", ""ExpressionStatement""]]]","[[[null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[null, ""InterfaceErrorResult"", null]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""ExtInfo . withRepresentation"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]], [[""ExtInfo"", ""FTy -> getExtInfo"", ""=""]]]",/data/download/swift/apple_swift72_new.cpp,620,59
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"[""1424120"", ""True"", ""ExpressionStatement"", ""Retains = EA -> get ( F ) -> computeEpilogueARCInstructions ( EpilogueARCContext :: EpilogueARCKind :: Retain , RV )""]","[[[""False""], [1424153, ""True"", ""! RV"", ""Condition""]], [[""True""], [1424167, ""True"", ""ResultDescList [ 0 ] . hasConvention ( ResultConvention :: Owned )"", ""Condition""]], [[""False""], [1424188, ""True"", ""fnConv . getNumDirectSILResults ( ) != 1"", ""Condition""]]]","[["""", [1424140, ""True"", ""auto"", ""Statement""]], ["""", [1424141, ""True"", ""& RI = ResultDescList [ 0 ]"", ""ExpressionStatement""]], ["""", [1424149, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""RV"", null]], [[null]], [[""fnConv . getNumDirectSILResults"", ""1"", ""!=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]]]",/data/download/swift/apple_swift72_old.cpp,665,77
"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"[""1419884"", ""True"", ""ExpressionStatement"", ""Retains = EA -> get ( F ) -> computeEpilogueARCInstructions ( EpilogueARCContext :: EpilogueARCKind :: Retain , RV )""]","[[[""False""], [1419917, ""True"", ""! RV"", ""Condition""]], [[""True""], [1419931, ""True"", ""ResultDescList [ 0 ] . hasConvention ( ResultConvention :: Owned )"", ""Condition""]], [[""False""], [1419952, ""True"", ""! fnConv . getIndirectSILResults ( ) . empty ( )"", ""Condition""]], [[], [1419969, ""True"", ""fnConv . getNumDirectSILResults ( ) != 1"", ""Condition""]]]","[["""", [1419904, ""True"", ""auto"", ""Statement""]], ["""", [1419905, ""True"", ""& RI = ResultDescList [ 0 ]"", ""ExpressionStatement""]], ["""", [1419913, ""True"", ""auto"", ""Statement""]]]","[[[""!"", ""RV"", null]], [[null]], [[""!"", ""fnConv . getIndirectSILResults ( ) . empty"", null]], [[""fnConv . getNumDirectSILResults"", ""1"", ""!=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]], [[""&"", ""RI"", null, ""ResultDescList"", ""0"", null, ""=""]]]",/data/download/swift/apple_swift72_new.cpp,911,77
