commit_message,file_name,change_type,log_node,cdg_nodes,ddg_nodes
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[325, u'True', u'ExpressionStatement', u'assert ( D )'], [325, u'True', u'ExpressionStatement', u'assert ( D )']]","[[326, None, u'CallExpression', u'assert ( D )'], [330, None, u'Callee', u'assert'], [327, None, u'ArgumentList', u'D'], [331, None, u'Identifier', u'assert'], [328, None, u'Argument', u'D'], [329, None, u'Identifier', u'D'], [325, u'True', u'ExpressionStatement', u'assert ( D )'], [332, u'True', u'CFGEntryNode', u'ENTRY'], [326, None, u'CallExpression', u'assert ( D )'], [330, None, u'Callee', u'assert'], [327, None, u'ArgumentList', u'D'], [331, None, u'Identifier', u'assert'], [328, None, u'Argument', u'D'], [329, None, u'Identifier', u'D'], [325, u'True', u'ExpressionStatement', u'assert ( D )'], [332, u'True', u'CFGEntryNode', u'ENTRY']]","[[326, None, u'CallExpression', u'assert ( D )'], [330, None, u'Callee', u'assert'], [327, None, u'ArgumentList', u'D'], [331, None, u'Identifier', u'assert'], [328, None, u'Argument', u'D'], [329, None, u'Identifier', u'D'], [325, u'True', u'ExpressionStatement', u'assert ( D )'], [326, None, u'CallExpression', u'assert ( D )'], [330, None, u'Callee', u'assert'], [327, None, u'ArgumentList', u'D'], [331, None, u'Identifier', u'assert'], [328, None, u'Argument', u'D'], [329, None, u'Identifier', u'D'], [325, u'True', u'ExpressionStatement', u'assert ( D )']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[721, u'True', u'ExpressionStatement', u'assert ( D )']]","[[722, None, u'CallExpression', u'assert ( D )'], [726, None, u'Callee', u'assert'], [723, None, u'ArgumentList', u'D'], [727, None, u'Identifier', u'assert'], [724, None, u'Argument', u'D'], [725, None, u'Identifier', u'D'], [721, u'True', u'ExpressionStatement', u'assert ( D )'], [728, u'True', u'CFGEntryNode', u'ENTRY']]","[[722, None, u'CallExpression', u'assert ( D )'], [726, None, u'Callee', u'assert'], [723, None, u'ArgumentList', u'D'], [727, None, u'Identifier', u'assert'], [724, None, u'Argument', u'D'], [725, None, u'Identifier', u'D'], [721, u'True', u'ExpressionStatement', u'assert ( D )'], [685, None, u'ParameterType', u'const Decl *'], [684, None, u'Identifier', u'D'], [683, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[709, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[710, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [719, None, u'Callee', u'assert'], [711, None, u'ArgumentList', u'D -> hasBody ( )'], [720, None, u'Identifier', u'assert'], [712, None, u'Argument', u'D -> hasBody ( )'], [713, None, u'CallExpression', u'D -> hasBody ( )'], [715, None, u'Callee', u'D -> hasBody'], [714, None, u'ArgumentList', u''], [716, None, u'PtrMemberAccess', u'D -> hasBody'], [718, None, u'Identifier', u'D'], [717, None, u'Identifier', u'hasBody'], [709, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [728, u'True', u'CFGEntryNode', u'ENTRY']]","[[710, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [719, None, u'Callee', u'assert'], [711, None, u'ArgumentList', u'D -> hasBody ( )'], [720, None, u'Identifier', u'assert'], [712, None, u'Argument', u'D -> hasBody ( )'], [713, None, u'CallExpression', u'D -> hasBody ( )'], [715, None, u'Callee', u'D -> hasBody'], [714, None, u'ArgumentList', u''], [716, None, u'PtrMemberAccess', u'D -> hasBody'], [718, None, u'Identifier', u'D'], [717, None, u'Identifier', u'hasBody'], [709, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [685, None, u'ParameterType', u'const Decl *'], [684, None, u'Identifier', u'D'], [683, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[3941, u'True', u'ExpressionStatement', u'assert ( D )']]","[[3942, None, u'CallExpression', u'assert ( D )'], [3946, None, u'Callee', u'assert'], [3943, None, u'ArgumentList', u'D'], [3947, None, u'Identifier', u'assert'], [3944, None, u'Argument', u'D'], [3945, None, u'Identifier', u'D'], [3941, u'True', u'ExpressionStatement', u'assert ( D )'], [3948, u'True', u'CFGEntryNode', u'ENTRY']]","[[3942, None, u'CallExpression', u'assert ( D )'], [3946, None, u'Callee', u'assert'], [3943, None, u'ArgumentList', u'D'], [3947, None, u'Identifier', u'assert'], [3944, None, u'Argument', u'D'], [3945, None, u'Identifier', u'D'], [3941, u'True', u'ExpressionStatement', u'assert ( D )'], [3898, None, u'ParameterType', u'const Decl *'], [3897, None, u'Identifier', u'D'], [3896, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[3929, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[3930, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [3939, None, u'Callee', u'assert'], [3931, None, u'ArgumentList', u'D -> hasBody ( )'], [3940, None, u'Identifier', u'assert'], [3932, None, u'Argument', u'D -> hasBody ( )'], [3933, None, u'CallExpression', u'D -> hasBody ( )'], [3935, None, u'Callee', u'D -> hasBody'], [3934, None, u'ArgumentList', u''], [3936, None, u'PtrMemberAccess', u'D -> hasBody'], [3938, None, u'Identifier', u'D'], [3937, None, u'Identifier', u'hasBody'], [3929, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [3948, u'True', u'CFGEntryNode', u'ENTRY']]","[[3930, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [3939, None, u'Callee', u'assert'], [3931, None, u'ArgumentList', u'D -> hasBody ( )'], [3940, None, u'Identifier', u'assert'], [3932, None, u'Argument', u'D -> hasBody ( )'], [3933, None, u'CallExpression', u'D -> hasBody ( )'], [3935, None, u'Callee', u'D -> hasBody'], [3934, None, u'ArgumentList', u''], [3936, None, u'PtrMemberAccess', u'D -> hasBody'], [3938, None, u'Identifier', u'D'], [3937, None, u'Identifier', u'hasBody'], [3929, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [3898, None, u'ParameterType', u'const Decl *'], [3897, None, u'Identifier', u'D'], [3896, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[4787, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;']]","[[4788, None, u'IdentifierDecl', u'PatternB ( B )'], [4791, None, u'IdentifierDeclType', u'VariablePattern'], [4790, None, u'Identifier', u'PatternB'], [4789, None, u'Identifier', u'B'], [4787, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;'], [4816, u'True', u'CFGEntryNode', u'ENTRY']]","[[4788, None, u'IdentifierDecl', u'PatternB ( B )'], [4791, None, u'IdentifierDeclType', u'VariablePattern'], [4790, None, u'Identifier', u'PatternB'], [4789, None, u'Identifier', u'B'], [4787, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1823, u'True', u'Statement', u'('], [1831, u'True', u'Statement', u'('], [1826, u'True', u'Statement', u'Indexes'], [1820, u'True', u'Statement', u'Indexes'], [1829, u'True', u'Statement', u'::'], [1819, u'True', u'Statement', u'.'], [1822, u'True', u'Statement', u')'], [1824, u'True', u'Statement', u'begin'], [1830, u'True', u'Statement', u'std'], [1817, u'True', u'Statement', u'('], [1828, u'True', u'Statement', u'all_of'], [1827, u'True', u'Statement', u'('], [1816, u'True', u'Statement', u')'], [1825, u'True', u'Statement', u'.'], [1832, u'True', u'Statement', u'assert'], [1815, u'True', u'Statement', u','], [1821, u'True', u'Statement', u','], [1818, u'True', u'Statement', u'end']]","[[1823, u'True', u'Statement', u'('], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1831, u'True', u'Statement', u'('], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1826, u'True', u'Statement', u'Indexes'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1820, u'True', u'Statement', u'Indexes'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1829, u'True', u'Statement', u'::'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1819, u'True', u'Statement', u'.'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1822, u'True', u'Statement', u')'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1824, u'True', u'Statement', u'begin'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1830, u'True', u'Statement', u'std'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1817, u'True', u'Statement', u'('], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1828, u'True', u'Statement', u'all_of'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1827, u'True', u'Statement', u'('], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1816, u'True', u'Statement', u')'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1825, u'True', u'Statement', u'.'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1832, u'True', u'Statement', u'assert'], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1815, u'True', u'Statement', u','], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1821, u'True', u'Statement', u','], [1990, u'True', u'CFGEntryNode', u'ENTRY'], [1818, u'True', u'Statement', u'end'], [1990, u'True', u'CFGEntryNode', u'ENTRY']]","[[1823, u'True', u'Statement', u'('], [1831, u'True', u'Statement', u'('], [1826, u'True', u'Statement', u'Indexes'], [1820, u'True', u'Statement', u'Indexes'], [1829, u'True', u'Statement', u'::'], [1819, u'True', u'Statement', u'.'], [1822, u'True', u'Statement', u')'], [1824, u'True', u'Statement', u'begin'], [1830, u'True', u'Statement', u'std'], [1817, u'True', u'Statement', u'('], [1828, u'True', u'Statement', u'all_of'], [1827, u'True', u'Statement', u'('], [1816, u'True', u'Statement', u')'], [1825, u'True', u'Statement', u'.'], [1832, u'True', u'Statement', u'assert'], [1815, u'True', u'Statement', u','], [1821, u'True', u'Statement', u','], [1818, u'True', u'Statement', u'end']]"
"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[2393, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )']]","[[2394, None, u'CallExpression', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [2412, None, u'Callee', u'assert'], [2395, None, u'ArgumentList', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2413, None, u'Identifier', u'assert'], [2396, None, u'Argument', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2397, None, u'EqualityExpression', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2404, None, u'CallExpression', u'Other . Occurences . size ( )'], [2398, None, u'CallExpression', u'Occurences . size ( )'], [2406, None, u'Callee', u'Other . Occurences . size'], [2405, None, u'ArgumentList', u''], [2400, None, u'Callee', u'Occurences . size'], [2399, None, u'ArgumentList', u''], [2407, None, u'MemberAccess', u'Other . Occurences . size'], [2401, None, u'MemberAccess', u'Occurences . size'], [2409, None, u'MemberAccess', u'Other . Occurences'], [2408, None, u'Identifier', u'size'], [2403, None, u'Identifier', u'Occurences'], [2402, None, u'Identifier', u'size'], [2411, None, u'Identifier', u'Other'], [2410, None, u'Identifier', u'Occurences'], [2393, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [2421, u'True', u'CFGEntryNode', u'ENTRY']]","[[2394, None, u'CallExpression', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [2412, None, u'Callee', u'assert'], [2395, None, u'ArgumentList', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2413, None, u'Identifier', u'assert'], [2396, None, u'Argument', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2397, None, u'EqualityExpression', u'Other . Occurences . size ( ) == Occurences . size ( )'], [2404, None, u'CallExpression', u'Other . Occurences . size ( )'], [2398, None, u'CallExpression', u'Occurences . size ( )'], [2406, None, u'Callee', u'Other . Occurences . size'], [2405, None, u'ArgumentList', u''], [2400, None, u'Callee', u'Occurences . size'], [2399, None, u'ArgumentList', u''], [2407, None, u'MemberAccess', u'Other . Occurences . size'], [2401, None, u'MemberAccess', u'Occurences . size'], [2409, None, u'MemberAccess', u'Other . Occurences'], [2408, None, u'Identifier', u'size'], [2403, None, u'Identifier', u'Occurences'], [2402, None, u'Identifier', u'size'], [2411, None, u'Identifier', u'Other'], [2410, None, u'Identifier', u'Occurences'], [2393, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [2189, None, u'ParameterType', u'const VariablePattern &'], [2188, None, u'Identifier', u'Other'], [2187, u'True', u'Parameter', u'const VariablePattern & Other']]"
"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1204405, u'True', u'ExpressionStatement', u'assert ( D )'], [1204405, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1204406, None, u'CallExpression', u'assert ( D )'], [1204410, None, u'Callee', u'assert'], [1204407, None, u'ArgumentList', u'D'], [1204411, None, u'Identifier', u'assert'], [1204408, None, u'Argument', u'D'], [1204409, None, u'Identifier', u'D'], [1204405, u'True', u'ExpressionStatement', u'assert ( D )'], [1204412, u'True', u'CFGEntryNode', u'ENTRY'], [1204406, None, u'CallExpression', u'assert ( D )'], [1204410, None, u'Callee', u'assert'], [1204407, None, u'ArgumentList', u'D'], [1204411, None, u'Identifier', u'assert'], [1204408, None, u'Argument', u'D'], [1204409, None, u'Identifier', u'D'], [1204405, u'True', u'ExpressionStatement', u'assert ( D )'], [1204412, u'True', u'CFGEntryNode', u'ENTRY']]","[[1204406, None, u'CallExpression', u'assert ( D )'], [1204410, None, u'Callee', u'assert'], [1204407, None, u'ArgumentList', u'D'], [1204411, None, u'Identifier', u'assert'], [1204408, None, u'Argument', u'D'], [1204409, None, u'Identifier', u'D'], [1204405, u'True', u'ExpressionStatement', u'assert ( D )'], [1204406, None, u'CallExpression', u'assert ( D )'], [1204410, None, u'Callee', u'assert'], [1204407, None, u'ArgumentList', u'D'], [1204411, None, u'Identifier', u'assert'], [1204408, None, u'Argument', u'D'], [1204409, None, u'Identifier', u'D'], [1204405, u'True', u'ExpressionStatement', u'assert ( D )']]"
"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1204801, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1204802, None, u'CallExpression', u'assert ( D )'], [1204806, None, u'Callee', u'assert'], [1204803, None, u'ArgumentList', u'D'], [1204807, None, u'Identifier', u'assert'], [1204804, None, u'Argument', u'D'], [1204805, None, u'Identifier', u'D'], [1204801, u'True', u'ExpressionStatement', u'assert ( D )'], [1204808, u'True', u'CFGEntryNode', u'ENTRY']]","[[1204802, None, u'CallExpression', u'assert ( D )'], [1204806, None, u'Callee', u'assert'], [1204803, None, u'ArgumentList', u'D'], [1204807, None, u'Identifier', u'assert'], [1204804, None, u'Argument', u'D'], [1204805, None, u'Identifier', u'D'], [1204801, u'True', u'ExpressionStatement', u'assert ( D )'], [1204765, None, u'ParameterType', u'const Decl *'], [1204764, None, u'Identifier', u'D'], [1204763, u'True', u'Parameter', u'const Decl * D']]"
"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1204789, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[1204790, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1204799, None, u'Callee', u'assert'], [1204791, None, u'ArgumentList', u'D -> hasBody ( )'], [1204800, None, u'Identifier', u'assert'], [1204792, None, u'Argument', u'D -> hasBody ( )'], [1204793, None, u'CallExpression', u'D -> hasBody ( )'], [1204795, None, u'Callee', u'D -> hasBody'], [1204794, None, u'ArgumentList', u''], [1204796, None, u'PtrMemberAccess', u'D -> hasBody'], [1204798, None, u'Identifier', u'D'], [1204797, None, u'Identifier', u'hasBody'], [1204789, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1204808, u'True', u'CFGEntryNode', u'ENTRY']]","[[1204790, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1204799, None, u'Callee', u'assert'], [1204791, None, u'ArgumentList', u'D -> hasBody ( )'], [1204800, None, u'Identifier', u'assert'], [1204792, None, u'Argument', u'D -> hasBody ( )'], [1204793, None, u'CallExpression', u'D -> hasBody ( )'], [1204795, None, u'Callee', u'D -> hasBody'], [1204794, None, u'ArgumentList', u''], [1204796, None, u'PtrMemberAccess', u'D -> hasBody'], [1204798, None, u'Identifier', u'D'], [1204797, None, u'Identifier', u'hasBody'], [1204789, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1204765, None, u'ParameterType', u'const Decl *'], [1204764, None, u'Identifier', u'D'], [1204763, u'True', u'Parameter', u'const Decl * D']]"
"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1202939, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1202940, None, u'CallExpression', u'assert ( D )'], [1202944, None, u'Callee', u'assert'], [1202941, None, u'ArgumentList', u'D'], [1202945, None, u'Identifier', u'assert'], [1202942, None, u'Argument', u'D'], [1202943, None, u'Identifier', u'D'], [1202939, u'True', u'ExpressionStatement', u'assert ( D )'], [1202946, u'True', u'CFGEntryNode', u'ENTRY']]","[[1202940, None, u'CallExpression', u'assert ( D )'], [1202944, None, u'Callee', u'assert'], [1202941, None, u'ArgumentList', u'D'], [1202945, None, u'Identifier', u'assert'], [1202942, None, u'Argument', u'D'], [1202943, None, u'Identifier', u'D'], [1202939, u'True', u'ExpressionStatement', u'assert ( D )'], [1202896, None, u'ParameterType', u'const Decl *'], [1202895, None, u'Identifier', u'D'], [1202894, u'True', u'Parameter', u'const Decl * D']]"
"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1202927, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[1202928, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1202937, None, u'Callee', u'assert'], [1202929, None, u'ArgumentList', u'D -> hasBody ( )'], [1202938, None, u'Identifier', u'assert'], [1202930, None, u'Argument', u'D -> hasBody ( )'], [1202931, None, u'CallExpression', u'D -> hasBody ( )'], [1202933, None, u'Callee', u'D -> hasBody'], [1202932, None, u'ArgumentList', u''], [1202934, None, u'PtrMemberAccess', u'D -> hasBody'], [1202936, None, u'Identifier', u'D'], [1202935, None, u'Identifier', u'hasBody'], [1202927, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1202946, u'True', u'CFGEntryNode', u'ENTRY']]","[[1202928, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1202937, None, u'Callee', u'assert'], [1202929, None, u'ArgumentList', u'D -> hasBody ( )'], [1202938, None, u'Identifier', u'assert'], [1202930, None, u'Argument', u'D -> hasBody ( )'], [1202931, None, u'CallExpression', u'D -> hasBody ( )'], [1202933, None, u'Callee', u'D -> hasBody'], [1202932, None, u'ArgumentList', u''], [1202934, None, u'PtrMemberAccess', u'D -> hasBody'], [1202936, None, u'Identifier', u'D'], [1202935, None, u'Identifier', u'hasBody'], [1202927, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1202896, None, u'ParameterType', u'const Decl *'], [1202895, None, u'Identifier', u'D'], [1202894, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1794331, u'True', u'ExpressionStatement', u'assert ( D )'], [1794331, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1794332, None, u'CallExpression', u'assert ( D )'], [1794336, None, u'Callee', u'assert'], [1794333, None, u'ArgumentList', u'D'], [1794337, None, u'Identifier', u'assert'], [1794334, None, u'Argument', u'D'], [1794335, None, u'Identifier', u'D'], [1794331, u'True', u'ExpressionStatement', u'assert ( D )'], [1794338, u'True', u'CFGEntryNode', u'ENTRY'], [1794332, None, u'CallExpression', u'assert ( D )'], [1794336, None, u'Callee', u'assert'], [1794333, None, u'ArgumentList', u'D'], [1794337, None, u'Identifier', u'assert'], [1794334, None, u'Argument', u'D'], [1794335, None, u'Identifier', u'D'], [1794331, u'True', u'ExpressionStatement', u'assert ( D )'], [1794338, u'True', u'CFGEntryNode', u'ENTRY']]","[[1794332, None, u'CallExpression', u'assert ( D )'], [1794336, None, u'Callee', u'assert'], [1794333, None, u'ArgumentList', u'D'], [1794337, None, u'Identifier', u'assert'], [1794334, None, u'Argument', u'D'], [1794335, None, u'Identifier', u'D'], [1794331, u'True', u'ExpressionStatement', u'assert ( D )'], [1794332, None, u'CallExpression', u'assert ( D )'], [1794336, None, u'Callee', u'assert'], [1794333, None, u'ArgumentList', u'D'], [1794337, None, u'Identifier', u'assert'], [1794334, None, u'Argument', u'D'], [1794335, None, u'Identifier', u'D'], [1794331, u'True', u'ExpressionStatement', u'assert ( D )']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1794727, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1794728, None, u'CallExpression', u'assert ( D )'], [1794732, None, u'Callee', u'assert'], [1794729, None, u'ArgumentList', u'D'], [1794733, None, u'Identifier', u'assert'], [1794730, None, u'Argument', u'D'], [1794731, None, u'Identifier', u'D'], [1794727, u'True', u'ExpressionStatement', u'assert ( D )'], [1794734, u'True', u'CFGEntryNode', u'ENTRY']]","[[1794728, None, u'CallExpression', u'assert ( D )'], [1794732, None, u'Callee', u'assert'], [1794729, None, u'ArgumentList', u'D'], [1794733, None, u'Identifier', u'assert'], [1794730, None, u'Argument', u'D'], [1794731, None, u'Identifier', u'D'], [1794727, u'True', u'ExpressionStatement', u'assert ( D )'], [1794691, None, u'ParameterType', u'const Decl *'], [1794690, None, u'Identifier', u'D'], [1794689, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1794715, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[1794716, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1794725, None, u'Callee', u'assert'], [1794717, None, u'ArgumentList', u'D -> hasBody ( )'], [1794726, None, u'Identifier', u'assert'], [1794718, None, u'Argument', u'D -> hasBody ( )'], [1794719, None, u'CallExpression', u'D -> hasBody ( )'], [1794721, None, u'Callee', u'D -> hasBody'], [1794720, None, u'ArgumentList', u''], [1794722, None, u'PtrMemberAccess', u'D -> hasBody'], [1794724, None, u'Identifier', u'D'], [1794723, None, u'Identifier', u'hasBody'], [1794715, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1794734, u'True', u'CFGEntryNode', u'ENTRY']]","[[1794716, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1794725, None, u'Callee', u'assert'], [1794717, None, u'ArgumentList', u'D -> hasBody ( )'], [1794726, None, u'Identifier', u'assert'], [1794718, None, u'Argument', u'D -> hasBody ( )'], [1794719, None, u'CallExpression', u'D -> hasBody ( )'], [1794721, None, u'Callee', u'D -> hasBody'], [1794720, None, u'ArgumentList', u''], [1794722, None, u'PtrMemberAccess', u'D -> hasBody'], [1794724, None, u'Identifier', u'D'], [1794723, None, u'Identifier', u'hasBody'], [1794715, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1794691, None, u'ParameterType', u'const Decl *'], [1794690, None, u'Identifier', u'D'], [1794689, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1797947, u'True', u'ExpressionStatement', u'assert ( D )']]","[[1797948, None, u'CallExpression', u'assert ( D )'], [1797952, None, u'Callee', u'assert'], [1797949, None, u'ArgumentList', u'D'], [1797953, None, u'Identifier', u'assert'], [1797950, None, u'Argument', u'D'], [1797951, None, u'Identifier', u'D'], [1797947, u'True', u'ExpressionStatement', u'assert ( D )'], [1797954, u'True', u'CFGEntryNode', u'ENTRY']]","[[1797948, None, u'CallExpression', u'assert ( D )'], [1797952, None, u'Callee', u'assert'], [1797949, None, u'ArgumentList', u'D'], [1797953, None, u'Identifier', u'assert'], [1797950, None, u'Argument', u'D'], [1797951, None, u'Identifier', u'D'], [1797947, u'True', u'ExpressionStatement', u'assert ( D )'], [1797904, None, u'ParameterType', u'const Decl *'], [1797903, None, u'Identifier', u'D'], [1797902, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1797935, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )']]","[[1797936, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1797945, None, u'Callee', u'assert'], [1797937, None, u'ArgumentList', u'D -> hasBody ( )'], [1797946, None, u'Identifier', u'assert'], [1797938, None, u'Argument', u'D -> hasBody ( )'], [1797939, None, u'CallExpression', u'D -> hasBody ( )'], [1797941, None, u'Callee', u'D -> hasBody'], [1797940, None, u'ArgumentList', u''], [1797942, None, u'PtrMemberAccess', u'D -> hasBody'], [1797944, None, u'Identifier', u'D'], [1797943, None, u'Identifier', u'hasBody'], [1797935, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1797954, u'True', u'CFGEntryNode', u'ENTRY']]","[[1797936, None, u'CallExpression', u'assert ( D -> hasBody ( ) )'], [1797945, None, u'Callee', u'assert'], [1797937, None, u'ArgumentList', u'D -> hasBody ( )'], [1797946, None, u'Identifier', u'assert'], [1797938, None, u'Argument', u'D -> hasBody ( )'], [1797939, None, u'CallExpression', u'D -> hasBody ( )'], [1797941, None, u'Callee', u'D -> hasBody'], [1797940, None, u'ArgumentList', u''], [1797942, None, u'PtrMemberAccess', u'D -> hasBody'], [1797944, None, u'Identifier', u'D'], [1797943, None, u'Identifier', u'hasBody'], [1797935, u'True', u'ExpressionStatement', u'assert ( D -> hasBody ( ) )'], [1797904, None, u'ParameterType', u'const Decl *'], [1797903, None, u'Identifier', u'D'], [1797902, u'True', u'Parameter', u'const Decl * D']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"[[1798793, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;']]","[[1798794, None, u'IdentifierDecl', u'PatternB ( B )'], [1798797, None, u'IdentifierDeclType', u'VariablePattern'], [1798796, None, u'Identifier', u'PatternB'], [1798795, None, u'Identifier', u'B'], [1798793, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;'], [1798822, u'True', u'CFGEntryNode', u'ENTRY']]","[[1798794, None, u'IdentifierDecl', u'PatternB ( B )'], [1798797, None, u'IdentifierDeclType', u'VariablePattern'], [1798796, None, u'Identifier', u'PatternB'], [1798795, None, u'Identifier', u'B'], [1798793, u'True', u'IdentifierDeclStatement', u'VariablePattern PatternB ( B ) ;']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1795835, u'True', u'Statement', u'::'], [1795837, u'True', u'Statement', u'('], [1795825, u'True', u'Statement', u'.'], [1795827, u'True', u'Statement', u','], [1795833, u'True', u'Statement', u'('], [1795834, u'True', u'Statement', u'all_of'], [1795823, u'True', u'Statement', u'('], [1795822, u'True', u'Statement', u')'], [1795824, u'True', u'Statement', u'end'], [1795826, u'True', u'Statement', u'Indexes'], [1795831, u'True', u'Statement', u'.'], [1795832, u'True', u'Statement', u'Indexes'], [1795821, u'True', u'Statement', u','], [1795836, u'True', u'Statement', u'std'], [1795828, u'True', u'Statement', u')'], [1795838, u'True', u'Statement', u'assert'], [1795829, u'True', u'Statement', u'('], [1795830, u'True', u'Statement', u'begin']]","[[1795835, u'True', u'Statement', u'::'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795837, u'True', u'Statement', u'('], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795825, u'True', u'Statement', u'.'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795827, u'True', u'Statement', u','], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795833, u'True', u'Statement', u'('], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795834, u'True', u'Statement', u'all_of'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795823, u'True', u'Statement', u'('], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795822, u'True', u'Statement', u')'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795824, u'True', u'Statement', u'end'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795826, u'True', u'Statement', u'Indexes'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795831, u'True', u'Statement', u'.'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795832, u'True', u'Statement', u'Indexes'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795821, u'True', u'Statement', u','], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795836, u'True', u'Statement', u'std'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795828, u'True', u'Statement', u')'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795838, u'True', u'Statement', u'assert'], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795829, u'True', u'Statement', u'('], [1795996, u'True', u'CFGEntryNode', u'ENTRY'], [1795830, u'True', u'Statement', u'begin'], [1795996, u'True', u'CFGEntryNode', u'ENTRY']]","[[1795835, u'True', u'Statement', u'::'], [1795837, u'True', u'Statement', u'('], [1795825, u'True', u'Statement', u'.'], [1795827, u'True', u'Statement', u','], [1795833, u'True', u'Statement', u'('], [1795834, u'True', u'Statement', u'all_of'], [1795823, u'True', u'Statement', u'('], [1795822, u'True', u'Statement', u')'], [1795824, u'True', u'Statement', u'end'], [1795826, u'True', u'Statement', u'Indexes'], [1795831, u'True', u'Statement', u'.'], [1795832, u'True', u'Statement', u'Indexes'], [1795821, u'True', u'Statement', u','], [1795836, u'True', u'Statement', u'std'], [1795828, u'True', u'Statement', u')'], [1795838, u'True', u'Statement', u'assert'], [1795829, u'True', u'Statement', u'('], [1795830, u'True', u'Statement', u'begin']]"
"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"[[1796399, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )']]","[[1796400, None, u'CallExpression', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [1796418, None, u'Callee', u'assert'], [1796401, None, u'ArgumentList', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796419, None, u'Identifier', u'assert'], [1796402, None, u'Argument', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796403, None, u'EqualityExpression', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796410, None, u'CallExpression', u'Other . Occurences . size ( )'], [1796404, None, u'CallExpression', u'Occurences . size ( )'], [1796412, None, u'Callee', u'Other . Occurences . size'], [1796411, None, u'ArgumentList', u''], [1796406, None, u'Callee', u'Occurences . size'], [1796405, None, u'ArgumentList', u''], [1796413, None, u'MemberAccess', u'Other . Occurences . size'], [1796407, None, u'MemberAccess', u'Occurences . size'], [1796415, None, u'MemberAccess', u'Other . Occurences'], [1796414, None, u'Identifier', u'size'], [1796409, None, u'Identifier', u'Occurences'], [1796408, None, u'Identifier', u'size'], [1796417, None, u'Identifier', u'Other'], [1796416, None, u'Identifier', u'Occurences'], [1796399, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [1796427, u'True', u'CFGEntryNode', u'ENTRY']]","[[1796400, None, u'CallExpression', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [1796418, None, u'Callee', u'assert'], [1796401, None, u'ArgumentList', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796419, None, u'Identifier', u'assert'], [1796402, None, u'Argument', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796403, None, u'EqualityExpression', u'Other . Occurences . size ( ) == Occurences . size ( )'], [1796410, None, u'CallExpression', u'Other . Occurences . size ( )'], [1796404, None, u'CallExpression', u'Occurences . size ( )'], [1796412, None, u'Callee', u'Other . Occurences . size'], [1796411, None, u'ArgumentList', u''], [1796406, None, u'Callee', u'Occurences . size'], [1796405, None, u'ArgumentList', u''], [1796413, None, u'MemberAccess', u'Other . Occurences . size'], [1796407, None, u'MemberAccess', u'Occurences . size'], [1796415, None, u'MemberAccess', u'Other . Occurences'], [1796414, None, u'Identifier', u'size'], [1796409, None, u'Identifier', u'Occurences'], [1796408, None, u'Identifier', u'size'], [1796417, None, u'Identifier', u'Other'], [1796416, None, u'Identifier', u'Occurences'], [1796399, u'True', u'ExpressionStatement', u'assert ( Other . Occurences . size ( ) == Occurences . size ( ) )'], [1796195, None, u'ParameterType', u'const VariablePattern &'], [1796194, None, u'Identifier', u'Other'], [1796193, u'True', u'Parameter', u'const VariablePattern & Other']]"
"Add #pragma clang fp

This adds the new pragma and the first variant, contract(on/off/fast).

The pragma has the same block scope rules as STDC FP_CONTRACT, i.e. it can be
placed at the beginning of a compound statement or at file scope.

Similarly to STDC FP_CONTRACT there is no need to use attributes.  First an
annotate token is inserted with the parsed details of the pragma.  Then the
annotate token is parsed in the proper contexts and the Sema is updated with
the corresponding FPOptions using the shared ActOn function with STDC
FP_CONTRACT.

After this the FPOptions from the Sema is propagated into the AST expression
nodes.  There is no change here.

I was going to add a 'default' option besides 'on/off/fast' similar to STDC
FP_CONTRACT but then decided against it. I think that we'd have to make option
uppercase then to avoid using 'default' the keyword.  Also because of the
scoped activation of pragma I am not sure there is really a need a for this.

Differential Revision: https://reviews.llvm.org/D31276

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299470 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParsePragma.cpp,+,"[[2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )']]","[[2584258, None, u'CallExpression', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584269, None, u'Callee', u'assert'], [2584259, None, u'ArgumentList', u'Tok . is ( tok :: annot_pragma_fp )'], [2584270, None, u'Identifier', u'assert'], [2584260, None, u'Argument', u'Tok . is ( tok :: annot_pragma_fp )'], [2584261, None, u'CallExpression', u'Tok . is ( tok :: annot_pragma_fp )'], [2584265, None, u'Callee', u'Tok . is'], [2584262, None, u'ArgumentList', u'tok :: annot_pragma_fp'], [2584266, None, u'MemberAccess', u'Tok . is'], [2584263, None, u'Argument', u'tok :: annot_pragma_fp'], [2584268, None, u'Identifier', u'Tok'], [2584267, None, u'Identifier', u'is'], [2584264, None, u'Identifier', u'tok :: annot_pragma_fp'], [2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584271, u'True', u'CFGEntryNode', u'ENTRY'], [2584258, None, u'CallExpression', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584269, None, u'Callee', u'assert'], [2584259, None, u'ArgumentList', u'Tok . is ( tok :: annot_pragma_fp )'], [2584270, None, u'Identifier', u'assert'], [2584260, None, u'Argument', u'Tok . is ( tok :: annot_pragma_fp )'], [2584261, None, u'CallExpression', u'Tok . is ( tok :: annot_pragma_fp )'], [2584265, None, u'Callee', u'Tok . is'], [2584262, None, u'ArgumentList', u'tok :: annot_pragma_fp'], [2584266, None, u'MemberAccess', u'Tok . is'], [2584263, None, u'Argument', u'tok :: annot_pragma_fp'], [2584268, None, u'Identifier', u'Tok'], [2584267, None, u'Identifier', u'is'], [2584264, None, u'Identifier', u'tok :: annot_pragma_fp'], [2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584271, u'True', u'CFGEntryNode', u'ENTRY']]","[[2584258, None, u'CallExpression', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584269, None, u'Callee', u'assert'], [2584259, None, u'ArgumentList', u'Tok . is ( tok :: annot_pragma_fp )'], [2584270, None, u'Identifier', u'assert'], [2584260, None, u'Argument', u'Tok . is ( tok :: annot_pragma_fp )'], [2584261, None, u'CallExpression', u'Tok . is ( tok :: annot_pragma_fp )'], [2584265, None, u'Callee', u'Tok . is'], [2584262, None, u'ArgumentList', u'tok :: annot_pragma_fp'], [2584266, None, u'MemberAccess', u'Tok . is'], [2584263, None, u'Argument', u'tok :: annot_pragma_fp'], [2584268, None, u'Identifier', u'Tok'], [2584267, None, u'Identifier', u'is'], [2584264, None, u'Identifier', u'tok :: annot_pragma_fp'], [2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584258, None, u'CallExpression', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )'], [2584269, None, u'Callee', u'assert'], [2584259, None, u'ArgumentList', u'Tok . is ( tok :: annot_pragma_fp )'], [2584270, None, u'Identifier', u'assert'], [2584260, None, u'Argument', u'Tok . is ( tok :: annot_pragma_fp )'], [2584261, None, u'CallExpression', u'Tok . is ( tok :: annot_pragma_fp )'], [2584265, None, u'Callee', u'Tok . is'], [2584262, None, u'ArgumentList', u'tok :: annot_pragma_fp'], [2584266, None, u'MemberAccess', u'Tok . is'], [2584263, None, u'Argument', u'tok :: annot_pragma_fp'], [2584268, None, u'Identifier', u'Tok'], [2584267, None, u'Identifier', u'is'], [2584264, None, u'Identifier', u'tok :: annot_pragma_fp'], [2584257, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: annot_pragma_fp ) )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )']]","[[3027913, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027924, None, u'Callee', u'assert'], [3027914, None, u'ArgumentList', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027925, None, u'Identifier', u'assert'], [3027915, None, u'Argument', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027916, None, u'AndExpression', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027918, None, u'EqualityExpression', u'getSortKind ( ) == Z3_BV_SORT'], [3027917, None, u'PrimaryExpression', u'""Not a bitvector sort!""'], [3027920, None, u'CallExpression', u'getSortKind ( )'], [3027919, None, u'Identifier', u'Z3_BV_SORT'], [3027922, None, u'Callee', u'getSortKind'], [3027921, None, u'ArgumentList', u''], [3027923, None, u'Identifier', u'getSortKind'], [3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027926, u'True', u'CFGEntryNode', u'ENTRY'], [3027913, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027924, None, u'Callee', u'assert'], [3027914, None, u'ArgumentList', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027925, None, u'Identifier', u'assert'], [3027915, None, u'Argument', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027916, None, u'AndExpression', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027918, None, u'EqualityExpression', u'getSortKind ( ) == Z3_BV_SORT'], [3027917, None, u'PrimaryExpression', u'""Not a bitvector sort!""'], [3027920, None, u'CallExpression', u'getSortKind ( )'], [3027919, None, u'Identifier', u'Z3_BV_SORT'], [3027922, None, u'Callee', u'getSortKind'], [3027921, None, u'ArgumentList', u''], [3027923, None, u'Identifier', u'getSortKind'], [3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027926, u'True', u'CFGEntryNode', u'ENTRY']]","[[3027913, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027924, None, u'Callee', u'assert'], [3027914, None, u'ArgumentList', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027925, None, u'Identifier', u'assert'], [3027915, None, u'Argument', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027916, None, u'AndExpression', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027918, None, u'EqualityExpression', u'getSortKind ( ) == Z3_BV_SORT'], [3027917, None, u'PrimaryExpression', u'""Not a bitvector sort!""'], [3027920, None, u'CallExpression', u'getSortKind ( )'], [3027919, None, u'Identifier', u'Z3_BV_SORT'], [3027922, None, u'Callee', u'getSortKind'], [3027921, None, u'ArgumentList', u''], [3027923, None, u'Identifier', u'getSortKind'], [3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027913, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )'], [3027924, None, u'Callee', u'assert'], [3027914, None, u'ArgumentList', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027925, None, u'Identifier', u'assert'], [3027915, None, u'Argument', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027916, None, u'AndExpression', u'getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!""'], [3027918, None, u'EqualityExpression', u'getSortKind ( ) == Z3_BV_SORT'], [3027917, None, u'PrimaryExpression', u'""Not a bitvector sort!""'], [3027920, None, u'CallExpression', u'getSortKind ( )'], [3027919, None, u'Identifier', u'Z3_BV_SORT'], [3027922, None, u'Callee', u'getSortKind'], [3027921, None, u'ArgumentList', u''], [3027923, None, u'Identifier', u'getSortKind'], [3027912, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_BV_SORT && ""Not a bitvector sort!"" )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )']]","[[3027957, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027968, None, u'Callee', u'assert'], [3027958, None, u'ArgumentList', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027969, None, u'Identifier', u'assert'], [3027959, None, u'Argument', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027960, None, u'AndExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027962, None, u'EqualityExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT'], [3027961, None, u'PrimaryExpression', u'""Not a floating-point sort!""'], [3027964, None, u'CallExpression', u'getSortKind ( )'], [3027963, None, u'Identifier', u'Z3_FLOATING_POINT_SORT'], [3027966, None, u'Callee', u'getSortKind'], [3027965, None, u'ArgumentList', u''], [3027967, None, u'Identifier', u'getSortKind'], [3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027970, u'True', u'CFGEntryNode', u'ENTRY'], [3027957, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027968, None, u'Callee', u'assert'], [3027958, None, u'ArgumentList', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027969, None, u'Identifier', u'assert'], [3027959, None, u'Argument', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027960, None, u'AndExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027962, None, u'EqualityExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT'], [3027961, None, u'PrimaryExpression', u'""Not a floating-point sort!""'], [3027964, None, u'CallExpression', u'getSortKind ( )'], [3027963, None, u'Identifier', u'Z3_FLOATING_POINT_SORT'], [3027966, None, u'Callee', u'getSortKind'], [3027965, None, u'ArgumentList', u''], [3027967, None, u'Identifier', u'getSortKind'], [3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027970, u'True', u'CFGEntryNode', u'ENTRY']]","[[3027957, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027968, None, u'Callee', u'assert'], [3027958, None, u'ArgumentList', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027969, None, u'Identifier', u'assert'], [3027959, None, u'Argument', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027960, None, u'AndExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027962, None, u'EqualityExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT'], [3027961, None, u'PrimaryExpression', u'""Not a floating-point sort!""'], [3027964, None, u'CallExpression', u'getSortKind ( )'], [3027963, None, u'Identifier', u'Z3_FLOATING_POINT_SORT'], [3027966, None, u'Callee', u'getSortKind'], [3027965, None, u'ArgumentList', u''], [3027967, None, u'Identifier', u'getSortKind'], [3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027957, None, u'CallExpression', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )'], [3027968, None, u'Callee', u'assert'], [3027958, None, u'ArgumentList', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027969, None, u'Identifier', u'assert'], [3027959, None, u'Argument', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027960, None, u'AndExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!""'], [3027962, None, u'EqualityExpression', u'getSortKind ( ) == Z3_FLOATING_POINT_SORT'], [3027961, None, u'PrimaryExpression', u'""Not a floating-point sort!""'], [3027964, None, u'CallExpression', u'getSortKind ( )'], [3027963, None, u'Identifier', u'Z3_FLOATING_POINT_SORT'], [3027966, None, u'Callee', u'getSortKind'], [3027965, None, u'ArgumentList', u''], [3027967, None, u'Identifier', u'getSortKind'], [3027956, u'True', u'ExpressionStatement', u'assert ( getSortKind ( ) == Z3_FLOATING_POINT_SORT && ""Not a floating-point sort!"" )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3028065, u'True', u'Parameter', u'raw_ostream & OS'], [3028065, u'True', u'Parameter', u'raw_ostream & OS']]","[[3028067, None, u'ParameterType', u'raw_ostream &'], [3028066, None, u'Identifier', u'OS'], [3028065, u'True', u'Parameter', u'raw_ostream & OS'], [3028081, u'True', u'CFGEntryNode', u'ENTRY'], [3028067, None, u'ParameterType', u'raw_ostream &'], [3028066, None, u'Identifier', u'OS'], [3028065, u'True', u'Parameter', u'raw_ostream & OS'], [3028081, u'True', u'CFGEntryNode', u'ENTRY']]","[[3028067, None, u'ParameterType', u'raw_ostream &'], [3028066, None, u'Identifier', u'OS'], [3028065, u'True', u'Parameter', u'raw_ostream & OS'], [3028067, None, u'ParameterType', u'raw_ostream &'], [3028066, None, u'Identifier', u'OS'], [3028065, u'True', u'Parameter', u'raw_ostream & OS']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]","[[3028092, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3028099, None, u'Callee', u'print'], [3028093, None, u'ArgumentList', u'llvm :: errs ( )'], [3028100, None, u'Identifier', u'print'], [3028094, None, u'Argument', u'llvm :: errs ( )'], [3028095, None, u'CallExpression', u'llvm :: errs ( )'], [3028097, None, u'Callee', u'llvm :: errs'], [3028096, None, u'ArgumentList', u''], [3028098, None, u'Identifier', u'llvm :: errs'], [3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3028101, u'True', u'CFGEntryNode', u'ENTRY'], [3028092, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3028099, None, u'Callee', u'print'], [3028093, None, u'ArgumentList', u'llvm :: errs ( )'], [3028100, None, u'Identifier', u'print'], [3028094, None, u'Argument', u'llvm :: errs ( )'], [3028095, None, u'CallExpression', u'llvm :: errs ( )'], [3028097, None, u'Callee', u'llvm :: errs'], [3028096, None, u'ArgumentList', u''], [3028098, None, u'Identifier', u'llvm :: errs'], [3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3028101, u'True', u'CFGEntryNode', u'ENTRY']]","[[3028092, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3028099, None, u'Callee', u'print'], [3028093, None, u'ArgumentList', u'llvm :: errs ( )'], [3028100, None, u'Identifier', u'print'], [3028094, None, u'Argument', u'llvm :: errs ( )'], [3028095, None, u'CallExpression', u'llvm :: errs ( )'], [3028097, None, u'Callee', u'llvm :: errs'], [3028096, None, u'ArgumentList', u''], [3028098, None, u'Identifier', u'llvm :: errs'], [3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3028092, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3028099, None, u'Callee', u'print'], [3028093, None, u'ArgumentList', u'llvm :: errs ( )'], [3028100, None, u'Identifier', u'print'], [3028094, None, u'Argument', u'llvm :: errs ( )'], [3028095, None, u'CallExpression', u'llvm :: errs ( )'], [3028097, None, u'Callee', u'llvm :: errs'], [3028096, None, u'ArgumentList', u''], [3028098, None, u'Identifier', u'llvm :: errs'], [3028091, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3029093, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )']]","[[3029094, None, u'CallExpression', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029116, None, u'Callee', u'assert'], [3029095, None, u'ArgumentList', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029117, None, u'Identifier', u'assert'], [3029096, None, u'Argument', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029097, None, u'AndExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029099, None, u'EqualityExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST )'], [3029098, None, u'PrimaryExpression', u'""AST\'s must have the same sort!""'], [3029108, None, u'CallExpression', u'Z3Sort :: getSort ( LHS . AST )'], [3029100, None, u'CallExpression', u'Z3Sort :: getSort ( RHS . AST )'], [3029114, None, u'Callee', u'Z3Sort :: getSort'], [3029109, None, u'ArgumentList', u'LHS . AST'], [3029106, None, u'Callee', u'Z3Sort :: getSort'], [3029101, None, u'ArgumentList', u'RHS . AST'], [3029115, None, u'Identifier', u'Z3Sort :: getSort'], [3029110, None, u'Argument', u'LHS . AST'], [3029107, None, u'Identifier', u'Z3Sort :: getSort'], [3029102, None, u'Argument', u'RHS . AST'], [3029111, None, u'MemberAccess', u'LHS . AST'], [3029103, None, u'MemberAccess', u'RHS . AST'], [3029113, None, u'Identifier', u'LHS'], [3029112, None, u'Identifier', u'AST'], [3029105, None, u'Identifier', u'RHS'], [3029104, None, u'Identifier', u'AST'], [3029093, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029122, u'True', u'CFGEntryNode', u'ENTRY']]","[[3029094, None, u'CallExpression', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029116, None, u'Callee', u'assert'], [3029095, None, u'ArgumentList', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029117, None, u'Identifier', u'assert'], [3029096, None, u'Argument', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029097, None, u'AndExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029099, None, u'EqualityExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST )'], [3029098, None, u'PrimaryExpression', u'""AST\'s must have the same sort!""'], [3029108, None, u'CallExpression', u'Z3Sort :: getSort ( LHS . AST )'], [3029100, None, u'CallExpression', u'Z3Sort :: getSort ( RHS . AST )'], [3029114, None, u'Callee', u'Z3Sort :: getSort'], [3029109, None, u'ArgumentList', u'LHS . AST'], [3029106, None, u'Callee', u'Z3Sort :: getSort'], [3029101, None, u'ArgumentList', u'RHS . AST'], [3029115, None, u'Identifier', u'Z3Sort :: getSort'], [3029110, None, u'Argument', u'LHS . AST'], [3029107, None, u'Identifier', u'Z3Sort :: getSort'], [3029102, None, u'Argument', u'RHS . AST'], [3029111, None, u'MemberAccess', u'LHS . AST'], [3029103, None, u'MemberAccess', u'RHS . AST'], [3029113, None, u'Identifier', u'LHS'], [3029112, None, u'Identifier', u'AST'], [3029105, None, u'Identifier', u'RHS'], [3029104, None, u'Identifier', u'AST'], [3029093, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3028594, None, u'ParameterType', u'const Z3Expr &'], [3028593, None, u'Identifier', u'RHS'], [3028592, u'True', u'Parameter', u'const Z3Expr & RHS'], [3028600, None, u'ParameterType', u'const Z3Expr &'], [3028599, None, u'Identifier', u'LHS'], [3028598, u'True', u'Parameter', u'const Z3Expr & LHS']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3029643, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )']]","[[3029644, None, u'CallExpression', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029666, None, u'Callee', u'assert'], [3029645, None, u'ArgumentList', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029667, None, u'Identifier', u'assert'], [3029646, None, u'Argument', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029647, None, u'AndExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029649, None, u'EqualityExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST )'], [3029648, None, u'PrimaryExpression', u'""AST\'s must have the same sort!""'], [3029658, None, u'CallExpression', u'Z3Sort :: getSort ( LHS . AST )'], [3029650, None, u'CallExpression', u'Z3Sort :: getSort ( RHS . AST )'], [3029664, None, u'Callee', u'Z3Sort :: getSort'], [3029659, None, u'ArgumentList', u'LHS . AST'], [3029656, None, u'Callee', u'Z3Sort :: getSort'], [3029651, None, u'ArgumentList', u'RHS . AST'], [3029665, None, u'Identifier', u'Z3Sort :: getSort'], [3029660, None, u'Argument', u'LHS . AST'], [3029657, None, u'Identifier', u'Z3Sort :: getSort'], [3029652, None, u'Argument', u'RHS . AST'], [3029661, None, u'MemberAccess', u'LHS . AST'], [3029653, None, u'MemberAccess', u'RHS . AST'], [3029663, None, u'Identifier', u'LHS'], [3029662, None, u'Identifier', u'AST'], [3029655, None, u'Identifier', u'RHS'], [3029654, None, u'Identifier', u'AST'], [3029643, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029672, u'True', u'CFGEntryNode', u'ENTRY']]","[[3029644, None, u'CallExpression', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029666, None, u'Callee', u'assert'], [3029645, None, u'ArgumentList', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029667, None, u'Identifier', u'assert'], [3029646, None, u'Argument', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029647, None, u'AndExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!""'], [3029649, None, u'EqualityExpression', u'Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST )'], [3029648, None, u'PrimaryExpression', u'""AST\'s must have the same sort!""'], [3029658, None, u'CallExpression', u'Z3Sort :: getSort ( LHS . AST )'], [3029650, None, u'CallExpression', u'Z3Sort :: getSort ( RHS . AST )'], [3029664, None, u'Callee', u'Z3Sort :: getSort'], [3029659, None, u'ArgumentList', u'LHS . AST'], [3029656, None, u'Callee', u'Z3Sort :: getSort'], [3029651, None, u'ArgumentList', u'RHS . AST'], [3029665, None, u'Identifier', u'Z3Sort :: getSort'], [3029660, None, u'Argument', u'LHS . AST'], [3029657, None, u'Identifier', u'Z3Sort :: getSort'], [3029652, None, u'Argument', u'RHS . AST'], [3029661, None, u'MemberAccess', u'LHS . AST'], [3029653, None, u'MemberAccess', u'RHS . AST'], [3029663, None, u'Identifier', u'LHS'], [3029662, None, u'Identifier', u'AST'], [3029655, None, u'Identifier', u'RHS'], [3029654, None, u'Identifier', u'AST'], [3029643, u'True', u'ExpressionStatement', u'assert ( Z3Sort :: getSort ( LHS . AST ) == Z3Sort :: getSort ( RHS . AST ) && ""AST\'s must have the same sort!"" )'], [3029315, None, u'ParameterType', u'const Z3Expr &'], [3029314, None, u'Identifier', u'RHS'], [3029313, u'True', u'Parameter', u'const Z3Expr & RHS'], [3029321, None, u'ParameterType', u'const Z3Expr &'], [3029320, None, u'Identifier', u'LHS'], [3029319, u'True', u'Parameter', u'const Z3Expr & LHS']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3030742, u'True', u'ExpressionStatement', u'assert ( Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort"" )']]","[[3030743, None, u'CallExpression', u'assert ( Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort"" )'], [3030774, None, u'Callee', u'assert'], [3030744, None, u'ArgumentList', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030775, None, u'Identifier', u'assert'], [3030745, None, u'Argument', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030746, None, u'AndExpression', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030748, None, u'CallExpression', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) )'], [3030747, None, u'PrimaryExpression', u'""AST\'s must have the same sort""'], [3030772, None, u'Callee', u'Z3_is_eq_sort'], [3030749, None, u'ArgumentList', u'Z3Context :: ZC'], [3030773, None, u'Identifier', u'Z3_is_eq_sort'], [3030770, None, u'Argument', u'Z3Context :: ZC'], [3030761, None, u'Argument', u'Z3_get_sort ( Z3Context :: ZC , AST )'], [3030750, None, u'Argument', u'Z3_get_sort ( Z3Context :: ZC , Other . AST )'], [3030771, None, u'Identifier', u'Z3Context :: ZC'], [3030762, None, u'CallExpression', u'Z3_get_sort ( Z3Context :: ZC , AST )'], [3030751, None, u'CallExpression', u'Z3_get_sort ( Z3Context :: ZC , Other . AST )'], [3030768, None, u'Callee', u'Z3_get_sort'], [3030763, None, u'ArgumentList', u'Z3Context :: ZC'], [3030759, None, u'Callee', u'Z3_get_sort'], [3030752, None, u'ArgumentList', u'Z3Context :: ZC'], [3030769, None, u'Identifier', u'Z3_get_sort'], [3030766, None, u'Argument', u'Z3Context :: ZC'], [3030764, None, u'Argument', u'AST'], [3030760, None, u'Identifier', u'Z3_get_sort'], [3030757, None, u'Argument', u'Z3Context :: ZC'], [3030753, None, u'Argument', u'Other . AST'], [3030767, None, u'Identifier', u'Z3Context :: ZC'], [3030765, None, u'Identifier', u'AST'], [3030758, None, u'Identifier', u'Z3Context :: ZC'], [3030754, None, u'MemberAccess', u'Other . AST'], [3030756, None, u'Identifier', u'Other'], [3030755, None, u'Identifier', u'AST'], [3030742, u'True', u'ExpressionStatement', u'assert ( Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort"" )'], [3030776, u'True', u'CFGEntryNode', u'ENTRY']]","[[3030743, None, u'CallExpression', u'assert ( Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort"" )'], [3030774, None, u'Callee', u'assert'], [3030744, None, u'ArgumentList', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030775, None, u'Identifier', u'assert'], [3030745, None, u'Argument', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030746, None, u'AndExpression', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort""'], [3030748, None, u'CallExpression', u'Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) )'], [3030747, None, u'PrimaryExpression', u'""AST\'s must have the same sort""'], [3030772, None, u'Callee', u'Z3_is_eq_sort'], [3030749, None, u'ArgumentList', u'Z3Context :: ZC'], [3030773, None, u'Identifier', u'Z3_is_eq_sort'], [3030770, None, u'Argument', u'Z3Context :: ZC'], [3030761, None, u'Argument', u'Z3_get_sort ( Z3Context :: ZC , AST )'], [3030750, None, u'Argument', u'Z3_get_sort ( Z3Context :: ZC , Other . AST )'], [3030771, None, u'Identifier', u'Z3Context :: ZC'], [3030762, None, u'CallExpression', u'Z3_get_sort ( Z3Context :: ZC , AST )'], [3030751, None, u'CallExpression', u'Z3_get_sort ( Z3Context :: ZC , Other . AST )'], [3030768, None, u'Callee', u'Z3_get_sort'], [3030763, None, u'ArgumentList', u'Z3Context :: ZC'], [3030759, None, u'Callee', u'Z3_get_sort'], [3030752, None, u'ArgumentList', u'Z3Context :: ZC'], [3030769, None, u'Identifier', u'Z3_get_sort'], [3030766, None, u'Argument', u'Z3Context :: ZC'], [3030764, None, u'Argument', u'AST'], [3030760, None, u'Identifier', u'Z3_get_sort'], [3030757, None, u'Argument', u'Z3Context :: ZC'], [3030753, None, u'Argument', u'Other . AST'], [3030767, None, u'Identifier', u'Z3Context :: ZC'], [3030765, None, u'Identifier', u'AST'], [3030758, None, u'Identifier', u'Z3Context :: ZC'], [3030754, None, u'MemberAccess', u'Other . AST'], [3030756, None, u'Identifier', u'Other'], [3030755, None, u'Identifier', u'AST'], [3030742, u'True', u'ExpressionStatement', u'assert ( Z3_is_eq_sort ( Z3Context :: ZC , Z3_get_sort ( Z3Context :: ZC , AST ) , Z3_get_sort ( Z3Context :: ZC , Other . AST ) ) && ""AST\'s must have the same sort"" )'], [3030726, None, u'ParameterType', u'const Z3Expr &'], [3030725, None, u'Identifier', u'Other'], [3030724, u'True', u'Parameter', u'const Z3Expr & Other']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3030834, u'True', u'Parameter', u'raw_ostream & OS'], [3030834, u'True', u'Parameter', u'raw_ostream & OS']]","[[3030836, None, u'ParameterType', u'raw_ostream &'], [3030835, None, u'Identifier', u'OS'], [3030834, u'True', u'Parameter', u'raw_ostream & OS'], [3030850, u'True', u'CFGEntryNode', u'ENTRY'], [3030836, None, u'ParameterType', u'raw_ostream &'], [3030835, None, u'Identifier', u'OS'], [3030834, u'True', u'Parameter', u'raw_ostream & OS'], [3030850, u'True', u'CFGEntryNode', u'ENTRY']]","[[3030836, None, u'ParameterType', u'raw_ostream &'], [3030835, None, u'Identifier', u'OS'], [3030834, u'True', u'Parameter', u'raw_ostream & OS'], [3030836, None, u'ParameterType', u'raw_ostream &'], [3030835, None, u'Identifier', u'OS'], [3030834, u'True', u'Parameter', u'raw_ostream & OS']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]","[[3030861, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3030868, None, u'Callee', u'print'], [3030862, None, u'ArgumentList', u'llvm :: errs ( )'], [3030869, None, u'Identifier', u'print'], [3030863, None, u'Argument', u'llvm :: errs ( )'], [3030864, None, u'CallExpression', u'llvm :: errs ( )'], [3030866, None, u'Callee', u'llvm :: errs'], [3030865, None, u'ArgumentList', u''], [3030867, None, u'Identifier', u'llvm :: errs'], [3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3030870, u'True', u'CFGEntryNode', u'ENTRY'], [3030861, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3030868, None, u'Callee', u'print'], [3030862, None, u'ArgumentList', u'llvm :: errs ( )'], [3030869, None, u'Identifier', u'print'], [3030863, None, u'Argument', u'llvm :: errs ( )'], [3030864, None, u'CallExpression', u'llvm :: errs ( )'], [3030866, None, u'Callee', u'llvm :: errs'], [3030865, None, u'ArgumentList', u''], [3030867, None, u'Identifier', u'llvm :: errs'], [3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3030870, u'True', u'CFGEntryNode', u'ENTRY']]","[[3030861, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3030868, None, u'Callee', u'print'], [3030862, None, u'ArgumentList', u'llvm :: errs ( )'], [3030869, None, u'Identifier', u'print'], [3030863, None, u'Argument', u'llvm :: errs ( )'], [3030864, None, u'CallExpression', u'llvm :: errs ( )'], [3030866, None, u'Callee', u'llvm :: errs'], [3030865, None, u'ArgumentList', u''], [3030867, None, u'Identifier', u'llvm :: errs'], [3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3030861, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3030868, None, u'Callee', u'print'], [3030862, None, u'ArgumentList', u'llvm :: errs ( )'], [3030869, None, u'Identifier', u'print'], [3030863, None, u'Argument', u'llvm :: errs ( )'], [3030864, None, u'CallExpression', u'llvm :: errs ( )'], [3030866, None, u'Callee', u'llvm :: errs'], [3030865, None, u'ArgumentList', u''], [3030867, None, u'Identifier', u'llvm :: errs'], [3030860, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031161, u'True', u'Parameter', u'raw_ostream & OS'], [3031161, u'True', u'Parameter', u'raw_ostream & OS']]","[[3031163, None, u'ParameterType', u'raw_ostream &'], [3031162, None, u'Identifier', u'OS'], [3031161, u'True', u'Parameter', u'raw_ostream & OS'], [3031177, u'True', u'CFGEntryNode', u'ENTRY'], [3031163, None, u'ParameterType', u'raw_ostream &'], [3031162, None, u'Identifier', u'OS'], [3031161, u'True', u'Parameter', u'raw_ostream & OS'], [3031177, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031163, None, u'ParameterType', u'raw_ostream &'], [3031162, None, u'Identifier', u'OS'], [3031161, u'True', u'Parameter', u'raw_ostream & OS'], [3031163, None, u'ParameterType', u'raw_ostream &'], [3031162, None, u'Identifier', u'OS'], [3031161, u'True', u'Parameter', u'raw_ostream & OS']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]","[[3031188, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3031195, None, u'Callee', u'print'], [3031189, None, u'ArgumentList', u'llvm :: errs ( )'], [3031196, None, u'Identifier', u'print'], [3031190, None, u'Argument', u'llvm :: errs ( )'], [3031191, None, u'CallExpression', u'llvm :: errs ( )'], [3031193, None, u'Callee', u'llvm :: errs'], [3031192, None, u'ArgumentList', u''], [3031194, None, u'Identifier', u'llvm :: errs'], [3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3031197, u'True', u'CFGEntryNode', u'ENTRY'], [3031188, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3031195, None, u'Callee', u'print'], [3031189, None, u'ArgumentList', u'llvm :: errs ( )'], [3031196, None, u'Identifier', u'print'], [3031190, None, u'Argument', u'llvm :: errs ( )'], [3031191, None, u'CallExpression', u'llvm :: errs ( )'], [3031193, None, u'Callee', u'llvm :: errs'], [3031192, None, u'ArgumentList', u''], [3031194, None, u'Identifier', u'llvm :: errs'], [3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3031197, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031188, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3031195, None, u'Callee', u'print'], [3031189, None, u'ArgumentList', u'llvm :: errs ( )'], [3031196, None, u'Identifier', u'print'], [3031190, None, u'Argument', u'llvm :: errs ( )'], [3031191, None, u'CallExpression', u'llvm :: errs ( )'], [3031193, None, u'Callee', u'llvm :: errs'], [3031192, None, u'ArgumentList', u''], [3031194, None, u'Identifier', u'llvm :: errs'], [3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )'], [3031188, None, u'CallExpression', u'print ( llvm :: errs ( ) )'], [3031195, None, u'Callee', u'print'], [3031189, None, u'ArgumentList', u'llvm :: errs ( )'], [3031196, None, u'Identifier', u'print'], [3031190, None, u'Argument', u'llvm :: errs ( )'], [3031191, None, u'CallExpression', u'llvm :: errs ( )'], [3031193, None, u'Callee', u'llvm :: errs'], [3031192, None, u'ArgumentList', u''], [3031194, None, u'Identifier', u'llvm :: errs'], [3031187, u'True', u'ExpressionStatement', u'print ( llvm :: errs ( ) )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031273, u'True', u'ExpressionStatement', u'Z3_solver_assert ( Z3Context :: ZC , Solver , Exp . AST )']]","[[3031274, None, u'CallExpression', u'Z3_solver_assert ( Z3Context :: ZC , Solver , Exp . AST )'], [3031284, None, u'Callee', u'Z3_solver_assert'], [3031275, None, u'ArgumentList', u'Z3Context :: ZC'], [3031285, None, u'Identifier', u'Z3_solver_assert'], [3031282, None, u'Argument', u'Z3Context :: ZC'], [3031280, None, u'Argument', u'Solver'], [3031276, None, u'Argument', u'Exp . AST'], [3031283, None, u'Identifier', u'Z3Context :: ZC'], [3031281, None, u'Identifier', u'Solver'], [3031277, None, u'MemberAccess', u'Exp . AST'], [3031279, None, u'Identifier', u'Exp'], [3031278, None, u'Identifier', u'AST'], [3031273, u'True', u'ExpressionStatement', u'Z3_solver_assert ( Z3Context :: ZC , Solver , Exp . AST )'], [3031286, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031274, None, u'CallExpression', u'Z3_solver_assert ( Z3Context :: ZC , Solver , Exp . AST )'], [3031284, None, u'Callee', u'Z3_solver_assert'], [3031275, None, u'ArgumentList', u'Z3Context :: ZC'], [3031285, None, u'Identifier', u'Z3_solver_assert'], [3031282, None, u'Argument', u'Z3Context :: ZC'], [3031280, None, u'Argument', u'Solver'], [3031276, None, u'Argument', u'Exp . AST'], [3031283, None, u'Identifier', u'Z3Context :: ZC'], [3031281, None, u'Identifier', u'Solver'], [3031277, None, u'MemberAccess', u'Exp . AST'], [3031279, None, u'Identifier', u'Exp'], [3031278, None, u'Identifier', u'AST'], [3031273, u'True', u'ExpressionStatement', u'Z3_solver_assert ( Z3Context :: ZC , Solver , Exp . AST )'], [3031270, None, u'ParameterType', u'const Z3Expr &'], [3031269, None, u'Identifier', u'Exp'], [3031268, u'True', u'Parameter', u'const Z3Expr & Exp']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031488, u'True', u'Parameter', u'Z3_context Context'], [3031488, u'True', u'Parameter', u'Z3_context Context'], [3031485, u'True', u'Parameter', u'Z3_error_code Error']]","[[3031490, None, u'ParameterType', u'Z3_context'], [3031489, None, u'Identifier', u'Context'], [3031488, u'True', u'Parameter', u'Z3_context Context'], [3031514, u'True', u'CFGEntryNode', u'ENTRY'], [3031490, None, u'ParameterType', u'Z3_context'], [3031489, None, u'Identifier', u'Context'], [3031488, u'True', u'Parameter', u'Z3_context Context'], [3031514, u'True', u'CFGEntryNode', u'ENTRY'], [3031487, None, u'ParameterType', u'Z3_error_code'], [3031486, None, u'Identifier', u'Error'], [3031485, u'True', u'Parameter', u'Z3_error_code Error'], [3031514, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031490, None, u'ParameterType', u'Z3_context'], [3031489, None, u'Identifier', u'Context'], [3031488, u'True', u'Parameter', u'Z3_context Context'], [3031490, None, u'ParameterType', u'Z3_context'], [3031489, None, u'Identifier', u'Context'], [3031488, u'True', u'Parameter', u'Z3_context Context'], [3031487, None, u'ParameterType', u'Z3_error_code'], [3031486, None, u'Identifier', u'Error'], [3031485, u'True', u'Parameter', u'Z3_error_code Error']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031493, u'True', u'ExpressionStatement', u'llvm :: report_fatal_error ( ""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) ) )']]","[[3031494, None, u'CallExpression', u'llvm :: report_fatal_error ( ""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) ) )'], [3031512, None, u'Callee', u'llvm :: report_fatal_error'], [3031495, None, u'ArgumentList', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031513, None, u'Identifier', u'llvm :: report_fatal_error'], [3031496, None, u'Argument', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031497, None, u'AdditiveExpression', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031511, None, u'PrimaryExpression', u'""Z3 error: ""'], [3031498, None, u'CallExpression', u'llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031509, None, u'Callee', u'llvm :: Twine'], [3031499, None, u'ArgumentList', u'Z3_get_error_msg_ex ( Context , Error )'], [3031510, None, u'Identifier', u'llvm :: Twine'], [3031500, None, u'Argument', u'Z3_get_error_msg_ex ( Context , Error )'], [3031501, None, u'CallExpression', u'Z3_get_error_msg_ex ( Context , Error )'], [3031507, None, u'Callee', u'Z3_get_error_msg_ex'], [3031502, None, u'ArgumentList', u'Context'], [3031508, None, u'Identifier', u'Z3_get_error_msg_ex'], [3031505, None, u'Argument', u'Context'], [3031503, None, u'Argument', u'Error'], [3031506, None, u'Identifier', u'Context'], [3031504, None, u'Identifier', u'Error'], [3031493, u'True', u'ExpressionStatement', u'llvm :: report_fatal_error ( ""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) ) )'], [3031514, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031494, None, u'CallExpression', u'llvm :: report_fatal_error ( ""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) ) )'], [3031512, None, u'Callee', u'llvm :: report_fatal_error'], [3031495, None, u'ArgumentList', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031513, None, u'Identifier', u'llvm :: report_fatal_error'], [3031496, None, u'Argument', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031497, None, u'AdditiveExpression', u'""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031511, None, u'PrimaryExpression', u'""Z3 error: ""'], [3031498, None, u'CallExpression', u'llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) )'], [3031509, None, u'Callee', u'llvm :: Twine'], [3031499, None, u'ArgumentList', u'Z3_get_error_msg_ex ( Context , Error )'], [3031510, None, u'Identifier', u'llvm :: Twine'], [3031500, None, u'Argument', u'Z3_get_error_msg_ex ( Context , Error )'], [3031501, None, u'CallExpression', u'Z3_get_error_msg_ex ( Context , Error )'], [3031507, None, u'Callee', u'Z3_get_error_msg_ex'], [3031502, None, u'ArgumentList', u'Context'], [3031508, None, u'Identifier', u'Z3_get_error_msg_ex'], [3031505, None, u'Argument', u'Context'], [3031503, None, u'Argument', u'Error'], [3031506, None, u'Identifier', u'Context'], [3031504, None, u'Identifier', u'Error'], [3031493, u'True', u'ExpressionStatement', u'llvm :: report_fatal_error ( ""Z3 error: "" + llvm :: Twine ( Z3_get_error_msg_ex ( Context , Error ) ) )'], [3031487, None, u'ParameterType', u'Z3_error_code'], [3031486, None, u'Identifier', u'Error'], [3031485, u'True', u'Parameter', u'Z3_error_code Error'], [3031490, None, u'ParameterType', u'Z3_context'], [3031489, None, u'Identifier', u'Context'], [3031488, u'True', u'Parameter', u'Z3_context Context']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031535, u'True', u'ExpressionStatement', u'Z3_set_error_handler ( Z3Context :: ZC , Z3ErrorHandler )']]","[[3031536, None, u'CallExpression', u'Z3_set_error_handler ( Z3Context :: ZC , Z3ErrorHandler )'], [3031542, None, u'Callee', u'Z3_set_error_handler'], [3031537, None, u'ArgumentList', u'Z3Context :: ZC'], [3031543, None, u'Identifier', u'Z3_set_error_handler'], [3031540, None, u'Argument', u'Z3Context :: ZC'], [3031538, None, u'Argument', u'Z3ErrorHandler'], [3031541, None, u'Identifier', u'Z3Context :: ZC'], [3031539, None, u'Identifier', u'Z3ErrorHandler'], [3031535, u'True', u'ExpressionStatement', u'Z3_set_error_handler ( Z3Context :: ZC , Z3ErrorHandler )'], [3031544, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031536, None, u'CallExpression', u'Z3_set_error_handler ( Z3Context :: ZC , Z3ErrorHandler )'], [3031542, None, u'Callee', u'Z3_set_error_handler'], [3031537, None, u'ArgumentList', u'Z3Context :: ZC'], [3031543, None, u'Identifier', u'Z3_set_error_handler'], [3031540, None, u'Argument', u'Z3Context :: ZC'], [3031538, None, u'Argument', u'Z3ErrorHandler'], [3031541, None, u'Identifier', u'Z3Context :: ZC'], [3031539, None, u'Identifier', u'Z3ErrorHandler'], [3031535, u'True', u'ExpressionStatement', u'Z3_set_error_handler ( Z3Context :: ZC , Z3ErrorHandler )']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3031851, u'True', u'ExpressionStatement', u'assert ( ( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!"" )']]","[[3031852, None, u'CallExpression', u'assert ( ( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!"" )'], [3031870, None, u'Callee', u'assert'], [3031853, None, u'ArgumentList', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031871, None, u'Identifier', u'assert'], [3031854, None, u'Argument', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031855, None, u'AndExpression', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031857, None, u'EqualityExpression', u'getAPSIntType ( From ) == getAPSIntType ( To )'], [3031856, None, u'PrimaryExpression', u'""Range values have different types!""'], [3031864, None, u'CallExpression', u'getAPSIntType ( From )'], [3031858, None, u'CallExpression', u'getAPSIntType ( To )'], [3031868, None, u'Callee', u'getAPSIntType'], [3031865, None, u'ArgumentList', u'From'], [3031862, None, u'Callee', u'getAPSIntType'], [3031859, None, u'ArgumentList', u'To'], [3031869, None, u'Identifier', u'getAPSIntType'], [3031866, None, u'Argument', u'From'], [3031863, None, u'Identifier', u'getAPSIntType'], [3031860, None, u'Argument', u'To'], [3031867, None, u'Identifier', u'From'], [3031861, None, u'Identifier', u'To'], [3031851, u'True', u'ExpressionStatement', u'assert ( ( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!"" )'], [3031892, u'True', u'CFGEntryNode', u'ENTRY']]","[[3031852, None, u'CallExpression', u'assert ( ( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!"" )'], [3031870, None, u'Callee', u'assert'], [3031853, None, u'ArgumentList', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031871, None, u'Identifier', u'assert'], [3031854, None, u'Argument', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031855, None, u'AndExpression', u'( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!""'], [3031857, None, u'EqualityExpression', u'getAPSIntType ( From ) == getAPSIntType ( To )'], [3031856, None, u'PrimaryExpression', u'""Range values have different types!""'], [3031864, None, u'CallExpression', u'getAPSIntType ( From )'], [3031858, None, u'CallExpression', u'getAPSIntType ( To )'], [3031868, None, u'Callee', u'getAPSIntType'], [3031865, None, u'ArgumentList', u'From'], [3031862, None, u'Callee', u'getAPSIntType'], [3031859, None, u'ArgumentList', u'To'], [3031869, None, u'Identifier', u'getAPSIntType'], [3031866, None, u'Argument', u'From'], [3031863, None, u'Identifier', u'getAPSIntType'], [3031860, None, u'Argument', u'To'], [3031867, None, u'Identifier', u'From'], [3031861, None, u'Identifier', u'To'], [3031851, u'True', u'ExpressionStatement', u'assert ( ( getAPSIntType ( From ) == getAPSIntType ( To ) ) && ""Range values have different types!"" )'], [3031678, None, u'ParameterType', u'const llvm :: APSInt &'], [3031677, None, u'Identifier', u'To'], [3031676, u'True', u'Parameter', u'const llvm :: APSInt & To'], [3031681, None, u'ParameterType', u'const llvm :: APSInt &'], [3031680, None, u'Identifier', u'From'], [3031679, u'True', u'Parameter', u'const llvm :: APSInt & From']]"
"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"[[3035780, u'True', u'Parameter', u'ProgramStateRef St'], [3035777, u'True', u'Parameter', u'raw_ostream & OS'], [3035780, u'True', u'Parameter', u'ProgramStateRef St']]","[[3035782, None, u'ParameterType', u'ProgramStateRef'], [3035781, None, u'Identifier', u'St'], [3035780, u'True', u'Parameter', u'ProgramStateRef St'], [3035865, u'True', u'CFGEntryNode', u'ENTRY'], [3035779, None, u'ParameterType', u'raw_ostream &'], [3035778, None, u'Identifier', u'OS'], [3035777, u'True', u'Parameter', u'raw_ostream & OS'], [3035865, u'True', u'CFGEntryNode', u'ENTRY'], [3035782, None, u'ParameterType', u'ProgramStateRef'], [3035781, None, u'Identifier', u'St'], [3035780, u'True', u'Parameter', u'ProgramStateRef St'], [3035865, u'True', u'CFGEntryNode', u'ENTRY']]","[[3035782, None, u'ParameterType', u'ProgramStateRef'], [3035781, None, u'Identifier', u'St'], [3035780, u'True', u'Parameter', u'ProgramStateRef St'], [3035779, None, u'ParameterType', u'raw_ostream &'], [3035778, None, u'Identifier', u'OS'], [3035777, u'True', u'Parameter', u'raw_ostream & OS'], [3035782, None, u'ParameterType', u'ProgramStateRef'], [3035781, None, u'Identifier', u'St'], [3035780, u'True', u'Parameter', u'ProgramStateRef St']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )']]","[[3056860, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056868, None, u'Callee', u'assert'], [3056861, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056869, None, u'Identifier', u'assert'], [3056862, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056863, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056865, None, u'PtrMemberAccess', u'this -> IsValid'], [3056864, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056867, None, u'Identifier', u'this'], [3056866, None, u'Identifier', u'IsValid'], [3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056870, u'True', u'CFGEntryNode', u'ENTRY'], [3056860, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056868, None, u'Callee', u'assert'], [3056861, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056869, None, u'Identifier', u'assert'], [3056862, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056863, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056865, None, u'PtrMemberAccess', u'this -> IsValid'], [3056864, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056867, None, u'Identifier', u'this'], [3056866, None, u'Identifier', u'IsValid'], [3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056870, u'True', u'CFGEntryNode', u'ENTRY']]","[[3056860, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056868, None, u'Callee', u'assert'], [3056861, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056869, None, u'Identifier', u'assert'], [3056862, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056863, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056865, None, u'PtrMemberAccess', u'this -> IsValid'], [3056864, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056867, None, u'Identifier', u'this'], [3056866, None, u'Identifier', u'IsValid'], [3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056860, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056868, None, u'Callee', u'assert'], [3056861, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056869, None, u'Identifier', u'assert'], [3056862, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056863, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056865, None, u'PtrMemberAccess', u'this -> IsValid'], [3056864, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056867, None, u'Identifier', u'this'], [3056866, None, u'Identifier', u'IsValid'], [3056859, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )']]","[[3056925, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056933, None, u'Callee', u'assert'], [3056926, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056934, None, u'Identifier', u'assert'], [3056927, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056928, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056930, None, u'PtrMemberAccess', u'this -> IsValid'], [3056929, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056932, None, u'Identifier', u'this'], [3056931, None, u'Identifier', u'IsValid'], [3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056935, u'True', u'CFGEntryNode', u'ENTRY'], [3056925, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056933, None, u'Callee', u'assert'], [3056926, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056934, None, u'Identifier', u'assert'], [3056927, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056928, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056930, None, u'PtrMemberAccess', u'this -> IsValid'], [3056929, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056932, None, u'Identifier', u'this'], [3056931, None, u'Identifier', u'IsValid'], [3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056935, u'True', u'CFGEntryNode', u'ENTRY']]","[[3056925, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056933, None, u'Callee', u'assert'], [3056926, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056934, None, u'Identifier', u'assert'], [3056927, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056928, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056930, None, u'PtrMemberAccess', u'this -> IsValid'], [3056929, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056932, None, u'Identifier', u'this'], [3056931, None, u'Identifier', u'IsValid'], [3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056925, None, u'CallExpression', u'assert ( this -> IsValid && ""coroutine already invalid"" )'], [3056933, None, u'Callee', u'assert'], [3056926, None, u'ArgumentList', u'this -> IsValid && ""coroutine already invalid""'], [3056934, None, u'Identifier', u'assert'], [3056927, None, u'Argument', u'this -> IsValid && ""coroutine already invalid""'], [3056928, None, u'AndExpression', u'this -> IsValid && ""coroutine already invalid""'], [3056930, None, u'PtrMemberAccess', u'this -> IsValid'], [3056929, None, u'PrimaryExpression', u'""coroutine already invalid""'], [3056932, None, u'Identifier', u'this'], [3056931, None, u'Identifier', u'IsValid'], [3056924, u'True', u'ExpressionStatement', u'assert ( this -> IsValid && ""coroutine already invalid"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3056911, u'True', u'ExpressionStatement', u'assert ( ! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type"" )']]","[[3056912, None, u'CallExpression', u'assert ( ! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type"" )'], [3056922, None, u'Callee', u'assert'], [3056913, None, u'ArgumentList', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056923, None, u'Identifier', u'assert'], [3056914, None, u'Argument', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056915, None, u'AndExpression', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056917, None, u'UnaryOp', u'! this -> IsPromiseDependentType'], [3056916, None, u'PrimaryExpression', u'""coroutine cannot have a dependent promise type""'], [3056921, None, u'UnaryOperator', u'!'], [3056918, None, u'PtrMemberAccess', u'this -> IsPromiseDependentType'], [3056920, None, u'Identifier', u'this'], [3056919, None, u'Identifier', u'IsPromiseDependentType'], [3056911, u'True', u'ExpressionStatement', u'assert ( ! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type"" )'], [3056935, u'True', u'CFGEntryNode', u'ENTRY']]","[[3056912, None, u'CallExpression', u'assert ( ! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type"" )'], [3056922, None, u'Callee', u'assert'], [3056913, None, u'ArgumentList', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056923, None, u'Identifier', u'assert'], [3056914, None, u'Argument', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056915, None, u'AndExpression', u'! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type""'], [3056917, None, u'UnaryOp', u'! this -> IsPromiseDependentType'], [3056916, None, u'PrimaryExpression', u'""coroutine cannot have a dependent promise type""'], [3056921, None, u'UnaryOperator', u'!'], [3056918, None, u'PtrMemberAccess', u'this -> IsPromiseDependentType'], [3056920, None, u'Identifier', u'this'], [3056919, None, u'Identifier', u'IsPromiseDependentType'], [3056911, u'True', u'ExpressionStatement', u'assert ( ! this -> IsPromiseDependentType && ""coroutine cannot have a dependent promise type"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]","[[3057402, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057410, None, u'Callee', u'assert'], [3057403, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057411, None, u'Identifier', u'assert'], [3057404, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057405, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057407, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057406, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057409, None, u'UnaryOperator', u'!'], [3057408, None, u'Identifier', u'IsPromiseDependentType'], [3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057412, u'True', u'CFGEntryNode', u'ENTRY'], [3057402, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057410, None, u'Callee', u'assert'], [3057403, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057411, None, u'Identifier', u'assert'], [3057404, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057405, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057407, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057406, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057409, None, u'UnaryOperator', u'!'], [3057408, None, u'Identifier', u'IsPromiseDependentType'], [3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057412, u'True', u'CFGEntryNode', u'ENTRY']]","[[3057402, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057410, None, u'Callee', u'assert'], [3057403, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057411, None, u'Identifier', u'assert'], [3057404, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057405, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057407, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057406, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057409, None, u'UnaryOperator', u'!'], [3057408, None, u'Identifier', u'IsPromiseDependentType'], [3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057402, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057410, None, u'Callee', u'assert'], [3057403, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057411, None, u'Identifier', u'assert'], [3057404, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057405, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057407, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057406, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057409, None, u'UnaryOperator', u'!'], [3057408, None, u'Identifier', u'IsPromiseDependentType'], [3057401, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]","[[3057843, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057851, None, u'Callee', u'assert'], [3057844, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057852, None, u'Identifier', u'assert'], [3057845, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057846, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057848, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057847, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057850, None, u'UnaryOperator', u'!'], [3057849, None, u'Identifier', u'IsPromiseDependentType'], [3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057853, u'True', u'CFGEntryNode', u'ENTRY'], [3057843, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057851, None, u'Callee', u'assert'], [3057844, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057852, None, u'Identifier', u'assert'], [3057845, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057846, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057848, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057847, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057850, None, u'UnaryOperator', u'!'], [3057849, None, u'Identifier', u'IsPromiseDependentType'], [3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057853, u'True', u'CFGEntryNode', u'ENTRY']]","[[3057843, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057851, None, u'Callee', u'assert'], [3057844, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057852, None, u'Identifier', u'assert'], [3057845, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057846, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057848, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057847, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057850, None, u'UnaryOperator', u'!'], [3057849, None, u'Identifier', u'IsPromiseDependentType'], [3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057843, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3057851, None, u'Callee', u'assert'], [3057844, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057852, None, u'Identifier', u'assert'], [3057845, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057846, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3057848, None, u'UnaryOp', u'! IsPromiseDependentType'], [3057847, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3057850, None, u'UnaryOperator', u'!'], [3057849, None, u'Identifier', u'IsPromiseDependentType'], [3057842, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]","[[3058042, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058050, None, u'Callee', u'assert'], [3058043, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058051, None, u'Identifier', u'assert'], [3058044, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058045, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058047, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058046, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058049, None, u'UnaryOperator', u'!'], [3058048, None, u'Identifier', u'IsPromiseDependentType'], [3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058052, u'True', u'CFGEntryNode', u'ENTRY'], [3058042, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058050, None, u'Callee', u'assert'], [3058043, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058051, None, u'Identifier', u'assert'], [3058044, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058045, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058047, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058046, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058049, None, u'UnaryOperator', u'!'], [3058048, None, u'Identifier', u'IsPromiseDependentType'], [3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058052, u'True', u'CFGEntryNode', u'ENTRY']]","[[3058042, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058050, None, u'Callee', u'assert'], [3058043, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058051, None, u'Identifier', u'assert'], [3058044, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058045, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058047, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058046, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058049, None, u'UnaryOperator', u'!'], [3058048, None, u'Identifier', u'IsPromiseDependentType'], [3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058042, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058050, None, u'Callee', u'assert'], [3058043, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058051, None, u'Identifier', u'assert'], [3058044, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058045, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058047, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058046, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058049, None, u'UnaryOperator', u'!'], [3058048, None, u'Identifier', u'IsPromiseDependentType'], [3058041, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]"
"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]","[[3058215, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058223, None, u'Callee', u'assert'], [3058216, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058224, None, u'Identifier', u'assert'], [3058217, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058218, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058220, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058219, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058222, None, u'UnaryOperator', u'!'], [3058221, None, u'Identifier', u'IsPromiseDependentType'], [3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058225, u'True', u'CFGEntryNode', u'ENTRY'], [3058215, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058223, None, u'Callee', u'assert'], [3058216, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058224, None, u'Identifier', u'assert'], [3058217, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058218, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058220, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058219, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058222, None, u'UnaryOperator', u'!'], [3058221, None, u'Identifier', u'IsPromiseDependentType'], [3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058225, u'True', u'CFGEntryNode', u'ENTRY']]","[[3058215, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058223, None, u'Callee', u'assert'], [3058216, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058224, None, u'Identifier', u'assert'], [3058217, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058218, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058220, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058219, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058222, None, u'UnaryOperator', u'!'], [3058221, None, u'Identifier', u'IsPromiseDependentType'], [3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058215, None, u'CallExpression', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )'], [3058223, None, u'Callee', u'assert'], [3058216, None, u'ArgumentList', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058224, None, u'Identifier', u'assert'], [3058217, None, u'Argument', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058218, None, u'AndExpression', u'! IsPromiseDependentType && ""cannot make statement while the promise type is dependent""'], [3058220, None, u'UnaryOp', u'! IsPromiseDependentType'], [3058219, None, u'PrimaryExpression', u'""cannot make statement while the promise type is dependent""'], [3058222, None, u'UnaryOperator', u'!'], [3058221, None, u'Identifier', u'IsPromiseDependentType'], [3058214, u'True', u'ExpressionStatement', u'assert ( ! IsPromiseDependentType && ""cannot make statement while the promise type is dependent"" )']]"
"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[204524, u'True', u'Parameter', u'Sema & SemaRef'], [204524, u'True', u'Parameter', u'Sema & SemaRef']]","[[204526, None, u'ParameterType', u'Sema &'], [204525, None, u'Identifier', u'SemaRef'], [204524, u'True', u'Parameter', u'Sema & SemaRef'], [204635, u'True', u'CFGEntryNode', u'ENTRY'], [204526, None, u'ParameterType', u'Sema &'], [204525, None, u'Identifier', u'SemaRef'], [204524, u'True', u'Parameter', u'Sema & SemaRef'], [204635, u'True', u'CFGEntryNode', u'ENTRY']]","[[204526, None, u'ParameterType', u'Sema &'], [204525, None, u'Identifier', u'SemaRef'], [204524, u'True', u'Parameter', u'Sema & SemaRef'], [204526, None, u'ParameterType', u'Sema &'], [204525, None, u'Identifier', u'SemaRef'], [204524, u'True', u'Parameter', u'Sema & SemaRef']]"
"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"[[257580, u'True', u'ExpressionStatement', u'assert ( CodeModel != ~0u && ""invalid code model!"" )']]","[[257581, None, u'CallExpression', u'assert ( CodeModel != ~0u && ""invalid code model!"" )'], [257589, None, u'Callee', u'assert'], [257582, None, u'ArgumentList', u'CodeModel != ~0u && ""invalid code model!""'], [257590, None, u'Identifier', u'assert'], [257583, None, u'Argument', u'CodeModel != ~0u && ""invalid code model!""'], [257584, None, u'AndExpression', u'CodeModel != ~0u && ""invalid code model!""'], [257586, None, u'EqualityExpression', u'CodeModel != ~0u'], [257585, None, u'PrimaryExpression', u'""invalid code model!""'], [257588, None, u'Identifier', u'CodeModel'], [257587, None, u'Identifier', u'~0u'], [257580, u'True', u'ExpressionStatement', u'assert ( CodeModel != ~0u && ""invalid code model!"" )'], [257656, u'True', u'CFGEntryNode', u'ENTRY']]","[[257581, None, u'CallExpression', u'assert ( CodeModel != ~0u && ""invalid code model!"" )'], [257589, None, u'Callee', u'assert'], [257582, None, u'ArgumentList', u'CodeModel != ~0u && ""invalid code model!""'], [257590, None, u'Identifier', u'assert'], [257583, None, u'Argument', u'CodeModel != ~0u && ""invalid code model!""'], [257584, None, u'AndExpression', u'CodeModel != ~0u && ""invalid code model!""'], [257586, None, u'EqualityExpression', u'CodeModel != ~0u'], [257585, None, u'PrimaryExpression', u'""invalid code model!""'], [257588, None, u'Identifier', u'CodeModel'], [257587, None, u'Identifier', u'~0u'], [257580, u'True', u'ExpressionStatement', u'assert ( CodeModel != ~0u && ""invalid code model!"" )']]"
"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"[[257686, u'True', u'ExpressionStatement', u'assert ( RM . hasValue ( ) && ""invalid PIC model!"" )']]","[[257687, None, u'CallExpression', u'assert ( RM . hasValue ( ) && ""invalid PIC model!"" )'], [257698, None, u'Callee', u'assert'], [257688, None, u'ArgumentList', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257699, None, u'Identifier', u'assert'], [257689, None, u'Argument', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257690, None, u'AndExpression', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257692, None, u'CallExpression', u'RM . hasValue ( )'], [257691, None, u'PrimaryExpression', u'""invalid PIC model!""'], [257694, None, u'Callee', u'RM . hasValue'], [257693, None, u'ArgumentList', u''], [257695, None, u'MemberAccess', u'RM . hasValue'], [257697, None, u'Identifier', u'RM'], [257696, None, u'Identifier', u'hasValue'], [257686, u'True', u'ExpressionStatement', u'assert ( RM . hasValue ( ) && ""invalid PIC model!"" )'], [257768, u'True', u'CFGEntryNode', u'ENTRY']]","[[257687, None, u'CallExpression', u'assert ( RM . hasValue ( ) && ""invalid PIC model!"" )'], [257698, None, u'Callee', u'assert'], [257688, None, u'ArgumentList', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257699, None, u'Identifier', u'assert'], [257689, None, u'Argument', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257690, None, u'AndExpression', u'RM . hasValue ( ) && ""invalid PIC model!""'], [257692, None, u'CallExpression', u'RM . hasValue ( )'], [257691, None, u'PrimaryExpression', u'""invalid PIC model!""'], [257694, None, u'Callee', u'RM . hasValue'], [257693, None, u'ArgumentList', u''], [257695, None, u'MemberAccess', u'RM . hasValue'], [257697, None, u'Identifier', u'RM'], [257696, None, u'Identifier', u'hasValue'], [257686, u'True', u'ExpressionStatement', u'assert ( RM . hasValue ( ) && ""invalid PIC model!"" )'], [257701, None, u'AssignmentExpr', u'RM = llvm :: StringSwitch < llvm :: Reloc :: Model > ( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case ( ""dynamic-no-pic"" , llvm :: Reloc :: DynamicNoPIC )'], [257763, None, u'Identifier', u'RM'], [257702, None, u'RelationalExpression', u'llvm :: StringSwitch < llvm :: Reloc :: Model > ( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case ( ""dynamic-no-pic"" , llvm :: Reloc :: DynamicNoPIC )'], [257762, None, u'Identifier', u'llvm :: StringSwitch'], [257703, None, u'RelationalExpression', u'llvm :: Reloc :: Model > ( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case ( ""dynamic-no-pic"" , llvm :: Reloc :: DynamicNoPIC )'], [257761, None, u'Identifier', u'llvm :: Reloc :: Model'], [257704, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case ( ""dynamic-no-pic"" , llvm :: Reloc :: DynamicNoPIC )'], [257710, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case'], [257705, None, u'ArgumentList', u'""dynamic-no-pic""'], [257711, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case'], [257708, None, u'Argument', u'""dynamic-no-pic""'], [257706, None, u'Argument', u'llvm :: Reloc :: DynamicNoPIC'], [257713, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI )'], [257712, None, u'Identifier', u'Case'], [257709, None, u'PrimaryExpression', u'""dynamic-no-pic""'], [257707, None, u'Identifier', u'llvm :: Reloc :: DynamicNoPIC'], [257719, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case'], [257714, None, u'ArgumentList', u'""ropi-rwpi""'], [257720, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case'], [257717, None, u'Argument', u'""ropi-rwpi""'], [257715, None, u'Argument', u'llvm :: Reloc :: ROPI_RWPI'], [257722, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI )'], [257721, None, u'Identifier', u'Case'], [257718, None, u'PrimaryExpression', u'""ropi-rwpi""'], [257716, None, u'Identifier', u'llvm :: Reloc :: ROPI_RWPI'], [257728, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case'], [257723, None, u'ArgumentList', u'""rwpi""'], [257729, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case'], [257726, None, u'Argument', u'""rwpi""'], [257724, None, u'Argument', u'llvm :: Reloc :: RWPI'], [257731, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI )'], [257730, None, u'Identifier', u'Case'], [257727, None, u'PrimaryExpression', u'""rwpi""'], [257725, None, u'Identifier', u'llvm :: Reloc :: RWPI'], [257737, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case'], [257732, None, u'ArgumentList', u'""ropi""'], [257738, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case'], [257735, None, u'Argument', u'""ropi""'], [257733, None, u'Argument', u'llvm :: Reloc :: ROPI'], [257740, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ )'], [257739, None, u'Identifier', u'Case'], [257736, None, u'PrimaryExpression', u'""ropi""'], [257734, None, u'Identifier', u'llvm :: Reloc :: ROPI'], [257746, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case'], [257741, None, u'ArgumentList', u'""pic""'], [257747, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case'], [257744, None, u'Argument', u'""pic""'], [257742, None, u'Argument', u'llvm :: Reloc :: PIC_'], [257749, None, u'CallExpression', u'( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static )'], [257748, None, u'Identifier', u'Case'], [257745, None, u'PrimaryExpression', u'""pic""'], [257743, None, u'Identifier', u'llvm :: Reloc :: PIC_'], [257755, None, u'Callee', u'( CodeGenOpts . RelocationModel ) . Case'], [257750, None, u'ArgumentList', u'""static""'], [257756, None, u'MemberAccess', u'( CodeGenOpts . RelocationModel ) . Case'], [257753, None, u'Argument', u'""static""'], [257751, None, u'Argument', u'llvm :: Reloc :: Static'], [257758, None, u'MemberAccess', u'CodeGenOpts . RelocationModel'], [257757, None, u'Identifier', u'Case'], [257754, None, u'PrimaryExpression', u'""static""'], [257752, None, u'Identifier', u'llvm :: Reloc :: Static'], [257760, None, u'Identifier', u'CodeGenOpts'], [257759, None, u'Identifier', u'RelocationModel'], [257700, u'True', u'ExpressionStatement', u'RM = llvm :: StringSwitch < llvm :: Reloc :: Model > ( CodeGenOpts . RelocationModel ) . Case ( ""static"" , llvm :: Reloc :: Static ) . Case ( ""pic"" , llvm :: Reloc :: PIC_ ) . Case ( ""ropi"" , llvm :: Reloc :: ROPI ) . Case ( ""rwpi"" , llvm :: Reloc :: RWPI ) . Case ( ""ropi-rwpi"" , llvm :: Reloc :: ROPI_RWPI ) . Case ( ""dynamic-no-pic"" , llvm :: Reloc :: DynamicNoPIC )'], [257679, None, u'ParameterType', u'const CodeGenOptions &'], [257678, None, u'Identifier', u'CodeGenOpts'], [257677, u'True', u'Parameter', u'const CodeGenOptions & CodeGenOpts']]"
"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"[[258275, u'True', u'ExpressionStatement', u'assert ( ( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!"" )']]","[[258276, None, u'CallExpression', u'assert ( ( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!"" )'], [258307, None, u'Callee', u'assert'], [258277, None, u'ArgumentList', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258308, None, u'Identifier', u'assert'], [258278, None, u'Argument', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258279, None, u'AndExpression', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258281, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258280, None, u'PrimaryExpression', u'""Invalid Floating Point ABI!""'], [258302, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""soft""'], [258282, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258304, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258303, None, u'PrimaryExpression', u'""soft""'], [258297, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""softfp""'], [258283, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258306, None, u'Identifier', u'CodeGenOpts'], [258305, None, u'Identifier', u'FloatABI'], [258299, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258298, None, u'PrimaryExpression', u'""softfp""'], [258292, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""hard""'], [258284, None, u'CallExpression', u'CodeGenOpts . FloatABI . empty ( )'], [258301, None, u'Identifier', u'CodeGenOpts'], [258300, None, u'Identifier', u'FloatABI'], [258294, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258293, None, u'PrimaryExpression', u'""hard""'], [258286, None, u'Callee', u'CodeGenOpts . FloatABI . empty'], [258285, None, u'ArgumentList', u''], [258296, None, u'Identifier', u'CodeGenOpts'], [258295, None, u'Identifier', u'FloatABI'], [258287, None, u'MemberAccess', u'CodeGenOpts . FloatABI . empty'], [258289, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258288, None, u'Identifier', u'empty'], [258291, None, u'Identifier', u'CodeGenOpts'], [258290, None, u'Identifier', u'FloatABI'], [258275, u'True', u'ExpressionStatement', u'assert ( ( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!"" )'], [258339, u'True', u'CFGEntryNode', u'ENTRY']]","[[258276, None, u'CallExpression', u'assert ( ( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!"" )'], [258307, None, u'Callee', u'assert'], [258277, None, u'ArgumentList', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258308, None, u'Identifier', u'assert'], [258278, None, u'Argument', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258279, None, u'AndExpression', u'( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!""'], [258281, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258280, None, u'PrimaryExpression', u'""Invalid Floating Point ABI!""'], [258302, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""soft""'], [258282, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258304, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258303, None, u'PrimaryExpression', u'""soft""'], [258297, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""softfp""'], [258283, None, u'OrExpression', u'CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( )'], [258306, None, u'Identifier', u'CodeGenOpts'], [258305, None, u'Identifier', u'FloatABI'], [258299, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258298, None, u'PrimaryExpression', u'""softfp""'], [258292, None, u'EqualityExpression', u'CodeGenOpts . FloatABI == ""hard""'], [258284, None, u'CallExpression', u'CodeGenOpts . FloatABI . empty ( )'], [258301, None, u'Identifier', u'CodeGenOpts'], [258300, None, u'Identifier', u'FloatABI'], [258294, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258293, None, u'PrimaryExpression', u'""hard""'], [258286, None, u'Callee', u'CodeGenOpts . FloatABI . empty'], [258285, None, u'ArgumentList', u''], [258296, None, u'Identifier', u'CodeGenOpts'], [258295, None, u'Identifier', u'FloatABI'], [258287, None, u'MemberAccess', u'CodeGenOpts . FloatABI . empty'], [258289, None, u'MemberAccess', u'CodeGenOpts . FloatABI'], [258288, None, u'Identifier', u'empty'], [258291, None, u'Identifier', u'CodeGenOpts'], [258290, None, u'Identifier', u'FloatABI'], [258275, u'True', u'ExpressionStatement', u'assert ( ( CodeGenOpts . FloatABI == ""soft"" || CodeGenOpts . FloatABI == ""softfp"" || CodeGenOpts . FloatABI == ""hard"" || CodeGenOpts . FloatABI . empty ( ) ) && ""Invalid Floating Point ABI!"" )'], [257850, None, u'ParameterType', u'const CodeGenOptions &'], [257849, None, u'Identifier', u'CodeGenOpts'], [257848, u'True', u'Parameter', u'const CodeGenOptions & CodeGenOpts']]"
"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"[[258021, u'True', u'ExpressionStatement', u'Options . DebuggerTuning = CodeGenOpts . getDebuggerTuning ( )']]","[[258022, None, u'AssignmentExpr', u'Options . DebuggerTuning = CodeGenOpts . getDebuggerTuning ( )'], [258029, None, u'MemberAccess', u'Options . DebuggerTuning'], [258023, None, u'CallExpression', u'CodeGenOpts . getDebuggerTuning ( )'], [258031, None, u'Identifier', u'Options'], [258030, None, u'Identifier', u'DebuggerTuning'], [258025, None, u'Callee', u'CodeGenOpts . getDebuggerTuning'], [258024, None, u'ArgumentList', u''], [258026, None, u'MemberAccess', u'CodeGenOpts . getDebuggerTuning'], [258028, None, u'Identifier', u'CodeGenOpts'], [258027, None, u'Identifier', u'getDebuggerTuning'], [258021, u'True', u'ExpressionStatement', u'Options . DebuggerTuning = CodeGenOpts . getDebuggerTuning ( )'], [258339, u'True', u'CFGEntryNode', u'ENTRY']]","[[258022, None, u'AssignmentExpr', u'Options . DebuggerTuning = CodeGenOpts . getDebuggerTuning ( )'], [258029, None, u'MemberAccess', u'Options . DebuggerTuning'], [258023, None, u'CallExpression', u'CodeGenOpts . getDebuggerTuning ( )'], [258031, None, u'Identifier', u'Options'], [258030, None, u'Identifier', u'DebuggerTuning'], [258025, None, u'Callee', u'CodeGenOpts . getDebuggerTuning'], [258024, None, u'ArgumentList', u''], [258026, None, u'MemberAccess', u'CodeGenOpts . getDebuggerTuning'], [258028, None, u'Identifier', u'CodeGenOpts'], [258027, None, u'Identifier', u'getDebuggerTuning'], [258021, u'True', u'ExpressionStatement', u'Options . DebuggerTuning = CodeGenOpts . getDebuggerTuning ( )'], [258033, None, u'AssignmentExpr', u'Options . EmulatedTLS = CodeGenOpts . EmulatedTLS'], [258037, None, u'MemberAccess', u'Options . EmulatedTLS'], [258034, None, u'MemberAccess', u'CodeGenOpts . EmulatedTLS'], [258039, None, u'Identifier', u'Options'], [258038, None, u'Identifier', u'EmulatedTLS'], [258036, None, u'Identifier', u'CodeGenOpts'], [258035, None, u'Identifier', u'EmulatedTLS'], [258032, u'True', u'ExpressionStatement', u'Options . EmulatedTLS = CodeGenOpts . EmulatedTLS'], [257850, None, u'ParameterType', u'const CodeGenOptions &'], [257849, None, u'Identifier', u'CodeGenOpts'], [257848, u'True', u'Parameter', u'const CodeGenOptions & CodeGenOpts'], [258041, None, u'AssignmentExpr', u'Options . UniqueSectionNames = CodeGenOpts . UniqueSectionNames'], [258045, None, u'MemberAccess', u'Options . UniqueSectionNames'], [258042, None, u'MemberAccess', u'CodeGenOpts . UniqueSectionNames'], [258047, None, u'Identifier', u'Options'], [258046, None, u'Identifier', u'UniqueSectionNames'], [258044, None, u'Identifier', u'CodeGenOpts'], [258043, None, u'Identifier', u'UniqueSectionNames'], [258040, u'True', u'ExpressionStatement', u'Options . UniqueSectionNames = CodeGenOpts . UniqueSectionNames'], [258049, None, u'AssignmentExpr', u'Options . DataSections = CodeGenOpts . DataSections'], [258053, None, u'MemberAccess', u'Options . DataSections'], [258050, None, u'MemberAccess', u'CodeGenOpts . DataSections'], [258055, None, u'Identifier', u'Options'], [258054, None, u'Identifier', u'DataSections'], [258052, None, u'Identifier', u'CodeGenOpts'], [258051, None, u'Identifier', u'DataSections'], [258048, u'True', u'ExpressionStatement', u'Options . DataSections = CodeGenOpts . DataSections'], [258057, None, u'AssignmentExpr', u'Options . FunctionSections = CodeGenOpts . FunctionSections'], [258061, None, u'MemberAccess', u'Options . FunctionSections'], [258058, None, u'MemberAccess', u'CodeGenOpts . FunctionSections'], [258063, None, u'Identifier', u'Options'], [258062, None, u'Identifier', u'FunctionSections'], [258060, None, u'Identifier', u'CodeGenOpts'], [258059, None, u'Identifier', u'FunctionSections'], [258056, u'True', u'ExpressionStatement', u'Options . FunctionSections = CodeGenOpts . FunctionSections'], [258065, None, u'AssignmentExpr', u'Options . StackAlignmentOverride = CodeGenOpts . StackAlignment'], [258069, None, u'MemberAccess', u'Options . StackAlignmentOverride'], [258066, None, u'MemberAccess', u'CodeGenOpts . StackAlignment'], [258071, None, u'Identifier', u'Options'], [258070, None, u'Identifier', u'StackAlignmentOverride'], [258068, None, u'Identifier', u'CodeGenOpts'], [258067, None, u'Identifier', u'StackAlignment'], [258064, u'True', u'ExpressionStatement', u'Options . StackAlignmentOverride = CodeGenOpts . StackAlignment']]"
"Clang changes for alloc_align attribute 

GCC has the alloc_align attribute, which is similar to assume_aligned, except the attribute's parameter is the index of the integer parameter that needs aligning to.

Differential Revision: https://reviews.llvm.org/D29599


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299117 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,-,"[[316903, u'True', u'ExpressionStatement', u'assert ( Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument"" )']]","[[316904, None, u'CallExpression', u'assert ( Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument"" )'], [316917, None, u'Callee', u'assert'], [316905, None, u'ArgumentList', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316918, None, u'Identifier', u'assert'], [316906, None, u'Argument', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316907, None, u'AndExpression', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316909, None, u'CallExpression', u'Attr . isArgExpr ( AttrArgNo )'], [316908, None, u'PrimaryExpression', u'""Expected expression argument""'], [316913, None, u'Callee', u'Attr . isArgExpr'], [316910, None, u'ArgumentList', u'AttrArgNo'], [316914, None, u'MemberAccess', u'Attr . isArgExpr'], [316911, None, u'Argument', u'AttrArgNo'], [316916, None, u'Identifier', u'Attr'], [316915, None, u'Identifier', u'isArgExpr'], [316912, None, u'Identifier', u'AttrArgNo'], [316903, u'True', u'ExpressionStatement', u'assert ( Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument"" )'], [316919, u'True', u'CFGEntryNode', u'ENTRY']]","[[316904, None, u'CallExpression', u'assert ( Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument"" )'], [316917, None, u'Callee', u'assert'], [316905, None, u'ArgumentList', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316918, None, u'Identifier', u'assert'], [316906, None, u'Argument', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316907, None, u'AndExpression', u'Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument""'], [316909, None, u'CallExpression', u'Attr . isArgExpr ( AttrArgNo )'], [316908, None, u'PrimaryExpression', u'""Expected expression argument""'], [316913, None, u'Callee', u'Attr . isArgExpr'], [316910, None, u'ArgumentList', u'AttrArgNo'], [316914, None, u'MemberAccess', u'Attr . isArgExpr'], [316911, None, u'Argument', u'AttrArgNo'], [316916, None, u'Identifier', u'Attr'], [316915, None, u'Identifier', u'isArgExpr'], [316912, None, u'Identifier', u'AttrArgNo'], [316903, u'True', u'ExpressionStatement', u'assert ( Attr . isArgExpr ( AttrArgNo ) && ""Expected expression argument"" )'], [316769, None, u'ParameterType', u'const AttributeList &'], [316768, None, u'Identifier', u'Attr'], [316767, u'True', u'Parameter', u'const AttributeList & Attr'], [316763, None, u'ParameterType', u'unsigned'], [316762, None, u'Identifier', u'AttrArgNo'], [316761, u'True', u'Parameter', u'unsigned AttrArgNo']]"
"Add the -grecord-gcc-switches option and pass the flags down on the compile unit.

Patch by Zhizhou Yang

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299037 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Clang.cpp,-,"[[399984, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( )']]","[[399985, None, u'CallExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( )'], [399987, None, u'Callee', u'getToolChain ( ) . UseDwarfDebugFlags'], [399986, None, u'ArgumentList', u''], [399988, None, u'MemberAccess', u'getToolChain ( ) . UseDwarfDebugFlags'], [399990, None, u'CallExpression', u'getToolChain ( )'], [399989, None, u'Identifier', u'UseDwarfDebugFlags'], [399992, None, u'Callee', u'getToolChain'], [399991, None, u'ArgumentList', u''], [399993, None, u'Identifier', u'getToolChain'], [399984, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( )'], [413995, u'True', u'CFGEntryNode', u'ENTRY']]","[[399985, None, u'CallExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( )'], [399987, None, u'Callee', u'getToolChain ( ) . UseDwarfDebugFlags'], [399986, None, u'ArgumentList', u''], [399988, None, u'MemberAccess', u'getToolChain ( ) . UseDwarfDebugFlags'], [399990, None, u'CallExpression', u'getToolChain ( )'], [399989, None, u'Identifier', u'UseDwarfDebugFlags'], [399992, None, u'Callee', u'getToolChain'], [399991, None, u'ArgumentList', u''], [399993, None, u'Identifier', u'getToolChain'], [399984, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( )']]"
"Add the -grecord-gcc-switches option and pass the flags down on the compile unit.

Patch by Zhizhou Yang

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299037 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Clang.cpp,+,"[[369084, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( ) || Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )']]","[[369085, None, u'OrExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( ) || Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [369098, None, u'CallExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( )'], [369086, None, u'CallExpression', u'Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [369100, None, u'Callee', u'getToolChain ( ) . UseDwarfDebugFlags'], [369099, None, u'ArgumentList', u''], [369094, None, u'Callee', u'Args . hasFlag'], [369087, None, u'ArgumentList', u'options :: OPT_grecord_gcc_switches'], [369101, None, u'MemberAccess', u'getToolChain ( ) . UseDwarfDebugFlags'], [369095, None, u'MemberAccess', u'Args . hasFlag'], [369092, None, u'Argument', u'options :: OPT_grecord_gcc_switches'], [369090, None, u'Argument', u'options :: OPT_gno_record_gcc_switches'], [369088, None, u'Argument', u'false'], [369103, None, u'CallExpression', u'getToolChain ( )'], [369102, None, u'Identifier', u'UseDwarfDebugFlags'], [369097, None, u'Identifier', u'Args'], [369096, None, u'Identifier', u'hasFlag'], [369093, None, u'Identifier', u'options :: OPT_grecord_gcc_switches'], [369091, None, u'Identifier', u'options :: OPT_gno_record_gcc_switches'], [369089, None, u'Identifier', u'false'], [369105, None, u'Callee', u'getToolChain'], [369104, None, u'ArgumentList', u''], [369106, None, u'Identifier', u'getToolChain'], [369084, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( ) || Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [383108, u'True', u'CFGEntryNode', u'ENTRY']]","[[369085, None, u'OrExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( ) || Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [369098, None, u'CallExpression', u'getToolChain ( ) . UseDwarfDebugFlags ( )'], [369086, None, u'CallExpression', u'Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [369100, None, u'Callee', u'getToolChain ( ) . UseDwarfDebugFlags'], [369099, None, u'ArgumentList', u''], [369094, None, u'Callee', u'Args . hasFlag'], [369087, None, u'ArgumentList', u'options :: OPT_grecord_gcc_switches'], [369101, None, u'MemberAccess', u'getToolChain ( ) . UseDwarfDebugFlags'], [369095, None, u'MemberAccess', u'Args . hasFlag'], [369092, None, u'Argument', u'options :: OPT_grecord_gcc_switches'], [369090, None, u'Argument', u'options :: OPT_gno_record_gcc_switches'], [369088, None, u'Argument', u'false'], [369103, None, u'CallExpression', u'getToolChain ( )'], [369102, None, u'Identifier', u'UseDwarfDebugFlags'], [369097, None, u'Identifier', u'Args'], [369096, None, u'Identifier', u'hasFlag'], [369093, None, u'Identifier', u'options :: OPT_grecord_gcc_switches'], [369091, None, u'Identifier', u'options :: OPT_gno_record_gcc_switches'], [369089, None, u'Identifier', u'false'], [369105, None, u'Callee', u'getToolChain'], [369104, None, u'ArgumentList', u''], [369106, None, u'Identifier', u'getToolChain'], [369084, u'True', u'Condition', u'getToolChain ( ) . UseDwarfDebugFlags ( ) || Args . hasFlag ( options :: OPT_grecord_gcc_switches , options :: OPT_gno_record_gcc_switches , false )'], [368333, None, u'Identifier', u'Args'], [368334, None, u'ParameterType', u'const ArgList &'], [368332, u'True', u'Parameter', u'const ArgList & Args']]"
"[Objective-C] Fix ""weak-unavailable"" warning with -fobjc-weak

Summary: clang should produce the same errors Objective-C classes that cannot be assigned to weak pointers under both -fobjc-arc and -fobjc-weak. Check for ObjCWeak along with ObjCAutoRefCount when analyzing pointer conversions. Add an -fobjc-weak pass to the existing arc-unavailable-for-weakref test cases to verify the behavior is the same.

Reviewers: rsmith, doug.gregor, rjmccall

Reviewed By: rjmccall

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31006

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299014 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCast.cpp,-,"[[433400, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . ObjCAutoRefCount )']]","[[433401, None, u'CallExpression', u'assert ( Self . getLangOpts ( ) . ObjCAutoRefCount )'], [433412, None, u'Callee', u'assert'], [433402, None, u'ArgumentList', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433413, None, u'Identifier', u'assert'], [433403, None, u'Argument', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433404, None, u'MemberAccess', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433406, None, u'CallExpression', u'Self . getLangOpts ( )'], [433405, None, u'Identifier', u'ObjCAutoRefCount'], [433408, None, u'Callee', u'Self . getLangOpts'], [433407, None, u'ArgumentList', u''], [433409, None, u'MemberAccess', u'Self . getLangOpts'], [433411, None, u'Identifier', u'Self'], [433410, None, u'Identifier', u'getLangOpts'], [433400, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . ObjCAutoRefCount )'], [433414, u'True', u'CFGEntryNode', u'ENTRY']]","[[433401, None, u'CallExpression', u'assert ( Self . getLangOpts ( ) . ObjCAutoRefCount )'], [433412, None, u'Callee', u'assert'], [433402, None, u'ArgumentList', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433413, None, u'Identifier', u'assert'], [433403, None, u'Argument', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433404, None, u'MemberAccess', u'Self . getLangOpts ( ) . ObjCAutoRefCount'], [433406, None, u'CallExpression', u'Self . getLangOpts ( )'], [433405, None, u'Identifier', u'ObjCAutoRefCount'], [433408, None, u'Callee', u'Self . getLangOpts'], [433407, None, u'ArgumentList', u''], [433409, None, u'MemberAccess', u'Self . getLangOpts'], [433411, None, u'Identifier', u'Self'], [433410, None, u'Identifier', u'getLangOpts'], [433400, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . ObjCAutoRefCount )']]"
"[Objective-C] Fix ""weak-unavailable"" warning with -fobjc-weak

Summary: clang should produce the same errors Objective-C classes that cannot be assigned to weak pointers under both -fobjc-arc and -fobjc-weak. Check for ObjCWeak along with ObjCAutoRefCount when analyzing pointer conversions. Add an -fobjc-weak pass to the existing arc-unavailable-for-weakref test cases to verify the behavior is the same.

Reviewers: rsmith, doug.gregor, rjmccall

Reviewed By: rjmccall

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31006

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299014 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCast.cpp,+,"[[419476, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( ) )']]","[[419477, None, u'CallExpression', u'assert ( Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( ) )'], [419491, None, u'Callee', u'assert'], [419478, None, u'ArgumentList', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419492, None, u'Identifier', u'assert'], [419479, None, u'Argument', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419480, None, u'CallExpression', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419482, None, u'Callee', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers'], [419481, None, u'ArgumentList', u''], [419483, None, u'MemberAccess', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers'], [419485, None, u'CallExpression', u'Self . getLangOpts ( )'], [419484, None, u'Identifier', u'allowsNonTrivialObjCLifetimeQualifiers'], [419487, None, u'Callee', u'Self . getLangOpts'], [419486, None, u'ArgumentList', u''], [419488, None, u'MemberAccess', u'Self . getLangOpts'], [419490, None, u'Identifier', u'Self'], [419489, None, u'Identifier', u'getLangOpts'], [419476, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( ) )'], [419493, u'True', u'CFGEntryNode', u'ENTRY']]","[[419477, None, u'CallExpression', u'assert ( Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( ) )'], [419491, None, u'Callee', u'assert'], [419478, None, u'ArgumentList', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419492, None, u'Identifier', u'assert'], [419479, None, u'Argument', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419480, None, u'CallExpression', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( )'], [419482, None, u'Callee', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers'], [419481, None, u'ArgumentList', u''], [419483, None, u'MemberAccess', u'Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers'], [419485, None, u'CallExpression', u'Self . getLangOpts ( )'], [419484, None, u'Identifier', u'allowsNonTrivialObjCLifetimeQualifiers'], [419487, None, u'Callee', u'Self . getLangOpts'], [419486, None, u'ArgumentList', u''], [419488, None, u'MemberAccess', u'Self . getLangOpts'], [419490, None, u'Identifier', u'Self'], [419489, None, u'Identifier', u'getLangOpts'], [419476, u'True', u'ExpressionStatement', u'assert ( Self . getLangOpts ( ) . allowsNonTrivialObjCLifetimeQualifiers ( ) )']]"
"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,"[[530340, u'True', u'Parameter', u'const llvm :: Twine & Message'], [530340, u'True', u'Parameter', u'const llvm :: Twine & Message']]","[[530342, None, u'ParameterType', u'const llvm :: Twine &'], [530341, None, u'Identifier', u'Message'], [530340, u'True', u'Parameter', u'const llvm :: Twine & Message'], [530356, u'True', u'CFGEntryNode', u'ENTRY'], [530342, None, u'ParameterType', u'const llvm :: Twine &'], [530341, None, u'Identifier', u'Message'], [530340, u'True', u'Parameter', u'const llvm :: Twine & Message'], [530356, u'True', u'CFGEntryNode', u'ENTRY']]","[[530342, None, u'ParameterType', u'const llvm :: Twine &'], [530341, None, u'Identifier', u'Message'], [530340, u'True', u'Parameter', u'const llvm :: Twine & Message'], [530342, None, u'ParameterType', u'const llvm :: Twine &'], [530341, None, u'Identifier', u'Message'], [530340, u'True', u'Parameter', u'const llvm :: Twine & Message']]"
"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,"[[750763, u'True', u'Parameter', u'const llvm :: Twine & Message'], [750763, u'True', u'Parameter', u'const llvm :: Twine & Message']]","[[750765, None, u'ParameterType', u'const llvm :: Twine &'], [750764, None, u'Identifier', u'Message'], [750763, u'True', u'Parameter', u'const llvm :: Twine & Message'], [750779, u'True', u'CFGEntryNode', u'ENTRY'], [750765, None, u'ParameterType', u'const llvm :: Twine &'], [750764, None, u'Identifier', u'Message'], [750763, u'True', u'Parameter', u'const llvm :: Twine & Message'], [750779, u'True', u'CFGEntryNode', u'ENTRY']]","[[750765, None, u'ParameterType', u'const llvm :: Twine &'], [750764, None, u'Identifier', u'Message'], [750763, u'True', u'Parameter', u'const llvm :: Twine & Message'], [750765, None, u'ParameterType', u'const llvm :: Twine &'], [750764, None, u'Identifier', u'Message'], [750763, u'True', u'Parameter', u'const llvm :: Twine & Message']]"
"Add support for attribute enum_extensibility.

This commit adds support for a new attribute that will be used to
distinguish between extensible and inextensible enums. There are three
main purposes of this attribute:

1. Give better control over when enum-related warnings are issued.
For example, in the code below, clang will not issue a -Wassign-enum
warning if the enum is marked ""open"":

enum __attribute__((enum_extensibility(closed))) EnumClosed {
  B0 = 1, B1 = 10
};

enum __attribute__((enum_extensibility(open))) EnumOpen {
  C0 = 1, C1 = 10
};

enum EnumClosed ec = 100; // warning issued
enum EnumOpen eo = 100; // no warning

2. Enable code-completion and debugging tools to offer better
suggestions.

3. Make it easier for swift's clang importer to determine which swift
type an enum should be mapped to.

For more details, see the discussion I started on cfe-dev:
http://lists.llvm.org/pipermail/cfe-dev/2017-February/052748.html

rdar://problem/12764379
rdar://problem/23145650

Differential Revision: https://reviews.llvm.org/D30766

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298332 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDecl.cpp,-,"[[1790677, u'True', u'Statement', u'&&'], [1790679, u'True', u'Statement', u'('], [1790678, u'True', u'Statement', u')'], [1790682, u'True', u'Statement', u'<'], [1790683, u'True', u'Statement', u'hasAttr'], [1790686, u'True', u'Statement', u'('], [1790681, u'True', u'Statement', u'FlagEnumAttr'], [1790674, u'True', u'ExpressionStatement', u''], [1790684, u'True', u'Statement', u'->'], [1790687, u'True', u'Statement', u'assert'], [1790675, u'True', u'Statement', u')'], [1790676, u'True', u'Statement', u'""looking for value in non-flag enum""'], [1790680, u'True', u'Statement', u'>'], [1790685, u'True', u'Statement', u'ED']]","[[1790677, u'True', u'Statement', u'&&'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790679, u'True', u'Statement', u'('], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790678, u'True', u'Statement', u')'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790682, u'True', u'Statement', u'<'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790683, u'True', u'Statement', u'hasAttr'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790686, u'True', u'Statement', u'('], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790681, u'True', u'Statement', u'FlagEnumAttr'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790674, u'True', u'ExpressionStatement', u''], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790684, u'True', u'Statement', u'->'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790687, u'True', u'Statement', u'assert'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790675, u'True', u'Statement', u')'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790676, u'True', u'Statement', u'""looking for value in non-flag enum""'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790680, u'True', u'Statement', u'>'], [1790688, u'True', u'CFGEntryNode', u'ENTRY'], [1790685, u'True', u'Statement', u'ED'], [1790688, u'True', u'CFGEntryNode', u'ENTRY']]","[[1790677, u'True', u'Statement', u'&&'], [1790679, u'True', u'Statement', u'('], [1790678, u'True', u'Statement', u')'], [1790682, u'True', u'Statement', u'<'], [1790683, u'True', u'Statement', u'hasAttr'], [1790686, u'True', u'Statement', u'('], [1790681, u'True', u'Statement', u'FlagEnumAttr'], [1790674, u'True', u'ExpressionStatement', u''], [1790684, u'True', u'Statement', u'->'], [1790687, u'True', u'Statement', u'assert'], [1790675, u'True', u'Statement', u')'], [1790676, u'True', u'Statement', u'""looking for value in non-flag enum""'], [1790680, u'True', u'Statement', u'>'], [1790685, u'True', u'Statement', u'ED']]"
"Add support for attribute enum_extensibility.

This commit adds support for a new attribute that will be used to
distinguish between extensible and inextensible enums. There are three
main purposes of this attribute:

1. Give better control over when enum-related warnings are issued.
For example, in the code below, clang will not issue a -Wassign-enum
warning if the enum is marked ""open"":

enum __attribute__((enum_extensibility(closed))) EnumClosed {
  B0 = 1, B1 = 10
};

enum __attribute__((enum_extensibility(open))) EnumOpen {
  C0 = 1, C1 = 10
};

enum EnumClosed ec = 100; // warning issued
enum EnumOpen eo = 100; // no warning

2. Enable code-completion and debugging tools to offer better
suggestions.

3. Make it easier for swift's clang importer to determine which swift
type an enum should be mapped to.

For more details, see the discussion I started on cfe-dev:
http://lists.llvm.org/pipermail/cfe-dev/2017-February/052748.html

rdar://problem/12764379
rdar://problem/23145650

Differential Revision: https://reviews.llvm.org/D30766

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298332 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDecl.cpp,+,"[[1699962, u'True', u'ExpressionStatement', u'assert ( ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum"" )']]","[[1699963, None, u'CallExpression', u'assert ( ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum"" )'], [1699974, None, u'Callee', u'assert'], [1699964, None, u'ArgumentList', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699975, None, u'Identifier', u'assert'], [1699965, None, u'Argument', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699966, None, u'AndExpression', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699968, None, u'CallExpression', u'ED -> isClosedFlag ( )'], [1699967, None, u'PrimaryExpression', u'""looking for value in non-flag or open enum""'], [1699970, None, u'Callee', u'ED -> isClosedFlag'], [1699969, None, u'ArgumentList', u''], [1699971, None, u'PtrMemberAccess', u'ED -> isClosedFlag'], [1699973, None, u'Identifier', u'ED'], [1699972, None, u'Identifier', u'isClosedFlag'], [1699962, u'True', u'ExpressionStatement', u'assert ( ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum"" )'], [1699976, u'True', u'CFGEntryNode', u'ENTRY']]","[[1699963, None, u'CallExpression', u'assert ( ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum"" )'], [1699974, None, u'Callee', u'assert'], [1699964, None, u'ArgumentList', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699975, None, u'Identifier', u'assert'], [1699965, None, u'Argument', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699966, None, u'AndExpression', u'ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum""'], [1699968, None, u'CallExpression', u'ED -> isClosedFlag ( )'], [1699967, None, u'PrimaryExpression', u'""looking for value in non-flag or open enum""'], [1699970, None, u'Callee', u'ED -> isClosedFlag'], [1699969, None, u'ArgumentList', u''], [1699971, None, u'PtrMemberAccess', u'ED -> isClosedFlag'], [1699973, None, u'Identifier', u'ED'], [1699972, None, u'Identifier', u'isClosedFlag'], [1699962, u'True', u'ExpressionStatement', u'assert ( ED -> isClosedFlag ( ) && ""looking for value in non-flag or open enum"" )'], [1699821, None, u'ParameterType', u'const EnumDecl *'], [1699820, None, u'Identifier', u'ED'], [1699819, u'True', u'Parameter', u'const EnumDecl * ED']]"
"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"[[1799524, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )']]","[[1799525, None, u'CallExpression', u'assert ( Insertion . second && ""Already has a buffer"" )'], [1799533, None, u'Callee', u'assert'], [1799526, None, u'ArgumentList', u'Insertion . second && ""Already has a buffer""'], [1799534, None, u'Identifier', u'assert'], [1799527, None, u'Argument', u'Insertion . second && ""Already has a buffer""'], [1799528, None, u'AndExpression', u'Insertion . second && ""Already has a buffer""'], [1799530, None, u'MemberAccess', u'Insertion . second'], [1799529, None, u'PrimaryExpression', u'""Already has a buffer""'], [1799532, None, u'Identifier', u'Insertion'], [1799531, None, u'Identifier', u'second'], [1799524, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )'], [1799558, u'True', u'CFGEntryNode', u'ENTRY']]","[[1799525, None, u'CallExpression', u'assert ( Insertion . second && ""Already has a buffer"" )'], [1799533, None, u'Callee', u'assert'], [1799526, None, u'ArgumentList', u'Insertion . second && ""Already has a buffer""'], [1799534, None, u'Identifier', u'assert'], [1799527, None, u'Argument', u'Insertion . second && ""Already has a buffer""'], [1799528, None, u'AndExpression', u'Insertion . second && ""Already has a buffer""'], [1799530, None, u'MemberAccess', u'Insertion . second'], [1799529, None, u'PrimaryExpression', u'""Already has a buffer""'], [1799532, None, u'Identifier', u'Insertion'], [1799531, None, u'Identifier', u'second'], [1799524, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )']]"
"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"[[1799710, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )']]","[[1799711, None, u'CallExpression', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [1799724, None, u'Callee', u'assert'], [1799712, None, u'ArgumentList', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799725, None, u'Identifier', u'assert'], [1799713, None, u'Argument', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799714, None, u'AndExpression', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799716, None, u'EqualityExpression', u'I != Buffers . end ( )'], [1799715, None, u'PrimaryExpression', u'""No buffer to remove...""'], [1799723, None, u'Identifier', u'I'], [1799717, None, u'CallExpression', u'Buffers . end ( )'], [1799719, None, u'Callee', u'Buffers . end'], [1799718, None, u'ArgumentList', u''], [1799720, None, u'MemberAccess', u'Buffers . end'], [1799722, None, u'Identifier', u'Buffers'], [1799721, None, u'Identifier', u'end'], [1799710, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [1799738, u'True', u'CFGEntryNode', u'ENTRY']]","[[1799711, None, u'CallExpression', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [1799724, None, u'Callee', u'assert'], [1799712, None, u'ArgumentList', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799725, None, u'Identifier', u'assert'], [1799713, None, u'Argument', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799714, None, u'AndExpression', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [1799716, None, u'EqualityExpression', u'I != Buffers . end ( )'], [1799715, None, u'PrimaryExpression', u'""No buffer to remove...""'], [1799723, None, u'Identifier', u'I'], [1799717, None, u'CallExpression', u'Buffers . end ( )'], [1799719, None, u'Callee', u'Buffers . end'], [1799718, None, u'ArgumentList', u''], [1799720, None, u'MemberAccess', u'Buffers . end'], [1799722, None, u'Identifier', u'Buffers'], [1799721, None, u'Identifier', u'end'], [1799710, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [1799727, None, u'AssignmentExpr', u'I = Buffers . find ( Filename )'], [1799736, None, u'Identifier', u'I'], [1799728, None, u'CallExpression', u'Buffers . find ( Filename )'], [1799732, None, u'Callee', u'Buffers . find'], [1799729, None, u'ArgumentList', u'Filename'], [1799733, None, u'MemberAccess', u'Buffers . find'], [1799730, None, u'Argument', u'Filename'], [1799735, None, u'Identifier', u'Buffers'], [1799734, None, u'Identifier', u'find'], [1799731, None, u'Identifier', u'Filename'], [1799726, u'True', u'ExpressionStatement', u'I = Buffers . find ( Filename )'], [1799685, None, u'ParameterType', u'llvm :: StringRef'], [1799684, None, u'Identifier', u'Filename'], [1799683, u'True', u'Parameter', u'llvm :: StringRef Filename']]"
"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,+,"[[1829370, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )']]","[[1829371, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1829396, None, u'Callee', u'assert'], [1829372, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829397, None, u'Identifier', u'assert'], [1829373, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829374, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829376, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829375, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [1829390, None, u'CallExpression', u'PCMCache . get ( )'], [1829377, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829392, None, u'Callee', u'PCMCache . get'], [1829391, None, u'ArgumentList', u''], [1829389, None, u'UnaryOperator', u'&'], [1829378, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829393, None, u'MemberAccess', u'PCMCache . get'], [1829380, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [1829379, None, u'ArgumentList', u''], [1829395, None, u'Identifier', u'PCMCache'], [1829394, None, u'Identifier', u'get'], [1829381, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [1829383, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [1829382, None, u'Identifier', u'getPCMCache'], [1829385, None, u'Callee', u'Reader -> getModuleManager'], [1829384, None, u'ArgumentList', u''], [1829386, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [1829388, None, u'Identifier', u'Reader'], [1829387, None, u'Identifier', u'getModuleManager'], [1829370, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1829398, u'True', u'CFGEntryNode', u'ENTRY']]","[[1829371, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1829396, None, u'Callee', u'assert'], [1829372, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829397, None, u'Identifier', u'assert'], [1829373, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829374, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1829376, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829375, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [1829390, None, u'CallExpression', u'PCMCache . get ( )'], [1829377, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829392, None, u'Callee', u'PCMCache . get'], [1829391, None, u'ArgumentList', u''], [1829389, None, u'UnaryOperator', u'&'], [1829378, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [1829393, None, u'MemberAccess', u'PCMCache . get'], [1829380, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [1829379, None, u'ArgumentList', u''], [1829395, None, u'Identifier', u'PCMCache'], [1829394, None, u'Identifier', u'get'], [1829381, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [1829383, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [1829382, None, u'Identifier', u'getPCMCache'], [1829385, None, u'Callee', u'Reader -> getModuleManager'], [1829384, None, u'ArgumentList', u''], [1829386, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [1829388, None, u'Identifier', u'Reader'], [1829387, None, u'Identifier', u'getModuleManager'], [1829370, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1829358, None, u'ParameterType', u'IntrusiveRefCntPtr < ASTReader >'], [1829357, None, u'Identifier', u'Reader'], [1829356, u'True', u'Parameter', u'IntrusiveRefCntPtr < ASTReader > Reader']]"
"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"[[1905492, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[1905493, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1905506, None, u'Callee', u'assert'], [1905494, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905507, None, u'Identifier', u'assert'], [1905495, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905496, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905498, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [1905497, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [1905500, None, u'CallExpression', u'ModuleMgr . size ( )'], [1905499, None, u'PrimaryExpression', u'1'], [1905502, None, u'Callee', u'ModuleMgr . size'], [1905501, None, u'ArgumentList', u''], [1905503, None, u'MemberAccess', u'ModuleMgr . size'], [1905505, None, u'Identifier', u'ModuleMgr'], [1905504, None, u'Identifier', u'size'], [1905492, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1905569, u'True', u'CFGEntryNode', u'ENTRY']]","[[1905493, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1905506, None, u'Callee', u'assert'], [1905494, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905507, None, u'Identifier', u'assert'], [1905495, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905496, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1905498, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [1905497, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [1905500, None, u'CallExpression', u'ModuleMgr . size ( )'], [1905499, None, u'PrimaryExpression', u'1'], [1905502, None, u'Callee', u'ModuleMgr . size'], [1905501, None, u'ArgumentList', u''], [1905503, None, u'MemberAccess', u'ModuleMgr . size'], [1905505, None, u'Identifier', u'ModuleMgr'], [1905504, None, u'Identifier', u'size'], [1905492, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1905509, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [1905519, None, u'IdentifierDeclType', u'ModuleManager &'], [1905518, None, u'Identifier', u'ModuleMgr'], [1905510, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [1905517, None, u'Identifier', u'ModuleMgr'], [1905511, None, u'CallExpression', u'Reader . getModuleManager ( )'], [1905513, None, u'Callee', u'Reader . getModuleManager'], [1905512, None, u'ArgumentList', u''], [1905514, None, u'MemberAccess', u'Reader . getModuleManager'], [1905516, None, u'Identifier', u'Reader'], [1905515, None, u'Identifier', u'getModuleManager'], [1905508, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"[[1851007, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[1851008, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1851021, None, u'Callee', u'assert'], [1851009, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851022, None, u'Identifier', u'assert'], [1851010, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851011, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851013, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [1851012, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [1851015, None, u'CallExpression', u'ModuleMgr . size ( )'], [1851014, None, u'PrimaryExpression', u'1'], [1851017, None, u'Callee', u'ModuleMgr . size'], [1851016, None, u'ArgumentList', u''], [1851018, None, u'MemberAccess', u'ModuleMgr . size'], [1851020, None, u'Identifier', u'ModuleMgr'], [1851019, None, u'Identifier', u'size'], [1851007, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1851084, u'True', u'CFGEntryNode', u'ENTRY']]","[[1851008, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1851021, None, u'Callee', u'assert'], [1851009, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851022, None, u'Identifier', u'assert'], [1851010, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851011, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [1851013, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [1851012, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [1851015, None, u'CallExpression', u'ModuleMgr . size ( )'], [1851014, None, u'PrimaryExpression', u'1'], [1851017, None, u'Callee', u'ModuleMgr . size'], [1851016, None, u'ArgumentList', u''], [1851018, None, u'MemberAccess', u'ModuleMgr . size'], [1851020, None, u'Identifier', u'ModuleMgr'], [1851019, None, u'Identifier', u'size'], [1851007, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [1851024, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [1851034, None, u'IdentifierDeclType', u'ModuleManager &'], [1851033, None, u'Identifier', u'ModuleMgr'], [1851025, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [1851032, None, u'Identifier', u'ModuleMgr'], [1851026, None, u'CallExpression', u'Reader . getModuleManager ( )'], [1851028, None, u'Callee', u'Reader . getModuleManager'], [1851027, None, u'ArgumentList', u''], [1851029, None, u'MemberAccess', u'Reader . getModuleManager'], [1851031, None, u'Identifier', u'Reader'], [1851030, None, u'Identifier', u'getModuleManager'], [1851023, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,-,"[[1999181, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )']]","[[1999182, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1999207, None, u'Callee', u'assert'], [1999183, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999208, None, u'Identifier', u'assert'], [1999184, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999185, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999187, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999186, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [1999201, None, u'CallExpression', u'PCMCache . get ( )'], [1999188, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999203, None, u'Callee', u'PCMCache . get'], [1999202, None, u'ArgumentList', u''], [1999200, None, u'UnaryOperator', u'&'], [1999189, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999204, None, u'MemberAccess', u'PCMCache . get'], [1999191, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [1999190, None, u'ArgumentList', u''], [1999206, None, u'Identifier', u'PCMCache'], [1999205, None, u'Identifier', u'get'], [1999192, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [1999194, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [1999193, None, u'Identifier', u'getPCMCache'], [1999196, None, u'Callee', u'Reader -> getModuleManager'], [1999195, None, u'ArgumentList', u''], [1999197, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [1999199, None, u'Identifier', u'Reader'], [1999198, None, u'Identifier', u'getModuleManager'], [1999181, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1999209, u'True', u'CFGEntryNode', u'ENTRY']]","[[1999182, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1999207, None, u'Callee', u'assert'], [1999183, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999208, None, u'Identifier', u'assert'], [1999184, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999185, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [1999187, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999186, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [1999201, None, u'CallExpression', u'PCMCache . get ( )'], [1999188, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999203, None, u'Callee', u'PCMCache . get'], [1999202, None, u'ArgumentList', u''], [1999200, None, u'UnaryOperator', u'&'], [1999189, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [1999204, None, u'MemberAccess', u'PCMCache . get'], [1999191, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [1999190, None, u'ArgumentList', u''], [1999206, None, u'Identifier', u'PCMCache'], [1999205, None, u'Identifier', u'get'], [1999192, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [1999194, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [1999193, None, u'Identifier', u'getPCMCache'], [1999196, None, u'Callee', u'Reader -> getModuleManager'], [1999195, None, u'ArgumentList', u''], [1999197, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [1999199, None, u'Identifier', u'Reader'], [1999198, None, u'Identifier', u'getModuleManager'], [1999181, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [1999169, None, u'ParameterType', u'IntrusiveRefCntPtr < ASTReader >'], [1999168, None, u'Identifier', u'Reader'], [1999167, u'True', u'Parameter', u'IntrusiveRefCntPtr < ASTReader > Reader']]"
"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"[[2010478, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[2010479, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2010492, None, u'Callee', u'assert'], [2010480, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010493, None, u'Identifier', u'assert'], [2010481, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010482, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010484, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2010483, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2010486, None, u'CallExpression', u'ModuleMgr . size ( )'], [2010485, None, u'PrimaryExpression', u'1'], [2010488, None, u'Callee', u'ModuleMgr . size'], [2010487, None, u'ArgumentList', u''], [2010489, None, u'MemberAccess', u'ModuleMgr . size'], [2010491, None, u'Identifier', u'ModuleMgr'], [2010490, None, u'Identifier', u'size'], [2010478, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2010555, u'True', u'CFGEntryNode', u'ENTRY']]","[[2010479, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2010492, None, u'Callee', u'assert'], [2010480, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010493, None, u'Identifier', u'assert'], [2010481, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010482, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2010484, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2010483, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2010486, None, u'CallExpression', u'ModuleMgr . size ( )'], [2010485, None, u'PrimaryExpression', u'1'], [2010488, None, u'Callee', u'ModuleMgr . size'], [2010487, None, u'ArgumentList', u''], [2010489, None, u'MemberAccess', u'ModuleMgr . size'], [2010491, None, u'Identifier', u'ModuleMgr'], [2010490, None, u'Identifier', u'size'], [2010478, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2010495, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [2010505, None, u'IdentifierDeclType', u'ModuleManager &'], [2010504, None, u'Identifier', u'ModuleMgr'], [2010496, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [2010503, None, u'Identifier', u'ModuleMgr'], [2010497, None, u'CallExpression', u'Reader . getModuleManager ( )'], [2010499, None, u'Callee', u'Reader . getModuleManager'], [2010498, None, u'ArgumentList', u''], [2010500, None, u'MemberAccess', u'Reader . getModuleManager'], [2010502, None, u'Identifier', u'Reader'], [2010501, None, u'Identifier', u'getModuleManager'], [2010494, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"[[2064993, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[2064994, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2065007, None, u'Callee', u'assert'], [2064995, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2065008, None, u'Identifier', u'assert'], [2064996, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2064997, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2064999, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2064998, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2065001, None, u'CallExpression', u'ModuleMgr . size ( )'], [2065000, None, u'PrimaryExpression', u'1'], [2065003, None, u'Callee', u'ModuleMgr . size'], [2065002, None, u'ArgumentList', u''], [2065004, None, u'MemberAccess', u'ModuleMgr . size'], [2065006, None, u'Identifier', u'ModuleMgr'], [2065005, None, u'Identifier', u'size'], [2064993, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2065070, u'True', u'CFGEntryNode', u'ENTRY']]","[[2064994, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2065007, None, u'Callee', u'assert'], [2064995, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2065008, None, u'Identifier', u'assert'], [2064996, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2064997, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2064999, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2064998, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2065001, None, u'CallExpression', u'ModuleMgr . size ( )'], [2065000, None, u'PrimaryExpression', u'1'], [2065003, None, u'Callee', u'ModuleMgr . size'], [2065002, None, u'ArgumentList', u''], [2065004, None, u'MemberAccess', u'ModuleMgr . size'], [2065006, None, u'Identifier', u'ModuleMgr'], [2065005, None, u'Identifier', u'size'], [2064993, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2065010, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [2065020, None, u'IdentifierDeclType', u'ModuleManager &'], [2065019, None, u'Identifier', u'ModuleMgr'], [2065011, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [2065018, None, u'Identifier', u'ModuleMgr'], [2065012, None, u'CallExpression', u'Reader . getModuleManager ( )'], [2065014, None, u'Callee', u'Reader . getModuleManager'], [2065013, None, u'ArgumentList', u''], [2065015, None, u'MemberAccess', u'Reader . getModuleManager'], [2065017, None, u'Identifier', u'Reader'], [2065016, None, u'Identifier', u'getModuleManager'], [2065009, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"[[2203377, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )']]","[[2203378, None, u'CallExpression', u'assert ( Insertion . second && ""Already has a buffer"" )'], [2203386, None, u'Callee', u'assert'], [2203379, None, u'ArgumentList', u'Insertion . second && ""Already has a buffer""'], [2203387, None, u'Identifier', u'assert'], [2203380, None, u'Argument', u'Insertion . second && ""Already has a buffer""'], [2203381, None, u'AndExpression', u'Insertion . second && ""Already has a buffer""'], [2203383, None, u'MemberAccess', u'Insertion . second'], [2203382, None, u'PrimaryExpression', u'""Already has a buffer""'], [2203385, None, u'Identifier', u'Insertion'], [2203384, None, u'Identifier', u'second'], [2203377, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )'], [2203411, u'True', u'CFGEntryNode', u'ENTRY']]","[[2203378, None, u'CallExpression', u'assert ( Insertion . second && ""Already has a buffer"" )'], [2203386, None, u'Callee', u'assert'], [2203379, None, u'ArgumentList', u'Insertion . second && ""Already has a buffer""'], [2203387, None, u'Identifier', u'assert'], [2203380, None, u'Argument', u'Insertion . second && ""Already has a buffer""'], [2203381, None, u'AndExpression', u'Insertion . second && ""Already has a buffer""'], [2203383, None, u'MemberAccess', u'Insertion . second'], [2203382, None, u'PrimaryExpression', u'""Already has a buffer""'], [2203385, None, u'Identifier', u'Insertion'], [2203384, None, u'Identifier', u'second'], [2203377, u'True', u'ExpressionStatement', u'assert ( Insertion . second && ""Already has a buffer"" )']]"
"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"[[2203563, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )']]","[[2203564, None, u'CallExpression', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [2203577, None, u'Callee', u'assert'], [2203565, None, u'ArgumentList', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203578, None, u'Identifier', u'assert'], [2203566, None, u'Argument', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203567, None, u'AndExpression', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203569, None, u'EqualityExpression', u'I != Buffers . end ( )'], [2203568, None, u'PrimaryExpression', u'""No buffer to remove...""'], [2203576, None, u'Identifier', u'I'], [2203570, None, u'CallExpression', u'Buffers . end ( )'], [2203572, None, u'Callee', u'Buffers . end'], [2203571, None, u'ArgumentList', u''], [2203573, None, u'MemberAccess', u'Buffers . end'], [2203575, None, u'Identifier', u'Buffers'], [2203574, None, u'Identifier', u'end'], [2203563, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [2203591, u'True', u'CFGEntryNode', u'ENTRY']]","[[2203564, None, u'CallExpression', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [2203577, None, u'Callee', u'assert'], [2203565, None, u'ArgumentList', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203578, None, u'Identifier', u'assert'], [2203566, None, u'Argument', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203567, None, u'AndExpression', u'I != Buffers . end ( ) && ""No buffer to remove...""'], [2203569, None, u'EqualityExpression', u'I != Buffers . end ( )'], [2203568, None, u'PrimaryExpression', u'""No buffer to remove...""'], [2203576, None, u'Identifier', u'I'], [2203570, None, u'CallExpression', u'Buffers . end ( )'], [2203572, None, u'Callee', u'Buffers . end'], [2203571, None, u'ArgumentList', u''], [2203573, None, u'MemberAccess', u'Buffers . end'], [2203575, None, u'Identifier', u'Buffers'], [2203574, None, u'Identifier', u'end'], [2203563, u'True', u'ExpressionStatement', u'assert ( I != Buffers . end ( ) && ""No buffer to remove..."" )'], [2203580, None, u'AssignmentExpr', u'I = Buffers . find ( Filename )'], [2203589, None, u'Identifier', u'I'], [2203581, None, u'CallExpression', u'Buffers . find ( Filename )'], [2203585, None, u'Callee', u'Buffers . find'], [2203582, None, u'ArgumentList', u'Filename'], [2203586, None, u'MemberAccess', u'Buffers . find'], [2203583, None, u'Argument', u'Filename'], [2203588, None, u'Identifier', u'Buffers'], [2203587, None, u'Identifier', u'find'], [2203584, None, u'Identifier', u'Filename'], [2203579, u'True', u'ExpressionStatement', u'I = Buffers . find ( Filename )'], [2203538, None, u'ParameterType', u'llvm :: StringRef'], [2203537, None, u'Identifier', u'Filename'], [2203536, u'True', u'Parameter', u'llvm :: StringRef Filename']]"
"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,+,"[[2233223, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )']]","[[2233224, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [2233249, None, u'Callee', u'assert'], [2233225, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233250, None, u'Identifier', u'assert'], [2233226, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233227, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233229, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233228, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [2233243, None, u'CallExpression', u'PCMCache . get ( )'], [2233230, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233245, None, u'Callee', u'PCMCache . get'], [2233244, None, u'ArgumentList', u''], [2233242, None, u'UnaryOperator', u'&'], [2233231, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233246, None, u'MemberAccess', u'PCMCache . get'], [2233233, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [2233232, None, u'ArgumentList', u''], [2233248, None, u'Identifier', u'PCMCache'], [2233247, None, u'Identifier', u'get'], [2233234, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [2233236, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [2233235, None, u'Identifier', u'getPCMCache'], [2233238, None, u'Callee', u'Reader -> getModuleManager'], [2233237, None, u'ArgumentList', u''], [2233239, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [2233241, None, u'Identifier', u'Reader'], [2233240, None, u'Identifier', u'getModuleManager'], [2233223, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [2233251, u'True', u'CFGEntryNode', u'ENTRY']]","[[2233224, None, u'CallExpression', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [2233249, None, u'Callee', u'assert'], [2233225, None, u'ArgumentList', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233250, None, u'Identifier', u'assert'], [2233226, None, u'Argument', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233227, None, u'AndExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache""'], [2233229, None, u'EqualityExpression', u'PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233228, None, u'PrimaryExpression', u'""Expected ASTReader to use the same PCM cache""'], [2233243, None, u'CallExpression', u'PCMCache . get ( )'], [2233230, None, u'UnaryOp', u'& Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233245, None, u'Callee', u'PCMCache . get'], [2233244, None, u'ArgumentList', u''], [2233242, None, u'UnaryOperator', u'&'], [2233231, None, u'CallExpression', u'Reader -> getModuleManager ( ) . getPCMCache ( )'], [2233246, None, u'MemberAccess', u'PCMCache . get'], [2233233, None, u'Callee', u'Reader -> getModuleManager ( ) . getPCMCache'], [2233232, None, u'ArgumentList', u''], [2233248, None, u'Identifier', u'PCMCache'], [2233247, None, u'Identifier', u'get'], [2233234, None, u'MemberAccess', u'Reader -> getModuleManager ( ) . getPCMCache'], [2233236, None, u'CallExpression', u'Reader -> getModuleManager ( )'], [2233235, None, u'Identifier', u'getPCMCache'], [2233238, None, u'Callee', u'Reader -> getModuleManager'], [2233237, None, u'ArgumentList', u''], [2233239, None, u'PtrMemberAccess', u'Reader -> getModuleManager'], [2233241, None, u'Identifier', u'Reader'], [2233240, None, u'Identifier', u'getModuleManager'], [2233223, u'True', u'ExpressionStatement', u'assert ( PCMCache . get ( ) == & Reader -> getModuleManager ( ) . getPCMCache ( ) && ""Expected ASTReader to use the same PCM cache"" )'], [2233211, None, u'ParameterType', u'IntrusiveRefCntPtr < ASTReader >'], [2233210, None, u'Identifier', u'Reader'], [2233209, u'True', u'Parameter', u'IntrusiveRefCntPtr < ASTReader > Reader']]"
"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"[[2309337, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[2309338, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2309351, None, u'Callee', u'assert'], [2309339, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309352, None, u'Identifier', u'assert'], [2309340, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309341, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309343, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2309342, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2309345, None, u'CallExpression', u'ModuleMgr . size ( )'], [2309344, None, u'PrimaryExpression', u'1'], [2309347, None, u'Callee', u'ModuleMgr . size'], [2309346, None, u'ArgumentList', u''], [2309348, None, u'MemberAccess', u'ModuleMgr . size'], [2309350, None, u'Identifier', u'ModuleMgr'], [2309349, None, u'Identifier', u'size'], [2309337, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2309414, u'True', u'CFGEntryNode', u'ENTRY']]","[[2309338, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2309351, None, u'Callee', u'assert'], [2309339, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309352, None, u'Identifier', u'assert'], [2309340, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309341, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2309343, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2309342, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2309345, None, u'CallExpression', u'ModuleMgr . size ( )'], [2309344, None, u'PrimaryExpression', u'1'], [2309347, None, u'Callee', u'ModuleMgr . size'], [2309346, None, u'ArgumentList', u''], [2309348, None, u'MemberAccess', u'ModuleMgr . size'], [2309350, None, u'Identifier', u'ModuleMgr'], [2309349, None, u'Identifier', u'size'], [2309337, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2309354, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [2309364, None, u'IdentifierDeclType', u'ModuleManager &'], [2309363, None, u'Identifier', u'ModuleMgr'], [2309355, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [2309362, None, u'Identifier', u'ModuleMgr'], [2309356, None, u'CallExpression', u'Reader . getModuleManager ( )'], [2309358, None, u'Callee', u'Reader . getModuleManager'], [2309357, None, u'ArgumentList', u''], [2309359, None, u'MemberAccess', u'Reader . getModuleManager'], [2309361, None, u'Identifier', u'Reader'], [2309360, None, u'Identifier', u'getModuleManager'], [2309353, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"[[2254852, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )']]","[[2254853, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2254866, None, u'Callee', u'assert'], [2254854, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254867, None, u'Identifier', u'assert'], [2254855, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254856, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254858, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2254857, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2254860, None, u'CallExpression', u'ModuleMgr . size ( )'], [2254859, None, u'PrimaryExpression', u'1'], [2254862, None, u'Callee', u'ModuleMgr . size'], [2254861, None, u'ArgumentList', u''], [2254863, None, u'MemberAccess', u'ModuleMgr . size'], [2254865, None, u'Identifier', u'ModuleMgr'], [2254864, None, u'Identifier', u'size'], [2254852, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2254929, u'True', u'CFGEntryNode', u'ENTRY']]","[[2254853, None, u'CallExpression', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2254866, None, u'Callee', u'assert'], [2254854, None, u'ArgumentList', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254867, None, u'Identifier', u'assert'], [2254855, None, u'Argument', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254856, None, u'AndExpression', u'ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then""'], [2254858, None, u'RelationalExpression', u'ModuleMgr . size ( ) >= 1'], [2254857, None, u'PrimaryExpression', u'""what ASTFile is this then""'], [2254860, None, u'CallExpression', u'ModuleMgr . size ( )'], [2254859, None, u'PrimaryExpression', u'1'], [2254862, None, u'Callee', u'ModuleMgr . size'], [2254861, None, u'ArgumentList', u''], [2254863, None, u'MemberAccess', u'ModuleMgr . size'], [2254865, None, u'Identifier', u'ModuleMgr'], [2254864, None, u'Identifier', u'size'], [2254852, u'True', u'ExpressionStatement', u'assert ( ModuleMgr . size ( ) >= 1 && ""what ASTFile is this then"" )'], [2254869, None, u'IdentifierDecl', u'& ModuleMgr = Reader . getModuleManager ( )'], [2254879, None, u'IdentifierDeclType', u'ModuleManager &'], [2254878, None, u'Identifier', u'ModuleMgr'], [2254870, None, u'AssignmentExpr', u'& ModuleMgr = Reader . getModuleManager ( )'], [2254877, None, u'Identifier', u'ModuleMgr'], [2254871, None, u'CallExpression', u'Reader . getModuleManager ( )'], [2254873, None, u'Callee', u'Reader . getModuleManager'], [2254872, None, u'ArgumentList', u''], [2254874, None, u'MemberAccess', u'Reader . getModuleManager'], [2254876, None, u'Identifier', u'Reader'], [2254875, None, u'Identifier', u'getModuleManager'], [2254868, u'True', u'IdentifierDeclStatement', u'ModuleManager & ModuleMgr = Reader . getModuleManager ( ) ;']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2717409, u'True', u'Parameter', u'Preprocessor & PP'], [2717409, u'True', u'Parameter', u'Preprocessor & PP']]","[[2717411, None, u'ParameterType', u'Preprocessor &'], [2717410, None, u'Identifier', u'PP'], [2717409, u'True', u'Parameter', u'Preprocessor & PP'], [2717751, u'True', u'CFGEntryNode', u'ENTRY'], [2717411, None, u'ParameterType', u'Preprocessor &'], [2717410, None, u'Identifier', u'PP'], [2717409, u'True', u'Parameter', u'Preprocessor & PP'], [2717751, u'True', u'CFGEntryNode', u'ENTRY']]","[[2717411, None, u'ParameterType', u'Preprocessor &'], [2717410, None, u'Identifier', u'PP'], [2717409, u'True', u'Parameter', u'Preprocessor & PP'], [2717411, None, u'ParameterType', u'Preprocessor &'], [2717410, None, u'Identifier', u'PP'], [2717409, u'True', u'Parameter', u'Preprocessor & PP']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2717423, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Diags , WritingModule )']]","[[2717424, None, u'CallExpression', u'WritePragmaDiagnosticMappings ( Diags , WritingModule )'], [2717430, None, u'Callee', u'WritePragmaDiagnosticMappings'], [2717425, None, u'ArgumentList', u'Diags'], [2717431, None, u'Identifier', u'WritePragmaDiagnosticMappings'], [2717428, None, u'Argument', u'Diags'], [2717426, None, u'Argument', u'WritingModule'], [2717429, None, u'Identifier', u'Diags'], [2717427, None, u'Identifier', u'WritingModule'], [2717423, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Diags , WritingModule )'], [2717751, u'True', u'CFGEntryNode', u'ENTRY']]","[[2717424, None, u'CallExpression', u'WritePragmaDiagnosticMappings ( Diags , WritingModule )'], [2717430, None, u'Callee', u'WritePragmaDiagnosticMappings'], [2717425, None, u'ArgumentList', u'Diags'], [2717431, None, u'Identifier', u'WritePragmaDiagnosticMappings'], [2717428, None, u'Argument', u'Diags'], [2717426, None, u'Argument', u'WritingModule'], [2717429, None, u'Identifier', u'Diags'], [2717427, None, u'Identifier', u'WritingModule'], [2717423, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Diags , WritingModule )']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"[[2756627, u'True', u'Parameter', u'Preprocessor & PP'], [2756627, u'True', u'Parameter', u'Preprocessor & PP']]","[[2756629, None, u'ParameterType', u'Preprocessor &'], [2756628, None, u'Identifier', u'PP'], [2756627, u'True', u'Parameter', u'Preprocessor & PP'], [2759186, u'True', u'CFGEntryNode', u'ENTRY'], [2756629, None, u'ParameterType', u'Preprocessor &'], [2756628, None, u'Identifier', u'PP'], [2756627, u'True', u'Parameter', u'Preprocessor & PP'], [2759186, u'True', u'CFGEntryNode', u'ENTRY']]","[[2756629, None, u'ParameterType', u'Preprocessor &'], [2756628, None, u'Identifier', u'PP'], [2756627, u'True', u'Parameter', u'Preprocessor & PP'], [2756629, None, u'ParameterType', u'Preprocessor &'], [2756628, None, u'Identifier', u'PP'], [2756627, u'True', u'Parameter', u'Preprocessor & PP']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2717798, u'True', u'Parameter', u'ASTContext & Context']]","[[2717803, None, u'ParameterType', u'Preprocessor &'], [2717802, None, u'Identifier', u'PP'], [2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2720131, u'True', u'CFGEntryNode', u'ENTRY'], [2717803, None, u'ParameterType', u'Preprocessor &'], [2717802, None, u'Identifier', u'PP'], [2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2720131, u'True', u'CFGEntryNode', u'ENTRY'], [2717800, None, u'ParameterType', u'ASTContext &'], [2717799, None, u'Identifier', u'Context'], [2717798, u'True', u'Parameter', u'ASTContext & Context'], [2720131, u'True', u'CFGEntryNode', u'ENTRY']]","[[2717803, None, u'ParameterType', u'Preprocessor &'], [2717802, None, u'Identifier', u'PP'], [2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2717803, None, u'ParameterType', u'Preprocessor &'], [2717802, None, u'Identifier', u'PP'], [2717801, u'True', u'Parameter', u'Preprocessor & PP'], [2717800, None, u'ParameterType', u'ASTContext &'], [2717799, None, u'Identifier', u'Context'], [2717798, u'True', u'Parameter', u'ASTContext & Context']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"[[2775409, u'True', u'Parameter', u'Sema & SemaRef'], [2775406, u'True', u'Parameter', u'const std :: string & OutputFile'], [2775409, u'True', u'Parameter', u'Sema & SemaRef']]","[[2775411, None, u'ParameterType', u'Sema &'], [2775410, None, u'Identifier', u'SemaRef'], [2775409, u'True', u'Parameter', u'Sema & SemaRef'], [2775548, u'True', u'CFGEntryNode', u'ENTRY'], [2775408, None, u'ParameterType', u'const std :: string &'], [2775407, None, u'Identifier', u'OutputFile'], [2775406, u'True', u'Parameter', u'const std :: string & OutputFile'], [2775548, u'True', u'CFGEntryNode', u'ENTRY'], [2775411, None, u'ParameterType', u'Sema &'], [2775410, None, u'Identifier', u'SemaRef'], [2775409, u'True', u'Parameter', u'Sema & SemaRef'], [2775548, u'True', u'CFGEntryNode', u'ENTRY']]","[[2775411, None, u'ParameterType', u'Sema &'], [2775410, None, u'Identifier', u'SemaRef'], [2775409, u'True', u'Parameter', u'Sema & SemaRef'], [2775408, None, u'ParameterType', u'const std :: string &'], [2775407, None, u'Identifier', u'OutputFile'], [2775406, u'True', u'Parameter', u'const std :: string & OutputFile'], [2775411, None, u'ParameterType', u'Sema &'], [2775410, None, u'Identifier', u'SemaRef'], [2775409, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2736338, u'True', u'Parameter', u'Sema & SemaRef'], [2736338, u'True', u'Parameter', u'Sema & SemaRef']]","[[2736340, None, u'ParameterType', u'Sema &'], [2736339, None, u'Identifier', u'SemaRef'], [2736338, u'True', u'Parameter', u'Sema & SemaRef'], [2736477, u'True', u'CFGEntryNode', u'ENTRY'], [2736340, None, u'ParameterType', u'Sema &'], [2736339, None, u'Identifier', u'SemaRef'], [2736338, u'True', u'Parameter', u'Sema & SemaRef'], [2736477, u'True', u'CFGEntryNode', u'ENTRY']]","[[2736340, None, u'ParameterType', u'Sema &'], [2736339, None, u'Identifier', u'SemaRef'], [2736338, u'True', u'Parameter', u'Sema & SemaRef'], [2736340, None, u'ParameterType', u'Sema &'], [2736339, None, u'Identifier', u'SemaRef'], [2736338, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"[[2775660, u'True', u'Parameter', u'Sema & SemaRef'], [2775657, u'True', u'Parameter', u'StringRef isysroot'], [2775660, u'True', u'Parameter', u'Sema & SemaRef']]","[[2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef'], [2778576, u'True', u'CFGEntryNode', u'ENTRY'], [2775659, None, u'ParameterType', u'StringRef'], [2775658, None, u'Identifier', u'isysroot'], [2775657, u'True', u'Parameter', u'StringRef isysroot'], [2778576, u'True', u'CFGEntryNode', u'ENTRY'], [2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef'], [2778576, u'True', u'CFGEntryNode', u'ENTRY']]","[[2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef'], [2775659, None, u'ParameterType', u'StringRef'], [2775658, None, u'Identifier', u'isysroot'], [2775657, u'True', u'Parameter', u'StringRef isysroot'], [2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2736589, u'True', u'Parameter', u'Sema & SemaRef'], [2736586, u'True', u'Parameter', u'StringRef isysroot'], [2736589, u'True', u'Parameter', u'Sema & SemaRef']]","[[2736591, None, u'ParameterType', u'Sema &'], [2736590, None, u'Identifier', u'SemaRef'], [2736589, u'True', u'Parameter', u'Sema & SemaRef'], [2739493, u'True', u'CFGEntryNode', u'ENTRY'], [2736588, None, u'ParameterType', u'StringRef'], [2736587, None, u'Identifier', u'isysroot'], [2736586, u'True', u'Parameter', u'StringRef isysroot'], [2739493, u'True', u'CFGEntryNode', u'ENTRY'], [2736591, None, u'ParameterType', u'Sema &'], [2736590, None, u'Identifier', u'SemaRef'], [2736589, u'True', u'Parameter', u'Sema & SemaRef'], [2739493, u'True', u'CFGEntryNode', u'ENTRY']]","[[2736591, None, u'ParameterType', u'Sema &'], [2736590, None, u'Identifier', u'SemaRef'], [2736589, u'True', u'Parameter', u'Sema & SemaRef'], [2736588, None, u'ParameterType', u'StringRef'], [2736587, None, u'Identifier', u'isysroot'], [2736586, u'True', u'Parameter', u'StringRef isysroot'], [2736591, None, u'ParameterType', u'Sema &'], [2736590, None, u'Identifier', u'SemaRef'], [2736589, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"[[2777705, u'True', u'IdentifierDeclStatement', u'uint64_t Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile ) ;']]","[[2777706, None, u'IdentifierDecl', u'Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777722, None, u'IdentifierDeclType', u'uint64_t'], [2777721, None, u'Identifier', u'Signature'], [2777707, None, u'AssignmentExpr', u'Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777720, None, u'Identifier', u'Signature'], [2777708, None, u'CallExpression', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777718, None, u'Callee', u'WriteControlBlock'], [2777709, None, u'ArgumentList', u'PP'], [2777719, None, u'Identifier', u'WriteControlBlock'], [2777716, None, u'Argument', u'PP'], [2777714, None, u'Argument', u'Context'], [2777712, None, u'Argument', u'isysroot'], [2777710, None, u'Argument', u'OutputFile'], [2777717, None, u'Identifier', u'PP'], [2777715, None, u'Identifier', u'Context'], [2777713, None, u'Identifier', u'isysroot'], [2777711, None, u'Identifier', u'OutputFile'], [2777705, u'True', u'IdentifierDeclStatement', u'uint64_t Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile ) ;'], [2778576, u'True', u'CFGEntryNode', u'ENTRY']]","[[2777706, None, u'IdentifierDecl', u'Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777722, None, u'IdentifierDeclType', u'uint64_t'], [2777721, None, u'Identifier', u'Signature'], [2777707, None, u'AssignmentExpr', u'Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777720, None, u'Identifier', u'Signature'], [2777708, None, u'CallExpression', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2777718, None, u'Callee', u'WriteControlBlock'], [2777709, None, u'ArgumentList', u'PP'], [2777719, None, u'Identifier', u'WriteControlBlock'], [2777716, None, u'Argument', u'PP'], [2777714, None, u'Argument', u'Context'], [2777712, None, u'Argument', u'isysroot'], [2777710, None, u'Argument', u'OutputFile'], [2777717, None, u'Identifier', u'PP'], [2777715, None, u'Identifier', u'Context'], [2777713, None, u'Identifier', u'isysroot'], [2777711, None, u'Identifier', u'OutputFile'], [2777705, u'True', u'IdentifierDeclStatement', u'uint64_t Signature = WriteControlBlock ( PP , Context , isysroot , OutputFile ) ;'], [2775659, None, u'ParameterType', u'StringRef'], [2775658, None, u'Identifier', u'isysroot'], [2775657, u'True', u'Parameter', u'StringRef isysroot'], [2778545, None, u'IdentifierDecl', u'& Context = SemaRef . Context'], [2778552, None, u'IdentifierDeclType', u'ASTContext &'], [2778551, None, u'Identifier', u'Context'], [2778546, None, u'AssignmentExpr', u'& Context = SemaRef . Context'], [2778550, None, u'Identifier', u'Context'], [2778547, None, u'MemberAccess', u'SemaRef . Context'], [2778549, None, u'Identifier', u'SemaRef'], [2778548, None, u'Identifier', u'Context'], [2778544, u'True', u'IdentifierDeclStatement', u'ASTContext & Context = SemaRef . Context ;'], [2778536, None, u'IdentifierDecl', u'& PP = SemaRef . PP'], [2778543, None, u'IdentifierDeclType', u'Preprocessor &'], [2778542, None, u'Identifier', u'PP'], [2778537, None, u'AssignmentExpr', u'& PP = SemaRef . PP'], [2778541, None, u'Identifier', u'PP'], [2778538, None, u'MemberAccess', u'SemaRef . PP'], [2778540, None, u'Identifier', u'SemaRef'], [2778539, None, u'Identifier', u'PP'], [2778535, u'True', u'IdentifierDeclStatement', u'Preprocessor & PP = SemaRef . PP ;'], [2775656, None, u'ParameterType', u'const std :: string &'], [2775655, None, u'Identifier', u'OutputFile'], [2775654, u'True', u'Parameter', u'const std :: string & OutputFile'], [2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"[[2738627, u'True', u'ExpressionStatement', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )']]","[[2738628, None, u'CallExpression', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2738638, None, u'Callee', u'WriteControlBlock'], [2738629, None, u'ArgumentList', u'PP'], [2738639, None, u'Identifier', u'WriteControlBlock'], [2738636, None, u'Argument', u'PP'], [2738634, None, u'Argument', u'Context'], [2738632, None, u'Argument', u'isysroot'], [2738630, None, u'Argument', u'OutputFile'], [2738637, None, u'Identifier', u'PP'], [2738635, None, u'Identifier', u'Context'], [2738633, None, u'Identifier', u'isysroot'], [2738631, None, u'Identifier', u'OutputFile'], [2738627, u'True', u'ExpressionStatement', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2739493, u'True', u'CFGEntryNode', u'ENTRY']]","[[2738628, None, u'CallExpression', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2738638, None, u'Callee', u'WriteControlBlock'], [2738629, None, u'ArgumentList', u'PP'], [2738639, None, u'Identifier', u'WriteControlBlock'], [2738636, None, u'Argument', u'PP'], [2738634, None, u'Argument', u'Context'], [2738632, None, u'Argument', u'isysroot'], [2738630, None, u'Argument', u'OutputFile'], [2738637, None, u'Identifier', u'PP'], [2738635, None, u'Identifier', u'Context'], [2738633, None, u'Identifier', u'isysroot'], [2738631, None, u'Identifier', u'OutputFile'], [2738627, u'True', u'ExpressionStatement', u'WriteControlBlock ( PP , Context , isysroot , OutputFile )'], [2736588, None, u'ParameterType', u'StringRef'], [2736587, None, u'Identifier', u'isysroot'], [2736586, u'True', u'Parameter', u'StringRef isysroot'], [2739462, None, u'IdentifierDecl', u'& Context = SemaRef . Context'], [2739469, None, u'IdentifierDeclType', u'ASTContext &'], [2739468, None, u'Identifier', u'Context'], [2739463, None, u'AssignmentExpr', u'& Context = SemaRef . Context'], [2739467, None, u'Identifier', u'Context'], [2739464, None, u'MemberAccess', u'SemaRef . Context'], [2739466, None, u'Identifier', u'SemaRef'], [2739465, None, u'Identifier', u'Context'], [2739461, u'True', u'IdentifierDeclStatement', u'ASTContext & Context = SemaRef . Context ;'], [2739453, None, u'IdentifierDecl', u'& PP = SemaRef . PP'], [2739460, None, u'IdentifierDeclType', u'Preprocessor &'], [2739459, None, u'Identifier', u'PP'], [2739454, None, u'AssignmentExpr', u'& PP = SemaRef . PP'], [2739458, None, u'Identifier', u'PP'], [2739455, None, u'MemberAccess', u'SemaRef . PP'], [2739457, None, u'Identifier', u'SemaRef'], [2739456, None, u'Identifier', u'PP'], [2739452, u'True', u'IdentifierDeclStatement', u'Preprocessor & PP = SemaRef . PP ;'], [2736585, None, u'ParameterType', u'const std :: string &'], [2736584, None, u'Identifier', u'OutputFile'], [2736583, u'True', u'Parameter', u'const std :: string & OutputFile'], [2736591, None, u'ParameterType', u'Sema &'], [2736590, None, u'Identifier', u'SemaRef'], [2736589, u'True', u'Parameter', u'Sema & SemaRef']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"[[2776352, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Context . getDiagnostics ( ) , isModule )']]","[[2776353, None, u'CallExpression', u'WritePragmaDiagnosticMappings ( Context . getDiagnostics ( ) , isModule )'], [2776364, None, u'Callee', u'WritePragmaDiagnosticMappings'], [2776354, None, u'ArgumentList', u'Context . getDiagnostics ( )'], [2776365, None, u'Identifier', u'WritePragmaDiagnosticMappings'], [2776357, None, u'Argument', u'Context . getDiagnostics ( )'], [2776355, None, u'Argument', u'isModule'], [2776358, None, u'CallExpression', u'Context . getDiagnostics ( )'], [2776356, None, u'Identifier', u'isModule'], [2776360, None, u'Callee', u'Context . getDiagnostics'], [2776359, None, u'ArgumentList', u''], [2776361, None, u'MemberAccess', u'Context . getDiagnostics'], [2776363, None, u'Identifier', u'Context'], [2776362, None, u'Identifier', u'getDiagnostics'], [2776352, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Context . getDiagnostics ( ) , isModule )'], [2778576, u'True', u'CFGEntryNode', u'ENTRY']]","[[2776353, None, u'CallExpression', u'WritePragmaDiagnosticMappings ( Context . getDiagnostics ( ) , isModule )'], [2776364, None, u'Callee', u'WritePragmaDiagnosticMappings'], [2776354, None, u'ArgumentList', u'Context . getDiagnostics ( )'], [2776365, None, u'Identifier', u'WritePragmaDiagnosticMappings'], [2776357, None, u'Argument', u'Context . getDiagnostics ( )'], [2776355, None, u'Argument', u'isModule'], [2776358, None, u'CallExpression', u'Context . getDiagnostics ( )'], [2776356, None, u'Identifier', u'isModule'], [2776360, None, u'Callee', u'Context . getDiagnostics'], [2776359, None, u'ArgumentList', u''], [2776361, None, u'MemberAccess', u'Context . getDiagnostics'], [2776363, None, u'Identifier', u'Context'], [2776362, None, u'Identifier', u'getDiagnostics'], [2776352, u'True', u'ExpressionStatement', u'WritePragmaDiagnosticMappings ( Context . getDiagnostics ( ) , isModule )'], [2778545, None, u'IdentifierDecl', u'& Context = SemaRef . Context'], [2778552, None, u'IdentifierDeclType', u'ASTContext &'], [2778551, None, u'Identifier', u'Context'], [2778546, None, u'AssignmentExpr', u'& Context = SemaRef . Context'], [2778550, None, u'Identifier', u'Context'], [2778547, None, u'MemberAccess', u'SemaRef . Context'], [2778549, None, u'Identifier', u'SemaRef'], [2778548, None, u'Identifier', u'Context'], [2778544, u'True', u'IdentifierDeclStatement', u'ASTContext & Context = SemaRef . Context ;'], [2778564, None, u'IdentifierDecl', u'isModule = WritingModule != nullptr'], [2778571, None, u'IdentifierDeclType', u'bool'], [2778570, None, u'Identifier', u'isModule'], [2778565, None, u'AssignmentExpr', u'isModule = WritingModule != nullptr'], [2778569, None, u'Identifier', u'isModule'], [2778566, None, u'EqualityExpression', u'WritingModule != nullptr'], [2778568, None, u'Identifier', u'WritingModule'], [2778567, None, u'Identifier', u'nullptr'], [2778563, u'True', u'IdentifierDeclStatement', u'bool isModule = WritingModule != nullptr ;'], [2775662, None, u'ParameterType', u'Sema &'], [2775661, None, u'Identifier', u'SemaRef'], [2775660, u'True', u'Parameter', u'Sema & SemaRef'], [2775653, None, u'ParameterType', u'Module *'], [2775652, None, u'Identifier', u'WritingModule'], [2775651, u'True', u'Parameter', u'Module * WritingModule']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,-,"[[2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream']]","[[2793925, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2793924, None, u'Identifier', u'Stream'], [2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2794425, u'True', u'CFGEntryNode', u'ENTRY'], [2793925, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2793924, None, u'Identifier', u'Stream'], [2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2794425, u'True', u'CFGEntryNode', u'ENTRY']]","[[2793925, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2793924, None, u'Identifier', u'Stream'], [2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2793925, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2793924, None, u'Identifier', u'Stream'], [2793923, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream']]"
"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,+,"[[2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream']]","[[2789996, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2789995, None, u'Identifier', u'Stream'], [2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2790577, u'True', u'CFGEntryNode', u'ENTRY'], [2789996, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2789995, None, u'Identifier', u'Stream'], [2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2790577, u'True', u'CFGEntryNode', u'ENTRY']]","[[2789996, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2789995, None, u'Identifier', u'Stream'], [2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream'], [2789996, None, u'ParameterType', u'llvm :: BitstreamWriter &'], [2789995, None, u'Identifier', u'Stream'], [2789994, u'True', u'Parameter', u'llvm :: BitstreamWriter & Stream']]"
"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,-,"[[2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821400, u'True', u'Parameter', u'raw_ostream & OS']]","[[2821405, None, u'ParameterType', u'const NamedDecl *'], [2821404, None, u'Identifier', u'D'], [2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821436, u'True', u'CFGEntryNode', u'ENTRY'], [2821405, None, u'ParameterType', u'const NamedDecl *'], [2821404, None, u'Identifier', u'D'], [2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821436, u'True', u'CFGEntryNode', u'ENTRY'], [2821402, None, u'ParameterType', u'raw_ostream &'], [2821401, None, u'Identifier', u'OS'], [2821400, u'True', u'Parameter', u'raw_ostream & OS'], [2821436, u'True', u'CFGEntryNode', u'ENTRY']]","[[2821405, None, u'ParameterType', u'const NamedDecl *'], [2821404, None, u'Identifier', u'D'], [2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821405, None, u'ParameterType', u'const NamedDecl *'], [2821404, None, u'Identifier', u'D'], [2821403, u'True', u'Parameter', u'const NamedDecl * D'], [2821402, None, u'ParameterType', u'raw_ostream &'], [2821401, None, u'Identifier', u'OS'], [2821400, u'True', u'Parameter', u'raw_ostream & OS']]"
"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,+,"[[2812133, u'True', u'Parameter', u'NamedDecl * D'], [2812130, u'True', u'Parameter', u'raw_ostream & OS'], [2812133, u'True', u'Parameter', u'NamedDecl * D']]","[[2812135, None, u'ParameterType', u'NamedDecl *'], [2812134, None, u'Identifier', u'D'], [2812133, u'True', u'Parameter', u'NamedDecl * D'], [2812187, u'True', u'CFGEntryNode', u'ENTRY'], [2812132, None, u'ParameterType', u'raw_ostream &'], [2812131, None, u'Identifier', u'OS'], [2812130, u'True', u'Parameter', u'raw_ostream & OS'], [2812187, u'True', u'CFGEntryNode', u'ENTRY'], [2812135, None, u'ParameterType', u'NamedDecl *'], [2812134, None, u'Identifier', u'D'], [2812133, u'True', u'Parameter', u'NamedDecl * D'], [2812187, u'True', u'CFGEntryNode', u'ENTRY']]","[[2812135, None, u'ParameterType', u'NamedDecl *'], [2812134, None, u'Identifier', u'D'], [2812133, u'True', u'Parameter', u'NamedDecl * D'], [2812132, None, u'ParameterType', u'raw_ostream &'], [2812131, None, u'Identifier', u'OS'], [2812130, u'True', u'Parameter', u'raw_ostream & OS'], [2812135, None, u'ParameterType', u'NamedDecl *'], [2812134, None, u'Identifier', u'D'], [2812133, u'True', u'Parameter', u'NamedDecl * D']]"
"Defensively ensure that GetExternalDeclStmt protects itself from nested deserialization

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297322 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"[[2881352, u'True', u'ExpressionStatement', u'assert ( NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing"" )']]","[[2881353, None, u'CallExpression', u'assert ( NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing"" )'], [2881361, None, u'Callee', u'assert'], [2881354, None, u'ArgumentList', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881362, None, u'Identifier', u'assert'], [2881355, None, u'Argument', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881356, None, u'AndExpression', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881358, None, u'EqualityExpression', u'NumCurrentElementsDeserializing == 0'], [2881357, None, u'PrimaryExpression', u'""should not be called while already deserializing""'], [2881360, None, u'Identifier', u'NumCurrentElementsDeserializing'], [2881359, None, u'PrimaryExpression', u'0'], [2881352, u'True', u'ExpressionStatement', u'assert ( NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing"" )'], [2881395, u'True', u'CFGEntryNode', u'ENTRY']]","[[2881353, None, u'CallExpression', u'assert ( NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing"" )'], [2881361, None, u'Callee', u'assert'], [2881354, None, u'ArgumentList', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881362, None, u'Identifier', u'assert'], [2881355, None, u'Argument', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881356, None, u'AndExpression', u'NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing""'], [2881358, None, u'EqualityExpression', u'NumCurrentElementsDeserializing == 0'], [2881357, None, u'PrimaryExpression', u'""should not be called while already deserializing""'], [2881360, None, u'Identifier', u'NumCurrentElementsDeserializing'], [2881359, None, u'PrimaryExpression', u'0'], [2881352, u'True', u'ExpressionStatement', u'assert ( NumCurrentElementsDeserializing == 0 && ""should not be called while already deserializing"" )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"[[2975777, u'True', u'ExpressionStatement', u'assert ( Name . startswith ( ""m"" ) && ""Invalid feature name."" )']]","[[2975778, None, u'CallExpression', u'assert ( Name . startswith ( ""m"" ) && ""Invalid feature name."" )'], [2975791, None, u'Callee', u'assert'], [2975779, None, u'ArgumentList', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975792, None, u'Identifier', u'assert'], [2975780, None, u'Argument', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975781, None, u'AndExpression', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975783, None, u'CallExpression', u'Name . startswith ( ""m"" )'], [2975782, None, u'PrimaryExpression', u'""Invalid feature name.""'], [2975787, None, u'Callee', u'Name . startswith'], [2975784, None, u'ArgumentList', u'""m""'], [2975788, None, u'MemberAccess', u'Name . startswith'], [2975785, None, u'Argument', u'""m""'], [2975790, None, u'Identifier', u'Name'], [2975789, None, u'Identifier', u'startswith'], [2975786, None, u'PrimaryExpression', u'""m""'], [2975777, u'True', u'ExpressionStatement', u'assert ( Name . startswith ( ""m"" ) && ""Invalid feature name."" )'], [2975831, u'True', u'CFGEntryNode', u'ENTRY']]","[[2975778, None, u'CallExpression', u'assert ( Name . startswith ( ""m"" ) && ""Invalid feature name."" )'], [2975791, None, u'Callee', u'assert'], [2975779, None, u'ArgumentList', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975792, None, u'Identifier', u'assert'], [2975780, None, u'Argument', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975781, None, u'AndExpression', u'Name . startswith ( ""m"" ) && ""Invalid feature name.""'], [2975783, None, u'CallExpression', u'Name . startswith ( ""m"" )'], [2975782, None, u'PrimaryExpression', u'""Invalid feature name.""'], [2975787, None, u'Callee', u'Name . startswith'], [2975784, None, u'ArgumentList', u'""m""'], [2975788, None, u'MemberAccess', u'Name . startswith'], [2975785, None, u'Argument', u'""m""'], [2975790, None, u'Identifier', u'Name'], [2975789, None, u'Identifier', u'startswith'], [2975786, None, u'PrimaryExpression', u'""m""'], [2975777, u'True', u'ExpressionStatement', u'assert ( Name . startswith ( ""m"" ) && ""Invalid feature name."" )'], [2975801, None, u'IdentifierDecl', u'Name = A -> getOption ( ) . getName ( )'], [2975816, None, u'IdentifierDeclType', u'StringRef'], [2975815, None, u'Identifier', u'Name'], [2975802, None, u'AssignmentExpr', u'Name = A -> getOption ( ) . getName ( )'], [2975814, None, u'Identifier', u'Name'], [2975803, None, u'CallExpression', u'A -> getOption ( ) . getName ( )'], [2975805, None, u'Callee', u'A -> getOption ( ) . getName'], [2975804, None, u'ArgumentList', u''], [2975806, None, u'MemberAccess', u'A -> getOption ( ) . getName'], [2975808, None, u'CallExpression', u'A -> getOption ( )'], [2975807, None, u'Identifier', u'getName'], [2975810, None, u'Callee', u'A -> getOption'], [2975809, None, u'ArgumentList', u''], [2975811, None, u'PtrMemberAccess', u'A -> getOption'], [2975813, None, u'Identifier', u'A'], [2975812, None, u'Identifier', u'getOption'], [2975800, u'True', u'IdentifierDeclStatement', u'StringRef Name = A -> getOption ( ) . getName ( ) ;']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"[[2979211, u'True', u'Parameter', u'const ArgList & Args'], [2979208, u'True', u'Parameter', u'const InputInfo & Input'], [2979211, u'True', u'Parameter', u'const ArgList & Args']]","[[2979213, None, u'ParameterType', u'const ArgList &'], [2979212, None, u'Identifier', u'Args'], [2979211, u'True', u'Parameter', u'const ArgList & Args'], [2979322, u'True', u'CFGEntryNode', u'ENTRY'], [2979210, None, u'ParameterType', u'const InputInfo &'], [2979209, None, u'Identifier', u'Input'], [2979208, u'True', u'Parameter', u'const InputInfo & Input'], [2979322, u'True', u'CFGEntryNode', u'ENTRY'], [2979213, None, u'ParameterType', u'const ArgList &'], [2979212, None, u'Identifier', u'Args'], [2979211, u'True', u'Parameter', u'const ArgList & Args'], [2979322, u'True', u'CFGEntryNode', u'ENTRY']]","[[2979213, None, u'ParameterType', u'const ArgList &'], [2979212, None, u'Identifier', u'Args'], [2979211, u'True', u'Parameter', u'const ArgList & Args'], [2979210, None, u'ParameterType', u'const InputInfo &'], [2979209, None, u'Identifier', u'Input'], [2979208, u'True', u'Parameter', u'const InputInfo & Input'], [2979213, None, u'ParameterType', u'const ArgList &'], [2979212, None, u'Identifier', u'Args'], [2979211, u'True', u'Parameter', u'const ArgList & Args']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"[[2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979351, u'True', u'Parameter', u'const Tool & T'], [2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979354, u'True', u'Parameter', u'Compilation & C']]","[[2979359, None, u'ParameterType', u'const ToolChain &'], [2979358, None, u'Identifier', u'TC'], [2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979507, u'True', u'CFGEntryNode', u'ENTRY'], [2979353, None, u'ParameterType', u'const Tool &'], [2979352, None, u'Identifier', u'T'], [2979351, u'True', u'Parameter', u'const Tool & T'], [2979507, u'True', u'CFGEntryNode', u'ENTRY'], [2979359, None, u'ParameterType', u'const ToolChain &'], [2979358, None, u'Identifier', u'TC'], [2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979507, u'True', u'CFGEntryNode', u'ENTRY'], [2979356, None, u'ParameterType', u'Compilation &'], [2979355, None, u'Identifier', u'C'], [2979354, u'True', u'Parameter', u'Compilation & C'], [2979507, u'True', u'CFGEntryNode', u'ENTRY']]","[[2979359, None, u'ParameterType', u'const ToolChain &'], [2979358, None, u'Identifier', u'TC'], [2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979353, None, u'ParameterType', u'const Tool &'], [2979352, None, u'Identifier', u'T'], [2979351, u'True', u'Parameter', u'const Tool & T'], [2979359, None, u'ParameterType', u'const ToolChain &'], [2979358, None, u'Identifier', u'TC'], [2979357, u'True', u'Parameter', u'const ToolChain & TC'], [2979356, None, u'ParameterType', u'Compilation &'], [2979355, None, u'Identifier', u'C'], [2979354, u'True', u'Parameter', u'Compilation & C']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2982329, u'True', u'Parameter', u'raw_ostream & OS'], [2982329, u'True', u'Parameter', u'raw_ostream & OS']]","[[2982331, None, u'ParameterType', u'raw_ostream &'], [2982330, None, u'Identifier', u'OS'], [2982329, u'True', u'Parameter', u'raw_ostream & OS'], [2982357, u'True', u'CFGEntryNode', u'ENTRY'], [2982331, None, u'ParameterType', u'raw_ostream &'], [2982330, None, u'Identifier', u'OS'], [2982329, u'True', u'Parameter', u'raw_ostream & OS'], [2982357, u'True', u'CFGEntryNode', u'ENTRY']]","[[2982331, None, u'ParameterType', u'raw_ostream &'], [2982330, None, u'Identifier', u'OS'], [2982329, u'True', u'Parameter', u'raw_ostream & OS'], [2982331, None, u'ParameterType', u'raw_ostream &'], [2982330, None, u'Identifier', u'OS'], [2982329, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2982893, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )']]","[[2982894, None, u'CallExpression', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2982910, None, u'Callee', u'assert'], [2982895, None, u'ArgumentList', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982911, None, u'Identifier', u'assert'], [2982896, None, u'Argument', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982897, None, u'AndExpression', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982899, None, u'CallExpression', u'TC . getTriple ( ) . isNVPTX ( )'], [2982898, None, u'PrimaryExpression', u'""Wrong platform""'], [2982901, None, u'Callee', u'TC . getTriple ( ) . isNVPTX'], [2982900, None, u'ArgumentList', u''], [2982902, None, u'MemberAccess', u'TC . getTriple ( ) . isNVPTX'], [2982904, None, u'CallExpression', u'TC . getTriple ( )'], [2982903, None, u'Identifier', u'isNVPTX'], [2982906, None, u'Callee', u'TC . getTriple'], [2982905, None, u'ArgumentList', u''], [2982907, None, u'MemberAccess', u'TC . getTriple'], [2982909, None, u'Identifier', u'TC'], [2982908, None, u'Identifier', u'getTriple'], [2982893, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2982930, u'True', u'CFGEntryNode', u'ENTRY']]","[[2982894, None, u'CallExpression', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2982910, None, u'Callee', u'assert'], [2982895, None, u'ArgumentList', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982911, None, u'Identifier', u'assert'], [2982896, None, u'Argument', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982897, None, u'AndExpression', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2982899, None, u'CallExpression', u'TC . getTriple ( ) . isNVPTX ( )'], [2982898, None, u'PrimaryExpression', u'""Wrong platform""'], [2982901, None, u'Callee', u'TC . getTriple ( ) . isNVPTX'], [2982900, None, u'ArgumentList', u''], [2982902, None, u'MemberAccess', u'TC . getTriple ( ) . isNVPTX'], [2982904, None, u'CallExpression', u'TC . getTriple ( )'], [2982903, None, u'Identifier', u'isNVPTX'], [2982906, None, u'Callee', u'TC . getTriple'], [2982905, None, u'ArgumentList', u''], [2982907, None, u'MemberAccess', u'TC . getTriple'], [2982909, None, u'Identifier', u'TC'], [2982908, None, u'Identifier', u'getTriple'], [2982893, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2982865, u'True', u'ExpressionStatement', u'assert ( gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture."" )']]","[[2982866, None, u'CallExpression', u'assert ( gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture."" )'], [2982874, None, u'Callee', u'assert'], [2982867, None, u'ArgumentList', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982875, None, u'Identifier', u'assert'], [2982868, None, u'Argument', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982869, None, u'AndExpression', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982871, None, u'EqualityExpression', u'gpu_arch != CudaArch :: UNKNOWN'], [2982870, None, u'PrimaryExpression', u'""Device action expected to have an architecture.""'], [2982873, None, u'Identifier', u'gpu_arch'], [2982872, None, u'Identifier', u'CudaArch :: UNKNOWN'], [2982865, u'True', u'ExpressionStatement', u'assert ( gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture."" )'], [2982930, u'True', u'CFGEntryNode', u'ENTRY']]","[[2982866, None, u'CallExpression', u'assert ( gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture."" )'], [2982874, None, u'Callee', u'assert'], [2982867, None, u'ArgumentList', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982875, None, u'Identifier', u'assert'], [2982868, None, u'Argument', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982869, None, u'AndExpression', u'gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture.""'], [2982871, None, u'EqualityExpression', u'gpu_arch != CudaArch :: UNKNOWN'], [2982870, None, u'PrimaryExpression', u'""Device action expected to have an architecture.""'], [2982873, None, u'Identifier', u'gpu_arch'], [2982872, None, u'Identifier', u'CudaArch :: UNKNOWN'], [2982865, u'True', u'ExpressionStatement', u'assert ( gpu_arch != CudaArch :: UNKNOWN && ""Device action expected to have an architecture."" )'], [2982877, None, u'IdentifierDecl', u'gpu_arch = StringToCudaArch ( JA . getOffloadingArch ( ) )'], [2982892, None, u'IdentifierDeclType', u'CudaArch'], [2982891, None, u'Identifier', u'gpu_arch'], [2982878, None, u'AssignmentExpr', u'gpu_arch = StringToCudaArch ( JA . getOffloadingArch ( ) )'], [2982890, None, u'Identifier', u'gpu_arch'], [2982879, None, u'CallExpression', u'StringToCudaArch ( JA . getOffloadingArch ( ) )'], [2982888, None, u'Callee', u'StringToCudaArch'], [2982880, None, u'ArgumentList', u'JA . getOffloadingArch ( )'], [2982889, None, u'Identifier', u'StringToCudaArch'], [2982881, None, u'Argument', u'JA . getOffloadingArch ( )'], [2982882, None, u'CallExpression', u'JA . getOffloadingArch ( )'], [2982884, None, u'Callee', u'JA . getOffloadingArch'], [2982883, None, u'ArgumentList', u''], [2982885, None, u'MemberAccess', u'JA . getOffloadingArch'], [2982887, None, u'Identifier', u'JA'], [2982886, None, u'Identifier', u'getOffloadingArch'], [2982876, u'True', u'IdentifierDeclStatement', u'CudaArch gpu_arch = StringToCudaArch ( JA . getOffloadingArch ( ) ) ;'], [2982379, None, u'ParameterType', u'const JobAction &'], [2982378, None, u'Identifier', u'JA'], [2982377, u'True', u'Parameter', u'const JobAction & JA']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2983293, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )']]","[[2983294, None, u'CallExpression', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2983310, None, u'Callee', u'assert'], [2983295, None, u'ArgumentList', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983311, None, u'Identifier', u'assert'], [2983296, None, u'Argument', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983297, None, u'AndExpression', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983299, None, u'CallExpression', u'TC . getTriple ( ) . isNVPTX ( )'], [2983298, None, u'PrimaryExpression', u'""Wrong platform""'], [2983301, None, u'Callee', u'TC . getTriple ( ) . isNVPTX'], [2983300, None, u'ArgumentList', u''], [2983302, None, u'MemberAccess', u'TC . getTriple ( ) . isNVPTX'], [2983304, None, u'CallExpression', u'TC . getTriple ( )'], [2983303, None, u'Identifier', u'isNVPTX'], [2983306, None, u'Callee', u'TC . getTriple'], [2983305, None, u'ArgumentList', u''], [2983307, None, u'MemberAccess', u'TC . getTriple'], [2983309, None, u'Identifier', u'TC'], [2983308, None, u'Identifier', u'getTriple'], [2983293, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2983330, u'True', u'CFGEntryNode', u'ENTRY']]","[[2983294, None, u'CallExpression', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )'], [2983310, None, u'Callee', u'assert'], [2983295, None, u'ArgumentList', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983311, None, u'Identifier', u'assert'], [2983296, None, u'Argument', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983297, None, u'AndExpression', u'TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform""'], [2983299, None, u'CallExpression', u'TC . getTriple ( ) . isNVPTX ( )'], [2983298, None, u'PrimaryExpression', u'""Wrong platform""'], [2983301, None, u'Callee', u'TC . getTriple ( ) . isNVPTX'], [2983300, None, u'ArgumentList', u''], [2983302, None, u'MemberAccess', u'TC . getTriple ( ) . isNVPTX'], [2983304, None, u'CallExpression', u'TC . getTriple ( )'], [2983303, None, u'Identifier', u'isNVPTX'], [2983306, None, u'Callee', u'TC . getTriple'], [2983305, None, u'ArgumentList', u''], [2983307, None, u'MemberAccess', u'TC . getTriple'], [2983309, None, u'Identifier', u'TC'], [2983308, None, u'Identifier', u'getTriple'], [2983293, u'True', u'ExpressionStatement', u'assert ( TC . getTriple ( ) . isNVPTX ( ) && ""Wrong platform"" )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2983178, u'True', u'ExpressionStatement', u'assert ( A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input"" )']]","[[2983179, None, u'CallExpression', u'assert ( A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input"" )'], [2983197, None, u'Callee', u'assert'], [2983180, None, u'ArgumentList', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983198, None, u'Identifier', u'assert'], [2983181, None, u'Argument', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983182, None, u'AndExpression', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983184, None, u'EqualityExpression', u'A -> getInputs ( ) . size ( ) == 1'], [2983183, None, u'PrimaryExpression', u'""Device offload action is expected to have a single input""'], [2983186, None, u'CallExpression', u'A -> getInputs ( ) . size ( )'], [2983185, None, u'PrimaryExpression', u'1'], [2983188, None, u'Callee', u'A -> getInputs ( ) . size'], [2983187, None, u'ArgumentList', u''], [2983189, None, u'MemberAccess', u'A -> getInputs ( ) . size'], [2983191, None, u'CallExpression', u'A -> getInputs ( )'], [2983190, None, u'Identifier', u'size'], [2983193, None, u'Callee', u'A -> getInputs'], [2983192, None, u'ArgumentList', u''], [2983194, None, u'PtrMemberAccess', u'A -> getInputs'], [2983196, None, u'Identifier', u'A'], [2983195, None, u'Identifier', u'getInputs'], [2983178, u'True', u'ExpressionStatement', u'assert ( A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input"" )'], [2983330, u'True', u'CFGEntryNode', u'ENTRY']]","[[2983179, None, u'CallExpression', u'assert ( A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input"" )'], [2983197, None, u'Callee', u'assert'], [2983180, None, u'ArgumentList', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983198, None, u'Identifier', u'assert'], [2983181, None, u'Argument', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983182, None, u'AndExpression', u'A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input""'], [2983184, None, u'EqualityExpression', u'A -> getInputs ( ) . size ( ) == 1'], [2983183, None, u'PrimaryExpression', u'""Device offload action is expected to have a single input""'], [2983186, None, u'CallExpression', u'A -> getInputs ( ) . size ( )'], [2983185, None, u'PrimaryExpression', u'1'], [2983188, None, u'Callee', u'A -> getInputs ( ) . size'], [2983187, None, u'ArgumentList', u''], [2983189, None, u'MemberAccess', u'A -> getInputs ( ) . size'], [2983191, None, u'CallExpression', u'A -> getInputs ( )'], [2983190, None, u'Identifier', u'size'], [2983193, None, u'Callee', u'A -> getInputs'], [2983192, None, u'ArgumentList', u''], [2983194, None, u'PtrMemberAccess', u'A -> getInputs'], [2983196, None, u'Identifier', u'A'], [2983195, None, u'Identifier', u'getInputs'], [2983178, u'True', u'ExpressionStatement', u'assert ( A -> getInputs ( ) . size ( ) == 1 && ""Device offload action is expected to have a single input"" )'], [2983200, None, u'AssignmentExpr', u'* A = II . getAction ( )'], [2983207, None, u'UnaryOp', u'* A'], [2983201, None, u'CallExpression', u'II . getAction ( )'], [2983209, None, u'UnaryOperator', u'*'], [2983208, None, u'Identifier', u'A'], [2983203, None, u'Callee', u'II . getAction'], [2983202, None, u'ArgumentList', u''], [2983204, None, u'MemberAccess', u'II . getAction'], [2983206, None, u'Identifier', u'II'], [2983205, None, u'Identifier', u'getAction'], [2983199, u'True', u'ExpressionStatement', u'* A = II . getAction ( )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"[[2983157, u'True', u'ExpressionStatement', u'assert ( gpu_arch_str && ""Device action expected to have associated a GPU architecture!"" )']]","[[2983158, None, u'CallExpression', u'assert ( gpu_arch_str && ""Device action expected to have associated a GPU architecture!"" )'], [2983164, None, u'Callee', u'assert'], [2983159, None, u'ArgumentList', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983165, None, u'Identifier', u'assert'], [2983160, None, u'Argument', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983161, None, u'AndExpression', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983163, None, u'Identifier', u'gpu_arch_str'], [2983162, None, u'PrimaryExpression', u'""Device action expected to have associated a GPU architecture!""'], [2983157, u'True', u'ExpressionStatement', u'assert ( gpu_arch_str && ""Device action expected to have associated a GPU architecture!"" )'], [2983330, u'True', u'CFGEntryNode', u'ENTRY']]","[[2983158, None, u'CallExpression', u'assert ( gpu_arch_str && ""Device action expected to have associated a GPU architecture!"" )'], [2983164, None, u'Callee', u'assert'], [2983159, None, u'ArgumentList', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983165, None, u'Identifier', u'assert'], [2983160, None, u'Argument', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983161, None, u'AndExpression', u'gpu_arch_str && ""Device action expected to have associated a GPU architecture!""'], [2983163, None, u'Identifier', u'gpu_arch_str'], [2983162, None, u'PrimaryExpression', u'""Device action expected to have associated a GPU architecture!""'], [2983157, u'True', u'ExpressionStatement', u'assert ( gpu_arch_str && ""Device action expected to have associated a GPU architecture!"" )'], [2983167, None, u'IdentifierDecl', u'* gpu_arch_str = A -> getOffloadingArch ( )'], [2983177, None, u'IdentifierDeclType', u'const char *'], [2983176, None, u'Identifier', u'gpu_arch_str'], [2983168, None, u'AssignmentExpr', u'* gpu_arch_str = A -> getOffloadingArch ( )'], [2983175, None, u'Identifier', u'gpu_arch_str'], [2983169, None, u'CallExpression', u'A -> getOffloadingArch ( )'], [2983171, None, u'Callee', u'A -> getOffloadingArch'], [2983170, None, u'ArgumentList', u''], [2983172, None, u'PtrMemberAccess', u'A -> getOffloadingArch'], [2983174, None, u'Identifier', u'A'], [2983173, None, u'Identifier', u'getOffloadingArch'], [2983166, u'True', u'IdentifierDeclStatement', u'const char * gpu_arch_str = A -> getOffloadingArch ( ) ;'], [2983200, None, u'AssignmentExpr', u'* A = II . getAction ( )'], [2983207, None, u'UnaryOp', u'* A'], [2983201, None, u'CallExpression', u'II . getAction ( )'], [2983209, None, u'UnaryOperator', u'*'], [2983208, None, u'Identifier', u'A'], [2983203, None, u'Callee', u'II . getAction'], [2983202, None, u'ArgumentList', u''], [2983204, None, u'MemberAccess', u'II . getAction'], [2983206, None, u'Identifier', u'II'], [2983205, None, u'Identifier', u'getAction'], [2983199, u'True', u'ExpressionStatement', u'* A = II . getAction ( )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2985064, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )']]","[[2985065, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [2985078, None, u'Callee', u'assert'], [2985066, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985079, None, u'Identifier', u'assert'], [2985067, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985068, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985070, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2985069, None, u'PrimaryExpression', u'""Unexpected number of inputs.""'], [2985072, None, u'CallExpression', u'Inputs . size ( )'], [2985071, None, u'PrimaryExpression', u'1'], [2985074, None, u'Callee', u'Inputs . size'], [2985073, None, u'ArgumentList', u''], [2985075, None, u'MemberAccess', u'Inputs . size'], [2985077, None, u'Identifier', u'Inputs'], [2985076, None, u'Identifier', u'size'], [2985064, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [2985084, u'True', u'CFGEntryNode', u'ENTRY']]","[[2985065, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [2985078, None, u'Callee', u'assert'], [2985066, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985079, None, u'Identifier', u'assert'], [2985067, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985068, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [2985070, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2985069, None, u'PrimaryExpression', u'""Unexpected number of inputs.""'], [2985072, None, u'CallExpression', u'Inputs . size ( )'], [2985071, None, u'PrimaryExpression', u'1'], [2985074, None, u'Callee', u'Inputs . size'], [2985073, None, u'ArgumentList', u''], [2985075, None, u'MemberAccess', u'Inputs . size'], [2985077, None, u'Identifier', u'Inputs'], [2985076, None, u'Identifier', u'size'], [2985064, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [2984642, None, u'ParameterType', u'const InputInfoList &'], [2984641, None, u'Identifier', u'Inputs'], [2984640, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2984752, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )']]","[[2984753, None, u'CallExpression', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2984764, None, u'Callee', u'assert'], [2984754, None, u'ArgumentList', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984765, None, u'Identifier', u'assert'], [2984755, None, u'Argument', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984756, None, u'AndExpression', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984758, None, u'CallExpression', u'Output . isFilename ( )'], [2984757, None, u'PrimaryExpression', u'""Unexpected lipo output.""'], [2984760, None, u'Callee', u'Output . isFilename'], [2984759, None, u'ArgumentList', u''], [2984761, None, u'MemberAccess', u'Output . isFilename'], [2984763, None, u'Identifier', u'Output'], [2984762, None, u'Identifier', u'isFilename'], [2984752, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2985084, u'True', u'CFGEntryNode', u'ENTRY']]","[[2984753, None, u'CallExpression', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2984764, None, u'Callee', u'assert'], [2984754, None, u'ArgumentList', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984765, None, u'Identifier', u'assert'], [2984755, None, u'Argument', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984756, None, u'AndExpression', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2984758, None, u'CallExpression', u'Output . isFilename ( )'], [2984757, None, u'PrimaryExpression', u'""Unexpected lipo output.""'], [2984760, None, u'Callee', u'Output . isFilename'], [2984759, None, u'ArgumentList', u''], [2984761, None, u'MemberAccess', u'Output . isFilename'], [2984763, None, u'Identifier', u'Output'], [2984762, None, u'Identifier', u'isFilename'], [2984752, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2984645, None, u'ParameterType', u'const InputInfo &'], [2984644, None, u'Identifier', u'Output'], [2984643, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2984715, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )']]","[[2984716, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [2984727, None, u'Callee', u'assert'], [2984717, None, u'ArgumentList', u'Input . isFilename ( ) && ""Invalid input.""'], [2984728, None, u'Identifier', u'assert'], [2984718, None, u'Argument', u'Input . isFilename ( ) && ""Invalid input.""'], [2984719, None, u'AndExpression', u'Input . isFilename ( ) && ""Invalid input.""'], [2984721, None, u'CallExpression', u'Input . isFilename ( )'], [2984720, None, u'PrimaryExpression', u'""Invalid input.""'], [2984723, None, u'Callee', u'Input . isFilename'], [2984722, None, u'ArgumentList', u''], [2984724, None, u'MemberAccess', u'Input . isFilename'], [2984726, None, u'Identifier', u'Input'], [2984725, None, u'Identifier', u'isFilename'], [2984715, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [2985084, u'True', u'CFGEntryNode', u'ENTRY']]","[[2984716, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [2984727, None, u'Callee', u'assert'], [2984717, None, u'ArgumentList', u'Input . isFilename ( ) && ""Invalid input.""'], [2984728, None, u'Identifier', u'assert'], [2984718, None, u'Argument', u'Input . isFilename ( ) && ""Invalid input.""'], [2984719, None, u'AndExpression', u'Input . isFilename ( ) && ""Invalid input.""'], [2984721, None, u'CallExpression', u'Input . isFilename ( )'], [2984720, None, u'PrimaryExpression', u'""Invalid input.""'], [2984723, None, u'Callee', u'Input . isFilename'], [2984722, None, u'ArgumentList', u''], [2984724, None, u'MemberAccess', u'Input . isFilename'], [2984726, None, u'Identifier', u'Input'], [2984725, None, u'Identifier', u'isFilename'], [2984715, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [2985056, None, u'IdentifierDecl', u'& Input = Inputs [ 0 ]'], [2985063, None, u'IdentifierDeclType', u'const InputInfo &'], [2985062, None, u'Identifier', u'Input'], [2985057, None, u'AssignmentExpr', u'& Input = Inputs [ 0 ]'], [2985061, None, u'Identifier', u'Input'], [2985058, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [2985060, None, u'Identifier', u'Inputs'], [2985059, None, u'PrimaryExpression', u'0'], [2985055, u'True', u'IdentifierDeclStatement', u'const InputInfo & Input = Inputs [ 0 ] ;'], [2984642, None, u'ParameterType', u'const InputInfoList &'], [2984641, None, u'Identifier', u'Inputs'], [2984640, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988105, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Image && ""Invalid linker output type."" )']]","[[2988106, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Image && ""Invalid linker output type."" )'], [2988119, None, u'Callee', u'assert'], [2988107, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988120, None, u'Identifier', u'assert'], [2988108, None, u'Argument', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988109, None, u'AndExpression', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988111, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Image'], [2988110, None, u'PrimaryExpression', u'""Invalid linker output type.""'], [2988113, None, u'CallExpression', u'Output . getType ( )'], [2988112, None, u'Identifier', u'types :: TY_Image'], [2988115, None, u'Callee', u'Output . getType'], [2988114, None, u'ArgumentList', u''], [2988116, None, u'MemberAccess', u'Output . getType'], [2988118, None, u'Identifier', u'Output'], [2988117, None, u'Identifier', u'getType'], [2988105, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Image && ""Invalid linker output type."" )'], [2988121, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988106, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Image && ""Invalid linker output type."" )'], [2988119, None, u'Callee', u'assert'], [2988107, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988120, None, u'Identifier', u'assert'], [2988108, None, u'Argument', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988109, None, u'AndExpression', u'Output . getType ( ) == types :: TY_Image && ""Invalid linker output type.""'], [2988111, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Image'], [2988110, None, u'PrimaryExpression', u'""Invalid linker output type.""'], [2988113, None, u'CallExpression', u'Output . getType ( )'], [2988112, None, u'Identifier', u'types :: TY_Image'], [2988115, None, u'Callee', u'Output . getType'], [2988114, None, u'ArgumentList', u''], [2988116, None, u'MemberAccess', u'Output . getType'], [2988118, None, u'Identifier', u'Output'], [2988117, None, u'Identifier', u'getType'], [2988105, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Image && ""Invalid linker output type."" )'], [2987151, None, u'ParameterType', u'const InputInfo &'], [2987150, None, u'Identifier', u'Output'], [2987149, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988321, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )']]","[[2988322, None, u'CallExpression', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2988333, None, u'Callee', u'assert'], [2988323, None, u'ArgumentList', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988334, None, u'Identifier', u'assert'], [2988324, None, u'Argument', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988325, None, u'AndExpression', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988327, None, u'CallExpression', u'Output . isFilename ( )'], [2988326, None, u'PrimaryExpression', u'""Unexpected lipo output.""'], [2988329, None, u'Callee', u'Output . isFilename'], [2988328, None, u'ArgumentList', u''], [2988330, None, u'MemberAccess', u'Output . isFilename'], [2988332, None, u'Identifier', u'Output'], [2988331, None, u'Identifier', u'isFilename'], [2988321, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2988348, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988322, None, u'CallExpression', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2988333, None, u'Callee', u'assert'], [2988323, None, u'ArgumentList', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988334, None, u'Identifier', u'assert'], [2988324, None, u'Argument', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988325, None, u'AndExpression', u'Output . isFilename ( ) && ""Unexpected lipo output.""'], [2988327, None, u'CallExpression', u'Output . isFilename ( )'], [2988326, None, u'PrimaryExpression', u'""Unexpected lipo output.""'], [2988329, None, u'Callee', u'Output . isFilename'], [2988328, None, u'ArgumentList', u''], [2988330, None, u'MemberAccess', u'Output . isFilename'], [2988332, None, u'Identifier', u'Output'], [2988331, None, u'Identifier', u'isFilename'], [2988321, u'True', u'ExpressionStatement', u'assert ( Output . isFilename ( ) && ""Unexpected lipo output."" )'], [2988204, None, u'ParameterType', u'const InputInfo &'], [2988203, None, u'Identifier', u'Output'], [2988202, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988275, u'True', u'ExpressionStatement', u'assert ( II . isFilename ( ) && ""Unexpected lipo input."" )']]","[[2988276, None, u'CallExpression', u'assert ( II . isFilename ( ) && ""Unexpected lipo input."" )'], [2988287, None, u'Callee', u'assert'], [2988277, None, u'ArgumentList', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988288, None, u'Identifier', u'assert'], [2988278, None, u'Argument', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988279, None, u'AndExpression', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988281, None, u'CallExpression', u'II . isFilename ( )'], [2988280, None, u'PrimaryExpression', u'""Unexpected lipo input.""'], [2988283, None, u'Callee', u'II . isFilename'], [2988282, None, u'ArgumentList', u''], [2988284, None, u'MemberAccess', u'II . isFilename'], [2988286, None, u'Identifier', u'II'], [2988285, None, u'Identifier', u'isFilename'], [2988275, u'True', u'ExpressionStatement', u'assert ( II . isFilename ( ) && ""Unexpected lipo input."" )'], [2988348, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988276, None, u'CallExpression', u'assert ( II . isFilename ( ) && ""Unexpected lipo input."" )'], [2988287, None, u'Callee', u'assert'], [2988277, None, u'ArgumentList', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988288, None, u'Identifier', u'assert'], [2988278, None, u'Argument', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988279, None, u'AndExpression', u'II . isFilename ( ) && ""Unexpected lipo input.""'], [2988281, None, u'CallExpression', u'II . isFilename ( )'], [2988280, None, u'PrimaryExpression', u'""Unexpected lipo input.""'], [2988283, None, u'Callee', u'II . isFilename'], [2988282, None, u'ArgumentList', u''], [2988284, None, u'MemberAccess', u'II . isFilename'], [2988286, None, u'Identifier', u'II'], [2988285, None, u'Identifier', u'isFilename'], [2988275, u'True', u'ExpressionStatement', u'assert ( II . isFilename ( ) && ""Unexpected lipo input."" )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988477, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )']]","[[2988478, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988491, None, u'Callee', u'assert'], [2988479, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988492, None, u'Identifier', u'assert'], [2988480, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988481, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988483, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2988482, None, u'PrimaryExpression', u'""Unable to handle multiple inputs.""'], [2988485, None, u'CallExpression', u'Inputs . size ( )'], [2988484, None, u'PrimaryExpression', u'1'], [2988487, None, u'Callee', u'Inputs . size'], [2988486, None, u'ArgumentList', u''], [2988488, None, u'MemberAccess', u'Inputs . size'], [2988490, None, u'Identifier', u'Inputs'], [2988489, None, u'Identifier', u'size'], [2988477, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988520, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988478, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988491, None, u'Callee', u'assert'], [2988479, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988492, None, u'Identifier', u'assert'], [2988480, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988481, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988483, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2988482, None, u'PrimaryExpression', u'""Unable to handle multiple inputs.""'], [2988485, None, u'CallExpression', u'Inputs . size ( )'], [2988484, None, u'PrimaryExpression', u'1'], [2988487, None, u'Callee', u'Inputs . size'], [2988486, None, u'ArgumentList', u''], [2988488, None, u'MemberAccess', u'Inputs . size'], [2988490, None, u'Identifier', u'Inputs'], [2988489, None, u'Identifier', u'size'], [2988477, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988381, None, u'ParameterType', u'const InputInfoList &'], [2988380, None, u'Identifier', u'Inputs'], [2988379, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988454, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected dsymutil input."" )']]","[[2988455, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Unexpected dsymutil input."" )'], [2988466, None, u'Callee', u'assert'], [2988456, None, u'ArgumentList', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988467, None, u'Identifier', u'assert'], [2988457, None, u'Argument', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988458, None, u'AndExpression', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988460, None, u'CallExpression', u'Input . isFilename ( )'], [2988459, None, u'PrimaryExpression', u'""Unexpected dsymutil input.""'], [2988462, None, u'Callee', u'Input . isFilename'], [2988461, None, u'ArgumentList', u''], [2988463, None, u'MemberAccess', u'Input . isFilename'], [2988465, None, u'Identifier', u'Input'], [2988464, None, u'Identifier', u'isFilename'], [2988454, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected dsymutil input."" )'], [2988520, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988455, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Unexpected dsymutil input."" )'], [2988466, None, u'Callee', u'assert'], [2988456, None, u'ArgumentList', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988467, None, u'Identifier', u'assert'], [2988457, None, u'Argument', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988458, None, u'AndExpression', u'Input . isFilename ( ) && ""Unexpected dsymutil input.""'], [2988460, None, u'CallExpression', u'Input . isFilename ( )'], [2988459, None, u'PrimaryExpression', u'""Unexpected dsymutil input.""'], [2988462, None, u'Callee', u'Input . isFilename'], [2988461, None, u'ArgumentList', u''], [2988463, None, u'MemberAccess', u'Input . isFilename'], [2988465, None, u'Identifier', u'Input'], [2988464, None, u'Identifier', u'isFilename'], [2988454, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected dsymutil input."" )'], [2988469, None, u'IdentifierDecl', u'& Input = Inputs [ 0 ]'], [2988476, None, u'IdentifierDeclType', u'const InputInfo &'], [2988475, None, u'Identifier', u'Input'], [2988470, None, u'AssignmentExpr', u'& Input = Inputs [ 0 ]'], [2988474, None, u'Identifier', u'Input'], [2988471, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [2988473, None, u'Identifier', u'Inputs'], [2988472, None, u'PrimaryExpression', u'0'], [2988468, u'True', u'IdentifierDeclStatement', u'const InputInfo & Input = Inputs [ 0 ] ;'], [2988381, None, u'ParameterType', u'const InputInfoList &'], [2988380, None, u'Identifier', u'Inputs'], [2988379, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988650, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )']]","[[2988651, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988664, None, u'Callee', u'assert'], [2988652, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988665, None, u'Identifier', u'assert'], [2988653, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988654, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988656, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2988655, None, u'PrimaryExpression', u'""Unable to handle multiple inputs.""'], [2988658, None, u'CallExpression', u'Inputs . size ( )'], [2988657, None, u'PrimaryExpression', u'1'], [2988660, None, u'Callee', u'Inputs . size'], [2988659, None, u'ArgumentList', u''], [2988661, None, u'MemberAccess', u'Inputs . size'], [2988663, None, u'Identifier', u'Inputs'], [2988662, None, u'Identifier', u'size'], [2988650, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988706, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988651, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988664, None, u'Callee', u'assert'], [2988652, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988665, None, u'Identifier', u'assert'], [2988653, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988654, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unable to handle multiple inputs.""'], [2988656, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [2988655, None, u'PrimaryExpression', u'""Unable to handle multiple inputs.""'], [2988658, None, u'CallExpression', u'Inputs . size ( )'], [2988657, None, u'PrimaryExpression', u'1'], [2988660, None, u'Callee', u'Inputs . size'], [2988659, None, u'ArgumentList', u''], [2988661, None, u'MemberAccess', u'Inputs . size'], [2988663, None, u'Identifier', u'Inputs'], [2988662, None, u'Identifier', u'size'], [2988650, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unable to handle multiple inputs."" )'], [2988554, None, u'ParameterType', u'const InputInfoList &'], [2988553, None, u'Identifier', u'Inputs'], [2988552, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2988627, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected verify input"" )']]","[[2988628, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Unexpected verify input"" )'], [2988639, None, u'Callee', u'assert'], [2988629, None, u'ArgumentList', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988640, None, u'Identifier', u'assert'], [2988630, None, u'Argument', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988631, None, u'AndExpression', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988633, None, u'CallExpression', u'Input . isFilename ( )'], [2988632, None, u'PrimaryExpression', u'""Unexpected verify input""'], [2988635, None, u'Callee', u'Input . isFilename'], [2988634, None, u'ArgumentList', u''], [2988636, None, u'MemberAccess', u'Input . isFilename'], [2988638, None, u'Identifier', u'Input'], [2988637, None, u'Identifier', u'isFilename'], [2988627, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected verify input"" )'], [2988706, u'True', u'CFGEntryNode', u'ENTRY']]","[[2988628, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Unexpected verify input"" )'], [2988639, None, u'Callee', u'assert'], [2988629, None, u'ArgumentList', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988640, None, u'Identifier', u'assert'], [2988630, None, u'Argument', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988631, None, u'AndExpression', u'Input . isFilename ( ) && ""Unexpected verify input""'], [2988633, None, u'CallExpression', u'Input . isFilename ( )'], [2988632, None, u'PrimaryExpression', u'""Unexpected verify input""'], [2988635, None, u'Callee', u'Input . isFilename'], [2988634, None, u'ArgumentList', u''], [2988636, None, u'MemberAccess', u'Input . isFilename'], [2988638, None, u'Identifier', u'Input'], [2988637, None, u'Identifier', u'isFilename'], [2988627, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Unexpected verify input"" )'], [2988642, None, u'IdentifierDecl', u'& Input = Inputs [ 0 ]'], [2988649, None, u'IdentifierDeclType', u'const InputInfo &'], [2988648, None, u'Identifier', u'Input'], [2988643, None, u'AssignmentExpr', u'& Input = Inputs [ 0 ]'], [2988647, None, u'Identifier', u'Input'], [2988644, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [2988646, None, u'Identifier', u'Inputs'], [2988645, None, u'PrimaryExpression', u'0'], [2988641, u'True', u'IdentifierDeclStatement', u'const InputInfo & Input = Inputs [ 0 ] ;'], [2988554, None, u'ParameterType', u'const InputInfoList &'], [2988553, None, u'Identifier', u'Inputs'], [2988552, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )']]","[[2994028, None, u'CallExpression', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994034, None, u'Callee', u'assert'], [2994029, None, u'ArgumentList', u'TargetInitialized && ""Target not initialized!""'], [2994035, None, u'Identifier', u'assert'], [2994030, None, u'Argument', u'TargetInitialized && ""Target not initialized!""'], [2994031, None, u'AndExpression', u'TargetInitialized && ""Target not initialized!""'], [2994033, None, u'Identifier', u'TargetInitialized'], [2994032, None, u'PrimaryExpression', u'""Target not initialized!""'], [2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994036, u'True', u'CFGEntryNode', u'ENTRY'], [2994028, None, u'CallExpression', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994034, None, u'Callee', u'assert'], [2994029, None, u'ArgumentList', u'TargetInitialized && ""Target not initialized!""'], [2994035, None, u'Identifier', u'assert'], [2994030, None, u'Argument', u'TargetInitialized && ""Target not initialized!""'], [2994031, None, u'AndExpression', u'TargetInitialized && ""Target not initialized!""'], [2994033, None, u'Identifier', u'TargetInitialized'], [2994032, None, u'PrimaryExpression', u'""Target not initialized!""'], [2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994036, u'True', u'CFGEntryNode', u'ENTRY']]","[[2994028, None, u'CallExpression', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994034, None, u'Callee', u'assert'], [2994029, None, u'ArgumentList', u'TargetInitialized && ""Target not initialized!""'], [2994035, None, u'Identifier', u'assert'], [2994030, None, u'Argument', u'TargetInitialized && ""Target not initialized!""'], [2994031, None, u'AndExpression', u'TargetInitialized && ""Target not initialized!""'], [2994033, None, u'Identifier', u'TargetInitialized'], [2994032, None, u'PrimaryExpression', u'""Target not initialized!""'], [2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994028, None, u'CallExpression', u'assert ( TargetInitialized && ""Target not initialized!"" )'], [2994034, None, u'Callee', u'assert'], [2994029, None, u'ArgumentList', u'TargetInitialized && ""Target not initialized!""'], [2994035, None, u'Identifier', u'assert'], [2994030, None, u'Argument', u'TargetInitialized && ""Target not initialized!""'], [2994031, None, u'AndExpression', u'TargetInitialized && ""Target not initialized!""'], [2994033, None, u'Identifier', u'TargetInitialized'], [2994032, None, u'PrimaryExpression', u'""Target not initialized!""'], [2994027, u'True', u'ExpressionStatement', u'assert ( TargetInitialized && ""Target not initialized!"" )']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2995018, u'True', u'Parameter', u'raw_ostream & OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS']]","[[2995020, None, u'ParameterType', u'raw_ostream &'], [2995019, None, u'Identifier', u'OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS'], [2995032, u'True', u'CFGEntryNode', u'ENTRY'], [2995020, None, u'ParameterType', u'raw_ostream &'], [2995019, None, u'Identifier', u'OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS'], [2995032, u'True', u'CFGEntryNode', u'ENTRY']]","[[2995020, None, u'ParameterType', u'raw_ostream &'], [2995019, None, u'Identifier', u'OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS'], [2995020, None, u'ParameterType', u'raw_ostream &'], [2995019, None, u'Identifier', u'OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"[[2995023, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )']]","[[2995024, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [2995028, None, u'Callee', u'CudaInstallation . print'], [2995025, None, u'ArgumentList', u'OS'], [2995029, None, u'MemberAccess', u'CudaInstallation . print'], [2995026, None, u'Argument', u'OS'], [2995031, None, u'Identifier', u'CudaInstallation'], [2995030, None, u'Identifier', u'print'], [2995027, None, u'Identifier', u'OS'], [2995023, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [2995032, u'True', u'CFGEntryNode', u'ENTRY']]","[[2995024, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [2995028, None, u'Callee', u'CudaInstallation . print'], [2995025, None, u'ArgumentList', u'OS'], [2995029, None, u'MemberAccess', u'CudaInstallation . print'], [2995026, None, u'Argument', u'OS'], [2995031, None, u'Identifier', u'CudaInstallation'], [2995030, None, u'Identifier', u'print'], [2995027, None, u'Identifier', u'OS'], [2995023, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [2995020, None, u'ParameterType', u'raw_ostream &'], [2995019, None, u'Identifier', u'OS'], [2995018, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"[[3009945, u'True', u'Parameter', u'raw_ostream & OS'], [3009945, u'True', u'Parameter', u'raw_ostream & OS']]","[[3009947, None, u'ParameterType', u'raw_ostream &'], [3009946, None, u'Identifier', u'OS'], [3009945, u'True', u'Parameter', u'raw_ostream & OS'], [3010029, u'True', u'CFGEntryNode', u'ENTRY'], [3009947, None, u'ParameterType', u'raw_ostream &'], [3009946, None, u'Identifier', u'OS'], [3009945, u'True', u'Parameter', u'raw_ostream & OS'], [3010029, u'True', u'CFGEntryNode', u'ENTRY']]","[[3009947, None, u'ParameterType', u'raw_ostream &'], [3009946, None, u'Identifier', u'OS'], [3009945, u'True', u'Parameter', u'raw_ostream & OS'], [3009947, None, u'ParameterType', u'raw_ostream &'], [3009946, None, u'Identifier', u'OS'], [3009945, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"[[3013881, u'True', u'Parameter', u'raw_ostream & OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS']]","[[3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS'], [3013904, u'True', u'CFGEntryNode', u'ENTRY'], [3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS'], [3013904, u'True', u'CFGEntryNode', u'ENTRY']]","[[3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS'], [3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"[[3013895, u'True', u'ExpressionStatement', u'GCCInstallation . print ( OS )']]","[[3013896, None, u'CallExpression', u'GCCInstallation . print ( OS )'], [3013900, None, u'Callee', u'GCCInstallation . print'], [3013897, None, u'ArgumentList', u'OS'], [3013901, None, u'MemberAccess', u'GCCInstallation . print'], [3013898, None, u'Argument', u'OS'], [3013903, None, u'Identifier', u'GCCInstallation'], [3013902, None, u'Identifier', u'print'], [3013899, None, u'Identifier', u'OS'], [3013895, u'True', u'ExpressionStatement', u'GCCInstallation . print ( OS )'], [3013904, u'True', u'CFGEntryNode', u'ENTRY']]","[[3013896, None, u'CallExpression', u'GCCInstallation . print ( OS )'], [3013900, None, u'Callee', u'GCCInstallation . print'], [3013897, None, u'ArgumentList', u'OS'], [3013901, None, u'MemberAccess', u'GCCInstallation . print'], [3013898, None, u'Argument', u'OS'], [3013903, None, u'Identifier', u'GCCInstallation'], [3013902, None, u'Identifier', u'print'], [3013899, None, u'Identifier', u'OS'], [3013895, u'True', u'ExpressionStatement', u'GCCInstallation . print ( OS )'], [3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"[[3013886, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )']]","[[3013887, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [3013891, None, u'Callee', u'CudaInstallation . print'], [3013888, None, u'ArgumentList', u'OS'], [3013892, None, u'MemberAccess', u'CudaInstallation . print'], [3013889, None, u'Argument', u'OS'], [3013894, None, u'Identifier', u'CudaInstallation'], [3013893, None, u'Identifier', u'print'], [3013890, None, u'Identifier', u'OS'], [3013886, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [3013904, u'True', u'CFGEntryNode', u'ENTRY']]","[[3013887, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [3013891, None, u'Callee', u'CudaInstallation . print'], [3013888, None, u'ArgumentList', u'OS'], [3013892, None, u'MemberAccess', u'CudaInstallation . print'], [3013889, None, u'Argument', u'OS'], [3013894, None, u'Identifier', u'CudaInstallation'], [3013893, None, u'Identifier', u'print'], [3013890, None, u'Identifier', u'OS'], [3013886, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [3013883, None, u'ParameterType', u'raw_ostream &'], [3013882, None, u'Identifier', u'OS'], [3013881, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,"[[3018626, u'True', u'ExpressionStatement', u'assert ( ( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output"" )']]","[[3018627, None, u'CallExpression', u'assert ( ( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output"" )'], [3018645, None, u'Callee', u'assert'], [3018628, None, u'ArgumentList', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018646, None, u'Identifier', u'assert'], [3018629, None, u'Argument', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018630, None, u'AndExpression', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018632, None, u'OrExpression', u'Output . isFilename ( ) || Output . isNothing ( )'], [3018631, None, u'PrimaryExpression', u'""invalid output""'], [3018639, None, u'CallExpression', u'Output . isFilename ( )'], [3018633, None, u'CallExpression', u'Output . isNothing ( )'], [3018641, None, u'Callee', u'Output . isFilename'], [3018640, None, u'ArgumentList', u''], [3018635, None, u'Callee', u'Output . isNothing'], [3018634, None, u'ArgumentList', u''], [3018642, None, u'MemberAccess', u'Output . isFilename'], [3018636, None, u'MemberAccess', u'Output . isNothing'], [3018644, None, u'Identifier', u'Output'], [3018643, None, u'Identifier', u'isFilename'], [3018638, None, u'Identifier', u'Output'], [3018637, None, u'Identifier', u'isNothing'], [3018626, u'True', u'ExpressionStatement', u'assert ( ( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output"" )'], [3018661, u'True', u'CFGEntryNode', u'ENTRY']]","[[3018627, None, u'CallExpression', u'assert ( ( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output"" )'], [3018645, None, u'Callee', u'assert'], [3018628, None, u'ArgumentList', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018646, None, u'Identifier', u'assert'], [3018629, None, u'Argument', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018630, None, u'AndExpression', u'( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output""'], [3018632, None, u'OrExpression', u'Output . isFilename ( ) || Output . isNothing ( )'], [3018631, None, u'PrimaryExpression', u'""invalid output""'], [3018639, None, u'CallExpression', u'Output . isFilename ( )'], [3018633, None, u'CallExpression', u'Output . isNothing ( )'], [3018641, None, u'Callee', u'Output . isFilename'], [3018640, None, u'ArgumentList', u''], [3018635, None, u'Callee', u'Output . isNothing'], [3018634, None, u'ArgumentList', u''], [3018642, None, u'MemberAccess', u'Output . isFilename'], [3018636, None, u'MemberAccess', u'Output . isNothing'], [3018644, None, u'Identifier', u'Output'], [3018643, None, u'Identifier', u'isFilename'], [3018638, None, u'Identifier', u'Output'], [3018637, None, u'Identifier', u'isNothing'], [3018626, u'True', u'ExpressionStatement', u'assert ( ( Output . isFilename ( ) || Output . isNothing ( ) ) && ""invalid output"" )'], [3017481, None, u'ParameterType', u'const InputInfo &'], [3017480, None, u'Identifier', u'Output'], [3017479, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,"[[3019030, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )']]","[[3019031, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3019042, None, u'Callee', u'assert'], [3019032, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3019043, None, u'Identifier', u'assert'], [3019033, None, u'Argument', u'Inputs . size ( ) == 1'], [3019034, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3019036, None, u'CallExpression', u'Inputs . size ( )'], [3019035, None, u'PrimaryExpression', u'1'], [3019038, None, u'Callee', u'Inputs . size'], [3019037, None, u'ArgumentList', u''], [3019039, None, u'MemberAccess', u'Inputs . size'], [3019041, None, u'Identifier', u'Inputs'], [3019040, None, u'Identifier', u'size'], [3019030, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3019666, u'True', u'CFGEntryNode', u'ENTRY']]","[[3019031, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3019042, None, u'Callee', u'assert'], [3019032, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3019043, None, u'Identifier', u'assert'], [3019033, None, u'Argument', u'Inputs . size ( ) == 1'], [3019034, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3019036, None, u'CallExpression', u'Inputs . size ( )'], [3019035, None, u'PrimaryExpression', u'1'], [3019038, None, u'Callee', u'Inputs . size'], [3019037, None, u'ArgumentList', u''], [3019039, None, u'MemberAccess', u'Inputs . size'], [3019041, None, u'Identifier', u'Inputs'], [3019040, None, u'Identifier', u'size'], [3019030, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3018816, None, u'ParameterType', u'const InputInfoList &'], [3018815, None, u'Identifier', u'Inputs'], [3018814, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,"[[3018998, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX )']]","[[3018999, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX )'], [3019019, None, u'Callee', u'assert'], [3019000, None, u'ArgumentList', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019020, None, u'Identifier', u'assert'], [3019001, None, u'Argument', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019002, None, u'OrExpression', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019011, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_C'], [3019003, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_CXX'], [3019013, None, u'CallExpression', u'II . getType ( )'], [3019012, None, u'Identifier', u'types :: TY_C'], [3019005, None, u'CallExpression', u'II . getType ( )'], [3019004, None, u'Identifier', u'types :: TY_CXX'], [3019015, None, u'Callee', u'II . getType'], [3019014, None, u'ArgumentList', u''], [3019007, None, u'Callee', u'II . getType'], [3019006, None, u'ArgumentList', u''], [3019016, None, u'MemberAccess', u'II . getType'], [3019008, None, u'MemberAccess', u'II . getType'], [3019018, None, u'Identifier', u'II'], [3019017, None, u'Identifier', u'getType'], [3019010, None, u'Identifier', u'II'], [3019009, None, u'Identifier', u'getType'], [3018998, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX )'], [3019666, u'True', u'CFGEntryNode', u'ENTRY']]","[[3018999, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX )'], [3019019, None, u'Callee', u'assert'], [3019000, None, u'ArgumentList', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019020, None, u'Identifier', u'assert'], [3019001, None, u'Argument', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019002, None, u'OrExpression', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX'], [3019011, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_C'], [3019003, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_CXX'], [3019013, None, u'CallExpression', u'II . getType ( )'], [3019012, None, u'Identifier', u'types :: TY_C'], [3019005, None, u'CallExpression', u'II . getType ( )'], [3019004, None, u'Identifier', u'types :: TY_CXX'], [3019015, None, u'Callee', u'II . getType'], [3019014, None, u'ArgumentList', u''], [3019007, None, u'Callee', u'II . getType'], [3019006, None, u'ArgumentList', u''], [3019016, None, u'MemberAccess', u'II . getType'], [3019008, None, u'MemberAccess', u'II . getType'], [3019018, None, u'Identifier', u'II'], [3019017, None, u'Identifier', u'getType'], [3019010, None, u'Identifier', u'II'], [3019009, None, u'Identifier', u'getType'], [3018998, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX )'], [3019022, None, u'IdentifierDecl', u'& II = Inputs [ 0 ]'], [3019029, None, u'IdentifierDeclType', u'const InputInfo &'], [3019028, None, u'Identifier', u'II'], [3019023, None, u'AssignmentExpr', u'& II = Inputs [ 0 ]'], [3019027, None, u'Identifier', u'II'], [3019024, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [3019026, None, u'Identifier', u'Inputs'], [3019025, None, u'PrimaryExpression', u'0'], [3019021, u'True', u'IdentifierDeclStatement', u'const InputInfo & II = Inputs [ 0 ] ;'], [3018816, None, u'ParameterType', u'const InputInfoList &'], [3018815, None, u'Identifier', u'Inputs'], [3018814, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,"[[3018925, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )']]","[[3018926, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3018937, None, u'Callee', u'assert'], [3018927, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Object'], [3018938, None, u'Identifier', u'assert'], [3018928, None, u'Argument', u'Output . getType ( ) == types :: TY_Object'], [3018929, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Object'], [3018931, None, u'CallExpression', u'Output . getType ( )'], [3018930, None, u'Identifier', u'types :: TY_Object'], [3018933, None, u'Callee', u'Output . getType'], [3018932, None, u'ArgumentList', u''], [3018934, None, u'MemberAccess', u'Output . getType'], [3018936, None, u'Identifier', u'Output'], [3018935, None, u'Identifier', u'getType'], [3018925, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3019666, u'True', u'CFGEntryNode', u'ENTRY']]","[[3018926, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3018937, None, u'Callee', u'assert'], [3018927, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Object'], [3018938, None, u'Identifier', u'assert'], [3018928, None, u'Argument', u'Output . getType ( ) == types :: TY_Object'], [3018929, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Object'], [3018931, None, u'CallExpression', u'Output . getType ( )'], [3018930, None, u'Identifier', u'types :: TY_Object'], [3018933, None, u'Callee', u'Output . getType'], [3018932, None, u'ArgumentList', u''], [3018934, None, u'MemberAccess', u'Output . getType'], [3018936, None, u'Identifier', u'Output'], [3018935, None, u'Identifier', u'getType'], [3018925, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3018819, None, u'ParameterType', u'const InputInfo &'], [3018818, None, u'Identifier', u'Output'], [3018817, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,"[[3038363, u'True', u'Parameter', u'raw_ostream & OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS']]","[[3038365, None, u'ParameterType', u'raw_ostream &'], [3038364, None, u'Identifier', u'OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS'], [3038377, u'True', u'CFGEntryNode', u'ENTRY'], [3038365, None, u'ParameterType', u'raw_ostream &'], [3038364, None, u'Identifier', u'OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS'], [3038377, u'True', u'CFGEntryNode', u'ENTRY']]","[[3038365, None, u'ParameterType', u'raw_ostream &'], [3038364, None, u'Identifier', u'OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS'], [3038365, None, u'ParameterType', u'raw_ostream &'], [3038364, None, u'Identifier', u'OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,"[[3038368, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )']]","[[3038369, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [3038373, None, u'Callee', u'CudaInstallation . print'], [3038370, None, u'ArgumentList', u'OS'], [3038374, None, u'MemberAccess', u'CudaInstallation . print'], [3038371, None, u'Argument', u'OS'], [3038376, None, u'Identifier', u'CudaInstallation'], [3038375, None, u'Identifier', u'print'], [3038372, None, u'Identifier', u'OS'], [3038368, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [3038377, u'True', u'CFGEntryNode', u'ENTRY']]","[[3038369, None, u'CallExpression', u'CudaInstallation . print ( OS )'], [3038373, None, u'Callee', u'CudaInstallation . print'], [3038370, None, u'ArgumentList', u'OS'], [3038374, None, u'MemberAccess', u'CudaInstallation . print'], [3038371, None, u'Argument', u'OS'], [3038376, None, u'Identifier', u'CudaInstallation'], [3038375, None, u'Identifier', u'print'], [3038372, None, u'Identifier', u'OS'], [3038368, u'True', u'ExpressionStatement', u'CudaInstallation . print ( OS )'], [3038365, None, u'ParameterType', u'raw_ostream &'], [3038364, None, u'Identifier', u'OS'], [3038363, u'True', u'Parameter', u'raw_ostream & OS']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Mips.cpp,+,"[[3040022, u'True', u'ExpressionStatement', u'assert ( ( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain."" )']]","[[3040023, None, u'CallExpression', u'assert ( ( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain."" )'], [3040036, None, u'Callee', u'assert'], [3040024, None, u'ArgumentList', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040037, None, u'Identifier', u'assert'], [3040025, None, u'Argument', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040026, None, u'AndExpression', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040028, None, u'EqualityExpression', u'GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx'], [3040027, None, u'PrimaryExpression', u'""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040030, None, u'CallExpression', u'GetCXXStdlibType ( Args )'], [3040029, None, u'Identifier', u'ToolChain :: CST_Libcxx'], [3040034, None, u'Callee', u'GetCXXStdlibType'], [3040031, None, u'ArgumentList', u'Args'], [3040035, None, u'Identifier', u'GetCXXStdlibType'], [3040032, None, u'Argument', u'Args'], [3040033, None, u'Identifier', u'Args'], [3040022, u'True', u'ExpressionStatement', u'assert ( ( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain."" )'], [3040038, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040023, None, u'CallExpression', u'assert ( ( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain."" )'], [3040036, None, u'Callee', u'assert'], [3040024, None, u'ArgumentList', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040037, None, u'Identifier', u'assert'], [3040025, None, u'Argument', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040026, None, u'AndExpression', u'( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040028, None, u'EqualityExpression', u'GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx'], [3040027, None, u'PrimaryExpression', u'""Only -lc++ (aka libxx) is suported in this toolchain.""'], [3040030, None, u'CallExpression', u'GetCXXStdlibType ( Args )'], [3040029, None, u'Identifier', u'ToolChain :: CST_Libcxx'], [3040034, None, u'Callee', u'GetCXXStdlibType'], [3040031, None, u'ArgumentList', u'Args'], [3040035, None, u'Identifier', u'GetCXXStdlibType'], [3040032, None, u'Argument', u'Args'], [3040033, None, u'Identifier', u'Args'], [3040022, u'True', u'ExpressionStatement', u'assert ( ( GetCXXStdlibType ( Args ) == ToolChain :: CST_Libcxx ) && ""Only -lc++ (aka libxx) is suported in this toolchain."" )'], [3039992, None, u'ParameterType', u'const ArgList &'], [3039991, None, u'Identifier', u'Args'], [3039990, u'True', u'Parameter', u'const ArgList & Args']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,"[[3040534, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )']]","[[3040535, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3040546, None, u'Callee', u'assert'], [3040536, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3040547, None, u'Identifier', u'assert'], [3040537, None, u'Argument', u'Inputs . size ( ) == 1'], [3040538, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3040540, None, u'CallExpression', u'Inputs . size ( )'], [3040539, None, u'PrimaryExpression', u'1'], [3040542, None, u'Callee', u'Inputs . size'], [3040541, None, u'ArgumentList', u''], [3040543, None, u'MemberAccess', u'Inputs . size'], [3040545, None, u'Identifier', u'Inputs'], [3040544, None, u'Identifier', u'size'], [3040534, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3040552, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040535, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3040546, None, u'Callee', u'assert'], [3040536, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3040547, None, u'Identifier', u'assert'], [3040537, None, u'Argument', u'Inputs . size ( ) == 1'], [3040538, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3040540, None, u'CallExpression', u'Inputs . size ( )'], [3040539, None, u'PrimaryExpression', u'1'], [3040542, None, u'Callee', u'Inputs . size'], [3040541, None, u'ArgumentList', u''], [3040543, None, u'MemberAccess', u'Inputs . size'], [3040545, None, u'Identifier', u'Inputs'], [3040544, None, u'Identifier', u'size'], [3040534, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3040150, None, u'ParameterType', u'const InputInfoList &'], [3040149, None, u'Identifier', u'Inputs'], [3040148, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,"[[3040493, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX )']]","[[3040494, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX )'], [3040523, None, u'Callee', u'assert'], [3040495, None, u'ArgumentList', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040524, None, u'Identifier', u'assert'], [3040496, None, u'Argument', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040497, None, u'OrExpression', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040515, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_C'], [3040498, None, u'OrExpression', u'II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040517, None, u'CallExpression', u'II . getType ( )'], [3040516, None, u'Identifier', u'types :: TY_C'], [3040507, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_CXX'], [3040499, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_PP_CXX'], [3040519, None, u'Callee', u'II . getType'], [3040518, None, u'ArgumentList', u''], [3040509, None, u'CallExpression', u'II . getType ( )'], [3040508, None, u'Identifier', u'types :: TY_CXX'], [3040501, None, u'CallExpression', u'II . getType ( )'], [3040500, None, u'Identifier', u'types :: TY_PP_CXX'], [3040520, None, u'MemberAccess', u'II . getType'], [3040511, None, u'Callee', u'II . getType'], [3040510, None, u'ArgumentList', u''], [3040503, None, u'Callee', u'II . getType'], [3040502, None, u'ArgumentList', u''], [3040522, None, u'Identifier', u'II'], [3040521, None, u'Identifier', u'getType'], [3040512, None, u'MemberAccess', u'II . getType'], [3040504, None, u'MemberAccess', u'II . getType'], [3040514, None, u'Identifier', u'II'], [3040513, None, u'Identifier', u'getType'], [3040506, None, u'Identifier', u'II'], [3040505, None, u'Identifier', u'getType'], [3040493, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX )'], [3040552, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040494, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX )'], [3040523, None, u'Callee', u'assert'], [3040495, None, u'ArgumentList', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040524, None, u'Identifier', u'assert'], [3040496, None, u'Argument', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040497, None, u'OrExpression', u'II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040515, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_C'], [3040498, None, u'OrExpression', u'II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX'], [3040517, None, u'CallExpression', u'II . getType ( )'], [3040516, None, u'Identifier', u'types :: TY_C'], [3040507, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_CXX'], [3040499, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_PP_CXX'], [3040519, None, u'Callee', u'II . getType'], [3040518, None, u'ArgumentList', u''], [3040509, None, u'CallExpression', u'II . getType ( )'], [3040508, None, u'Identifier', u'types :: TY_CXX'], [3040501, None, u'CallExpression', u'II . getType ( )'], [3040500, None, u'Identifier', u'types :: TY_PP_CXX'], [3040520, None, u'MemberAccess', u'II . getType'], [3040511, None, u'Callee', u'II . getType'], [3040510, None, u'ArgumentList', u''], [3040503, None, u'Callee', u'II . getType'], [3040502, None, u'ArgumentList', u''], [3040522, None, u'Identifier', u'II'], [3040521, None, u'Identifier', u'getType'], [3040512, None, u'MemberAccess', u'II . getType'], [3040504, None, u'MemberAccess', u'II . getType'], [3040514, None, u'Identifier', u'II'], [3040513, None, u'Identifier', u'getType'], [3040506, None, u'Identifier', u'II'], [3040505, None, u'Identifier', u'getType'], [3040493, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_C || II . getType ( ) == types :: TY_CXX || II . getType ( ) == types :: TY_PP_CXX )'], [3040526, None, u'IdentifierDecl', u'& II = Inputs [ 0 ]'], [3040533, None, u'IdentifierDeclType', u'const InputInfo &'], [3040532, None, u'Identifier', u'II'], [3040527, None, u'AssignmentExpr', u'& II = Inputs [ 0 ]'], [3040531, None, u'Identifier', u'II'], [3040528, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [3040530, None, u'Identifier', u'Inputs'], [3040529, None, u'PrimaryExpression', u'0'], [3040525, u'True', u'IdentifierDeclStatement', u'const InputInfo & II = Inputs [ 0 ] ;'], [3040150, None, u'ParameterType', u'const InputInfoList &'], [3040149, None, u'Identifier', u'Inputs'], [3040148, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,"[[3040906, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )']]","[[3040907, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3040918, None, u'Callee', u'assert'], [3040908, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3040919, None, u'Identifier', u'assert'], [3040909, None, u'Argument', u'Inputs . size ( ) == 1'], [3040910, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3040912, None, u'CallExpression', u'Inputs . size ( )'], [3040911, None, u'PrimaryExpression', u'1'], [3040914, None, u'Callee', u'Inputs . size'], [3040913, None, u'ArgumentList', u''], [3040915, None, u'MemberAccess', u'Inputs . size'], [3040917, None, u'Identifier', u'Inputs'], [3040916, None, u'Identifier', u'size'], [3040906, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3040924, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040907, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 )'], [3040918, None, u'Callee', u'assert'], [3040908, None, u'ArgumentList', u'Inputs . size ( ) == 1'], [3040919, None, u'Identifier', u'assert'], [3040909, None, u'Argument', u'Inputs . size ( ) == 1'], [3040910, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3040912, None, u'CallExpression', u'Inputs . size ( )'], [3040911, None, u'PrimaryExpression', u'1'], [3040914, None, u'Callee', u'Inputs . size'], [3040913, None, u'ArgumentList', u''], [3040915, None, u'MemberAccess', u'Inputs . size'], [3040917, None, u'Identifier', u'Inputs'], [3040916, None, u'Identifier', u'size'], [3040906, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 )'], [3040609, None, u'ParameterType', u'const InputInfoList &'], [3040608, None, u'Identifier', u'Inputs'], [3040607, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,"[[3040883, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_PP_Asm )']]","[[3040884, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_PP_Asm )'], [3040895, None, u'Callee', u'assert'], [3040885, None, u'ArgumentList', u'II . getType ( ) == types :: TY_PP_Asm'], [3040896, None, u'Identifier', u'assert'], [3040886, None, u'Argument', u'II . getType ( ) == types :: TY_PP_Asm'], [3040887, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_PP_Asm'], [3040889, None, u'CallExpression', u'II . getType ( )'], [3040888, None, u'Identifier', u'types :: TY_PP_Asm'], [3040891, None, u'Callee', u'II . getType'], [3040890, None, u'ArgumentList', u''], [3040892, None, u'MemberAccess', u'II . getType'], [3040894, None, u'Identifier', u'II'], [3040893, None, u'Identifier', u'getType'], [3040883, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_PP_Asm )'], [3040924, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040884, None, u'CallExpression', u'assert ( II . getType ( ) == types :: TY_PP_Asm )'], [3040895, None, u'Callee', u'assert'], [3040885, None, u'ArgumentList', u'II . getType ( ) == types :: TY_PP_Asm'], [3040896, None, u'Identifier', u'assert'], [3040886, None, u'Argument', u'II . getType ( ) == types :: TY_PP_Asm'], [3040887, None, u'EqualityExpression', u'II . getType ( ) == types :: TY_PP_Asm'], [3040889, None, u'CallExpression', u'II . getType ( )'], [3040888, None, u'Identifier', u'types :: TY_PP_Asm'], [3040891, None, u'Callee', u'II . getType'], [3040890, None, u'ArgumentList', u''], [3040892, None, u'MemberAccess', u'II . getType'], [3040894, None, u'Identifier', u'II'], [3040893, None, u'Identifier', u'getType'], [3040883, u'True', u'ExpressionStatement', u'assert ( II . getType ( ) == types :: TY_PP_Asm )'], [3040898, None, u'IdentifierDecl', u'& II = Inputs [ 0 ]'], [3040905, None, u'IdentifierDeclType', u'const InputInfo &'], [3040904, None, u'Identifier', u'II'], [3040899, None, u'AssignmentExpr', u'& II = Inputs [ 0 ]'], [3040903, None, u'Identifier', u'II'], [3040900, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [3040902, None, u'Identifier', u'Inputs'], [3040901, None, u'PrimaryExpression', u'0'], [3040897, u'True', u'IdentifierDeclStatement', u'const InputInfo & II = Inputs [ 0 ] ;'], [3040609, None, u'ParameterType', u'const InputInfoList &'], [3040608, None, u'Identifier', u'Inputs'], [3040607, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,"[[3040869, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )']]","[[3040870, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3040881, None, u'Callee', u'assert'], [3040871, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Object'], [3040882, None, u'Identifier', u'assert'], [3040872, None, u'Argument', u'Output . getType ( ) == types :: TY_Object'], [3040873, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Object'], [3040875, None, u'CallExpression', u'Output . getType ( )'], [3040874, None, u'Identifier', u'types :: TY_Object'], [3040877, None, u'Callee', u'Output . getType'], [3040876, None, u'ArgumentList', u''], [3040878, None, u'MemberAccess', u'Output . getType'], [3040880, None, u'Identifier', u'Output'], [3040879, None, u'Identifier', u'getType'], [3040869, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3040924, u'True', u'CFGEntryNode', u'ENTRY']]","[[3040870, None, u'CallExpression', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3040881, None, u'Callee', u'assert'], [3040871, None, u'ArgumentList', u'Output . getType ( ) == types :: TY_Object'], [3040882, None, u'Identifier', u'assert'], [3040872, None, u'Argument', u'Output . getType ( ) == types :: TY_Object'], [3040873, None, u'EqualityExpression', u'Output . getType ( ) == types :: TY_Object'], [3040875, None, u'CallExpression', u'Output . getType ( )'], [3040874, None, u'Identifier', u'types :: TY_Object'], [3040877, None, u'Callee', u'Output . getType'], [3040876, None, u'ArgumentList', u''], [3040878, None, u'MemberAccess', u'Output . getType'], [3040880, None, u'Identifier', u'Output'], [3040879, None, u'Identifier', u'getType'], [3040869, u'True', u'ExpressionStatement', u'assert ( Output . getType ( ) == types :: TY_Object )'], [3040612, None, u'ParameterType', u'const InputInfo &'], [3040611, None, u'Identifier', u'Output'], [3040610, u'True', u'Parameter', u'const InputInfo & Output']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"[[3046149, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )']]","[[3046150, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [3046163, None, u'Callee', u'assert'], [3046151, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046164, None, u'Identifier', u'assert'], [3046152, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046153, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046155, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3046154, None, u'PrimaryExpression', u'""Unexpected number of inputs.""'], [3046157, None, u'CallExpression', u'Inputs . size ( )'], [3046156, None, u'PrimaryExpression', u'1'], [3046159, None, u'Callee', u'Inputs . size'], [3046158, None, u'ArgumentList', u''], [3046160, None, u'MemberAccess', u'Inputs . size'], [3046162, None, u'Identifier', u'Inputs'], [3046161, None, u'Identifier', u'size'], [3046149, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [3046212, u'True', u'CFGEntryNode', u'ENTRY']]","[[3046150, None, u'CallExpression', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [3046163, None, u'Callee', u'assert'], [3046151, None, u'ArgumentList', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046164, None, u'Identifier', u'assert'], [3046152, None, u'Argument', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046153, None, u'AndExpression', u'Inputs . size ( ) == 1 && ""Unexpected number of inputs.""'], [3046155, None, u'EqualityExpression', u'Inputs . size ( ) == 1'], [3046154, None, u'PrimaryExpression', u'""Unexpected number of inputs.""'], [3046157, None, u'CallExpression', u'Inputs . size ( )'], [3046156, None, u'PrimaryExpression', u'1'], [3046159, None, u'Callee', u'Inputs . size'], [3046158, None, u'ArgumentList', u''], [3046160, None, u'MemberAccess', u'Inputs . size'], [3046162, None, u'Identifier', u'Inputs'], [3046161, None, u'Identifier', u'size'], [3046149, u'True', u'ExpressionStatement', u'assert ( Inputs . size ( ) == 1 && ""Unexpected number of inputs."" )'], [3046053, None, u'ParameterType', u'const InputInfoList &'], [3046052, None, u'Identifier', u'Inputs'], [3046051, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"[[3046126, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )']]","[[3046127, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [3046138, None, u'Callee', u'assert'], [3046128, None, u'ArgumentList', u'Input . isFilename ( ) && ""Invalid input.""'], [3046139, None, u'Identifier', u'assert'], [3046129, None, u'Argument', u'Input . isFilename ( ) && ""Invalid input.""'], [3046130, None, u'AndExpression', u'Input . isFilename ( ) && ""Invalid input.""'], [3046132, None, u'CallExpression', u'Input . isFilename ( )'], [3046131, None, u'PrimaryExpression', u'""Invalid input.""'], [3046134, None, u'Callee', u'Input . isFilename'], [3046133, None, u'ArgumentList', u''], [3046135, None, u'MemberAccess', u'Input . isFilename'], [3046137, None, u'Identifier', u'Input'], [3046136, None, u'Identifier', u'isFilename'], [3046126, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [3046212, u'True', u'CFGEntryNode', u'ENTRY']]","[[3046127, None, u'CallExpression', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [3046138, None, u'Callee', u'assert'], [3046128, None, u'ArgumentList', u'Input . isFilename ( ) && ""Invalid input.""'], [3046139, None, u'Identifier', u'assert'], [3046129, None, u'Argument', u'Input . isFilename ( ) && ""Invalid input.""'], [3046130, None, u'AndExpression', u'Input . isFilename ( ) && ""Invalid input.""'], [3046132, None, u'CallExpression', u'Input . isFilename ( )'], [3046131, None, u'PrimaryExpression', u'""Invalid input.""'], [3046134, None, u'Callee', u'Input . isFilename'], [3046133, None, u'ArgumentList', u''], [3046135, None, u'MemberAccess', u'Input . isFilename'], [3046137, None, u'Identifier', u'Input'], [3046136, None, u'Identifier', u'isFilename'], [3046126, u'True', u'ExpressionStatement', u'assert ( Input . isFilename ( ) && ""Invalid input."" )'], [3046141, None, u'IdentifierDecl', u'& Input = Inputs [ 0 ]'], [3046148, None, u'IdentifierDeclType', u'const InputInfo &'], [3046147, None, u'Identifier', u'Input'], [3046142, None, u'AssignmentExpr', u'& Input = Inputs [ 0 ]'], [3046146, None, u'Identifier', u'Input'], [3046143, None, u'ArrayIndexing', u'Inputs [ 0 ]'], [3046145, None, u'Identifier', u'Inputs'], [3046144, None, u'PrimaryExpression', u'0'], [3046140, u'True', u'IdentifierDeclStatement', u'const InputInfo & Input = Inputs [ 0 ] ;'], [3046053, None, u'ParameterType', u'const InputInfoList &'], [3046052, None, u'Identifier', u'Inputs'], [3046051, u'True', u'Parameter', u'const InputInfoList & Inputs']]"
"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/WebAssembly.cpp,+,"[[3050511, u'True', u'ExpressionStatement', u'assert ( Triple . isArch32Bit ( ) != Triple . isArch64Bit ( ) )']]","[[3050512, None, u'CallExpression', u'assert ( Triple . isArch32Bit ( ) != Triple . isArch64Bit ( ) )'], [3050528, None, u'Callee', u'assert'], [3050513, None, u'ArgumentList', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050529, None, u'Identifier', u'assert'], [3050514, None, u'Argument', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050515, None, u'EqualityExpression', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050522, None, u'CallExpression', u'Triple . isArch32Bit ( )'], [3050516, None, u'CallExpression', u'Triple . isArch64Bit ( )'], [3050524, None, u'Callee', u'Triple . isArch32Bit'], [3050523, None, u'ArgumentList', u''], [3050518, None, u'Callee', u'Triple . isArch64Bit'], [3050517, None, u'ArgumentList', u''], [3050525, None, u'MemberAccess', u'Triple . isArch32Bit'], [3050519, None, u'MemberAccess', u'Triple . isArch64Bit'], [3050527, None, u'Identifier', u'Triple'], [3050526, None, u'Identifier', u'isArch32Bit'], [3050521, None, u'Identifier', u'Triple'], [3050520, None, u'Identifier', u'isArch64Bit'], [3050511, u'True', u'ExpressionStatement', u'assert ( Triple . isArch32Bit ( ) != Triple . isArch64Bit ( ) )'], [3050530, u'True', u'CFGEntryNode', u'ENTRY']]","[[3050512, None, u'CallExpression', u'assert ( Triple . isArch32Bit ( ) != Triple . isArch64Bit ( ) )'], [3050528, None, u'Callee', u'assert'], [3050513, None, u'ArgumentList', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050529, None, u'Identifier', u'assert'], [3050514, None, u'Argument', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050515, None, u'EqualityExpression', u'Triple . isArch32Bit ( ) != Triple . isArch64Bit ( )'], [3050522, None, u'CallExpression', u'Triple . isArch32Bit ( )'], [3050516, None, u'CallExpression', u'Triple . isArch64Bit ( )'], [3050524, None, u'Callee', u'Triple . isArch32Bit'], [3050523, None, u'ArgumentList', u''], [3050518, None, u'Callee', u'Triple . isArch64Bit'], [3050517, None, u'ArgumentList', u''], [3050525, None, u'MemberAccess', u'Triple . isArch32Bit'], [3050519, None, u'MemberAccess', u'Triple . isArch64Bit'], [3050527, None, u'Identifier', u'Triple'], [3050526, None, u'Identifier', u'isArch32Bit'], [3050521, None, u'Identifier', u'Triple'], [3050520, None, u'Identifier', u'isArch64Bit'], [3050511, u'True', u'ExpressionStatement', u'assert ( Triple . isArch32Bit ( ) != Triple . isArch64Bit ( ) )'], [3050476, None, u'ParameterType', u'const llvm :: Triple &'], [3050475, None, u'Identifier', u'Triple'], [3050474, u'True', u'Parameter', u'const llvm :: Triple & Triple']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/StmtPrinter.cpp,+,"[[3079839, u'True', u'ExpressionStatement', u'PrintExpr ( S -> getOperand ( ) )']]","[[3079840, None, u'CallExpression', u'PrintExpr ( S -> getOperand ( ) )'], [3079849, None, u'Callee', u'PrintExpr'], [3079841, None, u'ArgumentList', u'S -> getOperand ( )'], [3079850, None, u'Identifier', u'PrintExpr'], [3079842, None, u'Argument', u'S -> getOperand ( )'], [3079843, None, u'CallExpression', u'S -> getOperand ( )'], [3079845, None, u'Callee', u'S -> getOperand'], [3079844, None, u'ArgumentList', u''], [3079846, None, u'PtrMemberAccess', u'S -> getOperand'], [3079848, None, u'Identifier', u'S'], [3079847, None, u'Identifier', u'getOperand'], [3079839, u'True', u'ExpressionStatement', u'PrintExpr ( S -> getOperand ( ) )'], [3079855, u'True', u'CFGEntryNode', u'ENTRY']]","[[3079840, None, u'CallExpression', u'PrintExpr ( S -> getOperand ( ) )'], [3079849, None, u'Callee', u'PrintExpr'], [3079841, None, u'ArgumentList', u'S -> getOperand ( )'], [3079850, None, u'Identifier', u'PrintExpr'], [3079842, None, u'Argument', u'S -> getOperand ( )'], [3079843, None, u'CallExpression', u'S -> getOperand ( )'], [3079845, None, u'Callee', u'S -> getOperand'], [3079844, None, u'ArgumentList', u''], [3079846, None, u'PtrMemberAccess', u'S -> getOperand'], [3079848, None, u'Identifier', u'S'], [3079847, None, u'Identifier', u'getOperand'], [3079839, u'True', u'ExpressionStatement', u'PrintExpr ( S -> getOperand ( ) )'], [3079836, None, u'ParameterType', u'DependentCoawaitExpr *'], [3079835, None, u'Identifier', u'S'], [3079834, u'True', u'Parameter', u'DependentCoawaitExpr * S']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3097885, u'True', u'ExpressionStatement', u'assert ( ! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous"" )']]","[[3097886, None, u'CallExpression', u'assert ( ! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous"" )'], [3097899, None, u'Callee', u'assert'], [3097887, None, u'ArgumentList', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097900, None, u'Identifier', u'assert'], [3097888, None, u'Argument', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097889, None, u'AndExpression', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097891, None, u'UnaryOp', u'! Operators . isAmbiguous ( )'], [3097890, None, u'PrimaryExpression', u'""Operator lookup cannot be ambiguous""'], [3097898, None, u'UnaryOperator', u'!'], [3097892, None, u'CallExpression', u'Operators . isAmbiguous ( )'], [3097894, None, u'Callee', u'Operators . isAmbiguous'], [3097893, None, u'ArgumentList', u''], [3097895, None, u'MemberAccess', u'Operators . isAmbiguous'], [3097897, None, u'Identifier', u'Operators'], [3097896, None, u'Identifier', u'isAmbiguous'], [3097885, u'True', u'ExpressionStatement', u'assert ( ! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous"" )'], [3097944, u'True', u'CFGEntryNode', u'ENTRY']]","[[3097886, None, u'CallExpression', u'assert ( ! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous"" )'], [3097899, None, u'Callee', u'assert'], [3097887, None, u'ArgumentList', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097900, None, u'Identifier', u'assert'], [3097888, None, u'Argument', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097889, None, u'AndExpression', u'! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous""'], [3097891, None, u'UnaryOp', u'! Operators . isAmbiguous ( )'], [3097890, None, u'PrimaryExpression', u'""Operator lookup cannot be ambiguous""'], [3097898, None, u'UnaryOperator', u'!'], [3097892, None, u'CallExpression', u'Operators . isAmbiguous ( )'], [3097894, None, u'Callee', u'Operators . isAmbiguous'], [3097893, None, u'ArgumentList', u''], [3097895, None, u'MemberAccess', u'Operators . isAmbiguous'], [3097897, None, u'Identifier', u'Operators'], [3097896, None, u'Identifier', u'isAmbiguous'], [3097885, u'True', u'ExpressionStatement', u'assert ( ! Operators . isAmbiguous ( ) && ""Operator lookup cannot be ambiguous"" )'], [3097913, None, u'IdentifierDecl', u'Operators ( SemaRef , OpName , SourceLocation ( ) , Sema :: LookupOperatorName )'], [3097925, None, u'IdentifierDeclType', u'LookupResult'], [3097924, None, u'Identifier', u'Operators'], [3097914, None, u'Expression', u'SemaRef , OpName , SourceLocation ( ) , Sema :: LookupOperatorName'], [3097923, None, u'Identifier', u'SemaRef'], [3097915, None, u'Expression', u'OpName , SourceLocation ( ) , Sema :: LookupOperatorName'], [3097922, None, u'Identifier', u'OpName'], [3097916, None, u'Expression', u'SourceLocation ( ) , Sema :: LookupOperatorName'], [3097918, None, u'CallExpression', u'SourceLocation ( )'], [3097917, None, u'Identifier', u'Sema :: LookupOperatorName'], [3097920, None, u'Callee', u'SourceLocation'], [3097919, None, u'ArgumentList', u''], [3097921, None, u'Identifier', u'SourceLocation'], [3097912, u'True', u'IdentifierDeclStatement', u'LookupResult Operators ( SemaRef , OpName , SourceLocation ( ) , Sema :: LookupOperatorName ) ;']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3097781, u'True', u'ExpressionStatement', u'assert ( CoawaitOp )']]","[[3097782, None, u'CallExpression', u'assert ( CoawaitOp )'], [3097786, None, u'Callee', u'assert'], [3097783, None, u'ArgumentList', u'CoawaitOp'], [3097787, None, u'Identifier', u'assert'], [3097784, None, u'Argument', u'CoawaitOp'], [3097785, None, u'Identifier', u'CoawaitOp'], [3097781, u'True', u'ExpressionStatement', u'assert ( CoawaitOp )'], [3097944, u'True', u'CFGEntryNode', u'ENTRY']]","[[3097782, None, u'CallExpression', u'assert ( CoawaitOp )'], [3097786, None, u'Callee', u'assert'], [3097783, None, u'ArgumentList', u'CoawaitOp'], [3097787, None, u'Identifier', u'assert'], [3097784, None, u'Argument', u'CoawaitOp'], [3097785, None, u'Identifier', u'CoawaitOp'], [3097781, u'True', u'ExpressionStatement', u'assert ( CoawaitOp )'], [3097789, None, u'IdentifierDecl', u'* CoawaitOp = UnresolvedLookupExpr :: Create ( SemaRef . Context , nullptr , NestedNameSpecifierLoc ( ) , DeclarationNameInfo ( OpName , Loc ) , true , IsOverloaded , Functions . begin ( ) , Functions . end ( ) )'], [3097835, None, u'IdentifierDeclType', u'Expr *'], [3097834, None, u'Identifier', u'CoawaitOp'], [3097790, None, u'AssignmentExpr', u'* CoawaitOp = UnresolvedLookupExpr :: Create ( SemaRef . Context , nullptr , NestedNameSpecifierLoc ( ) , DeclarationNameInfo ( OpName , Loc ) , true , IsOverloaded , Functions . begin ( ) , Functions . end ( ) )'], [3097833, None, u'Identifier', u'CoawaitOp'], [3097791, None, u'CallExpression', u'UnresolvedLookupExpr :: Create ( SemaRef . Context , nullptr , NestedNameSpecifierLoc ( ) , DeclarationNameInfo ( OpName , Loc ) , true , IsOverloaded , Functions . begin ( ) , Functions . end ( ) )'], [3097831, None, u'Callee', u'UnresolvedLookupExpr :: Create'], [3097792, None, u'ArgumentList', u'SemaRef . Context'], [3097832, None, u'Identifier', u'UnresolvedLookupExpr :: Create'], [3097827, None, u'Argument', u'SemaRef . Context'], [3097825, None, u'Argument', u'nullptr'], [3097820, None, u'Argument', u'NestedNameSpecifierLoc ( )'], [3097811, None, u'Argument', u'DeclarationNameInfo ( OpName , Loc )'], [3097809, None, u'Argument', u'true'], [3097807, None, u'Argument', u'IsOverloaded'], [3097800, None, u'Argument', u'Functions . begin ( )'], [3097793, None, u'Argument', u'Functions . end ( )'], [3097828, None, u'MemberAccess', u'SemaRef . Context'], [3097826, None, u'Identifier', u'nullptr'], [3097821, None, u'CallExpression', u'NestedNameSpecifierLoc ( )'], [3097812, None, u'CallExpression', u'DeclarationNameInfo ( OpName , Loc )'], [3097810, None, u'Identifier', u'true'], [3097808, None, u'Identifier', u'IsOverloaded'], [3097801, None, u'CallExpression', u'Functions . begin ( )'], [3097794, None, u'CallExpression', u'Functions . end ( )'], [3097830, None, u'Identifier', u'SemaRef'], [3097829, None, u'Identifier', u'Context'], [3097823, None, u'Callee', u'NestedNameSpecifierLoc'], [3097822, None, u'ArgumentList', u''], [3097818, None, u'Callee', u'DeclarationNameInfo'], [3097813, None, u'ArgumentList', u'OpName'], [3097803, None, u'Callee', u'Functions . begin'], [3097802, None, u'ArgumentList', u''], [3097796, None, u'Callee', u'Functions . end'], [3097795, None, u'ArgumentList', u''], [3097824, None, u'Identifier', u'NestedNameSpecifierLoc'], [3097819, None, u'Identifier', u'DeclarationNameInfo'], [3097816, None, u'Argument', u'OpName'], [3097814, None, u'Argument', u'Loc'], [3097804, None, u'MemberAccess', u'Functions . begin'], [3097797, None, u'MemberAccess', u'Functions . end'], [3097817, None, u'Identifier', u'OpName'], [3097815, None, u'Identifier', u'Loc'], [3097806, None, u'Identifier', u'Functions'], [3097805, None, u'Identifier', u'begin'], [3097799, None, u'Identifier', u'Functions'], [3097798, None, u'Identifier', u'end'], [3097788, u'True', u'IdentifierDeclStatement', u'Expr * CoawaitOp = UnresolvedLookupExpr :: Create ( SemaRef . Context , nullptr , NestedNameSpecifierLoc ( ) , DeclarationNameInfo ( OpName , Loc ) , true , IsOverloaded , Functions . begin ( ) , Functions . end ( ) ) ;'], [3097927, None, u'IdentifierDecl', u'OpName = SemaRef . Context . DeclarationNames . getCXXOperatorName ( OO_Coawait )'], [3097943, None, u'IdentifierDeclType', u'DeclarationName'], [3097942, None, u'Identifier', u'OpName'], [3097928, None, u'AssignmentExpr', u'OpName = SemaRef . Context . DeclarationNames . getCXXOperatorName ( OO_Coawait )'], [3097941, None, u'Identifier', u'OpName'], [3097929, None, u'CallExpression', u'SemaRef . Context . DeclarationNames . getCXXOperatorName ( OO_Coawait )'], [3097933, None, u'Callee', u'SemaRef . Context . DeclarationNames . getCXXOperatorName'], [3097930, None, u'ArgumentList', u'OO_Coawait'], [3097934, None, u'MemberAccess', u'SemaRef . Context . DeclarationNames . getCXXOperatorName'], [3097931, None, u'Argument', u'OO_Coawait'], [3097936, None, u'MemberAccess', u'SemaRef . Context . DeclarationNames'], [3097935, None, u'Identifier', u'getCXXOperatorName'], [3097932, None, u'Identifier', u'OO_Coawait'], [3097938, None, u'MemberAccess', u'SemaRef . Context'], [3097937, None, u'Identifier', u'DeclarationNames'], [3097940, None, u'Identifier', u'SemaRef'], [3097939, None, u'Identifier', u'Context'], [3097926, u'True', u'IdentifierDeclStatement', u'DeclarationName OpName = SemaRef . Context . DeclarationNames . getCXXOperatorName ( OO_Coawait ) ;'], [3097837, None, u'IdentifierDecl', u'IsOverloaded = Functions . size ( ) > 1 || ( Functions . size ( ) == 1 && isa < FunctionTemplateDecl > ( * Functions . begin ( ) ) )'], [3097871, None, u'IdentifierDeclType', u'bool'], [3097870, None, u'Identifier', u'IsOverloaded'], [3097838, None, u'AssignmentExpr', u'IsOverloaded = Functions . size ( ) > 1 || ( Functions . size ( ) == 1 && isa < FunctionTemplateDecl > ( * Functions . begin ( ) ) )'], [3097869, None, u'Identifier', u'IsOverloaded'], [3097839, None, u'OrExpression', u'Functions . size ( ) > 1 || ( Functions . size ( ) == 1 && isa < FunctionTemplateDecl > ( * Functions . begin ( ) ) )'], [3097861, None, u'RelationalExpression', u'Functions . size ( ) > 1'], [3097840, None, u'AndExpression', u'Functions . size ( ) == 1 && isa < FunctionTemplateDecl > ( * Functions . begin ( ) )'], [3097863, None, u'CallExpression', u'Functions . size ( )'], [3097862, None, u'PrimaryExpression', u'1'], [3097853, None, u'EqualityExpression', u'Functions . size ( ) == 1'], [3097841, None, u'RelationalExpression', u'isa < FunctionTemplateDecl > ( * Functions . begin ( ) )'], [3097865, None, u'Callee', u'Functions . size'], [3097864, None, u'ArgumentList', u''], [3097855, None, u'CallExpression', u'Functions . size ( )'], [3097854, None, u'PrimaryExpression', u'1'], [3097852, None, u'Identifier', u'isa'], [3097842, None, u'RelationalExpression', u'FunctionTemplateDecl > ( * Functions . begin ( ) )'], [3097866, None, u'MemberAccess', u'Functions . size'], [3097857, None, u'Callee', u'Functions . size'], [3097856, None, u'ArgumentList', u''], [3097851, None, u'Identifier', u'FunctionTemplateDecl'], [3097843, None, u'UnaryOp', u'* Functions . begin ( )'], [3097868, None, u'Identifier', u'Functions'], [3097867, None, u'Identifier', u'size'], [3097858, None, u'MemberAccess', u'Functions . size'], [3097850, None, u'UnaryOperator', u'*'], [3097844, None, u'CallExpression', u'Functions . begin ( )'], [3097860, None, u'Identifier', u'Functions'], [3097859, None, u'Identifier', u'size'], [3097846, None, u'Callee', u'Functions . begin'], [3097845, None, u'ArgumentList', u''], [3097847, None, u'MemberAccess', u'Functions . begin'], [3097849, None, u'Identifier', u'Functions'], [3097848, None, u'Identifier', u'begin'], [3097836, u'True', u'IdentifierDeclStatement', u'bool IsOverloaded = Functions . size ( ) > 1 || ( Functions . size ( ) == 1 && isa < FunctionTemplateDecl > ( * Functions . begin ( ) ) ) ;'], [3097776, None, u'ParameterType', u'Sema &'], [3097775, None, u'Identifier', u'SemaRef'], [3097774, u'True', u'Parameter', u'Sema & SemaRef'], [3097770, None, u'ParameterType', u'SourceLocation'], [3097769, None, u'Identifier', u'Loc'], [3097768, u'True', u'Parameter', u'SourceLocation Loc']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3098935, u'True', u'ExpressionStatement', u'assert ( isa < FunctionDecl > ( CurContext ) && ""not in a function scope"" )']]","[[3098936, None, u'CallExpression', u'assert ( isa < FunctionDecl > ( CurContext ) && ""not in a function scope"" )'], [3098946, None, u'Callee', u'assert'], [3098937, None, u'ArgumentList', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098947, None, u'Identifier', u'assert'], [3098938, None, u'Argument', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098939, None, u'AndExpression', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098941, None, u'RelationalExpression', u'isa < FunctionDecl > ( CurContext )'], [3098940, None, u'PrimaryExpression', u'""not in a function scope""'], [3098945, None, u'Identifier', u'isa'], [3098942, None, u'RelationalExpression', u'FunctionDecl > ( CurContext )'], [3098944, None, u'Identifier', u'FunctionDecl'], [3098943, None, u'Identifier', u'CurContext'], [3098935, u'True', u'ExpressionStatement', u'assert ( isa < FunctionDecl > ( CurContext ) && ""not in a function scope"" )'], [3098948, u'True', u'CFGEntryNode', u'ENTRY']]","[[3098936, None, u'CallExpression', u'assert ( isa < FunctionDecl > ( CurContext ) && ""not in a function scope"" )'], [3098946, None, u'Callee', u'assert'], [3098937, None, u'ArgumentList', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098947, None, u'Identifier', u'assert'], [3098938, None, u'Argument', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098939, None, u'AndExpression', u'isa < FunctionDecl > ( CurContext ) && ""not in a function scope""'], [3098941, None, u'RelationalExpression', u'isa < FunctionDecl > ( CurContext )'], [3098940, None, u'PrimaryExpression', u'""not in a function scope""'], [3098945, None, u'Identifier', u'isa'], [3098942, None, u'RelationalExpression', u'FunctionDecl > ( CurContext )'], [3098944, None, u'Identifier', u'FunctionDecl'], [3098943, None, u'Identifier', u'CurContext'], [3098935, u'True', u'ExpressionStatement', u'assert ( isa < FunctionDecl > ( CurContext ) && ""not in a function scope"" )']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"[[3105297, u'True', u'ExpressionStatement', u'assert ( Coroutine -> CoroutinePromise && ""no promise for coroutine"" )']]","[[3105298, None, u'CallExpression', u'assert ( Coroutine -> CoroutinePromise && ""no promise for coroutine"" )'], [3105306, None, u'Callee', u'assert'], [3105299, None, u'ArgumentList', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105307, None, u'Identifier', u'assert'], [3105300, None, u'Argument', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105301, None, u'AndExpression', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105303, None, u'PtrMemberAccess', u'Coroutine -> CoroutinePromise'], [3105302, None, u'PrimaryExpression', u'""no promise for coroutine""'], [3105305, None, u'Identifier', u'Coroutine'], [3105304, None, u'Identifier', u'CoroutinePromise'], [3105297, u'True', u'ExpressionStatement', u'assert ( Coroutine -> CoroutinePromise && ""no promise for coroutine"" )'], [3105308, u'True', u'CFGEntryNode', u'ENTRY']]","[[3105298, None, u'CallExpression', u'assert ( Coroutine -> CoroutinePromise && ""no promise for coroutine"" )'], [3105306, None, u'Callee', u'assert'], [3105299, None, u'ArgumentList', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105307, None, u'Identifier', u'assert'], [3105300, None, u'Argument', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105301, None, u'AndExpression', u'Coroutine -> CoroutinePromise && ""no promise for coroutine""'], [3105303, None, u'PtrMemberAccess', u'Coroutine -> CoroutinePromise'], [3105302, None, u'PrimaryExpression', u'""no promise for coroutine""'], [3105305, None, u'Identifier', u'Coroutine'], [3105304, None, u'Identifier', u'CoroutinePromise'], [3105297, u'True', u'ExpressionStatement', u'assert ( Coroutine -> CoroutinePromise && ""no promise for coroutine"" )'], [3105219, None, u'ParameterType', u'FunctionScopeInfo *'], [3105218, None, u'Identifier', u'Coroutine'], [3105217, u'True', u'Parameter', u'FunctionScopeInfo * Coroutine']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"[[3107287, u'True', u'ExpressionStatement', u'assert ( Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine"" )']]","[[3107288, None, u'CallExpression', u'assert ( Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine"" )'], [3107305, None, u'Callee', u'assert'], [3107289, None, u'ArgumentList', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107306, None, u'Identifier', u'assert'], [3107290, None, u'Argument', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107291, None, u'AndExpression', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107304, None, u'Identifier', u'Fn'], [3107292, None, u'AndExpression', u'! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107294, None, u'UnaryOp', u'! Fn -> CoroutineStmts . empty ( )'], [3107293, None, u'PrimaryExpression', u'""not a coroutine""'], [3107303, None, u'UnaryOperator', u'!'], [3107295, None, u'CallExpression', u'Fn -> CoroutineStmts . empty ( )'], [3107297, None, u'Callee', u'Fn -> CoroutineStmts . empty'], [3107296, None, u'ArgumentList', u''], [3107298, None, u'MemberAccess', u'Fn -> CoroutineStmts . empty'], [3107300, None, u'PtrMemberAccess', u'Fn -> CoroutineStmts'], [3107299, None, u'Identifier', u'empty'], [3107302, None, u'Identifier', u'Fn'], [3107301, None, u'Identifier', u'CoroutineStmts'], [3107287, u'True', u'ExpressionStatement', u'assert ( Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine"" )'], [3107317, u'True', u'CFGEntryNode', u'ENTRY']]","[[3107288, None, u'CallExpression', u'assert ( Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine"" )'], [3107305, None, u'Callee', u'assert'], [3107289, None, u'ArgumentList', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107306, None, u'Identifier', u'assert'], [3107290, None, u'Argument', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107291, None, u'AndExpression', u'Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107304, None, u'Identifier', u'Fn'], [3107292, None, u'AndExpression', u'! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine""'], [3107294, None, u'UnaryOp', u'! Fn -> CoroutineStmts . empty ( )'], [3107293, None, u'PrimaryExpression', u'""not a coroutine""'], [3107303, None, u'UnaryOperator', u'!'], [3107295, None, u'CallExpression', u'Fn -> CoroutineStmts . empty ( )'], [3107297, None, u'Callee', u'Fn -> CoroutineStmts . empty'], [3107296, None, u'ArgumentList', u''], [3107298, None, u'MemberAccess', u'Fn -> CoroutineStmts . empty'], [3107300, None, u'PtrMemberAccess', u'Fn -> CoroutineStmts'], [3107299, None, u'Identifier', u'empty'], [3107302, None, u'Identifier', u'Fn'], [3107301, None, u'Identifier', u'CoroutineStmts'], [3107287, u'True', u'ExpressionStatement', u'assert ( Fn && ! Fn -> CoroutineStmts . empty ( ) && ""not a coroutine"" )'], [3107308, None, u'IdentifierDecl', u'* Fn = getCurFunction ( )'], [3107316, None, u'IdentifierDeclType', u'FunctionScopeInfo *'], [3107315, None, u'Identifier', u'Fn'], [3107309, None, u'AssignmentExpr', u'* Fn = getCurFunction ( )'], [3107314, None, u'Identifier', u'Fn'], [3107310, None, u'CallExpression', u'getCurFunction ( )'], [3107312, None, u'Callee', u'getCurFunction'], [3107311, None, u'ArgumentList', u''], [3107313, None, u'Identifier', u'getCurFunction'], [3107307, u'True', u'IdentifierDeclStatement', u'FunctionScopeInfo * Fn = getCurFunction ( ) ;']]"
"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"[[3101754, u'True', u'ExpressionStatement', u'assert ( Fn && Fn -> CoroutinePromise && ""not a coroutine"" )']]","[[3101755, None, u'CallExpression', u'assert ( Fn && Fn -> CoroutinePromise && ""not a coroutine"" )'], [3101765, None, u'Callee', u'assert'], [3101756, None, u'ArgumentList', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101766, None, u'Identifier', u'assert'], [3101757, None, u'Argument', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101758, None, u'AndExpression', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101764, None, u'Identifier', u'Fn'], [3101759, None, u'AndExpression', u'Fn -> CoroutinePromise && ""not a coroutine""'], [3101761, None, u'PtrMemberAccess', u'Fn -> CoroutinePromise'], [3101760, None, u'PrimaryExpression', u'""not a coroutine""'], [3101763, None, u'Identifier', u'Fn'], [3101762, None, u'Identifier', u'CoroutinePromise'], [3101754, u'True', u'ExpressionStatement', u'assert ( Fn && Fn -> CoroutinePromise && ""not a coroutine"" )'], [3101777, u'True', u'CFGEntryNode', u'ENTRY']]","[[3101755, None, u'CallExpression', u'assert ( Fn && Fn -> CoroutinePromise && ""not a coroutine"" )'], [3101765, None, u'Callee', u'assert'], [3101756, None, u'ArgumentList', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101766, None, u'Identifier', u'assert'], [3101757, None, u'Argument', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101758, None, u'AndExpression', u'Fn && Fn -> CoroutinePromise && ""not a coroutine""'], [3101764, None, u'Identifier', u'Fn'], [3101759, None, u'AndExpression', u'Fn -> CoroutinePromise && ""not a coroutine""'], [3101761, None, u'PtrMemberAccess', u'Fn -> CoroutinePromise'], [3101760, None, u'PrimaryExpression', u'""not a coroutine""'], [3101763, None, u'Identifier', u'Fn'], [3101762, None, u'Identifier', u'CoroutinePromise'], [3101754, u'True', u'ExpressionStatement', u'assert ( Fn && Fn -> CoroutinePromise && ""not a coroutine"" )'], [3101768, None, u'IdentifierDecl', u'* Fn = getCurFunction ( )'], [3101776, None, u'IdentifierDeclType', u'FunctionScopeInfo *'], [3101775, None, u'Identifier', u'Fn'], [3101769, None, u'AssignmentExpr', u'* Fn = getCurFunction ( )'], [3101774, None, u'Identifier', u'Fn'], [3101770, None, u'CallExpression', u'getCurFunction ( )'], [3101772, None, u'Callee', u'getCurFunction'], [3101771, None, u'ArgumentList', u''], [3101773, None, u'Identifier', u'getCurFunction'], [3101767, u'True', u'IdentifierDeclStatement', u'FunctionScopeInfo * Fn = getCurFunction ( ) ;']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )'], [3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )']]","[[3134190, None, u'CallExpression', u'assert ( Data && ""dereferencing null future"" )'], [3134196, None, u'Callee', u'assert'], [3134191, None, u'ArgumentList', u'Data && ""dereferencing null future""'], [3134197, None, u'Identifier', u'assert'], [3134192, None, u'Argument', u'Data && ""dereferencing null future""'], [3134193, None, u'AndExpression', u'Data && ""dereferencing null future""'], [3134195, None, u'Identifier', u'Data'], [3134194, None, u'PrimaryExpression', u'""dereferencing null future""'], [3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )'], [3134198, u'True', u'CFGEntryNode', u'ENTRY'], [3134190, None, u'CallExpression', u'assert ( Data && ""dereferencing null future"" )'], [3134196, None, u'Callee', u'assert'], [3134191, None, u'ArgumentList', u'Data && ""dereferencing null future""'], [3134197, None, u'Identifier', u'assert'], [3134192, None, u'Argument', u'Data && ""dereferencing null future""'], [3134193, None, u'AndExpression', u'Data && ""dereferencing null future""'], [3134195, None, u'Identifier', u'Data'], [3134194, None, u'PrimaryExpression', u'""dereferencing null future""'], [3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )'], [3134198, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134190, None, u'CallExpression', u'assert ( Data && ""dereferencing null future"" )'], [3134196, None, u'Callee', u'assert'], [3134191, None, u'ArgumentList', u'Data && ""dereferencing null future""'], [3134197, None, u'Identifier', u'assert'], [3134192, None, u'Argument', u'Data && ""dereferencing null future""'], [3134193, None, u'AndExpression', u'Data && ""dereferencing null future""'], [3134195, None, u'Identifier', u'Data'], [3134194, None, u'PrimaryExpression', u'""dereferencing null future""'], [3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )'], [3134190, None, u'CallExpression', u'assert ( Data && ""dereferencing null future"" )'], [3134196, None, u'Callee', u'assert'], [3134191, None, u'ArgumentList', u'Data && ""dereferencing null future""'], [3134197, None, u'Identifier', u'assert'], [3134192, None, u'Argument', u'Data && ""dereferencing null future""'], [3134193, None, u'AndExpression', u'Data && ""dereferencing null future""'], [3134195, None, u'Identifier', u'Data'], [3134194, None, u'PrimaryExpression', u'""dereferencing null future""'], [3134189, u'True', u'ExpressionStatement', u'assert ( Data && ""dereferencing null future"" )']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )'], [3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )']]","[[3134236, None, u'CallExpression', u'assert ( Data && ""abandoning null future"" )'], [3134242, None, u'Callee', u'assert'], [3134237, None, u'ArgumentList', u'Data && ""abandoning null future""'], [3134243, None, u'Identifier', u'assert'], [3134238, None, u'Argument', u'Data && ""abandoning null future""'], [3134239, None, u'AndExpression', u'Data && ""abandoning null future""'], [3134241, None, u'Identifier', u'Data'], [3134240, None, u'PrimaryExpression', u'""abandoning null future""'], [3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )'], [3134244, u'True', u'CFGEntryNode', u'ENTRY'], [3134236, None, u'CallExpression', u'assert ( Data && ""abandoning null future"" )'], [3134242, None, u'Callee', u'assert'], [3134237, None, u'ArgumentList', u'Data && ""abandoning null future""'], [3134243, None, u'Identifier', u'assert'], [3134238, None, u'Argument', u'Data && ""abandoning null future""'], [3134239, None, u'AndExpression', u'Data && ""abandoning null future""'], [3134241, None, u'Identifier', u'Data'], [3134240, None, u'PrimaryExpression', u'""abandoning null future""'], [3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )'], [3134244, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134236, None, u'CallExpression', u'assert ( Data && ""abandoning null future"" )'], [3134242, None, u'Callee', u'assert'], [3134237, None, u'ArgumentList', u'Data && ""abandoning null future""'], [3134243, None, u'Identifier', u'assert'], [3134238, None, u'Argument', u'Data && ""abandoning null future""'], [3134239, None, u'AndExpression', u'Data && ""abandoning null future""'], [3134241, None, u'Identifier', u'Data'], [3134240, None, u'PrimaryExpression', u'""abandoning null future""'], [3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )'], [3134236, None, u'CallExpression', u'assert ( Data && ""abandoning null future"" )'], [3134242, None, u'Callee', u'assert'], [3134237, None, u'ArgumentList', u'Data && ""abandoning null future""'], [3134243, None, u'Identifier', u'assert'], [3134238, None, u'Argument', u'Data && ""abandoning null future""'], [3134239, None, u'AndExpression', u'Data && ""abandoning null future""'], [3134241, None, u'Identifier', u'Data'], [3134240, None, u'PrimaryExpression', u'""abandoning null future""'], [3134235, u'True', u'ExpressionStatement', u'assert ( Data && ""abandoning null future"" )']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134289, u'True', u'ExpressionStatement', u'assert ( Data && ""installing null future"" )']]","[[3134290, None, u'CallExpression', u'assert ( Data && ""installing null future"" )'], [3134296, None, u'Callee', u'assert'], [3134291, None, u'ArgumentList', u'Data && ""installing null future""'], [3134297, None, u'Identifier', u'assert'], [3134292, None, u'Argument', u'Data && ""installing null future""'], [3134293, None, u'AndExpression', u'Data && ""installing null future""'], [3134295, None, u'Identifier', u'Data'], [3134294, None, u'PrimaryExpression', u'""installing null future""'], [3134289, u'True', u'ExpressionStatement', u'assert ( Data && ""installing null future"" )'], [3134298, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134290, None, u'CallExpression', u'assert ( Data && ""installing null future"" )'], [3134296, None, u'Callee', u'assert'], [3134291, None, u'ArgumentList', u'Data && ""installing null future""'], [3134297, None, u'Identifier', u'assert'], [3134292, None, u'Argument', u'Data && ""installing null future""'], [3134293, None, u'AndExpression', u'Data && ""installing null future""'], [3134295, None, u'Identifier', u'Data'], [3134294, None, u'PrimaryExpression', u'""installing null future""'], [3134289, u'True', u'ExpressionStatement', u'assert ( Data && ""installing null future"" )']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134326, u'True', u'ExpressionStatement', u'assert ( Buffer . empty ( ) && ""buffer not current empty"" )']]","[[3134327, None, u'CallExpression', u'assert ( Buffer . empty ( ) && ""buffer not current empty"" )'], [3134338, None, u'Callee', u'assert'], [3134328, None, u'ArgumentList', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134339, None, u'Identifier', u'assert'], [3134329, None, u'Argument', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134330, None, u'AndExpression', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134332, None, u'CallExpression', u'Buffer . empty ( )'], [3134331, None, u'PrimaryExpression', u'""buffer not current empty""'], [3134334, None, u'Callee', u'Buffer . empty'], [3134333, None, u'ArgumentList', u''], [3134335, None, u'MemberAccess', u'Buffer . empty'], [3134337, None, u'Identifier', u'Buffer'], [3134336, None, u'Identifier', u'empty'], [3134326, u'True', u'ExpressionStatement', u'assert ( Buffer . empty ( ) && ""buffer not current empty"" )'], [3134340, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134327, None, u'CallExpression', u'assert ( Buffer . empty ( ) && ""buffer not current empty"" )'], [3134338, None, u'Callee', u'assert'], [3134328, None, u'ArgumentList', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134339, None, u'Identifier', u'assert'], [3134329, None, u'Argument', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134330, None, u'AndExpression', u'Buffer . empty ( ) && ""buffer not current empty""'], [3134332, None, u'CallExpression', u'Buffer . empty ( )'], [3134331, None, u'PrimaryExpression', u'""buffer not current empty""'], [3134334, None, u'Callee', u'Buffer . empty'], [3134333, None, u'ArgumentList', u''], [3134335, None, u'MemberAccess', u'Buffer . empty'], [3134337, None, u'Identifier', u'Buffer'], [3134336, None, u'Identifier', u'empty'], [3134326, u'True', u'ExpressionStatement', u'assert ( Buffer . empty ( ) && ""buffer not current empty"" )']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134383, u'True', u'ExpressionStatement', u'assert ( ! builder -> Frozen )']]","[[3134384, None, u'CallExpression', u'assert ( ! builder -> Frozen )'], [3134392, None, u'Callee', u'assert'], [3134385, None, u'ArgumentList', u'! builder -> Frozen'], [3134393, None, u'Identifier', u'assert'], [3134386, None, u'Argument', u'! builder -> Frozen'], [3134387, None, u'UnaryOp', u'! builder -> Frozen'], [3134391, None, u'UnaryOperator', u'!'], [3134388, None, u'PtrMemberAccess', u'builder -> Frozen'], [3134390, None, u'Identifier', u'builder'], [3134389, None, u'Identifier', u'Frozen'], [3134383, u'True', u'ExpressionStatement', u'assert ( ! builder -> Frozen )'], [3134394, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134384, None, u'CallExpression', u'assert ( ! builder -> Frozen )'], [3134392, None, u'Callee', u'assert'], [3134385, None, u'ArgumentList', u'! builder -> Frozen'], [3134393, None, u'Identifier', u'assert'], [3134386, None, u'Argument', u'! builder -> Frozen'], [3134387, None, u'UnaryOp', u'! builder -> Frozen'], [3134391, None, u'UnaryOperator', u'!'], [3134388, None, u'PtrMemberAccess', u'builder -> Frozen'], [3134390, None, u'Identifier', u'builder'], [3134389, None, u'Identifier', u'Frozen'], [3134383, u'True', u'ExpressionStatement', u'assert ( ! builder -> Frozen )'], [3134352, None, u'ParameterType', u'ConstantInitBuilderBase *'], [3134351, None, u'Identifier', u'builder'], [3134350, u'True', u'Parameter', u'ConstantInitBuilderBase * builder']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134367, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer . size ( ) == 1 )']]","[[3134368, None, u'CallExpression', u'assert ( builder -> Buffer . size ( ) == 1 )'], [3134381, None, u'Callee', u'assert'], [3134369, None, u'ArgumentList', u'builder -> Buffer . size ( ) == 1'], [3134382, None, u'Identifier', u'assert'], [3134370, None, u'Argument', u'builder -> Buffer . size ( ) == 1'], [3134371, None, u'EqualityExpression', u'builder -> Buffer . size ( ) == 1'], [3134373, None, u'CallExpression', u'builder -> Buffer . size ( )'], [3134372, None, u'PrimaryExpression', u'1'], [3134375, None, u'Callee', u'builder -> Buffer . size'], [3134374, None, u'ArgumentList', u''], [3134376, None, u'MemberAccess', u'builder -> Buffer . size'], [3134378, None, u'PtrMemberAccess', u'builder -> Buffer'], [3134377, None, u'Identifier', u'size'], [3134380, None, u'Identifier', u'builder'], [3134379, None, u'Identifier', u'Buffer'], [3134367, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer . size ( ) == 1 )'], [3134394, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134368, None, u'CallExpression', u'assert ( builder -> Buffer . size ( ) == 1 )'], [3134381, None, u'Callee', u'assert'], [3134369, None, u'ArgumentList', u'builder -> Buffer . size ( ) == 1'], [3134382, None, u'Identifier', u'assert'], [3134370, None, u'Argument', u'builder -> Buffer . size ( ) == 1'], [3134371, None, u'EqualityExpression', u'builder -> Buffer . size ( ) == 1'], [3134373, None, u'CallExpression', u'builder -> Buffer . size ( )'], [3134372, None, u'PrimaryExpression', u'1'], [3134375, None, u'Callee', u'builder -> Buffer . size'], [3134374, None, u'ArgumentList', u''], [3134376, None, u'MemberAccess', u'builder -> Buffer . size'], [3134378, None, u'PtrMemberAccess', u'builder -> Buffer'], [3134377, None, u'Identifier', u'size'], [3134380, None, u'Identifier', u'builder'], [3134379, None, u'Identifier', u'Buffer'], [3134367, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer . size ( ) == 1 )'], [3134352, None, u'ParameterType', u'ConstantInitBuilderBase *'], [3134351, None, u'Identifier', u'builder'], [3134350, u'True', u'Parameter', u'ConstantInitBuilderBase * builder']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3134354, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer [ 0 ] != nullptr )']]","[[3134355, None, u'CallExpression', u'assert ( builder -> Buffer [ 0 ] != nullptr )'], [3134365, None, u'Callee', u'assert'], [3134356, None, u'ArgumentList', u'builder -> Buffer [ 0 ] != nullptr'], [3134366, None, u'Identifier', u'assert'], [3134357, None, u'Argument', u'builder -> Buffer [ 0 ] != nullptr'], [3134358, None, u'EqualityExpression', u'builder -> Buffer [ 0 ] != nullptr'], [3134360, None, u'ArrayIndexing', u'builder -> Buffer [ 0 ]'], [3134359, None, u'Identifier', u'nullptr'], [3134362, None, u'PtrMemberAccess', u'builder -> Buffer'], [3134361, None, u'PrimaryExpression', u'0'], [3134364, None, u'Identifier', u'builder'], [3134363, None, u'Identifier', u'Buffer'], [3134354, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer [ 0 ] != nullptr )'], [3134394, u'True', u'CFGEntryNode', u'ENTRY']]","[[3134355, None, u'CallExpression', u'assert ( builder -> Buffer [ 0 ] != nullptr )'], [3134365, None, u'Callee', u'assert'], [3134356, None, u'ArgumentList', u'builder -> Buffer [ 0 ] != nullptr'], [3134366, None, u'Identifier', u'assert'], [3134357, None, u'Argument', u'builder -> Buffer [ 0 ] != nullptr'], [3134358, None, u'EqualityExpression', u'builder -> Buffer [ 0 ] != nullptr'], [3134360, None, u'ArrayIndexing', u'builder -> Buffer [ 0 ]'], [3134359, None, u'Identifier', u'nullptr'], [3134362, None, u'PtrMemberAccess', u'builder -> Buffer'], [3134361, None, u'PrimaryExpression', u'0'], [3134364, None, u'Identifier', u'builder'], [3134363, None, u'Identifier', u'Buffer'], [3134354, u'True', u'ExpressionStatement', u'assert ( builder -> Buffer [ 0 ] != nullptr )'], [3134352, None, u'ParameterType', u'ConstantInitBuilderBase *'], [3134351, None, u'Identifier', u'builder'], [3134350, u'True', u'Parameter', u'ConstantInitBuilderBase * builder']]"
"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,-,"[[3136692, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )']]","[[3136693, None, u'CallExpression', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [3136706, None, u'Callee', u'assert'], [3136694, None, u'ArgumentList', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136707, None, u'Identifier', u'assert'], [3136695, None, u'Argument', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136696, None, u'AndExpression', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136698, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [3136697, None, u'PrimaryExpression', u'""didn\'t add any struct elements?""'], [3136705, None, u'Identifier', u'Begin'], [3136699, None, u'CallExpression', u'buffer . size ( )'], [3136701, None, u'Callee', u'buffer . size'], [3136700, None, u'ArgumentList', u''], [3136702, None, u'MemberAccess', u'buffer . size'], [3136704, None, u'Identifier', u'buffer'], [3136703, None, u'Identifier', u'size'], [3136692, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [3136723, u'True', u'CFGEntryNode', u'ENTRY']]","[[3136693, None, u'CallExpression', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [3136706, None, u'Callee', u'assert'], [3136694, None, u'ArgumentList', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136707, None, u'Identifier', u'assert'], [3136695, None, u'Argument', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136696, None, u'AndExpression', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [3136698, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [3136697, None, u'PrimaryExpression', u'""didn\'t add any struct elements?""'], [3136705, None, u'Identifier', u'Begin'], [3136699, None, u'CallExpression', u'buffer . size ( )'], [3136701, None, u'Callee', u'buffer . size'], [3136700, None, u'ArgumentList', u''], [3136702, None, u'MemberAccess', u'buffer . size'], [3136704, None, u'Identifier', u'buffer'], [3136703, None, u'Identifier', u'size'], [3136692, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )']]"
"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"[[3191263, u'True', u'Parameter', u'Sema & S'], [3191260, u'True', u'Parameter', u'Decl * D'], [3191263, u'True', u'Parameter', u'Sema & S']]","[[3191265, None, u'ParameterType', u'Sema &'], [3191264, None, u'Identifier', u'S'], [3191263, u'True', u'Parameter', u'Sema & S'], [3191334, u'True', u'CFGEntryNode', u'ENTRY'], [3191262, None, u'ParameterType', u'Decl *'], [3191261, None, u'Identifier', u'D'], [3191260, u'True', u'Parameter', u'Decl * D'], [3191334, u'True', u'CFGEntryNode', u'ENTRY'], [3191265, None, u'ParameterType', u'Sema &'], [3191264, None, u'Identifier', u'S'], [3191263, u'True', u'Parameter', u'Sema & S'], [3191334, u'True', u'CFGEntryNode', u'ENTRY']]","[[3191265, None, u'ParameterType', u'Sema &'], [3191264, None, u'Identifier', u'S'], [3191263, u'True', u'Parameter', u'Sema & S'], [3191262, None, u'ParameterType', u'Decl *'], [3191261, None, u'Identifier', u'D'], [3191260, u'True', u'Parameter', u'Decl * D'], [3191265, None, u'ParameterType', u'Sema &'], [3191264, None, u'Identifier', u'S'], [3191263, u'True', u'Parameter', u'Sema & S']]"
"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/CodeGen/xray-log-args.cpp,+,"[[3250541, u'True', u'Parameter', u'int a'], [3250541, u'True', u'Parameter', u'int a']]","[[3250543, None, u'ParameterType', u'int'], [3250542, None, u'Identifier', u'a'], [3250541, u'True', u'Parameter', u'int a'], [3250546, u'True', u'CFGEntryNode', u'ENTRY'], [3250543, None, u'ParameterType', u'int'], [3250542, None, u'Identifier', u'a'], [3250541, u'True', u'Parameter', u'int a'], [3250546, u'True', u'CFGEntryNode', u'ENTRY']]","[[3250543, None, u'ParameterType', u'int'], [3250542, None, u'Identifier', u'a'], [3250541, u'True', u'Parameter', u'int a'], [3250543, None, u'ParameterType', u'int'], [3250542, None, u'Identifier', u'a'], [3250541, u'True', u'Parameter', u'int a']]"
"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/CodeGen/xray-log-args.cpp,+,"[[3250552, u'True', u'Parameter', u'int a'], [3250552, u'True', u'Parameter', u'int a']]","[[3250554, None, u'ParameterType', u'int'], [3250553, None, u'Identifier', u'a'], [3250552, u'True', u'Parameter', u'int a'], [3250557, u'True', u'CFGEntryNode', u'ENTRY'], [3250554, None, u'ParameterType', u'int'], [3250553, None, u'Identifier', u'a'], [3250552, u'True', u'Parameter', u'int a'], [3250557, u'True', u'CFGEntryNode', u'ENTRY']]","[[3250554, None, u'ParameterType', u'int'], [3250553, None, u'Identifier', u'a'], [3250552, u'True', u'Parameter', u'int a'], [3250554, None, u'ParameterType', u'int'], [3250553, None, u'Identifier', u'a'], [3250552, u'True', u'Parameter', u'int a']]"
"Refactor ConstantInitBuilder to allow other frontends to more
easily extend the aggregate-builder API.  Stupid missing language
features.

Also add APIs for constructing a relative reference and computing
the offset of a position from the start of the initializer.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296979 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[3251272, u'True', u'ExpressionStatement', u'assert ( cacheEnd <= end )']]","[[3251273, None, u'CallExpression', u'assert ( cacheEnd <= end )'], [3251279, None, u'Callee', u'assert'], [3251274, None, u'ArgumentList', u'cacheEnd <= end'], [3251280, None, u'Identifier', u'assert'], [3251275, None, u'Argument', u'cacheEnd <= end'], [3251276, None, u'RelationalExpression', u'cacheEnd <= end'], [3251278, None, u'Identifier', u'cacheEnd'], [3251277, None, u'Identifier', u'end'], [3251272, u'True', u'ExpressionStatement', u'assert ( cacheEnd <= end )'], [3251288, u'True', u'CFGEntryNode', u'ENTRY']]","[[3251273, None, u'CallExpression', u'assert ( cacheEnd <= end )'], [3251279, None, u'Callee', u'assert'], [3251274, None, u'ArgumentList', u'cacheEnd <= end'], [3251280, None, u'Identifier', u'assert'], [3251275, None, u'Argument', u'cacheEnd <= end'], [3251276, None, u'RelationalExpression', u'cacheEnd <= end'], [3251278, None, u'Identifier', u'cacheEnd'], [3251277, None, u'Identifier', u'end'], [3251272, u'True', u'ExpressionStatement', u'assert ( cacheEnd <= end )'], [3251282, None, u'IdentifierDecl', u'cacheEnd = CachedOffsetEnd'], [3251287, None, u'IdentifierDeclType', u'size_t'], [3251286, None, u'Identifier', u'cacheEnd'], [3251283, None, u'AssignmentExpr', u'cacheEnd = CachedOffsetEnd'], [3251285, None, u'Identifier', u'CachedOffsetEnd'], [3251284, None, u'Identifier', u'CachedOffsetEnd'], [3251281, u'True', u'IdentifierDeclStatement', u'size_t cacheEnd = CachedOffsetEnd ;'], [3251101, None, u'ParameterType', u'size_t'], [3251100, None, u'Identifier', u'end'], [3251099, u'True', u'Parameter', u'size_t end']]"
"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[5849, u'True', u'ExpressionStatement', u'assert ( position >= Begin )']]","[[5850, None, u'CallExpression', u'assert ( position >= Begin )'], [5856, None, u'Callee', u'assert'], [5851, None, u'ArgumentList', u'position >= Begin'], [5857, None, u'Identifier', u'assert'], [5852, None, u'Argument', u'position >= Begin'], [5853, None, u'RelationalExpression', u'position >= Begin'], [5855, None, u'Identifier', u'position'], [5854, None, u'Identifier', u'Begin'], [5849, u'True', u'ExpressionStatement', u'assert ( position >= Begin )'], [5907, u'True', u'CFGEntryNode', u'ENTRY']]","[[5850, None, u'CallExpression', u'assert ( position >= Begin )'], [5856, None, u'Callee', u'assert'], [5851, None, u'ArgumentList', u'position >= Begin'], [5857, None, u'Identifier', u'assert'], [5852, None, u'Argument', u'position >= Begin'], [5853, None, u'RelationalExpression', u'position >= Begin'], [5855, None, u'Identifier', u'position'], [5854, None, u'Identifier', u'Begin'], [5849, u'True', u'ExpressionStatement', u'assert ( position >= Begin )'], [5821, None, u'ParameterType', u'size_t'], [5820, None, u'Identifier', u'position'], [5819, u'True', u'Parameter', u'size_t position']]"
"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[6010, u'True', u'ExpressionStatement', u'assert ( ( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type"" )']]","[[6011, None, u'CallExpression', u'assert ( ( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type"" )'], [6035, None, u'Callee', u'assert'], [6012, None, u'ArgumentList', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6036, None, u'Identifier', u'assert'], [6013, None, u'Argument', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6014, None, u'AndExpression', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6016, None, u'OrExpression', u'Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy )'], [6015, None, u'PrimaryExpression', u'""didn\'t add any array elements without element type""'], [6027, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [6017, None, u'AndExpression', u'Begin == buffer . size ( ) && EltTy'], [6034, None, u'Identifier', u'Begin'], [6028, None, u'CallExpression', u'buffer . size ( )'], [6019, None, u'EqualityExpression', u'Begin == buffer . size ( )'], [6018, None, u'Identifier', u'EltTy'], [6030, None, u'Callee', u'buffer . size'], [6029, None, u'ArgumentList', u''], [6026, None, u'Identifier', u'Begin'], [6020, None, u'CallExpression', u'buffer . size ( )'], [6031, None, u'MemberAccess', u'buffer . size'], [6022, None, u'Callee', u'buffer . size'], [6021, None, u'ArgumentList', u''], [6033, None, u'Identifier', u'buffer'], [6032, None, u'Identifier', u'size'], [6023, None, u'MemberAccess', u'buffer . size'], [6025, None, u'Identifier', u'buffer'], [6024, None, u'Identifier', u'size'], [6010, u'True', u'ExpressionStatement', u'assert ( ( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type"" )'], [6052, u'True', u'CFGEntryNode', u'ENTRY']]","[[6011, None, u'CallExpression', u'assert ( ( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type"" )'], [6035, None, u'Callee', u'assert'], [6012, None, u'ArgumentList', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6036, None, u'Identifier', u'assert'], [6013, None, u'Argument', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6014, None, u'AndExpression', u'( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type""'], [6016, None, u'OrExpression', u'Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy )'], [6015, None, u'PrimaryExpression', u'""didn\'t add any array elements without element type""'], [6027, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [6017, None, u'AndExpression', u'Begin == buffer . size ( ) && EltTy'], [6034, None, u'Identifier', u'Begin'], [6028, None, u'CallExpression', u'buffer . size ( )'], [6019, None, u'EqualityExpression', u'Begin == buffer . size ( )'], [6018, None, u'Identifier', u'EltTy'], [6030, None, u'Callee', u'buffer . size'], [6029, None, u'ArgumentList', u''], [6026, None, u'Identifier', u'Begin'], [6020, None, u'CallExpression', u'buffer . size ( )'], [6031, None, u'MemberAccess', u'buffer . size'], [6022, None, u'Callee', u'buffer . size'], [6021, None, u'ArgumentList', u''], [6033, None, u'Identifier', u'buffer'], [6032, None, u'Identifier', u'size'], [6023, None, u'MemberAccess', u'buffer . size'], [6025, None, u'Identifier', u'buffer'], [6024, None, u'Identifier', u'size'], [6010, u'True', u'ExpressionStatement', u'assert ( ( Begin < buffer . size ( ) || ( Begin == buffer . size ( ) && EltTy ) ) && ""didn\'t add any array elements without element type"" )']]"
"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"[[6153, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )']]","[[6154, None, u'CallExpression', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [6167, None, u'Callee', u'assert'], [6155, None, u'ArgumentList', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6168, None, u'Identifier', u'assert'], [6156, None, u'Argument', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6157, None, u'AndExpression', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6159, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [6158, None, u'PrimaryExpression', u'""didn\'t add any struct elements?""'], [6166, None, u'Identifier', u'Begin'], [6160, None, u'CallExpression', u'buffer . size ( )'], [6162, None, u'Callee', u'buffer . size'], [6161, None, u'ArgumentList', u''], [6163, None, u'MemberAccess', u'buffer . size'], [6165, None, u'Identifier', u'buffer'], [6164, None, u'Identifier', u'size'], [6153, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [6184, u'True', u'CFGEntryNode', u'ENTRY']]","[[6154, None, u'CallExpression', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )'], [6167, None, u'Callee', u'assert'], [6155, None, u'ArgumentList', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6168, None, u'Identifier', u'assert'], [6156, None, u'Argument', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6157, None, u'AndExpression', u'Begin < buffer . size ( ) && ""didn\'t add any struct elements?""'], [6159, None, u'RelationalExpression', u'Begin < buffer . size ( )'], [6158, None, u'PrimaryExpression', u'""didn\'t add any struct elements?""'], [6166, None, u'Identifier', u'Begin'], [6160, None, u'CallExpression', u'buffer . size ( )'], [6162, None, u'Callee', u'buffer . size'], [6161, None, u'ArgumentList', u''], [6163, None, u'MemberAccess', u'buffer . size'], [6165, None, u'Identifier', u'buffer'], [6164, None, u'Identifier', u'size'], [6153, u'True', u'ExpressionStatement', u'assert ( Begin < buffer . size ( ) && ""didn\'t add any struct elements?"" )']]"
"Introduce an 'external_source_symbol' attribute that describes the origin
and the nature of a declaration

This commit adds an external_source_symbol attribute to Clang. This attribute
specifies that a declaration originates from an external source and describes
the nature of that source. This attribute will be used to improve IDE features
like 'jump-to-definition' for mixed-language projects or project that use
auto-generated code.

rdar://30423368

Differential Revision: https://reviews.llvm.org/D29819


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296649 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseDecl.cpp,+,"[[8190, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'"" )']]","[[8191, None, u'CallExpression', u'assert ( Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'"" )'], [8204, None, u'Callee', u'assert'], [8192, None, u'ArgumentList', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8205, None, u'Identifier', u'assert'], [8193, None, u'Argument', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8194, None, u'AndExpression', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8196, None, u'CallExpression', u'Tok . is ( tok :: l_paren )'], [8195, None, u'PrimaryExpression', u'""Attribute arg list not starting with \'(\'""'], [8200, None, u'Callee', u'Tok . is'], [8197, None, u'ArgumentList', u'tok :: l_paren'], [8201, None, u'MemberAccess', u'Tok . is'], [8198, None, u'Argument', u'tok :: l_paren'], [8203, None, u'Identifier', u'Tok'], [8202, None, u'Identifier', u'is'], [8199, None, u'Identifier', u'tok :: l_paren'], [8190, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'"" )'], [8206, u'True', u'CFGEntryNode', u'ENTRY']]","[[8191, None, u'CallExpression', u'assert ( Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'"" )'], [8204, None, u'Callee', u'assert'], [8192, None, u'ArgumentList', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8205, None, u'Identifier', u'assert'], [8193, None, u'Argument', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8194, None, u'AndExpression', u'Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'""'], [8196, None, u'CallExpression', u'Tok . is ( tok :: l_paren )'], [8195, None, u'PrimaryExpression', u'""Attribute arg list not starting with \'(\'""'], [8200, None, u'Callee', u'Tok . is'], [8197, None, u'ArgumentList', u'tok :: l_paren'], [8201, None, u'MemberAccess', u'Tok . is'], [8198, None, u'Argument', u'tok :: l_paren'], [8203, None, u'Identifier', u'Tok'], [8202, None, u'Identifier', u'is'], [8199, None, u'Identifier', u'tok :: l_paren'], [8190, u'True', u'ExpressionStatement', u'assert ( Tok . is ( tok :: l_paren ) && ""Attribute arg list not starting with \'(\'"" )']]"
