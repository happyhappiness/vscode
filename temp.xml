<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rsync/repos/rsync-3.1.2/popt/poptparse.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/** \ingroup popt
 * \file popt/poptparse.c
 */</comment>

<comment type="block" pos:line="5" pos:column="1">/* (C) 1998-2002 Red Hat, Inc. -- Licensing details are in the COPYING
   file accompanying popt source distributions, available from 
   ftp://ftp.rpm.org/pub/rpm/dist. */</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include<pos:position pos:line="9" pos:column="9"/></cpp:directive> <cpp:file pos:line="9" pos:column="10">"system.h"<pos:position pos:line="9" pos:column="20"/></cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include<pos:position pos:line="11" pos:column="9"/></cpp:directive> <cpp:file pos:line="11" pos:column="10">"poptint.h"<pos:position pos:line="11" pos:column="21"/></cpp:file></cpp:include>

<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">POPT_ARGV_ARRAY_GROW_DELTA<pos:position pos:line="13" pos:column="35"/></name></cpp:macro> <cpp:value pos:line="13" pos:column="36">5<pos:position pos:line="13" pos:column="37"/></cpp:value></cpp:define>

<comment type="block" pos:line="15" pos:column="1">/*@-boundswrite@*/</comment>
<function><type><name pos:line="16" pos:column="1">int<pos:position pos:line="16" pos:column="4"/></name></type> <name pos:line="16" pos:column="5">poptDupArgv<pos:position pos:line="16" pos:column="16"/></name><parameter_list pos:line="16" pos:column="16">(<parameter><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">argc<pos:position pos:line="16" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="16" pos:column="27">const<pos:position pos:line="16" pos:column="32"/></specifier> <name pos:line="16" pos:column="33">char<pos:position pos:line="16" pos:column="37"/></name> <modifier pos:line="16" pos:column="38">*<pos:position pos:line="16" pos:column="39"/></modifier><modifier pos:line="16" pos:column="39">*<pos:position pos:line="16" pos:column="40"/></modifier></type><name pos:line="16" pos:column="40">argv<pos:position pos:line="16" pos:column="44"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name> <modifier pos:line="17" pos:column="21">*<pos:position pos:line="17" pos:column="22"/></modifier></type> <name pos:line="17" pos:column="23">argcPtr<pos:position pos:line="17" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="17" pos:column="32">const<pos:position pos:line="17" pos:column="37"/></specifier> <name pos:line="17" pos:column="38">char<pos:position pos:line="17" pos:column="42"/></name> <modifier pos:line="17" pos:column="43">*<pos:position pos:line="17" pos:column="44"/></modifier><modifier pos:line="17" pos:column="44">*<pos:position pos:line="17" pos:column="45"/></modifier><modifier pos:line="17" pos:column="45">*<pos:position pos:line="17" pos:column="46"/></modifier></type> <name pos:line="17" pos:column="47">argvPtr<pos:position pos:line="17" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="17" pos:column="55"/></parameter_list>
<block pos:line="18" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">size_t<pos:position pos:line="19" pos:column="11"/></name></type> <name pos:line="19" pos:column="12">nb<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><operator pos:line="19" pos:column="17">(<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">argc<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">+<pos:position pos:line="19" pos:column="24"/></operator> <literal type="number" pos:line="19" pos:column="25">1<pos:position pos:line="19" pos:column="26"/></literal><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator> <operator pos:line="19" pos:column="28">*<pos:position pos:line="19" pos:column="29"/></operator> <sizeof pos:line="19" pos:column="30">sizeof<argument_list pos:line="19" pos:column="36">(<argument><expr><operator pos:line="19" pos:column="37">*<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">argv<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="19" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier><modifier pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></modifier></type> <name pos:line="20" pos:column="19">argv2<pos:position pos:line="20" pos:column="24"/></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name> <modifier pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></modifier></type> <name pos:line="21" pos:column="12">dst<pos:position pos:line="21" pos:column="15"/></name></decl>;<pos:position pos:line="21" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">i<pos:position pos:line="22" pos:column="10"/></name></decl>;<pos:position pos:line="22" pos:column="11"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">argc<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">&lt;=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal> <operator pos:line="24" pos:column="19">||<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">argv<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">==<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="30">NULL<pos:position pos:line="24" pos:column="34"/></name></expr>)<pos:position pos:line="24" pos:column="35"/></condition><then pos:line="24" pos:column="35">	<comment type="block" pos:line="24" pos:column="41">/* XXX can't happen */</comment>
	<block type="pseudo"><return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">POPT_ERROR_NOARG<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></return></block></then></if>
    <for pos:line="26" pos:column="5">for <control pos:line="26" pos:column="9">(<init><expr><name pos:line="26" pos:column="10">i<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></init> <condition><expr><name pos:line="26" pos:column="17">i<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">&lt;<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="21">argc<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></condition> <incr><expr><name pos:line="26" pos:column="27">i<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">++<pos:position pos:line="26" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="31"/></control> <block pos:line="26" pos:column="32">{
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name><name pos:line="27" pos:column="13">argv<pos:position pos:line="27" pos:column="17"/></name><index pos:line="27" pos:column="17">[<expr><name pos:line="27" pos:column="18">i<pos:position pos:line="27" pos:column="19"/></name></expr>]<pos:position pos:line="27" pos:column="20"/></index></name> <operator pos:line="27" pos:column="21">==<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>)<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29">
	    <block type="pseudo"><return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">POPT_ERROR_NOARG<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="29" pos:column="9">nb<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">+=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">strlen<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name><name pos:line="29" pos:column="22">argv<pos:position pos:line="29" pos:column="26"/></name><index pos:line="29" pos:column="26">[<expr><name pos:line="29" pos:column="27">i<pos:position pos:line="29" pos:column="28"/></name></expr>]<pos:position pos:line="29" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call> <operator pos:line="29" pos:column="31">+<pos:position pos:line="29" pos:column="32"/></operator> <literal type="number" pos:line="29" pos:column="33">1<pos:position pos:line="29" pos:column="34"/></literal></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></for>
	
    <expr_stmt><expr><name pos:line="32" pos:column="5">dst<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">malloc<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">nb<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">dst<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21">			<comment type="block" pos:line="33" pos:column="41">/* XXX can't happen */</comment>
	<block type="pseudo"><return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">POPT_ERROR_MALLOC<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="35" pos:column="5">argv2<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">void<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">*<pos:position pos:line="35" pos:column="20"/></operator><operator pos:line="35" pos:column="20">)<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">dst<pos:position pos:line="35" pos:column="25"/></name></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">dst<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">+=<pos:position pos:line="36" pos:column="11"/></operator> <operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">argc<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">+<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="20">1<pos:position pos:line="36" pos:column="21"/></literal><operator pos:line="36" pos:column="21">)<pos:position pos:line="36" pos:column="22"/></operator> <operator pos:line="36" pos:column="23">*<pos:position pos:line="36" pos:column="24"/></operator> <sizeof pos:line="36" pos:column="25">sizeof<argument_list pos:line="36" pos:column="31">(<argument><expr><operator pos:line="36" pos:column="32">*<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">argv<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/*@-branchstate@*/</comment>
    <for pos:line="39" pos:column="5">for <control pos:line="39" pos:column="9">(<init><expr><name pos:line="39" pos:column="10">i<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>;<pos:position pos:line="39" pos:column="16"/></init> <condition><expr><name pos:line="39" pos:column="17">i<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">&lt;<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="21">argc<pos:position pos:line="39" pos:column="25"/></name></expr>;<pos:position pos:line="39" pos:column="26"/></condition> <incr><expr><name pos:line="39" pos:column="27">i<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">++<pos:position pos:line="39" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="31"/></control> <block pos:line="39" pos:column="32">{
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">argv2<pos:position pos:line="40" pos:column="14"/></name><index pos:line="40" pos:column="14">[<expr><name pos:line="40" pos:column="15">i<pos:position pos:line="40" pos:column="16"/></name></expr>]<pos:position pos:line="40" pos:column="17"/></index></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">dst<pos:position pos:line="40" pos:column="23"/></name></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="41" pos:column="9">dst<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">+=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">strlcpy<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">dst<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="29">argv<pos:position pos:line="41" pos:column="33"/></name><index pos:line="41" pos:column="33">[<expr><name pos:line="41" pos:column="34">i<pos:position pos:line="41" pos:column="35"/></name></expr>]<pos:position pos:line="41" pos:column="36"/></index></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">nb<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call> <operator pos:line="41" pos:column="42">+<pos:position pos:line="41" pos:column="43"/></operator> <literal type="number" pos:line="41" pos:column="44">1<pos:position pos:line="41" pos:column="45"/></literal></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></for>
    <comment type="block" pos:line="43" pos:column="5">/*@=branchstate@*/</comment>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">argv2<pos:position pos:line="44" pos:column="10"/></name><index pos:line="44" pos:column="10">[<expr><name pos:line="44" pos:column="11">argc<pos:position pos:line="44" pos:column="15"/></name></expr>]<pos:position pos:line="44" pos:column="16"/></index></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">NULL<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">argvPtr<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17"> <block pos:line="46" pos:column="18">{
	<expr_stmt><expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">argvPtr<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">argv2<pos:position pos:line="47" pos:column="25"/></name></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then> <else pos:line="48" pos:column="7">else <block pos:line="48" pos:column="12">{
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">free<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">argv2<pos:position pos:line="49" pos:column="19"/></name></expr></argument>)<pos:position pos:line="49" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="50" pos:column="9">argv2<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <name pos:line="50" pos:column="17">NULL<pos:position pos:line="50" pos:column="21"/></name></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">argcPtr<pos:position pos:line="52" pos:column="16"/></name></expr>)<pos:position pos:line="52" pos:column="17"/></condition><then pos:line="52" pos:column="17">
	<block type="pseudo"><expr_stmt><expr><operator pos:line="53" pos:column="9">*<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">argcPtr<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <name pos:line="53" pos:column="20">argc<pos:position pos:line="53" pos:column="24"/></name></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt></block></then></if>
    <return pos:line="54" pos:column="5">return <expr><literal type="number" pos:line="54" pos:column="12">0<pos:position pos:line="54" pos:column="13"/></literal></expr>;<pos:position pos:line="54" pos:column="14"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function>
<comment type="block" pos:line="56" pos:column="1">/*@=boundswrite@*/</comment>

<comment type="block" pos:line="58" pos:column="1">/*@-bounds@*/</comment>
<function><type><name pos:line="59" pos:column="1">int<pos:position pos:line="59" pos:column="4"/></name></type> <name pos:line="59" pos:column="5">poptParseArgvString<pos:position pos:line="59" pos:column="24"/></name><parameter_list pos:line="59" pos:column="24">(<parameter><decl><type><specifier pos:line="59" pos:column="25">const<pos:position pos:line="59" pos:column="30"/></specifier> <name pos:line="59" pos:column="31">char<pos:position pos:line="59" pos:column="35"/></name> <modifier pos:line="59" pos:column="36">*<pos:position pos:line="59" pos:column="37"/></modifier></type> <name pos:line="59" pos:column="38">s<pos:position pos:line="59" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="59" pos:column="41">int<pos:position pos:line="59" pos:column="44"/></name> <modifier pos:line="59" pos:column="45">*<pos:position pos:line="59" pos:column="46"/></modifier></type> <name pos:line="59" pos:column="47">argcPtr<pos:position pos:line="59" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="59" pos:column="56">const<pos:position pos:line="59" pos:column="61"/></specifier> <name pos:line="59" pos:column="62">char<pos:position pos:line="59" pos:column="66"/></name> <modifier pos:line="59" pos:column="67">*<pos:position pos:line="59" pos:column="68"/></modifier><modifier pos:line="59" pos:column="68">*<pos:position pos:line="59" pos:column="69"/></modifier><modifier pos:line="59" pos:column="69">*<pos:position pos:line="59" pos:column="70"/></modifier></type> <name pos:line="59" pos:column="71">argvPtr<pos:position pos:line="59" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="59" pos:column="79"/></parameter_list>
<block pos:line="60" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="61" pos:column="5">const<pos:position pos:line="61" pos:column="10"/></specifier> <name pos:line="61" pos:column="11">char<pos:position pos:line="61" pos:column="15"/></name> <modifier pos:line="61" pos:column="16">*<pos:position pos:line="61" pos:column="17"/></modifier></type> <name pos:line="61" pos:column="18">src<pos:position pos:line="61" pos:column="21"/></name></decl>;<pos:position pos:line="61" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">char<pos:position pos:line="62" pos:column="9"/></name></type> <name pos:line="62" pos:column="10">quote<pos:position pos:line="62" pos:column="15"/></name> <init pos:line="62" pos:column="16">= <expr><literal type="char" pos:line="62" pos:column="18">'\0'<pos:position pos:line="62" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="63" pos:column="5">int<pos:position pos:line="63" pos:column="8"/></name></type> <name pos:line="63" pos:column="9">argvAlloced<pos:position pos:line="63" pos:column="20"/></name> <init pos:line="63" pos:column="21">= <expr><name pos:line="63" pos:column="23">POPT_ARGV_ARRAY_GROW_DELTA<pos:position pos:line="63" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="64" pos:column="5">const<pos:position pos:line="64" pos:column="10"/></specifier> <name pos:line="64" pos:column="11">char<pos:position pos:line="64" pos:column="15"/></name> <modifier pos:line="64" pos:column="16">*<pos:position pos:line="64" pos:column="17"/></modifier><modifier pos:line="64" pos:column="17">*<pos:position pos:line="64" pos:column="18"/></modifier></type> <name pos:line="64" pos:column="19">argv<pos:position pos:line="64" pos:column="23"/></name> <init pos:line="64" pos:column="24">= <expr><call><name pos:line="64" pos:column="26">malloc<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><sizeof pos:line="64" pos:column="33">sizeof<argument_list pos:line="64" pos:column="39">(<argument><expr><operator pos:line="64" pos:column="40">*<pos:position pos:line="64" pos:column="41"/></operator><name pos:line="64" pos:column="41">argv<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></sizeof> <operator pos:line="64" pos:column="47">*<pos:position pos:line="64" pos:column="48"/></operator> <name pos:line="64" pos:column="49">argvAlloced<pos:position pos:line="64" pos:column="60"/></name></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">int<pos:position pos:line="65" pos:column="8"/></name></type> <name pos:line="65" pos:column="9">argc<pos:position pos:line="65" pos:column="13"/></name> <init pos:line="65" pos:column="14">= <expr><literal type="number" pos:line="65" pos:column="16">0<pos:position pos:line="65" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="65" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">int<pos:position pos:line="66" pos:column="8"/></name></type> <name pos:line="66" pos:column="9">buflen<pos:position pos:line="66" pos:column="15"/></name> <init pos:line="66" pos:column="16">= <expr><call><name pos:line="66" pos:column="18">strlen<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">s<pos:position pos:line="66" pos:column="26"/></name></expr></argument>)<pos:position pos:line="66" pos:column="27"/></argument_list></call> <operator pos:line="66" pos:column="28">+<pos:position pos:line="66" pos:column="29"/></operator> <literal type="number" pos:line="66" pos:column="30">1<pos:position pos:line="66" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="66" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="67" pos:column="5">char<pos:position pos:line="67" pos:column="9"/></name> <modifier pos:line="67" pos:column="10">*<pos:position pos:line="67" pos:column="11"/></modifier></type> <name pos:line="67" pos:column="12">buf<pos:position pos:line="67" pos:column="15"/></name> <init pos:line="67" pos:column="16">= <expr><call><name pos:line="67" pos:column="18">memset<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><call><name pos:line="67" pos:column="25">alloca<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">buflen<pos:position pos:line="67" pos:column="38"/></name></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="41">0<pos:position pos:line="67" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">buflen<pos:position pos:line="67" pos:column="50"/></name></expr></argument>)<pos:position pos:line="67" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="67" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">int<pos:position pos:line="68" pos:column="8"/></name></type> <name pos:line="68" pos:column="9">rc<pos:position pos:line="68" pos:column="11"/></name> <init pos:line="68" pos:column="12">= <expr><name pos:line="68" pos:column="14">POPT_ERROR_MALLOC<pos:position pos:line="68" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="68" pos:column="32"/></decl_stmt>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">argv<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">==<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">NULL<pos:position pos:line="70" pos:column="21"/></name></expr>)<pos:position pos:line="70" pos:column="22"/></condition><then pos:line="70" pos:column="22"> <block type="pseudo"><return pos:line="70" pos:column="23">return <expr><name pos:line="70" pos:column="30">rc<pos:position pos:line="70" pos:column="32"/></name></expr>;<pos:position pos:line="70" pos:column="33"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">argv<pos:position pos:line="71" pos:column="9"/></name><index pos:line="71" pos:column="9">[<expr><name pos:line="71" pos:column="10">argc<pos:position pos:line="71" pos:column="14"/></name></expr>]<pos:position pos:line="71" pos:column="15"/></index></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <name pos:line="71" pos:column="18">buf<pos:position pos:line="71" pos:column="21"/></name></expr>;<pos:position pos:line="71" pos:column="22"/></expr_stmt>

    <for pos:line="73" pos:column="5">for <control pos:line="73" pos:column="9">(<init><expr><name pos:line="73" pos:column="10">src<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <name pos:line="73" pos:column="16">s<pos:position pos:line="73" pos:column="17"/></name></expr>;<pos:position pos:line="73" pos:column="18"/></init> <condition><expr><operator pos:line="73" pos:column="19">*<pos:position pos:line="73" pos:column="20"/></operator><name pos:line="73" pos:column="20">src<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">!=<pos:position pos:line="73" pos:column="26"/></operator> <literal type="char" pos:line="73" pos:column="27">'\0'<pos:position pos:line="73" pos:column="31"/></literal></expr>;<pos:position pos:line="73" pos:column="32"/></condition> <incr><expr><name pos:line="73" pos:column="33">src<pos:position pos:line="73" pos:column="36"/></name><operator pos:line="73" pos:column="36">++<pos:position pos:line="73" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="73" pos:column="39"/></control> <block pos:line="73" pos:column="40">{
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">quote<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">==<pos:position pos:line="74" pos:column="21"/></operator> <operator pos:line="74" pos:column="22">*<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">src<pos:position pos:line="74" pos:column="26"/></name></expr>)<pos:position pos:line="74" pos:column="27"/></condition><then pos:line="74" pos:column="27"> <block pos:line="74" pos:column="28">{
	    <expr_stmt><expr><name pos:line="75" pos:column="13">quote<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <literal type="char" pos:line="75" pos:column="21">'\0'<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="76" pos:column="10"/></block></then> <elseif pos:line="76" pos:column="11">else <if pos:line="76" pos:column="16">if <condition pos:line="76" pos:column="19">(<expr><name pos:line="76" pos:column="20">quote<pos:position pos:line="76" pos:column="25"/></name> <operator pos:line="76" pos:column="26">!=<pos:position pos:line="76" pos:column="28"/></operator> <literal type="char" pos:line="76" pos:column="29">'\0'<pos:position pos:line="76" pos:column="33"/></literal></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34"> <block pos:line="76" pos:column="35">{
	    <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><operator pos:line="77" pos:column="17">*<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">src<pos:position pos:line="77" pos:column="21"/></name> <operator pos:line="77" pos:column="22">==<pos:position pos:line="77" pos:column="24"/></operator> <literal type="char" pos:line="77" pos:column="25">'\\'<pos:position pos:line="77" pos:column="29"/></literal></expr>)<pos:position pos:line="77" pos:column="30"/></condition><then pos:line="77" pos:column="30"> <block pos:line="77" pos:column="31">{
		<expr_stmt><expr><name pos:line="78" pos:column="17">src<pos:position pos:line="78" pos:column="20"/></name><operator pos:line="78" pos:column="20">++<pos:position pos:line="78" pos:column="22"/></operator></expr>;<pos:position pos:line="78" pos:column="23"/></expr_stmt>
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><operator pos:line="79" pos:column="21">!<pos:position pos:line="79" pos:column="22"/></operator><operator pos:line="79" pos:column="22">*<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="23">src<pos:position pos:line="79" pos:column="26"/></name></expr>)<pos:position pos:line="79" pos:column="27"/></condition><then pos:line="79" pos:column="27"> <block pos:line="79" pos:column="28">{
		    <expr_stmt><expr><name pos:line="80" pos:column="21">rc<pos:position pos:line="80" pos:column="23"/></name> <operator pos:line="80" pos:column="24">=<pos:position pos:line="80" pos:column="25"/></operator> <name pos:line="80" pos:column="26">POPT_ERROR_BADQUOTE<pos:position pos:line="80" pos:column="45"/></name></expr>;<pos:position pos:line="80" pos:column="46"/></expr_stmt>
		    <goto pos:line="81" pos:column="21">goto <name pos:line="81" pos:column="26">exit<pos:position pos:line="81" pos:column="30"/></name>;<pos:position pos:line="81" pos:column="31"/></goto>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><operator pos:line="83" pos:column="21">*<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="22">src<pos:position pos:line="83" pos:column="25"/></name> <operator pos:line="83" pos:column="26">!=<pos:position pos:line="83" pos:column="28"/></operator> <name pos:line="83" pos:column="29">quote<pos:position pos:line="83" pos:column="34"/></name></expr>)<pos:position pos:line="83" pos:column="35"/></condition><then pos:line="83" pos:column="35"> <block type="pseudo"><expr_stmt><expr><operator pos:line="83" pos:column="36">*<pos:position pos:line="83" pos:column="37"/></operator><name pos:line="83" pos:column="37">buf<pos:position pos:line="83" pos:column="40"/></name><operator pos:line="83" pos:column="40">++<pos:position pos:line="83" pos:column="42"/></operator> <operator pos:line="83" pos:column="43">=<pos:position pos:line="83" pos:column="44"/></operator> <literal type="char" pos:line="83" pos:column="45">'\\'<pos:position pos:line="83" pos:column="49"/></literal></expr>;<pos:position pos:line="83" pos:column="50"/></expr_stmt></block></then></if>
	    }<pos:position pos:line="84" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><operator pos:line="85" pos:column="13">*<pos:position pos:line="85" pos:column="14"/></operator><name pos:line="85" pos:column="14">buf<pos:position pos:line="85" pos:column="17"/></name><operator pos:line="85" pos:column="17">++<pos:position pos:line="85" pos:column="19"/></operator> <operator pos:line="85" pos:column="20">=<pos:position pos:line="85" pos:column="21"/></operator> <operator pos:line="85" pos:column="22">*<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="23">src<pos:position pos:line="85" pos:column="26"/></name></expr>;<pos:position pos:line="85" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if></elseif> <elseif pos:line="86" pos:column="11">else <if pos:line="86" pos:column="16">if <condition pos:line="86" pos:column="19">(<expr><call><name pos:line="86" pos:column="20">isSpace<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">src<pos:position pos:line="86" pos:column="31"/></name></expr></argument>)<pos:position pos:line="86" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="33"/></condition><then pos:line="86" pos:column="33"> <block pos:line="86" pos:column="34">{
	    <if pos:line="87" pos:column="13">if <condition pos:line="87" pos:column="16">(<expr><operator pos:line="87" pos:column="17">*<pos:position pos:line="87" pos:column="18"/></operator><name><name pos:line="87" pos:column="18">argv<pos:position pos:line="87" pos:column="22"/></name><index pos:line="87" pos:column="22">[<expr><name pos:line="87" pos:column="23">argc<pos:position pos:line="87" pos:column="27"/></name></expr>]<pos:position pos:line="87" pos:column="28"/></index></name> <operator pos:line="87" pos:column="29">!=<pos:position pos:line="87" pos:column="31"/></operator> <literal type="char" pos:line="87" pos:column="32">'\0'<pos:position pos:line="87" pos:column="36"/></literal></expr>)<pos:position pos:line="87" pos:column="37"/></condition><then pos:line="87" pos:column="37"> <block pos:line="87" pos:column="38">{
		<expr_stmt><expr><name pos:line="88" pos:column="17">buf<pos:position pos:line="88" pos:column="20"/></name><operator pos:line="88" pos:column="20">++<pos:position pos:line="88" pos:column="22"/></operator></expr><operator pos:line="88" pos:column="22">,<pos:position pos:line="88" pos:column="23"/></operator> <expr><name pos:line="88" pos:column="24">argc<pos:position pos:line="88" pos:column="28"/></name><operator pos:line="88" pos:column="28">++<pos:position pos:line="88" pos:column="30"/></operator></expr>;<pos:position pos:line="88" pos:column="31"/></expr_stmt>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">argc<pos:position pos:line="89" pos:column="25"/></name> <operator pos:line="89" pos:column="26">==<pos:position pos:line="89" pos:column="28"/></operator> <name pos:line="89" pos:column="29">argvAlloced<pos:position pos:line="89" pos:column="40"/></name></expr>)<pos:position pos:line="89" pos:column="41"/></condition><then pos:line="89" pos:column="41"> <block pos:line="89" pos:column="42">{
		    <expr_stmt><expr><name pos:line="90" pos:column="21">argvAlloced<pos:position pos:line="90" pos:column="32"/></name> <operator pos:line="90" pos:column="33">+=<pos:position pos:line="90" pos:column="35"/></operator> <name pos:line="90" pos:column="36">POPT_ARGV_ARRAY_GROW_DELTA<pos:position pos:line="90" pos:column="62"/></name></expr>;<pos:position pos:line="90" pos:column="63"/></expr_stmt>
		    <expr_stmt><expr><name pos:line="91" pos:column="21">argv<pos:position pos:line="91" pos:column="25"/></name> <operator pos:line="91" pos:column="26">=<pos:position pos:line="91" pos:column="27"/></operator> <call><name pos:line="91" pos:column="28">realloc<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">argv<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="91" pos:column="42">sizeof<argument_list pos:line="91" pos:column="48">(<argument><expr><operator pos:line="91" pos:column="49">*<pos:position pos:line="91" pos:column="50"/></operator><name pos:line="91" pos:column="50">argv<pos:position pos:line="91" pos:column="54"/></name></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></sizeof> <operator pos:line="91" pos:column="56">*<pos:position pos:line="91" pos:column="57"/></operator> <name pos:line="91" pos:column="58">argvAlloced<pos:position pos:line="91" pos:column="69"/></name></expr></argument>)<pos:position pos:line="91" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="71"/></expr_stmt>
		    <if pos:line="92" pos:column="21">if <condition pos:line="92" pos:column="24">(<expr><name pos:line="92" pos:column="25">argv<pos:position pos:line="92" pos:column="29"/></name> <operator pos:line="92" pos:column="30">==<pos:position pos:line="92" pos:column="32"/></operator> <name pos:line="92" pos:column="33">NULL<pos:position pos:line="92" pos:column="37"/></name></expr>)<pos:position pos:line="92" pos:column="38"/></condition><then pos:line="92" pos:column="38"> <block type="pseudo"><goto pos:line="92" pos:column="39">goto <name pos:line="92" pos:column="44">exit<pos:position pos:line="92" pos:column="48"/></name>;<pos:position pos:line="92" pos:column="49"/></goto></block></then></if>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="94" pos:column="17">argv<pos:position pos:line="94" pos:column="21"/></name><index pos:line="94" pos:column="21">[<expr><name pos:line="94" pos:column="22">argc<pos:position pos:line="94" pos:column="26"/></name></expr>]<pos:position pos:line="94" pos:column="27"/></index></name> <operator pos:line="94" pos:column="28">=<pos:position pos:line="94" pos:column="29"/></operator> <name pos:line="94" pos:column="30">buf<pos:position pos:line="94" pos:column="33"/></name></expr>;<pos:position pos:line="94" pos:column="34"/></expr_stmt>
	    }<pos:position pos:line="95" pos:column="14"/></block></then></if>
	}<pos:position pos:line="96" pos:column="10"/></block></then></if></elseif> <else pos:line="96" pos:column="11">else <block type="pseudo"><switch pos:line="96" pos:column="16">switch <condition pos:line="96" pos:column="23">(<expr><operator pos:line="96" pos:column="24">*<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="25">src<pos:position pos:line="96" pos:column="28"/></name></expr>)<pos:position pos:line="96" pos:column="29"/></condition> <block pos:line="96" pos:column="30">{
	  <case pos:line="97" pos:column="11">case <expr><literal type="char" pos:line="97" pos:column="16">'"'<pos:position pos:line="97" pos:column="19"/></literal></expr>:<pos:position pos:line="97" pos:column="20"/></case>
	  <case pos:line="98" pos:column="11">case <expr><literal type="char" pos:line="98" pos:column="16">'\''<pos:position pos:line="98" pos:column="20"/></literal></expr>:<pos:position pos:line="98" pos:column="21"/></case>
	    <expr_stmt><expr><name pos:line="99" pos:column="13">quote<pos:position pos:line="99" pos:column="18"/></name> <operator pos:line="99" pos:column="19">=<pos:position pos:line="99" pos:column="20"/></operator> <operator pos:line="99" pos:column="21">*<pos:position pos:line="99" pos:column="22"/></operator><name pos:line="99" pos:column="22">src<pos:position pos:line="99" pos:column="25"/></name></expr>;<pos:position pos:line="99" pos:column="26"/></expr_stmt>
	    <comment type="block" pos:line="100" pos:column="13">/*@switchbreak@*/</comment> <break pos:line="100" pos:column="31">break;<pos:position pos:line="100" pos:column="37"/></break>
	  <case pos:line="101" pos:column="11">case <expr><literal type="char" pos:line="101" pos:column="16">'\\'<pos:position pos:line="101" pos:column="20"/></literal></expr>:<pos:position pos:line="101" pos:column="21"/></case>
	    <expr_stmt><expr><name pos:line="102" pos:column="13">src<pos:position pos:line="102" pos:column="16"/></name><operator pos:line="102" pos:column="16">++<pos:position pos:line="102" pos:column="18"/></operator></expr>;<pos:position pos:line="102" pos:column="19"/></expr_stmt>
	    <if pos:line="103" pos:column="13">if <condition pos:line="103" pos:column="16">(<expr><operator pos:line="103" pos:column="17">!<pos:position pos:line="103" pos:column="18"/></operator><operator pos:line="103" pos:column="18">*<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="19">src<pos:position pos:line="103" pos:column="22"/></name></expr>)<pos:position pos:line="103" pos:column="23"/></condition><then pos:line="103" pos:column="23"> <block pos:line="103" pos:column="24">{
		<expr_stmt><expr><name pos:line="104" pos:column="17">rc<pos:position pos:line="104" pos:column="19"/></name> <operator pos:line="104" pos:column="20">=<pos:position pos:line="104" pos:column="21"/></operator> <name pos:line="104" pos:column="22">POPT_ERROR_BADQUOTE<pos:position pos:line="104" pos:column="41"/></name></expr>;<pos:position pos:line="104" pos:column="42"/></expr_stmt>
		<goto pos:line="105" pos:column="17">goto <name pos:line="105" pos:column="22">exit<pos:position pos:line="105" pos:column="26"/></name>;<pos:position pos:line="105" pos:column="27"/></goto>
	    }<pos:position pos:line="106" pos:column="14"/></block></then></if>
	    <comment type="block" pos:line="107" pos:column="13">/*@fallthrough@*/</comment>
	  <default pos:line="108" pos:column="11">default:<pos:position pos:line="108" pos:column="19"/></default>
	    <expr_stmt><expr><operator pos:line="109" pos:column="13">*<pos:position pos:line="109" pos:column="14"/></operator><name pos:line="109" pos:column="14">buf<pos:position pos:line="109" pos:column="17"/></name><operator pos:line="109" pos:column="17">++<pos:position pos:line="109" pos:column="19"/></operator> <operator pos:line="109" pos:column="20">=<pos:position pos:line="109" pos:column="21"/></operator> <operator pos:line="109" pos:column="22">*<pos:position pos:line="109" pos:column="23"/></operator><name pos:line="109" pos:column="23">src<pos:position pos:line="109" pos:column="26"/></name></expr>;<pos:position pos:line="109" pos:column="27"/></expr_stmt>
	    <comment type="block" pos:line="110" pos:column="13">/*@switchbreak@*/</comment> <break pos:line="110" pos:column="31">break;<pos:position pos:line="110" pos:column="37"/></break>
	}<pos:position pos:line="111" pos:column="10"/></block></switch></block></else></if>
    }<pos:position pos:line="112" pos:column="6"/></block></for>

    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">(<expr><call><name pos:line="114" pos:column="9">strlen<pos:position pos:line="114" pos:column="15"/></name><argument_list pos:line="114" pos:column="15">(<argument><expr><name><name pos:line="114" pos:column="16">argv<pos:position pos:line="114" pos:column="20"/></name><index pos:line="114" pos:column="20">[<expr><name pos:line="114" pos:column="21">argc<pos:position pos:line="114" pos:column="25"/></name></expr>]<pos:position pos:line="114" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="114" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="28"/></condition><then pos:line="114" pos:column="28"> <block pos:line="114" pos:column="29">{
	<expr_stmt><expr><name pos:line="115" pos:column="9">argc<pos:position pos:line="115" pos:column="13"/></name><operator pos:line="115" pos:column="13">++<pos:position pos:line="115" pos:column="15"/></operator></expr><operator pos:line="115" pos:column="15">,<pos:position pos:line="115" pos:column="16"/></operator> <expr><name pos:line="115" pos:column="17">buf<pos:position pos:line="115" pos:column="20"/></name><operator pos:line="115" pos:column="20">++<pos:position pos:line="115" pos:column="22"/></operator></expr>;<pos:position pos:line="115" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="118" pos:column="5">rc<pos:position pos:line="118" pos:column="7"/></name> <operator pos:line="118" pos:column="8">=<pos:position pos:line="118" pos:column="9"/></operator> <call><name pos:line="118" pos:column="10">poptDupArgv<pos:position pos:line="118" pos:column="21"/></name><argument_list pos:line="118" pos:column="21">(<argument><expr><name pos:line="118" pos:column="22">argc<pos:position pos:line="118" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="28">argv<pos:position pos:line="118" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="34">argcPtr<pos:position pos:line="118" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="43">argvPtr<pos:position pos:line="118" pos:column="50"/></name></expr></argument>)<pos:position pos:line="118" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="52"/></expr_stmt>

<label><name pos:line="120" pos:column="1">exit<pos:position pos:line="120" pos:column="5"/></name>:<pos:position pos:line="120" pos:column="6"/></label>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><name pos:line="121" pos:column="9">argv<pos:position pos:line="121" pos:column="13"/></name></expr>)<pos:position pos:line="121" pos:column="14"/></condition><then pos:line="121" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="15">free<pos:position pos:line="121" pos:column="19"/></name><argument_list pos:line="121" pos:column="19">(<argument><expr><name pos:line="121" pos:column="20">argv<pos:position pos:line="121" pos:column="24"/></name></expr></argument>)<pos:position pos:line="121" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="26"/></expr_stmt></block></then></if>
    <return pos:line="122" pos:column="5">return <expr><name pos:line="122" pos:column="12">rc<pos:position pos:line="122" pos:column="14"/></name></expr>;<pos:position pos:line="122" pos:column="15"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function>
<comment type="block" pos:line="124" pos:column="1">/*@=bounds@*/</comment>

<comment type="block" pos:line="126" pos:column="1">/* still in the dev stage.
 * return values, perhaps 1== file erro
 * 2== line to long
 * 3== umm.... more?
 */</comment>
<decl_stmt><decl><type><name pos:line="131" pos:column="1">int<pos:position pos:line="131" pos:column="4"/></name></type> <name pos:line="131" pos:column="5">poptConfigFileToString<pos:position pos:line="131" pos:column="27"/></name><argument_list pos:line="131" pos:column="27">(<argument><expr><name pos:line="131" pos:column="28">FILE<pos:position pos:line="131" pos:column="32"/></name> <operator pos:line="131" pos:column="33">*<pos:position pos:line="131" pos:column="34"/></operator><name pos:line="131" pos:column="34">fp<pos:position pos:line="131" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="38">char<pos:position pos:line="131" pos:column="42"/></name> <operator pos:line="131" pos:column="43">*<pos:position pos:line="131" pos:column="44"/></operator><operator pos:line="131" pos:column="44">*<pos:position pos:line="131" pos:column="45"/></operator> <name pos:line="131" pos:column="46">argstrp<pos:position pos:line="131" pos:column="53"/></name></expr></argument>, <comment type="block" pos:line="131" pos:column="55">/*@unused@*/</comment> <argument><expr><macro><name pos:line="131" pos:column="68">UNUSED<pos:position pos:line="131" pos:column="74"/></name><argument_list pos:line="131" pos:column="74">(<argument pos:line="131" pos:column="75">int flags<pos:position pos:line="131" pos:column="84"/></argument>)<pos:position pos:line="131" pos:column="85"/></argument_list></macro></expr></argument>)<pos:position pos:line="131" pos:column="86"/></argument_list>
<block pos:line="132" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="133" pos:column="5">char<pos:position pos:line="133" pos:column="9"/></name></type> <name><name pos:line="133" pos:column="10">line<pos:position pos:line="133" pos:column="14"/></name><index pos:line="133" pos:column="14">[<expr><literal type="number" pos:line="133" pos:column="15">999<pos:position pos:line="133" pos:column="18"/></literal></expr>]<pos:position pos:line="133" pos:column="19"/></index></name></decl>;<pos:position pos:line="133" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="134" pos:column="5">char<pos:position pos:line="134" pos:column="9"/></name> <modifier pos:line="134" pos:column="10">*<pos:position pos:line="134" pos:column="11"/></modifier></type> <name pos:line="134" pos:column="12">argstr<pos:position pos:line="134" pos:column="18"/></name></decl>;<pos:position pos:line="134" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="135" pos:column="5">char<pos:position pos:line="135" pos:column="9"/></name> <modifier pos:line="135" pos:column="10">*<pos:position pos:line="135" pos:column="11"/></modifier></type> <name pos:line="135" pos:column="12">p<pos:position pos:line="135" pos:column="13"/></name></decl>;<pos:position pos:line="135" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="136" pos:column="5">char<pos:position pos:line="136" pos:column="9"/></name> <modifier pos:line="136" pos:column="10">*<pos:position pos:line="136" pos:column="11"/></modifier></type> <name pos:line="136" pos:column="12">q<pos:position pos:line="136" pos:column="13"/></name></decl>;<pos:position pos:line="136" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="137" pos:column="5">char<pos:position pos:line="137" pos:column="9"/></name> <modifier pos:line="137" pos:column="10">*<pos:position pos:line="137" pos:column="11"/></modifier></type> <name pos:line="137" pos:column="12">x<pos:position pos:line="137" pos:column="13"/></name></decl>;<pos:position pos:line="137" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="138" pos:column="5">int<pos:position pos:line="138" pos:column="8"/></name></type> <name pos:line="138" pos:column="9">t<pos:position pos:line="138" pos:column="10"/></name></decl>;<pos:position pos:line="138" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="139" pos:column="5">int<pos:position pos:line="139" pos:column="8"/></name></type> <name pos:line="139" pos:column="9">argvlen<pos:position pos:line="139" pos:column="16"/></name> <init pos:line="139" pos:column="17">= <expr><literal type="number" pos:line="139" pos:column="19">0<pos:position pos:line="139" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="139" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="140" pos:column="5">size_t<pos:position pos:line="140" pos:column="11"/></name></type> <name pos:line="140" pos:column="12">maxlinelen<pos:position pos:line="140" pos:column="22"/></name> <init pos:line="140" pos:column="23">= <expr><sizeof pos:line="140" pos:column="25">sizeof<argument_list pos:line="140" pos:column="31">(<argument><expr><name pos:line="140" pos:column="32">line<pos:position pos:line="140" pos:column="36"/></name></expr></argument>)<pos:position pos:line="140" pos:column="37"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="140" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="141" pos:column="5">size_t<pos:position pos:line="141" pos:column="11"/></name></type> <name pos:line="141" pos:column="12">linelen<pos:position pos:line="141" pos:column="19"/></name></decl>;<pos:position pos:line="141" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="142" pos:column="5">int<pos:position pos:line="142" pos:column="8"/></name></type> <name pos:line="142" pos:column="9">maxargvlen<pos:position pos:line="142" pos:column="19"/></name> <init pos:line="142" pos:column="20">= <expr><literal type="number" pos:line="142" pos:column="22">480<pos:position pos:line="142" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="142" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="143" pos:column="5">int<pos:position pos:line="143" pos:column="8"/></name></type> <name pos:line="143" pos:column="9">linenum<pos:position pos:line="143" pos:column="16"/></name> <init pos:line="143" pos:column="17">= <expr><literal type="number" pos:line="143" pos:column="19">0<pos:position pos:line="143" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="143" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="145" pos:column="5">*<pos:position pos:line="145" pos:column="6"/></operator><name pos:line="145" pos:column="6">argstrp<pos:position pos:line="145" pos:column="13"/></name> <operator pos:line="145" pos:column="14">=<pos:position pos:line="145" pos:column="15"/></operator> <name pos:line="145" pos:column="16">NULL<pos:position pos:line="145" pos:column="20"/></name></expr>;<pos:position pos:line="145" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="147" pos:column="5">/*   |   this_is   =   our_line
     *	     p             q      x
     */</comment>

    <if pos:line="151" pos:column="5">if <condition pos:line="151" pos:column="8">(<expr><name pos:line="151" pos:column="9">fp<pos:position pos:line="151" pos:column="11"/></name> <operator pos:line="151" pos:column="12">==<pos:position pos:line="151" pos:column="14"/></operator> <name pos:line="151" pos:column="15">NULL<pos:position pos:line="151" pos:column="19"/></name></expr>)<pos:position pos:line="151" pos:column="20"/></condition><then pos:line="151" pos:column="20">
	<block type="pseudo"><return pos:line="152" pos:column="9">return <expr><name pos:line="152" pos:column="16">POPT_ERROR_NULLARG<pos:position pos:line="152" pos:column="34"/></name></expr>;<pos:position pos:line="152" pos:column="35"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="154" pos:column="5">argstr<pos:position pos:line="154" pos:column="11"/></name> <operator pos:line="154" pos:column="12">=<pos:position pos:line="154" pos:column="13"/></operator> <call><name pos:line="154" pos:column="14">calloc<pos:position pos:line="154" pos:column="20"/></name><argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">maxargvlen<pos:position pos:line="154" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="154" pos:column="33">sizeof<argument_list pos:line="154" pos:column="39">(<argument><expr><operator pos:line="154" pos:column="40">*<pos:position pos:line="154" pos:column="41"/></operator><name pos:line="154" pos:column="41">argstr<pos:position pos:line="154" pos:column="47"/></name></expr></argument>)<pos:position pos:line="154" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="154" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="50"/></expr_stmt>
    <if pos:line="155" pos:column="5">if <condition pos:line="155" pos:column="8">(<expr><name pos:line="155" pos:column="9">argstr<pos:position pos:line="155" pos:column="15"/></name> <operator pos:line="155" pos:column="16">==<pos:position pos:line="155" pos:column="18"/></operator> <name pos:line="155" pos:column="19">NULL<pos:position pos:line="155" pos:column="23"/></name></expr>)<pos:position pos:line="155" pos:column="24"/></condition><then pos:line="155" pos:column="24"> <block type="pseudo"><return pos:line="155" pos:column="25">return <expr><name pos:line="155" pos:column="32">POPT_ERROR_MALLOC<pos:position pos:line="155" pos:column="49"/></name></expr>;<pos:position pos:line="155" pos:column="50"/></return></block></then></if>

    <while pos:line="157" pos:column="5">while <condition pos:line="157" pos:column="11">(<expr><call><name pos:line="157" pos:column="12">fgets<pos:position pos:line="157" pos:column="17"/></name><argument_list pos:line="157" pos:column="17">(<argument><expr><name pos:line="157" pos:column="18">line<pos:position pos:line="157" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="24">(<pos:position pos:line="157" pos:column="25"/></operator><name pos:line="157" pos:column="25">int<pos:position pos:line="157" pos:column="28"/></name><operator pos:line="157" pos:column="28">)<pos:position pos:line="157" pos:column="29"/></operator><name pos:line="157" pos:column="29">maxlinelen<pos:position pos:line="157" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="41">fp<pos:position pos:line="157" pos:column="43"/></name></expr></argument>)<pos:position pos:line="157" pos:column="44"/></argument_list></call> <operator pos:line="157" pos:column="45">!=<pos:position pos:line="157" pos:column="47"/></operator> <name pos:line="157" pos:column="48">NULL<pos:position pos:line="157" pos:column="52"/></name></expr>)<pos:position pos:line="157" pos:column="53"/></condition> <block pos:line="157" pos:column="54">{
	<expr_stmt><expr><name pos:line="158" pos:column="9">linenum<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">++<pos:position pos:line="158" pos:column="18"/></operator></expr>;<pos:position pos:line="158" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="159" pos:column="9">p<pos:position pos:line="159" pos:column="10"/></name> <operator pos:line="159" pos:column="11">=<pos:position pos:line="159" pos:column="12"/></operator> <name pos:line="159" pos:column="13">line<pos:position pos:line="159" pos:column="17"/></name></expr>;<pos:position pos:line="159" pos:column="18"/></expr_stmt>

	<comment type="block" pos:line="161" pos:column="9">/* loop until first non-space char or EOL */</comment>
	<while pos:line="162" pos:column="9">while<condition pos:line="162" pos:column="14">( <expr><operator pos:line="162" pos:column="16">*<pos:position pos:line="162" pos:column="17"/></operator><name pos:line="162" pos:column="17">p<pos:position pos:line="162" pos:column="18"/></name> <operator pos:line="162" pos:column="19">!=<pos:position pos:line="162" pos:column="21"/></operator> <literal type="char" pos:line="162" pos:column="22">'\0'<pos:position pos:line="162" pos:column="26"/></literal> <operator pos:line="162" pos:column="27">&amp;&amp;<pos:position pos:line="162" pos:column="37"/></operator> <call><name pos:line="162" pos:column="30">isSpace<pos:position pos:line="162" pos:column="37"/></name><argument_list pos:line="162" pos:column="37">(<argument><expr><name pos:line="162" pos:column="38">p<pos:position pos:line="162" pos:column="39"/></name></expr></argument>)<pos:position pos:line="162" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="162" pos:column="42"/></condition>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="163" pos:column="13">p<pos:position pos:line="163" pos:column="14"/></name><operator pos:line="163" pos:column="14">++<pos:position pos:line="163" pos:column="16"/></operator></expr>;<pos:position pos:line="163" pos:column="17"/></expr_stmt></block></while>

	<expr_stmt><expr><name pos:line="165" pos:column="9">linelen<pos:position pos:line="165" pos:column="16"/></name> <operator pos:line="165" pos:column="17">=<pos:position pos:line="165" pos:column="18"/></operator> <call><name pos:line="165" pos:column="19">strlen<pos:position pos:line="165" pos:column="25"/></name><argument_list pos:line="165" pos:column="25">(<argument><expr><name pos:line="165" pos:column="26">p<pos:position pos:line="165" pos:column="27"/></name></expr></argument>)<pos:position pos:line="165" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="29"/></expr_stmt>
	<if pos:line="166" pos:column="9">if <condition pos:line="166" pos:column="12">(<expr><name pos:line="166" pos:column="13">linelen<pos:position pos:line="166" pos:column="20"/></name> <operator pos:line="166" pos:column="21">&gt;=<pos:position pos:line="166" pos:column="26"/></operator> <name pos:line="166" pos:column="24">maxlinelen<pos:position pos:line="166" pos:column="34"/></name><operator pos:line="166" pos:column="34">-<pos:position pos:line="166" pos:column="35"/></operator><literal type="number" pos:line="166" pos:column="35">1<pos:position pos:line="166" pos:column="36"/></literal></expr>)<pos:position pos:line="166" pos:column="37"/></condition><then pos:line="166" pos:column="37"> <block pos:line="166" pos:column="38">{
	    <expr_stmt><expr><call><name pos:line="167" pos:column="13">free<pos:position pos:line="167" pos:column="17"/></name><argument_list pos:line="167" pos:column="17">(<argument><expr><name pos:line="167" pos:column="18">argstr<pos:position pos:line="167" pos:column="24"/></name></expr></argument>)<pos:position pos:line="167" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="26"/></expr_stmt>
	    <return pos:line="168" pos:column="13">return <expr><name pos:line="168" pos:column="20">POPT_ERROR_OVERFLOW<pos:position pos:line="168" pos:column="39"/></name></expr>;<pos:position pos:line="168" pos:column="40"/></return>	<comment type="block" pos:line="168" pos:column="41">/* XXX line too long */</comment>
	}<pos:position pos:line="169" pos:column="10"/></block></then></if>

	<if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><operator pos:line="171" pos:column="13">*<pos:position pos:line="171" pos:column="14"/></operator><name pos:line="171" pos:column="14">p<pos:position pos:line="171" pos:column="15"/></name> <operator pos:line="171" pos:column="16">==<pos:position pos:line="171" pos:column="18"/></operator> <literal type="char" pos:line="171" pos:column="19">'\0'<pos:position pos:line="171" pos:column="23"/></literal> <operator pos:line="171" pos:column="24">||<pos:position pos:line="171" pos:column="26"/></operator> <operator pos:line="171" pos:column="27">*<pos:position pos:line="171" pos:column="28"/></operator><name pos:line="171" pos:column="28">p<pos:position pos:line="171" pos:column="29"/></name> <operator pos:line="171" pos:column="30">==<pos:position pos:line="171" pos:column="32"/></operator> <literal type="char" pos:line="171" pos:column="33">'\n'<pos:position pos:line="171" pos:column="37"/></literal></expr>)<pos:position pos:line="171" pos:column="38"/></condition><then pos:line="171" pos:column="38"> <block type="pseudo"><continue pos:line="171" pos:column="39">continue;<pos:position pos:line="171" pos:column="48"/></continue></block></then></if>	<comment type="block" pos:line="171" pos:column="49">/* line is empty */</comment>
	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><operator pos:line="172" pos:column="13">*<pos:position pos:line="172" pos:column="14"/></operator><name pos:line="172" pos:column="14">p<pos:position pos:line="172" pos:column="15"/></name> <operator pos:line="172" pos:column="16">==<pos:position pos:line="172" pos:column="18"/></operator> <literal type="char" pos:line="172" pos:column="19">'#'<pos:position pos:line="172" pos:column="22"/></literal></expr>)<pos:position pos:line="172" pos:column="23"/></condition><then pos:line="172" pos:column="23"> <block type="pseudo"><continue pos:line="172" pos:column="24">continue;<pos:position pos:line="172" pos:column="33"/></continue></block></then></if>		<comment type="block" pos:line="172" pos:column="49">/* comment line */</comment>

	<expr_stmt><expr><name pos:line="174" pos:column="9">q<pos:position pos:line="174" pos:column="10"/></name> <operator pos:line="174" pos:column="11">=<pos:position pos:line="174" pos:column="12"/></operator> <name pos:line="174" pos:column="13">p<pos:position pos:line="174" pos:column="14"/></name></expr>;<pos:position pos:line="174" pos:column="15"/></expr_stmt>

	<while pos:line="176" pos:column="9">while <condition pos:line="176" pos:column="15">(<expr><operator pos:line="176" pos:column="16">*<pos:position pos:line="176" pos:column="17"/></operator><name pos:line="176" pos:column="17">q<pos:position pos:line="176" pos:column="18"/></name> <operator pos:line="176" pos:column="19">!=<pos:position pos:line="176" pos:column="21"/></operator> <literal type="char" pos:line="176" pos:column="22">'\0'<pos:position pos:line="176" pos:column="26"/></literal> <operator pos:line="176" pos:column="27">&amp;&amp;<pos:position pos:line="176" pos:column="37"/></operator> <operator pos:line="176" pos:column="30">(<pos:position pos:line="176" pos:column="31"/></operator><operator pos:line="176" pos:column="31">!<pos:position pos:line="176" pos:column="32"/></operator><call><name pos:line="176" pos:column="32">isSpace<pos:position pos:line="176" pos:column="39"/></name><argument_list pos:line="176" pos:column="39">(<argument><expr><name pos:line="176" pos:column="40">q<pos:position pos:line="176" pos:column="41"/></name></expr></argument>)<pos:position pos:line="176" pos:column="42"/></argument_list></call><operator pos:line="176" pos:column="42">)<pos:position pos:line="176" pos:column="43"/></operator> <operator pos:line="176" pos:column="44">&amp;&amp;<pos:position pos:line="176" pos:column="54"/></operator> <operator pos:line="176" pos:column="47">*<pos:position pos:line="176" pos:column="48"/></operator><name pos:line="176" pos:column="48">q<pos:position pos:line="176" pos:column="49"/></name> <operator pos:line="176" pos:column="50">!=<pos:position pos:line="176" pos:column="52"/></operator> <literal type="char" pos:line="176" pos:column="53">'='<pos:position pos:line="176" pos:column="56"/></literal></expr>)<pos:position pos:line="176" pos:column="57"/></condition>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="177" pos:column="13">q<pos:position pos:line="177" pos:column="14"/></name><operator pos:line="177" pos:column="14">++<pos:position pos:line="177" pos:column="16"/></operator></expr>;<pos:position pos:line="177" pos:column="17"/></expr_stmt></block></while>

	<if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><call><name pos:line="179" pos:column="13">isSpace<pos:position pos:line="179" pos:column="20"/></name><argument_list pos:line="179" pos:column="20">(<argument><expr><name pos:line="179" pos:column="21">q<pos:position pos:line="179" pos:column="22"/></name></expr></argument>)<pos:position pos:line="179" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="179" pos:column="24"/></condition><then pos:line="179" pos:column="24"> <block pos:line="179" pos:column="25">{
	    <comment type="block" pos:line="180" pos:column="13">/* a space after the name, find next non space */</comment>
	    <expr_stmt><expr><operator pos:line="181" pos:column="13">*<pos:position pos:line="181" pos:column="14"/></operator><name pos:line="181" pos:column="14">q<pos:position pos:line="181" pos:column="15"/></name><operator pos:line="181" pos:column="15">++<pos:position pos:line="181" pos:column="17"/></operator><operator pos:line="181" pos:column="17">=<pos:position pos:line="181" pos:column="18"/></operator><literal type="char" pos:line="181" pos:column="18">'\0'<pos:position pos:line="181" pos:column="22"/></literal></expr>;<pos:position pos:line="181" pos:column="23"/></expr_stmt>
	    <while pos:line="182" pos:column="13">while<condition pos:line="182" pos:column="18">( <expr><operator pos:line="182" pos:column="20">*<pos:position pos:line="182" pos:column="21"/></operator><name pos:line="182" pos:column="21">q<pos:position pos:line="182" pos:column="22"/></name> <operator pos:line="182" pos:column="23">!=<pos:position pos:line="182" pos:column="25"/></operator> <literal type="char" pos:line="182" pos:column="26">'\0'<pos:position pos:line="182" pos:column="30"/></literal> <operator pos:line="182" pos:column="31">&amp;&amp;<pos:position pos:line="182" pos:column="41"/></operator> <call><name pos:line="182" pos:column="34">isSpace<pos:position pos:line="182" pos:column="41"/></name><argument_list pos:line="182" pos:column="41">(<argument><expr><name pos:line="182" pos:column="42">q<pos:position pos:line="182" pos:column="43"/></name></expr></argument>)<pos:position pos:line="182" pos:column="44"/></argument_list></call></expr> )<pos:position pos:line="182" pos:column="46"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="182" pos:column="47">q<pos:position pos:line="182" pos:column="48"/></name><operator pos:line="182" pos:column="48">++<pos:position pos:line="182" pos:column="50"/></operator></expr>;<pos:position pos:line="182" pos:column="51"/></expr_stmt></block></while>
	}<pos:position pos:line="183" pos:column="10"/></block></then></if>
	<if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><operator pos:line="184" pos:column="13">*<pos:position pos:line="184" pos:column="14"/></operator><name pos:line="184" pos:column="14">q<pos:position pos:line="184" pos:column="15"/></name> <operator pos:line="184" pos:column="16">==<pos:position pos:line="184" pos:column="18"/></operator> <literal type="char" pos:line="184" pos:column="19">'\0'<pos:position pos:line="184" pos:column="23"/></literal></expr>)<pos:position pos:line="184" pos:column="24"/></condition><then pos:line="184" pos:column="24"> <block pos:line="184" pos:column="25">{
	    <comment type="block" pos:line="185" pos:column="13">/* single command line option (ie, no name=val, just name) */</comment>
	    <expr_stmt><expr><name><name pos:line="186" pos:column="13">q<pos:position pos:line="186" pos:column="14"/></name><index pos:line="186" pos:column="14">[<expr><operator pos:line="186" pos:column="15">-<pos:position pos:line="186" pos:column="16"/></operator><literal type="number" pos:line="186" pos:column="16">1<pos:position pos:line="186" pos:column="17"/></literal></expr>]<pos:position pos:line="186" pos:column="18"/></index></name> <operator pos:line="186" pos:column="19">=<pos:position pos:line="186" pos:column="20"/></operator> <literal type="char" pos:line="186" pos:column="21">'\0'<pos:position pos:line="186" pos:column="25"/></literal></expr>;<pos:position pos:line="186" pos:column="26"/></expr_stmt>		<comment type="block" pos:line="186" pos:column="41">/* kill off newline from fgets() call */</comment>
	    <expr_stmt><expr><name pos:line="187" pos:column="13">argvlen<pos:position pos:line="187" pos:column="20"/></name> <operator pos:line="187" pos:column="21">+=<pos:position pos:line="187" pos:column="23"/></operator> <operator pos:line="187" pos:column="24">(<pos:position pos:line="187" pos:column="25"/></operator><name pos:line="187" pos:column="25">t<pos:position pos:line="187" pos:column="26"/></name> <operator pos:line="187" pos:column="27">=<pos:position pos:line="187" pos:column="28"/></operator> <name pos:line="187" pos:column="29">q<pos:position pos:line="187" pos:column="30"/></name> <operator pos:line="187" pos:column="31">-<pos:position pos:line="187" pos:column="32"/></operator> <name pos:line="187" pos:column="33">p<pos:position pos:line="187" pos:column="34"/></name><operator pos:line="187" pos:column="34">)<pos:position pos:line="187" pos:column="35"/></operator> <operator pos:line="187" pos:column="36">+<pos:position pos:line="187" pos:column="37"/></operator> <operator pos:line="187" pos:column="38">(<pos:position pos:line="187" pos:column="39"/></operator><sizeof pos:line="187" pos:column="39">sizeof<argument_list pos:line="187" pos:column="45">(<argument><expr><literal type="string" pos:line="187" pos:column="46">" --"<pos:position pos:line="187" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="52"/></argument_list></sizeof><operator pos:line="187" pos:column="52">-<pos:position pos:line="187" pos:column="53"/></operator><literal type="number" pos:line="187" pos:column="53">1<pos:position pos:line="187" pos:column="54"/></literal><operator pos:line="187" pos:column="54">)<pos:position pos:line="187" pos:column="55"/></operator></expr>;<pos:position pos:line="187" pos:column="56"/></expr_stmt>
	    <if pos:line="188" pos:column="13">if <condition pos:line="188" pos:column="16">(<expr><name pos:line="188" pos:column="17">argvlen<pos:position pos:line="188" pos:column="24"/></name> <operator pos:line="188" pos:column="25">&gt;=<pos:position pos:line="188" pos:column="30"/></operator> <name pos:line="188" pos:column="28">maxargvlen<pos:position pos:line="188" pos:column="38"/></name></expr>)<pos:position pos:line="188" pos:column="39"/></condition><then pos:line="188" pos:column="39"> <block pos:line="188" pos:column="40">{
		<expr_stmt><expr><name pos:line="189" pos:column="17">maxargvlen<pos:position pos:line="189" pos:column="27"/></name> <operator pos:line="189" pos:column="28">=<pos:position pos:line="189" pos:column="29"/></operator> <ternary><condition><expr><operator pos:line="189" pos:column="30">(<pos:position pos:line="189" pos:column="31"/></operator><name pos:line="189" pos:column="31">t<pos:position pos:line="189" pos:column="32"/></name> <operator pos:line="189" pos:column="33">&gt;<pos:position pos:line="189" pos:column="37"/></operator> <name pos:line="189" pos:column="35">maxargvlen<pos:position pos:line="189" pos:column="45"/></name><operator pos:line="189" pos:column="45">)<pos:position pos:line="189" pos:column="46"/></operator></expr> ?<pos:position pos:line="189" pos:column="48"/></condition><then pos:line="189" pos:column="48"> <expr><name pos:line="189" pos:column="49">t<pos:position pos:line="189" pos:column="50"/></name><operator pos:line="189" pos:column="50">*<pos:position pos:line="189" pos:column="51"/></operator><literal type="number" pos:line="189" pos:column="51">2<pos:position pos:line="189" pos:column="52"/></literal></expr> <pos:position pos:line="189" pos:column="53"/></then><else pos:line="189" pos:column="53">: <expr><name pos:line="189" pos:column="55">maxargvlen<pos:position pos:line="189" pos:column="65"/></name><operator pos:line="189" pos:column="65">*<pos:position pos:line="189" pos:column="66"/></operator><literal type="number" pos:line="189" pos:column="66">2<pos:position pos:line="189" pos:column="67"/></literal></expr></else></ternary></expr>;<pos:position pos:line="189" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name pos:line="190" pos:column="17">argstr<pos:position pos:line="190" pos:column="23"/></name> <operator pos:line="190" pos:column="24">=<pos:position pos:line="190" pos:column="25"/></operator> <call><name pos:line="190" pos:column="26">realloc<pos:position pos:line="190" pos:column="33"/></name><argument_list pos:line="190" pos:column="33">(<argument><expr><name pos:line="190" pos:column="34">argstr<pos:position pos:line="190" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="42">maxargvlen<pos:position pos:line="190" pos:column="52"/></name></expr></argument>)<pos:position pos:line="190" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="54"/></expr_stmt>
		<if pos:line="191" pos:column="17">if <condition pos:line="191" pos:column="20">(<expr><name pos:line="191" pos:column="21">argstr<pos:position pos:line="191" pos:column="27"/></name> <operator pos:line="191" pos:column="28">==<pos:position pos:line="191" pos:column="30"/></operator> <name pos:line="191" pos:column="31">NULL<pos:position pos:line="191" pos:column="35"/></name></expr>)<pos:position pos:line="191" pos:column="36"/></condition><then pos:line="191" pos:column="36"> <block type="pseudo"><return pos:line="191" pos:column="37">return <expr><name pos:line="191" pos:column="44">POPT_ERROR_MALLOC<pos:position pos:line="191" pos:column="61"/></name></expr>;<pos:position pos:line="191" pos:column="62"/></return></block></then></if>
	    }<pos:position pos:line="192" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><call><name pos:line="193" pos:column="13">strlcat<pos:position pos:line="193" pos:column="20"/></name><argument_list pos:line="193" pos:column="20">(<argument><expr><name pos:line="193" pos:column="21">argstr<pos:position pos:line="193" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="193" pos:column="29">" --"<pos:position pos:line="193" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="36">maxargvlen<pos:position pos:line="193" pos:column="46"/></name></expr></argument>)<pos:position pos:line="193" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="48"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="194" pos:column="13">strlcat<pos:position pos:line="194" pos:column="20"/></name><argument_list pos:line="194" pos:column="20">(<argument><expr><name pos:line="194" pos:column="21">argstr<pos:position pos:line="194" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="29">p<pos:position pos:line="194" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="32">maxargvlen<pos:position pos:line="194" pos:column="42"/></name></expr></argument>)<pos:position pos:line="194" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="44"/></expr_stmt>
	    <continue pos:line="195" pos:column="13">continue;<pos:position pos:line="195" pos:column="22"/></continue>
	}<pos:position pos:line="196" pos:column="10"/></block></then></if>
	<if pos:line="197" pos:column="9">if <condition pos:line="197" pos:column="12">(<expr><operator pos:line="197" pos:column="13">*<pos:position pos:line="197" pos:column="14"/></operator><name pos:line="197" pos:column="14">q<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">!=<pos:position pos:line="197" pos:column="18"/></operator> <literal type="char" pos:line="197" pos:column="19">'='<pos:position pos:line="197" pos:column="22"/></literal></expr>)<pos:position pos:line="197" pos:column="23"/></condition><then pos:line="197" pos:column="23">
	    <block type="pseudo"><continue pos:line="198" pos:column="13">continue;<pos:position pos:line="198" pos:column="22"/></continue></block></then></if>	<comment type="block" pos:line="198" pos:column="25">/* XXX for now, silently ignore bogus line */</comment>
		
	<comment type="block" pos:line="200" pos:column="9">/* *q is an equal sign. */</comment>
	<expr_stmt><expr><operator pos:line="201" pos:column="9">*<pos:position pos:line="201" pos:column="10"/></operator><name pos:line="201" pos:column="10">q<pos:position pos:line="201" pos:column="11"/></name><operator pos:line="201" pos:column="11">++<pos:position pos:line="201" pos:column="13"/></operator> <operator pos:line="201" pos:column="14">=<pos:position pos:line="201" pos:column="15"/></operator> <literal type="char" pos:line="201" pos:column="16">'\0'<pos:position pos:line="201" pos:column="20"/></literal></expr>;<pos:position pos:line="201" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="203" pos:column="9">/* find next non-space letter of value */</comment>
	<while pos:line="204" pos:column="9">while <condition pos:line="204" pos:column="15">(<expr><operator pos:line="204" pos:column="16">*<pos:position pos:line="204" pos:column="17"/></operator><name pos:line="204" pos:column="17">q<pos:position pos:line="204" pos:column="18"/></name> <operator pos:line="204" pos:column="19">!=<pos:position pos:line="204" pos:column="21"/></operator> <literal type="char" pos:line="204" pos:column="22">'\0'<pos:position pos:line="204" pos:column="26"/></literal> <operator pos:line="204" pos:column="27">&amp;&amp;<pos:position pos:line="204" pos:column="37"/></operator> <call><name pos:line="204" pos:column="30">isSpace<pos:position pos:line="204" pos:column="37"/></name><argument_list pos:line="204" pos:column="37">(<argument><expr><name pos:line="204" pos:column="38">q<pos:position pos:line="204" pos:column="39"/></name></expr></argument>)<pos:position pos:line="204" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="204" pos:column="41"/></condition>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="205" pos:column="13">q<pos:position pos:line="205" pos:column="14"/></name><operator pos:line="205" pos:column="14">++<pos:position pos:line="205" pos:column="16"/></operator></expr>;<pos:position pos:line="205" pos:column="17"/></expr_stmt></block></while>
	<if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><operator pos:line="206" pos:column="13">*<pos:position pos:line="206" pos:column="14"/></operator><name pos:line="206" pos:column="14">q<pos:position pos:line="206" pos:column="15"/></name> <operator pos:line="206" pos:column="16">==<pos:position pos:line="206" pos:column="18"/></operator> <literal type="char" pos:line="206" pos:column="19">'\0'<pos:position pos:line="206" pos:column="23"/></literal></expr>)<pos:position pos:line="206" pos:column="24"/></condition><then pos:line="206" pos:column="24">
	    <block type="pseudo"><continue pos:line="207" pos:column="13">continue;<pos:position pos:line="207" pos:column="22"/></continue></block></then></if>	<comment type="block" pos:line="207" pos:column="25">/* XXX silently ignore missing value */</comment>

	<comment type="block" pos:line="209" pos:column="9">/* now, loop and strip all ending whitespace */</comment>
	<expr_stmt><expr><name pos:line="210" pos:column="9">x<pos:position pos:line="210" pos:column="10"/></name> <operator pos:line="210" pos:column="11">=<pos:position pos:line="210" pos:column="12"/></operator> <name pos:line="210" pos:column="13">p<pos:position pos:line="210" pos:column="14"/></name> <operator pos:line="210" pos:column="15">+<pos:position pos:line="210" pos:column="16"/></operator> <name pos:line="210" pos:column="17">linelen<pos:position pos:line="210" pos:column="24"/></name></expr>;<pos:position pos:line="210" pos:column="25"/></expr_stmt>
	<while pos:line="211" pos:column="9">while <condition pos:line="211" pos:column="15">(<expr><call><name pos:line="211" pos:column="16">isSpace<pos:position pos:line="211" pos:column="23"/></name><argument_list pos:line="211" pos:column="23">(<argument><expr><operator pos:line="211" pos:column="24">--<pos:position pos:line="211" pos:column="26"/></operator><name pos:line="211" pos:column="26">x<pos:position pos:line="211" pos:column="27"/></name></expr></argument>)<pos:position pos:line="211" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="211" pos:column="29"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="212" pos:column="13">*<pos:position pos:line="212" pos:column="14"/></operator><name pos:line="212" pos:column="14">x<pos:position pos:line="212" pos:column="15"/></name> <operator pos:line="212" pos:column="16">=<pos:position pos:line="212" pos:column="17"/></operator> <literal type="number" pos:line="212" pos:column="18">0<pos:position pos:line="212" pos:column="19"/></literal></expr>;<pos:position pos:line="212" pos:column="20"/></expr_stmt></block></while>	<comment type="block" pos:line="212" pos:column="25">/* null out last char if space (including fgets() NL) */</comment>

	<comment type="block" pos:line="214" pos:column="9">/* rest of line accept */</comment>
	<expr_stmt><expr><name pos:line="215" pos:column="9">t<pos:position pos:line="215" pos:column="10"/></name> <operator pos:line="215" pos:column="11">=<pos:position pos:line="215" pos:column="12"/></operator> <name pos:line="215" pos:column="13">x<pos:position pos:line="215" pos:column="14"/></name> <operator pos:line="215" pos:column="15">-<pos:position pos:line="215" pos:column="16"/></operator> <name pos:line="215" pos:column="17">p<pos:position pos:line="215" pos:column="18"/></name></expr>;<pos:position pos:line="215" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="216" pos:column="9">argvlen<pos:position pos:line="216" pos:column="16"/></name> <operator pos:line="216" pos:column="17">+=<pos:position pos:line="216" pos:column="19"/></operator> <name pos:line="216" pos:column="20">t<pos:position pos:line="216" pos:column="21"/></name> <operator pos:line="216" pos:column="22">+<pos:position pos:line="216" pos:column="23"/></operator> <operator pos:line="216" pos:column="24">(<pos:position pos:line="216" pos:column="25"/></operator><sizeof pos:line="216" pos:column="25">sizeof<argument_list pos:line="216" pos:column="31">(<argument><expr><literal type="string" pos:line="216" pos:column="32">"' --='"<pos:position pos:line="216" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="216" pos:column="41"/></argument_list></sizeof><operator pos:line="216" pos:column="41">-<pos:position pos:line="216" pos:column="42"/></operator><literal type="number" pos:line="216" pos:column="42">1<pos:position pos:line="216" pos:column="43"/></literal><operator pos:line="216" pos:column="43">)<pos:position pos:line="216" pos:column="44"/></operator></expr>;<pos:position pos:line="216" pos:column="45"/></expr_stmt>
	<if pos:line="217" pos:column="9">if <condition pos:line="217" pos:column="12">(<expr><name pos:line="217" pos:column="13">argvlen<pos:position pos:line="217" pos:column="20"/></name> <operator pos:line="217" pos:column="21">&gt;=<pos:position pos:line="217" pos:column="26"/></operator> <name pos:line="217" pos:column="24">maxargvlen<pos:position pos:line="217" pos:column="34"/></name></expr>)<pos:position pos:line="217" pos:column="35"/></condition><then pos:line="217" pos:column="35"> <block pos:line="217" pos:column="36">{
	    <expr_stmt><expr><name pos:line="218" pos:column="13">maxargvlen<pos:position pos:line="218" pos:column="23"/></name> <operator pos:line="218" pos:column="24">=<pos:position pos:line="218" pos:column="25"/></operator> <ternary><condition><expr><operator pos:line="218" pos:column="26">(<pos:position pos:line="218" pos:column="27"/></operator><name pos:line="218" pos:column="27">t<pos:position pos:line="218" pos:column="28"/></name> <operator pos:line="218" pos:column="29">&gt;<pos:position pos:line="218" pos:column="33"/></operator> <name pos:line="218" pos:column="31">maxargvlen<pos:position pos:line="218" pos:column="41"/></name><operator pos:line="218" pos:column="41">)<pos:position pos:line="218" pos:column="42"/></operator></expr> ?<pos:position pos:line="218" pos:column="44"/></condition><then pos:line="218" pos:column="44"> <expr><name pos:line="218" pos:column="45">t<pos:position pos:line="218" pos:column="46"/></name><operator pos:line="218" pos:column="46">*<pos:position pos:line="218" pos:column="47"/></operator><literal type="number" pos:line="218" pos:column="47">2<pos:position pos:line="218" pos:column="48"/></literal></expr> <pos:position pos:line="218" pos:column="49"/></then><else pos:line="218" pos:column="49">: <expr><name pos:line="218" pos:column="51">maxargvlen<pos:position pos:line="218" pos:column="61"/></name><operator pos:line="218" pos:column="61">*<pos:position pos:line="218" pos:column="62"/></operator><literal type="number" pos:line="218" pos:column="62">2<pos:position pos:line="218" pos:column="63"/></literal></expr></else></ternary></expr>;<pos:position pos:line="218" pos:column="64"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="219" pos:column="13">argstr<pos:position pos:line="219" pos:column="19"/></name> <operator pos:line="219" pos:column="20">=<pos:position pos:line="219" pos:column="21"/></operator> <call><name pos:line="219" pos:column="22">realloc<pos:position pos:line="219" pos:column="29"/></name><argument_list pos:line="219" pos:column="29">(<argument><expr><name pos:line="219" pos:column="30">argstr<pos:position pos:line="219" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="38">maxargvlen<pos:position pos:line="219" pos:column="48"/></name></expr></argument>)<pos:position pos:line="219" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="50"/></expr_stmt>
	    <if pos:line="220" pos:column="13">if <condition pos:line="220" pos:column="16">(<expr><name pos:line="220" pos:column="17">argstr<pos:position pos:line="220" pos:column="23"/></name> <operator pos:line="220" pos:column="24">==<pos:position pos:line="220" pos:column="26"/></operator> <name pos:line="220" pos:column="27">NULL<pos:position pos:line="220" pos:column="31"/></name></expr>)<pos:position pos:line="220" pos:column="32"/></condition><then pos:line="220" pos:column="32"> <block type="pseudo"><return pos:line="220" pos:column="33">return <expr><name pos:line="220" pos:column="40">POPT_ERROR_MALLOC<pos:position pos:line="220" pos:column="57"/></name></expr>;<pos:position pos:line="220" pos:column="58"/></return></block></then></if>
	}<pos:position pos:line="221" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="222" pos:column="9">strlcat<pos:position pos:line="222" pos:column="16"/></name><argument_list pos:line="222" pos:column="16">(<argument><expr><name pos:line="222" pos:column="17">argstr<pos:position pos:line="222" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="25">" --"<pos:position pos:line="222" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="32">maxargvlen<pos:position pos:line="222" pos:column="42"/></name></expr></argument>)<pos:position pos:line="222" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="223" pos:column="9">strlcat<pos:position pos:line="223" pos:column="16"/></name><argument_list pos:line="223" pos:column="16">(<argument><expr><name pos:line="223" pos:column="17">argstr<pos:position pos:line="223" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="25">p<pos:position pos:line="223" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="28">maxargvlen<pos:position pos:line="223" pos:column="38"/></name></expr></argument>)<pos:position pos:line="223" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="224" pos:column="9">strlcat<pos:position pos:line="224" pos:column="16"/></name><argument_list pos:line="224" pos:column="16">(<argument><expr><name pos:line="224" pos:column="17">argstr<pos:position pos:line="224" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="224" pos:column="25">"=\""<pos:position pos:line="224" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="224" pos:column="32">maxargvlen<pos:position pos:line="224" pos:column="42"/></name></expr></argument>)<pos:position pos:line="224" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="225" pos:column="9">strlcat<pos:position pos:line="225" pos:column="16"/></name><argument_list pos:line="225" pos:column="16">(<argument><expr><name pos:line="225" pos:column="17">argstr<pos:position pos:line="225" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="25">q<pos:position pos:line="225" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="28">maxargvlen<pos:position pos:line="225" pos:column="38"/></name></expr></argument>)<pos:position pos:line="225" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="226" pos:column="9">strlcat<pos:position pos:line="226" pos:column="16"/></name><argument_list pos:line="226" pos:column="16">(<argument><expr><name pos:line="226" pos:column="17">argstr<pos:position pos:line="226" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="226" pos:column="25">"\""<pos:position pos:line="226" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="226" pos:column="31">maxargvlen<pos:position pos:line="226" pos:column="41"/></name></expr></argument>)<pos:position pos:line="226" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="227" pos:column="6"/></block></while>

    <expr_stmt><expr><operator pos:line="229" pos:column="5">*<pos:position pos:line="229" pos:column="6"/></operator><name pos:line="229" pos:column="6">argstrp<pos:position pos:line="229" pos:column="13"/></name> <operator pos:line="229" pos:column="14">=<pos:position pos:line="229" pos:column="15"/></operator> <name pos:line="229" pos:column="16">argstr<pos:position pos:line="229" pos:column="22"/></name></expr>;<pos:position pos:line="229" pos:column="23"/></expr_stmt>
    <return pos:line="230" pos:column="5">return <expr><literal type="number" pos:line="230" pos:column="12">0<pos:position pos:line="230" pos:column="13"/></literal></expr>;<pos:position pos:line="230" pos:column="14"/></return>
}<pos:position pos:line="231" pos:column="2"/></block></decl></decl_stmt>
</unit>
