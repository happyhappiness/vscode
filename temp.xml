<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/repos/curl-7.14.0/include/curl/multi.h" pos:tabs="8"><cpp:ifndef pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">ifndef<pos:position pos:line="1" pos:column="8"/></cpp:directive> <name pos:line="1" pos:column="9">__CURL_MULTI_H<pos:position pos:line="1" pos:column="23"/></name></cpp:ifndef>
<cpp:define pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">define<pos:position pos:line="2" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="2" pos:column="9">__CURL_MULTI_H<pos:position pos:line="2" pos:column="23"/></name></cpp:macro></cpp:define>
<comment type="block" pos:line="3" pos:column="1">/***************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ &lt;| |___
 *                             \___|\___/|_| \_\_____|
 *
 * Copyright (C) 1998 - 2005, Daniel Stenberg, &lt;daniel@haxx.se&gt;, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at http://curl.haxx.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 * $Id: multi.h,v 1.25 2005/04/18 11:40:50 bagder Exp $
 ***************************************************************************/</comment>
<comment type="block" pos:line="25" pos:column="1">/*
  This is an "external" header file. Don't give away any internals here!

  GOALS

  o Enable a "pull" interface. The application that uses libcurl decides where
    and when to ask libcurl to get/send data.

  o Enable multiple simultaneous transfers in the same thread without making it
    complicated for the application.

  o Enable the application to select() on its own file descriptors and curl's
    file descriptors simultaneous easily.

*/</comment>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><call><name pos:line="40" pos:column="5">defined<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">_WIN32<pos:position pos:line="40" pos:column="19"/></name></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call> <operator pos:line="40" pos:column="21">&amp;&amp;<pos:position pos:line="40" pos:column="31"/></operator> <operator pos:line="40" pos:column="24">!<pos:position pos:line="40" pos:column="25"/></operator><call><name pos:line="40" pos:column="25">defined<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">WIN32<pos:position pos:line="40" pos:column="38"/></name></expr></argument>)<pos:position pos:line="40" pos:column="39"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="41" pos:column="1">/* Chris Lewis mentioned that he doesn't get WIN32 defined, only _WIN32 so we
   make this adjustment to catch this. */</comment>
<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define<pos:position pos:line="43" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">WIN32<pos:position pos:line="43" pos:column="14"/></name></cpp:macro> <cpp:value pos:line="43" pos:column="15">1<pos:position pos:line="43" pos:column="16"/></cpp:value></cpp:define>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><call><name pos:line="46" pos:column="5">defined<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">WIN32<pos:position pos:line="46" pos:column="18"/></name></expr></argument>)<pos:position pos:line="46" pos:column="19"/></argument_list></call> <operator pos:line="46" pos:column="20">&amp;&amp;<pos:position pos:line="46" pos:column="30"/></operator> <operator pos:line="46" pos:column="23">!<pos:position pos:line="46" pos:column="24"/></operator><call><name pos:line="46" pos:column="24">defined<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">_WIN32_WCE<pos:position pos:line="46" pos:column="42"/></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call> <operator pos:line="46" pos:column="44">&amp;&amp;<pos:position pos:line="46" pos:column="54"/></operator> <operator pos:line="46" pos:column="47">!<pos:position pos:line="46" pos:column="48"/></operator><call><name pos:line="46" pos:column="48">defined<pos:position pos:line="46" pos:column="55"/></name><argument_list pos:line="46" pos:column="55">(<argument><expr><name pos:line="46" pos:column="56">__GNUC__<pos:position pos:line="46" pos:column="64"/></name></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call> <operator pos:line="46" pos:column="66">||<pos:position pos:line="46" pos:column="68"/></operator> \
  <call><name pos:line="47" pos:column="3">defined<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">__MINGW32__<pos:position pos:line="47" pos:column="22"/></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr></cpp:if>
<cpp:if pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">if<pos:position pos:line="48" pos:column="4"/></cpp:directive> <expr><operator pos:line="48" pos:column="5">!<pos:position pos:line="48" pos:column="6"/></operator><operator pos:line="48" pos:column="6">(<pos:position pos:line="48" pos:column="7"/></operator><call><name pos:line="48" pos:column="7">defined<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">_WINSOCKAPI_<pos:position pos:line="48" pos:column="27"/></name></expr></argument>)<pos:position pos:line="48" pos:column="28"/></argument_list></call> <operator pos:line="48" pos:column="29">||<pos:position pos:line="48" pos:column="31"/></operator> <call><name pos:line="48" pos:column="32">defined<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">_WINSOCK_H<pos:position pos:line="48" pos:column="50"/></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call><operator pos:line="48" pos:column="51">)<pos:position pos:line="48" pos:column="52"/></operator></expr></cpp:if>
<comment type="block" pos:line="49" pos:column="1">/* The check above prevents the winsock2 inclusion if winsock.h already was
   included, since they can't co-exist without problems */</comment>
<cpp:include pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">include<pos:position pos:line="51" pos:column="9"/></cpp:directive> <cpp:file pos:line="51" pos:column="10">&lt;winsock2.h&gt;<pos:position pos:line="51" pos:column="25"/></cpp:file></cpp:include>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:else pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">else<pos:position pos:line="53" pos:column="6"/></cpp:directive></cpp:else>

<comment type="block" pos:line="55" pos:column="1">/* HP-UX systems version 9, 10 and 11 lack sys/select.h and so does oldish
   libc5-based Linux systems. Only include it on system that are known to
   require it! */</comment>
<cpp:if pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">if<pos:position pos:line="58" pos:column="4"/></cpp:directive> <expr><call><name pos:line="58" pos:column="5">defined<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">_AIX<pos:position pos:line="58" pos:column="17"/></name></expr></argument>)<pos:position pos:line="58" pos:column="18"/></argument_list></call> <operator pos:line="58" pos:column="19">||<pos:position pos:line="58" pos:column="21"/></operator> <call><name pos:line="58" pos:column="22">defined<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">NETWARE<pos:position pos:line="58" pos:column="37"/></name></expr></argument>)<pos:position pos:line="58" pos:column="38"/></argument_list></call></expr></cpp:if>
<cpp:include pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">include<pos:position pos:line="59" pos:column="9"/></cpp:directive> <cpp:file pos:line="59" pos:column="10">&lt;sys/select.h&gt;<pos:position pos:line="59" pos:column="27"/></cpp:file></cpp:include>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifndef<pos:position pos:line="62" pos:column="8"/></cpp:directive> <name pos:line="62" pos:column="9">_WIN32_WCE<pos:position pos:line="62" pos:column="19"/></name></cpp:ifndef>
<cpp:include pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">include<pos:position pos:line="63" pos:column="9"/></cpp:directive> <cpp:file pos:line="63" pos:column="10">&lt;sys/socket.h&gt;<pos:position pos:line="63" pos:column="27"/></cpp:file></cpp:include>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:include pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">include<pos:position pos:line="65" pos:column="9"/></cpp:directive> <cpp:file pos:line="65" pos:column="10">&lt;sys/time.h&gt;<pos:position pos:line="65" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">include<pos:position pos:line="66" pos:column="9"/></cpp:directive> <cpp:file pos:line="66" pos:column="10">&lt;sys/types.h&gt;<pos:position pos:line="66" pos:column="26"/></cpp:file></cpp:include>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:include pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">include<pos:position pos:line="69" pos:column="9"/></cpp:directive> <cpp:file pos:line="69" pos:column="10">"curl.h"<pos:position pos:line="69" pos:column="18"/></cpp:file></cpp:include>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive>  <name pos:line="71" pos:column="9">__cplusplus<pos:position pos:line="71" pos:column="20"/></name></cpp:ifdef>
<extern pos:line="72" pos:column="1">extern <literal type="string" pos:line="72" pos:column="8">"C"<pos:position pos:line="72" pos:column="11"/></literal> <block pos:line="72" pos:column="12">{
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

<typedef pos:line="75" pos:column="1">typedef <type><name pos:line="75" pos:column="9">void<pos:position pos:line="75" pos:column="13"/></name></type> <name pos:line="75" pos:column="14">CURLM<pos:position pos:line="75" pos:column="19"/></name>;<pos:position pos:line="75" pos:column="20"/></typedef>

<cpp:ifdef pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">ifdef<pos:position pos:line="77" pos:column="7"/></cpp:directive> <name pos:line="77" pos:column="8">HAVE_CURL_MULTI_SOCKET<pos:position pos:line="77" pos:column="30"/></name></cpp:ifdef> <comment type="block" pos:line="77" pos:column="31">/* this is not set by anything yet */</comment>

<cpp:ifndef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifndef<pos:position pos:line="79" pos:column="8"/></cpp:directive> <name pos:line="79" pos:column="9">curl_socket_typedef<pos:position pos:line="79" pos:column="28"/></name></cpp:ifndef>
<comment type="block" pos:line="80" pos:column="1">/* Public socket typedef */</comment>
<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">WIN32<pos:position pos:line="81" pos:column="13"/></name></cpp:ifdef>
<typedef pos:line="82" pos:column="1">typedef <type><name pos:line="82" pos:column="9">SOCKET<pos:position pos:line="82" pos:column="15"/></name></type> <name pos:line="82" pos:column="16">curl_socket_t<pos:position pos:line="82" pos:column="29"/></name>;<pos:position pos:line="82" pos:column="30"/></typedef>
<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define<pos:position pos:line="83" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="83" pos:column="9">CURL_SOCKET_BAD<pos:position pos:line="83" pos:column="24"/></name></cpp:macro> <cpp:value pos:line="83" pos:column="25">INVALID_SOCKET<pos:position pos:line="83" pos:column="39"/></cpp:value></cpp:define>
<cpp:else pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">else<pos:position pos:line="84" pos:column="6"/></cpp:directive></cpp:else>
<typedef pos:line="85" pos:column="1">typedef <type><name pos:line="85" pos:column="9">int<pos:position pos:line="85" pos:column="12"/></name></type> <name pos:line="85" pos:column="13">curl_socket_t<pos:position pos:line="85" pos:column="26"/></name>;<pos:position pos:line="85" pos:column="27"/></typedef>
<cpp:define pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">define<pos:position pos:line="86" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="86" pos:column="9">CURL_SOCKET_BAD<pos:position pos:line="86" pos:column="24"/></name></cpp:macro> <cpp:value pos:line="86" pos:column="25">-1<pos:position pos:line="86" pos:column="27"/></cpp:value></cpp:define>
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:define pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">define<pos:position pos:line="88" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="88" pos:column="9">curl_socket_typedef<pos:position pos:line="88" pos:column="28"/></name></cpp:macro></cpp:define>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="89" pos:column="8">/* curl_socket_typedef */</comment>

<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="91" pos:column="8">/* HAVE_CURL_MULTI_SOCKET */</comment>

<typedef pos:line="93" pos:column="1">typedef <type><enum pos:line="93" pos:column="9">enum <block pos:line="93" pos:column="14">{
  <decl><name pos:line="94" pos:column="3">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="94" pos:column="27"/></name><init pos:line="94" pos:column="27">=<expr><operator pos:line="94" pos:column="28">-<pos:position pos:line="94" pos:column="29"/></operator><literal type="number" pos:line="94" pos:column="29">1<pos:position pos:line="94" pos:column="30"/></literal></expr></init></decl>, <comment type="block" pos:line="94" pos:column="32">/* please call curl_multi_perform() soon */</comment>
  <decl><name pos:line="95" pos:column="3">CURLM_OK<pos:position pos:line="95" pos:column="11"/></name></decl>,
  <decl><name pos:line="96" pos:column="3">CURLM_BAD_HANDLE<pos:position pos:line="96" pos:column="19"/></name></decl>,      <comment type="block" pos:line="96" pos:column="26">/* the passed-in handle is not a valid CURLM handle */</comment>
  <decl><name pos:line="97" pos:column="3">CURLM_BAD_EASY_HANDLE<pos:position pos:line="97" pos:column="24"/></name></decl>, <comment type="block" pos:line="97" pos:column="26">/* an easy handle was not good/valid */</comment>
  <decl><name pos:line="98" pos:column="3">CURLM_OUT_OF_MEMORY<pos:position pos:line="98" pos:column="22"/></name></decl>,   <comment type="block" pos:line="98" pos:column="26">/* if you ever get this, you're in deep sh*t */</comment>
  <decl><name pos:line="99" pos:column="3">CURLM_INTERNAL_ERROR<pos:position pos:line="99" pos:column="23"/></name></decl>,  <comment type="block" pos:line="99" pos:column="26">/* this is a libcurl bug */</comment>
  <decl><name pos:line="100" pos:column="3">CURLM_LAST<pos:position pos:line="100" pos:column="13"/></name></decl>
}<pos:position pos:line="101" pos:column="2"/></block></enum></type> <name pos:line="101" pos:column="3">CURLMcode<pos:position pos:line="101" pos:column="12"/></name>;<pos:position pos:line="101" pos:column="13"/></typedef>

<typedef pos:line="103" pos:column="1">typedef <type><enum pos:line="103" pos:column="9">enum <block pos:line="103" pos:column="14">{
  <decl><name pos:line="104" pos:column="3">CURLMSG_NONE<pos:position pos:line="104" pos:column="15"/></name></decl>, <comment type="block" pos:line="104" pos:column="17">/* first, not used */</comment>
  <decl><name pos:line="105" pos:column="3">CURLMSG_DONE<pos:position pos:line="105" pos:column="15"/></name></decl>, <comment type="block" pos:line="105" pos:column="17">/* This easy handle has completed. 'result' contains
                   the CURLcode of the transfer */</comment>
  <decl><name pos:line="107" pos:column="3">CURLMSG_LAST<pos:position pos:line="107" pos:column="15"/></name></decl> <comment type="block" pos:line="107" pos:column="16">/* last, not used */</comment>
}<pos:position pos:line="108" pos:column="2"/></block></enum></type> <name pos:line="108" pos:column="3">CURLMSG<pos:position pos:line="108" pos:column="10"/></name>;<pos:position pos:line="108" pos:column="11"/></typedef>

<struct pos:line="110" pos:column="1">struct <name pos:line="110" pos:column="8">CURLMsg<pos:position pos:line="110" pos:column="15"/></name> <block pos:line="110" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="111" pos:column="3">CURLMSG<pos:position pos:line="111" pos:column="10"/></name></type> <name pos:line="111" pos:column="11">msg<pos:position pos:line="111" pos:column="14"/></name></decl>;<pos:position pos:line="111" pos:column="15"/></decl_stmt>       <comment type="block" pos:line="111" pos:column="22">/* what this message means */</comment>
  <decl_stmt><decl><type><name pos:line="112" pos:column="3">CURL<pos:position pos:line="112" pos:column="7"/></name> <modifier pos:line="112" pos:column="8">*<pos:position pos:line="112" pos:column="9"/></modifier></type><name pos:line="112" pos:column="9">easy_handle<pos:position pos:line="112" pos:column="20"/></name></decl>;<pos:position pos:line="112" pos:column="21"/></decl_stmt> <comment type="block" pos:line="112" pos:column="22">/* the handle it concerns */</comment>
  <union pos:line="113" pos:column="3">union <block pos:line="113" pos:column="9">{
    <decl_stmt><decl><type><name pos:line="114" pos:column="5">void<pos:position pos:line="114" pos:column="9"/></name> <modifier pos:line="114" pos:column="10">*<pos:position pos:line="114" pos:column="11"/></modifier></type><name pos:line="114" pos:column="11">whatever<pos:position pos:line="114" pos:column="19"/></name></decl>;<pos:position pos:line="114" pos:column="20"/></decl_stmt>    <comment type="block" pos:line="114" pos:column="24">/* message-specific data */</comment>
    <decl_stmt><decl><type><name pos:line="115" pos:column="5">CURLcode<pos:position pos:line="115" pos:column="13"/></name></type> <name pos:line="115" pos:column="14">result<pos:position pos:line="115" pos:column="20"/></name></decl>;<pos:position pos:line="115" pos:column="21"/></decl_stmt>   <comment type="block" pos:line="115" pos:column="24">/* return code for transfer */</comment>
  }<pos:position pos:line="116" pos:column="4"/></block> <decl><name pos:line="116" pos:column="5">data<pos:position pos:line="116" pos:column="9"/></name></decl>;<pos:position pos:line="116" pos:column="10"/></union>
}<pos:position pos:line="117" pos:column="2"/></block>;<pos:position pos:line="117" pos:column="3"/></struct>
<typedef pos:line="118" pos:column="1">typedef <type><name><name pos:line="118" pos:column="9">struct<pos:position pos:line="118" pos:column="15"/></name> <name pos:line="118" pos:column="16">CURLMsg<pos:position pos:line="118" pos:column="23"/></name></name></type> <name pos:line="118" pos:column="24">CURLMsg<pos:position pos:line="118" pos:column="31"/></name>;<pos:position pos:line="118" pos:column="32"/></typedef>

<comment type="block" pos:line="120" pos:column="1">/*
 * Name:    curl_multi_init()
 *
 * Desc:    inititalize multi-style curl usage
 *
 * Returns: a new CURLM handle to use in all 'curl_multi' functions.
 */</comment>
<function_decl><type><name pos:line="127" pos:column="1">CURL_EXTERN<pos:position pos:line="127" pos:column="12"/></name> <name pos:line="127" pos:column="13">CURLM<pos:position pos:line="127" pos:column="18"/></name> <modifier pos:line="127" pos:column="19">*<pos:position pos:line="127" pos:column="20"/></modifier></type><name pos:line="127" pos:column="20">curl_multi_init<pos:position pos:line="127" pos:column="35"/></name><parameter_list pos:line="127" pos:column="35">(<parameter><decl><type><name pos:line="127" pos:column="36">void<pos:position pos:line="127" pos:column="40"/></name></type></decl></parameter>)<pos:position pos:line="127" pos:column="41"/></parameter_list>;<pos:position pos:line="127" pos:column="42"/></function_decl>

<comment type="block" pos:line="129" pos:column="1">/*
 * Name:    curl_multi_add_handle()
 *
 * Desc:    add a standard curl handle to the multi stack
 *
 * Returns: CURLMcode type, general multi error code.
 */</comment>
<function_decl><type><name pos:line="136" pos:column="1">CURL_EXTERN<pos:position pos:line="136" pos:column="12"/></name> <name pos:line="136" pos:column="13">CURLMcode<pos:position pos:line="136" pos:column="22"/></name></type> <name pos:line="136" pos:column="23">curl_multi_add_handle<pos:position pos:line="136" pos:column="44"/></name><parameter_list pos:line="136" pos:column="44">(<parameter><decl><type><name pos:line="136" pos:column="45">CURLM<pos:position pos:line="136" pos:column="50"/></name> <modifier pos:line="136" pos:column="51">*<pos:position pos:line="136" pos:column="52"/></modifier></type><name pos:line="136" pos:column="52">multi_handle<pos:position pos:line="136" pos:column="64"/></name></decl></parameter>,
                                            <parameter><decl><type><name pos:line="137" pos:column="45">CURL<pos:position pos:line="137" pos:column="49"/></name> <modifier pos:line="137" pos:column="50">*<pos:position pos:line="137" pos:column="51"/></modifier></type><name pos:line="137" pos:column="51">curl_handle<pos:position pos:line="137" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="137" pos:column="63"/></parameter_list>;<pos:position pos:line="137" pos:column="64"/></function_decl>

 <comment type="block" pos:line="139" pos:column="2">/*
  * Name:    curl_multi_remove_handle()
  *
  * Desc:    removes a curl handle from the multi stack again
  *
  * Returns: CURLMcode type, general multi error code.
  */</comment>
<function_decl><type><name pos:line="146" pos:column="1">CURL_EXTERN<pos:position pos:line="146" pos:column="12"/></name> <name pos:line="146" pos:column="13">CURLMcode<pos:position pos:line="146" pos:column="22"/></name></type> <name pos:line="146" pos:column="23">curl_multi_remove_handle<pos:position pos:line="146" pos:column="47"/></name><parameter_list pos:line="146" pos:column="47">(<parameter><decl><type><name pos:line="146" pos:column="48">CURLM<pos:position pos:line="146" pos:column="53"/></name> <modifier pos:line="146" pos:column="54">*<pos:position pos:line="146" pos:column="55"/></modifier></type><name pos:line="146" pos:column="55">multi_handle<pos:position pos:line="146" pos:column="67"/></name></decl></parameter>,
                                               <parameter><decl><type><name pos:line="147" pos:column="48">CURL<pos:position pos:line="147" pos:column="52"/></name> <modifier pos:line="147" pos:column="53">*<pos:position pos:line="147" pos:column="54"/></modifier></type><name pos:line="147" pos:column="54">curl_handle<pos:position pos:line="147" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="147" pos:column="66"/></parameter_list>;<pos:position pos:line="147" pos:column="67"/></function_decl>

 <comment type="block" pos:line="149" pos:column="2">/*
  * Name:    curl_multi_fdset()
  *
  * Desc:    Ask curl for its fd_set sets. The app can use these to select() or
  *          poll() on. We want curl_multi_perform() called as soon as one of
  *          them are ready.
  *
  * Returns: CURLMcode type, general multi error code.
  */</comment>
<function_decl><type><name pos:line="158" pos:column="1">CURL_EXTERN<pos:position pos:line="158" pos:column="12"/></name> <name pos:line="158" pos:column="13">CURLMcode<pos:position pos:line="158" pos:column="22"/></name></type> <name pos:line="158" pos:column="23">curl_multi_fdset<pos:position pos:line="158" pos:column="39"/></name><parameter_list pos:line="158" pos:column="39">(<parameter><decl><type><name pos:line="158" pos:column="40">CURLM<pos:position pos:line="158" pos:column="45"/></name> <modifier pos:line="158" pos:column="46">*<pos:position pos:line="158" pos:column="47"/></modifier></type><name pos:line="158" pos:column="47">multi_handle<pos:position pos:line="158" pos:column="59"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="159" pos:column="40">fd_set<pos:position pos:line="159" pos:column="46"/></name> <modifier pos:line="159" pos:column="47">*<pos:position pos:line="159" pos:column="48"/></modifier></type><name pos:line="159" pos:column="48">read_fd_set<pos:position pos:line="159" pos:column="59"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="160" pos:column="40">fd_set<pos:position pos:line="160" pos:column="46"/></name> <modifier pos:line="160" pos:column="47">*<pos:position pos:line="160" pos:column="48"/></modifier></type><name pos:line="160" pos:column="48">write_fd_set<pos:position pos:line="160" pos:column="60"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="161" pos:column="40">fd_set<pos:position pos:line="161" pos:column="46"/></name> <modifier pos:line="161" pos:column="47">*<pos:position pos:line="161" pos:column="48"/></modifier></type><name pos:line="161" pos:column="48">exc_fd_set<pos:position pos:line="161" pos:column="58"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="162" pos:column="40">int<pos:position pos:line="162" pos:column="43"/></name> <modifier pos:line="162" pos:column="44">*<pos:position pos:line="162" pos:column="45"/></modifier></type><name pos:line="162" pos:column="45">max_fd<pos:position pos:line="162" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="162" pos:column="52"/></parameter_list>;<pos:position pos:line="162" pos:column="53"/></function_decl>

 <comment type="block" pos:line="164" pos:column="2">/*
  * Name:    curl_multi_perform()
  *
  * Desc:    When the app thinks there's data available for curl it calls this
  *          function to read/write whatever there is right now. This returns
  *          as soon as the reads and writes are done. This function does not
  *          require that there actually is data available for reading or that
  *          data can be written, it can be called just in case. It returns
  *          the number of handles that still transfer data in the second
  *          argument's integer-pointer.
  *
  * Returns: CURLMcode type, general multi error code. *NOTE* that this only
  *          returns errors etc regarding the whole multi stack. There might
  *          still have occurred problems on invidual transfers even when this
  *          returns OK.
  */</comment>
<function_decl><type><name pos:line="180" pos:column="1">CURL_EXTERN<pos:position pos:line="180" pos:column="12"/></name> <name pos:line="180" pos:column="13">CURLMcode<pos:position pos:line="180" pos:column="22"/></name></type> <name pos:line="180" pos:column="23">curl_multi_perform<pos:position pos:line="180" pos:column="41"/></name><parameter_list pos:line="180" pos:column="41">(<parameter><decl><type><name pos:line="180" pos:column="42">CURLM<pos:position pos:line="180" pos:column="47"/></name> <modifier pos:line="180" pos:column="48">*<pos:position pos:line="180" pos:column="49"/></modifier></type><name pos:line="180" pos:column="49">multi_handle<pos:position pos:line="180" pos:column="61"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="181" pos:column="42">int<pos:position pos:line="181" pos:column="45"/></name> <modifier pos:line="181" pos:column="46">*<pos:position pos:line="181" pos:column="47"/></modifier></type><name pos:line="181" pos:column="47">running_handles<pos:position pos:line="181" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="181" pos:column="63"/></parameter_list>;<pos:position pos:line="181" pos:column="64"/></function_decl>

 <comment type="block" pos:line="183" pos:column="2">/*
  * Name:    curl_multi_cleanup()
  *
  * Desc:    Cleans up and removes a whole multi stack. It does not free or
  *          touch any individual easy handles in any way. We need to define
  *          in what state those handles will be if this function is called
  *          in the middle of a transfer.
  *
  * Returns: CURLMcode type, general multi error code.
  */</comment>
<function_decl><type><name pos:line="193" pos:column="1">CURL_EXTERN<pos:position pos:line="193" pos:column="12"/></name> <name pos:line="193" pos:column="13">CURLMcode<pos:position pos:line="193" pos:column="22"/></name></type> <name pos:line="193" pos:column="23">curl_multi_cleanup<pos:position pos:line="193" pos:column="41"/></name><parameter_list pos:line="193" pos:column="41">(<parameter><decl><type><name pos:line="193" pos:column="42">CURLM<pos:position pos:line="193" pos:column="47"/></name> <modifier pos:line="193" pos:column="48">*<pos:position pos:line="193" pos:column="49"/></modifier></type><name pos:line="193" pos:column="49">multi_handle<pos:position pos:line="193" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="193" pos:column="62"/></parameter_list>;<pos:position pos:line="193" pos:column="63"/></function_decl>

<comment type="block" pos:line="195" pos:column="1">/*
 * Name:    curl_multi_info_read()
 *
 * Desc:    Ask the multi handle if there's any messages/informationals from
 *          the individual transfers. Messages include informationals such as
 *          error code from the transfer or just the fact that a transfer is
 *          completed. More details on these should be written down as well.
 *
 *          Repeated calls to this function will return a new struct each
 *          time, until a special "end of msgs" struct is returned as a signal
 *          that there is no more to get at this point.
 *
 *          The data the returned pointer points to will not survive calling
 *          curl_multi_cleanup().
 *
 *          The 'CURLMsg' struct is meant to be very simple and only contain
 *          very basic informations. If more involved information is wanted,
 *          we will provide the particular "transfer handle" in that struct
 *          and that should/could/would be used in subsequent
 *          curl_easy_getinfo() calls (or similar). The point being that we
 *          must never expose complex structs to applications, as then we'll
 *          undoubtably get backwards compatibility problems in the future.
 *
 * Returns: A pointer to a filled-in struct, or NULL if it failed or ran out
 *          of structs. It also writes the number of messages left in the
 *          queue (after this read) in the integer the second argument points
 *          to.
 */</comment>
<function_decl><type><name pos:line="223" pos:column="1">CURL_EXTERN<pos:position pos:line="223" pos:column="12"/></name> <name pos:line="223" pos:column="13">CURLMsg<pos:position pos:line="223" pos:column="20"/></name> <modifier pos:line="223" pos:column="21">*<pos:position pos:line="223" pos:column="22"/></modifier></type><name pos:line="223" pos:column="22">curl_multi_info_read<pos:position pos:line="223" pos:column="42"/></name><parameter_list pos:line="223" pos:column="42">(<parameter><decl><type><name pos:line="223" pos:column="43">CURLM<pos:position pos:line="223" pos:column="48"/></name> <modifier pos:line="223" pos:column="49">*<pos:position pos:line="223" pos:column="50"/></modifier></type><name pos:line="223" pos:column="50">multi_handle<pos:position pos:line="223" pos:column="62"/></name></decl></parameter>,
                                          <parameter><decl><type><name pos:line="224" pos:column="43">int<pos:position pos:line="224" pos:column="46"/></name> <modifier pos:line="224" pos:column="47">*<pos:position pos:line="224" pos:column="48"/></modifier></type><name pos:line="224" pos:column="48">msgs_in_queue<pos:position pos:line="224" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="224" pos:column="62"/></parameter_list>;<pos:position pos:line="224" pos:column="63"/></function_decl>

<comment type="block" pos:line="226" pos:column="1">/*
 * Name:    curl_multi_strerror()
 *
 * Desc:    The curl_multi_strerror function may be used to turn a CURLMcode
 *          value into the equivalent human readable error string.  This is
 *          useful for printing meaningful error messages.
 *
 * Returns: A pointer to a zero-terminated error message.
 */</comment>
<function_decl><type><name pos:line="235" pos:column="1">CURL_EXTERN<pos:position pos:line="235" pos:column="12"/></name> <specifier pos:line="235" pos:column="13">const<pos:position pos:line="235" pos:column="18"/></specifier> <name pos:line="235" pos:column="19">char<pos:position pos:line="235" pos:column="23"/></name> <modifier pos:line="235" pos:column="24">*<pos:position pos:line="235" pos:column="25"/></modifier></type><name pos:line="235" pos:column="25">curl_multi_strerror<pos:position pos:line="235" pos:column="44"/></name><parameter_list pos:line="235" pos:column="44">(<parameter><decl><type><name pos:line="235" pos:column="45">CURLMcode<pos:position pos:line="235" pos:column="54"/></name></type></decl></parameter>)<pos:position pos:line="235" pos:column="55"/></parameter_list>;<pos:position pos:line="235" pos:column="56"/></function_decl>

<cpp:ifdef pos:line="237" pos:column="1">#<cpp:directive pos:line="237" pos:column="2">ifdef<pos:position pos:line="237" pos:column="7"/></cpp:directive> <name pos:line="237" pos:column="8">HAVE_CURL_MULTI_SOCKET<pos:position pos:line="237" pos:column="30"/></name></cpp:ifdef>
<comment type="block" pos:line="238" pos:column="1">/*
 * Name:    curl_multi_socket() and
 *          curl_multi_socket_all()
 *
 * Desc:    An alternative version of curl_multi_perform() that allows the
 *          application to pass in one of the file descriptors that have been
 *          detected to have "action" on them and let libcurl perform. This
 *          allows libcurl to not have to scan through all possible file
 *          descriptors to check for this. The app is recommended to pass in
 *          the 'easy' argument (or set it to CURL_EASY_NONE) to make libcurl
 *          figure out the internal structure even faster and easier.  If the
 *          easy argument is set to something else than CURL_EASY_NONE, the
 *          's' (socket) argument will be ignored by libcurl.
 *
 *          It also informs the application about updates in the socket (file
 *          descriptor) status by doing none, one or multiple calls to the
 *          curl_socket_callback. It thus updates the status with changes
 *          since the previous time this function was used. If 'callback' is
 *          NULL, no callback will be called. A status change may also be a
 *          new timeout only, having the same IN/OUT status as before.
 *
 *          If a previous wait for socket action(s) timed out, you should call
 *          this function with the socket argument set to
 *          CURL_SOCKET_TIMEOUT. If you want to force libcurl to (re-)check
 *          all its internal sockets, and call the callback with status for
 *          all sockets no matter what the previous state is, you call
 *          curl_multi_socket_all() instead.
 *
 *          curl_multi_perform() is thus the equivalent of calling
 *          curl_multi_socket_all(handle, NULL, NULL);
 *
 *          IMPLEMENTATION: libcurl will need an internal hash table to map
 *          socket numbers to internal easy handles for the cases when 'easy'
 *          is set to CURL_EASY_NONE.
 *
 *          Regarding the timeout argument in the callback: it is the timeout
 *          (in milliseconds) for waiting on action on this socket (and the
 *          given time period starts when the callback is called) until you
 *          should call curl_multi_socket() with the timeout stuff mentioned
 *          above. If "actions" happens on the socket before the timeout
 *          happens, remember that the timout timer keeps ticking until told
 *          otherwise.
 *
 *          The "what" argument has one of five values:
 *
 *            0 CURL_POLL_NONE (0)   - register, not interested in readiness
 *            1 CURL_POLL_IN         - register, interested in read readiness
 *            2 CURL_POLL_OUT        - register, interested in write readiness
 *            3 CURL_POLL_INOUT      - register, interested in both
 *            4 CURL_POLL_REMOVE     - deregister
 */</comment>
<cpp:define pos:line="289" pos:column="1">#<cpp:directive pos:line="289" pos:column="2">define<pos:position pos:line="289" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="289" pos:column="9">CURL_POLL_NONE<pos:position pos:line="289" pos:column="23"/></name></cpp:macro>   <cpp:value pos:line="289" pos:column="26">0<pos:position pos:line="289" pos:column="27"/></cpp:value></cpp:define>
<cpp:define pos:line="290" pos:column="1">#<cpp:directive pos:line="290" pos:column="2">define<pos:position pos:line="290" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="290" pos:column="9">CURL_POLL_IN<pos:position pos:line="290" pos:column="21"/></name></cpp:macro>     <cpp:value pos:line="290" pos:column="26">1<pos:position pos:line="290" pos:column="27"/></cpp:value></cpp:define>
<cpp:define pos:line="291" pos:column="1">#<cpp:directive pos:line="291" pos:column="2">define<pos:position pos:line="291" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="291" pos:column="9">CURL_POLL_OUT<pos:position pos:line="291" pos:column="22"/></name></cpp:macro>    <cpp:value pos:line="291" pos:column="26">2<pos:position pos:line="291" pos:column="27"/></cpp:value></cpp:define>
<cpp:define pos:line="292" pos:column="1">#<cpp:directive pos:line="292" pos:column="2">define<pos:position pos:line="292" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="292" pos:column="9">CURL_POLL_INOUT<pos:position pos:line="292" pos:column="24"/></name></cpp:macro>  <cpp:value pos:line="292" pos:column="26">3<pos:position pos:line="292" pos:column="27"/></cpp:value></cpp:define>
<cpp:define pos:line="293" pos:column="1">#<cpp:directive pos:line="293" pos:column="2">define<pos:position pos:line="293" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="293" pos:column="9">CURL_POLL_REMOVE<pos:position pos:line="293" pos:column="25"/></name></cpp:macro> <cpp:value pos:line="293" pos:column="26">4<pos:position pos:line="293" pos:column="27"/></cpp:value></cpp:define>

<cpp:define pos:line="295" pos:column="1">#<cpp:directive pos:line="295" pos:column="2">define<pos:position pos:line="295" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="295" pos:column="9">CURL_EASY_NONE<pos:position pos:line="295" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="295" pos:column="24">(CURL *)0<pos:position pos:line="295" pos:column="33"/></cpp:value></cpp:define>
<cpp:define pos:line="296" pos:column="1">#<cpp:directive pos:line="296" pos:column="2">define<pos:position pos:line="296" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="296" pos:column="9">CURL_EASY_TIMEOUT<pos:position pos:line="296" pos:column="26"/></name></cpp:macro> <cpp:value pos:line="296" pos:column="27">(CURL *)0<pos:position pos:line="296" pos:column="36"/></cpp:value></cpp:define>
<cpp:define pos:line="297" pos:column="1">#<cpp:directive pos:line="297" pos:column="2">define<pos:position pos:line="297" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="297" pos:column="9">CURL_SOCKET_TIMEOUT<pos:position pos:line="297" pos:column="28"/></name></cpp:macro> <cpp:value pos:line="297" pos:column="29">CURL_SOCKET_BAD<pos:position pos:line="297" pos:column="44"/></cpp:value></cpp:define>

<typedef pos:line="299" pos:column="1">typedef <function_decl><type><name pos:line="299" pos:column="9">int<pos:position pos:line="299" pos:column="12"/></name></type> (<modifier pos:line="299" pos:column="14">*<pos:position pos:line="299" pos:column="15"/></modifier><name pos:line="299" pos:column="15">curl_socket_callback<pos:position pos:line="299" pos:column="35"/></name>)<parameter_list pos:line="299" pos:column="36">(<parameter><decl><type><name pos:line="299" pos:column="37">CURL<pos:position pos:line="299" pos:column="41"/></name> <modifier pos:line="299" pos:column="42">*<pos:position pos:line="299" pos:column="43"/></modifier></type><name pos:line="299" pos:column="43">easy<pos:position pos:line="299" pos:column="47"/></name></decl></parameter>,      <comment type="block" pos:line="299" pos:column="54">/* easy handle */</comment>
                                    <parameter><decl><type><name pos:line="300" pos:column="37">curl_socket_t<pos:position pos:line="300" pos:column="50"/></name></type> <name pos:line="300" pos:column="51">s<pos:position pos:line="300" pos:column="52"/></name></decl></parameter>, <comment type="block" pos:line="300" pos:column="54">/* socket */</comment>
                                    <parameter><decl><type><name pos:line="301" pos:column="37">int<pos:position pos:line="301" pos:column="40"/></name></type> <name pos:line="301" pos:column="41">what<pos:position pos:line="301" pos:column="45"/></name></decl></parameter>,        <comment type="block" pos:line="301" pos:column="54">/* see above */</comment>
                                    <parameter><decl><type><name pos:line="302" pos:column="37">long<pos:position pos:line="302" pos:column="41"/></name></type> <name pos:line="302" pos:column="42">ms<pos:position pos:line="302" pos:column="44"/></name></decl></parameter>,         <comment type="block" pos:line="302" pos:column="54">/* timeout for wait */</comment>
                                    <parameter><decl><type><name pos:line="303" pos:column="37">void<pos:position pos:line="303" pos:column="41"/></name> <modifier pos:line="303" pos:column="42">*<pos:position pos:line="303" pos:column="43"/></modifier></type><name pos:line="303" pos:column="43">userp<pos:position pos:line="303" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="303" pos:column="49"/></parameter_list>;<pos:position pos:line="303" pos:column="50"/></function_decl></typedef>    <comment type="block" pos:line="303" pos:column="54">/* "private" pointer */</comment>

<function_decl><type><name pos:line="305" pos:column="1">CURLMcode<pos:position pos:line="305" pos:column="10"/></name></type> <name pos:line="305" pos:column="11">curl_multi_socket<pos:position pos:line="305" pos:column="28"/></name><parameter_list pos:line="305" pos:column="28">(<parameter><decl><type><name pos:line="305" pos:column="29">CURLM<pos:position pos:line="305" pos:column="34"/></name> <modifier pos:line="305" pos:column="35">*<pos:position pos:line="305" pos:column="36"/></modifier></type><name pos:line="305" pos:column="36">multi_handle<pos:position pos:line="305" pos:column="48"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="306" pos:column="29">curl_socket_t<pos:position pos:line="306" pos:column="42"/></name></type> <name pos:line="306" pos:column="43">s<pos:position pos:line="306" pos:column="44"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="307" pos:column="29">CURL<pos:position pos:line="307" pos:column="33"/></name> <modifier pos:line="307" pos:column="34">*<pos:position pos:line="307" pos:column="35"/></modifier></type><name pos:line="307" pos:column="35">easy<pos:position pos:line="307" pos:column="39"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="308" pos:column="29">curl_socket_callback<pos:position pos:line="308" pos:column="49"/></name></type> <name pos:line="308" pos:column="50">callback<pos:position pos:line="308" pos:column="58"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="309" pos:column="29">void<pos:position pos:line="309" pos:column="33"/></name> <modifier pos:line="309" pos:column="34">*<pos:position pos:line="309" pos:column="35"/></modifier></type><name pos:line="309" pos:column="35">userp<pos:position pos:line="309" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="309" pos:column="41"/></parameter_list>;<pos:position pos:line="309" pos:column="42"/></function_decl> <comment type="block" pos:line="309" pos:column="43">/* passed to callback */</comment>

<function_decl><type><name pos:line="311" pos:column="1">CURLMcode<pos:position pos:line="311" pos:column="10"/></name></type> <name pos:line="311" pos:column="11">curl_multi_socket_all<pos:position pos:line="311" pos:column="32"/></name><parameter_list pos:line="311" pos:column="32">(<parameter><decl><type><name pos:line="311" pos:column="33">CURLM<pos:position pos:line="311" pos:column="38"/></name> <modifier pos:line="311" pos:column="39">*<pos:position pos:line="311" pos:column="40"/></modifier></type><name pos:line="311" pos:column="40">multi_handle<pos:position pos:line="311" pos:column="52"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="312" pos:column="33">curl_socket_callback<pos:position pos:line="312" pos:column="53"/></name></type> <name pos:line="312" pos:column="54">callback<pos:position pos:line="312" pos:column="62"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="313" pos:column="33">void<pos:position pos:line="313" pos:column="37"/></name> <modifier pos:line="313" pos:column="38">*<pos:position pos:line="313" pos:column="39"/></modifier></type><name pos:line="313" pos:column="39">userp<pos:position pos:line="313" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="313" pos:column="45"/></parameter_list>;<pos:position pos:line="313" pos:column="46"/></function_decl> <comment type="block" pos:line="313" pos:column="47">/* passed to callback */</comment>

<comment type="block" pos:line="315" pos:column="1">/*
 * Name:    curl_multi_timeout()
 *
 * Desc:    Returns the maximum number of milliseconds the app is allowed to
 *          wait before curl_multi_socket() or curl_multi_perform() must be
 *          called (to allow libcurl's timed events to take place).
 *
 * Returns: CURLM error code.
 */</comment>
<function_decl><type><name pos:line="324" pos:column="1">CURLMcode<pos:position pos:line="324" pos:column="10"/></name></type> <name pos:line="324" pos:column="11">curl_multi_timeout<pos:position pos:line="324" pos:column="29"/></name><parameter_list pos:line="324" pos:column="29">(<parameter><decl><type><name pos:line="324" pos:column="30">CURLM<pos:position pos:line="324" pos:column="35"/></name> <modifier pos:line="324" pos:column="36">*<pos:position pos:line="324" pos:column="37"/></modifier></type><name pos:line="324" pos:column="37">multi_handle<pos:position pos:line="324" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="324" pos:column="51">long<pos:position pos:line="324" pos:column="55"/></name> <modifier pos:line="324" pos:column="56">*<pos:position pos:line="324" pos:column="57"/></modifier></type><name pos:line="324" pos:column="57">milliseconds<pos:position pos:line="324" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="324" pos:column="70"/></parameter_list>;<pos:position pos:line="324" pos:column="71"/></function_decl>

<cpp:endif pos:line="326" pos:column="1">#<cpp:directive pos:line="326" pos:column="2">endif<pos:position pos:line="326" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="326" pos:column="8">/* HAVE_CURL_MULTI_SOCKET */</comment>

<cpp:ifdef pos:line="328" pos:column="1">#<cpp:directive pos:line="328" pos:column="2">ifdef<pos:position pos:line="328" pos:column="7"/></cpp:directive> <name pos:line="328" pos:column="8">__cplusplus<pos:position pos:line="328" pos:column="19"/></name></cpp:ifdef>
}<pos:position pos:line="329" pos:column="2"/></block></extern> <comment type="block" pos:line="329" pos:column="3">/* end of extern "C" */</comment>
<cpp:endif pos:line="330" pos:column="1">#<cpp:directive pos:line="330" pos:column="2">endif<pos:position pos:line="330" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:endif pos:line="332" pos:column="1">#<cpp:directive pos:line="332" pos:column="2">endif<pos:position pos:line="332" pos:column="7"/></cpp:directive></cpp:endif>
</unit>
