<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/repos/httpd-2.2.14/modules/experimental/mod_example.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block" pos:line="17" pos:column="1">/*
 * Apache example module.  Provide demonstrations of how modules do things.
 * It is not meant to be used in a production server.  Since it participates
 * in all of the processing phases, it could conceivable interfere with
 * the proper operation of other modules -- particularly the ones related
 * to security.
 *
 * In the interest of brevity, all functions and structures internal to
 * this module, but which may have counterparts in *real* modules, are
 * prefixed with 'x_' instead of 'example_'.
 *
 * IMPORTANT NOTE
 * ==============
 *
 * Some of the code in this module has problems.
 * Before using it to base your work on, see
 *
 * http://issues.apache.org/bugzilla/show_bug.cgi?id=29709
 * http://issues.apache.org/bugzilla/show_bug.cgi?id=32051
 */</comment>

<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include<pos:position pos:line="38" pos:column="9"/></cpp:directive> <cpp:file pos:line="38" pos:column="10">"httpd.h"<pos:position pos:line="38" pos:column="19"/></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include<pos:position pos:line="39" pos:column="9"/></cpp:directive> <cpp:file pos:line="39" pos:column="10">"http_config.h"<pos:position pos:line="39" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include<pos:position pos:line="40" pos:column="9"/></cpp:directive> <cpp:file pos:line="40" pos:column="10">"http_core.h"<pos:position pos:line="40" pos:column="23"/></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include<pos:position pos:line="41" pos:column="9"/></cpp:directive> <cpp:file pos:line="41" pos:column="10">"http_log.h"<pos:position pos:line="41" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include<pos:position pos:line="42" pos:column="9"/></cpp:directive> <cpp:file pos:line="42" pos:column="10">"http_main.h"<pos:position pos:line="42" pos:column="23"/></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include<pos:position pos:line="43" pos:column="9"/></cpp:directive> <cpp:file pos:line="43" pos:column="10">"http_protocol.h"<pos:position pos:line="43" pos:column="27"/></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include<pos:position pos:line="44" pos:column="9"/></cpp:directive> <cpp:file pos:line="44" pos:column="10">"http_request.h"<pos:position pos:line="44" pos:column="26"/></cpp:file></cpp:include>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include<pos:position pos:line="45" pos:column="9"/></cpp:directive> <cpp:file pos:line="45" pos:column="10">"util_script.h"<pos:position pos:line="45" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include<pos:position pos:line="46" pos:column="9"/></cpp:directive> <cpp:file pos:line="46" pos:column="10">"http_connection.h"<pos:position pos:line="46" pos:column="29"/></cpp:file></cpp:include>

<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include<pos:position pos:line="48" pos:column="9"/></cpp:directive> <cpp:file pos:line="48" pos:column="10">"apr_strings.h"<pos:position pos:line="48" pos:column="25"/></cpp:file></cpp:include>

<cpp:include pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">include<pos:position pos:line="50" pos:column="9"/></cpp:directive> <cpp:file pos:line="50" pos:column="10">&lt;stdio.h&gt;<pos:position pos:line="50" pos:column="22"/></cpp:file></cpp:include>

<comment type="block" pos:line="52" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="53" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="54" pos:column="1">/* Data declarations.                                                       */</comment>
<comment type="block" pos:line="55" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="56" pos:column="1">/* Here are the static cells and structure declarations private to our      */</comment>
<comment type="block" pos:line="57" pos:column="1">/* module.                                                                  */</comment>
<comment type="block" pos:line="58" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="59" pos:column="1">/*--------------------------------------------------------------------------*/</comment>

<comment type="block" pos:line="61" pos:column="1">/*
 * Sample configuration record.  Used for both per-directory and per-server
 * configuration data.
 *
 * It's perfectly reasonable to have two different structures for the two
 * different environments.  The same command handlers will be called for
 * both, though, so the handlers need to be able to tell them apart.  One
 * possibility is for both structures to start with an int which is 0 for
 * one and 1 for the other.
 *
 * Note that while the per-directory and per-server configuration records are
 * available to most of the module handlers, they should be treated as
 * READ-ONLY by all except the command and merge handlers.  Sometimes handlers
 * are handed a record that applies to the current location by implication or
 * inheritance, and modifying it will change the rules for other locations.
 */</comment>
<typedef pos:line="77" pos:column="1">typedef <type><struct pos:line="77" pos:column="9">struct <name pos:line="77" pos:column="16">x_cfg<pos:position pos:line="77" pos:column="21"/></name> <block pos:line="77" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">int<pos:position pos:line="78" pos:column="8"/></name></type> <name pos:line="78" pos:column="9">cmode<pos:position pos:line="78" pos:column="14"/></name></decl>;<pos:position pos:line="78" pos:column="15"/></decl_stmt>                  <comment type="block" pos:line="78" pos:column="33">/* Environment to which record applies
                                 * (directory, server, or combination).
                                 */</comment>
<cpp:define pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">define<pos:position pos:line="81" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="81" pos:column="9">CONFIG_MODE_SERVER<pos:position pos:line="81" pos:column="27"/></name></cpp:macro> <cpp:value pos:line="81" pos:column="28">1<pos:position pos:line="81" pos:column="29"/></cpp:value></cpp:define>
<cpp:define pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">define<pos:position pos:line="82" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="82" pos:column="9">CONFIG_MODE_DIRECTORY<pos:position pos:line="82" pos:column="30"/></name></cpp:macro> <cpp:value pos:line="82" pos:column="31">2<pos:position pos:line="82" pos:column="32"/></cpp:value></cpp:define>
<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define<pos:position pos:line="83" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="83" pos:column="9">CONFIG_MODE_COMBO<pos:position pos:line="83" pos:column="26"/></name></cpp:macro> <cpp:value pos:line="83" pos:column="27">3<pos:position pos:line="83" pos:column="28"/></cpp:value></cpp:define>     <comment type="block" pos:line="83" pos:column="33">/* Shouldn't ever happen. */</comment>
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">int<pos:position pos:line="84" pos:column="8"/></name></type> <name pos:line="84" pos:column="9">local<pos:position pos:line="84" pos:column="14"/></name></decl>;<pos:position pos:line="84" pos:column="15"/></decl_stmt>                  <comment type="block" pos:line="84" pos:column="33">/* Boolean: "Example" directive declared
                                 * here?
                                 */</comment>
    <decl_stmt><decl><type><name pos:line="87" pos:column="5">int<pos:position pos:line="87" pos:column="8"/></name></type> <name pos:line="87" pos:column="9">congenital<pos:position pos:line="87" pos:column="19"/></name></decl>;<pos:position pos:line="87" pos:column="20"/></decl_stmt>             <comment type="block" pos:line="87" pos:column="33">/* Boolean: did we inherit an "Example"? */</comment>
    <decl_stmt><decl><type><name pos:line="88" pos:column="5">char<pos:position pos:line="88" pos:column="9"/></name> <modifier pos:line="88" pos:column="10">*<pos:position pos:line="88" pos:column="11"/></modifier></type><name pos:line="88" pos:column="11">trace<pos:position pos:line="88" pos:column="16"/></name></decl>;<pos:position pos:line="88" pos:column="17"/></decl_stmt>                <comment type="block" pos:line="88" pos:column="33">/* Pointer to trace string. */</comment>
    <decl_stmt><decl><type><name pos:line="89" pos:column="5">char<pos:position pos:line="89" pos:column="9"/></name> <modifier pos:line="89" pos:column="10">*<pos:position pos:line="89" pos:column="11"/></modifier></type><name pos:line="89" pos:column="11">loc<pos:position pos:line="89" pos:column="14"/></name></decl>;<pos:position pos:line="89" pos:column="15"/></decl_stmt>                  <comment type="block" pos:line="89" pos:column="33">/* Location to which this record applies. */</comment>
}<pos:position pos:line="90" pos:column="2"/></block></struct></type> <name pos:line="90" pos:column="3">x_cfg<pos:position pos:line="90" pos:column="8"/></name>;<pos:position pos:line="90" pos:column="9"/></typedef>

<comment type="block" pos:line="92" pos:column="1">/*
 * Let's set up a module-local static cell to point to the accreting callback
 * trace.  As each API callback is made to us, we'll tack on the particulars
 * to whatever we've already recorded.  To avoid massive memory bloat as
 * directories are walked again and again, we record the routine/environment
 * the first time (non-request context only), and ignore subsequent calls for
 * the same routine/environment.
 */</comment>
<decl_stmt><decl><specifier pos:line="100" pos:column="1">static<pos:position pos:line="100" pos:column="7"/></specifier> <type><specifier pos:line="100" pos:column="8">const<pos:position pos:line="100" pos:column="13"/></specifier> <name pos:line="100" pos:column="14">char<pos:position pos:line="100" pos:column="18"/></name> <modifier pos:line="100" pos:column="19">*<pos:position pos:line="100" pos:column="20"/></modifier></type><name pos:line="100" pos:column="20">trace<pos:position pos:line="100" pos:column="25"/></name> <init pos:line="100" pos:column="26">= <expr><name pos:line="100" pos:column="28">NULL<pos:position pos:line="100" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="100" pos:column="33"/></decl_stmt>
<decl_stmt><decl><specifier pos:line="101" pos:column="1">static<pos:position pos:line="101" pos:column="7"/></specifier> <type><name pos:line="101" pos:column="8">apr_table_t<pos:position pos:line="101" pos:column="19"/></name> <modifier pos:line="101" pos:column="20">*<pos:position pos:line="101" pos:column="21"/></modifier></type><name pos:line="101" pos:column="21">static_calls_made<pos:position pos:line="101" pos:column="38"/></name> <init pos:line="101" pos:column="39">= <expr><name pos:line="101" pos:column="41">NULL<pos:position pos:line="101" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="101" pos:column="46"/></decl_stmt>

<comment type="block" pos:line="103" pos:column="1">/*
 * To avoid leaking memory from pools other than the per-request one, we
 * allocate a module-private pool, and then use a sub-pool of that which gets
 * freed each time we modify the trace.  That way previous layers of trace
 * data don't get lost.
 */</comment>
<decl_stmt><decl><specifier pos:line="109" pos:column="1">static<pos:position pos:line="109" pos:column="7"/></specifier> <type><name pos:line="109" pos:column="8">apr_pool_t<pos:position pos:line="109" pos:column="18"/></name> <modifier pos:line="109" pos:column="19">*<pos:position pos:line="109" pos:column="20"/></modifier></type><name pos:line="109" pos:column="20">x_pool<pos:position pos:line="109" pos:column="26"/></name> <init pos:line="109" pos:column="27">= <expr><name pos:line="109" pos:column="29">NULL<pos:position pos:line="109" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="109" pos:column="34"/></decl_stmt>
<decl_stmt><decl><specifier pos:line="110" pos:column="1">static<pos:position pos:line="110" pos:column="7"/></specifier> <type><name pos:line="110" pos:column="8">apr_pool_t<pos:position pos:line="110" pos:column="18"/></name> <modifier pos:line="110" pos:column="19">*<pos:position pos:line="110" pos:column="20"/></modifier></type><name pos:line="110" pos:column="20">x_subpool<pos:position pos:line="110" pos:column="29"/></name> <init pos:line="110" pos:column="30">= <expr><name pos:line="110" pos:column="32">NULL<pos:position pos:line="110" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="110" pos:column="37"/></decl_stmt>

<comment type="block" pos:line="112" pos:column="1">/*
 * Declare ourselves so the configuration routines can find and know us.
 * We'll fill it in at the end of the module.
 */</comment>
<decl_stmt><decl><type><name pos:line="116" pos:column="1">module<pos:position pos:line="116" pos:column="7"/></name> <name pos:line="116" pos:column="8">AP_MODULE_DECLARE_DATA<pos:position pos:line="116" pos:column="30"/></name></type> <name pos:line="116" pos:column="31">example_module<pos:position pos:line="116" pos:column="45"/></name></decl>;<pos:position pos:line="116" pos:column="46"/></decl_stmt>

<comment type="block" pos:line="118" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="119" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="120" pos:column="1">/* The following pseudo-prototype declarations illustrate the parameters    */</comment>
<comment type="block" pos:line="121" pos:column="1">/* passed to command handlers for the different types of directive          */</comment>
<comment type="block" pos:line="122" pos:column="1">/* syntax.  If an argument was specified in the directive definition        */</comment>
<comment type="block" pos:line="123" pos:column="1">/* (look for "command_rec" below), it's available to the command handler    */</comment>
<comment type="block" pos:line="124" pos:column="1">/* via the (void *) info field in the cmd_parms argument passed to the      */</comment>
<comment type="block" pos:line="125" pos:column="1">/* handler (cmd-&gt;info for the examples below).                              */</comment>
<comment type="block" pos:line="126" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="127" pos:column="1">/*--------------------------------------------------------------------------*/</comment>

<comment type="block" pos:line="129" pos:column="1">/*
 * Command handler for a NO_ARGS directive.  Declared in the command_rec
 * list with
 *   AP_INIT_NO_ARGS("directive", function, mconfig, where, help)
 *
 * static const char *handle_NO_ARGS(cmd_parms *cmd, void *mconfig);
 */</comment>

<comment type="block" pos:line="137" pos:column="1">/*
 * Command handler for a RAW_ARGS directive.  The "args" argument is the text
 * of the commandline following the directive itself.  Declared in the
 * command_rec list with
 *   AP_INIT_RAW_ARGS("directive", function, mconfig, where, help)
 *
 * static const char *handle_RAW_ARGS(cmd_parms *cmd, void *mconfig,
 *                                    const char *args);
 */</comment>

<comment type="block" pos:line="147" pos:column="1">/*
 * Command handler for a FLAG directive.  The single parameter is passed in
 * "bool", which is either zero or not for Off or On respectively.
 * Declared in the command_rec list with
 *   AP_INIT_FLAG("directive", function, mconfig, where, help)
 *
 * static const char *handle_FLAG(cmd_parms *cmd, void *mconfig, int bool);
 */</comment>

<comment type="block" pos:line="156" pos:column="1">/*
 * Command handler for a TAKE1 directive.  The single parameter is passed in
 * "word1".  Declared in the command_rec list with
 *   AP_INIT_TAKE1("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE1(cmd_parms *cmd, void *mconfig,
 *                                 char *word1);
 */</comment>

<comment type="block" pos:line="165" pos:column="1">/*
 * Command handler for a TAKE2 directive.  TAKE2 commands must always have
 * exactly two arguments.  Declared in the command_rec list with
 *   AP_INIT_TAKE2("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE2(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2);
 */</comment>

<comment type="block" pos:line="174" pos:column="1">/*
 * Command handler for a TAKE3 directive.  Like TAKE2, these must have exactly
 * three arguments, or the parser complains and doesn't bother calling us.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE3("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE3(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2, char *word3);
 */</comment>

<comment type="block" pos:line="184" pos:column="1">/*
 * Command handler for a TAKE12 directive.  These can take either one or two
 * arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE12("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE12(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2);
 */</comment>

<comment type="block" pos:line="195" pos:column="1">/*
 * Command handler for a TAKE123 directive.  A TAKE123 directive can be given,
 * as might be expected, one, two, or three arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE123("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE123(cmd_parms *cmd, void *mconfig,
 *                                   char *word1, char *word2, char *word3);
 */</comment>

<comment type="block" pos:line="207" pos:column="1">/*
 * Command handler for a TAKE13 directive.  Either one or three arguments are
 * permitted - no two-parameters-only syntax is allowed.
 * - word2 and word3 are NULL pointers if only one argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE13("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE13(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */</comment>

<comment type="block" pos:line="218" pos:column="1">/*
 * Command handler for a TAKE23 directive.  At least two and as many as three
 * arguments must be specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE23("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE23(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */</comment>

<comment type="block" pos:line="229" pos:column="1">/*
 * Command handler for a ITERATE directive.
 * - Handler is called once for each of n arguments given to the directive.
 * - word1 points to each argument in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE("directive", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE(cmd_parms *cmd, void *mconfig,
 *                                   char *word1);
 */</comment>

<comment type="block" pos:line="240" pos:column="1">/*
 * Command handler for a ITERATE2 directive.
 * - Handler is called once for each of the second and subsequent arguments
 *   given to the directive.
 * - word1 is the same for each call for a particular directive instance (the
 *   first argument).
 * - word2 points to each of the second and subsequent arguments in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE2("directive", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE2(cmd_parms *cmd, void *mconfig,
 *                                    char *word1, char *word2);
 */</comment>

<comment type="block" pos:line="254" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="255" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="256" pos:column="1">/* These routines are strictly internal to this module, and support its     */</comment>
<comment type="block" pos:line="257" pos:column="1">/* operation.  They are not referenced by any external portion of the       */</comment>
<comment type="block" pos:line="258" pos:column="1">/* server.                                                                  */</comment>
<comment type="block" pos:line="259" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="260" pos:column="1">/*--------------------------------------------------------------------------*/</comment>

<comment type="block" pos:line="262" pos:column="1">/*
 * Locate our directory configuration record for the current request.
 */</comment>
<function><specifier pos:line="265" pos:column="1">static<pos:position pos:line="265" pos:column="7"/></specifier> <type><name pos:line="265" pos:column="8">x_cfg<pos:position pos:line="265" pos:column="13"/></name> <modifier pos:line="265" pos:column="14">*<pos:position pos:line="265" pos:column="15"/></modifier></type><name pos:line="265" pos:column="15">our_dconfig<pos:position pos:line="265" pos:column="26"/></name><parameter_list pos:line="265" pos:column="26">(<parameter><decl><type><specifier pos:line="265" pos:column="27">const<pos:position pos:line="265" pos:column="32"/></specifier> <name pos:line="265" pos:column="33">request_rec<pos:position pos:line="265" pos:column="44"/></name> <modifier pos:line="265" pos:column="45">*<pos:position pos:line="265" pos:column="46"/></modifier></type><name pos:line="265" pos:column="46">r<pos:position pos:line="265" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="265" pos:column="48"/></parameter_list>
<block pos:line="266" pos:column="1">{
    <return pos:line="267" pos:column="5">return <expr><operator pos:line="267" pos:column="12">(<pos:position pos:line="267" pos:column="13"/></operator><name pos:line="267" pos:column="13">x_cfg<pos:position pos:line="267" pos:column="18"/></name> <operator pos:line="267" pos:column="19">*<pos:position pos:line="267" pos:column="20"/></operator><operator pos:line="267" pos:column="20">)<pos:position pos:line="267" pos:column="21"/></operator> <call><name pos:line="267" pos:column="22">ap_get_module_config<pos:position pos:line="267" pos:column="42"/></name><argument_list pos:line="267" pos:column="42">(<argument><expr><name><name pos:line="267" pos:column="43">r<pos:position pos:line="267" pos:column="44"/></name><operator pos:line="267" pos:column="44">-&gt;<pos:position pos:line="267" pos:column="49"/></operator><name pos:line="267" pos:column="46">per_dir_config<pos:position pos:line="267" pos:column="60"/></name></name></expr></argument>, <argument><expr><operator pos:line="267" pos:column="62">&amp;<pos:position pos:line="267" pos:column="67"/></operator><name pos:line="267" pos:column="63">example_module<pos:position pos:line="267" pos:column="77"/></name></expr></argument>)<pos:position pos:line="267" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="79"/></return>
}<pos:position pos:line="268" pos:column="2"/></block></function>

<cpp:if pos:line="270" pos:column="1">#<cpp:directive pos:line="270" pos:column="2">if<pos:position pos:line="270" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="270" pos:column="5">0<pos:position pos:line="270" pos:column="6"/></literal></expr></cpp:if>
<comment type="block" pos:line="271" pos:column="1">/*
 * Locate our server configuration record for the specified server.
 */</comment>
static x_cfg *our_sconfig(const server_rec *s)
{
    return (x_cfg *) ap_get_module_config(s-&gt;module_config, &amp;example_module);
}

<comment type="block" pos:line="279" pos:column="1">/*
 * Likewise for our configuration record for the specified request.
 */</comment>
static x_cfg *our_rconfig(const request_rec *r)
{
    return (x_cfg *) ap_get_module_config(r-&gt;request_config, &amp;example_module);
}
<cpp:endif pos:line="286" pos:column="1">#<cpp:directive pos:line="286" pos:column="2">endif<pos:position pos:line="286" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="288" pos:column="1">/*
 * Likewise for our configuration record for a connection.
 */</comment>
<function><specifier pos:line="291" pos:column="1">static<pos:position pos:line="291" pos:column="7"/></specifier> <type><name pos:line="291" pos:column="8">x_cfg<pos:position pos:line="291" pos:column="13"/></name> <modifier pos:line="291" pos:column="14">*<pos:position pos:line="291" pos:column="15"/></modifier></type><name pos:line="291" pos:column="15">our_cconfig<pos:position pos:line="291" pos:column="26"/></name><parameter_list pos:line="291" pos:column="26">(<parameter><decl><type><specifier pos:line="291" pos:column="27">const<pos:position pos:line="291" pos:column="32"/></specifier> <name pos:line="291" pos:column="33">conn_rec<pos:position pos:line="291" pos:column="41"/></name> <modifier pos:line="291" pos:column="42">*<pos:position pos:line="291" pos:column="43"/></modifier></type><name pos:line="291" pos:column="43">c<pos:position pos:line="291" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="291" pos:column="45"/></parameter_list>
<block pos:line="292" pos:column="1">{
    <return pos:line="293" pos:column="5">return <expr><operator pos:line="293" pos:column="12">(<pos:position pos:line="293" pos:column="13"/></operator><name pos:line="293" pos:column="13">x_cfg<pos:position pos:line="293" pos:column="18"/></name> <operator pos:line="293" pos:column="19">*<pos:position pos:line="293" pos:column="20"/></operator><operator pos:line="293" pos:column="20">)<pos:position pos:line="293" pos:column="21"/></operator> <call><name pos:line="293" pos:column="22">ap_get_module_config<pos:position pos:line="293" pos:column="42"/></name><argument_list pos:line="293" pos:column="42">(<argument><expr><name><name pos:line="293" pos:column="43">c<pos:position pos:line="293" pos:column="44"/></name><operator pos:line="293" pos:column="44">-&gt;<pos:position pos:line="293" pos:column="49"/></operator><name pos:line="293" pos:column="46">conn_config<pos:position pos:line="293" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="293" pos:column="59">&amp;<pos:position pos:line="293" pos:column="64"/></operator><name pos:line="293" pos:column="60">example_module<pos:position pos:line="293" pos:column="74"/></name></expr></argument>)<pos:position pos:line="293" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="76"/></return>
}<pos:position pos:line="294" pos:column="2"/></block></function>

<comment type="block" pos:line="296" pos:column="1">/*
 * This routine sets up some module-wide cells if they haven't been already.
 */</comment>
<function><specifier pos:line="299" pos:column="1">static<pos:position pos:line="299" pos:column="7"/></specifier> <type><name pos:line="299" pos:column="8">void<pos:position pos:line="299" pos:column="12"/></name></type> <name pos:line="299" pos:column="13">setup_module_cells<pos:position pos:line="299" pos:column="31"/></name><parameter_list pos:line="299" pos:column="31">(<parameter><decl><type><name pos:line="299" pos:column="32">void<pos:position pos:line="299" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="299" pos:column="37"/></parameter_list>
<block pos:line="300" pos:column="1">{
    <comment type="block" pos:line="301" pos:column="5">/*
     * If we haven't already allocated our module-private pool, do so now.
     */</comment>
    <if pos:line="304" pos:column="5">if <condition pos:line="304" pos:column="8">(<expr><name pos:line="304" pos:column="9">x_pool<pos:position pos:line="304" pos:column="15"/></name> <operator pos:line="304" pos:column="16">==<pos:position pos:line="304" pos:column="18"/></operator> <name pos:line="304" pos:column="19">NULL<pos:position pos:line="304" pos:column="23"/></name></expr>)<pos:position pos:line="304" pos:column="24"/></condition><then pos:line="304" pos:column="24"> <block pos:line="304" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="305" pos:column="9">apr_pool_create<pos:position pos:line="305" pos:column="24"/></name><argument_list pos:line="305" pos:column="24">(<argument><expr><operator pos:line="305" pos:column="25">&amp;<pos:position pos:line="305" pos:column="30"/></operator><name pos:line="305" pos:column="26">x_pool<pos:position pos:line="305" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="305" pos:column="34">NULL<pos:position pos:line="305" pos:column="38"/></name></expr></argument>)<pos:position pos:line="305" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="306" pos:column="6"/></block></then></if><empty_stmt pos:line="306" pos:column="6">;<pos:position pos:line="306" pos:column="7"/></empty_stmt>
    <comment type="block" pos:line="307" pos:column="5">/*
     * Likewise for the table of routine/environment pairs we visit outside of
     * request context.
     */</comment>
    <if pos:line="311" pos:column="5">if <condition pos:line="311" pos:column="8">(<expr><name pos:line="311" pos:column="9">static_calls_made<pos:position pos:line="311" pos:column="26"/></name> <operator pos:line="311" pos:column="27">==<pos:position pos:line="311" pos:column="29"/></operator> <name pos:line="311" pos:column="30">NULL<pos:position pos:line="311" pos:column="34"/></name></expr>)<pos:position pos:line="311" pos:column="35"/></condition><then pos:line="311" pos:column="35"> <block pos:line="311" pos:column="36">{
        <expr_stmt><expr><name pos:line="312" pos:column="9">static_calls_made<pos:position pos:line="312" pos:column="26"/></name> <operator pos:line="312" pos:column="27">=<pos:position pos:line="312" pos:column="28"/></operator> <call><name pos:line="312" pos:column="29">apr_table_make<pos:position pos:line="312" pos:column="43"/></name><argument_list pos:line="312" pos:column="43">(<argument><expr><name pos:line="312" pos:column="44">x_pool<pos:position pos:line="312" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="312" pos:column="52">16<pos:position pos:line="312" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="312" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="313" pos:column="6"/></block></then></if><empty_stmt pos:line="313" pos:column="6">;<pos:position pos:line="313" pos:column="7"/></empty_stmt>
}<pos:position pos:line="314" pos:column="2"/></block></function>

<comment type="block" pos:line="316" pos:column="1">/*
 * This routine is used to add a trace of a callback to the list.  We're
 * passed the server record (if available), the request record (if available),
 * a pointer to our private configuration record (if available) for the
 * environment to which the callback is supposed to apply, and some text.  We
 * turn this into a textual representation and add it to the tail of the list.
 * The list can be displayed by the x_handler() routine.
 *
 * If the call occurs within a request context (i.e., we're passed a request
 * record), we put the trace into the request apr_pool_t and attach it to the
 * request via the notes mechanism.  Otherwise, the trace gets added
 * to the static (non-request-specific) list.
 *
 * Note that the r-&gt;notes table is only for storing strings; if you need to
 * maintain per-request data of any other type, you need to use another
 * mechanism.
 */</comment>

<cpp:define pos:line="334" pos:column="1">#<cpp:directive pos:line="334" pos:column="2">define<pos:position pos:line="334" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="334" pos:column="9">TRACE_NOTE<pos:position pos:line="334" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="334" pos:column="20">"example-trace"<pos:position pos:line="334" pos:column="35"/></cpp:value></cpp:define>

<function><specifier pos:line="336" pos:column="1">static<pos:position pos:line="336" pos:column="7"/></specifier> <type><name pos:line="336" pos:column="8">void<pos:position pos:line="336" pos:column="12"/></name></type> <name pos:line="336" pos:column="13">trace_add<pos:position pos:line="336" pos:column="22"/></name><parameter_list pos:line="336" pos:column="22">(<parameter><decl><type><name pos:line="336" pos:column="23">server_rec<pos:position pos:line="336" pos:column="33"/></name> <modifier pos:line="336" pos:column="34">*<pos:position pos:line="336" pos:column="35"/></modifier></type><name pos:line="336" pos:column="35">s<pos:position pos:line="336" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="336" pos:column="38">request_rec<pos:position pos:line="336" pos:column="49"/></name> <modifier pos:line="336" pos:column="50">*<pos:position pos:line="336" pos:column="51"/></modifier></type><name pos:line="336" pos:column="51">r<pos:position pos:line="336" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="336" pos:column="54">x_cfg<pos:position pos:line="336" pos:column="59"/></name> <modifier pos:line="336" pos:column="60">*<pos:position pos:line="336" pos:column="61"/></modifier></type><name pos:line="336" pos:column="61">mconfig<pos:position pos:line="336" pos:column="68"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="337" pos:column="23">const<pos:position pos:line="337" pos:column="28"/></specifier> <name pos:line="337" pos:column="29">char<pos:position pos:line="337" pos:column="33"/></name> <modifier pos:line="337" pos:column="34">*<pos:position pos:line="337" pos:column="35"/></modifier></type><name pos:line="337" pos:column="35">note<pos:position pos:line="337" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="337" pos:column="40"/></parameter_list>
<block pos:line="338" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="339" pos:column="5">const<pos:position pos:line="339" pos:column="10"/></specifier> <name pos:line="339" pos:column="11">char<pos:position pos:line="339" pos:column="15"/></name> <modifier pos:line="339" pos:column="16">*<pos:position pos:line="339" pos:column="17"/></modifier></type><name pos:line="339" pos:column="17">sofar<pos:position pos:line="339" pos:column="22"/></name></decl>;<pos:position pos:line="339" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="340" pos:column="5">char<pos:position pos:line="340" pos:column="9"/></name> <modifier pos:line="340" pos:column="10">*<pos:position pos:line="340" pos:column="11"/></modifier></type><name pos:line="340" pos:column="11">addon<pos:position pos:line="340" pos:column="16"/></name></decl>;<pos:position pos:line="340" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="341" pos:column="5">char<pos:position pos:line="341" pos:column="9"/></name> <modifier pos:line="341" pos:column="10">*<pos:position pos:line="341" pos:column="11"/></modifier></type><name pos:line="341" pos:column="11">where<pos:position pos:line="341" pos:column="16"/></name></decl>;<pos:position pos:line="341" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="342" pos:column="5">apr_pool_t<pos:position pos:line="342" pos:column="15"/></name> <modifier pos:line="342" pos:column="16">*<pos:position pos:line="342" pos:column="17"/></modifier></type><name pos:line="342" pos:column="17">p<pos:position pos:line="342" pos:column="18"/></name></decl>;<pos:position pos:line="342" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="343" pos:column="5">const<pos:position pos:line="343" pos:column="10"/></specifier> <name pos:line="343" pos:column="11">char<pos:position pos:line="343" pos:column="15"/></name> <modifier pos:line="343" pos:column="16">*<pos:position pos:line="343" pos:column="17"/></modifier></type><name pos:line="343" pos:column="17">trace_copy<pos:position pos:line="343" pos:column="27"/></name></decl>;<pos:position pos:line="343" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="345" pos:column="5">/*
     * Make sure our pools and tables are set up - we need 'em.
     */</comment>
    <expr_stmt><expr><call><name pos:line="348" pos:column="5">setup_module_cells<pos:position pos:line="348" pos:column="23"/></name><argument_list pos:line="348" pos:column="23">()<pos:position pos:line="348" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="349" pos:column="5">/*
     * Now, if we're in request-context, we use the request pool.
     */</comment>
    <if pos:line="352" pos:column="5">if <condition pos:line="352" pos:column="8">(<expr><name pos:line="352" pos:column="9">r<pos:position pos:line="352" pos:column="10"/></name> <operator pos:line="352" pos:column="11">!=<pos:position pos:line="352" pos:column="13"/></operator> <name pos:line="352" pos:column="14">NULL<pos:position pos:line="352" pos:column="18"/></name></expr>)<pos:position pos:line="352" pos:column="19"/></condition><then pos:line="352" pos:column="19"> <block pos:line="352" pos:column="20">{
        <expr_stmt><expr><name pos:line="353" pos:column="9">p<pos:position pos:line="353" pos:column="10"/></name> <operator pos:line="353" pos:column="11">=<pos:position pos:line="353" pos:column="12"/></operator> <name><name pos:line="353" pos:column="13">r<pos:position pos:line="353" pos:column="14"/></name><operator pos:line="353" pos:column="14">-&gt;<pos:position pos:line="353" pos:column="19"/></operator><name pos:line="353" pos:column="16">pool<pos:position pos:line="353" pos:column="20"/></name></name></expr>;<pos:position pos:line="353" pos:column="21"/></expr_stmt>
        <if pos:line="354" pos:column="9">if <condition pos:line="354" pos:column="12">(<expr><operator pos:line="354" pos:column="13">(<pos:position pos:line="354" pos:column="14"/></operator><name pos:line="354" pos:column="14">trace_copy<pos:position pos:line="354" pos:column="24"/></name> <operator pos:line="354" pos:column="25">=<pos:position pos:line="354" pos:column="26"/></operator> <call><name pos:line="354" pos:column="27">apr_table_get<pos:position pos:line="354" pos:column="40"/></name><argument_list pos:line="354" pos:column="40">(<argument><expr><name><name pos:line="354" pos:column="41">r<pos:position pos:line="354" pos:column="42"/></name><operator pos:line="354" pos:column="42">-&gt;<pos:position pos:line="354" pos:column="47"/></operator><name pos:line="354" pos:column="44">notes<pos:position pos:line="354" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="354" pos:column="51">TRACE_NOTE<pos:position pos:line="354" pos:column="61"/></name></expr></argument>)<pos:position pos:line="354" pos:column="62"/></argument_list></call><operator pos:line="354" pos:column="62">)<pos:position pos:line="354" pos:column="63"/></operator> <operator pos:line="354" pos:column="64">==<pos:position pos:line="354" pos:column="66"/></operator> <name pos:line="354" pos:column="67">NULL<pos:position pos:line="354" pos:column="71"/></name></expr>)<pos:position pos:line="354" pos:column="72"/></condition><then pos:line="354" pos:column="72"> <block pos:line="354" pos:column="73">{
            <expr_stmt><expr><name pos:line="355" pos:column="13">trace_copy<pos:position pos:line="355" pos:column="23"/></name> <operator pos:line="355" pos:column="24">=<pos:position pos:line="355" pos:column="25"/></operator> <literal type="string" pos:line="355" pos:column="26">""<pos:position pos:line="355" pos:column="28"/></literal></expr>;<pos:position pos:line="355" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="356" pos:column="10"/></block></then></if>
    }<pos:position pos:line="357" pos:column="6"/></block></then>
    <else pos:line="358" pos:column="5">else <block pos:line="358" pos:column="10">{
        <comment type="block" pos:line="359" pos:column="9">/*
         * We're not in request context, so the trace gets attached to our
         * module-wide pool.  We do the create/destroy every time we're called
         * in non-request context; this avoids leaking memory in some of
         * the subsequent calls that allocate memory only once (such as the
         * key formation below).
         *
         * Make a new sub-pool and copy any existing trace to it.  Point the
         * trace cell at the copied value.
         */</comment>
        <expr_stmt><expr><call><name pos:line="369" pos:column="9">apr_pool_create<pos:position pos:line="369" pos:column="24"/></name><argument_list pos:line="369" pos:column="24">(<argument><expr><operator pos:line="369" pos:column="25">&amp;<pos:position pos:line="369" pos:column="30"/></operator><name pos:line="369" pos:column="26">p<pos:position pos:line="369" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="369" pos:column="29">x_pool<pos:position pos:line="369" pos:column="35"/></name></expr></argument>)<pos:position pos:line="369" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="37"/></expr_stmt>
        <if pos:line="370" pos:column="9">if <condition pos:line="370" pos:column="12">(<expr><name pos:line="370" pos:column="13">trace<pos:position pos:line="370" pos:column="18"/></name> <operator pos:line="370" pos:column="19">!=<pos:position pos:line="370" pos:column="21"/></operator> <name pos:line="370" pos:column="22">NULL<pos:position pos:line="370" pos:column="26"/></name></expr>)<pos:position pos:line="370" pos:column="27"/></condition><then pos:line="370" pos:column="27"> <block pos:line="370" pos:column="28">{
            <expr_stmt><expr><name pos:line="371" pos:column="13">trace<pos:position pos:line="371" pos:column="18"/></name> <operator pos:line="371" pos:column="19">=<pos:position pos:line="371" pos:column="20"/></operator> <call><name pos:line="371" pos:column="21">apr_pstrdup<pos:position pos:line="371" pos:column="32"/></name><argument_list pos:line="371" pos:column="32">(<argument><expr><name pos:line="371" pos:column="33">p<pos:position pos:line="371" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="36">trace<pos:position pos:line="371" pos:column="41"/></name></expr></argument>)<pos:position pos:line="371" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="372" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="373" pos:column="9">/*
         * Now, if we have a sub-pool from before, nuke it and replace with
         * the one we just allocated.
         */</comment>
        <if pos:line="377" pos:column="9">if <condition pos:line="377" pos:column="12">(<expr><name pos:line="377" pos:column="13">x_subpool<pos:position pos:line="377" pos:column="22"/></name> <operator pos:line="377" pos:column="23">!=<pos:position pos:line="377" pos:column="25"/></operator> <name pos:line="377" pos:column="26">NULL<pos:position pos:line="377" pos:column="30"/></name></expr>)<pos:position pos:line="377" pos:column="31"/></condition><then pos:line="377" pos:column="31"> <block pos:line="377" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="378" pos:column="13">apr_pool_destroy<pos:position pos:line="378" pos:column="29"/></name><argument_list pos:line="378" pos:column="29">(<argument><expr><name pos:line="378" pos:column="30">x_subpool<pos:position pos:line="378" pos:column="39"/></name></expr></argument>)<pos:position pos:line="378" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="378" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="379" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="380" pos:column="9">x_subpool<pos:position pos:line="380" pos:column="18"/></name> <operator pos:line="380" pos:column="19">=<pos:position pos:line="380" pos:column="20"/></operator> <name pos:line="380" pos:column="21">p<pos:position pos:line="380" pos:column="22"/></name></expr>;<pos:position pos:line="380" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="381" pos:column="9">trace_copy<pos:position pos:line="381" pos:column="19"/></name> <operator pos:line="381" pos:column="20">=<pos:position pos:line="381" pos:column="21"/></operator> <name pos:line="381" pos:column="22">trace<pos:position pos:line="381" pos:column="27"/></name></expr>;<pos:position pos:line="381" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="382" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="383" pos:column="5">/*
     * If we weren't passed a configuration record, we can't figure out to
     * what location this call applies.  This only happens for co-routines
     * that don't operate in a particular directory or server context.  If we
     * got a valid record, extract the location (directory or server) to which
     * it applies.
     */</comment>
    <expr_stmt><expr><name pos:line="390" pos:column="5">where<pos:position pos:line="390" pos:column="10"/></name> <operator pos:line="390" pos:column="11">=<pos:position pos:line="390" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="390" pos:column="13">(<pos:position pos:line="390" pos:column="14"/></operator><name pos:line="390" pos:column="14">mconfig<pos:position pos:line="390" pos:column="21"/></name> <operator pos:line="390" pos:column="22">!=<pos:position pos:line="390" pos:column="24"/></operator> <name pos:line="390" pos:column="25">NULL<pos:position pos:line="390" pos:column="29"/></name><operator pos:line="390" pos:column="29">)<pos:position pos:line="390" pos:column="30"/></operator></expr> ?<pos:position pos:line="390" pos:column="32"/></condition><then pos:line="390" pos:column="32"> <expr><name><name pos:line="390" pos:column="33">mconfig<pos:position pos:line="390" pos:column="40"/></name><operator pos:line="390" pos:column="40">-&gt;<pos:position pos:line="390" pos:column="45"/></operator><name pos:line="390" pos:column="42">loc<pos:position pos:line="390" pos:column="45"/></name></name></expr> <pos:position pos:line="390" pos:column="46"/></then><else pos:line="390" pos:column="46">: <expr><literal type="string" pos:line="390" pos:column="48">"nowhere"<pos:position pos:line="390" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="390" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="391" pos:column="5">where<pos:position pos:line="391" pos:column="10"/></name> <operator pos:line="391" pos:column="11">=<pos:position pos:line="391" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="391" pos:column="13">(<pos:position pos:line="391" pos:column="14"/></operator><name pos:line="391" pos:column="14">where<pos:position pos:line="391" pos:column="19"/></name> <operator pos:line="391" pos:column="20">!=<pos:position pos:line="391" pos:column="22"/></operator> <name pos:line="391" pos:column="23">NULL<pos:position pos:line="391" pos:column="27"/></name><operator pos:line="391" pos:column="27">)<pos:position pos:line="391" pos:column="28"/></operator></expr> ?<pos:position pos:line="391" pos:column="30"/></condition><then pos:line="391" pos:column="30"> <expr><name pos:line="391" pos:column="31">where<pos:position pos:line="391" pos:column="36"/></name></expr> <pos:position pos:line="391" pos:column="37"/></then><else pos:line="391" pos:column="37">: <expr><literal type="string" pos:line="391" pos:column="39">""<pos:position pos:line="391" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="391" pos:column="42"/></expr_stmt>
    <comment type="block" pos:line="392" pos:column="5">/*
     * Now, if we're not in request context, see if we've been called with
     * this particular combination before.  The apr_table_t is allocated in the
     * module's private pool, which doesn't get destroyed.
     */</comment>
    <if pos:line="397" pos:column="5">if <condition pos:line="397" pos:column="8">(<expr><name pos:line="397" pos:column="9">r<pos:position pos:line="397" pos:column="10"/></name> <operator pos:line="397" pos:column="11">==<pos:position pos:line="397" pos:column="13"/></operator> <name pos:line="397" pos:column="14">NULL<pos:position pos:line="397" pos:column="18"/></name></expr>)<pos:position pos:line="397" pos:column="19"/></condition><then pos:line="397" pos:column="19"> <block pos:line="397" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="398" pos:column="9">char<pos:position pos:line="398" pos:column="13"/></name> <modifier pos:line="398" pos:column="14">*<pos:position pos:line="398" pos:column="15"/></modifier></type><name pos:line="398" pos:column="15">key<pos:position pos:line="398" pos:column="18"/></name></decl>;<pos:position pos:line="398" pos:column="19"/></decl_stmt>

        <expr_stmt><expr><name pos:line="400" pos:column="9">key<pos:position pos:line="400" pos:column="12"/></name> <operator pos:line="400" pos:column="13">=<pos:position pos:line="400" pos:column="14"/></operator> <call><name pos:line="400" pos:column="15">apr_pstrcat<pos:position pos:line="400" pos:column="26"/></name><argument_list pos:line="400" pos:column="26">(<argument><expr><name pos:line="400" pos:column="27">p<pos:position pos:line="400" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="400" pos:column="30">note<pos:position pos:line="400" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="400" pos:column="36">":"<pos:position pos:line="400" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="400" pos:column="41">where<pos:position pos:line="400" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="400" pos:column="48">NULL<pos:position pos:line="400" pos:column="52"/></name></expr></argument>)<pos:position pos:line="400" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="400" pos:column="54"/></expr_stmt>
        <if pos:line="401" pos:column="9">if <condition pos:line="401" pos:column="12">(<expr><call><name pos:line="401" pos:column="13">apr_table_get<pos:position pos:line="401" pos:column="26"/></name><argument_list pos:line="401" pos:column="26">(<argument><expr><name pos:line="401" pos:column="27">static_calls_made<pos:position pos:line="401" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="401" pos:column="46">key<pos:position pos:line="401" pos:column="49"/></name></expr></argument>)<pos:position pos:line="401" pos:column="50"/></argument_list></call> <operator pos:line="401" pos:column="51">!=<pos:position pos:line="401" pos:column="53"/></operator> <name pos:line="401" pos:column="54">NULL<pos:position pos:line="401" pos:column="58"/></name></expr>)<pos:position pos:line="401" pos:column="59"/></condition><then pos:line="401" pos:column="59"> <block pos:line="401" pos:column="60">{
            <comment type="block" pos:line="402" pos:column="13">/*
             * Been here, done this.
             */</comment>
            <return pos:line="405" pos:column="13">return;<pos:position pos:line="405" pos:column="20"/></return>
        }<pos:position pos:line="406" pos:column="10"/></block></then>
        <else pos:line="407" pos:column="9">else <block pos:line="407" pos:column="14">{
            <comment type="block" pos:line="408" pos:column="13">/*
             * First time for this combination of routine and environment -
             * log it so we don't do it again.
             */</comment>
            <expr_stmt><expr><call><name pos:line="412" pos:column="13">apr_table_set<pos:position pos:line="412" pos:column="26"/></name><argument_list pos:line="412" pos:column="26">(<argument><expr><name pos:line="412" pos:column="27">static_calls_made<pos:position pos:line="412" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="412" pos:column="46">key<pos:position pos:line="412" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="412" pos:column="51">"been here"<pos:position pos:line="412" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="412" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="412" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="413" pos:column="10"/></block></else></if>
    }<pos:position pos:line="414" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="415" pos:column="5">addon<pos:position pos:line="415" pos:column="10"/></name> <operator pos:line="415" pos:column="11">=<pos:position pos:line="415" pos:column="12"/></operator> <call><name pos:line="415" pos:column="13">apr_pstrcat<pos:position pos:line="415" pos:column="24"/></name><argument_list pos:line="415" pos:column="24">(<argument><expr><name pos:line="415" pos:column="25">p<pos:position pos:line="415" pos:column="26"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="416" pos:column="25">"   &lt;li&gt;\n"<pos:position pos:line="416" pos:column="42"/></literal>
                        <literal type="string" pos:line="417" pos:column="25">"    &lt;dl&gt;\n"<pos:position pos:line="417" pos:column="43"/></literal>
                        <literal type="string" pos:line="418" pos:column="25">"     &lt;dt&gt;&lt;samp&gt;"<pos:position pos:line="418" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="418" pos:column="44">note<pos:position pos:line="418" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="418" pos:column="50">"&lt;/samp&gt;&lt;/dt&gt;\n"<pos:position pos:line="418" pos:column="78"/></literal>
                        <literal type="string" pos:line="419" pos:column="25">"     &lt;dd&gt;&lt;samp&gt;["<pos:position pos:line="419" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="419" pos:column="45">where<pos:position pos:line="419" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="419" pos:column="52">"]&lt;/samp&gt;&lt;/dd&gt;\n"<pos:position pos:line="419" pos:column="81"/></literal>
                        <literal type="string" pos:line="420" pos:column="25">"    &lt;/dl&gt;\n"<pos:position pos:line="420" pos:column="44"/></literal>
                        <literal type="string" pos:line="421" pos:column="25">"   &lt;/li&gt;\n"<pos:position pos:line="421" pos:column="43"/></literal></expr></argument>,
                        <argument><expr><name pos:line="422" pos:column="25">NULL<pos:position pos:line="422" pos:column="29"/></name></expr></argument>)<pos:position pos:line="422" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="422" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="423" pos:column="5">sofar<pos:position pos:line="423" pos:column="10"/></name> <operator pos:line="423" pos:column="11">=<pos:position pos:line="423" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="423" pos:column="13">(<pos:position pos:line="423" pos:column="14"/></operator><name pos:line="423" pos:column="14">trace_copy<pos:position pos:line="423" pos:column="24"/></name> <operator pos:line="423" pos:column="25">==<pos:position pos:line="423" pos:column="27"/></operator> <name pos:line="423" pos:column="28">NULL<pos:position pos:line="423" pos:column="32"/></name><operator pos:line="423" pos:column="32">)<pos:position pos:line="423" pos:column="33"/></operator></expr> ?<pos:position pos:line="423" pos:column="35"/></condition><then pos:line="423" pos:column="35"> <expr><literal type="string" pos:line="423" pos:column="36">""<pos:position pos:line="423" pos:column="38"/></literal></expr> <pos:position pos:line="423" pos:column="39"/></then><else pos:line="423" pos:column="39">: <expr><name pos:line="423" pos:column="41">trace_copy<pos:position pos:line="423" pos:column="51"/></name></expr></else></ternary></expr>;<pos:position pos:line="423" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="424" pos:column="5">trace_copy<pos:position pos:line="424" pos:column="15"/></name> <operator pos:line="424" pos:column="16">=<pos:position pos:line="424" pos:column="17"/></operator> <call><name pos:line="424" pos:column="18">apr_pstrcat<pos:position pos:line="424" pos:column="29"/></name><argument_list pos:line="424" pos:column="29">(<argument><expr><name pos:line="424" pos:column="30">p<pos:position pos:line="424" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="424" pos:column="33">sofar<pos:position pos:line="424" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="424" pos:column="40">addon<pos:position pos:line="424" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="424" pos:column="47">NULL<pos:position pos:line="424" pos:column="51"/></name></expr></argument>)<pos:position pos:line="424" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="424" pos:column="53"/></expr_stmt>
    <if pos:line="425" pos:column="5">if <condition pos:line="425" pos:column="8">(<expr><name pos:line="425" pos:column="9">r<pos:position pos:line="425" pos:column="10"/></name> <operator pos:line="425" pos:column="11">!=<pos:position pos:line="425" pos:column="13"/></operator> <name pos:line="425" pos:column="14">NULL<pos:position pos:line="425" pos:column="18"/></name></expr>)<pos:position pos:line="425" pos:column="19"/></condition><then pos:line="425" pos:column="19"> <block pos:line="425" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="426" pos:column="9">apr_table_set<pos:position pos:line="426" pos:column="22"/></name><argument_list pos:line="426" pos:column="22">(<argument><expr><name><name pos:line="426" pos:column="23">r<pos:position pos:line="426" pos:column="24"/></name><operator pos:line="426" pos:column="24">-&gt;<pos:position pos:line="426" pos:column="29"/></operator><name pos:line="426" pos:column="26">notes<pos:position pos:line="426" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="426" pos:column="33">TRACE_NOTE<pos:position pos:line="426" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="426" pos:column="45">trace_copy<pos:position pos:line="426" pos:column="55"/></name></expr></argument>)<pos:position pos:line="426" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="426" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="427" pos:column="6"/></block></then>
    <else pos:line="428" pos:column="5">else <block pos:line="428" pos:column="10">{
        <expr_stmt><expr><name pos:line="429" pos:column="9">trace<pos:position pos:line="429" pos:column="14"/></name> <operator pos:line="429" pos:column="15">=<pos:position pos:line="429" pos:column="16"/></operator> <name pos:line="429" pos:column="17">trace_copy<pos:position pos:line="429" pos:column="27"/></name></expr>;<pos:position pos:line="429" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="430" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="431" pos:column="5">/*
     * You *could* change the following if you wanted to see the calling
     * sequence reported in the server's error_log, but beware - almost all of
     * these co-routines are called for every single request, and the impact
     * on the size (and readability) of the error_log is considerable.
     */</comment>
<cpp:define pos:line="437" pos:column="1">#<cpp:directive pos:line="437" pos:column="2">define<pos:position pos:line="437" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="437" pos:column="9">EXAMPLE_LOG_EACH<pos:position pos:line="437" pos:column="25"/></name></cpp:macro> <cpp:value pos:line="437" pos:column="26">0<pos:position pos:line="437" pos:column="27"/></cpp:value></cpp:define>
    <if pos:line="438" pos:column="5">if <condition pos:line="438" pos:column="8">(<expr><name pos:line="438" pos:column="9">EXAMPLE_LOG_EACH<pos:position pos:line="438" pos:column="25"/></name> <operator pos:line="438" pos:column="26">&amp;&amp;<pos:position pos:line="438" pos:column="36"/></operator> <operator pos:line="438" pos:column="29">(<pos:position pos:line="438" pos:column="30"/></operator><name pos:line="438" pos:column="30">s<pos:position pos:line="438" pos:column="31"/></name> <operator pos:line="438" pos:column="32">!=<pos:position pos:line="438" pos:column="34"/></operator> <name pos:line="438" pos:column="35">NULL<pos:position pos:line="438" pos:column="39"/></name><operator pos:line="438" pos:column="39">)<pos:position pos:line="438" pos:column="40"/></operator></expr>)<pos:position pos:line="438" pos:column="41"/></condition><then pos:line="438" pos:column="41"> <block pos:line="438" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="439" pos:column="9">ap_log_error<pos:position pos:line="439" pos:column="21"/></name><argument_list pos:line="439" pos:column="21">(<argument><expr><name pos:line="439" pos:column="22">APLOG_MARK<pos:position pos:line="439" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="439" pos:column="34">APLOG_DEBUG<pos:position pos:line="439" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="439" pos:column="47">0<pos:position pos:line="439" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="439" pos:column="50">s<pos:position pos:line="439" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="439" pos:column="53">"mod_example: %s"<pos:position pos:line="439" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="439" pos:column="72">note<pos:position pos:line="439" pos:column="76"/></name></expr></argument>)<pos:position pos:line="439" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="439" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="440" pos:column="6"/></block></then></if>
}<pos:position pos:line="441" pos:column="2"/></block></function>

<comment type="block" pos:line="443" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="444" pos:column="1">/* We prototyped the various syntax for command handlers (routines that     */</comment>
<comment type="block" pos:line="445" pos:column="1">/* are called when the configuration parser detects a directive declared    */</comment>
<comment type="block" pos:line="446" pos:column="1">/* by our module) earlier.  Now we actually declare a "real" routine that   */</comment>
<comment type="block" pos:line="447" pos:column="1">/* will be invoked by the parser when our "real" directive is               */</comment>
<comment type="block" pos:line="448" pos:column="1">/* encountered.                                                             */</comment>
<comment type="block" pos:line="449" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="450" pos:column="1">/* If a command handler encounters a problem processing the directive, it   */</comment>
<comment type="block" pos:line="451" pos:column="1">/* signals this fact by returning a non-NULL pointer to a string            */</comment>
<comment type="block" pos:line="452" pos:column="1">/* describing the problem.                                                  */</comment>
<comment type="block" pos:line="453" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="454" pos:column="1">/* The magic return value DECLINE_CMD is used to deal with directives       */</comment>
<comment type="block" pos:line="455" pos:column="1">/* that might be declared by multiple modules.  If the command handler      */</comment>
<comment type="block" pos:line="456" pos:column="1">/* returns NULL, the directive was processed; if it returns DECLINE_CMD,    */</comment>
<comment type="block" pos:line="457" pos:column="1">/* the next module (if any) that declares the directive is given a chance   */</comment>
<comment type="block" pos:line="458" pos:column="1">/* at it.  If it returns any other value, it's treated as the text of an    */</comment>
<comment type="block" pos:line="459" pos:column="1">/* error message.                                                           */</comment>
<comment type="block" pos:line="460" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="461" pos:column="1">/*
 * Command handler for the NO_ARGS "Example" directive.  All we do is mark the
 * call in the trace log, and flag the applicability of the directive to the
 * current location in that location's configuration record.
 */</comment>
<function><specifier pos:line="466" pos:column="1">static<pos:position pos:line="466" pos:column="7"/></specifier> <type><specifier pos:line="466" pos:column="8">const<pos:position pos:line="466" pos:column="13"/></specifier> <name pos:line="466" pos:column="14">char<pos:position pos:line="466" pos:column="18"/></name> <modifier pos:line="466" pos:column="19">*<pos:position pos:line="466" pos:column="20"/></modifier></type><name pos:line="466" pos:column="20">cmd_example<pos:position pos:line="466" pos:column="31"/></name><parameter_list pos:line="466" pos:column="31">(<parameter><decl><type><name pos:line="466" pos:column="32">cmd_parms<pos:position pos:line="466" pos:column="41"/></name> <modifier pos:line="466" pos:column="42">*<pos:position pos:line="466" pos:column="43"/></modifier></type><name pos:line="466" pos:column="43">cmd<pos:position pos:line="466" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="466" pos:column="48">void<pos:position pos:line="466" pos:column="52"/></name> <modifier pos:line="466" pos:column="53">*<pos:position pos:line="466" pos:column="54"/></modifier></type><name pos:line="466" pos:column="54">mconfig<pos:position pos:line="466" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="466" pos:column="62"/></parameter_list>
<block pos:line="467" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="468" pos:column="5">x_cfg<pos:position pos:line="468" pos:column="10"/></name> <modifier pos:line="468" pos:column="11">*<pos:position pos:line="468" pos:column="12"/></modifier></type><name pos:line="468" pos:column="12">cfg<pos:position pos:line="468" pos:column="15"/></name> <init pos:line="468" pos:column="16">= <expr><operator pos:line="468" pos:column="18">(<pos:position pos:line="468" pos:column="19"/></operator><name pos:line="468" pos:column="19">x_cfg<pos:position pos:line="468" pos:column="24"/></name> <operator pos:line="468" pos:column="25">*<pos:position pos:line="468" pos:column="26"/></operator><operator pos:line="468" pos:column="26">)<pos:position pos:line="468" pos:column="27"/></operator> <name pos:line="468" pos:column="28">mconfig<pos:position pos:line="468" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="468" pos:column="36"/></decl_stmt>

    <comment type="block" pos:line="470" pos:column="5">/*
     * "Example Wuz Here"
     */</comment>
    <expr_stmt><expr><name><name pos:line="473" pos:column="5">cfg<pos:position pos:line="473" pos:column="8"/></name><operator pos:line="473" pos:column="8">-&gt;<pos:position pos:line="473" pos:column="13"/></operator><name pos:line="473" pos:column="10">local<pos:position pos:line="473" pos:column="15"/></name></name> <operator pos:line="473" pos:column="16">=<pos:position pos:line="473" pos:column="17"/></operator> <literal type="number" pos:line="473" pos:column="18">1<pos:position pos:line="473" pos:column="19"/></literal></expr>;<pos:position pos:line="473" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="474" pos:column="5">trace_add<pos:position pos:line="474" pos:column="14"/></name><argument_list pos:line="474" pos:column="14">(<argument><expr><name><name pos:line="474" pos:column="15">cmd<pos:position pos:line="474" pos:column="18"/></name><operator pos:line="474" pos:column="18">-&gt;<pos:position pos:line="474" pos:column="23"/></operator><name pos:line="474" pos:column="20">server<pos:position pos:line="474" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="474" pos:column="28">NULL<pos:position pos:line="474" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="474" pos:column="34">cfg<pos:position pos:line="474" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="474" pos:column="39">"cmd_example()"<pos:position pos:line="474" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="474" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="474" pos:column="56"/></expr_stmt>
    <return pos:line="475" pos:column="5">return <expr><name pos:line="475" pos:column="12">NULL<pos:position pos:line="475" pos:column="16"/></name></expr>;<pos:position pos:line="475" pos:column="17"/></return>
}<pos:position pos:line="476" pos:column="2"/></block></function>

<comment type="block" pos:line="478" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="479" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="480" pos:column="1">/* Now we declare our content handlers, which are invoked when the server   */</comment>
<comment type="block" pos:line="481" pos:column="1">/* encounters a document which our module is supposed to have a chance to   */</comment>
<comment type="block" pos:line="482" pos:column="1">/* see.  (See mod_mime's SetHandler and AddHandler directives, and the      */</comment>
<comment type="block" pos:line="483" pos:column="1">/* mod_info and mod_status examples, for more details.)                     */</comment>
<comment type="block" pos:line="484" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="485" pos:column="1">/* Since content handlers are dumping data directly into the connection     */</comment>
<comment type="block" pos:line="486" pos:column="1">/* (using the r*() routines, such as rputs() and rprintf()) without         */</comment>
<comment type="block" pos:line="487" pos:column="1">/* intervention by other parts of the server, they need to make             */</comment>
<comment type="block" pos:line="488" pos:column="1">/* sure any accumulated HTTP headers are sent first.  This is done by       */</comment>
<comment type="block" pos:line="489" pos:column="1">/* calling send_http_header().  Otherwise, no header will be sent at all,   */</comment>
<comment type="block" pos:line="490" pos:column="1">/* and the output sent to the client will actually be HTTP-uncompliant.     */</comment>
<comment type="block" pos:line="491" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="492" pos:column="1">/*
 * Sample content handler.  All this does is display the call list that has
 * been built up so far.
 *
 * The return value instructs the caller concerning what happened and what to
 * do next:
 *  OK ("we did our thing")
 *  DECLINED ("this isn't something with which we want to get involved")
 *  HTTP_mumble ("an error status should be reported")
 */</comment>
<function><specifier pos:line="502" pos:column="1">static<pos:position pos:line="502" pos:column="7"/></specifier> <type><name pos:line="502" pos:column="8">int<pos:position pos:line="502" pos:column="11"/></name></type> <name pos:line="502" pos:column="12">x_handler<pos:position pos:line="502" pos:column="21"/></name><parameter_list pos:line="502" pos:column="21">(<parameter><decl><type><name pos:line="502" pos:column="22">request_rec<pos:position pos:line="502" pos:column="33"/></name> <modifier pos:line="502" pos:column="34">*<pos:position pos:line="502" pos:column="35"/></modifier></type><name pos:line="502" pos:column="35">r<pos:position pos:line="502" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="502" pos:column="37"/></parameter_list>
<block pos:line="503" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="504" pos:column="5">x_cfg<pos:position pos:line="504" pos:column="10"/></name> <modifier pos:line="504" pos:column="11">*<pos:position pos:line="504" pos:column="12"/></modifier></type><name pos:line="504" pos:column="12">dcfg<pos:position pos:line="504" pos:column="16"/></name></decl>;<pos:position pos:line="504" pos:column="17"/></decl_stmt>

    <if pos:line="506" pos:column="5">if <condition pos:line="506" pos:column="8">(<expr><call><name pos:line="506" pos:column="9">strcmp<pos:position pos:line="506" pos:column="15"/></name><argument_list pos:line="506" pos:column="15">(<argument><expr><name><name pos:line="506" pos:column="16">r<pos:position pos:line="506" pos:column="17"/></name><operator pos:line="506" pos:column="17">-&gt;<pos:position pos:line="506" pos:column="22"/></operator><name pos:line="506" pos:column="19">handler<pos:position pos:line="506" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="506" pos:column="28">"example-handler"<pos:position pos:line="506" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="506" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="506" pos:column="47"/></condition><then pos:line="506" pos:column="47"> <block pos:line="506" pos:column="48">{
        <return pos:line="507" pos:column="9">return <expr><name pos:line="507" pos:column="16">DECLINED<pos:position pos:line="507" pos:column="24"/></name></expr>;<pos:position pos:line="507" pos:column="25"/></return>
    }<pos:position pos:line="508" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="510" pos:column="5">dcfg<pos:position pos:line="510" pos:column="9"/></name> <operator pos:line="510" pos:column="10">=<pos:position pos:line="510" pos:column="11"/></operator> <call><name pos:line="510" pos:column="12">our_dconfig<pos:position pos:line="510" pos:column="23"/></name><argument_list pos:line="510" pos:column="23">(<argument><expr><name pos:line="510" pos:column="24">r<pos:position pos:line="510" pos:column="25"/></name></expr></argument>)<pos:position pos:line="510" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="510" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="511" pos:column="5">trace_add<pos:position pos:line="511" pos:column="14"/></name><argument_list pos:line="511" pos:column="14">(<argument><expr><name><name pos:line="511" pos:column="15">r<pos:position pos:line="511" pos:column="16"/></name><operator pos:line="511" pos:column="16">-&gt;<pos:position pos:line="511" pos:column="21"/></operator><name pos:line="511" pos:column="18">server<pos:position pos:line="511" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="511" pos:column="26">r<pos:position pos:line="511" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="511" pos:column="29">dcfg<pos:position pos:line="511" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="511" pos:column="35">"x_handler()"<pos:position pos:line="511" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="511" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="511" pos:column="50"/></expr_stmt>
    <comment type="block" pos:line="512" pos:column="5">/*
     * We're about to start sending content, so we need to force the HTTP
     * headers to be sent at this point.  Otherwise, no headers will be sent
     * at all.  We can set any we like first, of course.  **NOTE** Here's
     * where you set the "Content-type" header, and you do so by putting it in
     * r-&gt;content_type, *not* r-&gt;headers_out("Content-type").  If you don't
     * set it, it will be filled in with the server's default type (typically
     * "text/plain").  You *must* also ensure that r-&gt;content_type is lower
     * case.
     *
     * We also need to start a timer so the server can know if the connexion
     * is broken.
     */</comment>
    <expr_stmt><expr><call><name pos:line="525" pos:column="5">ap_set_content_type<pos:position pos:line="525" pos:column="24"/></name><argument_list pos:line="525" pos:column="24">(<argument><expr><name pos:line="525" pos:column="25">r<pos:position pos:line="525" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="525" pos:column="28">"text/html"<pos:position pos:line="525" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="525" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="525" pos:column="41"/></expr_stmt>
    <comment type="block" pos:line="526" pos:column="5">/*
     * If we're only supposed to send header information (HEAD request), we're
     * already there.
     */</comment>
    <if pos:line="530" pos:column="5">if <condition pos:line="530" pos:column="8">(<expr><name><name pos:line="530" pos:column="9">r<pos:position pos:line="530" pos:column="10"/></name><operator pos:line="530" pos:column="10">-&gt;<pos:position pos:line="530" pos:column="15"/></operator><name pos:line="530" pos:column="12">header_only<pos:position pos:line="530" pos:column="23"/></name></name></expr>)<pos:position pos:line="530" pos:column="24"/></condition><then pos:line="530" pos:column="24"> <block pos:line="530" pos:column="25">{
        <return pos:line="531" pos:column="9">return <expr><name pos:line="531" pos:column="16">OK<pos:position pos:line="531" pos:column="18"/></name></expr>;<pos:position pos:line="531" pos:column="19"/></return>
    }<pos:position pos:line="532" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="534" pos:column="5">/*
     * Now send our actual output.  Since we tagged this as being
     * "text/html", we need to embed any HTML.
     */</comment>
    <expr_stmt><expr><call><name pos:line="538" pos:column="5">ap_rputs<pos:position pos:line="538" pos:column="13"/></name><argument_list pos:line="538" pos:column="13">(<argument><expr><name pos:line="538" pos:column="14">DOCTYPE_HTML_3_2<pos:position pos:line="538" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="538" pos:column="32">r<pos:position pos:line="538" pos:column="33"/></name></expr></argument>)<pos:position pos:line="538" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="538" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="539" pos:column="5">ap_rputs<pos:position pos:line="539" pos:column="13"/></name><argument_list pos:line="539" pos:column="13">(<argument><expr><literal type="string" pos:line="539" pos:column="14">"&lt;HTML&gt;\n"<pos:position pos:line="539" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="539" pos:column="26">r<pos:position pos:line="539" pos:column="27"/></name></expr></argument>)<pos:position pos:line="539" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="539" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="540" pos:column="5">ap_rputs<pos:position pos:line="540" pos:column="13"/></name><argument_list pos:line="540" pos:column="13">(<argument><expr><literal type="string" pos:line="540" pos:column="14">" &lt;HEAD&gt;\n"<pos:position pos:line="540" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="540" pos:column="27">r<pos:position pos:line="540" pos:column="28"/></name></expr></argument>)<pos:position pos:line="540" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="540" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="541" pos:column="5">ap_rputs<pos:position pos:line="541" pos:column="13"/></name><argument_list pos:line="541" pos:column="13">(<argument><expr><literal type="string" pos:line="541" pos:column="14">"  &lt;TITLE&gt;mod_example Module Content-Handler Output\n"<pos:position pos:line="541" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="541" pos:column="70">r<pos:position pos:line="541" pos:column="71"/></name></expr></argument>)<pos:position pos:line="541" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="541" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="542" pos:column="5">ap_rputs<pos:position pos:line="542" pos:column="13"/></name><argument_list pos:line="542" pos:column="13">(<argument><expr><literal type="string" pos:line="542" pos:column="14">"  &lt;/TITLE&gt;\n"<pos:position pos:line="542" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="542" pos:column="30">r<pos:position pos:line="542" pos:column="31"/></name></expr></argument>)<pos:position pos:line="542" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="542" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="543" pos:column="5">ap_rputs<pos:position pos:line="543" pos:column="13"/></name><argument_list pos:line="543" pos:column="13">(<argument><expr><literal type="string" pos:line="543" pos:column="14">" &lt;/HEAD&gt;\n"<pos:position pos:line="543" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="543" pos:column="28">r<pos:position pos:line="543" pos:column="29"/></name></expr></argument>)<pos:position pos:line="543" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="543" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="544" pos:column="5">ap_rputs<pos:position pos:line="544" pos:column="13"/></name><argument_list pos:line="544" pos:column="13">(<argument><expr><literal type="string" pos:line="544" pos:column="14">" &lt;BODY&gt;\n"<pos:position pos:line="544" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="544" pos:column="27">r<pos:position pos:line="544" pos:column="28"/></name></expr></argument>)<pos:position pos:line="544" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="544" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="545" pos:column="5">ap_rputs<pos:position pos:line="545" pos:column="13"/></name><argument_list pos:line="545" pos:column="13">(<argument><expr><literal type="string" pos:line="545" pos:column="14">"  &lt;H1&gt;&lt;SAMP&gt;mod_example&lt;/SAMP&gt; Module Content-Handler Output\n"<pos:position pos:line="545" pos:column="96"/></literal></expr></argument>, <argument><expr><name pos:line="545" pos:column="80">r<pos:position pos:line="545" pos:column="81"/></name></expr></argument>)<pos:position pos:line="545" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="545" pos:column="83"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="546" pos:column="5">ap_rputs<pos:position pos:line="546" pos:column="13"/></name><argument_list pos:line="546" pos:column="13">(<argument><expr><literal type="string" pos:line="546" pos:column="14">"  &lt;/H1&gt;\n"<pos:position pos:line="546" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="546" pos:column="27">r<pos:position pos:line="546" pos:column="28"/></name></expr></argument>)<pos:position pos:line="546" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="546" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="547" pos:column="5">ap_rputs<pos:position pos:line="547" pos:column="13"/></name><argument_list pos:line="547" pos:column="13">(<argument><expr><literal type="string" pos:line="547" pos:column="14">"  &lt;P&gt;\n"<pos:position pos:line="547" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="547" pos:column="25">r<pos:position pos:line="547" pos:column="26"/></name></expr></argument>)<pos:position pos:line="547" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="547" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="548" pos:column="5">ap_rprintf<pos:position pos:line="548" pos:column="15"/></name><argument_list pos:line="548" pos:column="15">(<argument><expr><name pos:line="548" pos:column="16">r<pos:position pos:line="548" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="548" pos:column="19">"  Apache HTTP Server version: \"%s\"\n"<pos:position pos:line="548" pos:column="59"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="549" pos:column="13">ap_get_server_banner<pos:position pos:line="549" pos:column="33"/></name><argument_list pos:line="549" pos:column="33">()<pos:position pos:line="549" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="549" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="549" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="550" pos:column="5">ap_rputs<pos:position pos:line="550" pos:column="13"/></name><argument_list pos:line="550" pos:column="13">(<argument><expr><literal type="string" pos:line="550" pos:column="14">"  &lt;BR&gt;\n"<pos:position pos:line="550" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="550" pos:column="26">r<pos:position pos:line="550" pos:column="27"/></name></expr></argument>)<pos:position pos:line="550" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="551" pos:column="5">ap_rprintf<pos:position pos:line="551" pos:column="15"/></name><argument_list pos:line="551" pos:column="15">(<argument><expr><name pos:line="551" pos:column="16">r<pos:position pos:line="551" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="551" pos:column="19">"  Server built: \"%s\"\n"<pos:position pos:line="551" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="551" pos:column="47">ap_get_server_built<pos:position pos:line="551" pos:column="66"/></name><argument_list pos:line="551" pos:column="66">()<pos:position pos:line="551" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="551" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="551" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="552" pos:column="5">ap_rputs<pos:position pos:line="552" pos:column="13"/></name><argument_list pos:line="552" pos:column="13">(<argument><expr><literal type="string" pos:line="552" pos:column="14">"  &lt;/P&gt;\n"<pos:position pos:line="552" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="552" pos:column="26">r<pos:position pos:line="552" pos:column="27"/></name></expr></argument>)<pos:position pos:line="552" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="552" pos:column="29"/></expr_stmt><empty_stmt pos:line="552" pos:column="29">;<pos:position pos:line="552" pos:column="30"/></empty_stmt>
    <expr_stmt><expr><call><name pos:line="553" pos:column="5">ap_rputs<pos:position pos:line="553" pos:column="13"/></name><argument_list pos:line="553" pos:column="13">(<argument><expr><literal type="string" pos:line="553" pos:column="14">"  &lt;P&gt;\n"<pos:position pos:line="553" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="553" pos:column="25">r<pos:position pos:line="553" pos:column="26"/></name></expr></argument>)<pos:position pos:line="553" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="553" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="554" pos:column="5">ap_rputs<pos:position pos:line="554" pos:column="13"/></name><argument_list pos:line="554" pos:column="13">(<argument><expr><literal type="string" pos:line="554" pos:column="14">"  The format for the callback trace is:\n"<pos:position pos:line="554" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="554" pos:column="59">r<pos:position pos:line="554" pos:column="60"/></name></expr></argument>)<pos:position pos:line="554" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="554" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="555" pos:column="5">ap_rputs<pos:position pos:line="555" pos:column="13"/></name><argument_list pos:line="555" pos:column="13">(<argument><expr><literal type="string" pos:line="555" pos:column="14">"  &lt;/P&gt;\n"<pos:position pos:line="555" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="555" pos:column="26">r<pos:position pos:line="555" pos:column="27"/></name></expr></argument>)<pos:position pos:line="555" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="555" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="556" pos:column="5">ap_rputs<pos:position pos:line="556" pos:column="13"/></name><argument_list pos:line="556" pos:column="13">(<argument><expr><literal type="string" pos:line="556" pos:column="14">"  &lt;DL&gt;\n"<pos:position pos:line="556" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="556" pos:column="26">r<pos:position pos:line="556" pos:column="27"/></name></expr></argument>)<pos:position pos:line="556" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="556" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="557" pos:column="5">ap_rputs<pos:position pos:line="557" pos:column="13"/></name><argument_list pos:line="557" pos:column="13">(<argument><expr><literal type="string" pos:line="557" pos:column="14">"   &lt;DT&gt;&lt;EM&gt;n&lt;/EM&gt;.&lt;SAMP&gt;&amp;lt;routine-name&amp;gt;"<pos:position pos:line="557" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="557" pos:column="62">r<pos:position pos:line="557" pos:column="63"/></name></expr></argument>)<pos:position pos:line="557" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="557" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="558" pos:column="5">ap_rputs<pos:position pos:line="558" pos:column="13"/></name><argument_list pos:line="558" pos:column="13">(<argument><expr><literal type="string" pos:line="558" pos:column="14">"(&amp;lt;routine-data&amp;gt;)&lt;/SAMP&gt;\n"<pos:position pos:line="558" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="558" pos:column="49">r<pos:position pos:line="558" pos:column="50"/></name></expr></argument>)<pos:position pos:line="558" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="558" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="559" pos:column="5">ap_rputs<pos:position pos:line="559" pos:column="13"/></name><argument_list pos:line="559" pos:column="13">(<argument><expr><literal type="string" pos:line="559" pos:column="14">"   &lt;/DT&gt;\n"<pos:position pos:line="559" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="559" pos:column="28">r<pos:position pos:line="559" pos:column="29"/></name></expr></argument>)<pos:position pos:line="559" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="559" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="560" pos:column="5">ap_rputs<pos:position pos:line="560" pos:column="13"/></name><argument_list pos:line="560" pos:column="13">(<argument><expr><literal type="string" pos:line="560" pos:column="14">"   &lt;DD&gt;&lt;SAMP&gt;[&amp;lt;applies-to&amp;gt;]&lt;/SAMP&gt;\n"<pos:position pos:line="560" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="560" pos:column="60">r<pos:position pos:line="560" pos:column="61"/></name></expr></argument>)<pos:position pos:line="560" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="560" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="561" pos:column="5">ap_rputs<pos:position pos:line="561" pos:column="13"/></name><argument_list pos:line="561" pos:column="13">(<argument><expr><literal type="string" pos:line="561" pos:column="14">"   &lt;/DD&gt;\n"<pos:position pos:line="561" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="561" pos:column="28">r<pos:position pos:line="561" pos:column="29"/></name></expr></argument>)<pos:position pos:line="561" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="561" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="562" pos:column="5">ap_rputs<pos:position pos:line="562" pos:column="13"/></name><argument_list pos:line="562" pos:column="13">(<argument><expr><literal type="string" pos:line="562" pos:column="14">"  &lt;/DL&gt;\n"<pos:position pos:line="562" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="562" pos:column="27">r<pos:position pos:line="562" pos:column="28"/></name></expr></argument>)<pos:position pos:line="562" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="562" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="563" pos:column="5">ap_rputs<pos:position pos:line="563" pos:column="13"/></name><argument_list pos:line="563" pos:column="13">(<argument><expr><literal type="string" pos:line="563" pos:column="14">"  &lt;P&gt;\n"<pos:position pos:line="563" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="563" pos:column="25">r<pos:position pos:line="563" pos:column="26"/></name></expr></argument>)<pos:position pos:line="563" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="563" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="564" pos:column="5">ap_rputs<pos:position pos:line="564" pos:column="13"/></name><argument_list pos:line="564" pos:column="13">(<argument><expr><literal type="string" pos:line="564" pos:column="14">"  The &lt;SAMP&gt;&amp;lt;routine-data&amp;gt;&lt;/SAMP&gt; is supplied by\n"<pos:position pos:line="564" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="564" pos:column="74">r<pos:position pos:line="564" pos:column="75"/></name></expr></argument>)<pos:position pos:line="564" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="564" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="565" pos:column="5">ap_rputs<pos:position pos:line="565" pos:column="13"/></name><argument_list pos:line="565" pos:column="13">(<argument><expr><literal type="string" pos:line="565" pos:column="14">"  the routine when it requests the trace,\n"<pos:position pos:line="565" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="565" pos:column="61">r<pos:position pos:line="565" pos:column="62"/></name></expr></argument>)<pos:position pos:line="565" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="565" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="566" pos:column="5">ap_rputs<pos:position pos:line="566" pos:column="13"/></name><argument_list pos:line="566" pos:column="13">(<argument><expr><literal type="string" pos:line="566" pos:column="14">"  and the &lt;SAMP&gt;&amp;lt;applies-to&amp;gt;&lt;/SAMP&gt; is extracted\n"<pos:position pos:line="566" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="566" pos:column="74">r<pos:position pos:line="566" pos:column="75"/></name></expr></argument>)<pos:position pos:line="566" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="566" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="567" pos:column="5">ap_rputs<pos:position pos:line="567" pos:column="13"/></name><argument_list pos:line="567" pos:column="13">(<argument><expr><literal type="string" pos:line="567" pos:column="14">"  from the configuration record at the time of the trace.\n"<pos:position pos:line="567" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="567" pos:column="77">r<pos:position pos:line="567" pos:column="78"/></name></expr></argument>)<pos:position pos:line="567" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="567" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="568" pos:column="5">ap_rputs<pos:position pos:line="568" pos:column="13"/></name><argument_list pos:line="568" pos:column="13">(<argument><expr><literal type="string" pos:line="568" pos:column="14">"  &lt;STRONG&gt;SVR()&lt;/STRONG&gt; indicates a server environment\n"<pos:position pos:line="568" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="568" pos:column="75">r<pos:position pos:line="568" pos:column="76"/></name></expr></argument>)<pos:position pos:line="568" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="568" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="569" pos:column="5">ap_rputs<pos:position pos:line="569" pos:column="13"/></name><argument_list pos:line="569" pos:column="13">(<argument><expr><literal type="string" pos:line="569" pos:column="14">"  (blank means the main or default server, otherwise it's\n"<pos:position pos:line="569" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="569" pos:column="77">r<pos:position pos:line="569" pos:column="78"/></name></expr></argument>)<pos:position pos:line="569" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="570" pos:column="5">ap_rputs<pos:position pos:line="570" pos:column="13"/></name><argument_list pos:line="570" pos:column="13">(<argument><expr><literal type="string" pos:line="570" pos:column="14">"  the name of the VirtualHost); &lt;STRONG&gt;DIR()&lt;/STRONG&gt;\n"<pos:position pos:line="570" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="570" pos:column="74">r<pos:position pos:line="570" pos:column="75"/></name></expr></argument>)<pos:position pos:line="570" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="570" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="571" pos:column="5">ap_rputs<pos:position pos:line="571" pos:column="13"/></name><argument_list pos:line="571" pos:column="13">(<argument><expr><literal type="string" pos:line="571" pos:column="14">"  indicates a location in the URL or filesystem\n"<pos:position pos:line="571" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="571" pos:column="67">r<pos:position pos:line="571" pos:column="68"/></name></expr></argument>)<pos:position pos:line="571" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="571" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="572" pos:column="5">ap_rputs<pos:position pos:line="572" pos:column="13"/></name><argument_list pos:line="572" pos:column="13">(<argument><expr><literal type="string" pos:line="572" pos:column="14">"  namespace.\n"<pos:position pos:line="572" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="572" pos:column="32">r<pos:position pos:line="572" pos:column="33"/></name></expr></argument>)<pos:position pos:line="572" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="572" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="573" pos:column="5">ap_rputs<pos:position pos:line="573" pos:column="13"/></name><argument_list pos:line="573" pos:column="13">(<argument><expr><literal type="string" pos:line="573" pos:column="14">"  &lt;/P&gt;\n"<pos:position pos:line="573" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="573" pos:column="26">r<pos:position pos:line="573" pos:column="27"/></name></expr></argument>)<pos:position pos:line="573" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="573" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="574" pos:column="5">ap_rprintf<pos:position pos:line="574" pos:column="15"/></name><argument_list pos:line="574" pos:column="15">(<argument><expr><name pos:line="574" pos:column="16">r<pos:position pos:line="574" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="574" pos:column="19">"  &lt;H2&gt;Static callbacks so far:&lt;/H2&gt;\n  &lt;OL&gt;\n%s  &lt;/OL&gt;\n"<pos:position pos:line="574" pos:column="101"/></literal></expr></argument>,
            <argument><expr><name pos:line="575" pos:column="13">trace<pos:position pos:line="575" pos:column="18"/></name></expr></argument>)<pos:position pos:line="575" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="575" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="576" pos:column="5">ap_rputs<pos:position pos:line="576" pos:column="13"/></name><argument_list pos:line="576" pos:column="13">(<argument><expr><literal type="string" pos:line="576" pos:column="14">"  &lt;H2&gt;Request-specific callbacks so far:&lt;/H2&gt;\n"<pos:position pos:line="576" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="576" pos:column="65">r<pos:position pos:line="576" pos:column="66"/></name></expr></argument>)<pos:position pos:line="576" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="576" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="577" pos:column="5">ap_rprintf<pos:position pos:line="577" pos:column="15"/></name><argument_list pos:line="577" pos:column="15">(<argument><expr><name pos:line="577" pos:column="16">r<pos:position pos:line="577" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="577" pos:column="19">"  &lt;OL&gt;\n%s  &lt;/OL&gt;\n"<pos:position pos:line="577" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="577" pos:column="42">apr_table_get<pos:position pos:line="577" pos:column="55"/></name><argument_list pos:line="577" pos:column="55">(<argument><expr><name><name pos:line="577" pos:column="56">r<pos:position pos:line="577" pos:column="57"/></name><operator pos:line="577" pos:column="57">-&gt;<pos:position pos:line="577" pos:column="62"/></operator><name pos:line="577" pos:column="59">notes<pos:position pos:line="577" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="577" pos:column="66">TRACE_NOTE<pos:position pos:line="577" pos:column="76"/></name></expr></argument>)<pos:position pos:line="577" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="577" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="577" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="578" pos:column="5">ap_rputs<pos:position pos:line="578" pos:column="13"/></name><argument_list pos:line="578" pos:column="13">(<argument><expr><literal type="string" pos:line="578" pos:column="14">"  &lt;H2&gt;Environment for &lt;EM&gt;this&lt;/EM&gt; call:&lt;/H2&gt;\n"<pos:position pos:line="578" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="578" pos:column="66">r<pos:position pos:line="578" pos:column="67"/></name></expr></argument>)<pos:position pos:line="578" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="578" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="579" pos:column="5">ap_rputs<pos:position pos:line="579" pos:column="13"/></name><argument_list pos:line="579" pos:column="13">(<argument><expr><literal type="string" pos:line="579" pos:column="14">"  &lt;UL&gt;\n"<pos:position pos:line="579" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="579" pos:column="26">r<pos:position pos:line="579" pos:column="27"/></name></expr></argument>)<pos:position pos:line="579" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="579" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="580" pos:column="5">ap_rprintf<pos:position pos:line="580" pos:column="15"/></name><argument_list pos:line="580" pos:column="15">(<argument><expr><name pos:line="580" pos:column="16">r<pos:position pos:line="580" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="580" pos:column="19">"   &lt;LI&gt;Applies-to: &lt;SAMP&gt;%s&lt;/SAMP&gt;\n   &lt;/LI&gt;\n"<pos:position pos:line="580" pos:column="91"/></literal></expr></argument>, <argument><expr><name><name pos:line="580" pos:column="69">dcfg<pos:position pos:line="580" pos:column="73"/></name><operator pos:line="580" pos:column="73">-&gt;<pos:position pos:line="580" pos:column="78"/></operator><name pos:line="580" pos:column="75">loc<pos:position pos:line="580" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="580" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="580" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="581" pos:column="5">ap_rprintf<pos:position pos:line="581" pos:column="15"/></name><argument_list pos:line="581" pos:column="15">(<argument><expr><name pos:line="581" pos:column="16">r<pos:position pos:line="581" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="581" pos:column="19">"   &lt;LI&gt;\"Example\" directive declared here: %s\n   &lt;/LI&gt;\n"<pos:position pos:line="581" pos:column="91"/></literal></expr></argument>,
            <argument><expr><operator pos:line="582" pos:column="13">(<pos:position pos:line="582" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="582" pos:column="14">dcfg<pos:position pos:line="582" pos:column="18"/></name><operator pos:line="582" pos:column="18">-&gt;<pos:position pos:line="582" pos:column="23"/></operator><name pos:line="582" pos:column="20">local<pos:position pos:line="582" pos:column="25"/></name></name></expr> ?<pos:position pos:line="582" pos:column="27"/></condition><then pos:line="582" pos:column="27"> <expr><literal type="string" pos:line="582" pos:column="28">"YES"<pos:position pos:line="582" pos:column="33"/></literal></expr> <pos:position pos:line="582" pos:column="34"/></then><else pos:line="582" pos:column="34">: <expr><literal type="string" pos:line="582" pos:column="36">"NO"<pos:position pos:line="582" pos:column="40"/></literal></expr></else></ternary><operator pos:line="582" pos:column="40">)<pos:position pos:line="582" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="582" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="582" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="583" pos:column="5">ap_rprintf<pos:position pos:line="583" pos:column="15"/></name><argument_list pos:line="583" pos:column="15">(<argument><expr><name pos:line="583" pos:column="16">r<pos:position pos:line="583" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="583" pos:column="19">"   &lt;LI&gt;\"Example\" inherited: %s\n   &lt;/LI&gt;\n"<pos:position pos:line="583" pos:column="77"/></literal></expr></argument>,
            <argument><expr><operator pos:line="584" pos:column="13">(<pos:position pos:line="584" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="584" pos:column="14">dcfg<pos:position pos:line="584" pos:column="18"/></name><operator pos:line="584" pos:column="18">-&gt;<pos:position pos:line="584" pos:column="23"/></operator><name pos:line="584" pos:column="20">congenital<pos:position pos:line="584" pos:column="30"/></name></name></expr> ?<pos:position pos:line="584" pos:column="32"/></condition><then pos:line="584" pos:column="32"> <expr><literal type="string" pos:line="584" pos:column="33">"YES"<pos:position pos:line="584" pos:column="38"/></literal></expr> <pos:position pos:line="584" pos:column="39"/></then><else pos:line="584" pos:column="39">: <expr><literal type="string" pos:line="584" pos:column="41">"NO"<pos:position pos:line="584" pos:column="45"/></literal></expr></else></ternary><operator pos:line="584" pos:column="45">)<pos:position pos:line="584" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="584" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="585" pos:column="5">ap_rputs<pos:position pos:line="585" pos:column="13"/></name><argument_list pos:line="585" pos:column="13">(<argument><expr><literal type="string" pos:line="585" pos:column="14">"  &lt;/UL&gt;\n"<pos:position pos:line="585" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="585" pos:column="27">r<pos:position pos:line="585" pos:column="28"/></name></expr></argument>)<pos:position pos:line="585" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="585" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="586" pos:column="5">ap_rputs<pos:position pos:line="586" pos:column="13"/></name><argument_list pos:line="586" pos:column="13">(<argument><expr><literal type="string" pos:line="586" pos:column="14">" &lt;/BODY&gt;\n"<pos:position pos:line="586" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="586" pos:column="28">r<pos:position pos:line="586" pos:column="29"/></name></expr></argument>)<pos:position pos:line="586" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="586" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="587" pos:column="5">ap_rputs<pos:position pos:line="587" pos:column="13"/></name><argument_list pos:line="587" pos:column="13">(<argument><expr><literal type="string" pos:line="587" pos:column="14">"&lt;/HTML&gt;\n"<pos:position pos:line="587" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="587" pos:column="27">r<pos:position pos:line="587" pos:column="28"/></name></expr></argument>)<pos:position pos:line="587" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="587" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="588" pos:column="5">/*
     * We're all done, so cancel the timeout we set.  Since this is probably
     * the end of the request we *could* assume this would be done during
     * post-processing - but it's possible that another handler might be
     * called and inherit our outstanding timer.  Not good; to each its own.
     */</comment>
    <comment type="block" pos:line="594" pos:column="5">/*
     * We did what we wanted to do, so tell the rest of the server we
     * succeeded.
     */</comment>
    <return pos:line="598" pos:column="5">return <expr><name pos:line="598" pos:column="12">OK<pos:position pos:line="598" pos:column="14"/></name></expr>;<pos:position pos:line="598" pos:column="15"/></return>
}<pos:position pos:line="599" pos:column="2"/></block></function>

<comment type="block" pos:line="601" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="602" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="603" pos:column="1">/* Now let's declare routines for each of the callback phase in order.      */</comment>
<comment type="block" pos:line="604" pos:column="1">/* (That's the order in which they're listed in the callback list, *not     */</comment>
<comment type="block" pos:line="605" pos:column="1">/* the order in which the server calls them!  See the command_rec           */</comment>
<comment type="block" pos:line="606" pos:column="1">/* declaration near the bottom of this file.)  Note that these may be       */</comment>
<comment type="block" pos:line="607" pos:column="1">/* called for situations that don't relate primarily to our function - in   */</comment>
<comment type="block" pos:line="608" pos:column="1">/* other words, the fixup handler shouldn't assume that the request has     */</comment>
<comment type="block" pos:line="609" pos:column="1">/* to do with "example" stuff.                                              */</comment>
<comment type="block" pos:line="610" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="611" pos:column="1">/* With the exception of the content handler, all of our routines will be   */</comment>
<comment type="block" pos:line="612" pos:column="1">/* called for each request, unless an earlier handler from another module   */</comment>
<comment type="block" pos:line="613" pos:column="1">/* aborted the sequence.                                                    */</comment>
<comment type="block" pos:line="614" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="615" pos:column="1">/* Handlers that are declared as "int" can return the following:            */</comment>
<comment type="block" pos:line="616" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="617" pos:column="1">/*  OK          Handler accepted the request and did its thing with it.     */</comment>
<comment type="block" pos:line="618" pos:column="1">/*  DECLINED    Handler took no action.                                     */</comment>
<comment type="block" pos:line="619" pos:column="1">/*  HTTP_mumble Handler looked at request and found it wanting.             */</comment>
<comment type="block" pos:line="620" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="621" pos:column="1">/* What the server does after calling a module handler depends upon the     */</comment>
<comment type="block" pos:line="622" pos:column="1">/* handler's return value.  In all cases, if the handler returns            */</comment>
<comment type="block" pos:line="623" pos:column="1">/* DECLINED, the server will continue to the next module with an handler    */</comment>
<comment type="block" pos:line="624" pos:column="1">/* for the current phase.  However, if the handler return a non-OK,         */</comment>
<comment type="block" pos:line="625" pos:column="1">/* non-DECLINED status, the server aborts the request right there.  If      */</comment>
<comment type="block" pos:line="626" pos:column="1">/* the handler returns OK, the server's next action is phase-specific;      */</comment>
<comment type="block" pos:line="627" pos:column="1">/* see the individual handler comments below for details.                   */</comment>
<comment type="block" pos:line="628" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="629" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="630" pos:column="1">/*
 * This function is called during server initialisation.  Any information
 * that needs to be recorded must be in static cells, since there's no
 * configuration record.
 *
 * There is no return value.
 */</comment>

<comment type="block" pos:line="638" pos:column="1">/*
 * This function is called when an heavy-weight process (such as a child) is
 * being run down or destroyed.  As with the child initialisation function,
 * any information that needs to be recorded must be in static cells, since
 * there's no configuration record.
 *
 * There is no return value.
 */</comment>

<comment type="block" pos:line="647" pos:column="1">/*
 * This function is called during server initialisation when an heavy-weight
 * process (such as a child) is being initialised.  As with the
 * module initialisation function, any information that needs to be recorded
 * must be in static cells, since there's no configuration record.
 *
 * There is no return value.
 */</comment>

<comment type="block" pos:line="656" pos:column="1">/*
 * This function gets called to create a per-directory configuration
 * record.  This will be called for the "default" server environment, and for
 * each directory for which the parser finds any of our directives applicable.
 * If a directory doesn't have any of our directives involved (i.e., they
 * aren't in the .htaccess file, or a &lt;Location&gt;, &lt;Directory&gt;, or related
 * block), this routine will *not* be called - the configuration for the
 * closest ancestor is used.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */</comment>
<function><specifier pos:line="668" pos:column="1">static<pos:position pos:line="668" pos:column="7"/></specifier> <type><name pos:line="668" pos:column="8">void<pos:position pos:line="668" pos:column="12"/></name> <modifier pos:line="668" pos:column="13">*<pos:position pos:line="668" pos:column="14"/></modifier></type><name pos:line="668" pos:column="14">x_create_dir_config<pos:position pos:line="668" pos:column="33"/></name><parameter_list pos:line="668" pos:column="33">(<parameter><decl><type><name pos:line="668" pos:column="34">apr_pool_t<pos:position pos:line="668" pos:column="44"/></name> <modifier pos:line="668" pos:column="45">*<pos:position pos:line="668" pos:column="46"/></modifier></type><name pos:line="668" pos:column="46">p<pos:position pos:line="668" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="668" pos:column="49">char<pos:position pos:line="668" pos:column="53"/></name> <modifier pos:line="668" pos:column="54">*<pos:position pos:line="668" pos:column="55"/></modifier></type><name pos:line="668" pos:column="55">dirspec<pos:position pos:line="668" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="668" pos:column="63"/></parameter_list>
<block pos:line="669" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="670" pos:column="5">x_cfg<pos:position pos:line="670" pos:column="10"/></name> <modifier pos:line="670" pos:column="11">*<pos:position pos:line="670" pos:column="12"/></modifier></type><name pos:line="670" pos:column="12">cfg<pos:position pos:line="670" pos:column="15"/></name></decl>;<pos:position pos:line="670" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="671" pos:column="5">char<pos:position pos:line="671" pos:column="9"/></name> <modifier pos:line="671" pos:column="10">*<pos:position pos:line="671" pos:column="11"/></modifier></type><name pos:line="671" pos:column="11">dname<pos:position pos:line="671" pos:column="16"/></name> <init pos:line="671" pos:column="17">= <expr><name pos:line="671" pos:column="19">dirspec<pos:position pos:line="671" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="671" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="673" pos:column="5">/*
     * Allocate the space for our record from the pool supplied.
     */</comment>
    <expr_stmt><expr><name pos:line="676" pos:column="5">cfg<pos:position pos:line="676" pos:column="8"/></name> <operator pos:line="676" pos:column="9">=<pos:position pos:line="676" pos:column="10"/></operator> <operator pos:line="676" pos:column="11">(<pos:position pos:line="676" pos:column="12"/></operator><name pos:line="676" pos:column="12">x_cfg<pos:position pos:line="676" pos:column="17"/></name> <operator pos:line="676" pos:column="18">*<pos:position pos:line="676" pos:column="19"/></operator><operator pos:line="676" pos:column="19">)<pos:position pos:line="676" pos:column="20"/></operator> <call><name pos:line="676" pos:column="21">apr_pcalloc<pos:position pos:line="676" pos:column="32"/></name><argument_list pos:line="676" pos:column="32">(<argument><expr><name pos:line="676" pos:column="33">p<pos:position pos:line="676" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="676" pos:column="36">sizeof<argument_list pos:line="676" pos:column="42">(<argument><expr><name pos:line="676" pos:column="43">x_cfg<pos:position pos:line="676" pos:column="48"/></name></expr></argument>)<pos:position pos:line="676" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="676" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="676" pos:column="51"/></expr_stmt>
    <comment type="block" pos:line="677" pos:column="5">/*
     * Now fill in the defaults.  If there are any `parent' configuration
     * records, they'll get merged as part of a separate callback.
     */</comment>
    <expr_stmt><expr><name><name pos:line="681" pos:column="5">cfg<pos:position pos:line="681" pos:column="8"/></name><operator pos:line="681" pos:column="8">-&gt;<pos:position pos:line="681" pos:column="13"/></operator><name pos:line="681" pos:column="10">local<pos:position pos:line="681" pos:column="15"/></name></name> <operator pos:line="681" pos:column="16">=<pos:position pos:line="681" pos:column="17"/></operator> <literal type="number" pos:line="681" pos:column="18">0<pos:position pos:line="681" pos:column="19"/></literal></expr>;<pos:position pos:line="681" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="682" pos:column="5">cfg<pos:position pos:line="682" pos:column="8"/></name><operator pos:line="682" pos:column="8">-&gt;<pos:position pos:line="682" pos:column="13"/></operator><name pos:line="682" pos:column="10">congenital<pos:position pos:line="682" pos:column="20"/></name></name> <operator pos:line="682" pos:column="21">=<pos:position pos:line="682" pos:column="22"/></operator> <literal type="number" pos:line="682" pos:column="23">0<pos:position pos:line="682" pos:column="24"/></literal></expr>;<pos:position pos:line="682" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="683" pos:column="5">cfg<pos:position pos:line="683" pos:column="8"/></name><operator pos:line="683" pos:column="8">-&gt;<pos:position pos:line="683" pos:column="13"/></operator><name pos:line="683" pos:column="10">cmode<pos:position pos:line="683" pos:column="15"/></name></name> <operator pos:line="683" pos:column="16">=<pos:position pos:line="683" pos:column="17"/></operator> <name pos:line="683" pos:column="18">CONFIG_MODE_DIRECTORY<pos:position pos:line="683" pos:column="39"/></name></expr>;<pos:position pos:line="683" pos:column="40"/></expr_stmt>
    <comment type="block" pos:line="684" pos:column="5">/*
     * Finally, add our trace to the callback list.
     */</comment>
    <expr_stmt><expr><name pos:line="687" pos:column="5">dname<pos:position pos:line="687" pos:column="10"/></name> <operator pos:line="687" pos:column="11">=<pos:position pos:line="687" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="687" pos:column="13">(<pos:position pos:line="687" pos:column="14"/></operator><name pos:line="687" pos:column="14">dname<pos:position pos:line="687" pos:column="19"/></name> <operator pos:line="687" pos:column="20">!=<pos:position pos:line="687" pos:column="22"/></operator> <name pos:line="687" pos:column="23">NULL<pos:position pos:line="687" pos:column="27"/></name><operator pos:line="687" pos:column="27">)<pos:position pos:line="687" pos:column="28"/></operator></expr> ?<pos:position pos:line="687" pos:column="30"/></condition><then pos:line="687" pos:column="30"> <expr><name pos:line="687" pos:column="31">dname<pos:position pos:line="687" pos:column="36"/></name></expr> <pos:position pos:line="687" pos:column="37"/></then><else pos:line="687" pos:column="37">: <expr><literal type="string" pos:line="687" pos:column="39">""<pos:position pos:line="687" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="687" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="688" pos:column="5">cfg<pos:position pos:line="688" pos:column="8"/></name><operator pos:line="688" pos:column="8">-&gt;<pos:position pos:line="688" pos:column="13"/></operator><name pos:line="688" pos:column="10">loc<pos:position pos:line="688" pos:column="13"/></name></name> <operator pos:line="688" pos:column="14">=<pos:position pos:line="688" pos:column="15"/></operator> <call><name pos:line="688" pos:column="16">apr_pstrcat<pos:position pos:line="688" pos:column="27"/></name><argument_list pos:line="688" pos:column="27">(<argument><expr><name pos:line="688" pos:column="28">p<pos:position pos:line="688" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="688" pos:column="31">"DIR("<pos:position pos:line="688" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="688" pos:column="39">dname<pos:position pos:line="688" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="688" pos:column="46">")"<pos:position pos:line="688" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="688" pos:column="51">NULL<pos:position pos:line="688" pos:column="55"/></name></expr></argument>)<pos:position pos:line="688" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="688" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="689" pos:column="5">trace_add<pos:position pos:line="689" pos:column="14"/></name><argument_list pos:line="689" pos:column="14">(<argument><expr><name pos:line="689" pos:column="15">NULL<pos:position pos:line="689" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="689" pos:column="21">NULL<pos:position pos:line="689" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="689" pos:column="27">cfg<pos:position pos:line="689" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="689" pos:column="32">"x_create_dir_config()"<pos:position pos:line="689" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="689" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="689" pos:column="57"/></expr_stmt>
    <return pos:line="690" pos:column="5">return <expr><operator pos:line="690" pos:column="12">(<pos:position pos:line="690" pos:column="13"/></operator><name pos:line="690" pos:column="13">void<pos:position pos:line="690" pos:column="17"/></name> <operator pos:line="690" pos:column="18">*<pos:position pos:line="690" pos:column="19"/></operator><operator pos:line="690" pos:column="19">)<pos:position pos:line="690" pos:column="20"/></operator> <name pos:line="690" pos:column="21">cfg<pos:position pos:line="690" pos:column="24"/></name></expr>;<pos:position pos:line="690" pos:column="25"/></return>
}<pos:position pos:line="691" pos:column="2"/></block></function>

<comment type="block" pos:line="693" pos:column="1">/*
 * This function gets called to merge two per-directory configuration
 * records.  This is typically done to cope with things like .htaccess files
 * or &lt;Location&gt; directives for directories that are beneath one for which a
 * configuration record was already created.  The routine has the
 * responsibility of creating a new record and merging the contents of the
 * other two into it appropriately.  If the module doesn't declare a merge
 * routine, the record for the closest ancestor location (that has one) is
 * used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */</comment>
<function><specifier pos:line="708" pos:column="1">static<pos:position pos:line="708" pos:column="7"/></specifier> <type><name pos:line="708" pos:column="8">void<pos:position pos:line="708" pos:column="12"/></name> <modifier pos:line="708" pos:column="13">*<pos:position pos:line="708" pos:column="14"/></modifier></type><name pos:line="708" pos:column="14">x_merge_dir_config<pos:position pos:line="708" pos:column="32"/></name><parameter_list pos:line="708" pos:column="32">(<parameter><decl><type><name pos:line="708" pos:column="33">apr_pool_t<pos:position pos:line="708" pos:column="43"/></name> <modifier pos:line="708" pos:column="44">*<pos:position pos:line="708" pos:column="45"/></modifier></type><name pos:line="708" pos:column="45">p<pos:position pos:line="708" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="708" pos:column="48">void<pos:position pos:line="708" pos:column="52"/></name> <modifier pos:line="708" pos:column="53">*<pos:position pos:line="708" pos:column="54"/></modifier></type><name pos:line="708" pos:column="54">parent_conf<pos:position pos:line="708" pos:column="65"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="709" pos:column="39">void<pos:position pos:line="709" pos:column="43"/></name> <modifier pos:line="709" pos:column="44">*<pos:position pos:line="709" pos:column="45"/></modifier></type><name pos:line="709" pos:column="45">newloc_conf<pos:position pos:line="709" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="709" pos:column="57"/></parameter_list>
<block pos:line="710" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="712" pos:column="5">x_cfg<pos:position pos:line="712" pos:column="10"/></name> <modifier pos:line="712" pos:column="11">*<pos:position pos:line="712" pos:column="12"/></modifier></type><name pos:line="712" pos:column="12">merged_config<pos:position pos:line="712" pos:column="25"/></name> <init pos:line="712" pos:column="26">= <expr><operator pos:line="712" pos:column="28">(<pos:position pos:line="712" pos:column="29"/></operator><name pos:line="712" pos:column="29">x_cfg<pos:position pos:line="712" pos:column="34"/></name> <operator pos:line="712" pos:column="35">*<pos:position pos:line="712" pos:column="36"/></operator><operator pos:line="712" pos:column="36">)<pos:position pos:line="712" pos:column="37"/></operator> <call><name pos:line="712" pos:column="38">apr_pcalloc<pos:position pos:line="712" pos:column="49"/></name><argument_list pos:line="712" pos:column="49">(<argument><expr><name pos:line="712" pos:column="50">p<pos:position pos:line="712" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="712" pos:column="53">sizeof<argument_list pos:line="712" pos:column="59">(<argument><expr><name pos:line="712" pos:column="60">x_cfg<pos:position pos:line="712" pos:column="65"/></name></expr></argument>)<pos:position pos:line="712" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="712" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="712" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="713" pos:column="5">x_cfg<pos:position pos:line="713" pos:column="10"/></name> <modifier pos:line="713" pos:column="11">*<pos:position pos:line="713" pos:column="12"/></modifier></type><name pos:line="713" pos:column="12">pconf<pos:position pos:line="713" pos:column="17"/></name> <init pos:line="713" pos:column="18">= <expr><operator pos:line="713" pos:column="20">(<pos:position pos:line="713" pos:column="21"/></operator><name pos:line="713" pos:column="21">x_cfg<pos:position pos:line="713" pos:column="26"/></name> <operator pos:line="713" pos:column="27">*<pos:position pos:line="713" pos:column="28"/></operator><operator pos:line="713" pos:column="28">)<pos:position pos:line="713" pos:column="29"/></operator> <name pos:line="713" pos:column="30">parent_conf<pos:position pos:line="713" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="713" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="714" pos:column="5">x_cfg<pos:position pos:line="714" pos:column="10"/></name> <modifier pos:line="714" pos:column="11">*<pos:position pos:line="714" pos:column="12"/></modifier></type><name pos:line="714" pos:column="12">nconf<pos:position pos:line="714" pos:column="17"/></name> <init pos:line="714" pos:column="18">= <expr><operator pos:line="714" pos:column="20">(<pos:position pos:line="714" pos:column="21"/></operator><name pos:line="714" pos:column="21">x_cfg<pos:position pos:line="714" pos:column="26"/></name> <operator pos:line="714" pos:column="27">*<pos:position pos:line="714" pos:column="28"/></operator><operator pos:line="714" pos:column="28">)<pos:position pos:line="714" pos:column="29"/></operator> <name pos:line="714" pos:column="30">newloc_conf<pos:position pos:line="714" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="714" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="715" pos:column="5">char<pos:position pos:line="715" pos:column="9"/></name> <modifier pos:line="715" pos:column="10">*<pos:position pos:line="715" pos:column="11"/></modifier></type><name pos:line="715" pos:column="11">note<pos:position pos:line="715" pos:column="15"/></name></decl>;<pos:position pos:line="715" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="717" pos:column="5">/*
     * Some things get copied directly from the more-specific record, rather
     * than getting merged.
     */</comment>
    <expr_stmt><expr><name><name pos:line="721" pos:column="5">merged_config<pos:position pos:line="721" pos:column="18"/></name><operator pos:line="721" pos:column="18">-&gt;<pos:position pos:line="721" pos:column="23"/></operator><name pos:line="721" pos:column="20">local<pos:position pos:line="721" pos:column="25"/></name></name> <operator pos:line="721" pos:column="26">=<pos:position pos:line="721" pos:column="27"/></operator> <name><name pos:line="721" pos:column="28">nconf<pos:position pos:line="721" pos:column="33"/></name><operator pos:line="721" pos:column="33">-&gt;<pos:position pos:line="721" pos:column="38"/></operator><name pos:line="721" pos:column="35">local<pos:position pos:line="721" pos:column="40"/></name></name></expr>;<pos:position pos:line="721" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="722" pos:column="5">merged_config<pos:position pos:line="722" pos:column="18"/></name><operator pos:line="722" pos:column="18">-&gt;<pos:position pos:line="722" pos:column="23"/></operator><name pos:line="722" pos:column="20">loc<pos:position pos:line="722" pos:column="23"/></name></name> <operator pos:line="722" pos:column="24">=<pos:position pos:line="722" pos:column="25"/></operator> <call><name pos:line="722" pos:column="26">apr_pstrdup<pos:position pos:line="722" pos:column="37"/></name><argument_list pos:line="722" pos:column="37">(<argument><expr><name pos:line="722" pos:column="38">p<pos:position pos:line="722" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="722" pos:column="41">nconf<pos:position pos:line="722" pos:column="46"/></name><operator pos:line="722" pos:column="46">-&gt;<pos:position pos:line="722" pos:column="51"/></operator><name pos:line="722" pos:column="48">loc<pos:position pos:line="722" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="722" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="722" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="723" pos:column="5">/*
     * Others, like the setting of the `congenital' flag, get ORed in.  The
     * setting of that particular flag, for instance, is TRUE if it was ever
     * true anywhere in the upstream configuration.
     */</comment>
    <expr_stmt><expr><name><name pos:line="728" pos:column="5">merged_config<pos:position pos:line="728" pos:column="18"/></name><operator pos:line="728" pos:column="18">-&gt;<pos:position pos:line="728" pos:column="23"/></operator><name pos:line="728" pos:column="20">congenital<pos:position pos:line="728" pos:column="30"/></name></name> <operator pos:line="728" pos:column="31">=<pos:position pos:line="728" pos:column="32"/></operator> <operator pos:line="728" pos:column="33">(<pos:position pos:line="728" pos:column="34"/></operator><name><name pos:line="728" pos:column="34">pconf<pos:position pos:line="728" pos:column="39"/></name><operator pos:line="728" pos:column="39">-&gt;<pos:position pos:line="728" pos:column="44"/></operator><name pos:line="728" pos:column="41">congenital<pos:position pos:line="728" pos:column="51"/></name></name> <operator pos:line="728" pos:column="52">|<pos:position pos:line="728" pos:column="53"/></operator> <name><name pos:line="728" pos:column="54">pconf<pos:position pos:line="728" pos:column="59"/></name><operator pos:line="728" pos:column="59">-&gt;<pos:position pos:line="728" pos:column="64"/></operator><name pos:line="728" pos:column="61">local<pos:position pos:line="728" pos:column="66"/></name></name><operator pos:line="728" pos:column="66">)<pos:position pos:line="728" pos:column="67"/></operator></expr>;<pos:position pos:line="728" pos:column="68"/></expr_stmt>
    <comment type="block" pos:line="729" pos:column="5">/*
     * If we're merging records for two different types of environment (server
     * and directory), mark the new record appropriately.  Otherwise, inherit
     * the current value.
     */</comment>
    <expr_stmt><expr><name><name pos:line="734" pos:column="5">merged_config<pos:position pos:line="734" pos:column="18"/></name><operator pos:line="734" pos:column="18">-&gt;<pos:position pos:line="734" pos:column="23"/></operator><name pos:line="734" pos:column="20">cmode<pos:position pos:line="734" pos:column="25"/></name></name> <operator pos:line="734" pos:column="26">=<pos:position pos:line="734" pos:column="27"/></operator>
        <ternary><condition><expr><operator pos:line="735" pos:column="9">(<pos:position pos:line="735" pos:column="10"/></operator><name><name pos:line="735" pos:column="10">pconf<pos:position pos:line="735" pos:column="15"/></name><operator pos:line="735" pos:column="15">-&gt;<pos:position pos:line="735" pos:column="20"/></operator><name pos:line="735" pos:column="17">cmode<pos:position pos:line="735" pos:column="22"/></name></name> <operator pos:line="735" pos:column="23">==<pos:position pos:line="735" pos:column="25"/></operator> <name><name pos:line="735" pos:column="26">nconf<pos:position pos:line="735" pos:column="31"/></name><operator pos:line="735" pos:column="31">-&gt;<pos:position pos:line="735" pos:column="36"/></operator><name pos:line="735" pos:column="33">cmode<pos:position pos:line="735" pos:column="38"/></name></name><operator pos:line="735" pos:column="38">)<pos:position pos:line="735" pos:column="39"/></operator></expr> ?<pos:position pos:line="735" pos:column="41"/></condition><then pos:line="735" pos:column="41"> <expr><name><name pos:line="735" pos:column="42">pconf<pos:position pos:line="735" pos:column="47"/></name><operator pos:line="735" pos:column="47">-&gt;<pos:position pos:line="735" pos:column="52"/></operator><name pos:line="735" pos:column="49">cmode<pos:position pos:line="735" pos:column="54"/></name></name></expr> <pos:position pos:line="735" pos:column="55"/></then><else pos:line="735" pos:column="55">: <expr><name pos:line="735" pos:column="57">CONFIG_MODE_COMBO<pos:position pos:line="735" pos:column="74"/></name></expr></else></ternary></expr>;<pos:position pos:line="735" pos:column="75"/></expr_stmt>
    <comment type="block" pos:line="736" pos:column="5">/*
     * Now just record our being called in the trace list.  Include the
     * locations we were asked to merge.
     */</comment>
    <expr_stmt><expr><name pos:line="740" pos:column="5">note<pos:position pos:line="740" pos:column="9"/></name> <operator pos:line="740" pos:column="10">=<pos:position pos:line="740" pos:column="11"/></operator> <call><name pos:line="740" pos:column="12">apr_pstrcat<pos:position pos:line="740" pos:column="23"/></name><argument_list pos:line="740" pos:column="23">(<argument><expr><name pos:line="740" pos:column="24">p<pos:position pos:line="740" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="740" pos:column="27">"x_merge_dir_config(\""<pos:position pos:line="740" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="740" pos:column="52">pconf<pos:position pos:line="740" pos:column="57"/></name><operator pos:line="740" pos:column="57">-&gt;<pos:position pos:line="740" pos:column="62"/></operator><name pos:line="740" pos:column="59">loc<pos:position pos:line="740" pos:column="62"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="740" pos:column="64">"\",\""<pos:position pos:line="740" pos:column="71"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="741" pos:column="20">nconf<pos:position pos:line="741" pos:column="25"/></name><operator pos:line="741" pos:column="25">-&gt;<pos:position pos:line="741" pos:column="30"/></operator><name pos:line="741" pos:column="27">loc<pos:position pos:line="741" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="741" pos:column="32">"\")"<pos:position pos:line="741" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="741" pos:column="39">NULL<pos:position pos:line="741" pos:column="43"/></name></expr></argument>)<pos:position pos:line="741" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="741" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="742" pos:column="5">trace_add<pos:position pos:line="742" pos:column="14"/></name><argument_list pos:line="742" pos:column="14">(<argument><expr><name pos:line="742" pos:column="15">NULL<pos:position pos:line="742" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="742" pos:column="21">NULL<pos:position pos:line="742" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="742" pos:column="27">merged_config<pos:position pos:line="742" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="742" pos:column="42">note<pos:position pos:line="742" pos:column="46"/></name></expr></argument>)<pos:position pos:line="742" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="742" pos:column="48"/></expr_stmt>
    <return pos:line="743" pos:column="5">return <expr><operator pos:line="743" pos:column="12">(<pos:position pos:line="743" pos:column="13"/></operator><name pos:line="743" pos:column="13">void<pos:position pos:line="743" pos:column="17"/></name> <operator pos:line="743" pos:column="18">*<pos:position pos:line="743" pos:column="19"/></operator><operator pos:line="743" pos:column="19">)<pos:position pos:line="743" pos:column="20"/></operator> <name pos:line="743" pos:column="21">merged_config<pos:position pos:line="743" pos:column="34"/></name></expr>;<pos:position pos:line="743" pos:column="35"/></return>
}<pos:position pos:line="744" pos:column="2"/></block></function>

<comment type="block" pos:line="746" pos:column="1">/*
 * This function gets called to create a per-server configuration
 * record.  It will always be called for the "default" server.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */</comment>
<function><specifier pos:line="753" pos:column="1">static<pos:position pos:line="753" pos:column="7"/></specifier> <type><name pos:line="753" pos:column="8">void<pos:position pos:line="753" pos:column="12"/></name> <modifier pos:line="753" pos:column="13">*<pos:position pos:line="753" pos:column="14"/></modifier></type><name pos:line="753" pos:column="14">x_create_server_config<pos:position pos:line="753" pos:column="36"/></name><parameter_list pos:line="753" pos:column="36">(<parameter><decl><type><name pos:line="753" pos:column="37">apr_pool_t<pos:position pos:line="753" pos:column="47"/></name> <modifier pos:line="753" pos:column="48">*<pos:position pos:line="753" pos:column="49"/></modifier></type><name pos:line="753" pos:column="49">p<pos:position pos:line="753" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="753" pos:column="52">server_rec<pos:position pos:line="753" pos:column="62"/></name> <modifier pos:line="753" pos:column="63">*<pos:position pos:line="753" pos:column="64"/></modifier></type><name pos:line="753" pos:column="64">s<pos:position pos:line="753" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="753" pos:column="66"/></parameter_list>
<block pos:line="754" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="756" pos:column="5">x_cfg<pos:position pos:line="756" pos:column="10"/></name> <modifier pos:line="756" pos:column="11">*<pos:position pos:line="756" pos:column="12"/></modifier></type><name pos:line="756" pos:column="12">cfg<pos:position pos:line="756" pos:column="15"/></name></decl>;<pos:position pos:line="756" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="757" pos:column="5">char<pos:position pos:line="757" pos:column="9"/></name> <modifier pos:line="757" pos:column="10">*<pos:position pos:line="757" pos:column="11"/></modifier></type><name pos:line="757" pos:column="11">sname<pos:position pos:line="757" pos:column="16"/></name> <init pos:line="757" pos:column="17">= <expr><name><name pos:line="757" pos:column="19">s<pos:position pos:line="757" pos:column="20"/></name><operator pos:line="757" pos:column="20">-&gt;<pos:position pos:line="757" pos:column="25"/></operator><name pos:line="757" pos:column="22">server_hostname<pos:position pos:line="757" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="757" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="759" pos:column="5">/*
     * As with the x_create_dir_config() reoutine, we allocate and fill
     * in an empty record.
     */</comment>
    <expr_stmt><expr><name pos:line="763" pos:column="5">cfg<pos:position pos:line="763" pos:column="8"/></name> <operator pos:line="763" pos:column="9">=<pos:position pos:line="763" pos:column="10"/></operator> <operator pos:line="763" pos:column="11">(<pos:position pos:line="763" pos:column="12"/></operator><name pos:line="763" pos:column="12">x_cfg<pos:position pos:line="763" pos:column="17"/></name> <operator pos:line="763" pos:column="18">*<pos:position pos:line="763" pos:column="19"/></operator><operator pos:line="763" pos:column="19">)<pos:position pos:line="763" pos:column="20"/></operator> <call><name pos:line="763" pos:column="21">apr_pcalloc<pos:position pos:line="763" pos:column="32"/></name><argument_list pos:line="763" pos:column="32">(<argument><expr><name pos:line="763" pos:column="33">p<pos:position pos:line="763" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="763" pos:column="36">sizeof<argument_list pos:line="763" pos:column="42">(<argument><expr><name pos:line="763" pos:column="43">x_cfg<pos:position pos:line="763" pos:column="48"/></name></expr></argument>)<pos:position pos:line="763" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="763" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="763" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="764" pos:column="5">cfg<pos:position pos:line="764" pos:column="8"/></name><operator pos:line="764" pos:column="8">-&gt;<pos:position pos:line="764" pos:column="13"/></operator><name pos:line="764" pos:column="10">local<pos:position pos:line="764" pos:column="15"/></name></name> <operator pos:line="764" pos:column="16">=<pos:position pos:line="764" pos:column="17"/></operator> <literal type="number" pos:line="764" pos:column="18">0<pos:position pos:line="764" pos:column="19"/></literal></expr>;<pos:position pos:line="764" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="765" pos:column="5">cfg<pos:position pos:line="765" pos:column="8"/></name><operator pos:line="765" pos:column="8">-&gt;<pos:position pos:line="765" pos:column="13"/></operator><name pos:line="765" pos:column="10">congenital<pos:position pos:line="765" pos:column="20"/></name></name> <operator pos:line="765" pos:column="21">=<pos:position pos:line="765" pos:column="22"/></operator> <literal type="number" pos:line="765" pos:column="23">0<pos:position pos:line="765" pos:column="24"/></literal></expr>;<pos:position pos:line="765" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="766" pos:column="5">cfg<pos:position pos:line="766" pos:column="8"/></name><operator pos:line="766" pos:column="8">-&gt;<pos:position pos:line="766" pos:column="13"/></operator><name pos:line="766" pos:column="10">cmode<pos:position pos:line="766" pos:column="15"/></name></name> <operator pos:line="766" pos:column="16">=<pos:position pos:line="766" pos:column="17"/></operator> <name pos:line="766" pos:column="18">CONFIG_MODE_SERVER<pos:position pos:line="766" pos:column="36"/></name></expr>;<pos:position pos:line="766" pos:column="37"/></expr_stmt>
    <comment type="block" pos:line="767" pos:column="5">/*
     * Note that we were called in the trace list.
     */</comment>
    <expr_stmt><expr><name pos:line="770" pos:column="5">sname<pos:position pos:line="770" pos:column="10"/></name> <operator pos:line="770" pos:column="11">=<pos:position pos:line="770" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="770" pos:column="13">(<pos:position pos:line="770" pos:column="14"/></operator><name pos:line="770" pos:column="14">sname<pos:position pos:line="770" pos:column="19"/></name> <operator pos:line="770" pos:column="20">!=<pos:position pos:line="770" pos:column="22"/></operator> <name pos:line="770" pos:column="23">NULL<pos:position pos:line="770" pos:column="27"/></name><operator pos:line="770" pos:column="27">)<pos:position pos:line="770" pos:column="28"/></operator></expr> ?<pos:position pos:line="770" pos:column="30"/></condition><then pos:line="770" pos:column="30"> <expr><name pos:line="770" pos:column="31">sname<pos:position pos:line="770" pos:column="36"/></name></expr> <pos:position pos:line="770" pos:column="37"/></then><else pos:line="770" pos:column="37">: <expr><literal type="string" pos:line="770" pos:column="39">""<pos:position pos:line="770" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="770" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="771" pos:column="5">cfg<pos:position pos:line="771" pos:column="8"/></name><operator pos:line="771" pos:column="8">-&gt;<pos:position pos:line="771" pos:column="13"/></operator><name pos:line="771" pos:column="10">loc<pos:position pos:line="771" pos:column="13"/></name></name> <operator pos:line="771" pos:column="14">=<pos:position pos:line="771" pos:column="15"/></operator> <call><name pos:line="771" pos:column="16">apr_pstrcat<pos:position pos:line="771" pos:column="27"/></name><argument_list pos:line="771" pos:column="27">(<argument><expr><name pos:line="771" pos:column="28">p<pos:position pos:line="771" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="771" pos:column="31">"SVR("<pos:position pos:line="771" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="771" pos:column="39">sname<pos:position pos:line="771" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="771" pos:column="46">")"<pos:position pos:line="771" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="771" pos:column="51">NULL<pos:position pos:line="771" pos:column="55"/></name></expr></argument>)<pos:position pos:line="771" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="771" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="772" pos:column="5">trace_add<pos:position pos:line="772" pos:column="14"/></name><argument_list pos:line="772" pos:column="14">(<argument><expr><name pos:line="772" pos:column="15">s<pos:position pos:line="772" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="772" pos:column="18">NULL<pos:position pos:line="772" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="772" pos:column="24">cfg<pos:position pos:line="772" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="772" pos:column="29">"x_create_server_config()"<pos:position pos:line="772" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="772" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="772" pos:column="57"/></expr_stmt>
    <return pos:line="773" pos:column="5">return <expr><operator pos:line="773" pos:column="12">(<pos:position pos:line="773" pos:column="13"/></operator><name pos:line="773" pos:column="13">void<pos:position pos:line="773" pos:column="17"/></name> <operator pos:line="773" pos:column="18">*<pos:position pos:line="773" pos:column="19"/></operator><operator pos:line="773" pos:column="19">)<pos:position pos:line="773" pos:column="20"/></operator> <name pos:line="773" pos:column="21">cfg<pos:position pos:line="773" pos:column="24"/></name></expr>;<pos:position pos:line="773" pos:column="25"/></return>
}<pos:position pos:line="774" pos:column="2"/></block></function>

<comment type="block" pos:line="776" pos:column="1">/*
 * This function gets called to merge two per-server configuration
 * records.  This is typically done to cope with things like virtual hosts and
 * the default server configuration  The routine has the responsibility of
 * creating a new record and merging the contents of the other two into it
 * appropriately.  If the module doesn't declare a merge routine, the more
 * specific existing record is used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */</comment>
<function><specifier pos:line="789" pos:column="1">static<pos:position pos:line="789" pos:column="7"/></specifier> <type><name pos:line="789" pos:column="8">void<pos:position pos:line="789" pos:column="12"/></name> <modifier pos:line="789" pos:column="13">*<pos:position pos:line="789" pos:column="14"/></modifier></type><name pos:line="789" pos:column="14">x_merge_server_config<pos:position pos:line="789" pos:column="35"/></name><parameter_list pos:line="789" pos:column="35">(<parameter><decl><type><name pos:line="789" pos:column="36">apr_pool_t<pos:position pos:line="789" pos:column="46"/></name> <modifier pos:line="789" pos:column="47">*<pos:position pos:line="789" pos:column="48"/></modifier></type><name pos:line="789" pos:column="48">p<pos:position pos:line="789" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="789" pos:column="51">void<pos:position pos:line="789" pos:column="55"/></name> <modifier pos:line="789" pos:column="56">*<pos:position pos:line="789" pos:column="57"/></modifier></type><name pos:line="789" pos:column="57">server1_conf<pos:position pos:line="789" pos:column="69"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="790" pos:column="42">void<pos:position pos:line="790" pos:column="46"/></name> <modifier pos:line="790" pos:column="47">*<pos:position pos:line="790" pos:column="48"/></modifier></type><name pos:line="790" pos:column="48">server2_conf<pos:position pos:line="790" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="790" pos:column="61"/></parameter_list>
<block pos:line="791" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="793" pos:column="5">x_cfg<pos:position pos:line="793" pos:column="10"/></name> <modifier pos:line="793" pos:column="11">*<pos:position pos:line="793" pos:column="12"/></modifier></type><name pos:line="793" pos:column="12">merged_config<pos:position pos:line="793" pos:column="25"/></name> <init pos:line="793" pos:column="26">= <expr><operator pos:line="793" pos:column="28">(<pos:position pos:line="793" pos:column="29"/></operator><name pos:line="793" pos:column="29">x_cfg<pos:position pos:line="793" pos:column="34"/></name> <operator pos:line="793" pos:column="35">*<pos:position pos:line="793" pos:column="36"/></operator><operator pos:line="793" pos:column="36">)<pos:position pos:line="793" pos:column="37"/></operator> <call><name pos:line="793" pos:column="38">apr_pcalloc<pos:position pos:line="793" pos:column="49"/></name><argument_list pos:line="793" pos:column="49">(<argument><expr><name pos:line="793" pos:column="50">p<pos:position pos:line="793" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="793" pos:column="53">sizeof<argument_list pos:line="793" pos:column="59">(<argument><expr><name pos:line="793" pos:column="60">x_cfg<pos:position pos:line="793" pos:column="65"/></name></expr></argument>)<pos:position pos:line="793" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="793" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="793" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="794" pos:column="5">x_cfg<pos:position pos:line="794" pos:column="10"/></name> <modifier pos:line="794" pos:column="11">*<pos:position pos:line="794" pos:column="12"/></modifier></type><name pos:line="794" pos:column="12">s1conf<pos:position pos:line="794" pos:column="18"/></name> <init pos:line="794" pos:column="19">= <expr><operator pos:line="794" pos:column="21">(<pos:position pos:line="794" pos:column="22"/></operator><name pos:line="794" pos:column="22">x_cfg<pos:position pos:line="794" pos:column="27"/></name> <operator pos:line="794" pos:column="28">*<pos:position pos:line="794" pos:column="29"/></operator><operator pos:line="794" pos:column="29">)<pos:position pos:line="794" pos:column="30"/></operator> <name pos:line="794" pos:column="31">server1_conf<pos:position pos:line="794" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="794" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="795" pos:column="5">x_cfg<pos:position pos:line="795" pos:column="10"/></name> <modifier pos:line="795" pos:column="11">*<pos:position pos:line="795" pos:column="12"/></modifier></type><name pos:line="795" pos:column="12">s2conf<pos:position pos:line="795" pos:column="18"/></name> <init pos:line="795" pos:column="19">= <expr><operator pos:line="795" pos:column="21">(<pos:position pos:line="795" pos:column="22"/></operator><name pos:line="795" pos:column="22">x_cfg<pos:position pos:line="795" pos:column="27"/></name> <operator pos:line="795" pos:column="28">*<pos:position pos:line="795" pos:column="29"/></operator><operator pos:line="795" pos:column="29">)<pos:position pos:line="795" pos:column="30"/></operator> <name pos:line="795" pos:column="31">server2_conf<pos:position pos:line="795" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="795" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="796" pos:column="5">char<pos:position pos:line="796" pos:column="9"/></name> <modifier pos:line="796" pos:column="10">*<pos:position pos:line="796" pos:column="11"/></modifier></type><name pos:line="796" pos:column="11">note<pos:position pos:line="796" pos:column="15"/></name></decl>;<pos:position pos:line="796" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="798" pos:column="5">/*
     * Our inheritance rules are our own, and part of our module's semantics.
     * Basically, just note whence we came.
     */</comment>
    <expr_stmt><expr><name><name pos:line="802" pos:column="5">merged_config<pos:position pos:line="802" pos:column="18"/></name><operator pos:line="802" pos:column="18">-&gt;<pos:position pos:line="802" pos:column="23"/></operator><name pos:line="802" pos:column="20">cmode<pos:position pos:line="802" pos:column="25"/></name></name> <operator pos:line="802" pos:column="26">=<pos:position pos:line="802" pos:column="27"/></operator>
        <ternary><condition><expr><operator pos:line="803" pos:column="9">(<pos:position pos:line="803" pos:column="10"/></operator><name><name pos:line="803" pos:column="10">s1conf<pos:position pos:line="803" pos:column="16"/></name><operator pos:line="803" pos:column="16">-&gt;<pos:position pos:line="803" pos:column="21"/></operator><name pos:line="803" pos:column="18">cmode<pos:position pos:line="803" pos:column="23"/></name></name> <operator pos:line="803" pos:column="24">==<pos:position pos:line="803" pos:column="26"/></operator> <name><name pos:line="803" pos:column="27">s2conf<pos:position pos:line="803" pos:column="33"/></name><operator pos:line="803" pos:column="33">-&gt;<pos:position pos:line="803" pos:column="38"/></operator><name pos:line="803" pos:column="35">cmode<pos:position pos:line="803" pos:column="40"/></name></name><operator pos:line="803" pos:column="40">)<pos:position pos:line="803" pos:column="41"/></operator></expr> ?<pos:position pos:line="803" pos:column="43"/></condition><then pos:line="803" pos:column="43"> <expr><name><name pos:line="803" pos:column="44">s1conf<pos:position pos:line="803" pos:column="50"/></name><operator pos:line="803" pos:column="50">-&gt;<pos:position pos:line="803" pos:column="55"/></operator><name pos:line="803" pos:column="52">cmode<pos:position pos:line="803" pos:column="57"/></name></name></expr> <pos:position pos:line="803" pos:column="58"/></then><else pos:line="803" pos:column="58">: <expr><name pos:line="803" pos:column="60">CONFIG_MODE_COMBO<pos:position pos:line="803" pos:column="77"/></name></expr></else></ternary></expr>;<pos:position pos:line="803" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="804" pos:column="5">merged_config<pos:position pos:line="804" pos:column="18"/></name><operator pos:line="804" pos:column="18">-&gt;<pos:position pos:line="804" pos:column="23"/></operator><name pos:line="804" pos:column="20">local<pos:position pos:line="804" pos:column="25"/></name></name> <operator pos:line="804" pos:column="26">=<pos:position pos:line="804" pos:column="27"/></operator> <name><name pos:line="804" pos:column="28">s2conf<pos:position pos:line="804" pos:column="34"/></name><operator pos:line="804" pos:column="34">-&gt;<pos:position pos:line="804" pos:column="39"/></operator><name pos:line="804" pos:column="36">local<pos:position pos:line="804" pos:column="41"/></name></name></expr>;<pos:position pos:line="804" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="805" pos:column="5">merged_config<pos:position pos:line="805" pos:column="18"/></name><operator pos:line="805" pos:column="18">-&gt;<pos:position pos:line="805" pos:column="23"/></operator><name pos:line="805" pos:column="20">congenital<pos:position pos:line="805" pos:column="30"/></name></name> <operator pos:line="805" pos:column="31">=<pos:position pos:line="805" pos:column="32"/></operator> <operator pos:line="805" pos:column="33">(<pos:position pos:line="805" pos:column="34"/></operator><name><name pos:line="805" pos:column="34">s1conf<pos:position pos:line="805" pos:column="40"/></name><operator pos:line="805" pos:column="40">-&gt;<pos:position pos:line="805" pos:column="45"/></operator><name pos:line="805" pos:column="42">congenital<pos:position pos:line="805" pos:column="52"/></name></name> <operator pos:line="805" pos:column="53">|<pos:position pos:line="805" pos:column="54"/></operator> <name><name pos:line="805" pos:column="55">s1conf<pos:position pos:line="805" pos:column="61"/></name><operator pos:line="805" pos:column="61">-&gt;<pos:position pos:line="805" pos:column="66"/></operator><name pos:line="805" pos:column="63">local<pos:position pos:line="805" pos:column="68"/></name></name><operator pos:line="805" pos:column="68">)<pos:position pos:line="805" pos:column="69"/></operator></expr>;<pos:position pos:line="805" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="806" pos:column="5">merged_config<pos:position pos:line="806" pos:column="18"/></name><operator pos:line="806" pos:column="18">-&gt;<pos:position pos:line="806" pos:column="23"/></operator><name pos:line="806" pos:column="20">loc<pos:position pos:line="806" pos:column="23"/></name></name> <operator pos:line="806" pos:column="24">=<pos:position pos:line="806" pos:column="25"/></operator> <call><name pos:line="806" pos:column="26">apr_pstrdup<pos:position pos:line="806" pos:column="37"/></name><argument_list pos:line="806" pos:column="37">(<argument><expr><name pos:line="806" pos:column="38">p<pos:position pos:line="806" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="806" pos:column="41">s2conf<pos:position pos:line="806" pos:column="47"/></name><operator pos:line="806" pos:column="47">-&gt;<pos:position pos:line="806" pos:column="52"/></operator><name pos:line="806" pos:column="49">loc<pos:position pos:line="806" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="806" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="806" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="807" pos:column="5">/*
     * Trace our call, including what we were asked to merge.
     */</comment>
    <expr_stmt><expr><name pos:line="810" pos:column="5">note<pos:position pos:line="810" pos:column="9"/></name> <operator pos:line="810" pos:column="10">=<pos:position pos:line="810" pos:column="11"/></operator> <call><name pos:line="810" pos:column="12">apr_pstrcat<pos:position pos:line="810" pos:column="23"/></name><argument_list pos:line="810" pos:column="23">(<argument><expr><name pos:line="810" pos:column="24">p<pos:position pos:line="810" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="810" pos:column="27">"x_merge_server_config(\""<pos:position pos:line="810" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="810" pos:column="55">s1conf<pos:position pos:line="810" pos:column="61"/></name><operator pos:line="810" pos:column="61">-&gt;<pos:position pos:line="810" pos:column="66"/></operator><name pos:line="810" pos:column="63">loc<pos:position pos:line="810" pos:column="66"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="810" pos:column="68">"\",\""<pos:position pos:line="810" pos:column="75"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="811" pos:column="20">s2conf<pos:position pos:line="811" pos:column="26"/></name><operator pos:line="811" pos:column="26">-&gt;<pos:position pos:line="811" pos:column="31"/></operator><name pos:line="811" pos:column="28">loc<pos:position pos:line="811" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="811" pos:column="33">"\")"<pos:position pos:line="811" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="811" pos:column="40">NULL<pos:position pos:line="811" pos:column="44"/></name></expr></argument>)<pos:position pos:line="811" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="811" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="812" pos:column="5">trace_add<pos:position pos:line="812" pos:column="14"/></name><argument_list pos:line="812" pos:column="14">(<argument><expr><name pos:line="812" pos:column="15">NULL<pos:position pos:line="812" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="21">NULL<pos:position pos:line="812" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="27">merged_config<pos:position pos:line="812" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="42">note<pos:position pos:line="812" pos:column="46"/></name></expr></argument>)<pos:position pos:line="812" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="812" pos:column="48"/></expr_stmt>
    <return pos:line="813" pos:column="5">return <expr><operator pos:line="813" pos:column="12">(<pos:position pos:line="813" pos:column="13"/></operator><name pos:line="813" pos:column="13">void<pos:position pos:line="813" pos:column="17"/></name> <operator pos:line="813" pos:column="18">*<pos:position pos:line="813" pos:column="19"/></operator><operator pos:line="813" pos:column="19">)<pos:position pos:line="813" pos:column="20"/></operator> <name pos:line="813" pos:column="21">merged_config<pos:position pos:line="813" pos:column="34"/></name></expr>;<pos:position pos:line="813" pos:column="35"/></return>
}<pos:position pos:line="814" pos:column="2"/></block></function>

<comment type="block" pos:line="816" pos:column="1">/*
 * This routine is called before the server processes the configuration
 * files.  There is no return value.
 */</comment>
<function><specifier pos:line="820" pos:column="1">static<pos:position pos:line="820" pos:column="7"/></specifier> <type><name pos:line="820" pos:column="8">int<pos:position pos:line="820" pos:column="11"/></name></type> <name pos:line="820" pos:column="12">x_pre_config<pos:position pos:line="820" pos:column="24"/></name><parameter_list pos:line="820" pos:column="24">(<parameter><decl><type><name pos:line="820" pos:column="25">apr_pool_t<pos:position pos:line="820" pos:column="35"/></name> <modifier pos:line="820" pos:column="36">*<pos:position pos:line="820" pos:column="37"/></modifier></type><name pos:line="820" pos:column="37">pconf<pos:position pos:line="820" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="820" pos:column="44">apr_pool_t<pos:position pos:line="820" pos:column="54"/></name> <modifier pos:line="820" pos:column="55">*<pos:position pos:line="820" pos:column="56"/></modifier></type><name pos:line="820" pos:column="56">plog<pos:position pos:line="820" pos:column="60"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="821" pos:column="25">apr_pool_t<pos:position pos:line="821" pos:column="35"/></name> <modifier pos:line="821" pos:column="36">*<pos:position pos:line="821" pos:column="37"/></modifier></type><name pos:line="821" pos:column="37">ptemp<pos:position pos:line="821" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="821" pos:column="43"/></parameter_list>
<block pos:line="822" pos:column="1">{
    <comment type="block" pos:line="823" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="826" pos:column="5">trace_add<pos:position pos:line="826" pos:column="14"/></name><argument_list pos:line="826" pos:column="14">(<argument><expr><name pos:line="826" pos:column="15">NULL<pos:position pos:line="826" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="826" pos:column="21">NULL<pos:position pos:line="826" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="826" pos:column="27">NULL<pos:position pos:line="826" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="826" pos:column="33">"x_pre_config()"<pos:position pos:line="826" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="826" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="826" pos:column="51"/></expr_stmt>

    <return pos:line="828" pos:column="5">return <expr><name pos:line="828" pos:column="12">OK<pos:position pos:line="828" pos:column="14"/></name></expr>;<pos:position pos:line="828" pos:column="15"/></return>
}<pos:position pos:line="829" pos:column="2"/></block></function>

<comment type="block" pos:line="831" pos:column="1">/*
 * This routine is called to perform any module-specific fixing of header
 * fields, et cetera.  It is invoked just before any content-handler.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="839" pos:column="1">static<pos:position pos:line="839" pos:column="7"/></specifier> <type><name pos:line="839" pos:column="8">int<pos:position pos:line="839" pos:column="11"/></name></type> <name pos:line="839" pos:column="12">x_post_config<pos:position pos:line="839" pos:column="25"/></name><parameter_list pos:line="839" pos:column="25">(<parameter><decl><type><name pos:line="839" pos:column="26">apr_pool_t<pos:position pos:line="839" pos:column="36"/></name> <modifier pos:line="839" pos:column="37">*<pos:position pos:line="839" pos:column="38"/></modifier></type><name pos:line="839" pos:column="38">pconf<pos:position pos:line="839" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="839" pos:column="45">apr_pool_t<pos:position pos:line="839" pos:column="55"/></name> <modifier pos:line="839" pos:column="56">*<pos:position pos:line="839" pos:column="57"/></modifier></type><name pos:line="839" pos:column="57">plog<pos:position pos:line="839" pos:column="61"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="840" pos:column="27">apr_pool_t<pos:position pos:line="840" pos:column="37"/></name> <modifier pos:line="840" pos:column="38">*<pos:position pos:line="840" pos:column="39"/></modifier></type><name pos:line="840" pos:column="39">ptemp<pos:position pos:line="840" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="840" pos:column="46">server_rec<pos:position pos:line="840" pos:column="56"/></name> <modifier pos:line="840" pos:column="57">*<pos:position pos:line="840" pos:column="58"/></modifier></type><name pos:line="840" pos:column="58">s<pos:position pos:line="840" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="840" pos:column="60"/></parameter_list>
<block pos:line="841" pos:column="1">{
    <comment type="block" pos:line="842" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="845" pos:column="5">trace_add<pos:position pos:line="845" pos:column="14"/></name><argument_list pos:line="845" pos:column="14">(<argument><expr><name pos:line="845" pos:column="15">NULL<pos:position pos:line="845" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="845" pos:column="21">NULL<pos:position pos:line="845" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="845" pos:column="27">NULL<pos:position pos:line="845" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="845" pos:column="33">"x_post_config()"<pos:position pos:line="845" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="845" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="845" pos:column="52"/></expr_stmt>
    <return pos:line="846" pos:column="5">return <expr><name pos:line="846" pos:column="12">OK<pos:position pos:line="846" pos:column="14"/></name></expr>;<pos:position pos:line="846" pos:column="15"/></return>
}<pos:position pos:line="847" pos:column="2"/></block></function>

<comment type="block" pos:line="849" pos:column="1">/*
 * This routine is called to perform any module-specific log file
 * openings. It is invoked just before the post_config phase
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="857" pos:column="1">static<pos:position pos:line="857" pos:column="7"/></specifier> <type><name pos:line="857" pos:column="8">int<pos:position pos:line="857" pos:column="11"/></name></type> <name pos:line="857" pos:column="12">x_open_logs<pos:position pos:line="857" pos:column="23"/></name><parameter_list pos:line="857" pos:column="23">(<parameter><decl><type><name pos:line="857" pos:column="24">apr_pool_t<pos:position pos:line="857" pos:column="34"/></name> <modifier pos:line="857" pos:column="35">*<pos:position pos:line="857" pos:column="36"/></modifier></type><name pos:line="857" pos:column="36">pconf<pos:position pos:line="857" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="857" pos:column="43">apr_pool_t<pos:position pos:line="857" pos:column="53"/></name> <modifier pos:line="857" pos:column="54">*<pos:position pos:line="857" pos:column="55"/></modifier></type><name pos:line="857" pos:column="55">plog<pos:position pos:line="857" pos:column="59"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="858" pos:column="25">apr_pool_t<pos:position pos:line="858" pos:column="35"/></name> <modifier pos:line="858" pos:column="36">*<pos:position pos:line="858" pos:column="37"/></modifier></type><name pos:line="858" pos:column="37">ptemp<pos:position pos:line="858" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="858" pos:column="44">server_rec<pos:position pos:line="858" pos:column="54"/></name> <modifier pos:line="858" pos:column="55">*<pos:position pos:line="858" pos:column="56"/></modifier></type><name pos:line="858" pos:column="56">s<pos:position pos:line="858" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="858" pos:column="58"/></parameter_list>
<block pos:line="859" pos:column="1">{
    <comment type="block" pos:line="860" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="863" pos:column="5">trace_add<pos:position pos:line="863" pos:column="14"/></name><argument_list pos:line="863" pos:column="14">(<argument><expr><name pos:line="863" pos:column="15">s<pos:position pos:line="863" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="863" pos:column="18">NULL<pos:position pos:line="863" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="863" pos:column="24">NULL<pos:position pos:line="863" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="863" pos:column="30">"x_open_logs()"<pos:position pos:line="863" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="863" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="863" pos:column="47"/></expr_stmt>
    <return pos:line="864" pos:column="5">return <expr><name pos:line="864" pos:column="12">OK<pos:position pos:line="864" pos:column="14"/></name></expr>;<pos:position pos:line="864" pos:column="15"/></return>
}<pos:position pos:line="865" pos:column="2"/></block></function>

<comment type="block" pos:line="867" pos:column="1">/*
 * All our process-death routine does is add its trace to the log.
 */</comment>
<function><specifier pos:line="870" pos:column="1">static<pos:position pos:line="870" pos:column="7"/></specifier> <type><name pos:line="870" pos:column="8">apr_status_t<pos:position pos:line="870" pos:column="20"/></name></type> <name pos:line="870" pos:column="21">x_child_exit<pos:position pos:line="870" pos:column="33"/></name><parameter_list pos:line="870" pos:column="33">(<parameter><decl><type><name pos:line="870" pos:column="34">void<pos:position pos:line="870" pos:column="38"/></name> <modifier pos:line="870" pos:column="39">*<pos:position pos:line="870" pos:column="40"/></modifier></type><name pos:line="870" pos:column="40">data<pos:position pos:line="870" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="870" pos:column="45"/></parameter_list>
<block pos:line="871" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="872" pos:column="5">char<pos:position pos:line="872" pos:column="9"/></name> <modifier pos:line="872" pos:column="10">*<pos:position pos:line="872" pos:column="11"/></modifier></type><name pos:line="872" pos:column="11">note<pos:position pos:line="872" pos:column="15"/></name></decl>;<pos:position pos:line="872" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="873" pos:column="5">server_rec<pos:position pos:line="873" pos:column="15"/></name> <modifier pos:line="873" pos:column="16">*<pos:position pos:line="873" pos:column="17"/></modifier></type><name pos:line="873" pos:column="17">s<pos:position pos:line="873" pos:column="18"/></name> <init pos:line="873" pos:column="19">= <expr><name pos:line="873" pos:column="21">data<pos:position pos:line="873" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="873" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="874" pos:column="5">char<pos:position pos:line="874" pos:column="9"/></name> <modifier pos:line="874" pos:column="10">*<pos:position pos:line="874" pos:column="11"/></modifier></type><name pos:line="874" pos:column="11">sname<pos:position pos:line="874" pos:column="16"/></name> <init pos:line="874" pos:column="17">= <expr><name><name pos:line="874" pos:column="19">s<pos:position pos:line="874" pos:column="20"/></name><operator pos:line="874" pos:column="20">-&gt;<pos:position pos:line="874" pos:column="25"/></operator><name pos:line="874" pos:column="22">server_hostname<pos:position pos:line="874" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="874" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="876" pos:column="5">/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */</comment>
    <expr_stmt><expr><name pos:line="880" pos:column="5">sname<pos:position pos:line="880" pos:column="10"/></name> <operator pos:line="880" pos:column="11">=<pos:position pos:line="880" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="880" pos:column="13">(<pos:position pos:line="880" pos:column="14"/></operator><name pos:line="880" pos:column="14">sname<pos:position pos:line="880" pos:column="19"/></name> <operator pos:line="880" pos:column="20">!=<pos:position pos:line="880" pos:column="22"/></operator> <name pos:line="880" pos:column="23">NULL<pos:position pos:line="880" pos:column="27"/></name><operator pos:line="880" pos:column="27">)<pos:position pos:line="880" pos:column="28"/></operator></expr> ?<pos:position pos:line="880" pos:column="30"/></condition><then pos:line="880" pos:column="30"> <expr><name pos:line="880" pos:column="31">sname<pos:position pos:line="880" pos:column="36"/></name></expr> <pos:position pos:line="880" pos:column="37"/></then><else pos:line="880" pos:column="37">: <expr><literal type="string" pos:line="880" pos:column="39">""<pos:position pos:line="880" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="880" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="881" pos:column="5">note<pos:position pos:line="881" pos:column="9"/></name> <operator pos:line="881" pos:column="10">=<pos:position pos:line="881" pos:column="11"/></operator> <call><name pos:line="881" pos:column="12">apr_pstrcat<pos:position pos:line="881" pos:column="23"/></name><argument_list pos:line="881" pos:column="23">(<argument><expr><name><name pos:line="881" pos:column="24">s<pos:position pos:line="881" pos:column="25"/></name><operator pos:line="881" pos:column="25">-&gt;<pos:position pos:line="881" pos:column="30"/></operator><name pos:line="881" pos:column="27">process<pos:position pos:line="881" pos:column="34"/></name><operator pos:line="881" pos:column="34">-&gt;<pos:position pos:line="881" pos:column="39"/></operator><name pos:line="881" pos:column="36">pool<pos:position pos:line="881" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="881" pos:column="42">"x_child_exit("<pos:position pos:line="881" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="881" pos:column="59">sname<pos:position pos:line="881" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="881" pos:column="66">")"<pos:position pos:line="881" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="881" pos:column="71">NULL<pos:position pos:line="881" pos:column="75"/></name></expr></argument>)<pos:position pos:line="881" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="881" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="882" pos:column="5">trace_add<pos:position pos:line="882" pos:column="14"/></name><argument_list pos:line="882" pos:column="14">(<argument><expr><name pos:line="882" pos:column="15">s<pos:position pos:line="882" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="882" pos:column="18">NULL<pos:position pos:line="882" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="882" pos:column="24">NULL<pos:position pos:line="882" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="882" pos:column="30">note<pos:position pos:line="882" pos:column="34"/></name></expr></argument>)<pos:position pos:line="882" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="882" pos:column="36"/></expr_stmt>
    <return pos:line="883" pos:column="5">return <expr><name pos:line="883" pos:column="12">APR_SUCCESS<pos:position pos:line="883" pos:column="23"/></name></expr>;<pos:position pos:line="883" pos:column="24"/></return>
}<pos:position pos:line="884" pos:column="2"/></block></function>

<comment type="block" pos:line="886" pos:column="1">/*
 * All our process initialiser does is add its trace to the log.
 */</comment>
<function><specifier pos:line="889" pos:column="1">static<pos:position pos:line="889" pos:column="7"/></specifier> <type><name pos:line="889" pos:column="8">void<pos:position pos:line="889" pos:column="12"/></name></type> <name pos:line="889" pos:column="13">x_child_init<pos:position pos:line="889" pos:column="25"/></name><parameter_list pos:line="889" pos:column="25">(<parameter><decl><type><name pos:line="889" pos:column="26">apr_pool_t<pos:position pos:line="889" pos:column="36"/></name> <modifier pos:line="889" pos:column="37">*<pos:position pos:line="889" pos:column="38"/></modifier></type><name pos:line="889" pos:column="38">p<pos:position pos:line="889" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="889" pos:column="41">server_rec<pos:position pos:line="889" pos:column="51"/></name> <modifier pos:line="889" pos:column="52">*<pos:position pos:line="889" pos:column="53"/></modifier></type><name pos:line="889" pos:column="53">s<pos:position pos:line="889" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="889" pos:column="55"/></parameter_list>
<block pos:line="890" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="891" pos:column="5">char<pos:position pos:line="891" pos:column="9"/></name> <modifier pos:line="891" pos:column="10">*<pos:position pos:line="891" pos:column="11"/></modifier></type><name pos:line="891" pos:column="11">note<pos:position pos:line="891" pos:column="15"/></name></decl>;<pos:position pos:line="891" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="892" pos:column="5">char<pos:position pos:line="892" pos:column="9"/></name> <modifier pos:line="892" pos:column="10">*<pos:position pos:line="892" pos:column="11"/></modifier></type><name pos:line="892" pos:column="11">sname<pos:position pos:line="892" pos:column="16"/></name> <init pos:line="892" pos:column="17">= <expr><name><name pos:line="892" pos:column="19">s<pos:position pos:line="892" pos:column="20"/></name><operator pos:line="892" pos:column="20">-&gt;<pos:position pos:line="892" pos:column="25"/></operator><name pos:line="892" pos:column="22">server_hostname<pos:position pos:line="892" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="892" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="894" pos:column="5">/*
     * Set up any module cells that ought to be initialised.
     */</comment>
    <expr_stmt><expr><call><name pos:line="897" pos:column="5">setup_module_cells<pos:position pos:line="897" pos:column="23"/></name><argument_list pos:line="897" pos:column="23">()<pos:position pos:line="897" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="897" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="898" pos:column="5">/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */</comment>
    <expr_stmt><expr><name pos:line="902" pos:column="5">sname<pos:position pos:line="902" pos:column="10"/></name> <operator pos:line="902" pos:column="11">=<pos:position pos:line="902" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="902" pos:column="13">(<pos:position pos:line="902" pos:column="14"/></operator><name pos:line="902" pos:column="14">sname<pos:position pos:line="902" pos:column="19"/></name> <operator pos:line="902" pos:column="20">!=<pos:position pos:line="902" pos:column="22"/></operator> <name pos:line="902" pos:column="23">NULL<pos:position pos:line="902" pos:column="27"/></name><operator pos:line="902" pos:column="27">)<pos:position pos:line="902" pos:column="28"/></operator></expr> ?<pos:position pos:line="902" pos:column="30"/></condition><then pos:line="902" pos:column="30"> <expr><name pos:line="902" pos:column="31">sname<pos:position pos:line="902" pos:column="36"/></name></expr> <pos:position pos:line="902" pos:column="37"/></then><else pos:line="902" pos:column="37">: <expr><literal type="string" pos:line="902" pos:column="39">""<pos:position pos:line="902" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="902" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="903" pos:column="5">note<pos:position pos:line="903" pos:column="9"/></name> <operator pos:line="903" pos:column="10">=<pos:position pos:line="903" pos:column="11"/></operator> <call><name pos:line="903" pos:column="12">apr_pstrcat<pos:position pos:line="903" pos:column="23"/></name><argument_list pos:line="903" pos:column="23">(<argument><expr><name pos:line="903" pos:column="24">p<pos:position pos:line="903" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="903" pos:column="27">"x_child_init("<pos:position pos:line="903" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="903" pos:column="44">sname<pos:position pos:line="903" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="903" pos:column="51">")"<pos:position pos:line="903" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="903" pos:column="56">NULL<pos:position pos:line="903" pos:column="60"/></name></expr></argument>)<pos:position pos:line="903" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="903" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="904" pos:column="5">trace_add<pos:position pos:line="904" pos:column="14"/></name><argument_list pos:line="904" pos:column="14">(<argument><expr><name pos:line="904" pos:column="15">s<pos:position pos:line="904" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="904" pos:column="18">NULL<pos:position pos:line="904" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="904" pos:column="24">NULL<pos:position pos:line="904" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="904" pos:column="30">note<pos:position pos:line="904" pos:column="34"/></name></expr></argument>)<pos:position pos:line="904" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="904" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="906" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="906" pos:column="30"/></name><argument_list pos:line="906" pos:column="30">(<argument><expr><name pos:line="906" pos:column="31">p<pos:position pos:line="906" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="906" pos:column="34">s<pos:position pos:line="906" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="906" pos:column="37">x_child_exit<pos:position pos:line="906" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="906" pos:column="51">x_child_exit<pos:position pos:line="906" pos:column="63"/></name></expr></argument>)<pos:position pos:line="906" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="906" pos:column="65"/></expr_stmt>
}<pos:position pos:line="907" pos:column="2"/></block></function>

<comment type="block" pos:line="909" pos:column="1">/*
 * XXX: This routine is called XXX
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<cpp:if pos:line="916" pos:column="1">#<cpp:directive pos:line="916" pos:column="2">if<pos:position pos:line="916" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="916" pos:column="5">0<pos:position pos:line="916" pos:column="6"/></literal></expr></cpp:if>
static const char *x_http_scheme(const request_rec *r)
{
    x_cfg *cfg;

    cfg = our_dconfig(r);
    <comment type="block" pos:line="922" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    trace_add(r-&gt;server, NULL, cfg, "x_http_scheme()");
    return "example";
}

<comment type="block" pos:line="929" pos:column="1">/*
 * XXX: This routine is called XXX
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
static apr_port_t x_default_port(const request_rec *r)
{
    x_cfg *cfg;

    cfg = our_dconfig(r);
    <comment type="block" pos:line="941" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    trace_add(r-&gt;server, NULL, cfg, "x_default_port()");
    return 80;
}
<cpp:endif pos:line="947" pos:column="1">#<cpp:directive pos:line="947" pos:column="2">endif<pos:position pos:line="947" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="947" pos:column="8">/*0*/</comment>

<comment type="block" pos:line="949" pos:column="1">/*
 * XXX: This routine is called XXX
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="956" pos:column="1">static<pos:position pos:line="956" pos:column="7"/></specifier> <type><name pos:line="956" pos:column="8">void<pos:position pos:line="956" pos:column="12"/></name></type> <name pos:line="956" pos:column="13">x_insert_filter<pos:position pos:line="956" pos:column="28"/></name><parameter_list pos:line="956" pos:column="28">(<parameter><decl><type><name pos:line="956" pos:column="29">request_rec<pos:position pos:line="956" pos:column="40"/></name> <modifier pos:line="956" pos:column="41">*<pos:position pos:line="956" pos:column="42"/></modifier></type><name pos:line="956" pos:column="42">r<pos:position pos:line="956" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="956" pos:column="44"/></parameter_list>
<block pos:line="957" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="958" pos:column="5">x_cfg<pos:position pos:line="958" pos:column="10"/></name> <modifier pos:line="958" pos:column="11">*<pos:position pos:line="958" pos:column="12"/></modifier></type><name pos:line="958" pos:column="12">cfg<pos:position pos:line="958" pos:column="15"/></name></decl>;<pos:position pos:line="958" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="960" pos:column="5">cfg<pos:position pos:line="960" pos:column="8"/></name> <operator pos:line="960" pos:column="9">=<pos:position pos:line="960" pos:column="10"/></operator> <call><name pos:line="960" pos:column="11">our_dconfig<pos:position pos:line="960" pos:column="22"/></name><argument_list pos:line="960" pos:column="22">(<argument><expr><name pos:line="960" pos:column="23">r<pos:position pos:line="960" pos:column="24"/></name></expr></argument>)<pos:position pos:line="960" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="960" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="961" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="964" pos:column="5">trace_add<pos:position pos:line="964" pos:column="14"/></name><argument_list pos:line="964" pos:column="14">(<argument><expr><name><name pos:line="964" pos:column="15">r<pos:position pos:line="964" pos:column="16"/></name><operator pos:line="964" pos:column="16">-&gt;<pos:position pos:line="964" pos:column="21"/></operator><name pos:line="964" pos:column="18">server<pos:position pos:line="964" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="964" pos:column="26">NULL<pos:position pos:line="964" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="964" pos:column="32">cfg<pos:position pos:line="964" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="964" pos:column="37">"x_insert_filter()"<pos:position pos:line="964" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="964" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="964" pos:column="58"/></expr_stmt>
}<pos:position pos:line="965" pos:column="2"/></block></function>

<comment type="block" pos:line="967" pos:column="1">/*
 * XXX: This routine is called XXX
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="974" pos:column="1">static<pos:position pos:line="974" pos:column="7"/></specifier> <type><name pos:line="974" pos:column="8">int<pos:position pos:line="974" pos:column="11"/></name></type> <name pos:line="974" pos:column="12">x_quick_handler<pos:position pos:line="974" pos:column="27"/></name><parameter_list pos:line="974" pos:column="27">(<parameter><decl><type><name pos:line="974" pos:column="28">request_rec<pos:position pos:line="974" pos:column="39"/></name> <modifier pos:line="974" pos:column="40">*<pos:position pos:line="974" pos:column="41"/></modifier></type><name pos:line="974" pos:column="41">r<pos:position pos:line="974" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="974" pos:column="44">int<pos:position pos:line="974" pos:column="47"/></name></type> <name pos:line="974" pos:column="48">lookup_uri<pos:position pos:line="974" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="974" pos:column="59"/></parameter_list>
<block pos:line="975" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="976" pos:column="5">x_cfg<pos:position pos:line="976" pos:column="10"/></name> <modifier pos:line="976" pos:column="11">*<pos:position pos:line="976" pos:column="12"/></modifier></type><name pos:line="976" pos:column="12">cfg<pos:position pos:line="976" pos:column="15"/></name></decl>;<pos:position pos:line="976" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="978" pos:column="5">cfg<pos:position pos:line="978" pos:column="8"/></name> <operator pos:line="978" pos:column="9">=<pos:position pos:line="978" pos:column="10"/></operator> <call><name pos:line="978" pos:column="11">our_dconfig<pos:position pos:line="978" pos:column="22"/></name><argument_list pos:line="978" pos:column="22">(<argument><expr><name pos:line="978" pos:column="23">r<pos:position pos:line="978" pos:column="24"/></name></expr></argument>)<pos:position pos:line="978" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="978" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="979" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="982" pos:column="5">trace_add<pos:position pos:line="982" pos:column="14"/></name><argument_list pos:line="982" pos:column="14">(<argument><expr><name><name pos:line="982" pos:column="15">r<pos:position pos:line="982" pos:column="16"/></name><operator pos:line="982" pos:column="16">-&gt;<pos:position pos:line="982" pos:column="21"/></operator><name pos:line="982" pos:column="18">server<pos:position pos:line="982" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="982" pos:column="26">NULL<pos:position pos:line="982" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="982" pos:column="32">cfg<pos:position pos:line="982" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="982" pos:column="37">"x_quick_handler()"<pos:position pos:line="982" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="982" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="982" pos:column="58"/></expr_stmt>
    <return pos:line="983" pos:column="5">return <expr><name pos:line="983" pos:column="12">DECLINED<pos:position pos:line="983" pos:column="20"/></name></expr>;<pos:position pos:line="983" pos:column="21"/></return>
}<pos:position pos:line="984" pos:column="2"/></block></function>

<comment type="block" pos:line="986" pos:column="1">/*
 * This routine is called just after the server accepts the connection,
 * but before it is handed off to a protocol module to be served.  The point
 * of this hook is to allow modules an opportunity to modify the connection
 * as soon as possible. The core server uses this phase to setup the
 * connection record based on the type of connection that is being used.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="997" pos:column="1">static<pos:position pos:line="997" pos:column="7"/></specifier> <type><name pos:line="997" pos:column="8">int<pos:position pos:line="997" pos:column="11"/></name></type> <name pos:line="997" pos:column="12">x_pre_connection<pos:position pos:line="997" pos:column="28"/></name><parameter_list pos:line="997" pos:column="28">(<parameter><decl><type><name pos:line="997" pos:column="29">conn_rec<pos:position pos:line="997" pos:column="37"/></name> <modifier pos:line="997" pos:column="38">*<pos:position pos:line="997" pos:column="39"/></modifier></type><name pos:line="997" pos:column="39">c<pos:position pos:line="997" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="997" pos:column="42">void<pos:position pos:line="997" pos:column="46"/></name> <modifier pos:line="997" pos:column="47">*<pos:position pos:line="997" pos:column="48"/></modifier></type><name pos:line="997" pos:column="48">csd<pos:position pos:line="997" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="997" pos:column="52"/></parameter_list>
<block pos:line="998" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="999" pos:column="5">x_cfg<pos:position pos:line="999" pos:column="10"/></name> <modifier pos:line="999" pos:column="11">*<pos:position pos:line="999" pos:column="12"/></modifier></type><name pos:line="999" pos:column="12">cfg<pos:position pos:line="999" pos:column="15"/></name></decl>;<pos:position pos:line="999" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1001" pos:column="5">cfg<pos:position pos:line="1001" pos:column="8"/></name> <operator pos:line="1001" pos:column="9">=<pos:position pos:line="1001" pos:column="10"/></operator> <call><name pos:line="1001" pos:column="11">our_cconfig<pos:position pos:line="1001" pos:column="22"/></name><argument_list pos:line="1001" pos:column="22">(<argument><expr><name pos:line="1001" pos:column="23">c<pos:position pos:line="1001" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1001" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1001" pos:column="26"/></expr_stmt>
<cpp:if pos:line="1002" pos:column="1">#<cpp:directive pos:line="1002" pos:column="2">if<pos:position pos:line="1002" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="1002" pos:column="5">0<pos:position pos:line="1002" pos:column="6"/></literal></expr></cpp:if>
    <comment type="block" pos:line="1003" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    trace_add(r-&gt;server, NULL, cfg, "x_pre_connection()");
<cpp:endif pos:line="1007" pos:column="1">#<cpp:directive pos:line="1007" pos:column="2">endif<pos:position pos:line="1007" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="1008" pos:column="5">return <expr><name pos:line="1008" pos:column="12">OK<pos:position pos:line="1008" pos:column="14"/></name></expr>;<pos:position pos:line="1008" pos:column="15"/></return>
}<pos:position pos:line="1009" pos:column="2"/></block></function>

<comment type="block" pos:line="1011" pos:column="1">/* This routine is used to actually process the connection that was received.
 * Only protocol modules should implement this hook, as it gives them an
 * opportunity to replace the standard HTTP processing with processing for
 * some other protocol.  Both echo and POP3 modules are available as
 * examples.
 *
 * The return VALUE is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * further modules are called for this phase.
 */</comment>
<function><specifier pos:line="1020" pos:column="1">static<pos:position pos:line="1020" pos:column="7"/></specifier> <type><name pos:line="1020" pos:column="8">int<pos:position pos:line="1020" pos:column="11"/></name></type> <name pos:line="1020" pos:column="12">x_process_connection<pos:position pos:line="1020" pos:column="32"/></name><parameter_list pos:line="1020" pos:column="32">(<parameter><decl><type><name pos:line="1020" pos:column="33">conn_rec<pos:position pos:line="1020" pos:column="41"/></name> <modifier pos:line="1020" pos:column="42">*<pos:position pos:line="1020" pos:column="43"/></modifier></type><name pos:line="1020" pos:column="43">c<pos:position pos:line="1020" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1020" pos:column="45"/></parameter_list>
<block pos:line="1021" pos:column="1">{
    <return pos:line="1022" pos:column="5">return <expr><name pos:line="1022" pos:column="12">DECLINED<pos:position pos:line="1022" pos:column="20"/></name></expr>;<pos:position pos:line="1022" pos:column="21"/></return>
}<pos:position pos:line="1023" pos:column="2"/></block></function>

<comment type="block" pos:line="1025" pos:column="1">/*
 * This routine is called after the request has been read but before any other
 * phases have been processed.  This allows us to make decisions based upon
 * the input header fields.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * further modules are called for this phase.
 */</comment>
<function><specifier pos:line="1033" pos:column="1">static<pos:position pos:line="1033" pos:column="7"/></specifier> <type><name pos:line="1033" pos:column="8">int<pos:position pos:line="1033" pos:column="11"/></name></type> <name pos:line="1033" pos:column="12">x_post_read_request<pos:position pos:line="1033" pos:column="31"/></name><parameter_list pos:line="1033" pos:column="31">(<parameter><decl><type><name pos:line="1033" pos:column="32">request_rec<pos:position pos:line="1033" pos:column="43"/></name> <modifier pos:line="1033" pos:column="44">*<pos:position pos:line="1033" pos:column="45"/></modifier></type><name pos:line="1033" pos:column="45">r<pos:position pos:line="1033" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1033" pos:column="47"/></parameter_list>
<block pos:line="1034" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1035" pos:column="5">x_cfg<pos:position pos:line="1035" pos:column="10"/></name> <modifier pos:line="1035" pos:column="11">*<pos:position pos:line="1035" pos:column="12"/></modifier></type><name pos:line="1035" pos:column="12">cfg<pos:position pos:line="1035" pos:column="15"/></name></decl>;<pos:position pos:line="1035" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1037" pos:column="5">cfg<pos:position pos:line="1037" pos:column="8"/></name> <operator pos:line="1037" pos:column="9">=<pos:position pos:line="1037" pos:column="10"/></operator> <call><name pos:line="1037" pos:column="11">our_dconfig<pos:position pos:line="1037" pos:column="22"/></name><argument_list pos:line="1037" pos:column="22">(<argument><expr><name pos:line="1037" pos:column="23">r<pos:position pos:line="1037" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1037" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1037" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1038" pos:column="5">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1042" pos:column="5">trace_add<pos:position pos:line="1042" pos:column="14"/></name><argument_list pos:line="1042" pos:column="14">(<argument><expr><name><name pos:line="1042" pos:column="15">r<pos:position pos:line="1042" pos:column="16"/></name><operator pos:line="1042" pos:column="16">-&gt;<pos:position pos:line="1042" pos:column="21"/></operator><name pos:line="1042" pos:column="18">server<pos:position pos:line="1042" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="26">r<pos:position pos:line="1042" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="29">cfg<pos:position pos:line="1042" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1042" pos:column="34">"x_post_read_request()"<pos:position pos:line="1042" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1042" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1042" pos:column="59"/></expr_stmt>
    <return pos:line="1043" pos:column="5">return <expr><name pos:line="1043" pos:column="12">DECLINED<pos:position pos:line="1043" pos:column="20"/></name></expr>;<pos:position pos:line="1043" pos:column="21"/></return>
}<pos:position pos:line="1044" pos:column="2"/></block></function>

<comment type="block" pos:line="1046" pos:column="1">/*
 * This routine gives our module an opportunity to translate the URI into an
 * actual filename.  If we don't do anything special, the server's default
 * rules (Alias directives and the like) will continue to be followed.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * further modules are called for this phase.
 */</comment>
<function><specifier pos:line="1054" pos:column="1">static<pos:position pos:line="1054" pos:column="7"/></specifier> <type><name pos:line="1054" pos:column="8">int<pos:position pos:line="1054" pos:column="11"/></name></type> <name pos:line="1054" pos:column="12">x_translate_handler<pos:position pos:line="1054" pos:column="31"/></name><parameter_list pos:line="1054" pos:column="31">(<parameter><decl><type><name pos:line="1054" pos:column="32">request_rec<pos:position pos:line="1054" pos:column="43"/></name> <modifier pos:line="1054" pos:column="44">*<pos:position pos:line="1054" pos:column="45"/></modifier></type><name pos:line="1054" pos:column="45">r<pos:position pos:line="1054" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1054" pos:column="47"/></parameter_list>
<block pos:line="1055" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1057" pos:column="5">x_cfg<pos:position pos:line="1057" pos:column="10"/></name> <modifier pos:line="1057" pos:column="11">*<pos:position pos:line="1057" pos:column="12"/></modifier></type><name pos:line="1057" pos:column="12">cfg<pos:position pos:line="1057" pos:column="15"/></name></decl>;<pos:position pos:line="1057" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1059" pos:column="5">cfg<pos:position pos:line="1059" pos:column="8"/></name> <operator pos:line="1059" pos:column="9">=<pos:position pos:line="1059" pos:column="10"/></operator> <call><name pos:line="1059" pos:column="11">our_dconfig<pos:position pos:line="1059" pos:column="22"/></name><argument_list pos:line="1059" pos:column="22">(<argument><expr><name pos:line="1059" pos:column="23">r<pos:position pos:line="1059" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1059" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1059" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1060" pos:column="5">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1064" pos:column="5">trace_add<pos:position pos:line="1064" pos:column="14"/></name><argument_list pos:line="1064" pos:column="14">(<argument><expr><name><name pos:line="1064" pos:column="15">r<pos:position pos:line="1064" pos:column="16"/></name><operator pos:line="1064" pos:column="16">-&gt;<pos:position pos:line="1064" pos:column="21"/></operator><name pos:line="1064" pos:column="18">server<pos:position pos:line="1064" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="26">r<pos:position pos:line="1064" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="29">cfg<pos:position pos:line="1064" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1064" pos:column="34">"x_translate_handler()"<pos:position pos:line="1064" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1064" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1064" pos:column="59"/></expr_stmt>
    <return pos:line="1065" pos:column="5">return <expr><name pos:line="1065" pos:column="12">DECLINED<pos:position pos:line="1065" pos:column="20"/></name></expr>;<pos:position pos:line="1065" pos:column="21"/></return>
}<pos:position pos:line="1066" pos:column="2"/></block></function>

<comment type="block" pos:line="1068" pos:column="1">/*
 * This routine maps r-&gt;filename to a physical file on disk.  Useful for
 * overriding default core behavior, including skipping mapping for
 * requests that are not file based.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * further modules are called for this phase.
 */</comment>
<function><specifier pos:line="1076" pos:column="1">static<pos:position pos:line="1076" pos:column="7"/></specifier> <type><name pos:line="1076" pos:column="8">int<pos:position pos:line="1076" pos:column="11"/></name></type> <name pos:line="1076" pos:column="12">x_map_to_storage_handler<pos:position pos:line="1076" pos:column="36"/></name><parameter_list pos:line="1076" pos:column="36">(<parameter><decl><type><name pos:line="1076" pos:column="37">request_rec<pos:position pos:line="1076" pos:column="48"/></name> <modifier pos:line="1076" pos:column="49">*<pos:position pos:line="1076" pos:column="50"/></modifier></type><name pos:line="1076" pos:column="50">r<pos:position pos:line="1076" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1076" pos:column="52"/></parameter_list>
<block pos:line="1077" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1079" pos:column="5">x_cfg<pos:position pos:line="1079" pos:column="10"/></name> <modifier pos:line="1079" pos:column="11">*<pos:position pos:line="1079" pos:column="12"/></modifier></type><name pos:line="1079" pos:column="12">cfg<pos:position pos:line="1079" pos:column="15"/></name></decl>;<pos:position pos:line="1079" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1081" pos:column="5">cfg<pos:position pos:line="1081" pos:column="8"/></name> <operator pos:line="1081" pos:column="9">=<pos:position pos:line="1081" pos:column="10"/></operator> <call><name pos:line="1081" pos:column="11">our_dconfig<pos:position pos:line="1081" pos:column="22"/></name><argument_list pos:line="1081" pos:column="22">(<argument><expr><name pos:line="1081" pos:column="23">r<pos:position pos:line="1081" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1081" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1081" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1082" pos:column="5">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1086" pos:column="5">trace_add<pos:position pos:line="1086" pos:column="14"/></name><argument_list pos:line="1086" pos:column="14">(<argument><expr><name><name pos:line="1086" pos:column="15">r<pos:position pos:line="1086" pos:column="16"/></name><operator pos:line="1086" pos:column="16">-&gt;<pos:position pos:line="1086" pos:column="21"/></operator><name pos:line="1086" pos:column="18">server<pos:position pos:line="1086" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1086" pos:column="26">r<pos:position pos:line="1086" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1086" pos:column="29">cfg<pos:position pos:line="1086" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1086" pos:column="34">"x_map_to_storage_handler()"<pos:position pos:line="1086" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="1086" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1086" pos:column="64"/></expr_stmt>
    <return pos:line="1087" pos:column="5">return <expr><name pos:line="1087" pos:column="12">DECLINED<pos:position pos:line="1087" pos:column="20"/></name></expr>;<pos:position pos:line="1087" pos:column="21"/></return>
}<pos:position pos:line="1088" pos:column="2"/></block></function>

<comment type="block" pos:line="1090" pos:column="1">/*
 * this routine gives our module another chance to examine the request
 * headers and to take special action. This is the first phase whose
 * hooks' configuration directives can appear inside the &lt;Directory&gt;
 * and similar sections, because at this stage the URI has been mapped
 * to the filename. For example this phase can be used to block evil
 * clients, while little resources were wasted on these.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK,
 * the server will still call any remaining modules with an handler
 * for this phase.
 */</comment>
<function><specifier pos:line="1102" pos:column="1">static<pos:position pos:line="1102" pos:column="7"/></specifier> <type><name pos:line="1102" pos:column="8">int<pos:position pos:line="1102" pos:column="11"/></name></type> <name pos:line="1102" pos:column="12">x_header_parser_handler<pos:position pos:line="1102" pos:column="35"/></name><parameter_list pos:line="1102" pos:column="35">(<parameter><decl><type><name pos:line="1102" pos:column="36">request_rec<pos:position pos:line="1102" pos:column="47"/></name> <modifier pos:line="1102" pos:column="48">*<pos:position pos:line="1102" pos:column="49"/></modifier></type><name pos:line="1102" pos:column="49">r<pos:position pos:line="1102" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1102" pos:column="51"/></parameter_list>
<block pos:line="1103" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1105" pos:column="5">x_cfg<pos:position pos:line="1105" pos:column="10"/></name> <modifier pos:line="1105" pos:column="11">*<pos:position pos:line="1105" pos:column="12"/></modifier></type><name pos:line="1105" pos:column="12">cfg<pos:position pos:line="1105" pos:column="15"/></name></decl>;<pos:position pos:line="1105" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1107" pos:column="5">cfg<pos:position pos:line="1107" pos:column="8"/></name> <operator pos:line="1107" pos:column="9">=<pos:position pos:line="1107" pos:column="10"/></operator> <call><name pos:line="1107" pos:column="11">our_dconfig<pos:position pos:line="1107" pos:column="22"/></name><argument_list pos:line="1107" pos:column="22">(<argument><expr><name pos:line="1107" pos:column="23">r<pos:position pos:line="1107" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1107" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1107" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1108" pos:column="5">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1112" pos:column="5">trace_add<pos:position pos:line="1112" pos:column="14"/></name><argument_list pos:line="1112" pos:column="14">(<argument><expr><name><name pos:line="1112" pos:column="15">r<pos:position pos:line="1112" pos:column="16"/></name><operator pos:line="1112" pos:column="16">-&gt;<pos:position pos:line="1112" pos:column="21"/></operator><name pos:line="1112" pos:column="18">server<pos:position pos:line="1112" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="26">r<pos:position pos:line="1112" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="29">cfg<pos:position pos:line="1112" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1112" pos:column="34">"header_parser_handler()"<pos:position pos:line="1112" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="1112" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1112" pos:column="61"/></expr_stmt>
    <return pos:line="1113" pos:column="5">return <expr><name pos:line="1113" pos:column="12">DECLINED<pos:position pos:line="1113" pos:column="20"/></name></expr>;<pos:position pos:line="1113" pos:column="21"/></return>
}<pos:position pos:line="1114" pos:column="2"/></block></function>


<comment type="block" pos:line="1117" pos:column="1">/*
 * This routine is called to check the authentication information sent with
 * the request (such as looking up the user in a database and verifying that
 * the [encrypted] password sent matches the one in the database).
 *
 * The return value is OK, DECLINED, or some HTTP_mumble error (typically
 * HTTP_UNAUTHORIZED).  If we return OK, no other modules are given a chance
 * at the request during this phase.
 */</comment>
<function><specifier pos:line="1126" pos:column="1">static<pos:position pos:line="1126" pos:column="7"/></specifier> <type><name pos:line="1126" pos:column="8">int<pos:position pos:line="1126" pos:column="11"/></name></type> <name pos:line="1126" pos:column="12">x_check_user_id<pos:position pos:line="1126" pos:column="27"/></name><parameter_list pos:line="1126" pos:column="27">(<parameter><decl><type><name pos:line="1126" pos:column="28">request_rec<pos:position pos:line="1126" pos:column="39"/></name> <modifier pos:line="1126" pos:column="40">*<pos:position pos:line="1126" pos:column="41"/></modifier></type><name pos:line="1126" pos:column="41">r<pos:position pos:line="1126" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1126" pos:column="43"/></parameter_list>
<block pos:line="1127" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1129" pos:column="5">x_cfg<pos:position pos:line="1129" pos:column="10"/></name> <modifier pos:line="1129" pos:column="11">*<pos:position pos:line="1129" pos:column="12"/></modifier></type><name pos:line="1129" pos:column="12">cfg<pos:position pos:line="1129" pos:column="15"/></name></decl>;<pos:position pos:line="1129" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1131" pos:column="5">cfg<pos:position pos:line="1131" pos:column="8"/></name> <operator pos:line="1131" pos:column="9">=<pos:position pos:line="1131" pos:column="10"/></operator> <call><name pos:line="1131" pos:column="11">our_dconfig<pos:position pos:line="1131" pos:column="22"/></name><argument_list pos:line="1131" pos:column="22">(<argument><expr><name pos:line="1131" pos:column="23">r<pos:position pos:line="1131" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1131" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1131" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1132" pos:column="5">/*
     * Don't do anything except log the call.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1135" pos:column="5">trace_add<pos:position pos:line="1135" pos:column="14"/></name><argument_list pos:line="1135" pos:column="14">(<argument><expr><name><name pos:line="1135" pos:column="15">r<pos:position pos:line="1135" pos:column="16"/></name><operator pos:line="1135" pos:column="16">-&gt;<pos:position pos:line="1135" pos:column="21"/></operator><name pos:line="1135" pos:column="18">server<pos:position pos:line="1135" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1135" pos:column="26">r<pos:position pos:line="1135" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1135" pos:column="29">cfg<pos:position pos:line="1135" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1135" pos:column="34">"x_check_user_id()"<pos:position pos:line="1135" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="1135" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1135" pos:column="55"/></expr_stmt>
    <return pos:line="1136" pos:column="5">return <expr><name pos:line="1136" pos:column="12">DECLINED<pos:position pos:line="1136" pos:column="20"/></name></expr>;<pos:position pos:line="1136" pos:column="21"/></return>
}<pos:position pos:line="1137" pos:column="2"/></block></function>

<comment type="block" pos:line="1139" pos:column="1">/*
 * This routine is called to check to see if the resource being requested
 * requires authorisation.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * other modules are called during this phase.
 *
 * If *all* modules return DECLINED, the request is aborted with a server
 * error.
 */</comment>
<function><specifier pos:line="1149" pos:column="1">static<pos:position pos:line="1149" pos:column="7"/></specifier> <type><name pos:line="1149" pos:column="8">int<pos:position pos:line="1149" pos:column="11"/></name></type> <name pos:line="1149" pos:column="12">x_auth_checker<pos:position pos:line="1149" pos:column="26"/></name><parameter_list pos:line="1149" pos:column="26">(<parameter><decl><type><name pos:line="1149" pos:column="27">request_rec<pos:position pos:line="1149" pos:column="38"/></name> <modifier pos:line="1149" pos:column="39">*<pos:position pos:line="1149" pos:column="40"/></modifier></type><name pos:line="1149" pos:column="40">r<pos:position pos:line="1149" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1149" pos:column="42"/></parameter_list>
<block pos:line="1150" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1152" pos:column="5">x_cfg<pos:position pos:line="1152" pos:column="10"/></name> <modifier pos:line="1152" pos:column="11">*<pos:position pos:line="1152" pos:column="12"/></modifier></type><name pos:line="1152" pos:column="12">cfg<pos:position pos:line="1152" pos:column="15"/></name></decl>;<pos:position pos:line="1152" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1154" pos:column="5">cfg<pos:position pos:line="1154" pos:column="8"/></name> <operator pos:line="1154" pos:column="9">=<pos:position pos:line="1154" pos:column="10"/></operator> <call><name pos:line="1154" pos:column="11">our_dconfig<pos:position pos:line="1154" pos:column="22"/></name><argument_list pos:line="1154" pos:column="22">(<argument><expr><name pos:line="1154" pos:column="23">r<pos:position pos:line="1154" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1154" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1154" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1155" pos:column="5">/*
     * Log the call and return OK, or access will be denied (even though we
     * didn't actually do anything).
     */</comment>
    <expr_stmt><expr><call><name pos:line="1159" pos:column="5">trace_add<pos:position pos:line="1159" pos:column="14"/></name><argument_list pos:line="1159" pos:column="14">(<argument><expr><name><name pos:line="1159" pos:column="15">r<pos:position pos:line="1159" pos:column="16"/></name><operator pos:line="1159" pos:column="16">-&gt;<pos:position pos:line="1159" pos:column="21"/></operator><name pos:line="1159" pos:column="18">server<pos:position pos:line="1159" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1159" pos:column="26">r<pos:position pos:line="1159" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1159" pos:column="29">cfg<pos:position pos:line="1159" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1159" pos:column="34">"x_auth_checker()"<pos:position pos:line="1159" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1159" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1159" pos:column="54"/></expr_stmt>
    <return pos:line="1160" pos:column="5">return <expr><name pos:line="1160" pos:column="12">DECLINED<pos:position pos:line="1160" pos:column="20"/></name></expr>;<pos:position pos:line="1160" pos:column="21"/></return>
}<pos:position pos:line="1161" pos:column="2"/></block></function>

<comment type="block" pos:line="1163" pos:column="1">/*
 * This routine is called to check for any module-specific restrictions placed
 * upon the requested resource.  (See the mod_access module for an example.)
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  All modules with an
 * handler for this phase are called regardless of whether their predecessors
 * return OK or DECLINED.  The first one to return any other status, however,
 * will abort the sequence (and the request) as usual.
 */</comment>
<function><specifier pos:line="1172" pos:column="1">static<pos:position pos:line="1172" pos:column="7"/></specifier> <type><name pos:line="1172" pos:column="8">int<pos:position pos:line="1172" pos:column="11"/></name></type> <name pos:line="1172" pos:column="12">x_access_checker<pos:position pos:line="1172" pos:column="28"/></name><parameter_list pos:line="1172" pos:column="28">(<parameter><decl><type><name pos:line="1172" pos:column="29">request_rec<pos:position pos:line="1172" pos:column="40"/></name> <modifier pos:line="1172" pos:column="41">*<pos:position pos:line="1172" pos:column="42"/></modifier></type><name pos:line="1172" pos:column="42">r<pos:position pos:line="1172" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1172" pos:column="44"/></parameter_list>
<block pos:line="1173" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1175" pos:column="5">x_cfg<pos:position pos:line="1175" pos:column="10"/></name> <modifier pos:line="1175" pos:column="11">*<pos:position pos:line="1175" pos:column="12"/></modifier></type><name pos:line="1175" pos:column="12">cfg<pos:position pos:line="1175" pos:column="15"/></name></decl>;<pos:position pos:line="1175" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1177" pos:column="5">cfg<pos:position pos:line="1177" pos:column="8"/></name> <operator pos:line="1177" pos:column="9">=<pos:position pos:line="1177" pos:column="10"/></operator> <call><name pos:line="1177" pos:column="11">our_dconfig<pos:position pos:line="1177" pos:column="22"/></name><argument_list pos:line="1177" pos:column="22">(<argument><expr><name pos:line="1177" pos:column="23">r<pos:position pos:line="1177" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1177" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1177" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1178" pos:column="5">trace_add<pos:position pos:line="1178" pos:column="14"/></name><argument_list pos:line="1178" pos:column="14">(<argument><expr><name><name pos:line="1178" pos:column="15">r<pos:position pos:line="1178" pos:column="16"/></name><operator pos:line="1178" pos:column="16">-&gt;<pos:position pos:line="1178" pos:column="21"/></operator><name pos:line="1178" pos:column="18">server<pos:position pos:line="1178" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1178" pos:column="26">r<pos:position pos:line="1178" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1178" pos:column="29">cfg<pos:position pos:line="1178" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1178" pos:column="34">"x_access_checker()"<pos:position pos:line="1178" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1178" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1178" pos:column="56"/></expr_stmt>
    <return pos:line="1179" pos:column="5">return <expr><name pos:line="1179" pos:column="12">DECLINED<pos:position pos:line="1179" pos:column="20"/></name></expr>;<pos:position pos:line="1179" pos:column="21"/></return>
}<pos:position pos:line="1180" pos:column="2"/></block></function>

<comment type="block" pos:line="1182" pos:column="1">/*
 * This routine is called to determine and/or set the various document type
 * information bits, like Content-type (via r-&gt;content_type), language, et
 * cetera.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, no
 * further modules are given a chance at the request for this phase.
 */</comment>
<function><specifier pos:line="1190" pos:column="1">static<pos:position pos:line="1190" pos:column="7"/></specifier> <type><name pos:line="1190" pos:column="8">int<pos:position pos:line="1190" pos:column="11"/></name></type> <name pos:line="1190" pos:column="12">x_type_checker<pos:position pos:line="1190" pos:column="26"/></name><parameter_list pos:line="1190" pos:column="26">(<parameter><decl><type><name pos:line="1190" pos:column="27">request_rec<pos:position pos:line="1190" pos:column="38"/></name> <modifier pos:line="1190" pos:column="39">*<pos:position pos:line="1190" pos:column="40"/></modifier></type><name pos:line="1190" pos:column="40">r<pos:position pos:line="1190" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1190" pos:column="42"/></parameter_list>
<block pos:line="1191" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1193" pos:column="5">x_cfg<pos:position pos:line="1193" pos:column="10"/></name> <modifier pos:line="1193" pos:column="11">*<pos:position pos:line="1193" pos:column="12"/></modifier></type><name pos:line="1193" pos:column="12">cfg<pos:position pos:line="1193" pos:column="15"/></name></decl>;<pos:position pos:line="1193" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1195" pos:column="5">cfg<pos:position pos:line="1195" pos:column="8"/></name> <operator pos:line="1195" pos:column="9">=<pos:position pos:line="1195" pos:column="10"/></operator> <call><name pos:line="1195" pos:column="11">our_dconfig<pos:position pos:line="1195" pos:column="22"/></name><argument_list pos:line="1195" pos:column="22">(<argument><expr><name pos:line="1195" pos:column="23">r<pos:position pos:line="1195" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1195" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1195" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1196" pos:column="5">/*
     * Log the call, but don't do anything else - and report truthfully that
     * we didn't do anything.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1200" pos:column="5">trace_add<pos:position pos:line="1200" pos:column="14"/></name><argument_list pos:line="1200" pos:column="14">(<argument><expr><name><name pos:line="1200" pos:column="15">r<pos:position pos:line="1200" pos:column="16"/></name><operator pos:line="1200" pos:column="16">-&gt;<pos:position pos:line="1200" pos:column="21"/></operator><name pos:line="1200" pos:column="18">server<pos:position pos:line="1200" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="26">r<pos:position pos:line="1200" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="29">cfg<pos:position pos:line="1200" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1200" pos:column="34">"x_type_checker()"<pos:position pos:line="1200" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1200" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1200" pos:column="54"/></expr_stmt>
    <return pos:line="1201" pos:column="5">return <expr><name pos:line="1201" pos:column="12">DECLINED<pos:position pos:line="1201" pos:column="20"/></name></expr>;<pos:position pos:line="1201" pos:column="21"/></return>
}<pos:position pos:line="1202" pos:column="2"/></block></function>

<comment type="block" pos:line="1204" pos:column="1">/*
 * This routine is called to perform any module-specific fixing of header
 * fields, et cetera.  It is invoked just before any content-handler.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><specifier pos:line="1212" pos:column="1">static<pos:position pos:line="1212" pos:column="7"/></specifier> <type><name pos:line="1212" pos:column="8">int<pos:position pos:line="1212" pos:column="11"/></name></type> <name pos:line="1212" pos:column="12">x_fixer_upper<pos:position pos:line="1212" pos:column="25"/></name><parameter_list pos:line="1212" pos:column="25">(<parameter><decl><type><name pos:line="1212" pos:column="26">request_rec<pos:position pos:line="1212" pos:column="37"/></name> <modifier pos:line="1212" pos:column="38">*<pos:position pos:line="1212" pos:column="39"/></modifier></type><name pos:line="1212" pos:column="39">r<pos:position pos:line="1212" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1212" pos:column="41"/></parameter_list>
<block pos:line="1213" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1215" pos:column="5">x_cfg<pos:position pos:line="1215" pos:column="10"/></name> <modifier pos:line="1215" pos:column="11">*<pos:position pos:line="1215" pos:column="12"/></modifier></type><name pos:line="1215" pos:column="12">cfg<pos:position pos:line="1215" pos:column="15"/></name></decl>;<pos:position pos:line="1215" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1217" pos:column="5">cfg<pos:position pos:line="1217" pos:column="8"/></name> <operator pos:line="1217" pos:column="9">=<pos:position pos:line="1217" pos:column="10"/></operator> <call><name pos:line="1217" pos:column="11">our_dconfig<pos:position pos:line="1217" pos:column="22"/></name><argument_list pos:line="1217" pos:column="22">(<argument><expr><name pos:line="1217" pos:column="23">r<pos:position pos:line="1217" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1217" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1217" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="1218" pos:column="5">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name pos:line="1221" pos:column="5">trace_add<pos:position pos:line="1221" pos:column="14"/></name><argument_list pos:line="1221" pos:column="14">(<argument><expr><name><name pos:line="1221" pos:column="15">r<pos:position pos:line="1221" pos:column="16"/></name><operator pos:line="1221" pos:column="16">-&gt;<pos:position pos:line="1221" pos:column="21"/></operator><name pos:line="1221" pos:column="18">server<pos:position pos:line="1221" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1221" pos:column="26">r<pos:position pos:line="1221" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1221" pos:column="29">cfg<pos:position pos:line="1221" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1221" pos:column="34">"x_fixer_upper()"<pos:position pos:line="1221" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="1221" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1221" pos:column="53"/></expr_stmt>
    <return pos:line="1222" pos:column="5">return <expr><name pos:line="1222" pos:column="12">OK<pos:position pos:line="1222" pos:column="14"/></name></expr>;<pos:position pos:line="1222" pos:column="15"/></return>
}<pos:position pos:line="1223" pos:column="2"/></block></function>

<comment type="block" pos:line="1225" pos:column="1">/*
 * This routine is called to perform any module-specific logging activities
 * over and above the normal server things.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, any
 * remaining modules with an handler for this phase will still be called.
 */</comment>
<function><specifier pos:line="1232" pos:column="1">static<pos:position pos:line="1232" pos:column="7"/></specifier> <type><name pos:line="1232" pos:column="8">int<pos:position pos:line="1232" pos:column="11"/></name></type> <name pos:line="1232" pos:column="12">x_logger<pos:position pos:line="1232" pos:column="20"/></name><parameter_list pos:line="1232" pos:column="20">(<parameter><decl><type><name pos:line="1232" pos:column="21">request_rec<pos:position pos:line="1232" pos:column="32"/></name> <modifier pos:line="1232" pos:column="33">*<pos:position pos:line="1232" pos:column="34"/></modifier></type><name pos:line="1232" pos:column="34">r<pos:position pos:line="1232" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1232" pos:column="36"/></parameter_list>
<block pos:line="1233" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="1235" pos:column="5">x_cfg<pos:position pos:line="1235" pos:column="10"/></name> <modifier pos:line="1235" pos:column="11">*<pos:position pos:line="1235" pos:column="12"/></modifier></type><name pos:line="1235" pos:column="12">cfg<pos:position pos:line="1235" pos:column="15"/></name></decl>;<pos:position pos:line="1235" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="1237" pos:column="5">cfg<pos:position pos:line="1237" pos:column="8"/></name> <operator pos:line="1237" pos:column="9">=<pos:position pos:line="1237" pos:column="10"/></operator> <call><name pos:line="1237" pos:column="11">our_dconfig<pos:position pos:line="1237" pos:column="22"/></name><argument_list pos:line="1237" pos:column="22">(<argument><expr><name pos:line="1237" pos:column="23">r<pos:position pos:line="1237" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1237" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1237" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1238" pos:column="5">trace_add<pos:position pos:line="1238" pos:column="14"/></name><argument_list pos:line="1238" pos:column="14">(<argument><expr><name><name pos:line="1238" pos:column="15">r<pos:position pos:line="1238" pos:column="16"/></name><operator pos:line="1238" pos:column="16">-&gt;<pos:position pos:line="1238" pos:column="21"/></operator><name pos:line="1238" pos:column="18">server<pos:position pos:line="1238" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="1238" pos:column="26">r<pos:position pos:line="1238" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1238" pos:column="29">cfg<pos:position pos:line="1238" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1238" pos:column="34">"x_logger()"<pos:position pos:line="1238" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="1238" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1238" pos:column="48"/></expr_stmt>
    <return pos:line="1239" pos:column="5">return <expr><name pos:line="1239" pos:column="12">DECLINED<pos:position pos:line="1239" pos:column="20"/></name></expr>;<pos:position pos:line="1239" pos:column="21"/></return>
}<pos:position pos:line="1240" pos:column="2"/></block></function>

<comment type="block" pos:line="1242" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1243" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1244" pos:column="1">/* Which functions are responsible for which hooks in the server.           */</comment>
<comment type="block" pos:line="1245" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1246" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1247" pos:column="1">/*
 * Each function our module provides to handle a particular hook is
 * specified here.  The functions are registered using
 * ap_hook_foo(name, predecessors, successors, position)
 * where foo is the name of the hook.
 *
 * The args are as follows:
 * name         -&gt; the name of the function to call.
 * predecessors -&gt; a list of modules whose calls to this hook must be
 *                 invoked before this module.
 * successors   -&gt; a list of modules whose calls to this hook must be
 *                 invoked after this module.
 * position     -&gt; The relative position of this module.  One of
 *                 APR_HOOK_FIRST, APR_HOOK_MIDDLE, or APR_HOOK_LAST.
 *                 Most modules will use APR_HOOK_MIDDLE.  If multiple
 *                 modules use the same relative position, Apache will
 *                 determine which to call first.
 *                 If your module relies on another module to run first,
 *                 or another module running after yours, use the
 *                 predecessors and/or successors.
 *
 * The number in brackets indicates the order in which the routine is called
 * during request processing.  Note that not all routines are necessarily
 * called (such as if a resource doesn't have access restrictions).
 * The actual delivery of content to the browser [9] is not handled by
 * a hook; see the handler declarations below.
 */</comment>
<function><specifier pos:line="1274" pos:column="1">static<pos:position pos:line="1274" pos:column="7"/></specifier> <type><name pos:line="1274" pos:column="8">void<pos:position pos:line="1274" pos:column="12"/></name></type> <name pos:line="1274" pos:column="13">x_register_hooks<pos:position pos:line="1274" pos:column="29"/></name><parameter_list pos:line="1274" pos:column="29">(<parameter><decl><type><name pos:line="1274" pos:column="30">apr_pool_t<pos:position pos:line="1274" pos:column="40"/></name> <modifier pos:line="1274" pos:column="41">*<pos:position pos:line="1274" pos:column="42"/></modifier></type><name pos:line="1274" pos:column="42">p<pos:position pos:line="1274" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1274" pos:column="44"/></parameter_list>
<block pos:line="1275" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="1276" pos:column="5">ap_hook_pre_config<pos:position pos:line="1276" pos:column="23"/></name><argument_list pos:line="1276" pos:column="23">(<argument><expr><name pos:line="1276" pos:column="24">x_pre_config<pos:position pos:line="1276" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="38">NULL<pos:position pos:line="1276" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="44">NULL<pos:position pos:line="1276" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="50">APR_HOOK_MIDDLE<pos:position pos:line="1276" pos:column="65"/></name></expr></argument>)<pos:position pos:line="1276" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="1276" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1277" pos:column="5">ap_hook_post_config<pos:position pos:line="1277" pos:column="24"/></name><argument_list pos:line="1277" pos:column="24">(<argument><expr><name pos:line="1277" pos:column="25">x_post_config<pos:position pos:line="1277" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="40">NULL<pos:position pos:line="1277" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="46">NULL<pos:position pos:line="1277" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="52">APR_HOOK_MIDDLE<pos:position pos:line="1277" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1277" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1277" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1278" pos:column="5">ap_hook_open_logs<pos:position pos:line="1278" pos:column="22"/></name><argument_list pos:line="1278" pos:column="22">(<argument><expr><name pos:line="1278" pos:column="23">x_open_logs<pos:position pos:line="1278" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1278" pos:column="36">NULL<pos:position pos:line="1278" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1278" pos:column="42">NULL<pos:position pos:line="1278" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1278" pos:column="48">APR_HOOK_MIDDLE<pos:position pos:line="1278" pos:column="63"/></name></expr></argument>)<pos:position pos:line="1278" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1278" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1279" pos:column="5">ap_hook_child_init<pos:position pos:line="1279" pos:column="23"/></name><argument_list pos:line="1279" pos:column="23">(<argument><expr><name pos:line="1279" pos:column="24">x_child_init<pos:position pos:line="1279" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1279" pos:column="38">NULL<pos:position pos:line="1279" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1279" pos:column="44">NULL<pos:position pos:line="1279" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="1279" pos:column="50">APR_HOOK_MIDDLE<pos:position pos:line="1279" pos:column="65"/></name></expr></argument>)<pos:position pos:line="1279" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="1279" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1280" pos:column="5">ap_hook_handler<pos:position pos:line="1280" pos:column="20"/></name><argument_list pos:line="1280" pos:column="20">(<argument><expr><name pos:line="1280" pos:column="21">x_handler<pos:position pos:line="1280" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="1280" pos:column="32">NULL<pos:position pos:line="1280" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="1280" pos:column="38">NULL<pos:position pos:line="1280" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1280" pos:column="44">APR_HOOK_MIDDLE<pos:position pos:line="1280" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1280" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1280" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1281" pos:column="5">ap_hook_quick_handler<pos:position pos:line="1281" pos:column="26"/></name><argument_list pos:line="1281" pos:column="26">(<argument><expr><name pos:line="1281" pos:column="27">x_quick_handler<pos:position pos:line="1281" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1281" pos:column="44">NULL<pos:position pos:line="1281" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="1281" pos:column="50">NULL<pos:position pos:line="1281" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1281" pos:column="56">APR_HOOK_MIDDLE<pos:position pos:line="1281" pos:column="71"/></name></expr></argument>)<pos:position pos:line="1281" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="1281" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1282" pos:column="5">ap_hook_pre_connection<pos:position pos:line="1282" pos:column="27"/></name><argument_list pos:line="1282" pos:column="27">(<argument><expr><name pos:line="1282" pos:column="28">x_pre_connection<pos:position pos:line="1282" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="1282" pos:column="46">NULL<pos:position pos:line="1282" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1282" pos:column="52">NULL<pos:position pos:line="1282" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1282" pos:column="58">APR_HOOK_MIDDLE<pos:position pos:line="1282" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1282" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="1282" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1283" pos:column="5">ap_hook_process_connection<pos:position pos:line="1283" pos:column="31"/></name><argument_list pos:line="1283" pos:column="31">(<argument><expr><name pos:line="1283" pos:column="32">x_process_connection<pos:position pos:line="1283" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1283" pos:column="54">NULL<pos:position pos:line="1283" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="1283" pos:column="60">NULL<pos:position pos:line="1283" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="1283" pos:column="66">APR_HOOK_MIDDLE<pos:position pos:line="1283" pos:column="81"/></name></expr></argument>)<pos:position pos:line="1283" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="1283" pos:column="83"/></expr_stmt>
    <comment type="block" pos:line="1284" pos:column="5">/* [1] post read_request handling */</comment>
    <expr_stmt><expr><call><name pos:line="1285" pos:column="5">ap_hook_post_read_request<pos:position pos:line="1285" pos:column="30"/></name><argument_list pos:line="1285" pos:column="30">(<argument><expr><name pos:line="1285" pos:column="31">x_post_read_request<pos:position pos:line="1285" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1285" pos:column="52">NULL<pos:position pos:line="1285" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1285" pos:column="58">NULL<pos:position pos:line="1285" pos:column="62"/></name></expr></argument>,
                              <argument><expr><name pos:line="1286" pos:column="31">APR_HOOK_MIDDLE<pos:position pos:line="1286" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1286" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1286" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1287" pos:column="5">ap_hook_log_transaction<pos:position pos:line="1287" pos:column="28"/></name><argument_list pos:line="1287" pos:column="28">(<argument><expr><name pos:line="1287" pos:column="29">x_logger<pos:position pos:line="1287" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1287" pos:column="39">NULL<pos:position pos:line="1287" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1287" pos:column="45">NULL<pos:position pos:line="1287" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="1287" pos:column="51">APR_HOOK_MIDDLE<pos:position pos:line="1287" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1287" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1287" pos:column="68"/></expr_stmt>
<cpp:if pos:line="1288" pos:column="1">#<cpp:directive pos:line="1288" pos:column="2">if<pos:position pos:line="1288" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="1288" pos:column="5">0<pos:position pos:line="1288" pos:column="6"/></literal></expr></cpp:if>
    ap_hook_http_scheme(x_http_scheme, NULL, NULL, APR_HOOK_MIDDLE);
    ap_hook_default_port(x_default_port, NULL, NULL, APR_HOOK_MIDDLE);
<cpp:endif pos:line="1291" pos:column="1">#<cpp:directive pos:line="1291" pos:column="2">endif<pos:position pos:line="1291" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="1292" pos:column="5">ap_hook_translate_name<pos:position pos:line="1292" pos:column="27"/></name><argument_list pos:line="1292" pos:column="27">(<argument><expr><name pos:line="1292" pos:column="28">x_translate_handler<pos:position pos:line="1292" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1292" pos:column="49">NULL<pos:position pos:line="1292" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="1292" pos:column="55">NULL<pos:position pos:line="1292" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="1292" pos:column="61">APR_HOOK_MIDDLE<pos:position pos:line="1292" pos:column="76"/></name></expr></argument>)<pos:position pos:line="1292" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="1292" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1293" pos:column="5">ap_hook_map_to_storage<pos:position pos:line="1293" pos:column="27"/></name><argument_list pos:line="1293" pos:column="27">(<argument><expr><name pos:line="1293" pos:column="28">x_map_to_storage_handler<pos:position pos:line="1293" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1293" pos:column="54">NULL<pos:position pos:line="1293" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="1293" pos:column="59">NULL<pos:position pos:line="1293" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="1293" pos:column="65">APR_HOOK_MIDDLE<pos:position pos:line="1293" pos:column="80"/></name></expr></argument>)<pos:position pos:line="1293" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="1293" pos:column="82"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1294" pos:column="5">ap_hook_header_parser<pos:position pos:line="1294" pos:column="26"/></name><argument_list pos:line="1294" pos:column="26">(<argument><expr><name pos:line="1294" pos:column="27">x_header_parser_handler<pos:position pos:line="1294" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="52">NULL<pos:position pos:line="1294" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="58">NULL<pos:position pos:line="1294" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="64">APR_HOOK_MIDDLE<pos:position pos:line="1294" pos:column="79"/></name></expr></argument>)<pos:position pos:line="1294" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1294" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1295" pos:column="5">ap_hook_check_user_id<pos:position pos:line="1295" pos:column="26"/></name><argument_list pos:line="1295" pos:column="26">(<argument><expr><name pos:line="1295" pos:column="27">x_check_user_id<pos:position pos:line="1295" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1295" pos:column="44">NULL<pos:position pos:line="1295" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="1295" pos:column="50">NULL<pos:position pos:line="1295" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1295" pos:column="56">APR_HOOK_MIDDLE<pos:position pos:line="1295" pos:column="71"/></name></expr></argument>)<pos:position pos:line="1295" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="1295" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1296" pos:column="5">ap_hook_fixups<pos:position pos:line="1296" pos:column="19"/></name><argument_list pos:line="1296" pos:column="19">(<argument><expr><name pos:line="1296" pos:column="20">x_fixer_upper<pos:position pos:line="1296" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="35">NULL<pos:position pos:line="1296" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="41">NULL<pos:position pos:line="1296" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="47">APR_HOOK_MIDDLE<pos:position pos:line="1296" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1296" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1296" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1297" pos:column="5">ap_hook_type_checker<pos:position pos:line="1297" pos:column="25"/></name><argument_list pos:line="1297" pos:column="25">(<argument><expr><name pos:line="1297" pos:column="26">x_type_checker<pos:position pos:line="1297" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1297" pos:column="42">NULL<pos:position pos:line="1297" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1297" pos:column="48">NULL<pos:position pos:line="1297" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1297" pos:column="54">APR_HOOK_MIDDLE<pos:position pos:line="1297" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1297" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1297" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1298" pos:column="5">ap_hook_access_checker<pos:position pos:line="1298" pos:column="27"/></name><argument_list pos:line="1298" pos:column="27">(<argument><expr><name pos:line="1298" pos:column="28">x_access_checker<pos:position pos:line="1298" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="1298" pos:column="46">NULL<pos:position pos:line="1298" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1298" pos:column="52">NULL<pos:position pos:line="1298" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1298" pos:column="58">APR_HOOK_MIDDLE<pos:position pos:line="1298" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1298" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="1298" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1299" pos:column="5">ap_hook_auth_checker<pos:position pos:line="1299" pos:column="25"/></name><argument_list pos:line="1299" pos:column="25">(<argument><expr><name pos:line="1299" pos:column="26">x_auth_checker<pos:position pos:line="1299" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1299" pos:column="42">NULL<pos:position pos:line="1299" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1299" pos:column="48">NULL<pos:position pos:line="1299" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1299" pos:column="54">APR_HOOK_MIDDLE<pos:position pos:line="1299" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1299" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1299" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1300" pos:column="5">ap_hook_insert_filter<pos:position pos:line="1300" pos:column="26"/></name><argument_list pos:line="1300" pos:column="26">(<argument><expr><name pos:line="1300" pos:column="27">x_insert_filter<pos:position pos:line="1300" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1300" pos:column="44">NULL<pos:position pos:line="1300" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="1300" pos:column="50">NULL<pos:position pos:line="1300" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1300" pos:column="56">APR_HOOK_MIDDLE<pos:position pos:line="1300" pos:column="71"/></name></expr></argument>)<pos:position pos:line="1300" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="1300" pos:column="73"/></expr_stmt>
}<pos:position pos:line="1301" pos:column="2"/></block></function>

<comment type="block" pos:line="1303" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1304" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1305" pos:column="1">/* All of the routines have been declared now.  Here's the list of          */</comment>
<comment type="block" pos:line="1306" pos:column="1">/* directives specific to our module, and information about where they      */</comment>
<comment type="block" pos:line="1307" pos:column="1">/* may appear and how the command parser should pass them to us for         */</comment>
<comment type="block" pos:line="1308" pos:column="1">/* processing.  Note that care must be taken to ensure that there are NO    */</comment>
<comment type="block" pos:line="1309" pos:column="1">/* collisions of directive names between modules.                           */</comment>
<comment type="block" pos:line="1310" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1311" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1312" pos:column="1">/*
 * List of directives specific to our module.
 */</comment>
<decl_stmt><decl><specifier pos:line="1315" pos:column="1">static<pos:position pos:line="1315" pos:column="7"/></specifier> <type><specifier pos:line="1315" pos:column="8">const<pos:position pos:line="1315" pos:column="13"/></specifier> <name pos:line="1315" pos:column="14">command_rec<pos:position pos:line="1315" pos:column="25"/></name></type> <name><name pos:line="1315" pos:column="26">x_cmds<pos:position pos:line="1315" pos:column="32"/></name><index pos:line="1315" pos:column="32">[]<pos:position pos:line="1315" pos:column="34"/></index></name> <init pos:line="1315" pos:column="35">=
<expr><block pos:line="1316" pos:column="1">{
    <expr><call><name pos:line="1317" pos:column="5">AP_INIT_NO_ARGS<pos:position pos:line="1317" pos:column="20"/></name><argument_list pos:line="1317" pos:column="20">(
        <argument><expr><literal type="string" pos:line="1318" pos:column="9">"Example"<pos:position pos:line="1318" pos:column="18"/></literal></expr></argument>,                          <comment type="block" pos:line="1318" pos:column="45">/* directive name */</comment>
        <argument><expr><name pos:line="1319" pos:column="9">cmd_example<pos:position pos:line="1319" pos:column="20"/></name></expr></argument>,                        <comment type="block" pos:line="1319" pos:column="45">/* config action routine */</comment>
        <argument><expr><name pos:line="1320" pos:column="9">NULL<pos:position pos:line="1320" pos:column="13"/></name></expr></argument>,                               <comment type="block" pos:line="1320" pos:column="45">/* argument to include in call */</comment>
        <argument><expr><name pos:line="1321" pos:column="9">OR_OPTIONS<pos:position pos:line="1321" pos:column="19"/></name></expr></argument>,                         <comment type="block" pos:line="1321" pos:column="45">/* where available */</comment>
        <argument><expr><literal type="string" pos:line="1322" pos:column="9">"Example directive - no arguments"<pos:position pos:line="1322" pos:column="43"/></literal></expr></argument>  <comment type="block" pos:line="1322" pos:column="45">/* directive description */</comment>
    )<pos:position pos:line="1323" pos:column="6"/></argument_list></call></expr>,
    <expr><block pos:line="1324" pos:column="5">{<expr><name pos:line="1324" pos:column="6">NULL<pos:position pos:line="1324" pos:column="10"/></name></expr>}<pos:position pos:line="1324" pos:column="11"/></block></expr>
}<pos:position pos:line="1325" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="1325" pos:column="3"/></decl_stmt>
<comment type="block" pos:line="1326" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1327" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1328" pos:column="1">/* Finally, the list of callback routines and data structures that provide  */</comment>
<comment type="block" pos:line="1329" pos:column="1">/* the static hooks into our module from the other parts of the server.     */</comment>
<comment type="block" pos:line="1330" pos:column="1">/*                                                                          */</comment>
<comment type="block" pos:line="1331" pos:column="1">/*--------------------------------------------------------------------------*/</comment>
<comment type="block" pos:line="1332" pos:column="1">/*
 * Module definition for configuration.  If a particular callback is not
 * needed, replace its routine name below with the word NULL.
 */</comment>
<decl_stmt><decl><type><name pos:line="1336" pos:column="1">module<pos:position pos:line="1336" pos:column="7"/></name> <name pos:line="1336" pos:column="8">AP_MODULE_DECLARE_DATA<pos:position pos:line="1336" pos:column="30"/></name></type> <name pos:line="1336" pos:column="31">example_module<pos:position pos:line="1336" pos:column="45"/></name> <init pos:line="1336" pos:column="46">=
<expr><block pos:line="1337" pos:column="1">{
    <expr><name pos:line="1338" pos:column="5">STANDARD20_MODULE_STUFF<pos:position pos:line="1338" pos:column="28"/></name></expr>,
    <expr><name pos:line="1339" pos:column="5">x_create_dir_config<pos:position pos:line="1339" pos:column="24"/></name></expr>,    <comment type="block" pos:line="1339" pos:column="29">/* per-directory config creator */</comment>
    <expr><name pos:line="1340" pos:column="5">x_merge_dir_config<pos:position pos:line="1340" pos:column="23"/></name></expr>,     <comment type="block" pos:line="1340" pos:column="29">/* dir config merger */</comment>
    <expr><name pos:line="1341" pos:column="5">x_create_server_config<pos:position pos:line="1341" pos:column="27"/></name></expr>, <comment type="block" pos:line="1341" pos:column="29">/* server config creator */</comment>
    <expr><name pos:line="1342" pos:column="5">x_merge_server_config<pos:position pos:line="1342" pos:column="26"/></name></expr>,  <comment type="block" pos:line="1342" pos:column="29">/* server config merger */</comment>
    <expr><name pos:line="1343" pos:column="5">x_cmds<pos:position pos:line="1343" pos:column="11"/></name></expr>,                 <comment type="block" pos:line="1343" pos:column="29">/* command table */</comment>
    <expr><name pos:line="1344" pos:column="5">x_register_hooks<pos:position pos:line="1344" pos:column="21"/></name></expr>,       <comment type="block" pos:line="1344" pos:column="29">/* set up other request processing hooks */</comment>
}<pos:position pos:line="1345" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="1345" pos:column="3"/></decl_stmt>
</unit>
