<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/repos/httpd-2.0.43/srclib/apr/locks/netware/thread_cond.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * &lt;http://www.apache.org/&gt;.
 */</comment>

<cpp:include pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">include<pos:position pos:line="55" pos:column="9"/></cpp:directive> <cpp:file pos:line="55" pos:column="10">&lt;nks/errno.h&gt;<pos:position pos:line="55" pos:column="26"/></cpp:file></cpp:include>

<cpp:include pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">include<pos:position pos:line="57" pos:column="9"/></cpp:directive> <cpp:file pos:line="57" pos:column="10">"apr.h"<pos:position pos:line="57" pos:column="17"/></cpp:file></cpp:include>
<cpp:include pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">include<pos:position pos:line="58" pos:column="9"/></cpp:directive> <cpp:file pos:line="58" pos:column="10">"apr_private.h"<pos:position pos:line="58" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">include<pos:position pos:line="59" pos:column="9"/></cpp:directive> <cpp:file pos:line="59" pos:column="10">"apr_general.h"<pos:position pos:line="59" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">include<pos:position pos:line="60" pos:column="9"/></cpp:directive> <cpp:file pos:line="60" pos:column="10">"apr_strings.h"<pos:position pos:line="60" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">include<pos:position pos:line="61" pos:column="9"/></cpp:directive> <cpp:file pos:line="61" pos:column="10">"thread_mutex.h"<pos:position pos:line="61" pos:column="26"/></cpp:file></cpp:include>
<cpp:include pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">include<pos:position pos:line="62" pos:column="9"/></cpp:directive> <cpp:file pos:line="62" pos:column="10">"thread_cond.h"<pos:position pos:line="62" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">include<pos:position pos:line="63" pos:column="9"/></cpp:directive> <cpp:file pos:line="63" pos:column="10">"apr_portable.h"<pos:position pos:line="63" pos:column="26"/></cpp:file></cpp:include>

<function><specifier pos:line="65" pos:column="1">static<pos:position pos:line="65" pos:column="7"/></specifier> <type><name pos:line="65" pos:column="8">apr_status_t<pos:position pos:line="65" pos:column="20"/></name></type> <name pos:line="65" pos:column="21">thread_cond_cleanup<pos:position pos:line="65" pos:column="40"/></name><parameter_list pos:line="65" pos:column="40">(<parameter><decl><type><name pos:line="65" pos:column="41">void<pos:position pos:line="65" pos:column="45"/></name> <modifier pos:line="65" pos:column="46">*<pos:position pos:line="65" pos:column="47"/></modifier></type><name pos:line="65" pos:column="47">data<pos:position pos:line="65" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="65" pos:column="52"/></parameter_list>
<block pos:line="66" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="67" pos:column="5">apr_thread_cond_t<pos:position pos:line="67" pos:column="22"/></name> <modifier pos:line="67" pos:column="23">*<pos:position pos:line="67" pos:column="24"/></modifier></type><name pos:line="67" pos:column="24">cond<pos:position pos:line="67" pos:column="28"/></name> <init pos:line="67" pos:column="29">= <expr><operator pos:line="67" pos:column="31">(<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="32">apr_thread_cond_t<pos:position pos:line="67" pos:column="49"/></name> <operator pos:line="67" pos:column="50">*<pos:position pos:line="67" pos:column="51"/></operator><operator pos:line="67" pos:column="51">)<pos:position pos:line="67" pos:column="52"/></operator><name pos:line="67" pos:column="52">data<pos:position pos:line="67" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="57"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">NXCondFree<pos:position pos:line="69" pos:column="15"/></name><argument_list pos:line="69" pos:column="15">(<argument><expr><name><name pos:line="69" pos:column="16">cond<pos:position pos:line="69" pos:column="20"/></name><operator pos:line="69" pos:column="20">-&gt;<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="22">cond<pos:position pos:line="69" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>        
    <return pos:line="70" pos:column="5">return <expr><name pos:line="70" pos:column="12">APR_SUCCESS<pos:position pos:line="70" pos:column="23"/></name></expr>;<pos:position pos:line="70" pos:column="24"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function> 

<macro><name pos:line="73" pos:column="1">APR_DECLARE<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument pos:line="73" pos:column="13">apr_status_t<pos:position pos:line="73" pos:column="25"/></argument>)<pos:position pos:line="73" pos:column="26"/></argument_list></macro> <macro><name pos:line="73" pos:column="27">apr_thread_cond_create<pos:position pos:line="73" pos:column="49"/></name><argument_list pos:line="73" pos:column="49">(<argument pos:line="73" pos:column="50">apr_thread_cond_t **cond<pos:position pos:line="73" pos:column="74"/></argument>,
                                                 <argument pos:line="74" pos:column="50">apr_pool_t *pool<pos:position pos:line="74" pos:column="66"/></argument>)<pos:position pos:line="74" pos:column="67"/></argument_list></macro>
<block pos:line="75" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">apr_thread_cond_t<pos:position pos:line="76" pos:column="22"/></name> <modifier pos:line="76" pos:column="23">*<pos:position pos:line="76" pos:column="24"/></modifier></type><name pos:line="76" pos:column="24">new_cond<pos:position pos:line="76" pos:column="32"/></name> <init pos:line="76" pos:column="33">= <expr><name pos:line="76" pos:column="35">NULL<pos:position pos:line="76" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="40"/></decl_stmt>

    <expr_stmt><expr><name pos:line="78" pos:column="5">new_cond<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="17">apr_thread_cond_t<pos:position pos:line="78" pos:column="34"/></name> <operator pos:line="78" pos:column="35">*<pos:position pos:line="78" pos:column="36"/></operator><operator pos:line="78" pos:column="36">)<pos:position pos:line="78" pos:column="37"/></operator><call><name pos:line="78" pos:column="37">apr_pcalloc<pos:position pos:line="78" pos:column="48"/></name><argument_list pos:line="78" pos:column="48">(<argument><expr><name pos:line="78" pos:column="49">pool<pos:position pos:line="78" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="55">sizeof<argument_list pos:line="78" pos:column="61">(<argument><expr><name pos:line="78" pos:column="62">apr_thread_cond_t<pos:position pos:line="78" pos:column="79"/></name></expr></argument>)<pos:position pos:line="78" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="82"/></expr_stmt>
	
	<if pos:line="80" pos:column="9">if<condition pos:line="80" pos:column="11">(<expr><name pos:line="80" pos:column="12">new_cond<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">==<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="23">NULL<pos:position pos:line="80" pos:column="27"/></name></expr>)<pos:position pos:line="80" pos:column="28"/></condition><then pos:line="80" pos:column="28"> <block pos:line="80" pos:column="29">{
        <return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">APR_ENOMEM<pos:position pos:line="81" pos:column="26"/></name></expr>;<pos:position pos:line="81" pos:column="27"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>     
    <expr_stmt><expr><name><name pos:line="83" pos:column="5">new_cond<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">-&gt;<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="15">pool<pos:position pos:line="83" pos:column="19"/></name></name> <operator pos:line="83" pos:column="20">=<pos:position pos:line="83" pos:column="21"/></operator> <name pos:line="83" pos:column="22">pool<pos:position pos:line="83" pos:column="26"/></name></expr>;<pos:position pos:line="83" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="85" pos:column="5">new_cond<pos:position pos:line="85" pos:column="13"/></name><operator pos:line="85" pos:column="13">-&gt;<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="15">cond<pos:position pos:line="85" pos:column="19"/></name></name> <operator pos:line="85" pos:column="20">=<pos:position pos:line="85" pos:column="21"/></operator> <call><name pos:line="85" pos:column="22">NXCondAlloc<pos:position pos:line="85" pos:column="33"/></name><argument_list pos:line="85" pos:column="33">(<argument><expr><name pos:line="85" pos:column="34">NULL<pos:position pos:line="85" pos:column="38"/></name></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt>
    
    <if pos:line="87" pos:column="5">if<condition pos:line="87" pos:column="7">(<expr><name><name pos:line="87" pos:column="8">new_cond<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">-&gt;<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="18">cond<pos:position pos:line="87" pos:column="22"/></name></name> <operator pos:line="87" pos:column="23">==<pos:position pos:line="87" pos:column="25"/></operator> <name pos:line="87" pos:column="26">NULL<pos:position pos:line="87" pos:column="30"/></name></expr>)<pos:position pos:line="87" pos:column="31"/></condition><then pos:line="87" pos:column="31">
        <block type="pseudo"><return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">APR_ENOMEM<pos:position pos:line="88" pos:column="26"/></name></expr>;<pos:position pos:line="88" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="90" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="90" pos:column="30"/></name><argument_list pos:line="90" pos:column="30">(<argument><expr><name><name pos:line="90" pos:column="31">new_cond<pos:position pos:line="90" pos:column="39"/></name><operator pos:line="90" pos:column="39">-&gt;<pos:position pos:line="90" pos:column="44"/></operator><name pos:line="90" pos:column="41">pool<pos:position pos:line="90" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="47">new_cond<pos:position pos:line="90" pos:column="55"/></name></expr></argument>, 
                                <argument><expr><operator pos:line="91" pos:column="33">(<pos:position pos:line="91" pos:column="34"/></operator><name pos:line="91" pos:column="34">void<pos:position pos:line="91" pos:column="38"/></name><operator pos:line="91" pos:column="38">*<pos:position pos:line="91" pos:column="39"/></operator><operator pos:line="91" pos:column="39">)<pos:position pos:line="91" pos:column="40"/></operator><name pos:line="91" pos:column="40">thread_cond_cleanup<pos:position pos:line="91" pos:column="59"/></name></expr></argument>,
                                <argument><expr><name pos:line="92" pos:column="33">apr_pool_cleanup_null<pos:position pos:line="92" pos:column="54"/></name></expr></argument>)<pos:position pos:line="92" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt>
   <expr_stmt><expr><operator pos:line="93" pos:column="4">*<pos:position pos:line="93" pos:column="5"/></operator><name pos:line="93" pos:column="5">cond<pos:position pos:line="93" pos:column="9"/></name> <operator pos:line="93" pos:column="10">=<pos:position pos:line="93" pos:column="11"/></operator> <name pos:line="93" pos:column="12">new_cond<pos:position pos:line="93" pos:column="20"/></name></expr>;<pos:position pos:line="93" pos:column="21"/></expr_stmt>
    <return pos:line="94" pos:column="5">return <expr><name pos:line="94" pos:column="12">APR_SUCCESS<pos:position pos:line="94" pos:column="23"/></name></expr>;<pos:position pos:line="94" pos:column="24"/></return>
}<pos:position pos:line="95" pos:column="2"/></block>

<macro><name pos:line="97" pos:column="1">APR_DECLARE<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument pos:line="97" pos:column="13">apr_status_t<pos:position pos:line="97" pos:column="25"/></argument>)<pos:position pos:line="97" pos:column="26"/></argument_list></macro> <macro><name pos:line="97" pos:column="27">apr_thread_cond_wait<pos:position pos:line="97" pos:column="47"/></name><argument_list pos:line="97" pos:column="47">(<argument pos:line="97" pos:column="48">apr_thread_cond_t *cond<pos:position pos:line="97" pos:column="71"/></argument>,
                                               <argument pos:line="98" pos:column="48">apr_thread_mutex_t *mutex<pos:position pos:line="98" pos:column="73"/></argument>)<pos:position pos:line="98" pos:column="74"/></argument_list></macro>
<block pos:line="99" pos:column="1">{
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><call><name pos:line="100" pos:column="9">NXCondWait<pos:position pos:line="100" pos:column="19"/></name><argument_list pos:line="100" pos:column="19">(<argument><expr><name><name pos:line="100" pos:column="20">cond<pos:position pos:line="100" pos:column="24"/></name><operator pos:line="100" pos:column="24">-&gt;<pos:position pos:line="100" pos:column="29"/></operator><name pos:line="100" pos:column="26">cond<pos:position pos:line="100" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="32">mutex<pos:position pos:line="100" pos:column="37"/></name><operator pos:line="100" pos:column="37">-&gt;<pos:position pos:line="100" pos:column="42"/></operator><name pos:line="100" pos:column="39">mutex<pos:position pos:line="100" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="45"/></argument_list></call> <operator pos:line="100" pos:column="46">!=<pos:position pos:line="100" pos:column="48"/></operator> <literal type="number" pos:line="100" pos:column="49">0<pos:position pos:line="100" pos:column="50"/></literal></expr>)<pos:position pos:line="100" pos:column="51"/></condition><then pos:line="100" pos:column="51">
        <block type="pseudo"><return pos:line="101" pos:column="9">return <expr><name pos:line="101" pos:column="16">APR_EINTR<pos:position pos:line="101" pos:column="25"/></name></expr>;<pos:position pos:line="101" pos:column="26"/></return></block></then></if>
    <return pos:line="102" pos:column="5">return <expr><name pos:line="102" pos:column="12">APR_SUCCESS<pos:position pos:line="102" pos:column="23"/></name></expr>;<pos:position pos:line="102" pos:column="24"/></return>
}<pos:position pos:line="103" pos:column="2"/></block>

<macro><name pos:line="105" pos:column="1">APR_DECLARE<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument pos:line="105" pos:column="13">apr_status_t<pos:position pos:line="105" pos:column="25"/></argument>)<pos:position pos:line="105" pos:column="26"/></argument_list></macro> <macro><name pos:line="105" pos:column="27">apr_thread_cond_timedwait<pos:position pos:line="105" pos:column="52"/></name><argument_list pos:line="105" pos:column="52">(<argument pos:line="105" pos:column="53">apr_thread_cond_t *cond<pos:position pos:line="105" pos:column="76"/></argument>,
                                                    <argument pos:line="106" pos:column="53">apr_thread_mutex_t *mutex<pos:position pos:line="106" pos:column="78"/></argument>,
                                                    <argument pos:line="107" pos:column="53">apr_interval_time_t timeout<pos:position pos:line="107" pos:column="80"/></argument>)<pos:position pos:line="107" pos:column="81"/></argument_list></macro><block pos:line="107" pos:column="81">{
    <if pos:line="108" pos:column="5">if <condition pos:line="108" pos:column="8">(<expr><call><name pos:line="108" pos:column="9">NXCondTimedWait<pos:position pos:line="108" pos:column="24"/></name><argument_list pos:line="108" pos:column="24">(<argument><expr><name><name pos:line="108" pos:column="25">cond<pos:position pos:line="108" pos:column="29"/></name><operator pos:line="108" pos:column="29">-&gt;<pos:position pos:line="108" pos:column="34"/></operator><name pos:line="108" pos:column="31">cond<pos:position pos:line="108" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="37">mutex<pos:position pos:line="108" pos:column="42"/></name><operator pos:line="108" pos:column="42">-&gt;<pos:position pos:line="108" pos:column="47"/></operator><name pos:line="108" pos:column="44">mutex<pos:position pos:line="108" pos:column="49"/></name></name></expr></argument>, 
        <argument><expr><operator pos:line="109" pos:column="9">(<pos:position pos:line="109" pos:column="10"/></operator><name pos:line="109" pos:column="10">timeout<pos:position pos:line="109" pos:column="17"/></name><operator pos:line="109" pos:column="17">*<pos:position pos:line="109" pos:column="18"/></operator><literal type="number" pos:line="109" pos:column="18">1000<pos:position pos:line="109" pos:column="22"/></literal><operator pos:line="109" pos:column="22">)<pos:position pos:line="109" pos:column="23"/></operator><operator pos:line="109" pos:column="23">/<pos:position pos:line="109" pos:column="24"/></operator><call><name pos:line="109" pos:column="24">NXGetSystemTick<pos:position pos:line="109" pos:column="39"/></name><argument_list pos:line="109" pos:column="39">()<pos:position pos:line="109" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call> <operator pos:line="109" pos:column="43">==<pos:position pos:line="109" pos:column="45"/></operator> <name pos:line="109" pos:column="46">NX_ETIMEDOUT<pos:position pos:line="109" pos:column="58"/></name></expr>)<pos:position pos:line="109" pos:column="59"/></condition><then pos:line="109" pos:column="59"> <block pos:line="109" pos:column="60">{
        <return pos:line="110" pos:column="9">return <expr><name pos:line="110" pos:column="16">APR_TIMEUP<pos:position pos:line="110" pos:column="26"/></name></expr>;<pos:position pos:line="110" pos:column="27"/></return>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>
    <return pos:line="112" pos:column="5">return <expr><name pos:line="112" pos:column="12">APR_SUCCESS<pos:position pos:line="112" pos:column="23"/></name></expr>;<pos:position pos:line="112" pos:column="24"/></return>
}<pos:position pos:line="113" pos:column="2"/></block>

<macro><name pos:line="115" pos:column="1">APR_DECLARE<pos:position pos:line="115" pos:column="12"/></name><argument_list pos:line="115" pos:column="12">(<argument pos:line="115" pos:column="13">apr_status_t<pos:position pos:line="115" pos:column="25"/></argument>)<pos:position pos:line="115" pos:column="26"/></argument_list></macro> <macro><name pos:line="115" pos:column="27">apr_thread_cond_signal<pos:position pos:line="115" pos:column="49"/></name><argument_list pos:line="115" pos:column="49">(<argument pos:line="115" pos:column="50">apr_thread_cond_t *cond<pos:position pos:line="115" pos:column="73"/></argument>)<pos:position pos:line="115" pos:column="74"/></argument_list></macro>
<block pos:line="116" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">NXCondSignal<pos:position pos:line="117" pos:column="17"/></name><argument_list pos:line="117" pos:column="17">(<argument><expr><name><name pos:line="117" pos:column="18">cond<pos:position pos:line="117" pos:column="22"/></name><operator pos:line="117" pos:column="22">-&gt;<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="24">cond<pos:position pos:line="117" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="30"/></expr_stmt>
    <return pos:line="118" pos:column="5">return <expr><name pos:line="118" pos:column="12">APR_SUCCESS<pos:position pos:line="118" pos:column="23"/></name></expr>;<pos:position pos:line="118" pos:column="24"/></return>
}<pos:position pos:line="119" pos:column="2"/></block>

<macro><name pos:line="121" pos:column="1">APR_DECLARE<pos:position pos:line="121" pos:column="12"/></name><argument_list pos:line="121" pos:column="12">(<argument pos:line="121" pos:column="13">apr_status_t<pos:position pos:line="121" pos:column="25"/></argument>)<pos:position pos:line="121" pos:column="26"/></argument_list></macro> <macro><name pos:line="121" pos:column="27">apr_thread_cond_broadcast<pos:position pos:line="121" pos:column="52"/></name><argument_list pos:line="121" pos:column="52">(<argument pos:line="121" pos:column="53">apr_thread_cond_t *cond<pos:position pos:line="121" pos:column="76"/></argument>)<pos:position pos:line="121" pos:column="77"/></argument_list></macro>
<block pos:line="122" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">NXCondBroadcast<pos:position pos:line="123" pos:column="20"/></name><argument_list pos:line="123" pos:column="20">(<argument><expr><name><name pos:line="123" pos:column="21">cond<pos:position pos:line="123" pos:column="25"/></name><operator pos:line="123" pos:column="25">-&gt;<pos:position pos:line="123" pos:column="30"/></operator><name pos:line="123" pos:column="27">cond<pos:position pos:line="123" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="33"/></expr_stmt>
    <return pos:line="124" pos:column="5">return <expr><name pos:line="124" pos:column="12">APR_SUCCESS<pos:position pos:line="124" pos:column="23"/></name></expr>;<pos:position pos:line="124" pos:column="24"/></return>
}<pos:position pos:line="125" pos:column="2"/></block>

<macro><name pos:line="127" pos:column="1">APR_DECLARE<pos:position pos:line="127" pos:column="12"/></name><argument_list pos:line="127" pos:column="12">(<argument pos:line="127" pos:column="13">apr_status_t<pos:position pos:line="127" pos:column="25"/></argument>)<pos:position pos:line="127" pos:column="26"/></argument_list></macro> <macro><name pos:line="127" pos:column="27">apr_thread_cond_destroy<pos:position pos:line="127" pos:column="50"/></name><argument_list pos:line="127" pos:column="50">(<argument pos:line="127" pos:column="51">apr_thread_cond_t *cond<pos:position pos:line="127" pos:column="74"/></argument>)<pos:position pos:line="127" pos:column="75"/></argument_list></macro>
<block pos:line="128" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="129" pos:column="5">apr_status_t<pos:position pos:line="129" pos:column="17"/></name></type> <name pos:line="129" pos:column="18">stat<pos:position pos:line="129" pos:column="22"/></name></decl>;<pos:position pos:line="129" pos:column="23"/></decl_stmt>
    <if pos:line="130" pos:column="5">if <condition pos:line="130" pos:column="8">(<expr><operator pos:line="130" pos:column="9">(<pos:position pos:line="130" pos:column="10"/></operator><name pos:line="130" pos:column="10">stat<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">=<pos:position pos:line="130" pos:column="16"/></operator> <call><name pos:line="130" pos:column="17">thread_cond_cleanup<pos:position pos:line="130" pos:column="36"/></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name pos:line="130" pos:column="37">cond<pos:position pos:line="130" pos:column="41"/></name></expr></argument>)<pos:position pos:line="130" pos:column="42"/></argument_list></call><operator pos:line="130" pos:column="42">)<pos:position pos:line="130" pos:column="43"/></operator> <operator pos:line="130" pos:column="44">==<pos:position pos:line="130" pos:column="46"/></operator> <name pos:line="130" pos:column="47">APR_SUCCESS<pos:position pos:line="130" pos:column="58"/></name></expr>)<pos:position pos:line="130" pos:column="59"/></condition><then pos:line="130" pos:column="59"> <block pos:line="130" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">apr_pool_cleanup_kill<pos:position pos:line="131" pos:column="30"/></name><argument_list pos:line="131" pos:column="30">(<argument><expr><name><name pos:line="131" pos:column="31">cond<pos:position pos:line="131" pos:column="35"/></name><operator pos:line="131" pos:column="35">-&gt;<pos:position pos:line="131" pos:column="40"/></operator><name pos:line="131" pos:column="37">pool<pos:position pos:line="131" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="43">cond<pos:position pos:line="131" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="49">thread_cond_cleanup<pos:position pos:line="131" pos:column="68"/></name></expr></argument>)<pos:position pos:line="131" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="70"/></expr_stmt>
        <return pos:line="132" pos:column="9">return <expr><name pos:line="132" pos:column="16">APR_SUCCESS<pos:position pos:line="132" pos:column="27"/></name></expr>;<pos:position pos:line="132" pos:column="28"/></return>
    }<pos:position pos:line="133" pos:column="6"/></block></then></if>
    <return pos:line="134" pos:column="5">return <expr><name pos:line="134" pos:column="12">stat<pos:position pos:line="134" pos:column="16"/></name></expr>;<pos:position pos:line="134" pos:column="17"/></return>
}<pos:position pos:line="135" pos:column="2"/></block>

<macro><name pos:line="137" pos:column="1">APR_POOL_IMPLEMENT_ACCESSOR<pos:position pos:line="137" pos:column="28"/></name><argument_list pos:line="137" pos:column="28">(<argument pos:line="137" pos:column="29">thread_cond<pos:position pos:line="137" pos:column="40"/></argument>)<pos:position pos:line="137" pos:column="41"/></argument_list></macro>

</unit>
