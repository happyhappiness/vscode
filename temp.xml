<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.4.10/builtin/credential.c" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include<pos:position pos:line="1" pos:column="9"/></cpp:directive> <cpp:file pos:line="1" pos:column="10">"git-compat-util.h"<pos:position pos:line="1" pos:column="29"/></cpp:file></cpp:include>
<cpp:include pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">include<pos:position pos:line="2" pos:column="9"/></cpp:directive> <cpp:file pos:line="2" pos:column="10">"credential.h"<pos:position pos:line="2" pos:column="24"/></cpp:file></cpp:include>
<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include<pos:position pos:line="3" pos:column="9"/></cpp:directive> <cpp:file pos:line="3" pos:column="10">"builtin.h"<pos:position pos:line="3" pos:column="21"/></cpp:file></cpp:include>

<decl_stmt><decl><specifier pos:line="5" pos:column="1">static<pos:position pos:line="5" pos:column="7"/></specifier> <type><specifier pos:line="5" pos:column="8">const<pos:position pos:line="5" pos:column="13"/></specifier> <name pos:line="5" pos:column="14">char<pos:position pos:line="5" pos:column="18"/></name></type> <name><name pos:line="5" pos:column="19">usage_msg<pos:position pos:line="5" pos:column="28"/></name><index pos:line="5" pos:column="28">[]<pos:position pos:line="5" pos:column="30"/></index></name> <init pos:line="5" pos:column="31">=
	<expr><literal type="string" pos:line="6" pos:column="9">"git credential [fill|approve|reject]"<pos:position pos:line="6" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>

<function><type><name pos:line="8" pos:column="1">int<pos:position pos:line="8" pos:column="4"/></name></type> <name pos:line="8" pos:column="5">cmd_credential<pos:position pos:line="8" pos:column="19"/></name><parameter_list pos:line="8" pos:column="19">(<parameter><decl><type><name pos:line="8" pos:column="20">int<pos:position pos:line="8" pos:column="23"/></name></type> <name pos:line="8" pos:column="24">argc<pos:position pos:line="8" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="8" pos:column="30">const<pos:position pos:line="8" pos:column="35"/></specifier> <name pos:line="8" pos:column="36">char<pos:position pos:line="8" pos:column="40"/></name> <modifier pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></modifier><modifier pos:line="8" pos:column="42">*<pos:position pos:line="8" pos:column="43"/></modifier></type><name pos:line="8" pos:column="43">argv<pos:position pos:line="8" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="8" pos:column="49">const<pos:position pos:line="8" pos:column="54"/></specifier> <name pos:line="8" pos:column="55">char<pos:position pos:line="8" pos:column="59"/></name> <modifier pos:line="8" pos:column="60">*<pos:position pos:line="8" pos:column="61"/></modifier></type><name pos:line="8" pos:column="61">prefix<pos:position pos:line="8" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="8" pos:column="68"/></parameter_list>
<block pos:line="9" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">op<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">credential<pos:position pos:line="11" pos:column="26"/></name></name></type> <name pos:line="11" pos:column="27">c<pos:position pos:line="11" pos:column="28"/></name> <init pos:line="11" pos:column="29">= <expr><name pos:line="11" pos:column="31">CREDENTIAL_INIT<pos:position pos:line="11" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">op<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">argv<pos:position pos:line="13" pos:column="18"/></name><index pos:line="13" pos:column="18">[<expr><literal type="number" pos:line="13" pos:column="19">1<pos:position pos:line="13" pos:column="20"/></literal></expr>]<pos:position pos:line="13" pos:column="21"/></index></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">op<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">usage<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">usage_msg<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">credential_read<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="30">c<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">stdin<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call> <operator pos:line="17" pos:column="40">&lt;<pos:position pos:line="17" pos:column="44"/></operator> <literal type="number" pos:line="17" pos:column="42">0<pos:position pos:line="17" pos:column="43"/></literal></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"unable to read credential from stdin"<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">strcmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">op<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="25">"fill"<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">credential_fill<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="34">c<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">credential_write<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><operator pos:line="22" pos:column="34">&amp;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="35">c<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">stdout<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <elseif pos:line="23" pos:column="11">else <if pos:line="23" pos:column="16">if <condition pos:line="23" pos:column="19">(<expr><operator pos:line="23" pos:column="20">!<pos:position pos:line="23" pos:column="21"/></operator><call><name pos:line="23" pos:column="21">strcmp<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">op<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"approve"<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43"> <block pos:line="23" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">credential_approve<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><operator pos:line="24" pos:column="36">&amp;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="37">c<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if></elseif> <elseif pos:line="25" pos:column="11">else <if pos:line="25" pos:column="16">if <condition pos:line="25" pos:column="19">(<expr><operator pos:line="25" pos:column="20">!<pos:position pos:line="25" pos:column="21"/></operator><call><name pos:line="25" pos:column="21">strcmp<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">op<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="32">"reject"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42"> <block pos:line="25" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">credential_reject<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">c<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <else pos:line="27" pos:column="11">else <block pos:line="27" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">usage<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">usage_msg<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></else></if>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function>
</unit>
