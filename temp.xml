<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-5.8.0/contrib/examples/myplugin.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * /usr/share/doc/collectd/examples/myplugin.c
 *
 * A plugin template for collectd.
 *
 * Written by Sebastian Harl &lt;sh@tokkee.org&gt;
 *
 * This is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; only version 2 of the License is applicable.
 */</comment>

<comment type="block" pos:line="13" pos:column="1">/*
 * Notes:
 * - plugins are executed in parallel, thus, thread-safe
 *   functions need to be used
 * - each of the functions below (except module_register)
 *   is optional
 */</comment>

<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><operator pos:line="21" pos:column="5">!<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">HAVE_CONFIG_H<pos:position pos:line="21" pos:column="19"/></name></expr></cpp:if>

<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include<pos:position pos:line="23" pos:column="9"/></cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;stdlib.h&gt;<pos:position pos:line="23" pos:column="23"/></cpp:file></cpp:include>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include<pos:position pos:line="25" pos:column="9"/></cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;string.h&gt;<pos:position pos:line="25" pos:column="23"/></cpp:file></cpp:include>

<cpp:ifndef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifndef<pos:position pos:line="27" pos:column="8"/></cpp:directive> <name pos:line="27" pos:column="9">__USE_ISOC99<pos:position pos:line="27" pos:column="21"/></name></cpp:ifndef> <comment type="block" pos:line="27" pos:column="22">/* required for NAN */</comment>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define<pos:position pos:line="28" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">DISABLE_ISOC99<pos:position pos:line="28" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="28" pos:column="24">1<pos:position pos:line="28" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">define<pos:position pos:line="29" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="29" pos:column="9">__USE_ISOC99<pos:position pos:line="29" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="29" pos:column="22">1<pos:position pos:line="29" pos:column="23"/></cpp:value></cpp:define>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* !defined(__USE_ISOC99) */</comment>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include<pos:position pos:line="31" pos:column="9"/></cpp:directive> <cpp:file pos:line="31" pos:column="10">&lt;math.h&gt;<pos:position pos:line="31" pos:column="21"/></cpp:file></cpp:include>
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">DISABLE_ISOC99<pos:position pos:line="32" pos:column="19"/></name></expr></cpp:if>
<cpp:undef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">undef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">DISABLE_ISOC99<pos:position pos:line="33" pos:column="22"/></name></cpp:undef>
<cpp:undef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">undef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">__USE_ISOC99<pos:position pos:line="34" pos:column="20"/></name></cpp:undef>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* DISABLE_ISOC99 */</comment>

<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include<pos:position pos:line="37" pos:column="9"/></cpp:directive> <cpp:file pos:line="37" pos:column="10">&lt;time.h&gt;<pos:position pos:line="37" pos:column="21"/></cpp:file></cpp:include>

<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="39" pos:column="8">/* ! HAVE_CONFIG */</comment>

<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include<pos:position pos:line="41" pos:column="9"/></cpp:directive> <cpp:file pos:line="41" pos:column="10">&lt;collectd/collectd.h&gt;<pos:position pos:line="41" pos:column="34"/></cpp:file></cpp:include>

<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include<pos:position pos:line="43" pos:column="9"/></cpp:directive> <cpp:file pos:line="43" pos:column="10">&lt;collectd/common.h&gt;<pos:position pos:line="43" pos:column="32"/></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include<pos:position pos:line="44" pos:column="9"/></cpp:directive> <cpp:file pos:line="44" pos:column="10">&lt;collectd/plugin.h&gt;<pos:position pos:line="44" pos:column="32"/></cpp:file></cpp:include>

<comment type="block" pos:line="46" pos:column="1">/*
 * data source definition:
 * - name of the data source
 * - type of the data source (DS_TYPE_GAUGE, DS_TYPE_COUNTER)
 * - minimum allowed value
 * - maximum allowed value
 */</comment>
<decl_stmt><decl><specifier pos:line="53" pos:column="1">static<pos:position pos:line="53" pos:column="7"/></specifier> <type><name pos:line="53" pos:column="8">data_source_t<pos:position pos:line="53" pos:column="21"/></name></type> <name><name pos:line="53" pos:column="22">dsrc<pos:position pos:line="53" pos:column="26"/></name><index pos:line="53" pos:column="26">[<expr><literal type="number" pos:line="53" pos:column="27">1<pos:position pos:line="53" pos:column="28"/></literal></expr>]<pos:position pos:line="53" pos:column="29"/></index></name> <init pos:line="53" pos:column="30">= <expr><block pos:line="53" pos:column="32">{<expr><block pos:line="53" pos:column="33">{<expr><literal type="string" pos:line="53" pos:column="34">"my_ds"<pos:position pos:line="53" pos:column="41"/></literal></expr>, <expr><name pos:line="53" pos:column="43">DS_TYPE_GAUGE<pos:position pos:line="53" pos:column="56"/></name></expr>, <expr><literal type="number" pos:line="53" pos:column="58">0<pos:position pos:line="53" pos:column="59"/></literal></expr>, <expr><name pos:line="53" pos:column="61">NAN<pos:position pos:line="53" pos:column="64"/></name></expr>}<pos:position pos:line="53" pos:column="65"/></block></expr>}<pos:position pos:line="53" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="53" pos:column="67"/></decl_stmt>

<comment type="block" pos:line="55" pos:column="1">/*
 * data set definition:
 * - name of the data set
 * - number of data sources
 * - list of data sources
 *
 * NOTE: If you're defining a custom data-set, you have to make that known to
 * any servers as well. Else, the server is not able to store values using the
 * type defined by that data-set.
 * It is strongly recommended to use one of the types and data-sets
 * pre-defined in the types.db file.
 */</comment>
<decl_stmt><decl><specifier pos:line="67" pos:column="1">static<pos:position pos:line="67" pos:column="7"/></specifier> <type><name pos:line="67" pos:column="8">data_set_t<pos:position pos:line="67" pos:column="18"/></name></type> <name pos:line="67" pos:column="19">ds<pos:position pos:line="67" pos:column="21"/></name> <init pos:line="67" pos:column="22">= <expr><block pos:line="67" pos:column="24">{<expr><literal type="string" pos:line="67" pos:column="25">"myplugin"<pos:position pos:line="67" pos:column="35"/></literal></expr>, <expr><call><name pos:line="67" pos:column="37">STATIC_ARRAY_SIZE<pos:position pos:line="67" pos:column="54"/></name><argument_list pos:line="67" pos:column="54">(<argument><expr><name pos:line="67" pos:column="55">dsrc<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>, <expr><name pos:line="67" pos:column="62">dsrc<pos:position pos:line="67" pos:column="66"/></name></expr>}<pos:position pos:line="67" pos:column="67"/></block></expr></init></decl>;<pos:position pos:line="67" pos:column="68"/></decl_stmt>

<comment type="block" pos:line="69" pos:column="1">/*
 * This function is called once upon startup to initialize the plugin.
 */</comment>
<function><specifier pos:line="72" pos:column="1">static<pos:position pos:line="72" pos:column="7"/></specifier> <type><name pos:line="72" pos:column="8">int<pos:position pos:line="72" pos:column="11"/></name></type> <name pos:line="72" pos:column="12">my_init<pos:position pos:line="72" pos:column="19"/></name><parameter_list pos:line="72" pos:column="19">(<parameter><decl><type><name pos:line="72" pos:column="20">void<pos:position pos:line="72" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="72" pos:column="25"/></parameter_list> <block pos:line="72" pos:column="26">{
  <comment type="block" pos:line="73" pos:column="3">/* open sockets, initialize data structures, ... */</comment>

  <comment type="block" pos:line="75" pos:column="3">/* A return value != 0 indicates an error and causes the plugin to be
     disabled. */</comment>
  <return pos:line="77" pos:column="3">return <expr><literal type="number" pos:line="77" pos:column="10">0<pos:position pos:line="77" pos:column="11"/></literal></expr>;<pos:position pos:line="77" pos:column="12"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function> <comment type="block" pos:line="78" pos:column="3">/* static int my_init (void) */</comment>

<comment type="block" pos:line="80" pos:column="1">/*
 * This is a utility function used by the read callback to populate a
 * value_list_t and pass it to plugin_dispatch_values.
 */</comment>
<function><specifier pos:line="84" pos:column="1">static<pos:position pos:line="84" pos:column="7"/></specifier> <type><name pos:line="84" pos:column="8">int<pos:position pos:line="84" pos:column="11"/></name></type> <name pos:line="84" pos:column="12">my_submit<pos:position pos:line="84" pos:column="21"/></name><parameter_list pos:line="84" pos:column="21">(<parameter><decl><type><name pos:line="84" pos:column="22">gauge_t<pos:position pos:line="84" pos:column="29"/></name></type> <name pos:line="84" pos:column="30">value<pos:position pos:line="84" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="84" pos:column="36"/></parameter_list> <block pos:line="84" pos:column="37">{
  <decl_stmt><decl><type><name pos:line="85" pos:column="3">value_list_t<pos:position pos:line="85" pos:column="15"/></name></type> <name pos:line="85" pos:column="16">vl<pos:position pos:line="85" pos:column="18"/></name> <init pos:line="85" pos:column="19">= <expr><name pos:line="85" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="85" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="85" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="87" pos:column="3">/* Convert the gauge_t to a value_t and add it to the value_list_t. */</comment>
  <expr_stmt><expr><name><name pos:line="88" pos:column="3">vl<pos:position pos:line="88" pos:column="5"/></name><operator pos:line="88" pos:column="5">.<pos:position pos:line="88" pos:column="6"/></operator><name pos:line="88" pos:column="6">values<pos:position pos:line="88" pos:column="12"/></name></name> <operator pos:line="88" pos:column="13">=<pos:position pos:line="88" pos:column="14"/></operator> <operator pos:line="88" pos:column="15">&amp;<pos:position pos:line="88" pos:column="20"/></operator><operator pos:line="88" pos:column="16">(<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="17">value_t<pos:position pos:line="88" pos:column="24"/></name><operator pos:line="88" pos:column="24">)<pos:position pos:line="88" pos:column="25"/></operator><block pos:line="88" pos:column="25">{<expr><operator pos:line="88" pos:column="26">.<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="27">gauge<pos:position pos:line="88" pos:column="32"/></name> <operator pos:line="88" pos:column="33">=<pos:position pos:line="88" pos:column="34"/></operator> <name pos:line="88" pos:column="35">value<pos:position pos:line="88" pos:column="40"/></name></expr>}<pos:position pos:line="88" pos:column="41"/></block></expr>;<pos:position pos:line="88" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="89" pos:column="3">vl<pos:position pos:line="89" pos:column="5"/></name><operator pos:line="89" pos:column="5">.<pos:position pos:line="89" pos:column="6"/></operator><name pos:line="89" pos:column="6">values_len<pos:position pos:line="89" pos:column="16"/></name></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <literal type="number" pos:line="89" pos:column="19">1<pos:position pos:line="89" pos:column="20"/></literal></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="91" pos:column="3">/* Only set vl.time yourself if you update multiple metrics (i.e. you
   * have multiple calls to plugin_dispatch_values()) and they need to all
   * have the same timestamp. */</comment>
  <comment type="block" pos:line="94" pos:column="3">/* vl.time = cdtime(); */</comment>

  <expr_stmt><expr><call><name pos:line="96" pos:column="3">sstrncpy<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><name><name pos:line="96" pos:column="12">vl<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">.<pos:position pos:line="96" pos:column="15"/></operator><name pos:line="96" pos:column="15">plugin<pos:position pos:line="96" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="23">"myplugin"<pos:position pos:line="96" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="35">sizeof<argument_list pos:line="96" pos:column="41">(<argument><expr><name><name pos:line="96" pos:column="42">vl<pos:position pos:line="96" pos:column="44"/></name><operator pos:line="96" pos:column="44">.<pos:position pos:line="96" pos:column="45"/></operator><name pos:line="96" pos:column="45">plugin<pos:position pos:line="96" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="98" pos:column="3">/* it is strongly recommended to use a type defined in the types.db file
   * instead of a custom type */</comment>
  <expr_stmt><expr><call><name pos:line="100" pos:column="3">sstrncpy<pos:position pos:line="100" pos:column="11"/></name><argument_list pos:line="100" pos:column="11">(<argument><expr><name><name pos:line="100" pos:column="12">vl<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">.<pos:position pos:line="100" pos:column="15"/></operator><name pos:line="100" pos:column="15">type<pos:position pos:line="100" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="21">"myplugin"<pos:position pos:line="100" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="100" pos:column="33">sizeof<argument_list pos:line="100" pos:column="39">(<argument><expr><name><name pos:line="100" pos:column="40">vl<pos:position pos:line="100" pos:column="42"/></name><operator pos:line="100" pos:column="42">.<pos:position pos:line="100" pos:column="43"/></operator><name pos:line="100" pos:column="43">type<pos:position pos:line="100" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="100" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="50"/></expr_stmt>
  <comment type="block" pos:line="101" pos:column="3">/* optionally set vl.plugin_instance and vl.type_instance to reasonable
   * values (default: "") */</comment>

  <comment type="block" pos:line="104" pos:column="3">/* dispatch the values to collectd which passes them on to all registered
   * write functions */</comment>
  <return pos:line="106" pos:column="3">return <expr><call><name pos:line="106" pos:column="10">plugin_dispatch_values<pos:position pos:line="106" pos:column="32"/></name><argument_list pos:line="106" pos:column="32">(<argument><expr><operator pos:line="106" pos:column="33">&amp;<pos:position pos:line="106" pos:column="38"/></operator><name pos:line="106" pos:column="34">vl<pos:position pos:line="106" pos:column="36"/></name></expr></argument>)<pos:position pos:line="106" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="38"/></return>
}<pos:position pos:line="107" pos:column="2"/></block></function>

<comment type="block" pos:line="109" pos:column="1">/*
 * This function is called in regular intervalls to collect the data.
 */</comment>
<function><specifier pos:line="112" pos:column="1">static<pos:position pos:line="112" pos:column="7"/></specifier> <type><name pos:line="112" pos:column="8">int<pos:position pos:line="112" pos:column="11"/></name></type> <name pos:line="112" pos:column="12">my_read<pos:position pos:line="112" pos:column="19"/></name><parameter_list pos:line="112" pos:column="19">(<parameter><decl><type><name pos:line="112" pos:column="20">void<pos:position pos:line="112" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="112" pos:column="25"/></parameter_list> <block pos:line="112" pos:column="26">{
  <comment type="block" pos:line="113" pos:column="3">/* do the magic to read the data */</comment>
  <decl_stmt><decl><type><name pos:line="114" pos:column="3">gauge_t<pos:position pos:line="114" pos:column="10"/></name></type> <name pos:line="114" pos:column="11">value<pos:position pos:line="114" pos:column="16"/></name> <init pos:line="114" pos:column="17">= <expr><call><name pos:line="114" pos:column="19">random<pos:position pos:line="114" pos:column="25"/></name><argument_list pos:line="114" pos:column="25">()<pos:position pos:line="114" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="114" pos:column="28"/></decl_stmt>

  <if pos:line="116" pos:column="3">if <condition pos:line="116" pos:column="6">(<expr><call><name pos:line="116" pos:column="7">my_submit<pos:position pos:line="116" pos:column="16"/></name><argument_list pos:line="116" pos:column="16">(<argument><expr><name pos:line="116" pos:column="17">value<pos:position pos:line="116" pos:column="22"/></name></expr></argument>)<pos:position pos:line="116" pos:column="23"/></argument_list></call> <operator pos:line="116" pos:column="24">!=<pos:position pos:line="116" pos:column="26"/></operator> <literal type="number" pos:line="116" pos:column="27">0<pos:position pos:line="116" pos:column="28"/></literal></expr>)<pos:position pos:line="116" pos:column="29"/></condition><then pos:line="116" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="5">WARNING<pos:position pos:line="117" pos:column="12"/></name><argument_list pos:line="117" pos:column="12">(<argument><expr><literal type="string" pos:line="117" pos:column="13">"myplugin plugin: Dispatching a random value failed."<pos:position pos:line="117" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="68"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="119" pos:column="3">/* A return value != 0 indicates an error and the plugin will be skipped
   * for an increasing amount of time. */</comment>
  <return pos:line="121" pos:column="3">return <expr><literal type="number" pos:line="121" pos:column="10">0<pos:position pos:line="121" pos:column="11"/></literal></expr>;<pos:position pos:line="121" pos:column="12"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function> <comment type="block" pos:line="122" pos:column="3">/* static int my_read (void) */</comment>

<comment type="block" pos:line="124" pos:column="1">/*
 * This function is called after values have been dispatched to collectd.
 */</comment>
<function><specifier pos:line="127" pos:column="1">static<pos:position pos:line="127" pos:column="7"/></specifier> <type><name pos:line="127" pos:column="8">int<pos:position pos:line="127" pos:column="11"/></name></type> <name pos:line="127" pos:column="12">my_write<pos:position pos:line="127" pos:column="20"/></name><parameter_list pos:line="127" pos:column="20">(<parameter><decl><type><specifier pos:line="127" pos:column="21">const<pos:position pos:line="127" pos:column="26"/></specifier> <name pos:line="127" pos:column="27">data_set_t<pos:position pos:line="127" pos:column="37"/></name> <modifier pos:line="127" pos:column="38">*<pos:position pos:line="127" pos:column="39"/></modifier></type><name pos:line="127" pos:column="39">ds<pos:position pos:line="127" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="127" pos:column="43">const<pos:position pos:line="127" pos:column="48"/></specifier> <name pos:line="127" pos:column="49">value_list_t<pos:position pos:line="127" pos:column="61"/></name> <modifier pos:line="127" pos:column="62">*<pos:position pos:line="127" pos:column="63"/></modifier></type><name pos:line="127" pos:column="63">vl<pos:position pos:line="127" pos:column="65"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="128" pos:column="21">user_data_t<pos:position pos:line="128" pos:column="32"/></name> <modifier pos:line="128" pos:column="33">*<pos:position pos:line="128" pos:column="34"/></modifier></type><name pos:line="128" pos:column="34">ud<pos:position pos:line="128" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="128" pos:column="37"/></parameter_list> <block pos:line="128" pos:column="38">{
  <decl_stmt><decl><type><name pos:line="129" pos:column="3">char<pos:position pos:line="129" pos:column="7"/></name></type> <name><name pos:line="129" pos:column="8">name<pos:position pos:line="129" pos:column="12"/></name><index pos:line="129" pos:column="12">[<expr><literal type="number" pos:line="129" pos:column="13">1024<pos:position pos:line="129" pos:column="17"/></literal></expr>]<pos:position pos:line="129" pos:column="18"/></index></name> <init pos:line="129" pos:column="19">= <expr><literal type="string" pos:line="129" pos:column="21">""<pos:position pos:line="129" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="129" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="130" pos:column="3">int<pos:position pos:line="130" pos:column="6"/></name></type> <name pos:line="130" pos:column="7">i<pos:position pos:line="130" pos:column="8"/></name> <init pos:line="130" pos:column="9">= <expr><literal type="number" pos:line="130" pos:column="11">0<pos:position pos:line="130" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="130" pos:column="13"/></decl_stmt>

  <if pos:line="132" pos:column="3">if <condition pos:line="132" pos:column="6">(<expr><name><name pos:line="132" pos:column="7">ds<pos:position pos:line="132" pos:column="9"/></name><operator pos:line="132" pos:column="9">-&gt;<pos:position pos:line="132" pos:column="14"/></operator><name pos:line="132" pos:column="11">ds_num<pos:position pos:line="132" pos:column="17"/></name></name> <operator pos:line="132" pos:column="18">!=<pos:position pos:line="132" pos:column="20"/></operator> <name><name pos:line="132" pos:column="21">vl<pos:position pos:line="132" pos:column="23"/></name><operator pos:line="132" pos:column="23">-&gt;<pos:position pos:line="132" pos:column="28"/></operator><name pos:line="132" pos:column="25">values_len<pos:position pos:line="132" pos:column="35"/></name></name></expr>)<pos:position pos:line="132" pos:column="36"/></condition><then pos:line="132" pos:column="36"> <block pos:line="132" pos:column="37">{
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">plugin_log<pos:position pos:line="133" pos:column="15"/></name><argument_list pos:line="133" pos:column="15">(<argument><expr><name pos:line="133" pos:column="16">LOG_WARNING<pos:position pos:line="133" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="29">"DS number does not match values length"<pos:position pos:line="133" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="71"/></expr_stmt>
    <return pos:line="134" pos:column="5">return <expr><operator pos:line="134" pos:column="12">-<pos:position pos:line="134" pos:column="13"/></operator><literal type="number" pos:line="134" pos:column="13">1<pos:position pos:line="134" pos:column="14"/></literal></expr>;<pos:position pos:line="134" pos:column="15"/></return>
  }<pos:position pos:line="135" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="137" pos:column="3">/* get the default base filename for the output file - depending on the
   * provided values this will be something like
   * &lt;host&gt;/&lt;plugin&gt;[-&lt;plugin_type&gt;]/&lt;instance&gt;[-&lt;instance_type&gt;] */</comment>
  <if pos:line="140" pos:column="3">if <condition pos:line="140" pos:column="6">(<expr><literal type="number" pos:line="140" pos:column="7">0<pos:position pos:line="140" pos:column="8"/></literal> <operator pos:line="140" pos:column="9">!=<pos:position pos:line="140" pos:column="11"/></operator> <call><name pos:line="140" pos:column="12">format_name<pos:position pos:line="140" pos:column="23"/></name><argument_list pos:line="140" pos:column="23">(<argument><expr><name pos:line="140" pos:column="24">name<pos:position pos:line="140" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="30">1024<pos:position pos:line="140" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="36">vl<pos:position pos:line="140" pos:column="38"/></name><operator pos:line="140" pos:column="38">-&gt;<pos:position pos:line="140" pos:column="43"/></operator><name pos:line="140" pos:column="40">host<pos:position pos:line="140" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="46">vl<pos:position pos:line="140" pos:column="48"/></name><operator pos:line="140" pos:column="48">-&gt;<pos:position pos:line="140" pos:column="53"/></operator><name pos:line="140" pos:column="50">plugin<pos:position pos:line="140" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="58">vl<pos:position pos:line="140" pos:column="60"/></name><operator pos:line="140" pos:column="60">-&gt;<pos:position pos:line="140" pos:column="65"/></operator><name pos:line="140" pos:column="62">plugin_instance<pos:position pos:line="140" pos:column="77"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="141" pos:column="24">ds<pos:position pos:line="141" pos:column="26"/></name><operator pos:line="141" pos:column="26">-&gt;<pos:position pos:line="141" pos:column="31"/></operator><name pos:line="141" pos:column="28">type<pos:position pos:line="141" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="34">vl<pos:position pos:line="141" pos:column="36"/></name><operator pos:line="141" pos:column="36">-&gt;<pos:position pos:line="141" pos:column="41"/></operator><name pos:line="141" pos:column="38">type_instance<pos:position pos:line="141" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="53"/></condition><then pos:line="141" pos:column="53">
    <block type="pseudo"><return pos:line="142" pos:column="5">return <expr><operator pos:line="142" pos:column="12">-<pos:position pos:line="142" pos:column="13"/></operator><literal type="number" pos:line="142" pos:column="13">1<pos:position pos:line="142" pos:column="14"/></literal></expr>;<pos:position pos:line="142" pos:column="15"/></return></block></then></if>

  <for pos:line="144" pos:column="3">for <control pos:line="144" pos:column="7">(<init><expr><name pos:line="144" pos:column="8">i<pos:position pos:line="144" pos:column="9"/></name> <operator pos:line="144" pos:column="10">=<pos:position pos:line="144" pos:column="11"/></operator> <literal type="number" pos:line="144" pos:column="12">0<pos:position pos:line="144" pos:column="13"/></literal></expr>;<pos:position pos:line="144" pos:column="14"/></init> <condition><expr><name pos:line="144" pos:column="15">i<pos:position pos:line="144" pos:column="16"/></name> <operator pos:line="144" pos:column="17">&lt;<pos:position pos:line="144" pos:column="21"/></operator> <name><name pos:line="144" pos:column="19">ds<pos:position pos:line="144" pos:column="21"/></name><operator pos:line="144" pos:column="21">-&gt;<pos:position pos:line="144" pos:column="26"/></operator><name pos:line="144" pos:column="23">ds_num<pos:position pos:line="144" pos:column="29"/></name></name></expr>;<pos:position pos:line="144" pos:column="30"/></condition> <incr><expr><operator pos:line="144" pos:column="31">++<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="33">i<pos:position pos:line="144" pos:column="34"/></name></expr></incr>)<pos:position pos:line="144" pos:column="35"/></control> <block pos:line="144" pos:column="36">{
    <comment type="block" pos:line="145" pos:column="5">/* do the magic to output the data */</comment>
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">printf<pos:position pos:line="146" pos:column="11"/></name><argument_list pos:line="146" pos:column="11">(<argument><expr><literal type="string" pos:line="146" pos:column="12">"%s (%s) at %i: "<pos:position pos:line="146" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="31">name<pos:position pos:line="146" pos:column="35"/></name></expr></argument>,
           <argument><expr><ternary><condition><expr><operator pos:line="147" pos:column="12">(<pos:position pos:line="147" pos:column="13"/></operator><name><name pos:line="147" pos:column="13">ds<pos:position pos:line="147" pos:column="15"/></name><operator pos:line="147" pos:column="15">-&gt;<pos:position pos:line="147" pos:column="20"/></operator><name pos:line="147" pos:column="17">ds<pos:position pos:line="147" pos:column="19"/></name><operator pos:line="147" pos:column="19">-&gt;<pos:position pos:line="147" pos:column="24"/></operator><name pos:line="147" pos:column="21">type<pos:position pos:line="147" pos:column="25"/></name></name> <operator pos:line="147" pos:column="26">==<pos:position pos:line="147" pos:column="28"/></operator> <name pos:line="147" pos:column="29">DS_TYPE_GAUGE<pos:position pos:line="147" pos:column="42"/></name><operator pos:line="147" pos:column="42">)<pos:position pos:line="147" pos:column="43"/></operator></expr> ?<pos:position pos:line="147" pos:column="45"/></condition><then pos:line="147" pos:column="45"> <expr><literal type="string" pos:line="147" pos:column="46">"GAUGE"<pos:position pos:line="147" pos:column="53"/></literal></expr> <pos:position pos:line="147" pos:column="54"/></then><else pos:line="147" pos:column="54">: <expr><literal type="string" pos:line="147" pos:column="56">"COUNTER"<pos:position pos:line="147" pos:column="65"/></literal></expr></else></ternary></expr></argument>,
           <argument><expr><operator pos:line="148" pos:column="12">(<pos:position pos:line="148" pos:column="13"/></operator><name pos:line="148" pos:column="13">int<pos:position pos:line="148" pos:column="16"/></name><operator pos:line="148" pos:column="16">)<pos:position pos:line="148" pos:column="17"/></operator><name><name pos:line="148" pos:column="17">vl<pos:position pos:line="148" pos:column="19"/></name><operator pos:line="148" pos:column="19">-&gt;<pos:position pos:line="148" pos:column="24"/></operator><name pos:line="148" pos:column="21">time<pos:position pos:line="148" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>

    <if pos:line="150" pos:column="5">if <condition pos:line="150" pos:column="8">(<expr><name><name pos:line="150" pos:column="9">ds<pos:position pos:line="150" pos:column="11"/></name><operator pos:line="150" pos:column="11">-&gt;<pos:position pos:line="150" pos:column="16"/></operator><name pos:line="150" pos:column="13">ds<pos:position pos:line="150" pos:column="15"/></name><operator pos:line="150" pos:column="15">-&gt;<pos:position pos:line="150" pos:column="20"/></operator><name pos:line="150" pos:column="17">type<pos:position pos:line="150" pos:column="21"/></name></name> <operator pos:line="150" pos:column="22">==<pos:position pos:line="150" pos:column="24"/></operator> <name pos:line="150" pos:column="25">DS_TYPE_GAUGE<pos:position pos:line="150" pos:column="38"/></name></expr>)<pos:position pos:line="150" pos:column="39"/></condition><then pos:line="150" pos:column="39">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="151" pos:column="7">printf<pos:position pos:line="151" pos:column="13"/></name><argument_list pos:line="151" pos:column="13">(<argument><expr><literal type="string" pos:line="151" pos:column="14">"%f\n"<pos:position pos:line="151" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="22">vl<pos:position pos:line="151" pos:column="24"/></name><operator pos:line="151" pos:column="24">-&gt;<pos:position pos:line="151" pos:column="29"/></operator><name pos:line="151" pos:column="26">values<pos:position pos:line="151" pos:column="32"/></name><index pos:line="151" pos:column="32">[<expr><name pos:line="151" pos:column="33">i<pos:position pos:line="151" pos:column="34"/></name></expr>]<pos:position pos:line="151" pos:column="35"/></index></name><operator pos:line="151" pos:column="35">.<pos:position pos:line="151" pos:column="36"/></operator><name pos:line="151" pos:column="36">gauge<pos:position pos:line="151" pos:column="41"/></name></expr></argument>)<pos:position pos:line="151" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="43"/></expr_stmt></block></then>
    <else pos:line="152" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="153" pos:column="7">printf<pos:position pos:line="153" pos:column="13"/></name><argument_list pos:line="153" pos:column="13">(<argument><expr><literal type="string" pos:line="153" pos:column="14">"%lld\n"<pos:position pos:line="153" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="24">vl<pos:position pos:line="153" pos:column="26"/></name><operator pos:line="153" pos:column="26">-&gt;<pos:position pos:line="153" pos:column="31"/></operator><name pos:line="153" pos:column="28">values<pos:position pos:line="153" pos:column="34"/></name><index pos:line="153" pos:column="34">[<expr><name pos:line="153" pos:column="35">i<pos:position pos:line="153" pos:column="36"/></name></expr>]<pos:position pos:line="153" pos:column="37"/></index></name><operator pos:line="153" pos:column="37">.<pos:position pos:line="153" pos:column="38"/></operator><name pos:line="153" pos:column="38">counter<pos:position pos:line="153" pos:column="45"/></name></expr></argument>)<pos:position pos:line="153" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="47"/></expr_stmt></block></else></if>
  }<pos:position pos:line="154" pos:column="4"/></block></for>
  <return pos:line="155" pos:column="3">return <expr><literal type="number" pos:line="155" pos:column="10">0<pos:position pos:line="155" pos:column="11"/></literal></expr>;<pos:position pos:line="155" pos:column="12"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function> <comment type="block" pos:line="156" pos:column="3">/* static int my_write (data_set_t *, value_list_t *) */</comment>

<comment type="block" pos:line="158" pos:column="1">/*
 * This function is called when plugin_log () has been used.
 */</comment>
<function><specifier pos:line="161" pos:column="1">static<pos:position pos:line="161" pos:column="7"/></specifier> <type><name pos:line="161" pos:column="8">void<pos:position pos:line="161" pos:column="12"/></name></type> <name pos:line="161" pos:column="13">my_log<pos:position pos:line="161" pos:column="19"/></name><parameter_list pos:line="161" pos:column="19">(<parameter><decl><type><name pos:line="161" pos:column="20">int<pos:position pos:line="161" pos:column="23"/></name></type> <name pos:line="161" pos:column="24">severity<pos:position pos:line="161" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="161" pos:column="34">const<pos:position pos:line="161" pos:column="39"/></specifier> <name pos:line="161" pos:column="40">char<pos:position pos:line="161" pos:column="44"/></name> <modifier pos:line="161" pos:column="45">*<pos:position pos:line="161" pos:column="46"/></modifier></type><name pos:line="161" pos:column="46">msg<pos:position pos:line="161" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="161" pos:column="51">user_data_t<pos:position pos:line="161" pos:column="62"/></name> <modifier pos:line="161" pos:column="63">*<pos:position pos:line="161" pos:column="64"/></modifier></type><name pos:line="161" pos:column="64">ud<pos:position pos:line="161" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="161" pos:column="67"/></parameter_list> <block pos:line="161" pos:column="68">{
  <expr_stmt><expr><call><name pos:line="162" pos:column="3">printf<pos:position pos:line="162" pos:column="9"/></name><argument_list pos:line="162" pos:column="9">(<argument><expr><literal type="string" pos:line="162" pos:column="10">"LOG: %i - %s\n"<pos:position pos:line="162" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="28">severity<pos:position pos:line="162" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="38">msg<pos:position pos:line="162" pos:column="41"/></name></expr></argument>)<pos:position pos:line="162" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="43"/></expr_stmt>
  <return pos:line="163" pos:column="3">return;<pos:position pos:line="163" pos:column="10"/></return>
}<pos:position pos:line="164" pos:column="2"/></block></function> <comment type="block" pos:line="164" pos:column="3">/* static void my_log (int, const char *) */</comment>

<comment type="block" pos:line="166" pos:column="1">/*
 * This function is called when plugin_dispatch_notification () has been used.
 */</comment>
<function><specifier pos:line="169" pos:column="1">static<pos:position pos:line="169" pos:column="7"/></specifier> <type><name pos:line="169" pos:column="8">int<pos:position pos:line="169" pos:column="11"/></name></type> <name pos:line="169" pos:column="12">my_notify<pos:position pos:line="169" pos:column="21"/></name><parameter_list pos:line="169" pos:column="21">(<parameter><decl><type><specifier pos:line="169" pos:column="22">const<pos:position pos:line="169" pos:column="27"/></specifier> <name pos:line="169" pos:column="28">notification_t<pos:position pos:line="169" pos:column="42"/></name> <modifier pos:line="169" pos:column="43">*<pos:position pos:line="169" pos:column="44"/></modifier></type><name pos:line="169" pos:column="44">notif<pos:position pos:line="169" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="169" pos:column="51">user_data_t<pos:position pos:line="169" pos:column="62"/></name> <modifier pos:line="169" pos:column="63">*<pos:position pos:line="169" pos:column="64"/></modifier></type><name pos:line="169" pos:column="64">ud<pos:position pos:line="169" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="169" pos:column="67"/></parameter_list> <block pos:line="169" pos:column="68">{
  <decl_stmt><decl><type><name pos:line="170" pos:column="3">char<pos:position pos:line="170" pos:column="7"/></name></type> <name><name pos:line="170" pos:column="8">time_str<pos:position pos:line="170" pos:column="16"/></name><index pos:line="170" pos:column="16">[<expr><literal type="number" pos:line="170" pos:column="17">32<pos:position pos:line="170" pos:column="19"/></literal></expr>]<pos:position pos:line="170" pos:column="20"/></index></name> <init pos:line="170" pos:column="21">= <expr><literal type="string" pos:line="170" pos:column="23">""<pos:position pos:line="170" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="170" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="171" pos:column="3">struct<pos:position pos:line="171" pos:column="9"/></name> <name pos:line="171" pos:column="10">tm<pos:position pos:line="171" pos:column="12"/></name></name> <modifier pos:line="171" pos:column="13">*<pos:position pos:line="171" pos:column="14"/></modifier></type><name pos:line="171" pos:column="14">tm<pos:position pos:line="171" pos:column="16"/></name> <init pos:line="171" pos:column="17">= <expr><name pos:line="171" pos:column="19">NULL<pos:position pos:line="171" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="171" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="173" pos:column="3">int<pos:position pos:line="173" pos:column="6"/></name></type> <name pos:line="173" pos:column="7">n<pos:position pos:line="173" pos:column="8"/></name> <init pos:line="173" pos:column="9">= <expr><literal type="number" pos:line="173" pos:column="11">0<pos:position pos:line="173" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="173" pos:column="13"/></decl_stmt>

  <if pos:line="175" pos:column="3">if <condition pos:line="175" pos:column="6">(<expr><name pos:line="175" pos:column="7">NULL<pos:position pos:line="175" pos:column="11"/></name> <operator pos:line="175" pos:column="12">==<pos:position pos:line="175" pos:column="14"/></operator> <operator pos:line="175" pos:column="15">(<pos:position pos:line="175" pos:column="16"/></operator><name pos:line="175" pos:column="16">tm<pos:position pos:line="175" pos:column="18"/></name> <operator pos:line="175" pos:column="19">=<pos:position pos:line="175" pos:column="20"/></operator> <call><name pos:line="175" pos:column="21">localtime<pos:position pos:line="175" pos:column="30"/></name><argument_list pos:line="175" pos:column="30">(<argument><expr><operator pos:line="175" pos:column="31">&amp;<pos:position pos:line="175" pos:column="36"/></operator><name><name pos:line="175" pos:column="32">notif<pos:position pos:line="175" pos:column="37"/></name><operator pos:line="175" pos:column="37">-&gt;<pos:position pos:line="175" pos:column="42"/></operator><name pos:line="175" pos:column="39">time<pos:position pos:line="175" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="175" pos:column="44"/></argument_list></call><operator pos:line="175" pos:column="44">)<pos:position pos:line="175" pos:column="45"/></operator></expr>)<pos:position pos:line="175" pos:column="46"/></condition><then pos:line="175" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="176" pos:column="5">time_str<pos:position pos:line="176" pos:column="13"/></name><index pos:line="176" pos:column="13">[<expr><literal type="number" pos:line="176" pos:column="14">0<pos:position pos:line="176" pos:column="15"/></literal></expr>]<pos:position pos:line="176" pos:column="16"/></index></name> <operator pos:line="176" pos:column="17">=<pos:position pos:line="176" pos:column="18"/></operator> <literal type="char" pos:line="176" pos:column="19">'\0'<pos:position pos:line="176" pos:column="23"/></literal></expr>;<pos:position pos:line="176" pos:column="24"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="178" pos:column="3">n<pos:position pos:line="178" pos:column="4"/></name> <operator pos:line="178" pos:column="5">=<pos:position pos:line="178" pos:column="6"/></operator> <call><name pos:line="178" pos:column="7">strftime<pos:position pos:line="178" pos:column="15"/></name><argument_list pos:line="178" pos:column="15">(<argument><expr><name pos:line="178" pos:column="16">time_str<pos:position pos:line="178" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="178" pos:column="26">32<pos:position pos:line="178" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="30">"%F %T"<pos:position pos:line="178" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="178" pos:column="39">tm<pos:position pos:line="178" pos:column="41"/></name></expr></argument>)<pos:position pos:line="178" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="43"/></expr_stmt>
  <if pos:line="179" pos:column="3">if <condition pos:line="179" pos:column="6">(<expr><name pos:line="179" pos:column="7">n<pos:position pos:line="179" pos:column="8"/></name> <operator pos:line="179" pos:column="9">&gt;=<pos:position pos:line="179" pos:column="14"/></operator> <literal type="number" pos:line="179" pos:column="12">32<pos:position pos:line="179" pos:column="14"/></literal></expr>)<pos:position pos:line="179" pos:column="15"/></condition><then pos:line="179" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="180" pos:column="5">n<pos:position pos:line="180" pos:column="6"/></name> <operator pos:line="180" pos:column="7">=<pos:position pos:line="180" pos:column="8"/></operator> <literal type="number" pos:line="180" pos:column="9">31<pos:position pos:line="180" pos:column="11"/></literal></expr>;<pos:position pos:line="180" pos:column="12"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="181" pos:column="3">time_str<pos:position pos:line="181" pos:column="11"/></name><index pos:line="181" pos:column="11">[<expr><name pos:line="181" pos:column="12">n<pos:position pos:line="181" pos:column="13"/></name></expr>]<pos:position pos:line="181" pos:column="14"/></index></name> <operator pos:line="181" pos:column="15">=<pos:position pos:line="181" pos:column="16"/></operator> <literal type="char" pos:line="181" pos:column="17">'\0'<pos:position pos:line="181" pos:column="21"/></literal></expr>;<pos:position pos:line="181" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="183" pos:column="3">printf<pos:position pos:line="183" pos:column="9"/></name><argument_list pos:line="183" pos:column="9">(<argument><expr><literal type="string" pos:line="183" pos:column="10">"NOTIF (%s): %i - "<pos:position pos:line="183" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="31">time_str<pos:position pos:line="183" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="41">notif<pos:position pos:line="183" pos:column="46"/></name><operator pos:line="183" pos:column="46">-&gt;<pos:position pos:line="183" pos:column="51"/></operator><name pos:line="183" pos:column="48">severity<pos:position pos:line="183" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="183" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="58"/></expr_stmt>

  <if pos:line="185" pos:column="3">if <condition pos:line="185" pos:column="6">(<expr><literal type="char" pos:line="185" pos:column="7">'\0'<pos:position pos:line="185" pos:column="11"/></literal> <operator pos:line="185" pos:column="12">!=<pos:position pos:line="185" pos:column="14"/></operator> <operator pos:line="185" pos:column="15">*<pos:position pos:line="185" pos:column="16"/></operator><name><name pos:line="185" pos:column="16">notif<pos:position pos:line="185" pos:column="21"/></name><operator pos:line="185" pos:column="21">-&gt;<pos:position pos:line="185" pos:column="26"/></operator><name pos:line="185" pos:column="23">host<pos:position pos:line="185" pos:column="27"/></name></name></expr>)<pos:position pos:line="185" pos:column="28"/></condition><then pos:line="185" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="186" pos:column="5">printf<pos:position pos:line="186" pos:column="11"/></name><argument_list pos:line="186" pos:column="11">(<argument><expr><literal type="string" pos:line="186" pos:column="12">"%s: "<pos:position pos:line="186" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="20">notif<pos:position pos:line="186" pos:column="25"/></name><operator pos:line="186" pos:column="25">-&gt;<pos:position pos:line="186" pos:column="30"/></operator><name pos:line="186" pos:column="27">host<pos:position pos:line="186" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="33"/></expr_stmt></block></then></if>

  <if pos:line="188" pos:column="3">if <condition pos:line="188" pos:column="6">(<expr><literal type="char" pos:line="188" pos:column="7">'\0'<pos:position pos:line="188" pos:column="11"/></literal> <operator pos:line="188" pos:column="12">!=<pos:position pos:line="188" pos:column="14"/></operator> <operator pos:line="188" pos:column="15">*<pos:position pos:line="188" pos:column="16"/></operator><name><name pos:line="188" pos:column="16">notif<pos:position pos:line="188" pos:column="21"/></name><operator pos:line="188" pos:column="21">-&gt;<pos:position pos:line="188" pos:column="26"/></operator><name pos:line="188" pos:column="23">plugin<pos:position pos:line="188" pos:column="29"/></name></name></expr>)<pos:position pos:line="188" pos:column="30"/></condition><then pos:line="188" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="189" pos:column="5">printf<pos:position pos:line="189" pos:column="11"/></name><argument_list pos:line="189" pos:column="11">(<argument><expr><literal type="string" pos:line="189" pos:column="12">"%s: "<pos:position pos:line="189" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="20">notif<pos:position pos:line="189" pos:column="25"/></name><operator pos:line="189" pos:column="25">-&gt;<pos:position pos:line="189" pos:column="30"/></operator><name pos:line="189" pos:column="27">plugin<pos:position pos:line="189" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="35"/></expr_stmt></block></then></if>

  <if pos:line="191" pos:column="3">if <condition pos:line="191" pos:column="6">(<expr><literal type="char" pos:line="191" pos:column="7">'\0'<pos:position pos:line="191" pos:column="11"/></literal> <operator pos:line="191" pos:column="12">!=<pos:position pos:line="191" pos:column="14"/></operator> <operator pos:line="191" pos:column="15">*<pos:position pos:line="191" pos:column="16"/></operator><name><name pos:line="191" pos:column="16">notif<pos:position pos:line="191" pos:column="21"/></name><operator pos:line="191" pos:column="21">-&gt;<pos:position pos:line="191" pos:column="26"/></operator><name pos:line="191" pos:column="23">plugin_instance<pos:position pos:line="191" pos:column="38"/></name></name></expr>)<pos:position pos:line="191" pos:column="39"/></condition><then pos:line="191" pos:column="39">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="192" pos:column="5">printf<pos:position pos:line="192" pos:column="11"/></name><argument_list pos:line="192" pos:column="11">(<argument><expr><literal type="string" pos:line="192" pos:column="12">"%s: "<pos:position pos:line="192" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="20">notif<pos:position pos:line="192" pos:column="25"/></name><operator pos:line="192" pos:column="25">-&gt;<pos:position pos:line="192" pos:column="30"/></operator><name pos:line="192" pos:column="27">plugin_instance<pos:position pos:line="192" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="192" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="44"/></expr_stmt></block></then></if>

  <if pos:line="194" pos:column="3">if <condition pos:line="194" pos:column="6">(<expr><literal type="char" pos:line="194" pos:column="7">'\0'<pos:position pos:line="194" pos:column="11"/></literal> <operator pos:line="194" pos:column="12">!=<pos:position pos:line="194" pos:column="14"/></operator> <operator pos:line="194" pos:column="15">*<pos:position pos:line="194" pos:column="16"/></operator><name><name pos:line="194" pos:column="16">notif<pos:position pos:line="194" pos:column="21"/></name><operator pos:line="194" pos:column="21">-&gt;<pos:position pos:line="194" pos:column="26"/></operator><name pos:line="194" pos:column="23">type<pos:position pos:line="194" pos:column="27"/></name></name></expr>)<pos:position pos:line="194" pos:column="28"/></condition><then pos:line="194" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="195" pos:column="5">printf<pos:position pos:line="195" pos:column="11"/></name><argument_list pos:line="195" pos:column="11">(<argument><expr><literal type="string" pos:line="195" pos:column="12">"%s: "<pos:position pos:line="195" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="20">notif<pos:position pos:line="195" pos:column="25"/></name><operator pos:line="195" pos:column="25">-&gt;<pos:position pos:line="195" pos:column="30"/></operator><name pos:line="195" pos:column="27">type<pos:position pos:line="195" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="195" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="33"/></expr_stmt></block></then></if>

  <if pos:line="197" pos:column="3">if <condition pos:line="197" pos:column="6">(<expr><literal type="char" pos:line="197" pos:column="7">'\0'<pos:position pos:line="197" pos:column="11"/></literal> <operator pos:line="197" pos:column="12">!=<pos:position pos:line="197" pos:column="14"/></operator> <operator pos:line="197" pos:column="15">*<pos:position pos:line="197" pos:column="16"/></operator><name><name pos:line="197" pos:column="16">notif<pos:position pos:line="197" pos:column="21"/></name><operator pos:line="197" pos:column="21">-&gt;<pos:position pos:line="197" pos:column="26"/></operator><name pos:line="197" pos:column="23">type_instance<pos:position pos:line="197" pos:column="36"/></name></name></expr>)<pos:position pos:line="197" pos:column="37"/></condition><then pos:line="197" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="198" pos:column="5">printf<pos:position pos:line="198" pos:column="11"/></name><argument_list pos:line="198" pos:column="11">(<argument><expr><literal type="string" pos:line="198" pos:column="12">"%s: "<pos:position pos:line="198" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="20">notif<pos:position pos:line="198" pos:column="25"/></name><operator pos:line="198" pos:column="25">-&gt;<pos:position pos:line="198" pos:column="30"/></operator><name pos:line="198" pos:column="27">type_instance<pos:position pos:line="198" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="198" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="42"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="200" pos:column="3">printf<pos:position pos:line="200" pos:column="9"/></name><argument_list pos:line="200" pos:column="9">(<argument><expr><literal type="string" pos:line="200" pos:column="10">"%s\n"<pos:position pos:line="200" pos:column="16"/></literal></expr></argument>, <argument><expr><name><name pos:line="200" pos:column="18">notif<pos:position pos:line="200" pos:column="23"/></name><operator pos:line="200" pos:column="23">-&gt;<pos:position pos:line="200" pos:column="28"/></operator><name pos:line="200" pos:column="25">message<pos:position pos:line="200" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="200" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="34"/></expr_stmt>
  <return pos:line="201" pos:column="3">return <expr><literal type="number" pos:line="201" pos:column="10">0<pos:position pos:line="201" pos:column="11"/></literal></expr>;<pos:position pos:line="201" pos:column="12"/></return>
}<pos:position pos:line="202" pos:column="2"/></block></function> <comment type="block" pos:line="202" pos:column="3">/* static int my_notify (notification_t *) */</comment>

<comment type="block" pos:line="204" pos:column="1">/*
 * This function is called before shutting down collectd.
 */</comment>
<function><specifier pos:line="207" pos:column="1">static<pos:position pos:line="207" pos:column="7"/></specifier> <type><name pos:line="207" pos:column="8">int<pos:position pos:line="207" pos:column="11"/></name></type> <name pos:line="207" pos:column="12">my_shutdown<pos:position pos:line="207" pos:column="23"/></name><parameter_list pos:line="207" pos:column="23">(<parameter><decl><type><name pos:line="207" pos:column="24">void<pos:position pos:line="207" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="207" pos:column="29"/></parameter_list> <block pos:line="207" pos:column="30">{
  <comment type="block" pos:line="208" pos:column="3">/* close sockets, free data structures, ... */</comment>
  <return pos:line="209" pos:column="3">return <expr><literal type="number" pos:line="209" pos:column="10">0<pos:position pos:line="209" pos:column="11"/></literal></expr>;<pos:position pos:line="209" pos:column="12"/></return>
}<pos:position pos:line="210" pos:column="2"/></block></function> <comment type="block" pos:line="210" pos:column="3">/* static int my_shutdown (void) */</comment>

<comment type="block" pos:line="212" pos:column="1">/*
 * This function is called after loading the plugin to register it with
 * collectd.
 */</comment>
<function><type><name pos:line="216" pos:column="1">void<pos:position pos:line="216" pos:column="5"/></name></type> <name pos:line="216" pos:column="6">module_register<pos:position pos:line="216" pos:column="21"/></name><parameter_list pos:line="216" pos:column="21">(<parameter><decl><type><name pos:line="216" pos:column="22">void<pos:position pos:line="216" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="216" pos:column="27"/></parameter_list> <block pos:line="216" pos:column="28">{
  <expr_stmt><expr><call><name pos:line="217" pos:column="3">plugin_register_log<pos:position pos:line="217" pos:column="22"/></name><argument_list pos:line="217" pos:column="22">(<argument><expr><literal type="string" pos:line="217" pos:column="23">"myplugin"<pos:position pos:line="217" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="217" pos:column="35">my_log<pos:position pos:line="217" pos:column="41"/></name></expr></argument>, <comment type="block" pos:line="217" pos:column="43">/* user data */</comment> <argument><expr><name pos:line="217" pos:column="59">NULL<pos:position pos:line="217" pos:column="63"/></name></expr></argument>)<pos:position pos:line="217" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="218" pos:column="3">plugin_register_notification<pos:position pos:line="218" pos:column="31"/></name><argument_list pos:line="218" pos:column="31">(<argument><expr><literal type="string" pos:line="218" pos:column="32">"myplugin"<pos:position pos:line="218" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="218" pos:column="44">my_notify<pos:position pos:line="218" pos:column="53"/></name></expr></argument>,
                               <comment type="block" pos:line="219" pos:column="32">/* user data */</comment> <argument><expr><name pos:line="219" pos:column="48">NULL<pos:position pos:line="219" pos:column="52"/></name></expr></argument>)<pos:position pos:line="219" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="220" pos:column="3">plugin_register_data_set<pos:position pos:line="220" pos:column="27"/></name><argument_list pos:line="220" pos:column="27">(<argument><expr><operator pos:line="220" pos:column="28">&amp;<pos:position pos:line="220" pos:column="33"/></operator><name pos:line="220" pos:column="29">ds<pos:position pos:line="220" pos:column="31"/></name></expr></argument>)<pos:position pos:line="220" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="221" pos:column="3">plugin_register_read<pos:position pos:line="221" pos:column="23"/></name><argument_list pos:line="221" pos:column="23">(<argument><expr><literal type="string" pos:line="221" pos:column="24">"myplugin"<pos:position pos:line="221" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="221" pos:column="36">my_read<pos:position pos:line="221" pos:column="43"/></name></expr></argument>)<pos:position pos:line="221" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="222" pos:column="3">plugin_register_init<pos:position pos:line="222" pos:column="23"/></name><argument_list pos:line="222" pos:column="23">(<argument><expr><literal type="string" pos:line="222" pos:column="24">"myplugin"<pos:position pos:line="222" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="36">my_init<pos:position pos:line="222" pos:column="43"/></name></expr></argument>)<pos:position pos:line="222" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="223" pos:column="3">plugin_register_write<pos:position pos:line="223" pos:column="24"/></name><argument_list pos:line="223" pos:column="24">(<argument><expr><literal type="string" pos:line="223" pos:column="25">"myplugin"<pos:position pos:line="223" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="223" pos:column="37">my_write<pos:position pos:line="223" pos:column="45"/></name></expr></argument>, <comment type="block" pos:line="223" pos:column="47">/* user data */</comment> <argument><expr><name pos:line="223" pos:column="63">NULL<pos:position pos:line="223" pos:column="67"/></name></expr></argument>)<pos:position pos:line="223" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="224" pos:column="3">plugin_register_shutdown<pos:position pos:line="224" pos:column="27"/></name><argument_list pos:line="224" pos:column="27">(<argument><expr><literal type="string" pos:line="224" pos:column="28">"myplugin"<pos:position pos:line="224" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="224" pos:column="40">my_shutdown<pos:position pos:line="224" pos:column="51"/></name></expr></argument>)<pos:position pos:line="224" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="53"/></expr_stmt>
  <return pos:line="225" pos:column="3">return;<pos:position pos:line="225" pos:column="10"/></return>
}<pos:position pos:line="226" pos:column="2"/></block></function> <comment type="block" pos:line="226" pos:column="3">/* void module_register (void) */</comment>
</unit>
