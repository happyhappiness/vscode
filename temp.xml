<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/repos/httpd-2.0.44/server/mpm_common.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * &lt;http://www.apache.org/&gt;.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */</comment>

<comment type="block" pos:line="59" pos:column="1">/* The purpose of this file is to store the code that MOST mpm's will need
 * this does not mean a function only goes into this file if every MPM needs
 * it.  It means that if a function is needed by more than one MPM, and
 * future maintenance would be served by making the code common, then the
 * function belongs here.
 *
 * This is going in src/main because it is not platform specific, it is
 * specific to multi-process servers, but NOT to Unix.  Which is why it
 * does not belong in src/os/unix
 */</comment>

<cpp:include pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">include<pos:position pos:line="70" pos:column="9"/></cpp:directive> <cpp:file pos:line="70" pos:column="10">"apr.h"<pos:position pos:line="70" pos:column="17"/></cpp:file></cpp:include>
<cpp:include pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">include<pos:position pos:line="71" pos:column="9"/></cpp:directive> <cpp:file pos:line="71" pos:column="10">"apr_thread_proc.h"<pos:position pos:line="71" pos:column="29"/></cpp:file></cpp:include>
<cpp:include pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">include<pos:position pos:line="72" pos:column="9"/></cpp:directive> <cpp:file pos:line="72" pos:column="10">"apr_signal.h"<pos:position pos:line="72" pos:column="24"/></cpp:file></cpp:include>
<cpp:include pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">include<pos:position pos:line="73" pos:column="9"/></cpp:directive> <cpp:file pos:line="73" pos:column="10">"apr_strings.h"<pos:position pos:line="73" pos:column="25"/></cpp:file></cpp:include>
<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define<pos:position pos:line="74" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">APR_WANT_STRFUNC<pos:position pos:line="74" pos:column="25"/></name></cpp:macro></cpp:define>
<cpp:include pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">include<pos:position pos:line="75" pos:column="9"/></cpp:directive> <cpp:file pos:line="75" pos:column="10">"apr_want.h"<pos:position pos:line="75" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">include<pos:position pos:line="76" pos:column="9"/></cpp:directive> <cpp:file pos:line="76" pos:column="10">"apr_getopt.h"<pos:position pos:line="76" pos:column="24"/></cpp:file></cpp:include>
<cpp:include pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">include<pos:position pos:line="77" pos:column="9"/></cpp:directive> <cpp:file pos:line="77" pos:column="10">"apr_optional.h"<pos:position pos:line="77" pos:column="26"/></cpp:file></cpp:include>
<cpp:include pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">include<pos:position pos:line="78" pos:column="9"/></cpp:directive> <cpp:file pos:line="78" pos:column="10">"apr_allocator.h"<pos:position pos:line="78" pos:column="27"/></cpp:file></cpp:include>

<cpp:include pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">include<pos:position pos:line="80" pos:column="9"/></cpp:directive> <cpp:file pos:line="80" pos:column="10">"httpd.h"<pos:position pos:line="80" pos:column="19"/></cpp:file></cpp:include>
<cpp:include pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">include<pos:position pos:line="81" pos:column="9"/></cpp:directive> <cpp:file pos:line="81" pos:column="10">"http_config.h"<pos:position pos:line="81" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">include<pos:position pos:line="82" pos:column="9"/></cpp:directive> <cpp:file pos:line="82" pos:column="10">"http_log.h"<pos:position pos:line="82" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">include<pos:position pos:line="83" pos:column="9"/></cpp:directive> <cpp:file pos:line="83" pos:column="10">"http_main.h"<pos:position pos:line="83" pos:column="23"/></cpp:file></cpp:include>
<cpp:include pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">include<pos:position pos:line="84" pos:column="9"/></cpp:directive> <cpp:file pos:line="84" pos:column="10">"mpm.h"<pos:position pos:line="84" pos:column="17"/></cpp:file></cpp:include>
<cpp:include pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">include<pos:position pos:line="85" pos:column="9"/></cpp:directive> <cpp:file pos:line="85" pos:column="10">"mpm_common.h"<pos:position pos:line="85" pos:column="24"/></cpp:file></cpp:include>
<cpp:include pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">include<pos:position pos:line="86" pos:column="9"/></cpp:directive> <cpp:file pos:line="86" pos:column="10">"ap_mpm.h"<pos:position pos:line="86" pos:column="20"/></cpp:file></cpp:include>
<cpp:include pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">include<pos:position pos:line="87" pos:column="9"/></cpp:directive> <cpp:file pos:line="87" pos:column="10">"ap_listen.h"<pos:position pos:line="87" pos:column="23"/></cpp:file></cpp:include>
<cpp:include pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">include<pos:position pos:line="88" pos:column="9"/></cpp:directive> <cpp:file pos:line="88" pos:column="10">"mpm_default.h"<pos:position pos:line="88" pos:column="25"/></cpp:file></cpp:include>

<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef<pos:position pos:line="90" pos:column="7"/></cpp:directive> <name pos:line="90" pos:column="8">AP_MPM_WANT_SET_SCOREBOARD<pos:position pos:line="90" pos:column="34"/></name></cpp:ifdef>
<cpp:include pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">include<pos:position pos:line="91" pos:column="9"/></cpp:directive> <cpp:file pos:line="91" pos:column="10">"scoreboard.h"<pos:position pos:line="91" pos:column="24"/></cpp:file></cpp:include>
<cpp:endif pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">endif<pos:position pos:line="92" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">ifdef<pos:position pos:line="94" pos:column="7"/></cpp:directive> <name pos:line="94" pos:column="8">HAVE_PWD_H<pos:position pos:line="94" pos:column="18"/></name></cpp:ifdef>
<cpp:include pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">include<pos:position pos:line="95" pos:column="9"/></cpp:directive> <cpp:file pos:line="95" pos:column="10">&lt;pwd.h&gt;<pos:position pos:line="95" pos:column="20"/></cpp:file></cpp:include>
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">ifdef<pos:position pos:line="97" pos:column="7"/></cpp:directive> <name pos:line="97" pos:column="8">HAVE_GRP_H<pos:position pos:line="97" pos:column="18"/></name></cpp:ifdef>
<cpp:include pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">include<pos:position pos:line="98" pos:column="9"/></cpp:directive> <cpp:file pos:line="98" pos:column="10">&lt;grp.h&gt;<pos:position pos:line="98" pos:column="20"/></cpp:file></cpp:include>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">AP_MPM_WANT_RECLAIM_CHILD_PROCESSES<pos:position pos:line="101" pos:column="43"/></name></cpp:ifdef>
<function><type><name pos:line="102" pos:column="1">void<pos:position pos:line="102" pos:column="5"/></name></type> <name pos:line="102" pos:column="6">ap_reclaim_child_processes<pos:position pos:line="102" pos:column="32"/></name><parameter_list pos:line="102" pos:column="32">(<parameter><decl><type><name pos:line="102" pos:column="33">int<pos:position pos:line="102" pos:column="36"/></name></type> <name pos:line="102" pos:column="37">terminate<pos:position pos:line="102" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="102" pos:column="47"/></parameter_list>
<block pos:line="103" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="104" pos:column="5">int<pos:position pos:line="104" pos:column="8"/></name></type> <name pos:line="104" pos:column="9">i<pos:position pos:line="104" pos:column="10"/></name></decl>;<pos:position pos:line="104" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="105" pos:column="5">long<pos:position pos:line="105" pos:column="9"/></name> <name pos:line="105" pos:column="10">int<pos:position pos:line="105" pos:column="13"/></name></type> <name pos:line="105" pos:column="14">waittime<pos:position pos:line="105" pos:column="22"/></name> <init pos:line="105" pos:column="23">= <expr><literal type="number" pos:line="105" pos:column="25">1024<pos:position pos:line="105" pos:column="29"/></literal> <operator pos:line="105" pos:column="30">*<pos:position pos:line="105" pos:column="31"/></operator> <literal type="number" pos:line="105" pos:column="32">16<pos:position pos:line="105" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="105" pos:column="35"/></decl_stmt>      <comment type="block" pos:line="105" pos:column="41">/* in usecs */</comment>
    <decl_stmt><decl><type><name pos:line="106" pos:column="5">apr_status_t<pos:position pos:line="106" pos:column="17"/></name></type> <name pos:line="106" pos:column="18">waitret<pos:position pos:line="106" pos:column="25"/></name></decl>;<pos:position pos:line="106" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">int<pos:position pos:line="107" pos:column="8"/></name></type> <name pos:line="107" pos:column="9">tries<pos:position pos:line="107" pos:column="14"/></name></decl>;<pos:position pos:line="107" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="108" pos:column="5">int<pos:position pos:line="108" pos:column="8"/></name></type> <name pos:line="108" pos:column="9">not_dead_yet<pos:position pos:line="108" pos:column="21"/></name></decl>;<pos:position pos:line="108" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="109" pos:column="5">int<pos:position pos:line="109" pos:column="8"/></name></type> <name pos:line="109" pos:column="9">max_daemons<pos:position pos:line="109" pos:column="20"/></name></decl>;<pos:position pos:line="109" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="111" pos:column="5">ap_mpm_query<pos:position pos:line="111" pos:column="17"/></name><argument_list pos:line="111" pos:column="17">(<argument><expr><name pos:line="111" pos:column="18">AP_MPMQ_MAX_DAEMON_USED<pos:position pos:line="111" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="43">&amp;<pos:position pos:line="111" pos:column="48"/></operator><name pos:line="111" pos:column="44">max_daemons<pos:position pos:line="111" pos:column="55"/></name></expr></argument>)<pos:position pos:line="111" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="57"/></expr_stmt>

    <for pos:line="113" pos:column="5">for <control pos:line="113" pos:column="9">(<init><expr><name pos:line="113" pos:column="10">tries<pos:position pos:line="113" pos:column="15"/></name> <operator pos:line="113" pos:column="16">=<pos:position pos:line="113" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="113" pos:column="18">terminate<pos:position pos:line="113" pos:column="27"/></name></expr> ?<pos:position pos:line="113" pos:column="29"/></condition><then pos:line="113" pos:column="29"> <expr><literal type="number" pos:line="113" pos:column="30">4<pos:position pos:line="113" pos:column="31"/></literal></expr> <pos:position pos:line="113" pos:column="32"/></then><else pos:line="113" pos:column="32">: <expr><literal type="number" pos:line="113" pos:column="34">1<pos:position pos:line="113" pos:column="35"/></literal></expr></else></ternary></expr>;<pos:position pos:line="113" pos:column="36"/></init> <condition><expr><name pos:line="113" pos:column="37">tries<pos:position pos:line="113" pos:column="42"/></name> <operator pos:line="113" pos:column="43">&lt;=<pos:position pos:line="113" pos:column="48"/></operator> <literal type="number" pos:line="113" pos:column="46">9<pos:position pos:line="113" pos:column="47"/></literal></expr>;<pos:position pos:line="113" pos:column="48"/></condition> <incr><expr><operator pos:line="113" pos:column="49">++<pos:position pos:line="113" pos:column="51"/></operator><name pos:line="113" pos:column="51">tries<pos:position pos:line="113" pos:column="56"/></name></expr></incr>)<pos:position pos:line="113" pos:column="57"/></control> <block pos:line="113" pos:column="58">{
        <comment type="block" pos:line="114" pos:column="9">/* don't want to hold up progress any more than
         * necessary, but we need to allow children a few moments to exit.
         * Set delay with an exponential backoff.
         */</comment>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">apr_sleep<pos:position pos:line="118" pos:column="18"/></name><argument_list pos:line="118" pos:column="18">(<argument><expr><name pos:line="118" pos:column="19">waittime<pos:position pos:line="118" pos:column="27"/></name></expr></argument>)<pos:position pos:line="118" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="119" pos:column="9">waittime<pos:position pos:line="119" pos:column="17"/></name> <operator pos:line="119" pos:column="18">=<pos:position pos:line="119" pos:column="19"/></operator> <name pos:line="119" pos:column="20">waittime<pos:position pos:line="119" pos:column="28"/></name> <operator pos:line="119" pos:column="29">*<pos:position pos:line="119" pos:column="30"/></operator> <literal type="number" pos:line="119" pos:column="31">4<pos:position pos:line="119" pos:column="32"/></literal></expr>;<pos:position pos:line="119" pos:column="33"/></expr_stmt>

        <comment type="block" pos:line="121" pos:column="9">/* now see who is done */</comment>
        <expr_stmt><expr><name pos:line="122" pos:column="9">not_dead_yet<pos:position pos:line="122" pos:column="21"/></name> <operator pos:line="122" pos:column="22">=<pos:position pos:line="122" pos:column="23"/></operator> <literal type="number" pos:line="122" pos:column="24">0<pos:position pos:line="122" pos:column="25"/></literal></expr>;<pos:position pos:line="122" pos:column="26"/></expr_stmt>
        <for pos:line="123" pos:column="9">for <control pos:line="123" pos:column="13">(<init><expr><name pos:line="123" pos:column="14">i<pos:position pos:line="123" pos:column="15"/></name> <operator pos:line="123" pos:column="16">=<pos:position pos:line="123" pos:column="17"/></operator> <literal type="number" pos:line="123" pos:column="18">0<pos:position pos:line="123" pos:column="19"/></literal></expr>;<pos:position pos:line="123" pos:column="20"/></init> <condition><expr><name pos:line="123" pos:column="21">i<pos:position pos:line="123" pos:column="22"/></name> <operator pos:line="123" pos:column="23">&lt;<pos:position pos:line="123" pos:column="27"/></operator> <name pos:line="123" pos:column="25">max_daemons<pos:position pos:line="123" pos:column="36"/></name></expr>;<pos:position pos:line="123" pos:column="37"/></condition> <incr><expr><operator pos:line="123" pos:column="38">++<pos:position pos:line="123" pos:column="40"/></operator><name pos:line="123" pos:column="40">i<pos:position pos:line="123" pos:column="41"/></name></expr></incr>)<pos:position pos:line="123" pos:column="42"/></control> <block pos:line="123" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">pid_t<pos:position pos:line="124" pos:column="18"/></name></type> <name pos:line="124" pos:column="19">pid<pos:position pos:line="124" pos:column="22"/></name> <init pos:line="124" pos:column="23">= <expr><call><name pos:line="124" pos:column="25">MPM_CHILD_PID<pos:position pos:line="124" pos:column="38"/></name><argument_list pos:line="124" pos:column="38">(<argument><expr><name pos:line="124" pos:column="39">i<pos:position pos:line="124" pos:column="40"/></name></expr></argument>)<pos:position pos:line="124" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="124" pos:column="42"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">apr_proc_t<pos:position pos:line="125" pos:column="23"/></name></type> <name pos:line="125" pos:column="24">proc<pos:position pos:line="125" pos:column="28"/></name></decl>;<pos:position pos:line="125" pos:column="29"/></decl_stmt>

            <if pos:line="127" pos:column="13">if <condition pos:line="127" pos:column="16">(<expr><name pos:line="127" pos:column="17">pid<pos:position pos:line="127" pos:column="20"/></name> <operator pos:line="127" pos:column="21">==<pos:position pos:line="127" pos:column="23"/></operator> <literal type="number" pos:line="127" pos:column="24">0<pos:position pos:line="127" pos:column="25"/></literal></expr>)<pos:position pos:line="127" pos:column="26"/></condition><then pos:line="127" pos:column="26">
                <block type="pseudo"><continue pos:line="128" pos:column="17">continue;<pos:position pos:line="128" pos:column="26"/></continue></block></then></if>

            <expr_stmt><expr><name><name pos:line="130" pos:column="13">proc<pos:position pos:line="130" pos:column="17"/></name><operator pos:line="130" pos:column="17">.<pos:position pos:line="130" pos:column="18"/></operator><name pos:line="130" pos:column="18">pid<pos:position pos:line="130" pos:column="21"/></name></name> <operator pos:line="130" pos:column="22">=<pos:position pos:line="130" pos:column="23"/></operator> <name pos:line="130" pos:column="24">pid<pos:position pos:line="130" pos:column="27"/></name></expr>;<pos:position pos:line="130" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="131" pos:column="13">waitret<pos:position pos:line="131" pos:column="20"/></name> <operator pos:line="131" pos:column="21">=<pos:position pos:line="131" pos:column="22"/></operator> <call><name pos:line="131" pos:column="23">apr_proc_wait<pos:position pos:line="131" pos:column="36"/></name><argument_list pos:line="131" pos:column="36">(<argument><expr><operator pos:line="131" pos:column="37">&amp;<pos:position pos:line="131" pos:column="42"/></operator><name pos:line="131" pos:column="38">proc<pos:position pos:line="131" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="44">NULL<pos:position pos:line="131" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="50">NULL<pos:position pos:line="131" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="56">APR_NOWAIT<pos:position pos:line="131" pos:column="66"/></name></expr></argument>)<pos:position pos:line="131" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="68"/></expr_stmt>
            <if pos:line="132" pos:column="13">if <condition pos:line="132" pos:column="16">(<expr><name pos:line="132" pos:column="17">waitret<pos:position pos:line="132" pos:column="24"/></name> <operator pos:line="132" pos:column="25">!=<pos:position pos:line="132" pos:column="27"/></operator> <name pos:line="132" pos:column="28">APR_CHILD_NOTDONE<pos:position pos:line="132" pos:column="45"/></name></expr>)<pos:position pos:line="132" pos:column="46"/></condition><then pos:line="132" pos:column="46"> <block pos:line="132" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="133" pos:column="17">MPM_NOTE_CHILD_KILLED<pos:position pos:line="133" pos:column="38"/></name><argument_list pos:line="133" pos:column="38">(<argument><expr><name pos:line="133" pos:column="39">i<pos:position pos:line="133" pos:column="40"/></name></expr></argument>)<pos:position pos:line="133" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="42"/></expr_stmt>
                <continue pos:line="134" pos:column="17">continue;<pos:position pos:line="134" pos:column="26"/></continue>
            }<pos:position pos:line="135" pos:column="14"/></block></then></if>

            <expr_stmt><expr><operator pos:line="137" pos:column="13">++<pos:position pos:line="137" pos:column="15"/></operator><name pos:line="137" pos:column="15">not_dead_yet<pos:position pos:line="137" pos:column="27"/></name></expr>;<pos:position pos:line="137" pos:column="28"/></expr_stmt>
            <switch pos:line="138" pos:column="13">switch <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">tries<pos:position pos:line="138" pos:column="26"/></name></expr>)<pos:position pos:line="138" pos:column="27"/></condition> <block pos:line="138" pos:column="28">{
            <case pos:line="139" pos:column="13">case <expr><literal type="number" pos:line="139" pos:column="18">1<pos:position pos:line="139" pos:column="19"/></literal></expr>:<pos:position pos:line="139" pos:column="20"/></case>     <comment type="block" pos:line="139" pos:column="25">/*  16ms */</comment>
            <case pos:line="140" pos:column="13">case <expr><literal type="number" pos:line="140" pos:column="18">2<pos:position pos:line="140" pos:column="19"/></literal></expr>:<pos:position pos:line="140" pos:column="20"/></case>     <comment type="block" pos:line="140" pos:column="25">/*  82ms */</comment>
            <case pos:line="141" pos:column="13">case <expr><literal type="number" pos:line="141" pos:column="18">3<pos:position pos:line="141" pos:column="19"/></literal></expr>:<pos:position pos:line="141" pos:column="20"/></case>     <comment type="block" pos:line="141" pos:column="25">/* 344ms */</comment>
            <case pos:line="142" pos:column="13">case <expr><literal type="number" pos:line="142" pos:column="18">4<pos:position pos:line="142" pos:column="19"/></literal></expr>:<pos:position pos:line="142" pos:column="20"/></case>     <comment type="block" pos:line="142" pos:column="25">/*  16ms */</comment>
                <break pos:line="143" pos:column="17">break;<pos:position pos:line="143" pos:column="23"/></break>

            <case pos:line="145" pos:column="13">case <expr><literal type="number" pos:line="145" pos:column="18">5<pos:position pos:line="145" pos:column="19"/></literal></expr>:<pos:position pos:line="145" pos:column="20"/></case>     <comment type="block" pos:line="145" pos:column="25">/*  82ms */</comment>
            <case pos:line="146" pos:column="13">case <expr><literal type="number" pos:line="146" pos:column="18">6<pos:position pos:line="146" pos:column="19"/></literal></expr>:<pos:position pos:line="146" pos:column="20"/></case>     <comment type="block" pos:line="146" pos:column="25">/* 344ms */</comment>
            <case pos:line="147" pos:column="13">case <expr><literal type="number" pos:line="147" pos:column="18">7<pos:position pos:line="147" pos:column="19"/></literal></expr>:<pos:position pos:line="147" pos:column="20"/></case>     <comment type="block" pos:line="147" pos:column="25">/* 1.4sec */</comment>
                <comment type="block" pos:line="148" pos:column="17">/* ok, now it's being annoying */</comment>
                <expr_stmt><expr><call><name pos:line="149" pos:column="17">ap_log_error<pos:position pos:line="149" pos:column="29"/></name><argument_list pos:line="149" pos:column="29">(<argument><expr><name pos:line="149" pos:column="30">APLOG_MARK<pos:position pos:line="149" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="42">APLOG_WARNING<pos:position pos:line="149" pos:column="55"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="150" pos:column="30">0<pos:position pos:line="150" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="33">ap_server_conf<pos:position pos:line="150" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="151" pos:column="30">"child process %ld still did not exit, "<pos:position pos:line="151" pos:column="70"/></literal>
                             <literal type="string" pos:line="152" pos:column="30">"sending a SIGTERM"<pos:position pos:line="152" pos:column="49"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="153" pos:column="30">(<pos:position pos:line="153" pos:column="31"/></operator><name pos:line="153" pos:column="31">long<pos:position pos:line="153" pos:column="35"/></name><operator pos:line="153" pos:column="35">)<pos:position pos:line="153" pos:column="36"/></operator><name pos:line="153" pos:column="36">pid<pos:position pos:line="153" pos:column="39"/></name></expr></argument>)<pos:position pos:line="153" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="154" pos:column="17">kill<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><name pos:line="154" pos:column="22">pid<pos:position pos:line="154" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="27">SIGTERM<pos:position pos:line="154" pos:column="34"/></name></expr></argument>)<pos:position pos:line="154" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="36"/></expr_stmt>
                <break pos:line="155" pos:column="17">break;<pos:position pos:line="155" pos:column="23"/></break>

            <case pos:line="157" pos:column="13">case <expr><literal type="number" pos:line="157" pos:column="18">8<pos:position pos:line="157" pos:column="19"/></literal></expr>:<pos:position pos:line="157" pos:column="20"/></case>     <comment type="block" pos:line="157" pos:column="25">/*  6 sec */</comment>
                <comment type="block" pos:line="158" pos:column="17">/* die child scum */</comment>
                <expr_stmt><expr><call><name pos:line="159" pos:column="17">ap_log_error<pos:position pos:line="159" pos:column="29"/></name><argument_list pos:line="159" pos:column="29">(<argument><expr><name pos:line="159" pos:column="30">APLOG_MARK<pos:position pos:line="159" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="42">APLOG_ERR<pos:position pos:line="159" pos:column="51"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="160" pos:column="30">0<pos:position pos:line="160" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="33">ap_server_conf<pos:position pos:line="160" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="161" pos:column="30">"child process %ld still did not exit, "<pos:position pos:line="161" pos:column="70"/></literal>
                             <literal type="string" pos:line="162" pos:column="30">"sending a SIGKILL"<pos:position pos:line="162" pos:column="49"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="163" pos:column="30">(<pos:position pos:line="163" pos:column="31"/></operator><name pos:line="163" pos:column="31">long<pos:position pos:line="163" pos:column="35"/></name><operator pos:line="163" pos:column="35">)<pos:position pos:line="163" pos:column="36"/></operator><name pos:line="163" pos:column="36">pid<pos:position pos:line="163" pos:column="39"/></name></expr></argument>)<pos:position pos:line="163" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="41"/></expr_stmt>
<cpp:ifndef pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">ifndef<pos:position pos:line="164" pos:column="8"/></cpp:directive> <name pos:line="164" pos:column="9">BEOS<pos:position pos:line="164" pos:column="13"/></name></cpp:ifndef>
                <expr_stmt><expr><call><name pos:line="165" pos:column="17">kill<pos:position pos:line="165" pos:column="21"/></name><argument_list pos:line="165" pos:column="21">(<argument><expr><name pos:line="165" pos:column="22">pid<pos:position pos:line="165" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="27">SIGKILL<pos:position pos:line="165" pos:column="34"/></name></expr></argument>)<pos:position pos:line="165" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="36"/></expr_stmt>
<cpp:else pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">else<pos:position pos:line="166" pos:column="6"/></cpp:directive></cpp:else>
                <comment type="block" pos:line="167" pos:column="17">/* sending a SIGKILL kills the entire team on BeOS, and as
                 * httpd thread is part of that team it removes any chance
                 * of ever doing a restart.  To counter this I'm changing to
                 * use a kinder, gentler way of killing a specific thread
                 * that is just as effective.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="173" pos:column="17">kill_thread<pos:position pos:line="173" pos:column="28"/></name><argument_list pos:line="173" pos:column="28">(<argument><expr><name pos:line="173" pos:column="29">pid<pos:position pos:line="173" pos:column="32"/></name></expr></argument>)<pos:position pos:line="173" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">endif<pos:position pos:line="174" pos:column="7"/></cpp:directive></cpp:endif>
                <break pos:line="175" pos:column="17">break;<pos:position pos:line="175" pos:column="23"/></break>

            <case pos:line="177" pos:column="13">case <expr><literal type="number" pos:line="177" pos:column="18">9<pos:position pos:line="177" pos:column="19"/></literal></expr>:<pos:position pos:line="177" pos:column="20"/></case>     <comment type="block" pos:line="177" pos:column="25">/* 14 sec */</comment>
                <comment type="block" pos:line="178" pos:column="17">/* gave it our best shot, but alas...  If this really
                 * is a child we are trying to kill and it really hasn't
                 * exited, we will likely fail to bind to the port
                 * after the restart.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="183" pos:column="17">ap_log_error<pos:position pos:line="183" pos:column="29"/></name><argument_list pos:line="183" pos:column="29">(<argument><expr><name pos:line="183" pos:column="30">APLOG_MARK<pos:position pos:line="183" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="42">APLOG_ERR<pos:position pos:line="183" pos:column="51"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="184" pos:column="30">0<pos:position pos:line="184" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="184" pos:column="33">ap_server_conf<pos:position pos:line="184" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="185" pos:column="30">"could not make child process %ld exit, "<pos:position pos:line="185" pos:column="71"/></literal>
                             <literal type="string" pos:line="186" pos:column="30">"attempting to continue anyway"<pos:position pos:line="186" pos:column="61"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="187" pos:column="30">(<pos:position pos:line="187" pos:column="31"/></operator><name pos:line="187" pos:column="31">long<pos:position pos:line="187" pos:column="35"/></name><operator pos:line="187" pos:column="35">)<pos:position pos:line="187" pos:column="36"/></operator><name pos:line="187" pos:column="36">pid<pos:position pos:line="187" pos:column="39"/></name></expr></argument>)<pos:position pos:line="187" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="41"/></expr_stmt>
                <break pos:line="188" pos:column="17">break;<pos:position pos:line="188" pos:column="23"/></break>
            }<pos:position pos:line="189" pos:column="14"/></block></switch>
        }<pos:position pos:line="190" pos:column="10"/></block></for>

<cpp:if pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">if<pos:position pos:line="192" pos:column="4"/></cpp:directive> <expr><name pos:line="192" pos:column="5">APR_HAS_OTHER_CHILD<pos:position pos:line="192" pos:column="24"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="193" pos:column="9">apr_proc_other_child_check<pos:position pos:line="193" pos:column="35"/></name><argument_list pos:line="193" pos:column="35">()<pos:position pos:line="193" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">endif<pos:position pos:line="194" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="196" pos:column="9">if <condition pos:line="196" pos:column="12">(<expr><operator pos:line="196" pos:column="13">!<pos:position pos:line="196" pos:column="14"/></operator><name pos:line="196" pos:column="14">not_dead_yet<pos:position pos:line="196" pos:column="26"/></name></expr>)<pos:position pos:line="196" pos:column="27"/></condition><then pos:line="196" pos:column="27"> <block pos:line="196" pos:column="28">{
            <comment type="block" pos:line="197" pos:column="13">/* nothing left to wait for */</comment>
            <break pos:line="198" pos:column="13">break;<pos:position pos:line="198" pos:column="19"/></break>
        }<pos:position pos:line="199" pos:column="10"/></block></then></if>
    }<pos:position pos:line="200" pos:column="6"/></block></for>
}<pos:position pos:line="201" pos:column="2"/></block></function>
<cpp:endif pos:line="202" pos:column="1">#<cpp:directive pos:line="202" pos:column="2">endif<pos:position pos:line="202" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="202" pos:column="8">/* AP_MPM_WANT_RECLAIM_CHILD_PROCESSES */</comment>

<cpp:ifdef pos:line="204" pos:column="1">#<cpp:directive pos:line="204" pos:column="2">ifdef<pos:position pos:line="204" pos:column="7"/></cpp:directive> <name pos:line="204" pos:column="8">AP_MPM_WANT_WAIT_OR_TIMEOUT<pos:position pos:line="204" pos:column="35"/></name></cpp:ifdef>

<comment type="block" pos:line="206" pos:column="1">/* number of calls to wait_or_timeout between writable probes */</comment>
<cpp:ifndef pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">ifndef<pos:position pos:line="207" pos:column="8"/></cpp:directive> <name pos:line="207" pos:column="9">INTERVAL_OF_WRITABLE_PROBES<pos:position pos:line="207" pos:column="36"/></name></cpp:ifndef>
<cpp:define pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">define<pos:position pos:line="208" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="208" pos:column="9">INTERVAL_OF_WRITABLE_PROBES<pos:position pos:line="208" pos:column="36"/></name></cpp:macro> <cpp:value pos:line="208" pos:column="37">10<pos:position pos:line="208" pos:column="39"/></cpp:value></cpp:define>
<cpp:endif pos:line="209" pos:column="1">#<cpp:directive pos:line="209" pos:column="2">endif<pos:position pos:line="209" pos:column="7"/></cpp:directive></cpp:endif>
<decl_stmt><decl><specifier pos:line="210" pos:column="1">static<pos:position pos:line="210" pos:column="7"/></specifier> <type><name pos:line="210" pos:column="8">int<pos:position pos:line="210" pos:column="11"/></name></type> <name pos:line="210" pos:column="12">wait_or_timeout_counter<pos:position pos:line="210" pos:column="35"/></name></decl>;<pos:position pos:line="210" pos:column="36"/></decl_stmt>

<function><type><name pos:line="212" pos:column="1">void<pos:position pos:line="212" pos:column="5"/></name></type> <name pos:line="212" pos:column="6">ap_wait_or_timeout<pos:position pos:line="212" pos:column="24"/></name><parameter_list pos:line="212" pos:column="24">(<parameter><decl><type><name pos:line="212" pos:column="25">apr_exit_why_e<pos:position pos:line="212" pos:column="39"/></name> <modifier pos:line="212" pos:column="40">*<pos:position pos:line="212" pos:column="41"/></modifier></type><name pos:line="212" pos:column="41">status<pos:position pos:line="212" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="212" pos:column="49">int<pos:position pos:line="212" pos:column="52"/></name> <modifier pos:line="212" pos:column="53">*<pos:position pos:line="212" pos:column="54"/></modifier></type><name pos:line="212" pos:column="54">exitcode<pos:position pos:line="212" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="212" pos:column="64">apr_proc_t<pos:position pos:line="212" pos:column="74"/></name> <modifier pos:line="212" pos:column="75">*<pos:position pos:line="212" pos:column="76"/></modifier></type><name pos:line="212" pos:column="76">ret<pos:position pos:line="212" pos:column="79"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="213" pos:column="25">apr_pool_t<pos:position pos:line="213" pos:column="35"/></name> <modifier pos:line="213" pos:column="36">*<pos:position pos:line="213" pos:column="37"/></modifier></type><name pos:line="213" pos:column="37">p<pos:position pos:line="213" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="213" pos:column="39"/></parameter_list>
<block pos:line="214" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="215" pos:column="5">apr_status_t<pos:position pos:line="215" pos:column="17"/></name></type> <name pos:line="215" pos:column="18">rv<pos:position pos:line="215" pos:column="20"/></name></decl>;<pos:position pos:line="215" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="217" pos:column="5">++<pos:position pos:line="217" pos:column="7"/></operator><name pos:line="217" pos:column="7">wait_or_timeout_counter<pos:position pos:line="217" pos:column="30"/></name></expr>;<pos:position pos:line="217" pos:column="31"/></expr_stmt>
    <if pos:line="218" pos:column="5">if <condition pos:line="218" pos:column="8">(<expr><name pos:line="218" pos:column="9">wait_or_timeout_counter<pos:position pos:line="218" pos:column="32"/></name> <operator pos:line="218" pos:column="33">==<pos:position pos:line="218" pos:column="35"/></operator> <name pos:line="218" pos:column="36">INTERVAL_OF_WRITABLE_PROBES<pos:position pos:line="218" pos:column="63"/></name></expr>)<pos:position pos:line="218" pos:column="64"/></condition><then pos:line="218" pos:column="64"> <block pos:line="218" pos:column="65">{
        <expr_stmt><expr><name pos:line="219" pos:column="9">wait_or_timeout_counter<pos:position pos:line="219" pos:column="32"/></name> <operator pos:line="219" pos:column="33">=<pos:position pos:line="219" pos:column="34"/></operator> <literal type="number" pos:line="219" pos:column="35">0<pos:position pos:line="219" pos:column="36"/></literal></expr>;<pos:position pos:line="219" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="220" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="222" pos:column="5">rv<pos:position pos:line="222" pos:column="7"/></name> <operator pos:line="222" pos:column="8">=<pos:position pos:line="222" pos:column="9"/></operator> <call><name pos:line="222" pos:column="10">apr_proc_wait_all_procs<pos:position pos:line="222" pos:column="33"/></name><argument_list pos:line="222" pos:column="33">(<argument><expr><name pos:line="222" pos:column="34">ret<pos:position pos:line="222" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="39">exitcode<pos:position pos:line="222" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="49">status<pos:position pos:line="222" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="57">APR_NOWAIT<pos:position pos:line="222" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="69">p<pos:position pos:line="222" pos:column="70"/></name></expr></argument>)<pos:position pos:line="222" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="72"/></expr_stmt>
    <if pos:line="223" pos:column="5">if <condition pos:line="223" pos:column="8">(<expr><call><name pos:line="223" pos:column="9">APR_STATUS_IS_EINTR<pos:position pos:line="223" pos:column="28"/></name><argument_list pos:line="223" pos:column="28">(<argument><expr><name pos:line="223" pos:column="29">rv<pos:position pos:line="223" pos:column="31"/></name></expr></argument>)<pos:position pos:line="223" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="223" pos:column="33"/></condition><then pos:line="223" pos:column="33"> <block pos:line="223" pos:column="34">{
        <expr_stmt><expr><name><name pos:line="224" pos:column="9">ret<pos:position pos:line="224" pos:column="12"/></name><operator pos:line="224" pos:column="12">-&gt;<pos:position pos:line="224" pos:column="17"/></operator><name pos:line="224" pos:column="14">pid<pos:position pos:line="224" pos:column="17"/></name></name> <operator pos:line="224" pos:column="18">=<pos:position pos:line="224" pos:column="19"/></operator> <operator pos:line="224" pos:column="20">-<pos:position pos:line="224" pos:column="21"/></operator><literal type="number" pos:line="224" pos:column="21">1<pos:position pos:line="224" pos:column="22"/></literal></expr>;<pos:position pos:line="224" pos:column="23"/></expr_stmt>
        <return pos:line="225" pos:column="9">return;<pos:position pos:line="225" pos:column="16"/></return>
    }<pos:position pos:line="226" pos:column="6"/></block></then></if>

    <if pos:line="228" pos:column="5">if <condition pos:line="228" pos:column="8">(<expr><call><name pos:line="228" pos:column="9">APR_STATUS_IS_CHILD_DONE<pos:position pos:line="228" pos:column="33"/></name><argument_list pos:line="228" pos:column="33">(<argument><expr><name pos:line="228" pos:column="34">rv<pos:position pos:line="228" pos:column="36"/></name></expr></argument>)<pos:position pos:line="228" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="228" pos:column="38"/></condition><then pos:line="228" pos:column="38"> <block pos:line="228" pos:column="39">{
        <return pos:line="229" pos:column="9">return;<pos:position pos:line="229" pos:column="16"/></return>
    }<pos:position pos:line="230" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="232" pos:column="1">#<cpp:directive pos:line="232" pos:column="2">ifdef<pos:position pos:line="232" pos:column="7"/></cpp:directive> <name pos:line="232" pos:column="8">NEED_WAITPID<pos:position pos:line="232" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="233" pos:column="5">if <condition pos:line="233" pos:column="8">(<expr><operator pos:line="233" pos:column="9">(<pos:position pos:line="233" pos:column="10"/></operator><name pos:line="233" pos:column="10">ret<pos:position pos:line="233" pos:column="13"/></name> <operator pos:line="233" pos:column="14">=<pos:position pos:line="233" pos:column="15"/></operator> <call><name pos:line="233" pos:column="16">reap_children<pos:position pos:line="233" pos:column="29"/></name><argument_list pos:line="233" pos:column="29">(<argument><expr><name pos:line="233" pos:column="30">exitcode<pos:position pos:line="233" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="40">status<pos:position pos:line="233" pos:column="46"/></name></expr></argument>)<pos:position pos:line="233" pos:column="47"/></argument_list></call><operator pos:line="233" pos:column="47">)<pos:position pos:line="233" pos:column="48"/></operator> <operator pos:line="233" pos:column="49">&gt;<pos:position pos:line="233" pos:column="53"/></operator> <literal type="number" pos:line="233" pos:column="51">0<pos:position pos:line="233" pos:column="52"/></literal></expr>)<pos:position pos:line="233" pos:column="53"/></condition><then pos:line="233" pos:column="53"> <block pos:line="233" pos:column="54">{
        <return pos:line="234" pos:column="9">return;<pos:position pos:line="234" pos:column="16"/></return>
    }<pos:position pos:line="235" pos:column="6"/></block></then></if>
<cpp:endif pos:line="236" pos:column="1">#<cpp:directive pos:line="236" pos:column="2">endif<pos:position pos:line="236" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="238" pos:column="5">apr_sleep<pos:position pos:line="238" pos:column="14"/></name><argument_list pos:line="238" pos:column="14">(<argument><expr><name pos:line="238" pos:column="15">SCOREBOARD_MAINTENANCE_INTERVAL<pos:position pos:line="238" pos:column="46"/></name></expr></argument>)<pos:position pos:line="238" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="239" pos:column="5">ret<pos:position pos:line="239" pos:column="8"/></name><operator pos:line="239" pos:column="8">-&gt;<pos:position pos:line="239" pos:column="13"/></operator><name pos:line="239" pos:column="10">pid<pos:position pos:line="239" pos:column="13"/></name></name> <operator pos:line="239" pos:column="14">=<pos:position pos:line="239" pos:column="15"/></operator> <operator pos:line="239" pos:column="16">-<pos:position pos:line="239" pos:column="17"/></operator><literal type="number" pos:line="239" pos:column="17">1<pos:position pos:line="239" pos:column="18"/></literal></expr>;<pos:position pos:line="239" pos:column="19"/></expr_stmt>
    <return pos:line="240" pos:column="5">return;<pos:position pos:line="240" pos:column="12"/></return>
}<pos:position pos:line="241" pos:column="2"/></block></function>
<cpp:endif pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">endif<pos:position pos:line="242" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="242" pos:column="8">/* AP_MPM_WANT_WAIT_OR_TIMEOUT */</comment>

<cpp:ifdef pos:line="244" pos:column="1">#<cpp:directive pos:line="244" pos:column="2">ifdef<pos:position pos:line="244" pos:column="7"/></cpp:directive> <name pos:line="244" pos:column="8">AP_MPM_WANT_PROCESS_CHILD_STATUS<pos:position pos:line="244" pos:column="40"/></name></cpp:ifdef>
<function><type><name pos:line="245" pos:column="1">int<pos:position pos:line="245" pos:column="4"/></name></type> <name pos:line="245" pos:column="5">ap_process_child_status<pos:position pos:line="245" pos:column="28"/></name><parameter_list pos:line="245" pos:column="28">(<parameter><decl><type><name pos:line="245" pos:column="29">apr_proc_t<pos:position pos:line="245" pos:column="39"/></name> <modifier pos:line="245" pos:column="40">*<pos:position pos:line="245" pos:column="41"/></modifier></type><name pos:line="245" pos:column="41">pid<pos:position pos:line="245" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="245" pos:column="46">apr_exit_why_e<pos:position pos:line="245" pos:column="60"/></name></type> <name pos:line="245" pos:column="61">why<pos:position pos:line="245" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="245" pos:column="66">int<pos:position pos:line="245" pos:column="69"/></name></type> <name pos:line="245" pos:column="70">status<pos:position pos:line="245" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="245" pos:column="77"/></parameter_list>
<block pos:line="246" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="247" pos:column="5">int<pos:position pos:line="247" pos:column="8"/></name></type> <name pos:line="247" pos:column="9">signum<pos:position pos:line="247" pos:column="15"/></name> <init pos:line="247" pos:column="16">= <expr><name pos:line="247" pos:column="18">status<pos:position pos:line="247" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="247" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="248" pos:column="5">const<pos:position pos:line="248" pos:column="10"/></specifier> <name pos:line="248" pos:column="11">char<pos:position pos:line="248" pos:column="15"/></name> <modifier pos:line="248" pos:column="16">*<pos:position pos:line="248" pos:column="17"/></modifier></type><name pos:line="248" pos:column="17">sigdesc<pos:position pos:line="248" pos:column="24"/></name> <init pos:line="248" pos:column="25">= <expr><call><name pos:line="248" pos:column="27">apr_signal_description_get<pos:position pos:line="248" pos:column="53"/></name><argument_list pos:line="248" pos:column="53">(<argument><expr><name pos:line="248" pos:column="54">signum<pos:position pos:line="248" pos:column="60"/></name></expr></argument>)<pos:position pos:line="248" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="248" pos:column="62"/></decl_stmt>

    <comment type="block" pos:line="250" pos:column="5">/* Child died... if it died due to a fatal error,
     * we should simply bail out.  The caller needs to
     * check for bad rc from us and exit, running any
     * appropriate cleanups.
     *
     * If the child died due to a resource shortage, 
     * the parent should limit the rate of forking
     */</comment>
    <if pos:line="258" pos:column="5">if <condition pos:line="258" pos:column="8">(<expr><call><name pos:line="258" pos:column="9">APR_PROC_CHECK_EXIT<pos:position pos:line="258" pos:column="28"/></name><argument_list pos:line="258" pos:column="28">(<argument><expr><name pos:line="258" pos:column="29">why<pos:position pos:line="258" pos:column="32"/></name></expr></argument>)<pos:position pos:line="258" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="258" pos:column="34"/></condition><then pos:line="258" pos:column="34"> <block pos:line="258" pos:column="35">{
        <if pos:line="259" pos:column="9">if <condition pos:line="259" pos:column="12">(<expr><name pos:line="259" pos:column="13">status<pos:position pos:line="259" pos:column="19"/></name> <operator pos:line="259" pos:column="20">==<pos:position pos:line="259" pos:column="22"/></operator> <name pos:line="259" pos:column="23">APEXIT_CHILDSICK<pos:position pos:line="259" pos:column="39"/></name></expr>)<pos:position pos:line="259" pos:column="40"/></condition><then pos:line="259" pos:column="40"> <block pos:line="259" pos:column="41">{
            <return pos:line="260" pos:column="13">return <expr><name pos:line="260" pos:column="20">status<pos:position pos:line="260" pos:column="26"/></name></expr>;<pos:position pos:line="260" pos:column="27"/></return>
        }<pos:position pos:line="261" pos:column="10"/></block></then></if>

        <if pos:line="263" pos:column="9">if <condition pos:line="263" pos:column="12">(<expr><name pos:line="263" pos:column="13">status<pos:position pos:line="263" pos:column="19"/></name> <operator pos:line="263" pos:column="20">==<pos:position pos:line="263" pos:column="22"/></operator> <name pos:line="263" pos:column="23">APEXIT_CHILDFATAL<pos:position pos:line="263" pos:column="40"/></name></expr>)<pos:position pos:line="263" pos:column="41"/></condition><then pos:line="263" pos:column="41"> <block pos:line="263" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="264" pos:column="13">ap_log_error<pos:position pos:line="264" pos:column="25"/></name><argument_list pos:line="264" pos:column="25">(<argument><expr><name pos:line="264" pos:column="26">APLOG_MARK<pos:position pos:line="264" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="264" pos:column="38">APLOG_ALERT<pos:position pos:line="264" pos:column="49"/></name></expr></argument>,
                         <argument><expr><literal type="number" pos:line="265" pos:column="26">0<pos:position pos:line="265" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="29">ap_server_conf<pos:position pos:line="265" pos:column="43"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="266" pos:column="26">"Child %"<pos:position pos:line="266" pos:column="35"/></literal> <name pos:line="266" pos:column="36">APR_PID_T_FMT<pos:position pos:line="266" pos:column="49"/></name>
                         <literal type="string" pos:line="267" pos:column="26">" returned a Fatal error..."<pos:position pos:line="267" pos:column="54"/></literal> <name pos:line="267" pos:column="55">APR_EOL_STR<pos:position pos:line="267" pos:column="66"/></name>
                         <literal type="string" pos:line="268" pos:column="26">"Apache is exiting!"<pos:position pos:line="268" pos:column="46"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="269" pos:column="26">pid<pos:position pos:line="269" pos:column="29"/></name><operator pos:line="269" pos:column="29">-&gt;<pos:position pos:line="269" pos:column="34"/></operator><name pos:line="269" pos:column="31">pid<pos:position pos:line="269" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="269" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="36"/></expr_stmt>
            <return pos:line="270" pos:column="13">return <expr><name pos:line="270" pos:column="20">APEXIT_CHILDFATAL<pos:position pos:line="270" pos:column="37"/></name></expr>;<pos:position pos:line="270" pos:column="38"/></return>
        }<pos:position pos:line="271" pos:column="10"/></block></then></if>

        <return pos:line="273" pos:column="9">return <expr><literal type="number" pos:line="273" pos:column="16">0<pos:position pos:line="273" pos:column="17"/></literal></expr>;<pos:position pos:line="273" pos:column="18"/></return>
    }<pos:position pos:line="274" pos:column="6"/></block></then></if>

    <if pos:line="276" pos:column="5">if <condition pos:line="276" pos:column="8">(<expr><call><name pos:line="276" pos:column="9">APR_PROC_CHECK_SIGNALED<pos:position pos:line="276" pos:column="32"/></name><argument_list pos:line="276" pos:column="32">(<argument><expr><name pos:line="276" pos:column="33">why<pos:position pos:line="276" pos:column="36"/></name></expr></argument>)<pos:position pos:line="276" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="276" pos:column="38"/></condition><then pos:line="276" pos:column="38"> <block pos:line="276" pos:column="39">{
        <switch pos:line="277" pos:column="9">switch <condition pos:line="277" pos:column="16">(<expr><name pos:line="277" pos:column="17">signum<pos:position pos:line="277" pos:column="23"/></name></expr>)<pos:position pos:line="277" pos:column="24"/></condition> <block pos:line="277" pos:column="25">{
        <case pos:line="278" pos:column="9">case <expr><name pos:line="278" pos:column="14">SIGTERM<pos:position pos:line="278" pos:column="21"/></name></expr>:<pos:position pos:line="278" pos:column="22"/></case>
        <case pos:line="279" pos:column="9">case <expr><name pos:line="279" pos:column="14">SIGHUP<pos:position pos:line="279" pos:column="20"/></name></expr>:<pos:position pos:line="279" pos:column="21"/></case>
        <case pos:line="280" pos:column="9">case <expr><name pos:line="280" pos:column="14">AP_SIG_GRACEFUL<pos:position pos:line="280" pos:column="29"/></name></expr>:<pos:position pos:line="280" pos:column="30"/></case>
        <case pos:line="281" pos:column="9">case <expr><name pos:line="281" pos:column="14">SIGKILL<pos:position pos:line="281" pos:column="21"/></name></expr>:<pos:position pos:line="281" pos:column="22"/></case>
            <break pos:line="282" pos:column="13">break;<pos:position pos:line="282" pos:column="19"/></break>

        <default pos:line="284" pos:column="9">default:<pos:position pos:line="284" pos:column="17"/></default>
            <if pos:line="285" pos:column="13">if <condition pos:line="285" pos:column="16">(<expr><call><name pos:line="285" pos:column="17">APR_PROC_CHECK_CORE_DUMP<pos:position pos:line="285" pos:column="41"/></name><argument_list pos:line="285" pos:column="41">(<argument><expr><name pos:line="285" pos:column="42">why<pos:position pos:line="285" pos:column="45"/></name></expr></argument>)<pos:position pos:line="285" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="285" pos:column="47"/></condition><then pos:line="285" pos:column="47"> <block pos:line="285" pos:column="48">{
                <expr_stmt><expr><call><name pos:line="286" pos:column="17">ap_log_error<pos:position pos:line="286" pos:column="29"/></name><argument_list pos:line="286" pos:column="29">(<argument><expr><name pos:line="286" pos:column="30">APLOG_MARK<pos:position pos:line="286" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="286" pos:column="42">APLOG_NOTICE<pos:position pos:line="286" pos:column="54"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="287" pos:column="30">0<pos:position pos:line="287" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="287" pos:column="33">ap_server_conf<pos:position pos:line="287" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="288" pos:column="30">"child pid %ld exit signal %s (%d), "<pos:position pos:line="288" pos:column="67"/></literal>
                             <literal type="string" pos:line="289" pos:column="30">"possible coredump in %s"<pos:position pos:line="289" pos:column="55"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="290" pos:column="30">(<pos:position pos:line="290" pos:column="31"/></operator><name pos:line="290" pos:column="31">long<pos:position pos:line="290" pos:column="35"/></name><operator pos:line="290" pos:column="35">)<pos:position pos:line="290" pos:column="36"/></operator><name><name pos:line="290" pos:column="36">pid<pos:position pos:line="290" pos:column="39"/></name><operator pos:line="290" pos:column="39">-&gt;<pos:position pos:line="290" pos:column="44"/></operator><name pos:line="290" pos:column="41">pid<pos:position pos:line="290" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="46">sigdesc<pos:position pos:line="290" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="55">signum<pos:position pos:line="290" pos:column="61"/></name></expr></argument>,
                             <argument><expr><name pos:line="291" pos:column="30">ap_coredump_dir<pos:position pos:line="291" pos:column="45"/></name></expr></argument>)<pos:position pos:line="291" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="292" pos:column="14"/></block></then>
            <else pos:line="293" pos:column="13">else <block pos:line="293" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="294" pos:column="17">ap_log_error<pos:position pos:line="294" pos:column="29"/></name><argument_list pos:line="294" pos:column="29">(<argument><expr><name pos:line="294" pos:column="30">APLOG_MARK<pos:position pos:line="294" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="42">APLOG_NOTICE<pos:position pos:line="294" pos:column="54"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="295" pos:column="30">0<pos:position pos:line="295" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="295" pos:column="33">ap_server_conf<pos:position pos:line="295" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="296" pos:column="30">"child pid %ld exit signal %s (%d)"<pos:position pos:line="296" pos:column="65"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="297" pos:column="30">(<pos:position pos:line="297" pos:column="31"/></operator><name pos:line="297" pos:column="31">long<pos:position pos:line="297" pos:column="35"/></name><operator pos:line="297" pos:column="35">)<pos:position pos:line="297" pos:column="36"/></operator><name><name pos:line="297" pos:column="36">pid<pos:position pos:line="297" pos:column="39"/></name><operator pos:line="297" pos:column="39">-&gt;<pos:position pos:line="297" pos:column="44"/></operator><name pos:line="297" pos:column="41">pid<pos:position pos:line="297" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="46">sigdesc<pos:position pos:line="297" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="55">signum<pos:position pos:line="297" pos:column="61"/></name></expr></argument>)<pos:position pos:line="297" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="297" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="298" pos:column="14"/></block></else></if>
        }<pos:position pos:line="299" pos:column="10"/></block></switch>
    }<pos:position pos:line="300" pos:column="6"/></block></then></if>
    <return pos:line="301" pos:column="5">return <expr><literal type="number" pos:line="301" pos:column="12">0<pos:position pos:line="301" pos:column="13"/></literal></expr>;<pos:position pos:line="301" pos:column="14"/></return>
}<pos:position pos:line="302" pos:column="2"/></block></function>
<cpp:endif pos:line="303" pos:column="1">#<cpp:directive pos:line="303" pos:column="2">endif<pos:position pos:line="303" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="303" pos:column="8">/* AP_MPM_WANT_PROCESS_CHILD_STATUS */</comment>

<cpp:if pos:line="305" pos:column="1">#<cpp:directive pos:line="305" pos:column="2">if<pos:position pos:line="305" pos:column="4"/></cpp:directive> <expr><call><name pos:line="305" pos:column="5">defined<pos:position pos:line="305" pos:column="12"/></name><argument_list pos:line="305" pos:column="12">(<argument><expr><name pos:line="305" pos:column="13">TCP_NODELAY<pos:position pos:line="305" pos:column="24"/></name></expr></argument>)<pos:position pos:line="305" pos:column="25"/></argument_list></call> <operator pos:line="305" pos:column="26">&amp;&amp;<pos:position pos:line="305" pos:column="36"/></operator> <operator pos:line="305" pos:column="29">!<pos:position pos:line="305" pos:column="30"/></operator><call><name pos:line="305" pos:column="30">defined<pos:position pos:line="305" pos:column="37"/></name><argument_list pos:line="305" pos:column="37">(<argument><expr><name pos:line="305" pos:column="38">MPE<pos:position pos:line="305" pos:column="41"/></name></expr></argument>)<pos:position pos:line="305" pos:column="42"/></argument_list></call> <operator pos:line="305" pos:column="43">&amp;&amp;<pos:position pos:line="305" pos:column="53"/></operator> <operator pos:line="305" pos:column="46">!<pos:position pos:line="305" pos:column="47"/></operator><call><name pos:line="305" pos:column="47">defined<pos:position pos:line="305" pos:column="54"/></name><argument_list pos:line="305" pos:column="54">(<argument><expr><name pos:line="305" pos:column="55">TPF<pos:position pos:line="305" pos:column="58"/></name></expr></argument>)<pos:position pos:line="305" pos:column="59"/></argument_list></call> <operator pos:line="305" pos:column="60">&amp;&amp;<pos:position pos:line="305" pos:column="70"/></operator> <operator pos:line="305" pos:column="63">!<pos:position pos:line="305" pos:column="64"/></operator><call><name pos:line="305" pos:column="64">defined<pos:position pos:line="305" pos:column="71"/></name><argument_list pos:line="305" pos:column="71">(<argument><expr><name pos:line="305" pos:column="72">WIN32<pos:position pos:line="305" pos:column="77"/></name></expr></argument>)<pos:position pos:line="305" pos:column="78"/></argument_list></call></expr></cpp:if>
<function><type><name pos:line="306" pos:column="1">void<pos:position pos:line="306" pos:column="5"/></name></type> <name pos:line="306" pos:column="6">ap_sock_disable_nagle<pos:position pos:line="306" pos:column="27"/></name><parameter_list pos:line="306" pos:column="27">(<parameter><decl><type><name pos:line="306" pos:column="28">apr_socket_t<pos:position pos:line="306" pos:column="40"/></name> <modifier pos:line="306" pos:column="41">*<pos:position pos:line="306" pos:column="42"/></modifier></type><name pos:line="306" pos:column="42">s<pos:position pos:line="306" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="306" pos:column="44"/></parameter_list>
<block pos:line="307" pos:column="1">{
    <comment type="block" pos:line="308" pos:column="5">/* The Nagle algorithm says that we should delay sending partial
     * packets in hopes of getting more data.  We don't want to do
     * this; we are not telnet.  There are bad interactions between
     * persistent connections and Nagle's algorithm that have very severe
     * performance penalties.  (Failing to disable Nagle is not much of a
     * problem with simple HTTP.)
     *
     * In spite of these problems, failure here is not a shooting offense.
     */</comment>
    <decl_stmt><decl><type><name pos:line="317" pos:column="5">apr_status_t<pos:position pos:line="317" pos:column="17"/></name></type> <name pos:line="317" pos:column="18">status<pos:position pos:line="317" pos:column="24"/></name> <init pos:line="317" pos:column="25">= <expr><call><name pos:line="317" pos:column="27">apr_socket_opt_set<pos:position pos:line="317" pos:column="45"/></name><argument_list pos:line="317" pos:column="45">(<argument><expr><name pos:line="317" pos:column="46">s<pos:position pos:line="317" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="317" pos:column="49">APR_TCP_NODELAY<pos:position pos:line="317" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="317" pos:column="66">1<pos:position pos:line="317" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="317" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="317" pos:column="69"/></decl_stmt>

    <if pos:line="319" pos:column="5">if <condition pos:line="319" pos:column="8">(<expr><name pos:line="319" pos:column="9">status<pos:position pos:line="319" pos:column="15"/></name> <operator pos:line="319" pos:column="16">!=<pos:position pos:line="319" pos:column="18"/></operator> <name pos:line="319" pos:column="19">APR_SUCCESS<pos:position pos:line="319" pos:column="30"/></name></expr>)<pos:position pos:line="319" pos:column="31"/></condition><then pos:line="319" pos:column="31"> <block pos:line="319" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="320" pos:column="9">ap_log_error<pos:position pos:line="320" pos:column="21"/></name><argument_list pos:line="320" pos:column="21">(<argument><expr><name pos:line="320" pos:column="22">APLOG_MARK<pos:position pos:line="320" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="320" pos:column="34">APLOG_WARNING<pos:position pos:line="320" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="320" pos:column="49">status<pos:position pos:line="320" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="320" pos:column="57">ap_server_conf<pos:position pos:line="320" pos:column="71"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="321" pos:column="22">"apr_socket_opt_set: (TCP_NODELAY)"<pos:position pos:line="321" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="321" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="322" pos:column="6"/></block></then></if>
}<pos:position pos:line="323" pos:column="2"/></block></function>
<cpp:endif pos:line="324" pos:column="1">#<cpp:directive pos:line="324" pos:column="2">endif<pos:position pos:line="324" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="326" pos:column="1">#<cpp:directive pos:line="326" pos:column="2">ifdef<pos:position pos:line="326" pos:column="7"/></cpp:directive> <name pos:line="326" pos:column="8">HAVE_GETPWNAM<pos:position pos:line="326" pos:column="21"/></name></cpp:ifdef>
<macro><name pos:line="327" pos:column="1">AP_DECLARE<pos:position pos:line="327" pos:column="11"/></name><argument_list pos:line="327" pos:column="11">(<argument pos:line="327" pos:column="12">uid_t<pos:position pos:line="327" pos:column="17"/></argument>)<pos:position pos:line="327" pos:column="18"/></argument_list></macro> <macro><name pos:line="327" pos:column="19">ap_uname2id<pos:position pos:line="327" pos:column="30"/></name><argument_list pos:line="327" pos:column="30">(<argument pos:line="327" pos:column="31">const char *name<pos:position pos:line="327" pos:column="47"/></argument>)<pos:position pos:line="327" pos:column="48"/></argument_list></macro>
<block pos:line="328" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="329" pos:column="5">struct<pos:position pos:line="329" pos:column="11"/></name> <name pos:line="329" pos:column="12">passwd<pos:position pos:line="329" pos:column="18"/></name></name> <modifier pos:line="329" pos:column="19">*<pos:position pos:line="329" pos:column="20"/></modifier></type><name pos:line="329" pos:column="20">ent<pos:position pos:line="329" pos:column="23"/></name></decl>;<pos:position pos:line="329" pos:column="24"/></decl_stmt>

    <if pos:line="331" pos:column="5">if <condition pos:line="331" pos:column="8">(<expr><name><name pos:line="331" pos:column="9">name<pos:position pos:line="331" pos:column="13"/></name><index pos:line="331" pos:column="13">[<expr><literal type="number" pos:line="331" pos:column="14">0<pos:position pos:line="331" pos:column="15"/></literal></expr>]<pos:position pos:line="331" pos:column="16"/></index></name> <operator pos:line="331" pos:column="17">==<pos:position pos:line="331" pos:column="19"/></operator> <literal type="char" pos:line="331" pos:column="20">'#'<pos:position pos:line="331" pos:column="23"/></literal></expr>)<pos:position pos:line="331" pos:column="24"/></condition><then pos:line="331" pos:column="24">
        <block type="pseudo"><return pos:line="332" pos:column="9">return <expr><operator pos:line="332" pos:column="16">(<pos:position pos:line="332" pos:column="17"/></operator><call><name pos:line="332" pos:column="17">atoi<pos:position pos:line="332" pos:column="21"/></name><argument_list pos:line="332" pos:column="21">(<argument><expr><operator pos:line="332" pos:column="22">&amp;<pos:position pos:line="332" pos:column="27"/></operator><name><name pos:line="332" pos:column="23">name<pos:position pos:line="332" pos:column="27"/></name><index pos:line="332" pos:column="27">[<expr><literal type="number" pos:line="332" pos:column="28">1<pos:position pos:line="332" pos:column="29"/></literal></expr>]<pos:position pos:line="332" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="332" pos:column="31"/></argument_list></call><operator pos:line="332" pos:column="31">)<pos:position pos:line="332" pos:column="32"/></operator></expr>;<pos:position pos:line="332" pos:column="33"/></return></block></then></if>

    <if pos:line="334" pos:column="5">if <condition pos:line="334" pos:column="8">(<expr><operator pos:line="334" pos:column="9">!<pos:position pos:line="334" pos:column="10"/></operator><operator pos:line="334" pos:column="10">(<pos:position pos:line="334" pos:column="11"/></operator><name pos:line="334" pos:column="11">ent<pos:position pos:line="334" pos:column="14"/></name> <operator pos:line="334" pos:column="15">=<pos:position pos:line="334" pos:column="16"/></operator> <call><name pos:line="334" pos:column="17">getpwnam<pos:position pos:line="334" pos:column="25"/></name><argument_list pos:line="334" pos:column="25">(<argument><expr><name pos:line="334" pos:column="26">name<pos:position pos:line="334" pos:column="30"/></name></expr></argument>)<pos:position pos:line="334" pos:column="31"/></argument_list></call><operator pos:line="334" pos:column="31">)<pos:position pos:line="334" pos:column="32"/></operator></expr>)<pos:position pos:line="334" pos:column="33"/></condition><then pos:line="334" pos:column="33"> <block pos:line="334" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="335" pos:column="9">ap_log_error<pos:position pos:line="335" pos:column="21"/></name><argument_list pos:line="335" pos:column="21">(<argument><expr><name pos:line="335" pos:column="22">APLOG_MARK<pos:position pos:line="335" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="34">APLOG_STARTUP<pos:position pos:line="335" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="335" pos:column="49">0<pos:position pos:line="335" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="335" pos:column="52">NULL<pos:position pos:line="335" pos:column="56"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="336" pos:column="22">"%s: bad user name %s"<pos:position pos:line="336" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="336" pos:column="46">ap_server_argv0<pos:position pos:line="336" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="336" pos:column="63">name<pos:position pos:line="336" pos:column="67"/></name></expr></argument>)<pos:position pos:line="336" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="337" pos:column="9">exit<pos:position pos:line="337" pos:column="13"/></name><argument_list pos:line="337" pos:column="13">(<argument><expr><literal type="number" pos:line="337" pos:column="14">1<pos:position pos:line="337" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="337" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="338" pos:column="6"/></block></then></if>

    <return pos:line="340" pos:column="5">return <expr><operator pos:line="340" pos:column="12">(<pos:position pos:line="340" pos:column="13"/></operator><name><name pos:line="340" pos:column="13">ent<pos:position pos:line="340" pos:column="16"/></name><operator pos:line="340" pos:column="16">-&gt;<pos:position pos:line="340" pos:column="21"/></operator><name pos:line="340" pos:column="18">pw_uid<pos:position pos:line="340" pos:column="24"/></name></name><operator pos:line="340" pos:column="24">)<pos:position pos:line="340" pos:column="25"/></operator></expr>;<pos:position pos:line="340" pos:column="26"/></return>
}<pos:position pos:line="341" pos:column="2"/></block>
<cpp:endif pos:line="342" pos:column="1">#<cpp:directive pos:line="342" pos:column="2">endif<pos:position pos:line="342" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="344" pos:column="1">#<cpp:directive pos:line="344" pos:column="2">ifdef<pos:position pos:line="344" pos:column="7"/></cpp:directive> <name pos:line="344" pos:column="8">HAVE_GETGRNAM<pos:position pos:line="344" pos:column="21"/></name></cpp:ifdef>
<macro><name pos:line="345" pos:column="1">AP_DECLARE<pos:position pos:line="345" pos:column="11"/></name><argument_list pos:line="345" pos:column="11">(<argument pos:line="345" pos:column="12">gid_t<pos:position pos:line="345" pos:column="17"/></argument>)<pos:position pos:line="345" pos:column="18"/></argument_list></macro> <macro><name pos:line="345" pos:column="19">ap_gname2id<pos:position pos:line="345" pos:column="30"/></name><argument_list pos:line="345" pos:column="30">(<argument pos:line="345" pos:column="31">const char *name<pos:position pos:line="345" pos:column="47"/></argument>)<pos:position pos:line="345" pos:column="48"/></argument_list></macro>
<block pos:line="346" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="347" pos:column="5">struct<pos:position pos:line="347" pos:column="11"/></name> <name pos:line="347" pos:column="12">group<pos:position pos:line="347" pos:column="17"/></name></name> <modifier pos:line="347" pos:column="18">*<pos:position pos:line="347" pos:column="19"/></modifier></type><name pos:line="347" pos:column="19">ent<pos:position pos:line="347" pos:column="22"/></name></decl>;<pos:position pos:line="347" pos:column="23"/></decl_stmt>

    <if pos:line="349" pos:column="5">if <condition pos:line="349" pos:column="8">(<expr><name><name pos:line="349" pos:column="9">name<pos:position pos:line="349" pos:column="13"/></name><index pos:line="349" pos:column="13">[<expr><literal type="number" pos:line="349" pos:column="14">0<pos:position pos:line="349" pos:column="15"/></literal></expr>]<pos:position pos:line="349" pos:column="16"/></index></name> <operator pos:line="349" pos:column="17">==<pos:position pos:line="349" pos:column="19"/></operator> <literal type="char" pos:line="349" pos:column="20">'#'<pos:position pos:line="349" pos:column="23"/></literal></expr>)<pos:position pos:line="349" pos:column="24"/></condition><then pos:line="349" pos:column="24">
        <block type="pseudo"><return pos:line="350" pos:column="9">return <expr><operator pos:line="350" pos:column="16">(<pos:position pos:line="350" pos:column="17"/></operator><call><name pos:line="350" pos:column="17">atoi<pos:position pos:line="350" pos:column="21"/></name><argument_list pos:line="350" pos:column="21">(<argument><expr><operator pos:line="350" pos:column="22">&amp;<pos:position pos:line="350" pos:column="27"/></operator><name><name pos:line="350" pos:column="23">name<pos:position pos:line="350" pos:column="27"/></name><index pos:line="350" pos:column="27">[<expr><literal type="number" pos:line="350" pos:column="28">1<pos:position pos:line="350" pos:column="29"/></literal></expr>]<pos:position pos:line="350" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="350" pos:column="31"/></argument_list></call><operator pos:line="350" pos:column="31">)<pos:position pos:line="350" pos:column="32"/></operator></expr>;<pos:position pos:line="350" pos:column="33"/></return></block></then></if>

    <if pos:line="352" pos:column="5">if <condition pos:line="352" pos:column="8">(<expr><operator pos:line="352" pos:column="9">!<pos:position pos:line="352" pos:column="10"/></operator><operator pos:line="352" pos:column="10">(<pos:position pos:line="352" pos:column="11"/></operator><name pos:line="352" pos:column="11">ent<pos:position pos:line="352" pos:column="14"/></name> <operator pos:line="352" pos:column="15">=<pos:position pos:line="352" pos:column="16"/></operator> <call><name pos:line="352" pos:column="17">getgrnam<pos:position pos:line="352" pos:column="25"/></name><argument_list pos:line="352" pos:column="25">(<argument><expr><name pos:line="352" pos:column="26">name<pos:position pos:line="352" pos:column="30"/></name></expr></argument>)<pos:position pos:line="352" pos:column="31"/></argument_list></call><operator pos:line="352" pos:column="31">)<pos:position pos:line="352" pos:column="32"/></operator></expr>)<pos:position pos:line="352" pos:column="33"/></condition><then pos:line="352" pos:column="33"> <block pos:line="352" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="353" pos:column="9">ap_log_error<pos:position pos:line="353" pos:column="21"/></name><argument_list pos:line="353" pos:column="21">(<argument><expr><name pos:line="353" pos:column="22">APLOG_MARK<pos:position pos:line="353" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="353" pos:column="34">APLOG_STARTUP<pos:position pos:line="353" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="353" pos:column="49">0<pos:position pos:line="353" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="353" pos:column="52">NULL<pos:position pos:line="353" pos:column="56"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="354" pos:column="22">"%s: bad group name %s"<pos:position pos:line="354" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="354" pos:column="47">ap_server_argv0<pos:position pos:line="354" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="354" pos:column="64">name<pos:position pos:line="354" pos:column="68"/></name></expr></argument>)<pos:position pos:line="354" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="355" pos:column="9">exit<pos:position pos:line="355" pos:column="13"/></name><argument_list pos:line="355" pos:column="13">(<argument><expr><literal type="number" pos:line="355" pos:column="14">1<pos:position pos:line="355" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="355" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="355" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="356" pos:column="6"/></block></then></if>

    <return pos:line="358" pos:column="5">return <expr><operator pos:line="358" pos:column="12">(<pos:position pos:line="358" pos:column="13"/></operator><name><name pos:line="358" pos:column="13">ent<pos:position pos:line="358" pos:column="16"/></name><operator pos:line="358" pos:column="16">-&gt;<pos:position pos:line="358" pos:column="21"/></operator><name pos:line="358" pos:column="18">gr_gid<pos:position pos:line="358" pos:column="24"/></name></name><operator pos:line="358" pos:column="24">)<pos:position pos:line="358" pos:column="25"/></operator></expr>;<pos:position pos:line="358" pos:column="26"/></return>
}<pos:position pos:line="359" pos:column="2"/></block>
<cpp:endif pos:line="360" pos:column="1">#<cpp:directive pos:line="360" pos:column="2">endif<pos:position pos:line="360" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="362" pos:column="1">#<cpp:directive pos:line="362" pos:column="2">ifndef<pos:position pos:line="362" pos:column="8"/></cpp:directive> <name pos:line="362" pos:column="9">HAVE_INITGROUPS<pos:position pos:line="362" pos:column="24"/></name></cpp:ifndef>
<function><type><name pos:line="363" pos:column="1">int<pos:position pos:line="363" pos:column="4"/></name></type> <name pos:line="363" pos:column="5">initgroups<pos:position pos:line="363" pos:column="15"/></name><parameter_list pos:line="363" pos:column="15">(<parameter><decl><type><specifier pos:line="363" pos:column="16">const<pos:position pos:line="363" pos:column="21"/></specifier> <name pos:line="363" pos:column="22">char<pos:position pos:line="363" pos:column="26"/></name> <modifier pos:line="363" pos:column="27">*<pos:position pos:line="363" pos:column="28"/></modifier></type><name pos:line="363" pos:column="28">name<pos:position pos:line="363" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="363" pos:column="34">gid_t<pos:position pos:line="363" pos:column="39"/></name></type> <name pos:line="363" pos:column="40">basegid<pos:position pos:line="363" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="363" pos:column="48"/></parameter_list>
<block pos:line="364" pos:column="1">{
<cpp:if pos:line="365" pos:column="1">#<cpp:directive pos:line="365" pos:column="2">if<pos:position pos:line="365" pos:column="4"/></cpp:directive> <expr><call><name pos:line="365" pos:column="5">defined<pos:position pos:line="365" pos:column="12"/></name><argument_list pos:line="365" pos:column="12">(<argument><expr><name pos:line="365" pos:column="13">QNX<pos:position pos:line="365" pos:column="16"/></name></expr></argument>)<pos:position pos:line="365" pos:column="17"/></argument_list></call> <operator pos:line="365" pos:column="18">||<pos:position pos:line="365" pos:column="20"/></operator> <call><name pos:line="365" pos:column="21">defined<pos:position pos:line="365" pos:column="28"/></name><argument_list pos:line="365" pos:column="28">(<argument><expr><name pos:line="365" pos:column="29">MPE<pos:position pos:line="365" pos:column="32"/></name></expr></argument>)<pos:position pos:line="365" pos:column="33"/></argument_list></call> <operator pos:line="365" pos:column="34">||<pos:position pos:line="365" pos:column="36"/></operator> <call><name pos:line="365" pos:column="37">defined<pos:position pos:line="365" pos:column="44"/></name><argument_list pos:line="365" pos:column="44">(<argument><expr><name pos:line="365" pos:column="45">BEOS<pos:position pos:line="365" pos:column="49"/></name></expr></argument>)<pos:position pos:line="365" pos:column="50"/></argument_list></call> <operator pos:line="365" pos:column="51">||<pos:position pos:line="365" pos:column="53"/></operator> <call><name pos:line="365" pos:column="54">defined<pos:position pos:line="365" pos:column="61"/></name><argument_list pos:line="365" pos:column="61">(<argument><expr><name pos:line="365" pos:column="62">_OSD_POSIX<pos:position pos:line="365" pos:column="72"/></name></expr></argument>)<pos:position pos:line="365" pos:column="73"/></argument_list></call> <operator pos:line="365" pos:column="74">||<pos:position pos:line="365" pos:column="76"/></operator> <call><name pos:line="365" pos:column="77">defined<pos:position pos:line="365" pos:column="84"/></name><argument_list pos:line="365" pos:column="84">(<argument><expr><name pos:line="365" pos:column="85">TPF<pos:position pos:line="365" pos:column="88"/></name></expr></argument>)<pos:position pos:line="365" pos:column="89"/></argument_list></call> <operator pos:line="365" pos:column="90">||<pos:position pos:line="365" pos:column="92"/></operator> <call><name pos:line="365" pos:column="93">defined<pos:position pos:line="365" pos:column="100"/></name><argument_list pos:line="365" pos:column="100">(<argument><expr><name pos:line="365" pos:column="101">__TANDEM<pos:position pos:line="365" pos:column="109"/></name></expr></argument>)<pos:position pos:line="365" pos:column="110"/></argument_list></call> <operator pos:line="365" pos:column="111">||<pos:position pos:line="365" pos:column="113"/></operator> <call><name pos:line="365" pos:column="114">defined<pos:position pos:line="365" pos:column="121"/></name><argument_list pos:line="365" pos:column="121">(<argument><expr><name pos:line="365" pos:column="122">OS2<pos:position pos:line="365" pos:column="125"/></name></expr></argument>)<pos:position pos:line="365" pos:column="126"/></argument_list></call> <operator pos:line="365" pos:column="127">||<pos:position pos:line="365" pos:column="129"/></operator> <call><name pos:line="365" pos:column="130">defined<pos:position pos:line="365" pos:column="137"/></name><argument_list pos:line="365" pos:column="137">(<argument><expr><name pos:line="365" pos:column="138">WIN32<pos:position pos:line="365" pos:column="143"/></name></expr></argument>)<pos:position pos:line="365" pos:column="144"/></argument_list></call> <operator pos:line="365" pos:column="145">||<pos:position pos:line="365" pos:column="147"/></operator> <call><name pos:line="365" pos:column="148">defined<pos:position pos:line="365" pos:column="155"/></name><argument_list pos:line="365" pos:column="155">(<argument><expr><name pos:line="365" pos:column="156">NETWARE<pos:position pos:line="365" pos:column="163"/></name></expr></argument>)<pos:position pos:line="365" pos:column="164"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="366" pos:column="1">/* QNX, MPE and BeOS do not appear to support supplementary groups. */</comment>
    <return pos:line="367" pos:column="5">return <expr><literal type="number" pos:line="367" pos:column="12">0<pos:position pos:line="367" pos:column="13"/></literal></expr>;<pos:position pos:line="367" pos:column="14"/></return>
<cpp:else pos:line="368" pos:column="1">#<cpp:directive pos:line="368" pos:column="2">else<pos:position pos:line="368" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="368" pos:column="7">/* ndef QNX */</comment>
    <decl_stmt><decl><type><name pos:line="369" pos:column="5">gid_t<pos:position pos:line="369" pos:column="10"/></name></type> <name><name pos:line="369" pos:column="11">groups<pos:position pos:line="369" pos:column="17"/></name><index pos:line="369" pos:column="17">[<expr><name pos:line="369" pos:column="18">NGROUPS_MAX<pos:position pos:line="369" pos:column="29"/></name></expr>]<pos:position pos:line="369" pos:column="30"/></index></name></decl>;<pos:position pos:line="369" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="370" pos:column="5">struct<pos:position pos:line="370" pos:column="11"/></name> <name pos:line="370" pos:column="12">group<pos:position pos:line="370" pos:column="17"/></name></name> <modifier pos:line="370" pos:column="18">*<pos:position pos:line="370" pos:column="19"/></modifier></type><name pos:line="370" pos:column="19">g<pos:position pos:line="370" pos:column="20"/></name></decl>;<pos:position pos:line="370" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="371" pos:column="5">int<pos:position pos:line="371" pos:column="8"/></name></type> <name pos:line="371" pos:column="9">index<pos:position pos:line="371" pos:column="14"/></name> <init pos:line="371" pos:column="15">= <expr><literal type="number" pos:line="371" pos:column="17">0<pos:position pos:line="371" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="371" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="373" pos:column="5">setgrent<pos:position pos:line="373" pos:column="13"/></name><argument_list pos:line="373" pos:column="13">()<pos:position pos:line="373" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="375" pos:column="5">groups<pos:position pos:line="375" pos:column="11"/></name><index pos:line="375" pos:column="11">[<expr><name pos:line="375" pos:column="12">index<pos:position pos:line="375" pos:column="17"/></name><operator pos:line="375" pos:column="17">++<pos:position pos:line="375" pos:column="19"/></operator></expr>]<pos:position pos:line="375" pos:column="20"/></index></name> <operator pos:line="375" pos:column="21">=<pos:position pos:line="375" pos:column="22"/></operator> <name pos:line="375" pos:column="23">basegid<pos:position pos:line="375" pos:column="30"/></name></expr>;<pos:position pos:line="375" pos:column="31"/></expr_stmt>

    <while pos:line="377" pos:column="5">while <condition pos:line="377" pos:column="11">(<expr><name pos:line="377" pos:column="12">index<pos:position pos:line="377" pos:column="17"/></name> <operator pos:line="377" pos:column="18">&lt;<pos:position pos:line="377" pos:column="22"/></operator> <name pos:line="377" pos:column="20">NGROUPS_MAX<pos:position pos:line="377" pos:column="31"/></name> <operator pos:line="377" pos:column="32">&amp;&amp;<pos:position pos:line="377" pos:column="42"/></operator> <operator pos:line="377" pos:column="35">(<pos:position pos:line="377" pos:column="36"/></operator><operator pos:line="377" pos:column="36">(<pos:position pos:line="377" pos:column="37"/></operator><name pos:line="377" pos:column="37">g<pos:position pos:line="377" pos:column="38"/></name> <operator pos:line="377" pos:column="39">=<pos:position pos:line="377" pos:column="40"/></operator> <call><name pos:line="377" pos:column="41">getgrent<pos:position pos:line="377" pos:column="49"/></name><argument_list pos:line="377" pos:column="49">()<pos:position pos:line="377" pos:column="51"/></argument_list></call><operator pos:line="377" pos:column="51">)<pos:position pos:line="377" pos:column="52"/></operator> <operator pos:line="377" pos:column="53">!=<pos:position pos:line="377" pos:column="55"/></operator> <name pos:line="377" pos:column="56">NULL<pos:position pos:line="377" pos:column="60"/></name><operator pos:line="377" pos:column="60">)<pos:position pos:line="377" pos:column="61"/></operator></expr>)<pos:position pos:line="377" pos:column="62"/></condition> <block pos:line="377" pos:column="63">{
        <if pos:line="378" pos:column="9">if <condition pos:line="378" pos:column="12">(<expr><name><name pos:line="378" pos:column="13">g<pos:position pos:line="378" pos:column="14"/></name><operator pos:line="378" pos:column="14">-&gt;<pos:position pos:line="378" pos:column="19"/></operator><name pos:line="378" pos:column="16">gr_gid<pos:position pos:line="378" pos:column="22"/></name></name> <operator pos:line="378" pos:column="23">!=<pos:position pos:line="378" pos:column="25"/></operator> <name pos:line="378" pos:column="26">basegid<pos:position pos:line="378" pos:column="33"/></name></expr>)<pos:position pos:line="378" pos:column="34"/></condition><then pos:line="378" pos:column="34"> <block pos:line="378" pos:column="35">{
            <decl_stmt><decl><type><name pos:line="379" pos:column="13">char<pos:position pos:line="379" pos:column="17"/></name> <modifier pos:line="379" pos:column="18">*<pos:position pos:line="379" pos:column="19"/></modifier><modifier pos:line="379" pos:column="19">*<pos:position pos:line="379" pos:column="20"/></modifier></type><name pos:line="379" pos:column="20">names<pos:position pos:line="379" pos:column="25"/></name></decl>;<pos:position pos:line="379" pos:column="26"/></decl_stmt>

            <for pos:line="381" pos:column="13">for <control pos:line="381" pos:column="17">(<init><expr><name pos:line="381" pos:column="18">names<pos:position pos:line="381" pos:column="23"/></name> <operator pos:line="381" pos:column="24">=<pos:position pos:line="381" pos:column="25"/></operator> <name><name pos:line="381" pos:column="26">g<pos:position pos:line="381" pos:column="27"/></name><operator pos:line="381" pos:column="27">-&gt;<pos:position pos:line="381" pos:column="32"/></operator><name pos:line="381" pos:column="29">gr_mem<pos:position pos:line="381" pos:column="35"/></name></name></expr>;<pos:position pos:line="381" pos:column="36"/></init> <condition><expr><operator pos:line="381" pos:column="37">*<pos:position pos:line="381" pos:column="38"/></operator><name pos:line="381" pos:column="38">names<pos:position pos:line="381" pos:column="43"/></name> <operator pos:line="381" pos:column="44">!=<pos:position pos:line="381" pos:column="46"/></operator> <name pos:line="381" pos:column="47">NULL<pos:position pos:line="381" pos:column="51"/></name></expr>;<pos:position pos:line="381" pos:column="52"/></condition> <incr><expr><operator pos:line="381" pos:column="53">++<pos:position pos:line="381" pos:column="55"/></operator><name pos:line="381" pos:column="55">names<pos:position pos:line="381" pos:column="60"/></name></expr></incr>)<pos:position pos:line="381" pos:column="61"/></control> <block pos:line="381" pos:column="62">{
                <if pos:line="382" pos:column="17">if <condition pos:line="382" pos:column="20">(<expr><operator pos:line="382" pos:column="21">!<pos:position pos:line="382" pos:column="22"/></operator><call><name pos:line="382" pos:column="22">strcmp<pos:position pos:line="382" pos:column="28"/></name><argument_list pos:line="382" pos:column="28">(<argument><expr><operator pos:line="382" pos:column="29">*<pos:position pos:line="382" pos:column="30"/></operator><name pos:line="382" pos:column="30">names<pos:position pos:line="382" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="382" pos:column="37">name<pos:position pos:line="382" pos:column="41"/></name></expr></argument>)<pos:position pos:line="382" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="382" pos:column="43"/></condition><then pos:line="382" pos:column="43">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="383" pos:column="21">groups<pos:position pos:line="383" pos:column="27"/></name><index pos:line="383" pos:column="27">[<expr><name pos:line="383" pos:column="28">index<pos:position pos:line="383" pos:column="33"/></name><operator pos:line="383" pos:column="33">++<pos:position pos:line="383" pos:column="35"/></operator></expr>]<pos:position pos:line="383" pos:column="36"/></index></name> <operator pos:line="383" pos:column="37">=<pos:position pos:line="383" pos:column="38"/></operator> <name><name pos:line="383" pos:column="39">g<pos:position pos:line="383" pos:column="40"/></name><operator pos:line="383" pos:column="40">-&gt;<pos:position pos:line="383" pos:column="45"/></operator><name pos:line="383" pos:column="42">gr_gid<pos:position pos:line="383" pos:column="48"/></name></name></expr>;<pos:position pos:line="383" pos:column="49"/></expr_stmt></block></then></if>
            }<pos:position pos:line="384" pos:column="14"/></block></for>
        }<pos:position pos:line="385" pos:column="10"/></block></then></if>
    }<pos:position pos:line="386" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="388" pos:column="5">endgrent<pos:position pos:line="388" pos:column="13"/></name><argument_list pos:line="388" pos:column="13">()<pos:position pos:line="388" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="388" pos:column="16"/></expr_stmt>

    <return pos:line="390" pos:column="5">return <expr><call><name pos:line="390" pos:column="12">setgroups<pos:position pos:line="390" pos:column="21"/></name><argument_list pos:line="390" pos:column="21">(<argument><expr><name pos:line="390" pos:column="22">index<pos:position pos:line="390" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="390" pos:column="29">groups<pos:position pos:line="390" pos:column="35"/></name></expr></argument>)<pos:position pos:line="390" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="37"/></return>
<cpp:endif pos:line="391" pos:column="1">#<cpp:directive pos:line="391" pos:column="2">endif<pos:position pos:line="391" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="391" pos:column="8">/* def QNX */</comment>
}<pos:position pos:line="392" pos:column="2"/></block></function>
<cpp:endif pos:line="393" pos:column="1">#<cpp:directive pos:line="393" pos:column="2">endif<pos:position pos:line="393" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="393" pos:column="8">/* def NEED_INITGROUPS */</comment>

<cpp:ifdef pos:line="395" pos:column="1">#<cpp:directive pos:line="395" pos:column="2">ifdef<pos:position pos:line="395" pos:column="7"/></cpp:directive> <name pos:line="395" pos:column="8">AP_MPM_USES_POD<pos:position pos:line="395" pos:column="23"/></name></cpp:ifdef>

<macro><name pos:line="397" pos:column="1">AP_DECLARE<pos:position pos:line="397" pos:column="11"/></name><argument_list pos:line="397" pos:column="11">(<argument pos:line="397" pos:column="12">apr_status_t<pos:position pos:line="397" pos:column="24"/></argument>)<pos:position pos:line="397" pos:column="25"/></argument_list></macro> <macro><name pos:line="397" pos:column="26">ap_mpm_pod_open<pos:position pos:line="397" pos:column="41"/></name><argument_list pos:line="397" pos:column="41">(<argument pos:line="397" pos:column="42">apr_pool_t *p<pos:position pos:line="397" pos:column="55"/></argument>, <argument pos:line="397" pos:column="57">ap_pod_t **pod<pos:position pos:line="397" pos:column="71"/></argument>)<pos:position pos:line="397" pos:column="72"/></argument_list></macro>
<block pos:line="398" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="399" pos:column="5">apr_status_t<pos:position pos:line="399" pos:column="17"/></name></type> <name pos:line="399" pos:column="18">rv<pos:position pos:line="399" pos:column="20"/></name></decl>;<pos:position pos:line="399" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="401" pos:column="5">*<pos:position pos:line="401" pos:column="6"/></operator><name pos:line="401" pos:column="6">pod<pos:position pos:line="401" pos:column="9"/></name> <operator pos:line="401" pos:column="10">=<pos:position pos:line="401" pos:column="11"/></operator> <call><name pos:line="401" pos:column="12">apr_palloc<pos:position pos:line="401" pos:column="22"/></name><argument_list pos:line="401" pos:column="22">(<argument><expr><name pos:line="401" pos:column="23">p<pos:position pos:line="401" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="401" pos:column="26">sizeof<argument_list pos:line="401" pos:column="32">(<argument><expr><operator pos:line="401" pos:column="33">*<pos:position pos:line="401" pos:column="34"/></operator><operator pos:line="401" pos:column="34">*<pos:position pos:line="401" pos:column="35"/></operator><name pos:line="401" pos:column="35">pod<pos:position pos:line="401" pos:column="38"/></name></expr></argument>)<pos:position pos:line="401" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="401" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="402" pos:column="5">rv<pos:position pos:line="402" pos:column="7"/></name> <operator pos:line="402" pos:column="8">=<pos:position pos:line="402" pos:column="9"/></operator> <call><name pos:line="402" pos:column="10">apr_file_pipe_create<pos:position pos:line="402" pos:column="30"/></name><argument_list pos:line="402" pos:column="30">(<argument><expr><operator pos:line="402" pos:column="31">&amp;<pos:position pos:line="402" pos:column="36"/></operator><operator pos:line="402" pos:column="32">(<pos:position pos:line="402" pos:column="33"/></operator><name><operator pos:line="402" pos:column="33">(<pos:position pos:line="402" pos:column="34"/></operator><operator pos:line="402" pos:column="34">*<pos:position pos:line="402" pos:column="35"/></operator><name pos:line="402" pos:column="35">pod<pos:position pos:line="402" pos:column="38"/></name><operator pos:line="402" pos:column="38">)<pos:position pos:line="402" pos:column="39"/></operator><operator pos:line="402" pos:column="39">-&gt;<pos:position pos:line="402" pos:column="44"/></operator><name pos:line="402" pos:column="41">pod_in<pos:position pos:line="402" pos:column="47"/></name></name><operator pos:line="402" pos:column="47">)<pos:position pos:line="402" pos:column="48"/></operator></expr></argument>, <argument><expr><operator pos:line="402" pos:column="50">&amp;<pos:position pos:line="402" pos:column="55"/></operator><operator pos:line="402" pos:column="51">(<pos:position pos:line="402" pos:column="52"/></operator><name><operator pos:line="402" pos:column="52">(<pos:position pos:line="402" pos:column="53"/></operator><operator pos:line="402" pos:column="53">*<pos:position pos:line="402" pos:column="54"/></operator><name pos:line="402" pos:column="54">pod<pos:position pos:line="402" pos:column="57"/></name><operator pos:line="402" pos:column="57">)<pos:position pos:line="402" pos:column="58"/></operator><operator pos:line="402" pos:column="58">-&gt;<pos:position pos:line="402" pos:column="63"/></operator><name pos:line="402" pos:column="60">pod_out<pos:position pos:line="402" pos:column="67"/></name></name><operator pos:line="402" pos:column="67">)<pos:position pos:line="402" pos:column="68"/></operator></expr></argument>, <argument><expr><name pos:line="402" pos:column="70">p<pos:position pos:line="402" pos:column="71"/></name></expr></argument>)<pos:position pos:line="402" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="402" pos:column="73"/></expr_stmt>
    <if pos:line="403" pos:column="5">if <condition pos:line="403" pos:column="8">(<expr><name pos:line="403" pos:column="9">rv<pos:position pos:line="403" pos:column="11"/></name> <operator pos:line="403" pos:column="12">!=<pos:position pos:line="403" pos:column="14"/></operator> <name pos:line="403" pos:column="15">APR_SUCCESS<pos:position pos:line="403" pos:column="26"/></name></expr>)<pos:position pos:line="403" pos:column="27"/></condition><then pos:line="403" pos:column="27"> <block pos:line="403" pos:column="28">{
        <return pos:line="404" pos:column="9">return <expr><name pos:line="404" pos:column="16">rv<pos:position pos:line="404" pos:column="18"/></name></expr>;<pos:position pos:line="404" pos:column="19"/></return>
    }<pos:position pos:line="405" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="407" pos:column="5">apr_file_pipe_timeout_set<pos:position pos:line="407" pos:column="30"/></name><argument_list pos:line="407" pos:column="30">(<argument><expr><name><operator pos:line="407" pos:column="31">(<pos:position pos:line="407" pos:column="32"/></operator><operator pos:line="407" pos:column="32">*<pos:position pos:line="407" pos:column="33"/></operator><name pos:line="407" pos:column="33">pod<pos:position pos:line="407" pos:column="36"/></name><operator pos:line="407" pos:column="36">)<pos:position pos:line="407" pos:column="37"/></operator><operator pos:line="407" pos:column="37">-&gt;<pos:position pos:line="407" pos:column="42"/></operator><name pos:line="407" pos:column="39">pod_in<pos:position pos:line="407" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="407" pos:column="47">0<pos:position pos:line="407" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="407" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="407" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><operator pos:line="408" pos:column="5">(<pos:position pos:line="408" pos:column="6"/></operator><operator pos:line="408" pos:column="6">*<pos:position pos:line="408" pos:column="7"/></operator><name pos:line="408" pos:column="7">pod<pos:position pos:line="408" pos:column="10"/></name><operator pos:line="408" pos:column="10">)<pos:position pos:line="408" pos:column="11"/></operator><operator pos:line="408" pos:column="11">-&gt;<pos:position pos:line="408" pos:column="16"/></operator><name pos:line="408" pos:column="13">p<pos:position pos:line="408" pos:column="14"/></name></name> <operator pos:line="408" pos:column="15">=<pos:position pos:line="408" pos:column="16"/></operator> <name pos:line="408" pos:column="17">p<pos:position pos:line="408" pos:column="18"/></name></expr>;<pos:position pos:line="408" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="410" pos:column="5">apr_sockaddr_info_get<pos:position pos:line="410" pos:column="26"/></name><argument_list pos:line="410" pos:column="26">(<argument><expr><operator pos:line="410" pos:column="27">&amp;<pos:position pos:line="410" pos:column="32"/></operator><name><operator pos:line="410" pos:column="28">(<pos:position pos:line="410" pos:column="29"/></operator><operator pos:line="410" pos:column="29">*<pos:position pos:line="410" pos:column="30"/></operator><name pos:line="410" pos:column="30">pod<pos:position pos:line="410" pos:column="33"/></name><operator pos:line="410" pos:column="33">)<pos:position pos:line="410" pos:column="34"/></operator><operator pos:line="410" pos:column="34">-&gt;<pos:position pos:line="410" pos:column="39"/></operator><name pos:line="410" pos:column="36">sa<pos:position pos:line="410" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="40">ap_listeners<pos:position pos:line="410" pos:column="52"/></name><operator pos:line="410" pos:column="52">-&gt;<pos:position pos:line="410" pos:column="57"/></operator><name pos:line="410" pos:column="54">bind_addr<pos:position pos:line="410" pos:column="63"/></name><operator pos:line="410" pos:column="63">-&gt;<pos:position pos:line="410" pos:column="68"/></operator><name pos:line="410" pos:column="65">hostname<pos:position pos:line="410" pos:column="73"/></name></name></expr></argument>,
                          <argument><expr><name pos:line="411" pos:column="27">APR_UNSPEC<pos:position pos:line="411" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="411" pos:column="39">ap_listeners<pos:position pos:line="411" pos:column="51"/></name><operator pos:line="411" pos:column="51">-&gt;<pos:position pos:line="411" pos:column="56"/></operator><name pos:line="411" pos:column="53">bind_addr<pos:position pos:line="411" pos:column="62"/></name><operator pos:line="411" pos:column="62">-&gt;<pos:position pos:line="411" pos:column="67"/></operator><name pos:line="411" pos:column="64">port<pos:position pos:line="411" pos:column="68"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="411" pos:column="70">0<pos:position pos:line="411" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="73">p<pos:position pos:line="411" pos:column="74"/></name></expr></argument>)<pos:position pos:line="411" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="76"/></expr_stmt>

    <return pos:line="413" pos:column="5">return <expr><name pos:line="413" pos:column="12">APR_SUCCESS<pos:position pos:line="413" pos:column="23"/></name></expr>;<pos:position pos:line="413" pos:column="24"/></return>
}<pos:position pos:line="414" pos:column="2"/></block>

<macro><name pos:line="416" pos:column="1">AP_DECLARE<pos:position pos:line="416" pos:column="11"/></name><argument_list pos:line="416" pos:column="11">(<argument pos:line="416" pos:column="12">apr_status_t<pos:position pos:line="416" pos:column="24"/></argument>)<pos:position pos:line="416" pos:column="25"/></argument_list></macro> <macro><name pos:line="416" pos:column="26">ap_mpm_pod_check<pos:position pos:line="416" pos:column="42"/></name><argument_list pos:line="416" pos:column="42">(<argument pos:line="416" pos:column="43">ap_pod_t *pod<pos:position pos:line="416" pos:column="56"/></argument>)<pos:position pos:line="416" pos:column="57"/></argument_list></macro>
<block pos:line="417" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="418" pos:column="5">char<pos:position pos:line="418" pos:column="9"/></name></type> <name pos:line="418" pos:column="10">c<pos:position pos:line="418" pos:column="11"/></name></decl>;<pos:position pos:line="418" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="419" pos:column="5">apr_size_t<pos:position pos:line="419" pos:column="15"/></name></type> <name pos:line="419" pos:column="16">len<pos:position pos:line="419" pos:column="19"/></name> <init pos:line="419" pos:column="20">= <expr><literal type="number" pos:line="419" pos:column="22">1<pos:position pos:line="419" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="419" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="420" pos:column="5">apr_status_t<pos:position pos:line="420" pos:column="17"/></name></type> <name pos:line="420" pos:column="18">rv<pos:position pos:line="420" pos:column="20"/></name></decl>;<pos:position pos:line="420" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="422" pos:column="5">rv<pos:position pos:line="422" pos:column="7"/></name> <operator pos:line="422" pos:column="8">=<pos:position pos:line="422" pos:column="9"/></operator> <call><name pos:line="422" pos:column="10">apr_file_read<pos:position pos:line="422" pos:column="23"/></name><argument_list pos:line="422" pos:column="23">(<argument><expr><name><name pos:line="422" pos:column="24">pod<pos:position pos:line="422" pos:column="27"/></name><operator pos:line="422" pos:column="27">-&gt;<pos:position pos:line="422" pos:column="32"/></operator><name pos:line="422" pos:column="29">pod_in<pos:position pos:line="422" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="422" pos:column="37">&amp;<pos:position pos:line="422" pos:column="42"/></operator><name pos:line="422" pos:column="38">c<pos:position pos:line="422" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="422" pos:column="41">&amp;<pos:position pos:line="422" pos:column="46"/></operator><name pos:line="422" pos:column="42">len<pos:position pos:line="422" pos:column="45"/></name></expr></argument>)<pos:position pos:line="422" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="422" pos:column="47"/></expr_stmt>

    <if pos:line="424" pos:column="5">if <condition pos:line="424" pos:column="8">(<expr><operator pos:line="424" pos:column="9">(<pos:position pos:line="424" pos:column="10"/></operator><name pos:line="424" pos:column="10">rv<pos:position pos:line="424" pos:column="12"/></name> <operator pos:line="424" pos:column="13">==<pos:position pos:line="424" pos:column="15"/></operator> <name pos:line="424" pos:column="16">APR_SUCCESS<pos:position pos:line="424" pos:column="27"/></name><operator pos:line="424" pos:column="27">)<pos:position pos:line="424" pos:column="28"/></operator> <operator pos:line="424" pos:column="29">&amp;&amp;<pos:position pos:line="424" pos:column="39"/></operator> <operator pos:line="424" pos:column="32">(<pos:position pos:line="424" pos:column="33"/></operator><name pos:line="424" pos:column="33">len<pos:position pos:line="424" pos:column="36"/></name> <operator pos:line="424" pos:column="37">==<pos:position pos:line="424" pos:column="39"/></operator> <literal type="number" pos:line="424" pos:column="40">1<pos:position pos:line="424" pos:column="41"/></literal><operator pos:line="424" pos:column="41">)<pos:position pos:line="424" pos:column="42"/></operator></expr>)<pos:position pos:line="424" pos:column="43"/></condition><then pos:line="424" pos:column="43"> <block pos:line="424" pos:column="44">{
        <return pos:line="425" pos:column="9">return <expr><name pos:line="425" pos:column="16">APR_SUCCESS<pos:position pos:line="425" pos:column="27"/></name></expr>;<pos:position pos:line="425" pos:column="28"/></return>
    }<pos:position pos:line="426" pos:column="6"/></block></then></if>

    <if pos:line="428" pos:column="5">if <condition pos:line="428" pos:column="8">(<expr><name pos:line="428" pos:column="9">rv<pos:position pos:line="428" pos:column="11"/></name> <operator pos:line="428" pos:column="12">!=<pos:position pos:line="428" pos:column="14"/></operator> <name pos:line="428" pos:column="15">APR_SUCCESS<pos:position pos:line="428" pos:column="26"/></name></expr>)<pos:position pos:line="428" pos:column="27"/></condition><then pos:line="428" pos:column="27"> <block pos:line="428" pos:column="28">{
        <return pos:line="429" pos:column="9">return <expr><name pos:line="429" pos:column="16">rv<pos:position pos:line="429" pos:column="18"/></name></expr>;<pos:position pos:line="429" pos:column="19"/></return>
    }<pos:position pos:line="430" pos:column="6"/></block></then></if>

    <return pos:line="432" pos:column="5">return <expr><name pos:line="432" pos:column="12">AP_NORESTART<pos:position pos:line="432" pos:column="24"/></name></expr>;<pos:position pos:line="432" pos:column="25"/></return>
}<pos:position pos:line="433" pos:column="2"/></block>

<macro><name pos:line="435" pos:column="1">AP_DECLARE<pos:position pos:line="435" pos:column="11"/></name><argument_list pos:line="435" pos:column="11">(<argument pos:line="435" pos:column="12">apr_status_t<pos:position pos:line="435" pos:column="24"/></argument>)<pos:position pos:line="435" pos:column="25"/></argument_list></macro> <macro><name pos:line="435" pos:column="26">ap_mpm_pod_close<pos:position pos:line="435" pos:column="42"/></name><argument_list pos:line="435" pos:column="42">(<argument pos:line="435" pos:column="43">ap_pod_t *pod<pos:position pos:line="435" pos:column="56"/></argument>)<pos:position pos:line="435" pos:column="57"/></argument_list></macro>
<block pos:line="436" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="437" pos:column="5">apr_status_t<pos:position pos:line="437" pos:column="17"/></name></type> <name pos:line="437" pos:column="18">rv<pos:position pos:line="437" pos:column="20"/></name></decl>;<pos:position pos:line="437" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="439" pos:column="5">rv<pos:position pos:line="439" pos:column="7"/></name> <operator pos:line="439" pos:column="8">=<pos:position pos:line="439" pos:column="9"/></operator> <call><name pos:line="439" pos:column="10">apr_file_close<pos:position pos:line="439" pos:column="24"/></name><argument_list pos:line="439" pos:column="24">(<argument><expr><name><name pos:line="439" pos:column="25">pod<pos:position pos:line="439" pos:column="28"/></name><operator pos:line="439" pos:column="28">-&gt;<pos:position pos:line="439" pos:column="33"/></operator><name pos:line="439" pos:column="30">pod_out<pos:position pos:line="439" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="439" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="439" pos:column="39"/></expr_stmt>
    <if pos:line="440" pos:column="5">if <condition pos:line="440" pos:column="8">(<expr><name pos:line="440" pos:column="9">rv<pos:position pos:line="440" pos:column="11"/></name> <operator pos:line="440" pos:column="12">!=<pos:position pos:line="440" pos:column="14"/></operator> <name pos:line="440" pos:column="15">APR_SUCCESS<pos:position pos:line="440" pos:column="26"/></name></expr>)<pos:position pos:line="440" pos:column="27"/></condition><then pos:line="440" pos:column="27"> <block pos:line="440" pos:column="28">{
        <return pos:line="441" pos:column="9">return <expr><name pos:line="441" pos:column="16">rv<pos:position pos:line="441" pos:column="18"/></name></expr>;<pos:position pos:line="441" pos:column="19"/></return>
    }<pos:position pos:line="442" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="444" pos:column="5">rv<pos:position pos:line="444" pos:column="7"/></name> <operator pos:line="444" pos:column="8">=<pos:position pos:line="444" pos:column="9"/></operator> <call><name pos:line="444" pos:column="10">apr_file_close<pos:position pos:line="444" pos:column="24"/></name><argument_list pos:line="444" pos:column="24">(<argument><expr><name><name pos:line="444" pos:column="25">pod<pos:position pos:line="444" pos:column="28"/></name><operator pos:line="444" pos:column="28">-&gt;<pos:position pos:line="444" pos:column="33"/></operator><name pos:line="444" pos:column="30">pod_in<pos:position pos:line="444" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="444" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="38"/></expr_stmt>
    <if pos:line="445" pos:column="5">if <condition pos:line="445" pos:column="8">(<expr><name pos:line="445" pos:column="9">rv<pos:position pos:line="445" pos:column="11"/></name> <operator pos:line="445" pos:column="12">!=<pos:position pos:line="445" pos:column="14"/></operator> <name pos:line="445" pos:column="15">APR_SUCCESS<pos:position pos:line="445" pos:column="26"/></name></expr>)<pos:position pos:line="445" pos:column="27"/></condition><then pos:line="445" pos:column="27"> <block pos:line="445" pos:column="28">{
        <return pos:line="446" pos:column="9">return <expr><name pos:line="446" pos:column="16">rv<pos:position pos:line="446" pos:column="18"/></name></expr>;<pos:position pos:line="446" pos:column="19"/></return>
    }<pos:position pos:line="447" pos:column="6"/></block></then></if>

    <return pos:line="449" pos:column="5">return <expr><name pos:line="449" pos:column="12">APR_SUCCESS<pos:position pos:line="449" pos:column="23"/></name></expr>;<pos:position pos:line="449" pos:column="24"/></return>
}<pos:position pos:line="450" pos:column="2"/></block>

<function><specifier pos:line="452" pos:column="1">static<pos:position pos:line="452" pos:column="7"/></specifier> <type><name pos:line="452" pos:column="8">apr_status_t<pos:position pos:line="452" pos:column="20"/></name></type> <name pos:line="452" pos:column="21">pod_signal_internal<pos:position pos:line="452" pos:column="40"/></name><parameter_list pos:line="452" pos:column="40">(<parameter><decl><type><name pos:line="452" pos:column="41">ap_pod_t<pos:position pos:line="452" pos:column="49"/></name> <modifier pos:line="452" pos:column="50">*<pos:position pos:line="452" pos:column="51"/></modifier></type><name pos:line="452" pos:column="51">pod<pos:position pos:line="452" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="452" pos:column="55"/></parameter_list>
<block pos:line="453" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="454" pos:column="5">apr_status_t<pos:position pos:line="454" pos:column="17"/></name></type> <name pos:line="454" pos:column="18">rv<pos:position pos:line="454" pos:column="20"/></name></decl>;<pos:position pos:line="454" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="455" pos:column="5">char<pos:position pos:line="455" pos:column="9"/></name></type> <name pos:line="455" pos:column="10">char_of_death<pos:position pos:line="455" pos:column="23"/></name> <init pos:line="455" pos:column="24">= <expr><literal type="char" pos:line="455" pos:column="26">'!'<pos:position pos:line="455" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="455" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="456" pos:column="5">apr_size_t<pos:position pos:line="456" pos:column="15"/></name></type> <name pos:line="456" pos:column="16">one<pos:position pos:line="456" pos:column="19"/></name> <init pos:line="456" pos:column="20">= <expr><literal type="number" pos:line="456" pos:column="22">1<pos:position pos:line="456" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="456" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="458" pos:column="5">rv<pos:position pos:line="458" pos:column="7"/></name> <operator pos:line="458" pos:column="8">=<pos:position pos:line="458" pos:column="9"/></operator> <call><name pos:line="458" pos:column="10">apr_file_write<pos:position pos:line="458" pos:column="24"/></name><argument_list pos:line="458" pos:column="24">(<argument><expr><name><name pos:line="458" pos:column="25">pod<pos:position pos:line="458" pos:column="28"/></name><operator pos:line="458" pos:column="28">-&gt;<pos:position pos:line="458" pos:column="33"/></operator><name pos:line="458" pos:column="30">pod_out<pos:position pos:line="458" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="458" pos:column="39">&amp;<pos:position pos:line="458" pos:column="44"/></operator><name pos:line="458" pos:column="40">char_of_death<pos:position pos:line="458" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="458" pos:column="55">&amp;<pos:position pos:line="458" pos:column="60"/></operator><name pos:line="458" pos:column="56">one<pos:position pos:line="458" pos:column="59"/></name></expr></argument>)<pos:position pos:line="458" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="458" pos:column="61"/></expr_stmt>
    <if pos:line="459" pos:column="5">if <condition pos:line="459" pos:column="8">(<expr><name pos:line="459" pos:column="9">rv<pos:position pos:line="459" pos:column="11"/></name> <operator pos:line="459" pos:column="12">!=<pos:position pos:line="459" pos:column="14"/></operator> <name pos:line="459" pos:column="15">APR_SUCCESS<pos:position pos:line="459" pos:column="26"/></name></expr>)<pos:position pos:line="459" pos:column="27"/></condition><then pos:line="459" pos:column="27"> <block pos:line="459" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="460" pos:column="9">ap_log_error<pos:position pos:line="460" pos:column="21"/></name><argument_list pos:line="460" pos:column="21">(<argument><expr><name pos:line="460" pos:column="22">APLOG_MARK<pos:position pos:line="460" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="460" pos:column="34">APLOG_WARNING<pos:position pos:line="460" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="460" pos:column="49">rv<pos:position pos:line="460" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="460" pos:column="53">ap_server_conf<pos:position pos:line="460" pos:column="67"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="461" pos:column="22">"write pipe_of_death"<pos:position pos:line="461" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="461" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="461" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="462" pos:column="6"/></block></then></if>

    <return pos:line="464" pos:column="5">return <expr><name pos:line="464" pos:column="12">rv<pos:position pos:line="464" pos:column="14"/></name></expr>;<pos:position pos:line="464" pos:column="15"/></return>
}<pos:position pos:line="465" pos:column="2"/></block></function>

<comment type="block" pos:line="467" pos:column="1">/* This function connects to the server, then immediately closes the connection.
 * This permits the MPM to skip the poll when there is only one listening
 * socket, because it provides a alternate way to unblock an accept() when
 * the pod is used.
 */</comment>
<function><specifier pos:line="472" pos:column="1">static<pos:position pos:line="472" pos:column="7"/></specifier> <type><name pos:line="472" pos:column="8">apr_status_t<pos:position pos:line="472" pos:column="20"/></name></type> <name pos:line="472" pos:column="21">dummy_connection<pos:position pos:line="472" pos:column="37"/></name><parameter_list pos:line="472" pos:column="37">(<parameter><decl><type><name pos:line="472" pos:column="38">ap_pod_t<pos:position pos:line="472" pos:column="46"/></name> <modifier pos:line="472" pos:column="47">*<pos:position pos:line="472" pos:column="48"/></modifier></type><name pos:line="472" pos:column="48">pod<pos:position pos:line="472" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="472" pos:column="52"/></parameter_list>
<block pos:line="473" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="474" pos:column="5">apr_status_t<pos:position pos:line="474" pos:column="17"/></name></type> <name pos:line="474" pos:column="18">rv<pos:position pos:line="474" pos:column="20"/></name></decl>;<pos:position pos:line="474" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="475" pos:column="5">apr_socket_t<pos:position pos:line="475" pos:column="17"/></name> <modifier pos:line="475" pos:column="18">*<pos:position pos:line="475" pos:column="19"/></modifier></type><name pos:line="475" pos:column="19">sock<pos:position pos:line="475" pos:column="23"/></name></decl>;<pos:position pos:line="475" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="476" pos:column="5">apr_pool_t<pos:position pos:line="476" pos:column="15"/></name> <modifier pos:line="476" pos:column="16">*<pos:position pos:line="476" pos:column="17"/></modifier></type><name pos:line="476" pos:column="17">p<pos:position pos:line="476" pos:column="18"/></name></decl>;<pos:position pos:line="476" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="478" pos:column="5">/* create a temporary pool for the socket.  pconf stays around too long */</comment>
    <expr_stmt><expr><name pos:line="479" pos:column="5">rv<pos:position pos:line="479" pos:column="7"/></name> <operator pos:line="479" pos:column="8">=<pos:position pos:line="479" pos:column="9"/></operator> <call><name pos:line="479" pos:column="10">apr_pool_create<pos:position pos:line="479" pos:column="25"/></name><argument_list pos:line="479" pos:column="25">(<argument><expr><operator pos:line="479" pos:column="26">&amp;<pos:position pos:line="479" pos:column="31"/></operator><name pos:line="479" pos:column="27">p<pos:position pos:line="479" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="479" pos:column="30">pod<pos:position pos:line="479" pos:column="33"/></name><operator pos:line="479" pos:column="33">-&gt;<pos:position pos:line="479" pos:column="38"/></operator><name pos:line="479" pos:column="35">p<pos:position pos:line="479" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="479" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="479" pos:column="38"/></expr_stmt>
    <if pos:line="480" pos:column="5">if <condition pos:line="480" pos:column="8">(<expr><name pos:line="480" pos:column="9">rv<pos:position pos:line="480" pos:column="11"/></name> <operator pos:line="480" pos:column="12">!=<pos:position pos:line="480" pos:column="14"/></operator> <name pos:line="480" pos:column="15">APR_SUCCESS<pos:position pos:line="480" pos:column="26"/></name></expr>)<pos:position pos:line="480" pos:column="27"/></condition><then pos:line="480" pos:column="27"> <block pos:line="480" pos:column="28">{
        <return pos:line="481" pos:column="9">return <expr><name pos:line="481" pos:column="16">rv<pos:position pos:line="481" pos:column="18"/></name></expr>;<pos:position pos:line="481" pos:column="19"/></return>
    }<pos:position pos:line="482" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="484" pos:column="5">rv<pos:position pos:line="484" pos:column="7"/></name> <operator pos:line="484" pos:column="8">=<pos:position pos:line="484" pos:column="9"/></operator> <call><name pos:line="484" pos:column="10">apr_socket_create<pos:position pos:line="484" pos:column="27"/></name><argument_list pos:line="484" pos:column="27">(<argument><expr><operator pos:line="484" pos:column="28">&amp;<pos:position pos:line="484" pos:column="33"/></operator><name pos:line="484" pos:column="29">sock<pos:position pos:line="484" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="484" pos:column="35">pod<pos:position pos:line="484" pos:column="38"/></name><operator pos:line="484" pos:column="38">-&gt;<pos:position pos:line="484" pos:column="43"/></operator><name pos:line="484" pos:column="40">sa<pos:position pos:line="484" pos:column="42"/></name><operator pos:line="484" pos:column="42">-&gt;<pos:position pos:line="484" pos:column="47"/></operator><name pos:line="484" pos:column="44">family<pos:position pos:line="484" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="484" pos:column="52">SOCK_STREAM<pos:position pos:line="484" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="484" pos:column="65">p<pos:position pos:line="484" pos:column="66"/></name></expr></argument>)<pos:position pos:line="484" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="484" pos:column="68"/></expr_stmt>
    <if pos:line="485" pos:column="5">if <condition pos:line="485" pos:column="8">(<expr><name pos:line="485" pos:column="9">rv<pos:position pos:line="485" pos:column="11"/></name> <operator pos:line="485" pos:column="12">!=<pos:position pos:line="485" pos:column="14"/></operator> <name pos:line="485" pos:column="15">APR_SUCCESS<pos:position pos:line="485" pos:column="26"/></name></expr>)<pos:position pos:line="485" pos:column="27"/></condition><then pos:line="485" pos:column="27"> <block pos:line="485" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="486" pos:column="9">ap_log_error<pos:position pos:line="486" pos:column="21"/></name><argument_list pos:line="486" pos:column="21">(<argument><expr><name pos:line="486" pos:column="22">APLOG_MARK<pos:position pos:line="486" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="486" pos:column="34">APLOG_WARNING<pos:position pos:line="486" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="486" pos:column="49">rv<pos:position pos:line="486" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="486" pos:column="53">ap_server_conf<pos:position pos:line="486" pos:column="67"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="487" pos:column="22">"get socket to connect to listener"<pos:position pos:line="487" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="487" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="59"/></expr_stmt>
        <return pos:line="488" pos:column="9">return <expr><name pos:line="488" pos:column="16">rv<pos:position pos:line="488" pos:column="18"/></name></expr>;<pos:position pos:line="488" pos:column="19"/></return>
    }<pos:position pos:line="489" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="491" pos:column="5">/* on some platforms (e.g., FreeBSD), the kernel won't accept many
     * queued connections before it starts blocking local connects...
     * we need to keep from blocking too long and instead return an error,
     * because the MPM won't want to hold up a graceful restart for a
     * long time
     */</comment>
    <expr_stmt><expr><name pos:line="497" pos:column="5">rv<pos:position pos:line="497" pos:column="7"/></name> <operator pos:line="497" pos:column="8">=<pos:position pos:line="497" pos:column="9"/></operator> <call><name pos:line="497" pos:column="10">apr_socket_timeout_set<pos:position pos:line="497" pos:column="32"/></name><argument_list pos:line="497" pos:column="32">(<argument><expr><name pos:line="497" pos:column="33">sock<pos:position pos:line="497" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="497" pos:column="39">apr_time_from_sec<pos:position pos:line="497" pos:column="56"/></name><argument_list pos:line="497" pos:column="56">(<argument><expr><literal type="number" pos:line="497" pos:column="57">3<pos:position pos:line="497" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="497" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="497" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="497" pos:column="61"/></expr_stmt>
    <if pos:line="498" pos:column="5">if <condition pos:line="498" pos:column="8">(<expr><name pos:line="498" pos:column="9">rv<pos:position pos:line="498" pos:column="11"/></name> <operator pos:line="498" pos:column="12">!=<pos:position pos:line="498" pos:column="14"/></operator> <name pos:line="498" pos:column="15">APR_SUCCESS<pos:position pos:line="498" pos:column="26"/></name></expr>)<pos:position pos:line="498" pos:column="27"/></condition><then pos:line="498" pos:column="27"> <block pos:line="498" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="499" pos:column="9">ap_log_error<pos:position pos:line="499" pos:column="21"/></name><argument_list pos:line="499" pos:column="21">(<argument><expr><name pos:line="499" pos:column="22">APLOG_MARK<pos:position pos:line="499" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="499" pos:column="34">APLOG_WARNING<pos:position pos:line="499" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="499" pos:column="49">rv<pos:position pos:line="499" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="499" pos:column="53">ap_server_conf<pos:position pos:line="499" pos:column="67"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="500" pos:column="22">"set timeout on socket to connect to listener"<pos:position pos:line="500" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="500" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="500" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="501" pos:column="9">apr_socket_close<pos:position pos:line="501" pos:column="25"/></name><argument_list pos:line="501" pos:column="25">(<argument><expr><name pos:line="501" pos:column="26">sock<pos:position pos:line="501" pos:column="30"/></name></expr></argument>)<pos:position pos:line="501" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="32"/></expr_stmt>
        <return pos:line="502" pos:column="9">return <expr><name pos:line="502" pos:column="16">rv<pos:position pos:line="502" pos:column="18"/></name></expr>;<pos:position pos:line="502" pos:column="19"/></return>
    }<pos:position pos:line="503" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="505" pos:column="5">rv<pos:position pos:line="505" pos:column="7"/></name> <operator pos:line="505" pos:column="8">=<pos:position pos:line="505" pos:column="9"/></operator> <call><name pos:line="505" pos:column="10">apr_connect<pos:position pos:line="505" pos:column="21"/></name><argument_list pos:line="505" pos:column="21">(<argument><expr><name pos:line="505" pos:column="22">sock<pos:position pos:line="505" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="505" pos:column="28">pod<pos:position pos:line="505" pos:column="31"/></name><operator pos:line="505" pos:column="31">-&gt;<pos:position pos:line="505" pos:column="36"/></operator><name pos:line="505" pos:column="33">sa<pos:position pos:line="505" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="505" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="505" pos:column="37"/></expr_stmt>
    <if pos:line="506" pos:column="5">if <condition pos:line="506" pos:column="8">(<expr><name pos:line="506" pos:column="9">rv<pos:position pos:line="506" pos:column="11"/></name> <operator pos:line="506" pos:column="12">!=<pos:position pos:line="506" pos:column="14"/></operator> <name pos:line="506" pos:column="15">APR_SUCCESS<pos:position pos:line="506" pos:column="26"/></name></expr>)<pos:position pos:line="506" pos:column="27"/></condition><then pos:line="506" pos:column="27"> <block pos:line="506" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="507" pos:column="9">int<pos:position pos:line="507" pos:column="12"/></name></type> <name pos:line="507" pos:column="13">log_level<pos:position pos:line="507" pos:column="22"/></name> <init pos:line="507" pos:column="23">= <expr><name pos:line="507" pos:column="25">APLOG_WARNING<pos:position pos:line="507" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="507" pos:column="39"/></decl_stmt>

        <if pos:line="509" pos:column="9">if <condition pos:line="509" pos:column="12">(<expr><call><name pos:line="509" pos:column="13">APR_STATUS_IS_TIMEUP<pos:position pos:line="509" pos:column="33"/></name><argument_list pos:line="509" pos:column="33">(<argument><expr><name pos:line="509" pos:column="34">rv<pos:position pos:line="509" pos:column="36"/></name></expr></argument>)<pos:position pos:line="509" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="509" pos:column="38"/></condition><then pos:line="509" pos:column="38"> <block pos:line="509" pos:column="39">{
            <comment type="block" pos:line="510" pos:column="13">/* probably some server processes bailed out already and there
             * is nobody around to call accept and clear out the kernel
             * connection queue; usually this is not worth logging
             */</comment>
            <expr_stmt><expr><name pos:line="514" pos:column="13">log_level<pos:position pos:line="514" pos:column="22"/></name> <operator pos:line="514" pos:column="23">=<pos:position pos:line="514" pos:column="24"/></operator> <name pos:line="514" pos:column="25">APLOG_DEBUG<pos:position pos:line="514" pos:column="36"/></name></expr>;<pos:position pos:line="514" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="515" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="517" pos:column="9">ap_log_error<pos:position pos:line="517" pos:column="21"/></name><argument_list pos:line="517" pos:column="21">(<argument><expr><name pos:line="517" pos:column="22">APLOG_MARK<pos:position pos:line="517" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="34">log_level<pos:position pos:line="517" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="45">rv<pos:position pos:line="517" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="49">ap_server_conf<pos:position pos:line="517" pos:column="63"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="518" pos:column="22">"connect to listener"<pos:position pos:line="518" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="518" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="519" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="521" pos:column="5">apr_socket_close<pos:position pos:line="521" pos:column="21"/></name><argument_list pos:line="521" pos:column="21">(<argument><expr><name pos:line="521" pos:column="22">sock<pos:position pos:line="521" pos:column="26"/></name></expr></argument>)<pos:position pos:line="521" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="521" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="522" pos:column="5">apr_pool_destroy<pos:position pos:line="522" pos:column="21"/></name><argument_list pos:line="522" pos:column="21">(<argument><expr><name pos:line="522" pos:column="22">p<pos:position pos:line="522" pos:column="23"/></name></expr></argument>)<pos:position pos:line="522" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="522" pos:column="25"/></expr_stmt>

    <return pos:line="524" pos:column="5">return <expr><name pos:line="524" pos:column="12">rv<pos:position pos:line="524" pos:column="14"/></name></expr>;<pos:position pos:line="524" pos:column="15"/></return>
}<pos:position pos:line="525" pos:column="2"/></block></function>

<macro><name pos:line="527" pos:column="1">AP_DECLARE<pos:position pos:line="527" pos:column="11"/></name><argument_list pos:line="527" pos:column="11">(<argument pos:line="527" pos:column="12">apr_status_t<pos:position pos:line="527" pos:column="24"/></argument>)<pos:position pos:line="527" pos:column="25"/></argument_list></macro> <macro><name pos:line="527" pos:column="26">ap_mpm_pod_signal<pos:position pos:line="527" pos:column="43"/></name><argument_list pos:line="527" pos:column="43">(<argument pos:line="527" pos:column="44">ap_pod_t *pod<pos:position pos:line="527" pos:column="57"/></argument>)<pos:position pos:line="527" pos:column="58"/></argument_list></macro>
<block pos:line="528" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="529" pos:column="5">apr_status_t<pos:position pos:line="529" pos:column="17"/></name></type> <name pos:line="529" pos:column="18">rv<pos:position pos:line="529" pos:column="20"/></name></decl>;<pos:position pos:line="529" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="531" pos:column="5">rv<pos:position pos:line="531" pos:column="7"/></name> <operator pos:line="531" pos:column="8">=<pos:position pos:line="531" pos:column="9"/></operator> <call><name pos:line="531" pos:column="10">pod_signal_internal<pos:position pos:line="531" pos:column="29"/></name><argument_list pos:line="531" pos:column="29">(<argument><expr><name pos:line="531" pos:column="30">pod<pos:position pos:line="531" pos:column="33"/></name></expr></argument>)<pos:position pos:line="531" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="531" pos:column="35"/></expr_stmt>
    <if pos:line="532" pos:column="5">if <condition pos:line="532" pos:column="8">(<expr><name pos:line="532" pos:column="9">rv<pos:position pos:line="532" pos:column="11"/></name> <operator pos:line="532" pos:column="12">!=<pos:position pos:line="532" pos:column="14"/></operator> <name pos:line="532" pos:column="15">APR_SUCCESS<pos:position pos:line="532" pos:column="26"/></name></expr>)<pos:position pos:line="532" pos:column="27"/></condition><then pos:line="532" pos:column="27"> <block pos:line="532" pos:column="28">{
        <return pos:line="533" pos:column="9">return <expr><name pos:line="533" pos:column="16">rv<pos:position pos:line="533" pos:column="18"/></name></expr>;<pos:position pos:line="533" pos:column="19"/></return>
    }<pos:position pos:line="534" pos:column="6"/></block></then></if>

    <return pos:line="536" pos:column="5">return <expr><call><name pos:line="536" pos:column="12">dummy_connection<pos:position pos:line="536" pos:column="28"/></name><argument_list pos:line="536" pos:column="28">(<argument><expr><name pos:line="536" pos:column="29">pod<pos:position pos:line="536" pos:column="32"/></name></expr></argument>)<pos:position pos:line="536" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="536" pos:column="34"/></return>
}<pos:position pos:line="537" pos:column="2"/></block>

<function><type><name pos:line="539" pos:column="1">void<pos:position pos:line="539" pos:column="5"/></name></type> <name pos:line="539" pos:column="6">ap_mpm_pod_killpg<pos:position pos:line="539" pos:column="23"/></name><parameter_list pos:line="539" pos:column="23">(<parameter><decl><type><name pos:line="539" pos:column="24">ap_pod_t<pos:position pos:line="539" pos:column="32"/></name> <modifier pos:line="539" pos:column="33">*<pos:position pos:line="539" pos:column="34"/></modifier></type><name pos:line="539" pos:column="34">pod<pos:position pos:line="539" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="539" pos:column="39">int<pos:position pos:line="539" pos:column="42"/></name></type> <name pos:line="539" pos:column="43">num<pos:position pos:line="539" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="539" pos:column="47"/></parameter_list>
<block pos:line="540" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="541" pos:column="5">int<pos:position pos:line="541" pos:column="8"/></name></type> <name pos:line="541" pos:column="9">i<pos:position pos:line="541" pos:column="10"/></name></decl>;<pos:position pos:line="541" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="542" pos:column="5">apr_status_t<pos:position pos:line="542" pos:column="17"/></name></type> <name pos:line="542" pos:column="18">rv<pos:position pos:line="542" pos:column="20"/></name> <init pos:line="542" pos:column="21">= <expr><name pos:line="542" pos:column="23">APR_SUCCESS<pos:position pos:line="542" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="542" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="544" pos:column="5">/* we don't write anything to the pod here...  we assume
     * that the would-be reader of the pod has another way to
     * see that it is time to die once we wake it up
     *
     * writing lots of things to the pod at once is very
     * problematic... we can fill the kernel pipe buffer and
     * be blocked until somebody consumes some bytes or
     * we hit a timeout...  if we hit a timeout we can't just
     * keep trying because maybe we'll never successfully
     * write again...  but then maybe we'll leave would-be
     * readers stranded (a number of them could be tied up for
     * a while serving time-consuming requests)
     */</comment>
    <for pos:line="557" pos:column="5">for <control pos:line="557" pos:column="9">(<init><expr><name pos:line="557" pos:column="10">i<pos:position pos:line="557" pos:column="11"/></name> <operator pos:line="557" pos:column="12">=<pos:position pos:line="557" pos:column="13"/></operator> <literal type="number" pos:line="557" pos:column="14">0<pos:position pos:line="557" pos:column="15"/></literal></expr>;<pos:position pos:line="557" pos:column="16"/></init> <condition><expr><name pos:line="557" pos:column="17">i<pos:position pos:line="557" pos:column="18"/></name> <operator pos:line="557" pos:column="19">&lt;<pos:position pos:line="557" pos:column="23"/></operator> <name pos:line="557" pos:column="21">num<pos:position pos:line="557" pos:column="24"/></name> <operator pos:line="557" pos:column="25">&amp;&amp;<pos:position pos:line="557" pos:column="35"/></operator> <name pos:line="557" pos:column="28">rv<pos:position pos:line="557" pos:column="30"/></name> <operator pos:line="557" pos:column="31">==<pos:position pos:line="557" pos:column="33"/></operator> <name pos:line="557" pos:column="34">APR_SUCCESS<pos:position pos:line="557" pos:column="45"/></name></expr>;<pos:position pos:line="557" pos:column="46"/></condition> <incr><expr><name pos:line="557" pos:column="47">i<pos:position pos:line="557" pos:column="48"/></name><operator pos:line="557" pos:column="48">++<pos:position pos:line="557" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="557" pos:column="51"/></control> <block pos:line="557" pos:column="52">{
        <expr_stmt><expr><name pos:line="558" pos:column="9">rv<pos:position pos:line="558" pos:column="11"/></name> <operator pos:line="558" pos:column="12">=<pos:position pos:line="558" pos:column="13"/></operator> <call><name pos:line="558" pos:column="14">dummy_connection<pos:position pos:line="558" pos:column="30"/></name><argument_list pos:line="558" pos:column="30">(<argument><expr><name pos:line="558" pos:column="31">pod<pos:position pos:line="558" pos:column="34"/></name></expr></argument>)<pos:position pos:line="558" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="558" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="559" pos:column="6"/></block></for>
}<pos:position pos:line="560" pos:column="2"/></block></function>
<cpp:endif pos:line="561" pos:column="1">#<cpp:directive pos:line="561" pos:column="2">endif<pos:position pos:line="561" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="561" pos:column="8">/* #ifdef AP_MPM_USES_POD */</comment>

<comment type="block" pos:line="563" pos:column="1">/* standard mpm configuration handling */</comment>
<cpp:ifdef pos:line="564" pos:column="1">#<cpp:directive pos:line="564" pos:column="2">ifdef<pos:position pos:line="564" pos:column="7"/></cpp:directive> <name pos:line="564" pos:column="8">AP_MPM_WANT_SET_PIDFILE<pos:position pos:line="564" pos:column="31"/></name></cpp:ifdef>
<decl_stmt><decl><type><specifier pos:line="565" pos:column="1">const<pos:position pos:line="565" pos:column="6"/></specifier> <name pos:line="565" pos:column="7">char<pos:position pos:line="565" pos:column="11"/></name> <modifier pos:line="565" pos:column="12">*<pos:position pos:line="565" pos:column="13"/></modifier></type><name pos:line="565" pos:column="13">ap_pid_fname<pos:position pos:line="565" pos:column="25"/></name> <init pos:line="565" pos:column="26">= <expr><name pos:line="565" pos:column="28">NULL<pos:position pos:line="565" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="565" pos:column="33"/></decl_stmt>

<function><type><specifier pos:line="567" pos:column="1">const<pos:position pos:line="567" pos:column="6"/></specifier> <name pos:line="567" pos:column="7">char<pos:position pos:line="567" pos:column="11"/></name> <modifier pos:line="567" pos:column="12">*<pos:position pos:line="567" pos:column="13"/></modifier></type><name pos:line="567" pos:column="13">ap_mpm_set_pidfile<pos:position pos:line="567" pos:column="31"/></name><parameter_list pos:line="567" pos:column="31">(<parameter><decl><type><name pos:line="567" pos:column="32">cmd_parms<pos:position pos:line="567" pos:column="41"/></name> <modifier pos:line="567" pos:column="42">*<pos:position pos:line="567" pos:column="43"/></modifier></type><name pos:line="567" pos:column="43">cmd<pos:position pos:line="567" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="567" pos:column="48">void<pos:position pos:line="567" pos:column="52"/></name> <modifier pos:line="567" pos:column="53">*<pos:position pos:line="567" pos:column="54"/></modifier></type><name pos:line="567" pos:column="54">dummy<pos:position pos:line="567" pos:column="59"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="568" pos:column="32">const<pos:position pos:line="568" pos:column="37"/></specifier> <name pos:line="568" pos:column="38">char<pos:position pos:line="568" pos:column="42"/></name> <modifier pos:line="568" pos:column="43">*<pos:position pos:line="568" pos:column="44"/></modifier></type><name pos:line="568" pos:column="44">arg<pos:position pos:line="568" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="568" pos:column="48"/></parameter_list>
<block pos:line="569" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="570" pos:column="5">const<pos:position pos:line="570" pos:column="10"/></specifier> <name pos:line="570" pos:column="11">char<pos:position pos:line="570" pos:column="15"/></name> <modifier pos:line="570" pos:column="16">*<pos:position pos:line="570" pos:column="17"/></modifier></type><name pos:line="570" pos:column="17">err<pos:position pos:line="570" pos:column="20"/></name> <init pos:line="570" pos:column="21">= <expr><call><name pos:line="570" pos:column="23">ap_check_cmd_context<pos:position pos:line="570" pos:column="43"/></name><argument_list pos:line="570" pos:column="43">(<argument><expr><name pos:line="570" pos:column="44">cmd<pos:position pos:line="570" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="570" pos:column="49">GLOBAL_ONLY<pos:position pos:line="570" pos:column="60"/></name></expr></argument>)<pos:position pos:line="570" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="570" pos:column="62"/></decl_stmt>
    <if pos:line="571" pos:column="5">if <condition pos:line="571" pos:column="8">(<expr><name pos:line="571" pos:column="9">err<pos:position pos:line="571" pos:column="12"/></name> <operator pos:line="571" pos:column="13">!=<pos:position pos:line="571" pos:column="15"/></operator> <name pos:line="571" pos:column="16">NULL<pos:position pos:line="571" pos:column="20"/></name></expr>)<pos:position pos:line="571" pos:column="21"/></condition><then pos:line="571" pos:column="21"> <block pos:line="571" pos:column="22">{
        <return pos:line="572" pos:column="9">return <expr><name pos:line="572" pos:column="16">err<pos:position pos:line="572" pos:column="19"/></name></expr>;<pos:position pos:line="572" pos:column="20"/></return>
    }<pos:position pos:line="573" pos:column="6"/></block></then></if>

    <if pos:line="575" pos:column="5">if <condition pos:line="575" pos:column="8">(<expr><name><name pos:line="575" pos:column="9">cmd<pos:position pos:line="575" pos:column="12"/></name><operator pos:line="575" pos:column="12">-&gt;<pos:position pos:line="575" pos:column="17"/></operator><name pos:line="575" pos:column="14">server<pos:position pos:line="575" pos:column="20"/></name><operator pos:line="575" pos:column="20">-&gt;<pos:position pos:line="575" pos:column="25"/></operator><name pos:line="575" pos:column="22">is_virtual<pos:position pos:line="575" pos:column="32"/></name></name></expr>)<pos:position pos:line="575" pos:column="33"/></condition><then pos:line="575" pos:column="33"> <block pos:line="575" pos:column="34">{
        <return pos:line="576" pos:column="9">return <expr><literal type="string" pos:line="576" pos:column="16">"PidFile directive not allowed in &lt;VirtualHost&gt;"<pos:position pos:line="576" pos:column="70"/></literal></expr>;<pos:position pos:line="576" pos:column="65"/></return>
    }<pos:position pos:line="577" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="579" pos:column="5">ap_pid_fname<pos:position pos:line="579" pos:column="17"/></name> <operator pos:line="579" pos:column="18">=<pos:position pos:line="579" pos:column="19"/></operator> <name pos:line="579" pos:column="20">arg<pos:position pos:line="579" pos:column="23"/></name></expr>;<pos:position pos:line="579" pos:column="24"/></expr_stmt>
    <return pos:line="580" pos:column="5">return <expr><name pos:line="580" pos:column="12">NULL<pos:position pos:line="580" pos:column="16"/></name></expr>;<pos:position pos:line="580" pos:column="17"/></return>
}<pos:position pos:line="581" pos:column="2"/></block></function>
<cpp:endif pos:line="582" pos:column="1">#<cpp:directive pos:line="582" pos:column="2">endif<pos:position pos:line="582" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="584" pos:column="1">#<cpp:directive pos:line="584" pos:column="2">ifdef<pos:position pos:line="584" pos:column="7"/></cpp:directive> <name pos:line="584" pos:column="8">AP_MPM_WANT_SET_SCOREBOARD<pos:position pos:line="584" pos:column="34"/></name></cpp:ifdef>
<function><type><specifier pos:line="585" pos:column="1">const<pos:position pos:line="585" pos:column="6"/></specifier> <name pos:line="585" pos:column="7">char<pos:position pos:line="585" pos:column="11"/></name> <modifier pos:line="585" pos:column="12">*<pos:position pos:line="585" pos:column="13"/></modifier></type> <name pos:line="585" pos:column="14">ap_mpm_set_scoreboard<pos:position pos:line="585" pos:column="35"/></name><parameter_list pos:line="585" pos:column="35">(<parameter><decl><type><name pos:line="585" pos:column="36">cmd_parms<pos:position pos:line="585" pos:column="45"/></name> <modifier pos:line="585" pos:column="46">*<pos:position pos:line="585" pos:column="47"/></modifier></type><name pos:line="585" pos:column="47">cmd<pos:position pos:line="585" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="585" pos:column="52">void<pos:position pos:line="585" pos:column="56"/></name> <modifier pos:line="585" pos:column="57">*<pos:position pos:line="585" pos:column="58"/></modifier></type><name pos:line="585" pos:column="58">dummy<pos:position pos:line="585" pos:column="63"/></name></decl></parameter>,
                                   <parameter><decl><type><specifier pos:line="586" pos:column="36">const<pos:position pos:line="586" pos:column="41"/></specifier> <name pos:line="586" pos:column="42">char<pos:position pos:line="586" pos:column="46"/></name> <modifier pos:line="586" pos:column="47">*<pos:position pos:line="586" pos:column="48"/></modifier></type><name pos:line="586" pos:column="48">arg<pos:position pos:line="586" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="586" pos:column="52"/></parameter_list>
<block pos:line="587" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="588" pos:column="5">const<pos:position pos:line="588" pos:column="10"/></specifier> <name pos:line="588" pos:column="11">char<pos:position pos:line="588" pos:column="15"/></name> <modifier pos:line="588" pos:column="16">*<pos:position pos:line="588" pos:column="17"/></modifier></type><name pos:line="588" pos:column="17">err<pos:position pos:line="588" pos:column="20"/></name> <init pos:line="588" pos:column="21">= <expr><call><name pos:line="588" pos:column="23">ap_check_cmd_context<pos:position pos:line="588" pos:column="43"/></name><argument_list pos:line="588" pos:column="43">(<argument><expr><name pos:line="588" pos:column="44">cmd<pos:position pos:line="588" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="588" pos:column="49">GLOBAL_ONLY<pos:position pos:line="588" pos:column="60"/></name></expr></argument>)<pos:position pos:line="588" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="588" pos:column="62"/></decl_stmt>
    <if pos:line="589" pos:column="5">if <condition pos:line="589" pos:column="8">(<expr><name pos:line="589" pos:column="9">err<pos:position pos:line="589" pos:column="12"/></name> <operator pos:line="589" pos:column="13">!=<pos:position pos:line="589" pos:column="15"/></operator> <name pos:line="589" pos:column="16">NULL<pos:position pos:line="589" pos:column="20"/></name></expr>)<pos:position pos:line="589" pos:column="21"/></condition><then pos:line="589" pos:column="21"> <block pos:line="589" pos:column="22">{
        <return pos:line="590" pos:column="9">return <expr><name pos:line="590" pos:column="16">err<pos:position pos:line="590" pos:column="19"/></name></expr>;<pos:position pos:line="590" pos:column="20"/></return>
    }<pos:position pos:line="591" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="593" pos:column="5">ap_scoreboard_fname<pos:position pos:line="593" pos:column="24"/></name> <operator pos:line="593" pos:column="25">=<pos:position pos:line="593" pos:column="26"/></operator> <name pos:line="593" pos:column="27">arg<pos:position pos:line="593" pos:column="30"/></name></expr>;<pos:position pos:line="593" pos:column="31"/></expr_stmt>
    <return pos:line="594" pos:column="5">return <expr><name pos:line="594" pos:column="12">NULL<pos:position pos:line="594" pos:column="16"/></name></expr>;<pos:position pos:line="594" pos:column="17"/></return>
}<pos:position pos:line="595" pos:column="2"/></block></function>
<cpp:endif pos:line="596" pos:column="1">#<cpp:directive pos:line="596" pos:column="2">endif<pos:position pos:line="596" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="598" pos:column="1">#<cpp:directive pos:line="598" pos:column="2">ifdef<pos:position pos:line="598" pos:column="7"/></cpp:directive> <name pos:line="598" pos:column="8">AP_MPM_WANT_SET_LOCKFILE<pos:position pos:line="598" pos:column="32"/></name></cpp:ifdef>
<decl_stmt><decl><type><specifier pos:line="599" pos:column="1">const<pos:position pos:line="599" pos:column="6"/></specifier> <name pos:line="599" pos:column="7">char<pos:position pos:line="599" pos:column="11"/></name> <modifier pos:line="599" pos:column="12">*<pos:position pos:line="599" pos:column="13"/></modifier></type><name pos:line="599" pos:column="13">ap_lock_fname<pos:position pos:line="599" pos:column="26"/></name> <init pos:line="599" pos:column="27">= <expr><name pos:line="599" pos:column="29">NULL<pos:position pos:line="599" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="599" pos:column="34"/></decl_stmt>

<function><type><specifier pos:line="601" pos:column="1">const<pos:position pos:line="601" pos:column="6"/></specifier> <name pos:line="601" pos:column="7">char<pos:position pos:line="601" pos:column="11"/></name> <modifier pos:line="601" pos:column="12">*<pos:position pos:line="601" pos:column="13"/></modifier></type><name pos:line="601" pos:column="13">ap_mpm_set_lockfile<pos:position pos:line="601" pos:column="32"/></name><parameter_list pos:line="601" pos:column="32">(<parameter><decl><type><name pos:line="601" pos:column="33">cmd_parms<pos:position pos:line="601" pos:column="42"/></name> <modifier pos:line="601" pos:column="43">*<pos:position pos:line="601" pos:column="44"/></modifier></type><name pos:line="601" pos:column="44">cmd<pos:position pos:line="601" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="601" pos:column="49">void<pos:position pos:line="601" pos:column="53"/></name> <modifier pos:line="601" pos:column="54">*<pos:position pos:line="601" pos:column="55"/></modifier></type><name pos:line="601" pos:column="55">dummy<pos:position pos:line="601" pos:column="60"/></name></decl></parameter>,
                                <parameter><decl><type><specifier pos:line="602" pos:column="33">const<pos:position pos:line="602" pos:column="38"/></specifier> <name pos:line="602" pos:column="39">char<pos:position pos:line="602" pos:column="43"/></name> <modifier pos:line="602" pos:column="44">*<pos:position pos:line="602" pos:column="45"/></modifier></type><name pos:line="602" pos:column="45">arg<pos:position pos:line="602" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="602" pos:column="49"/></parameter_list>
<block pos:line="603" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="604" pos:column="5">const<pos:position pos:line="604" pos:column="10"/></specifier> <name pos:line="604" pos:column="11">char<pos:position pos:line="604" pos:column="15"/></name> <modifier pos:line="604" pos:column="16">*<pos:position pos:line="604" pos:column="17"/></modifier></type><name pos:line="604" pos:column="17">err<pos:position pos:line="604" pos:column="20"/></name> <init pos:line="604" pos:column="21">= <expr><call><name pos:line="604" pos:column="23">ap_check_cmd_context<pos:position pos:line="604" pos:column="43"/></name><argument_list pos:line="604" pos:column="43">(<argument><expr><name pos:line="604" pos:column="44">cmd<pos:position pos:line="604" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="604" pos:column="49">GLOBAL_ONLY<pos:position pos:line="604" pos:column="60"/></name></expr></argument>)<pos:position pos:line="604" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="604" pos:column="62"/></decl_stmt>
    <if pos:line="605" pos:column="5">if <condition pos:line="605" pos:column="8">(<expr><name pos:line="605" pos:column="9">err<pos:position pos:line="605" pos:column="12"/></name> <operator pos:line="605" pos:column="13">!=<pos:position pos:line="605" pos:column="15"/></operator> <name pos:line="605" pos:column="16">NULL<pos:position pos:line="605" pos:column="20"/></name></expr>)<pos:position pos:line="605" pos:column="21"/></condition><then pos:line="605" pos:column="21"> <block pos:line="605" pos:column="22">{
        <return pos:line="606" pos:column="9">return <expr><name pos:line="606" pos:column="16">err<pos:position pos:line="606" pos:column="19"/></name></expr>;<pos:position pos:line="606" pos:column="20"/></return>
    }<pos:position pos:line="607" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="609" pos:column="5">ap_lock_fname<pos:position pos:line="609" pos:column="18"/></name> <operator pos:line="609" pos:column="19">=<pos:position pos:line="609" pos:column="20"/></operator> <name pos:line="609" pos:column="21">arg<pos:position pos:line="609" pos:column="24"/></name></expr>;<pos:position pos:line="609" pos:column="25"/></expr_stmt>
    <return pos:line="610" pos:column="5">return <expr><name pos:line="610" pos:column="12">NULL<pos:position pos:line="610" pos:column="16"/></name></expr>;<pos:position pos:line="610" pos:column="17"/></return>
}<pos:position pos:line="611" pos:column="2"/></block></function>
<cpp:endif pos:line="612" pos:column="1">#<cpp:directive pos:line="612" pos:column="2">endif<pos:position pos:line="612" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="614" pos:column="1">#<cpp:directive pos:line="614" pos:column="2">ifdef<pos:position pos:line="614" pos:column="7"/></cpp:directive> <name pos:line="614" pos:column="8">AP_MPM_WANT_SET_MAX_REQUESTS<pos:position pos:line="614" pos:column="36"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="615" pos:column="1">int<pos:position pos:line="615" pos:column="4"/></name></type> <name pos:line="615" pos:column="5">ap_max_requests_per_child<pos:position pos:line="615" pos:column="30"/></name> <init pos:line="615" pos:column="31">= <expr><literal type="number" pos:line="615" pos:column="33">0<pos:position pos:line="615" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="615" pos:column="35"/></decl_stmt>

<function><type><specifier pos:line="617" pos:column="1">const<pos:position pos:line="617" pos:column="6"/></specifier> <name pos:line="617" pos:column="7">char<pos:position pos:line="617" pos:column="11"/></name> <modifier pos:line="617" pos:column="12">*<pos:position pos:line="617" pos:column="13"/></modifier></type><name pos:line="617" pos:column="13">ap_mpm_set_max_requests<pos:position pos:line="617" pos:column="36"/></name><parameter_list pos:line="617" pos:column="36">(<parameter><decl><type><name pos:line="617" pos:column="37">cmd_parms<pos:position pos:line="617" pos:column="46"/></name> <modifier pos:line="617" pos:column="47">*<pos:position pos:line="617" pos:column="48"/></modifier></type><name pos:line="617" pos:column="48">cmd<pos:position pos:line="617" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="617" pos:column="53">void<pos:position pos:line="617" pos:column="57"/></name> <modifier pos:line="617" pos:column="58">*<pos:position pos:line="617" pos:column="59"/></modifier></type><name pos:line="617" pos:column="59">dummy<pos:position pos:line="617" pos:column="64"/></name></decl></parameter>,
                                    <parameter><decl><type><specifier pos:line="618" pos:column="37">const<pos:position pos:line="618" pos:column="42"/></specifier> <name pos:line="618" pos:column="43">char<pos:position pos:line="618" pos:column="47"/></name> <modifier pos:line="618" pos:column="48">*<pos:position pos:line="618" pos:column="49"/></modifier></type><name pos:line="618" pos:column="49">arg<pos:position pos:line="618" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="618" pos:column="53"/></parameter_list>
<block pos:line="619" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="620" pos:column="5">const<pos:position pos:line="620" pos:column="10"/></specifier> <name pos:line="620" pos:column="11">char<pos:position pos:line="620" pos:column="15"/></name> <modifier pos:line="620" pos:column="16">*<pos:position pos:line="620" pos:column="17"/></modifier></type><name pos:line="620" pos:column="17">err<pos:position pos:line="620" pos:column="20"/></name> <init pos:line="620" pos:column="21">= <expr><call><name pos:line="620" pos:column="23">ap_check_cmd_context<pos:position pos:line="620" pos:column="43"/></name><argument_list pos:line="620" pos:column="43">(<argument><expr><name pos:line="620" pos:column="44">cmd<pos:position pos:line="620" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="620" pos:column="49">GLOBAL_ONLY<pos:position pos:line="620" pos:column="60"/></name></expr></argument>)<pos:position pos:line="620" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="620" pos:column="62"/></decl_stmt>
    <if pos:line="621" pos:column="5">if <condition pos:line="621" pos:column="8">(<expr><name pos:line="621" pos:column="9">err<pos:position pos:line="621" pos:column="12"/></name> <operator pos:line="621" pos:column="13">!=<pos:position pos:line="621" pos:column="15"/></operator> <name pos:line="621" pos:column="16">NULL<pos:position pos:line="621" pos:column="20"/></name></expr>)<pos:position pos:line="621" pos:column="21"/></condition><then pos:line="621" pos:column="21"> <block pos:line="621" pos:column="22">{
        <return pos:line="622" pos:column="9">return <expr><name pos:line="622" pos:column="16">err<pos:position pos:line="622" pos:column="19"/></name></expr>;<pos:position pos:line="622" pos:column="20"/></return>
    }<pos:position pos:line="623" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="625" pos:column="5">ap_max_requests_per_child<pos:position pos:line="625" pos:column="30"/></name> <operator pos:line="625" pos:column="31">=<pos:position pos:line="625" pos:column="32"/></operator> <call><name pos:line="625" pos:column="33">atoi<pos:position pos:line="625" pos:column="37"/></name><argument_list pos:line="625" pos:column="37">(<argument><expr><name pos:line="625" pos:column="38">arg<pos:position pos:line="625" pos:column="41"/></name></expr></argument>)<pos:position pos:line="625" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="625" pos:column="43"/></expr_stmt>

    <return pos:line="627" pos:column="5">return <expr><name pos:line="627" pos:column="12">NULL<pos:position pos:line="627" pos:column="16"/></name></expr>;<pos:position pos:line="627" pos:column="17"/></return>
}<pos:position pos:line="628" pos:column="2"/></block></function>
<cpp:endif pos:line="629" pos:column="1">#<cpp:directive pos:line="629" pos:column="2">endif<pos:position pos:line="629" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="631" pos:column="1">#<cpp:directive pos:line="631" pos:column="2">ifdef<pos:position pos:line="631" pos:column="7"/></cpp:directive> <name pos:line="631" pos:column="8">AP_MPM_WANT_SET_COREDUMPDIR<pos:position pos:line="631" pos:column="35"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="632" pos:column="1">char<pos:position pos:line="632" pos:column="5"/></name></type> <name><name pos:line="632" pos:column="6">ap_coredump_dir<pos:position pos:line="632" pos:column="21"/></name><index pos:line="632" pos:column="21">[<expr><name pos:line="632" pos:column="22">MAX_STRING_LEN<pos:position pos:line="632" pos:column="36"/></name></expr>]<pos:position pos:line="632" pos:column="37"/></index></name></decl>;<pos:position pos:line="632" pos:column="38"/></decl_stmt>

<function><type><specifier pos:line="634" pos:column="1">const<pos:position pos:line="634" pos:column="6"/></specifier> <name pos:line="634" pos:column="7">char<pos:position pos:line="634" pos:column="11"/></name> <modifier pos:line="634" pos:column="12">*<pos:position pos:line="634" pos:column="13"/></modifier></type><name pos:line="634" pos:column="13">ap_mpm_set_coredumpdir<pos:position pos:line="634" pos:column="35"/></name><parameter_list pos:line="634" pos:column="35">(<parameter><decl><type><name pos:line="634" pos:column="36">cmd_parms<pos:position pos:line="634" pos:column="45"/></name> <modifier pos:line="634" pos:column="46">*<pos:position pos:line="634" pos:column="47"/></modifier></type><name pos:line="634" pos:column="47">cmd<pos:position pos:line="634" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="634" pos:column="52">void<pos:position pos:line="634" pos:column="56"/></name> <modifier pos:line="634" pos:column="57">*<pos:position pos:line="634" pos:column="58"/></modifier></type><name pos:line="634" pos:column="58">dummy<pos:position pos:line="634" pos:column="63"/></name></decl></parameter>,
                                   <parameter><decl><type><specifier pos:line="635" pos:column="36">const<pos:position pos:line="635" pos:column="41"/></specifier> <name pos:line="635" pos:column="42">char<pos:position pos:line="635" pos:column="46"/></name> <modifier pos:line="635" pos:column="47">*<pos:position pos:line="635" pos:column="48"/></modifier></type><name pos:line="635" pos:column="48">arg<pos:position pos:line="635" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="635" pos:column="52"/></parameter_list>
<block pos:line="636" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="637" pos:column="5">apr_status_t<pos:position pos:line="637" pos:column="17"/></name></type> <name pos:line="637" pos:column="18">rv<pos:position pos:line="637" pos:column="20"/></name></decl>;<pos:position pos:line="637" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="638" pos:column="5">apr_finfo_t<pos:position pos:line="638" pos:column="16"/></name></type> <name pos:line="638" pos:column="17">finfo<pos:position pos:line="638" pos:column="22"/></name></decl>;<pos:position pos:line="638" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="639" pos:column="5">const<pos:position pos:line="639" pos:column="10"/></specifier> <name pos:line="639" pos:column="11">char<pos:position pos:line="639" pos:column="15"/></name> <modifier pos:line="639" pos:column="16">*<pos:position pos:line="639" pos:column="17"/></modifier></type><name pos:line="639" pos:column="17">fname<pos:position pos:line="639" pos:column="22"/></name></decl>;<pos:position pos:line="639" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="640" pos:column="5">const<pos:position pos:line="640" pos:column="10"/></specifier> <name pos:line="640" pos:column="11">char<pos:position pos:line="640" pos:column="15"/></name> <modifier pos:line="640" pos:column="16">*<pos:position pos:line="640" pos:column="17"/></modifier></type><name pos:line="640" pos:column="17">err<pos:position pos:line="640" pos:column="20"/></name> <init pos:line="640" pos:column="21">= <expr><call><name pos:line="640" pos:column="23">ap_check_cmd_context<pos:position pos:line="640" pos:column="43"/></name><argument_list pos:line="640" pos:column="43">(<argument><expr><name pos:line="640" pos:column="44">cmd<pos:position pos:line="640" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="640" pos:column="49">GLOBAL_ONLY<pos:position pos:line="640" pos:column="60"/></name></expr></argument>)<pos:position pos:line="640" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="640" pos:column="62"/></decl_stmt>
    <if pos:line="641" pos:column="5">if <condition pos:line="641" pos:column="8">(<expr><name pos:line="641" pos:column="9">err<pos:position pos:line="641" pos:column="12"/></name> <operator pos:line="641" pos:column="13">!=<pos:position pos:line="641" pos:column="15"/></operator> <name pos:line="641" pos:column="16">NULL<pos:position pos:line="641" pos:column="20"/></name></expr>)<pos:position pos:line="641" pos:column="21"/></condition><then pos:line="641" pos:column="21"> <block pos:line="641" pos:column="22">{
        <return pos:line="642" pos:column="9">return <expr><name pos:line="642" pos:column="16">err<pos:position pos:line="642" pos:column="19"/></name></expr>;<pos:position pos:line="642" pos:column="20"/></return>
    }<pos:position pos:line="643" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="645" pos:column="5">fname<pos:position pos:line="645" pos:column="10"/></name> <operator pos:line="645" pos:column="11">=<pos:position pos:line="645" pos:column="12"/></operator> <call><name pos:line="645" pos:column="13">ap_server_root_relative<pos:position pos:line="645" pos:column="36"/></name><argument_list pos:line="645" pos:column="36">(<argument><expr><name><name pos:line="645" pos:column="37">cmd<pos:position pos:line="645" pos:column="40"/></name><operator pos:line="645" pos:column="40">-&gt;<pos:position pos:line="645" pos:column="45"/></operator><name pos:line="645" pos:column="42">pool<pos:position pos:line="645" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="645" pos:column="48">arg<pos:position pos:line="645" pos:column="51"/></name></expr></argument>)<pos:position pos:line="645" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="645" pos:column="53"/></expr_stmt>
    <if pos:line="646" pos:column="5">if <condition pos:line="646" pos:column="8">(<expr><operator pos:line="646" pos:column="9">!<pos:position pos:line="646" pos:column="10"/></operator><name pos:line="646" pos:column="10">fname<pos:position pos:line="646" pos:column="15"/></name></expr>)<pos:position pos:line="646" pos:column="16"/></condition><then pos:line="646" pos:column="16"> <block pos:line="646" pos:column="17">{
        <return pos:line="647" pos:column="9">return <expr><call><name pos:line="647" pos:column="16">apr_pstrcat<pos:position pos:line="647" pos:column="27"/></name><argument_list pos:line="647" pos:column="27">(<argument><expr><name><name pos:line="647" pos:column="28">cmd<pos:position pos:line="647" pos:column="31"/></name><operator pos:line="647" pos:column="31">-&gt;<pos:position pos:line="647" pos:column="36"/></operator><name pos:line="647" pos:column="33">pool<pos:position pos:line="647" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="647" pos:column="39">"Invalid CoreDumpDirectory path "<pos:position pos:line="647" pos:column="72"/></literal></expr></argument>, 
                           <argument><expr><name pos:line="648" pos:column="28">arg<pos:position pos:line="648" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="648" pos:column="33">NULL<pos:position pos:line="648" pos:column="37"/></name></expr></argument>)<pos:position pos:line="648" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="648" pos:column="39"/></return>
    }<pos:position pos:line="649" pos:column="6"/></block></then></if>
    <if pos:line="650" pos:column="5">if <condition pos:line="650" pos:column="8">(<expr><operator pos:line="650" pos:column="9">(<pos:position pos:line="650" pos:column="10"/></operator><name pos:line="650" pos:column="10">rv<pos:position pos:line="650" pos:column="12"/></name> <operator pos:line="650" pos:column="13">=<pos:position pos:line="650" pos:column="14"/></operator> <call><name pos:line="650" pos:column="15">apr_stat<pos:position pos:line="650" pos:column="23"/></name><argument_list pos:line="650" pos:column="23">(<argument><expr><operator pos:line="650" pos:column="24">&amp;<pos:position pos:line="650" pos:column="29"/></operator><name pos:line="650" pos:column="25">finfo<pos:position pos:line="650" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="650" pos:column="32">fname<pos:position pos:line="650" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="650" pos:column="39">APR_FINFO_TYPE<pos:position pos:line="650" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="650" pos:column="55">cmd<pos:position pos:line="650" pos:column="58"/></name><operator pos:line="650" pos:column="58">-&gt;<pos:position pos:line="650" pos:column="63"/></operator><name pos:line="650" pos:column="60">pool<pos:position pos:line="650" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="650" pos:column="65"/></argument_list></call><operator pos:line="650" pos:column="65">)<pos:position pos:line="650" pos:column="66"/></operator> <operator pos:line="650" pos:column="67">!=<pos:position pos:line="650" pos:column="69"/></operator> <name pos:line="650" pos:column="70">APR_SUCCESS<pos:position pos:line="650" pos:column="81"/></name></expr>)<pos:position pos:line="650" pos:column="82"/></condition><then pos:line="650" pos:column="82"> <block pos:line="650" pos:column="83">{
        <return pos:line="651" pos:column="9">return <expr><call><name pos:line="651" pos:column="16">apr_pstrcat<pos:position pos:line="651" pos:column="27"/></name><argument_list pos:line="651" pos:column="27">(<argument><expr><name><name pos:line="651" pos:column="28">cmd<pos:position pos:line="651" pos:column="31"/></name><operator pos:line="651" pos:column="31">-&gt;<pos:position pos:line="651" pos:column="36"/></operator><name pos:line="651" pos:column="33">pool<pos:position pos:line="651" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="651" pos:column="39">"CoreDumpDirectory "<pos:position pos:line="651" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="651" pos:column="61">fname<pos:position pos:line="651" pos:column="66"/></name></expr></argument>,
                           <argument><expr><literal type="string" pos:line="652" pos:column="28">" does not exist"<pos:position pos:line="652" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="652" pos:column="47">NULL<pos:position pos:line="652" pos:column="51"/></name></expr></argument>)<pos:position pos:line="652" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="652" pos:column="53"/></return>
    }<pos:position pos:line="653" pos:column="6"/></block></then></if>
    <if pos:line="654" pos:column="5">if <condition pos:line="654" pos:column="8">(<expr><name><name pos:line="654" pos:column="9">finfo<pos:position pos:line="654" pos:column="14"/></name><operator pos:line="654" pos:column="14">.<pos:position pos:line="654" pos:column="15"/></operator><name pos:line="654" pos:column="15">filetype<pos:position pos:line="654" pos:column="23"/></name></name> <operator pos:line="654" pos:column="24">!=<pos:position pos:line="654" pos:column="26"/></operator> <name pos:line="654" pos:column="27">APR_DIR<pos:position pos:line="654" pos:column="34"/></name></expr>)<pos:position pos:line="654" pos:column="35"/></condition><then pos:line="654" pos:column="35"> <block pos:line="654" pos:column="36">{
        <return pos:line="655" pos:column="9">return <expr><call><name pos:line="655" pos:column="16">apr_pstrcat<pos:position pos:line="655" pos:column="27"/></name><argument_list pos:line="655" pos:column="27">(<argument><expr><name><name pos:line="655" pos:column="28">cmd<pos:position pos:line="655" pos:column="31"/></name><operator pos:line="655" pos:column="31">-&gt;<pos:position pos:line="655" pos:column="36"/></operator><name pos:line="655" pos:column="33">pool<pos:position pos:line="655" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="655" pos:column="39">"CoreDumpDirectory "<pos:position pos:line="655" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="655" pos:column="61">fname<pos:position pos:line="655" pos:column="66"/></name></expr></argument>,
                           <argument><expr><literal type="string" pos:line="656" pos:column="28">" is not a directory"<pos:position pos:line="656" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="656" pos:column="51">NULL<pos:position pos:line="656" pos:column="55"/></name></expr></argument>)<pos:position pos:line="656" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="656" pos:column="57"/></return>
    }<pos:position pos:line="657" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="658" pos:column="5">apr_cpystrn<pos:position pos:line="658" pos:column="16"/></name><argument_list pos:line="658" pos:column="16">(<argument><expr><name pos:line="658" pos:column="17">ap_coredump_dir<pos:position pos:line="658" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="658" pos:column="34">fname<pos:position pos:line="658" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="658" pos:column="41">sizeof<argument_list pos:line="658" pos:column="47">(<argument><expr><name pos:line="658" pos:column="48">ap_coredump_dir<pos:position pos:line="658" pos:column="63"/></name></expr></argument>)<pos:position pos:line="658" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="658" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="658" pos:column="66"/></expr_stmt>
    <return pos:line="659" pos:column="5">return <expr><name pos:line="659" pos:column="12">NULL<pos:position pos:line="659" pos:column="16"/></name></expr>;<pos:position pos:line="659" pos:column="17"/></return>
}<pos:position pos:line="660" pos:column="2"/></block></function>
<cpp:endif pos:line="661" pos:column="1">#<cpp:directive pos:line="661" pos:column="2">endif<pos:position pos:line="661" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="663" pos:column="1">#<cpp:directive pos:line="663" pos:column="2">ifdef<pos:position pos:line="663" pos:column="7"/></cpp:directive> <name pos:line="663" pos:column="8">AP_MPM_WANT_SET_ACCEPT_LOCK_MECH<pos:position pos:line="663" pos:column="40"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="664" pos:column="1">apr_lockmech_e<pos:position pos:line="664" pos:column="15"/></name></type> <name pos:line="664" pos:column="16">ap_accept_lock_mech<pos:position pos:line="664" pos:column="35"/></name> <init pos:line="664" pos:column="36">= <expr><name pos:line="664" pos:column="38">APR_LOCK_DEFAULT<pos:position pos:line="664" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="664" pos:column="55"/></decl_stmt>

<decl_stmt><decl><type><specifier pos:line="666" pos:column="1">const<pos:position pos:line="666" pos:column="6"/></specifier> <name pos:line="666" pos:column="7">char<pos:position pos:line="666" pos:column="11"/></name></type> <name><name pos:line="666" pos:column="12">ap_valid_accept_mutex_string<pos:position pos:line="666" pos:column="40"/></name><index pos:line="666" pos:column="40">[]<pos:position pos:line="666" pos:column="42"/></index></name> <init pos:line="666" pos:column="43">=
    <expr><literal type="string" pos:line="667" pos:column="5">"Valid accept mutexes for this platform and MPM are: default"<pos:position pos:line="667" pos:column="66"/></literal>
<cpp:if pos:line="668" pos:column="1">#<cpp:directive pos:line="668" pos:column="2">if<pos:position pos:line="668" pos:column="4"/></cpp:directive> <expr><name pos:line="668" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="668" pos:column="28"/></name></expr></cpp:if>
    <literal type="string" pos:line="669" pos:column="5">", flock"<pos:position pos:line="669" pos:column="14"/></literal>
<cpp:endif pos:line="670" pos:column="1">#<cpp:directive pos:line="670" pos:column="2">endif<pos:position pos:line="670" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="671" pos:column="1">#<cpp:directive pos:line="671" pos:column="2">if<pos:position pos:line="671" pos:column="4"/></cpp:directive> <expr><name pos:line="671" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="671" pos:column="28"/></name></expr></cpp:if>
    <literal type="string" pos:line="672" pos:column="5">", fcntl"<pos:position pos:line="672" pos:column="14"/></literal>
<cpp:endif pos:line="673" pos:column="1">#<cpp:directive pos:line="673" pos:column="2">endif<pos:position pos:line="673" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">if<pos:position pos:line="674" pos:column="4"/></cpp:directive> <expr><name pos:line="674" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="674" pos:column="30"/></name> <operator pos:line="674" pos:column="31">&amp;&amp;<pos:position pos:line="674" pos:column="41"/></operator> <operator pos:line="674" pos:column="34">!<pos:position pos:line="674" pos:column="35"/></operator><call><name pos:line="674" pos:column="35">defined<pos:position pos:line="674" pos:column="42"/></name><argument_list pos:line="674" pos:column="42">(<argument><expr><name pos:line="674" pos:column="43">PERCHILD_MPM<pos:position pos:line="674" pos:column="55"/></name></expr></argument>)<pos:position pos:line="674" pos:column="56"/></argument_list></call></expr></cpp:if>
    <literal type="string" pos:line="675" pos:column="5">", sysvsem"<pos:position pos:line="675" pos:column="16"/></literal>
<cpp:endif pos:line="676" pos:column="1">#<cpp:directive pos:line="676" pos:column="2">endif<pos:position pos:line="676" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="677" pos:column="1">#<cpp:directive pos:line="677" pos:column="2">if<pos:position pos:line="677" pos:column="4"/></cpp:directive> <expr><name pos:line="677" pos:column="5">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="677" pos:column="31"/></name></expr></cpp:if>
    <literal type="string" pos:line="678" pos:column="5">", posixsem"<pos:position pos:line="678" pos:column="17"/></literal>
<cpp:endif pos:line="679" pos:column="1">#<cpp:directive pos:line="679" pos:column="2">endif<pos:position pos:line="679" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="680" pos:column="1">#<cpp:directive pos:line="680" pos:column="2">if<pos:position pos:line="680" pos:column="4"/></cpp:directive> <expr><name pos:line="680" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="680" pos:column="35"/></name></expr></cpp:if>
    <literal type="string" pos:line="681" pos:column="5">", pthread"<pos:position pos:line="681" pos:column="16"/></literal>
<cpp:endif pos:line="682" pos:column="1">#<cpp:directive pos:line="682" pos:column="2">endif<pos:position pos:line="682" pos:column="7"/></cpp:directive></cpp:endif>
    <literal type="string" pos:line="683" pos:column="5">"."<pos:position pos:line="683" pos:column="8"/></literal></expr></init></decl>;<pos:position pos:line="683" pos:column="9"/></decl_stmt>

<macro><name pos:line="685" pos:column="1">AP_DECLARE<pos:position pos:line="685" pos:column="11"/></name><argument_list pos:line="685" pos:column="11">(<argument pos:line="685" pos:column="12">const char *<pos:position pos:line="685" pos:column="24"/></argument>)<pos:position pos:line="685" pos:column="25"/></argument_list></macro> <macro><name pos:line="685" pos:column="26">ap_mpm_set_accept_lock_mech<pos:position pos:line="685" pos:column="53"/></name><argument_list pos:line="685" pos:column="53">(<argument pos:line="685" pos:column="54">cmd_parms *cmd<pos:position pos:line="685" pos:column="68"/></argument>,
                                                     <argument pos:line="686" pos:column="54">void *dummy<pos:position pos:line="686" pos:column="65"/></argument>,
                                                     <argument pos:line="687" pos:column="54">const char *arg<pos:position pos:line="687" pos:column="69"/></argument>)<pos:position pos:line="687" pos:column="70"/></argument_list></macro>
<block pos:line="688" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="689" pos:column="5">const<pos:position pos:line="689" pos:column="10"/></specifier> <name pos:line="689" pos:column="11">char<pos:position pos:line="689" pos:column="15"/></name> <modifier pos:line="689" pos:column="16">*<pos:position pos:line="689" pos:column="17"/></modifier></type><name pos:line="689" pos:column="17">err<pos:position pos:line="689" pos:column="20"/></name> <init pos:line="689" pos:column="21">= <expr><call><name pos:line="689" pos:column="23">ap_check_cmd_context<pos:position pos:line="689" pos:column="43"/></name><argument_list pos:line="689" pos:column="43">(<argument><expr><name pos:line="689" pos:column="44">cmd<pos:position pos:line="689" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="689" pos:column="49">GLOBAL_ONLY<pos:position pos:line="689" pos:column="60"/></name></expr></argument>)<pos:position pos:line="689" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="689" pos:column="62"/></decl_stmt>
    <if pos:line="690" pos:column="5">if <condition pos:line="690" pos:column="8">(<expr><name pos:line="690" pos:column="9">err<pos:position pos:line="690" pos:column="12"/></name> <operator pos:line="690" pos:column="13">!=<pos:position pos:line="690" pos:column="15"/></operator> <name pos:line="690" pos:column="16">NULL<pos:position pos:line="690" pos:column="20"/></name></expr>)<pos:position pos:line="690" pos:column="21"/></condition><then pos:line="690" pos:column="21"> <block pos:line="690" pos:column="22">{
        <return pos:line="691" pos:column="9">return <expr><name pos:line="691" pos:column="16">err<pos:position pos:line="691" pos:column="19"/></name></expr>;<pos:position pos:line="691" pos:column="20"/></return>
    }<pos:position pos:line="692" pos:column="6"/></block></then></if>

    <if pos:line="694" pos:column="5">if <condition pos:line="694" pos:column="8">(<expr><operator pos:line="694" pos:column="9">!<pos:position pos:line="694" pos:column="10"/></operator><call><name pos:line="694" pos:column="10">strcasecmp<pos:position pos:line="694" pos:column="20"/></name><argument_list pos:line="694" pos:column="20">(<argument><expr><name pos:line="694" pos:column="21">arg<pos:position pos:line="694" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="694" pos:column="26">"default"<pos:position pos:line="694" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="694" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="694" pos:column="37"/></condition><then pos:line="694" pos:column="37"> <block pos:line="694" pos:column="38">{
        <expr_stmt><expr><name pos:line="695" pos:column="9">ap_accept_lock_mech<pos:position pos:line="695" pos:column="28"/></name> <operator pos:line="695" pos:column="29">=<pos:position pos:line="695" pos:column="30"/></operator> <name pos:line="695" pos:column="31">APR_LOCK_DEFAULT<pos:position pos:line="695" pos:column="47"/></name></expr>;<pos:position pos:line="695" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="696" pos:column="6"/></block></then>
<cpp:if pos:line="697" pos:column="1">#<cpp:directive pos:line="697" pos:column="2">if<pos:position pos:line="697" pos:column="4"/></cpp:directive> <expr><name pos:line="697" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="697" pos:column="28"/></name></expr></cpp:if>
    <elseif pos:line="698" pos:column="5">else <if pos:line="698" pos:column="10">if <condition pos:line="698" pos:column="13">(<expr><operator pos:line="698" pos:column="14">!<pos:position pos:line="698" pos:column="15"/></operator><call><name pos:line="698" pos:column="15">strcasecmp<pos:position pos:line="698" pos:column="25"/></name><argument_list pos:line="698" pos:column="25">(<argument><expr><name pos:line="698" pos:column="26">arg<pos:position pos:line="698" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="698" pos:column="31">"flock"<pos:position pos:line="698" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="698" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="698" pos:column="40"/></condition><then pos:line="698" pos:column="40"> <block pos:line="698" pos:column="41">{
        <expr_stmt><expr><name pos:line="699" pos:column="9">ap_accept_lock_mech<pos:position pos:line="699" pos:column="28"/></name> <operator pos:line="699" pos:column="29">=<pos:position pos:line="699" pos:column="30"/></operator> <name pos:line="699" pos:column="31">APR_LOCK_FLOCK<pos:position pos:line="699" pos:column="45"/></name></expr>;<pos:position pos:line="699" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="700" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="701" pos:column="1">#<cpp:directive pos:line="701" pos:column="2">endif<pos:position pos:line="701" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="702" pos:column="1">#<cpp:directive pos:line="702" pos:column="2">if<pos:position pos:line="702" pos:column="4"/></cpp:directive> <expr><name pos:line="702" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="702" pos:column="28"/></name></expr></cpp:if>
    <elseif pos:line="703" pos:column="5">else <if pos:line="703" pos:column="10">if <condition pos:line="703" pos:column="13">(<expr><operator pos:line="703" pos:column="14">!<pos:position pos:line="703" pos:column="15"/></operator><call><name pos:line="703" pos:column="15">strcasecmp<pos:position pos:line="703" pos:column="25"/></name><argument_list pos:line="703" pos:column="25">(<argument><expr><name pos:line="703" pos:column="26">arg<pos:position pos:line="703" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="703" pos:column="31">"fcntl"<pos:position pos:line="703" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="703" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="703" pos:column="40"/></condition><then pos:line="703" pos:column="40"> <block pos:line="703" pos:column="41">{
        <expr_stmt><expr><name pos:line="704" pos:column="9">ap_accept_lock_mech<pos:position pos:line="704" pos:column="28"/></name> <operator pos:line="704" pos:column="29">=<pos:position pos:line="704" pos:column="30"/></operator> <name pos:line="704" pos:column="31">APR_LOCK_FCNTL<pos:position pos:line="704" pos:column="45"/></name></expr>;<pos:position pos:line="704" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="705" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="706" pos:column="1">#<cpp:directive pos:line="706" pos:column="2">endif<pos:position pos:line="706" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="708" pos:column="5">/* perchild can't use SysV sems because the permissions on the accept
     * mutex can't be set to allow all processes to use the mutex and
     * at the same time keep all users from being able to dink with the
     * mutex
     */</comment>
<cpp:if pos:line="713" pos:column="1">#<cpp:directive pos:line="713" pos:column="2">if<pos:position pos:line="713" pos:column="4"/></cpp:directive> <expr><name pos:line="713" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="713" pos:column="30"/></name> <operator pos:line="713" pos:column="31">&amp;&amp;<pos:position pos:line="713" pos:column="41"/></operator> <operator pos:line="713" pos:column="34">!<pos:position pos:line="713" pos:column="35"/></operator><call><name pos:line="713" pos:column="35">defined<pos:position pos:line="713" pos:column="42"/></name><argument_list pos:line="713" pos:column="42">(<argument><expr><name pos:line="713" pos:column="43">PERCHILD_MPM<pos:position pos:line="713" pos:column="55"/></name></expr></argument>)<pos:position pos:line="713" pos:column="56"/></argument_list></call></expr></cpp:if>
    <elseif pos:line="714" pos:column="5">else <if pos:line="714" pos:column="10">if <condition pos:line="714" pos:column="13">(<expr><operator pos:line="714" pos:column="14">!<pos:position pos:line="714" pos:column="15"/></operator><call><name pos:line="714" pos:column="15">strcasecmp<pos:position pos:line="714" pos:column="25"/></name><argument_list pos:line="714" pos:column="25">(<argument><expr><name pos:line="714" pos:column="26">arg<pos:position pos:line="714" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="714" pos:column="31">"sysvsem"<pos:position pos:line="714" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="714" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="714" pos:column="42"/></condition><then pos:line="714" pos:column="42"> <block pos:line="714" pos:column="43">{
        <expr_stmt><expr><name pos:line="715" pos:column="9">ap_accept_lock_mech<pos:position pos:line="715" pos:column="28"/></name> <operator pos:line="715" pos:column="29">=<pos:position pos:line="715" pos:column="30"/></operator> <name pos:line="715" pos:column="31">APR_LOCK_SYSVSEM<pos:position pos:line="715" pos:column="47"/></name></expr>;<pos:position pos:line="715" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="716" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="717" pos:column="1">#<cpp:directive pos:line="717" pos:column="2">endif<pos:position pos:line="717" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="718" pos:column="1">#<cpp:directive pos:line="718" pos:column="2">if<pos:position pos:line="718" pos:column="4"/></cpp:directive> <expr><name pos:line="718" pos:column="5">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="718" pos:column="31"/></name></expr></cpp:if>
    <elseif pos:line="719" pos:column="5">else <if pos:line="719" pos:column="10">if <condition pos:line="719" pos:column="13">(<expr><operator pos:line="719" pos:column="14">!<pos:position pos:line="719" pos:column="15"/></operator><call><name pos:line="719" pos:column="15">strcasecmp<pos:position pos:line="719" pos:column="25"/></name><argument_list pos:line="719" pos:column="25">(<argument><expr><name pos:line="719" pos:column="26">arg<pos:position pos:line="719" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="719" pos:column="31">"posixsem"<pos:position pos:line="719" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="719" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="719" pos:column="43"/></condition><then pos:line="719" pos:column="43"> <block pos:line="719" pos:column="44">{
        <expr_stmt><expr><name pos:line="720" pos:column="9">ap_accept_lock_mech<pos:position pos:line="720" pos:column="28"/></name> <operator pos:line="720" pos:column="29">=<pos:position pos:line="720" pos:column="30"/></operator> <name pos:line="720" pos:column="31">APR_LOCK_POSIXSEM<pos:position pos:line="720" pos:column="48"/></name></expr>;<pos:position pos:line="720" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="721" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="722" pos:column="1">#<cpp:directive pos:line="722" pos:column="2">endif<pos:position pos:line="722" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="723" pos:column="1">#<cpp:directive pos:line="723" pos:column="2">if<pos:position pos:line="723" pos:column="4"/></cpp:directive> <expr><name pos:line="723" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="723" pos:column="35"/></name></expr></cpp:if>
    <elseif pos:line="724" pos:column="5">else <if pos:line="724" pos:column="10">if <condition pos:line="724" pos:column="13">(<expr><operator pos:line="724" pos:column="14">!<pos:position pos:line="724" pos:column="15"/></operator><call><name pos:line="724" pos:column="15">strcasecmp<pos:position pos:line="724" pos:column="25"/></name><argument_list pos:line="724" pos:column="25">(<argument><expr><name pos:line="724" pos:column="26">arg<pos:position pos:line="724" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="724" pos:column="31">"pthread"<pos:position pos:line="724" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="724" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="724" pos:column="42"/></condition><then pos:line="724" pos:column="42"> <block pos:line="724" pos:column="43">{
        <expr_stmt><expr><name pos:line="725" pos:column="9">ap_accept_lock_mech<pos:position pos:line="725" pos:column="28"/></name> <operator pos:line="725" pos:column="29">=<pos:position pos:line="725" pos:column="30"/></operator> <name pos:line="725" pos:column="31">APR_LOCK_PROC_PTHREAD<pos:position pos:line="725" pos:column="52"/></name></expr>;<pos:position pos:line="725" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="726" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="727" pos:column="1">#<cpp:directive pos:line="727" pos:column="2">endif<pos:position pos:line="727" pos:column="7"/></cpp:directive></cpp:endif>
    <else pos:line="728" pos:column="5">else <block pos:line="728" pos:column="10">{
        <return pos:line="729" pos:column="9">return <expr><call><name pos:line="729" pos:column="16">apr_pstrcat<pos:position pos:line="729" pos:column="27"/></name><argument_list pos:line="729" pos:column="27">(<argument><expr><name><name pos:line="729" pos:column="28">cmd<pos:position pos:line="729" pos:column="31"/></name><operator pos:line="729" pos:column="31">-&gt;<pos:position pos:line="729" pos:column="36"/></operator><name pos:line="729" pos:column="33">pool<pos:position pos:line="729" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="729" pos:column="39">arg<pos:position pos:line="729" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="729" pos:column="44">" is an invalid mutex mechanism; "<pos:position pos:line="729" pos:column="78"/></literal></expr></argument>,
                           <argument><expr><name pos:line="730" pos:column="28">ap_valid_accept_mutex_string<pos:position pos:line="730" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="730" pos:column="58">NULL<pos:position pos:line="730" pos:column="62"/></name></expr></argument>)<pos:position pos:line="730" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="730" pos:column="64"/></return>
    }<pos:position pos:line="731" pos:column="6"/></block></else></if>
    <return pos:line="732" pos:column="5">return <expr><name pos:line="732" pos:column="12">NULL<pos:position pos:line="732" pos:column="16"/></name></expr>;<pos:position pos:line="732" pos:column="17"/></return>
}<pos:position pos:line="733" pos:column="2"/></block>

<cpp:endif pos:line="735" pos:column="1">#<cpp:directive pos:line="735" pos:column="2">endif<pos:position pos:line="735" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="737" pos:column="1">#<cpp:directive pos:line="737" pos:column="2">ifdef<pos:position pos:line="737" pos:column="7"/></cpp:directive> <name pos:line="737" pos:column="8">AP_MPM_WANT_SIGNAL_SERVER<pos:position pos:line="737" pos:column="33"/></name></cpp:ifdef>

<decl_stmt><decl><specifier pos:line="739" pos:column="1">static<pos:position pos:line="739" pos:column="7"/></specifier> <type><specifier pos:line="739" pos:column="8">const<pos:position pos:line="739" pos:column="13"/></specifier> <name pos:line="739" pos:column="14">char<pos:position pos:line="739" pos:column="18"/></name> <modifier pos:line="739" pos:column="19">*<pos:position pos:line="739" pos:column="20"/></modifier></type><name pos:line="739" pos:column="20">dash_k_arg<pos:position pos:line="739" pos:column="30"/></name></decl>;<pos:position pos:line="739" pos:column="31"/></decl_stmt>

<function><specifier pos:line="741" pos:column="1">static<pos:position pos:line="741" pos:column="7"/></specifier> <type><name pos:line="741" pos:column="8">int<pos:position pos:line="741" pos:column="11"/></name></type> <name pos:line="741" pos:column="12">send_signal<pos:position pos:line="741" pos:column="23"/></name><parameter_list pos:line="741" pos:column="23">(<parameter><decl><type><name pos:line="741" pos:column="24">pid_t<pos:position pos:line="741" pos:column="29"/></name></type> <name pos:line="741" pos:column="30">pid<pos:position pos:line="741" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="741" pos:column="35">int<pos:position pos:line="741" pos:column="38"/></name></type> <name pos:line="741" pos:column="39">sig<pos:position pos:line="741" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="741" pos:column="43"/></parameter_list>
<block pos:line="742" pos:column="1">{
    <if pos:line="743" pos:column="5">if <condition pos:line="743" pos:column="8">(<expr><call><name pos:line="743" pos:column="9">kill<pos:position pos:line="743" pos:column="13"/></name><argument_list pos:line="743" pos:column="13">(<argument><expr><name pos:line="743" pos:column="14">pid<pos:position pos:line="743" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="743" pos:column="19">sig<pos:position pos:line="743" pos:column="22"/></name></expr></argument>)<pos:position pos:line="743" pos:column="23"/></argument_list></call> <operator pos:line="743" pos:column="24">&lt;<pos:position pos:line="743" pos:column="28"/></operator> <literal type="number" pos:line="743" pos:column="26">0<pos:position pos:line="743" pos:column="27"/></literal></expr>)<pos:position pos:line="743" pos:column="28"/></condition><then pos:line="743" pos:column="28"> <block pos:line="743" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="744" pos:column="9">ap_log_error<pos:position pos:line="744" pos:column="21"/></name><argument_list pos:line="744" pos:column="21">(<argument><expr><name pos:line="744" pos:column="22">APLOG_MARK<pos:position pos:line="744" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="744" pos:column="34">APLOG_STARTUP<pos:position pos:line="744" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="744" pos:column="49">errno<pos:position pos:line="744" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="744" pos:column="56">NULL<pos:position pos:line="744" pos:column="60"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="745" pos:column="22">"sending signal to server"<pos:position pos:line="745" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="745" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="745" pos:column="50"/></expr_stmt>
        <return pos:line="746" pos:column="9">return <expr><literal type="number" pos:line="746" pos:column="16">1<pos:position pos:line="746" pos:column="17"/></literal></expr>;<pos:position pos:line="746" pos:column="18"/></return>
    }<pos:position pos:line="747" pos:column="6"/></block></then></if>
    <return pos:line="748" pos:column="5">return <expr><literal type="number" pos:line="748" pos:column="12">0<pos:position pos:line="748" pos:column="13"/></literal></expr>;<pos:position pos:line="748" pos:column="14"/></return>
}<pos:position pos:line="749" pos:column="2"/></block></function>

<function><type><name pos:line="751" pos:column="1">int<pos:position pos:line="751" pos:column="4"/></name></type> <name pos:line="751" pos:column="5">ap_signal_server<pos:position pos:line="751" pos:column="21"/></name><parameter_list pos:line="751" pos:column="21">(<parameter><decl><type><name pos:line="751" pos:column="22">int<pos:position pos:line="751" pos:column="25"/></name> <modifier pos:line="751" pos:column="26">*<pos:position pos:line="751" pos:column="27"/></modifier></type><name pos:line="751" pos:column="27">exit_status<pos:position pos:line="751" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="751" pos:column="40">apr_pool_t<pos:position pos:line="751" pos:column="50"/></name> <modifier pos:line="751" pos:column="51">*<pos:position pos:line="751" pos:column="52"/></modifier></type><name pos:line="751" pos:column="52">pconf<pos:position pos:line="751" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="751" pos:column="58"/></parameter_list>
<block pos:line="752" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="753" pos:column="5">apr_status_t<pos:position pos:line="753" pos:column="17"/></name></type> <name pos:line="753" pos:column="18">rv<pos:position pos:line="753" pos:column="20"/></name></decl>;<pos:position pos:line="753" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="754" pos:column="5">pid_t<pos:position pos:line="754" pos:column="10"/></name></type> <name pos:line="754" pos:column="11">otherpid<pos:position pos:line="754" pos:column="19"/></name></decl>;<pos:position pos:line="754" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="755" pos:column="5">int<pos:position pos:line="755" pos:column="8"/></name></type> <name pos:line="755" pos:column="9">running<pos:position pos:line="755" pos:column="16"/></name> <init pos:line="755" pos:column="17">= <expr><literal type="number" pos:line="755" pos:column="19">0<pos:position pos:line="755" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="755" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="756" pos:column="5">int<pos:position pos:line="756" pos:column="8"/></name></type> <name pos:line="756" pos:column="9">have_pid_file<pos:position pos:line="756" pos:column="22"/></name> <init pos:line="756" pos:column="23">= <expr><literal type="number" pos:line="756" pos:column="25">0<pos:position pos:line="756" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="756" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="757" pos:column="5">const<pos:position pos:line="757" pos:column="10"/></specifier> <name pos:line="757" pos:column="11">char<pos:position pos:line="757" pos:column="15"/></name> <modifier pos:line="757" pos:column="16">*<pos:position pos:line="757" pos:column="17"/></modifier></type><name pos:line="757" pos:column="17">status<pos:position pos:line="757" pos:column="23"/></name></decl>;<pos:position pos:line="757" pos:column="24"/></decl_stmt>
    
    <expr_stmt><expr><operator pos:line="759" pos:column="5">*<pos:position pos:line="759" pos:column="6"/></operator><name pos:line="759" pos:column="6">exit_status<pos:position pos:line="759" pos:column="17"/></name> <operator pos:line="759" pos:column="18">=<pos:position pos:line="759" pos:column="19"/></operator> <literal type="number" pos:line="759" pos:column="20">0<pos:position pos:line="759" pos:column="21"/></literal></expr>;<pos:position pos:line="759" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="761" pos:column="5">rv<pos:position pos:line="761" pos:column="7"/></name> <operator pos:line="761" pos:column="8">=<pos:position pos:line="761" pos:column="9"/></operator> <call><name pos:line="761" pos:column="10">ap_read_pid<pos:position pos:line="761" pos:column="21"/></name><argument_list pos:line="761" pos:column="21">(<argument><expr><name pos:line="761" pos:column="22">pconf<pos:position pos:line="761" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="761" pos:column="29">ap_pid_fname<pos:position pos:line="761" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="761" pos:column="43">&amp;<pos:position pos:line="761" pos:column="48"/></operator><name pos:line="761" pos:column="44">otherpid<pos:position pos:line="761" pos:column="52"/></name></expr></argument>)<pos:position pos:line="761" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="761" pos:column="54"/></expr_stmt>
    <if pos:line="762" pos:column="5">if <condition pos:line="762" pos:column="8">(<expr><name pos:line="762" pos:column="9">rv<pos:position pos:line="762" pos:column="11"/></name> <operator pos:line="762" pos:column="12">!=<pos:position pos:line="762" pos:column="14"/></operator> <name pos:line="762" pos:column="15">APR_SUCCESS<pos:position pos:line="762" pos:column="26"/></name></expr>)<pos:position pos:line="762" pos:column="27"/></condition><then pos:line="762" pos:column="27"> <block pos:line="762" pos:column="28">{
        <if pos:line="763" pos:column="9">if <condition pos:line="763" pos:column="12">(<expr><name pos:line="763" pos:column="13">rv<pos:position pos:line="763" pos:column="15"/></name> <operator pos:line="763" pos:column="16">!=<pos:position pos:line="763" pos:column="18"/></operator> <name pos:line="763" pos:column="19">APR_ENOENT<pos:position pos:line="763" pos:column="29"/></name></expr>)<pos:position pos:line="763" pos:column="30"/></condition><then pos:line="763" pos:column="30"> <block pos:line="763" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="764" pos:column="13">ap_log_error<pos:position pos:line="764" pos:column="25"/></name><argument_list pos:line="764" pos:column="25">(<argument><expr><name pos:line="764" pos:column="26">APLOG_MARK<pos:position pos:line="764" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="764" pos:column="38">APLOG_STARTUP<pos:position pos:line="764" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="764" pos:column="53">rv<pos:position pos:line="764" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="764" pos:column="57">NULL<pos:position pos:line="764" pos:column="61"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="765" pos:column="26">"Error retrieving pid file %s"<pos:position pos:line="765" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="765" pos:column="58">ap_pid_fname<pos:position pos:line="765" pos:column="70"/></name></expr></argument>)<pos:position pos:line="765" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="765" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="766" pos:column="13">*<pos:position pos:line="766" pos:column="14"/></operator><name pos:line="766" pos:column="14">exit_status<pos:position pos:line="766" pos:column="25"/></name> <operator pos:line="766" pos:column="26">=<pos:position pos:line="766" pos:column="27"/></operator> <literal type="number" pos:line="766" pos:column="28">1<pos:position pos:line="766" pos:column="29"/></literal></expr>;<pos:position pos:line="766" pos:column="30"/></expr_stmt>
            <return pos:line="767" pos:column="13">return <expr><literal type="number" pos:line="767" pos:column="20">1<pos:position pos:line="767" pos:column="21"/></literal></expr>;<pos:position pos:line="767" pos:column="22"/></return>
        }<pos:position pos:line="768" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="769" pos:column="9">status<pos:position pos:line="769" pos:column="15"/></name> <operator pos:line="769" pos:column="16">=<pos:position pos:line="769" pos:column="17"/></operator> <literal type="string" pos:line="769" pos:column="18">"httpd (no pid file) not running"<pos:position pos:line="769" pos:column="51"/></literal></expr>;<pos:position pos:line="769" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="770" pos:column="6"/></block></then>
    <else pos:line="771" pos:column="5">else <block pos:line="771" pos:column="10">{
        <expr_stmt><expr><name pos:line="772" pos:column="9">have_pid_file<pos:position pos:line="772" pos:column="22"/></name> <operator pos:line="772" pos:column="23">=<pos:position pos:line="772" pos:column="24"/></operator> <literal type="number" pos:line="772" pos:column="25">1<pos:position pos:line="772" pos:column="26"/></literal></expr>;<pos:position pos:line="772" pos:column="27"/></expr_stmt>
        <if pos:line="773" pos:column="9">if <condition pos:line="773" pos:column="12">(<expr><call><name pos:line="773" pos:column="13">kill<pos:position pos:line="773" pos:column="17"/></name><argument_list pos:line="773" pos:column="17">(<argument><expr><name pos:line="773" pos:column="18">otherpid<pos:position pos:line="773" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="773" pos:column="28">0<pos:position pos:line="773" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="773" pos:column="30"/></argument_list></call> <operator pos:line="773" pos:column="31">==<pos:position pos:line="773" pos:column="33"/></operator> <literal type="number" pos:line="773" pos:column="34">0<pos:position pos:line="773" pos:column="35"/></literal></expr>)<pos:position pos:line="773" pos:column="36"/></condition><then pos:line="773" pos:column="36"> <block pos:line="773" pos:column="37">{
            <expr_stmt><expr><name pos:line="774" pos:column="13">running<pos:position pos:line="774" pos:column="20"/></name> <operator pos:line="774" pos:column="21">=<pos:position pos:line="774" pos:column="22"/></operator> <literal type="number" pos:line="774" pos:column="23">1<pos:position pos:line="774" pos:column="24"/></literal></expr>;<pos:position pos:line="774" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="775" pos:column="13">status<pos:position pos:line="775" pos:column="19"/></name> <operator pos:line="775" pos:column="20">=<pos:position pos:line="775" pos:column="21"/></operator> <call><name pos:line="775" pos:column="22">apr_psprintf<pos:position pos:line="775" pos:column="34"/></name><argument_list pos:line="775" pos:column="34">(<argument><expr><name pos:line="775" pos:column="35">pconf<pos:position pos:line="775" pos:column="40"/></name></expr></argument>, 
                                  <argument><expr><literal type="string" pos:line="776" pos:column="35">"httpd (pid %"<pos:position pos:line="776" pos:column="49"/></literal> <name pos:line="776" pos:column="50">APR_PID_T_FMT<pos:position pos:line="776" pos:column="63"/></name> <literal type="string" pos:line="776" pos:column="64">") already "<pos:position pos:line="776" pos:column="76"/></literal>
                                  <literal type="string" pos:line="777" pos:column="35">"running"<pos:position pos:line="777" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="777" pos:column="46">otherpid<pos:position pos:line="777" pos:column="54"/></name></expr></argument>)<pos:position pos:line="777" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="777" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="778" pos:column="10"/></block></then>
        <else pos:line="779" pos:column="9">else <block pos:line="779" pos:column="14">{
            <expr_stmt><expr><name pos:line="780" pos:column="13">status<pos:position pos:line="780" pos:column="19"/></name> <operator pos:line="780" pos:column="20">=<pos:position pos:line="780" pos:column="21"/></operator> <call><name pos:line="780" pos:column="22">apr_psprintf<pos:position pos:line="780" pos:column="34"/></name><argument_list pos:line="780" pos:column="34">(<argument><expr><name pos:line="780" pos:column="35">pconf<pos:position pos:line="780" pos:column="40"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="781" pos:column="35">"httpd (pid %"<pos:position pos:line="781" pos:column="49"/></literal> <name pos:line="781" pos:column="50">APR_PID_T_FMT<pos:position pos:line="781" pos:column="63"/></name> <literal type="string" pos:line="781" pos:column="64">"?) not running"<pos:position pos:line="781" pos:column="80"/></literal></expr></argument>,
                                  <argument><expr><name pos:line="782" pos:column="35">otherpid<pos:position pos:line="782" pos:column="43"/></name></expr></argument>)<pos:position pos:line="782" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="782" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="783" pos:column="10"/></block></else></if>
    }<pos:position pos:line="784" pos:column="6"/></block></else></if>

    <if pos:line="786" pos:column="5">if <condition pos:line="786" pos:column="8">(<expr><operator pos:line="786" pos:column="9">!<pos:position pos:line="786" pos:column="10"/></operator><call><name pos:line="786" pos:column="10">strcmp<pos:position pos:line="786" pos:column="16"/></name><argument_list pos:line="786" pos:column="16">(<argument><expr><name pos:line="786" pos:column="17">dash_k_arg<pos:position pos:line="786" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="786" pos:column="29">"start"<pos:position pos:line="786" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="786" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="786" pos:column="38"/></condition><then pos:line="786" pos:column="38"> <block pos:line="786" pos:column="39">{
        <if pos:line="787" pos:column="9">if <condition pos:line="787" pos:column="12">(<expr><name pos:line="787" pos:column="13">running<pos:position pos:line="787" pos:column="20"/></name></expr>)<pos:position pos:line="787" pos:column="21"/></condition><then pos:line="787" pos:column="21"> <block pos:line="787" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="788" pos:column="13">printf<pos:position pos:line="788" pos:column="19"/></name><argument_list pos:line="788" pos:column="19">(<argument><expr><literal type="string" pos:line="788" pos:column="20">"%s\n"<pos:position pos:line="788" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="788" pos:column="28">status<pos:position pos:line="788" pos:column="34"/></name></expr></argument>)<pos:position pos:line="788" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="788" pos:column="36"/></expr_stmt>
            <return pos:line="789" pos:column="13">return <expr><literal type="number" pos:line="789" pos:column="20">1<pos:position pos:line="789" pos:column="21"/></literal></expr>;<pos:position pos:line="789" pos:column="22"/></return>
        }<pos:position pos:line="790" pos:column="10"/></block></then></if>
    }<pos:position pos:line="791" pos:column="6"/></block></then></if>

    <if pos:line="793" pos:column="5">if <condition pos:line="793" pos:column="8">(<expr><operator pos:line="793" pos:column="9">!<pos:position pos:line="793" pos:column="10"/></operator><call><name pos:line="793" pos:column="10">strcmp<pos:position pos:line="793" pos:column="16"/></name><argument_list pos:line="793" pos:column="16">(<argument><expr><name pos:line="793" pos:column="17">dash_k_arg<pos:position pos:line="793" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="793" pos:column="29">"stop"<pos:position pos:line="793" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="793" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="793" pos:column="37"/></condition><then pos:line="793" pos:column="37"> <block pos:line="793" pos:column="38">{
        <if pos:line="794" pos:column="9">if <condition pos:line="794" pos:column="12">(<expr><operator pos:line="794" pos:column="13">!<pos:position pos:line="794" pos:column="14"/></operator><name pos:line="794" pos:column="14">running<pos:position pos:line="794" pos:column="21"/></name></expr>)<pos:position pos:line="794" pos:column="22"/></condition><then pos:line="794" pos:column="22"> <block pos:line="794" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="795" pos:column="13">printf<pos:position pos:line="795" pos:column="19"/></name><argument_list pos:line="795" pos:column="19">(<argument><expr><literal type="string" pos:line="795" pos:column="20">"%s\n"<pos:position pos:line="795" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="795" pos:column="28">status<pos:position pos:line="795" pos:column="34"/></name></expr></argument>)<pos:position pos:line="795" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="796" pos:column="10"/></block></then>
        <else pos:line="797" pos:column="9">else <block pos:line="797" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="798" pos:column="13">send_signal<pos:position pos:line="798" pos:column="24"/></name><argument_list pos:line="798" pos:column="24">(<argument><expr><name pos:line="798" pos:column="25">otherpid<pos:position pos:line="798" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="798" pos:column="35">SIGTERM<pos:position pos:line="798" pos:column="42"/></name></expr></argument>)<pos:position pos:line="798" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="798" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="799" pos:column="10"/></block></else></if>
        <return pos:line="800" pos:column="9">return <expr><literal type="number" pos:line="800" pos:column="16">1<pos:position pos:line="800" pos:column="17"/></literal></expr>;<pos:position pos:line="800" pos:column="18"/></return>
    }<pos:position pos:line="801" pos:column="6"/></block></then></if>

    <if pos:line="803" pos:column="5">if <condition pos:line="803" pos:column="8">(<expr><operator pos:line="803" pos:column="9">!<pos:position pos:line="803" pos:column="10"/></operator><call><name pos:line="803" pos:column="10">strcmp<pos:position pos:line="803" pos:column="16"/></name><argument_list pos:line="803" pos:column="16">(<argument><expr><name pos:line="803" pos:column="17">dash_k_arg<pos:position pos:line="803" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="803" pos:column="29">"restart"<pos:position pos:line="803" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="803" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="803" pos:column="40"/></condition><then pos:line="803" pos:column="40"> <block pos:line="803" pos:column="41">{
        <if pos:line="804" pos:column="9">if <condition pos:line="804" pos:column="12">(<expr><operator pos:line="804" pos:column="13">!<pos:position pos:line="804" pos:column="14"/></operator><name pos:line="804" pos:column="14">running<pos:position pos:line="804" pos:column="21"/></name></expr>)<pos:position pos:line="804" pos:column="22"/></condition><then pos:line="804" pos:column="22"> <block pos:line="804" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="805" pos:column="13">printf<pos:position pos:line="805" pos:column="19"/></name><argument_list pos:line="805" pos:column="19">(<argument><expr><literal type="string" pos:line="805" pos:column="20">"httpd not running, trying to start\n"<pos:position pos:line="805" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="805" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="805" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="806" pos:column="10"/></block></then>
        <else pos:line="807" pos:column="9">else <block pos:line="807" pos:column="14">{
            <expr_stmt><expr><operator pos:line="808" pos:column="13">*<pos:position pos:line="808" pos:column="14"/></operator><name pos:line="808" pos:column="14">exit_status<pos:position pos:line="808" pos:column="25"/></name> <operator pos:line="808" pos:column="26">=<pos:position pos:line="808" pos:column="27"/></operator> <call><name pos:line="808" pos:column="28">send_signal<pos:position pos:line="808" pos:column="39"/></name><argument_list pos:line="808" pos:column="39">(<argument><expr><name pos:line="808" pos:column="40">otherpid<pos:position pos:line="808" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="808" pos:column="50">SIGHUP<pos:position pos:line="808" pos:column="56"/></name></expr></argument>)<pos:position pos:line="808" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="808" pos:column="58"/></expr_stmt>
            <return pos:line="809" pos:column="13">return <expr><literal type="number" pos:line="809" pos:column="20">1<pos:position pos:line="809" pos:column="21"/></literal></expr>;<pos:position pos:line="809" pos:column="22"/></return>
        }<pos:position pos:line="810" pos:column="10"/></block></else></if>
    }<pos:position pos:line="811" pos:column="6"/></block></then></if>

    <if pos:line="813" pos:column="5">if <condition pos:line="813" pos:column="8">(<expr><operator pos:line="813" pos:column="9">!<pos:position pos:line="813" pos:column="10"/></operator><call><name pos:line="813" pos:column="10">strcmp<pos:position pos:line="813" pos:column="16"/></name><argument_list pos:line="813" pos:column="16">(<argument><expr><name pos:line="813" pos:column="17">dash_k_arg<pos:position pos:line="813" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="813" pos:column="29">"graceful"<pos:position pos:line="813" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="813" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="813" pos:column="41"/></condition><then pos:line="813" pos:column="41"> <block pos:line="813" pos:column="42">{
        <if pos:line="814" pos:column="9">if <condition pos:line="814" pos:column="12">(<expr><operator pos:line="814" pos:column="13">!<pos:position pos:line="814" pos:column="14"/></operator><name pos:line="814" pos:column="14">running<pos:position pos:line="814" pos:column="21"/></name></expr>)<pos:position pos:line="814" pos:column="22"/></condition><then pos:line="814" pos:column="22"> <block pos:line="814" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="815" pos:column="13">printf<pos:position pos:line="815" pos:column="19"/></name><argument_list pos:line="815" pos:column="19">(<argument><expr><literal type="string" pos:line="815" pos:column="20">"httpd not running, trying to start\n"<pos:position pos:line="815" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="815" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="815" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="816" pos:column="10"/></block></then>
        <else pos:line="817" pos:column="9">else <block pos:line="817" pos:column="14">{
            <expr_stmt><expr><operator pos:line="818" pos:column="13">*<pos:position pos:line="818" pos:column="14"/></operator><name pos:line="818" pos:column="14">exit_status<pos:position pos:line="818" pos:column="25"/></name> <operator pos:line="818" pos:column="26">=<pos:position pos:line="818" pos:column="27"/></operator> <call><name pos:line="818" pos:column="28">send_signal<pos:position pos:line="818" pos:column="39"/></name><argument_list pos:line="818" pos:column="39">(<argument><expr><name pos:line="818" pos:column="40">otherpid<pos:position pos:line="818" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="818" pos:column="50">SIGUSR1<pos:position pos:line="818" pos:column="57"/></name></expr></argument>)<pos:position pos:line="818" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="818" pos:column="59"/></expr_stmt>
            <return pos:line="819" pos:column="13">return <expr><literal type="number" pos:line="819" pos:column="20">1<pos:position pos:line="819" pos:column="21"/></literal></expr>;<pos:position pos:line="819" pos:column="22"/></return>
        }<pos:position pos:line="820" pos:column="10"/></block></else></if>
    }<pos:position pos:line="821" pos:column="6"/></block></then></if>

    <return pos:line="823" pos:column="5">return <expr><literal type="number" pos:line="823" pos:column="12">0<pos:position pos:line="823" pos:column="13"/></literal></expr>;<pos:position pos:line="823" pos:column="14"/></return>
}<pos:position pos:line="824" pos:column="2"/></block></function>

<function><type><name pos:line="826" pos:column="1">void<pos:position pos:line="826" pos:column="5"/></name></type> <name pos:line="826" pos:column="6">ap_mpm_rewrite_args<pos:position pos:line="826" pos:column="25"/></name><parameter_list pos:line="826" pos:column="25">(<parameter><decl><type><name pos:line="826" pos:column="26">process_rec<pos:position pos:line="826" pos:column="37"/></name> <modifier pos:line="826" pos:column="38">*<pos:position pos:line="826" pos:column="39"/></modifier></type><name pos:line="826" pos:column="39">process<pos:position pos:line="826" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="826" pos:column="47"/></parameter_list>
<block pos:line="827" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="828" pos:column="5">apr_array_header_t<pos:position pos:line="828" pos:column="23"/></name> <modifier pos:line="828" pos:column="24">*<pos:position pos:line="828" pos:column="25"/></modifier></type><name pos:line="828" pos:column="25">mpm_new_argv<pos:position pos:line="828" pos:column="37"/></name></decl>;<pos:position pos:line="828" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="829" pos:column="5">apr_status_t<pos:position pos:line="829" pos:column="17"/></name></type> <name pos:line="829" pos:column="18">rv<pos:position pos:line="829" pos:column="20"/></name></decl>;<pos:position pos:line="829" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="830" pos:column="5">apr_getopt_t<pos:position pos:line="830" pos:column="17"/></name> <modifier pos:line="830" pos:column="18">*<pos:position pos:line="830" pos:column="19"/></modifier></type><name pos:line="830" pos:column="19">opt<pos:position pos:line="830" pos:column="22"/></name></decl>;<pos:position pos:line="830" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="831" pos:column="5">char<pos:position pos:line="831" pos:column="9"/></name></type> <name><name pos:line="831" pos:column="10">optbuf<pos:position pos:line="831" pos:column="16"/></name><index pos:line="831" pos:column="16">[<expr><literal type="number" pos:line="831" pos:column="17">3<pos:position pos:line="831" pos:column="18"/></literal></expr>]<pos:position pos:line="831" pos:column="19"/></index></name></decl>;<pos:position pos:line="831" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="832" pos:column="5">const<pos:position pos:line="832" pos:column="10"/></specifier> <name pos:line="832" pos:column="11">char<pos:position pos:line="832" pos:column="15"/></name> <modifier pos:line="832" pos:column="16">*<pos:position pos:line="832" pos:column="17"/></modifier></type><name pos:line="832" pos:column="17">optarg<pos:position pos:line="832" pos:column="23"/></name></decl>;<pos:position pos:line="832" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="833" pos:column="5">int<pos:position pos:line="833" pos:column="8"/></name></type> <name pos:line="833" pos:column="9">fixed_args<pos:position pos:line="833" pos:column="19"/></name></decl>;<pos:position pos:line="833" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="835" pos:column="5">mpm_new_argv<pos:position pos:line="835" pos:column="17"/></name> <operator pos:line="835" pos:column="18">=<pos:position pos:line="835" pos:column="19"/></operator> <call><name pos:line="835" pos:column="20">apr_array_make<pos:position pos:line="835" pos:column="34"/></name><argument_list pos:line="835" pos:column="34">(<argument><expr><name><name pos:line="835" pos:column="35">process<pos:position pos:line="835" pos:column="42"/></name><operator pos:line="835" pos:column="42">-&gt;<pos:position pos:line="835" pos:column="47"/></operator><name pos:line="835" pos:column="44">pool<pos:position pos:line="835" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="835" pos:column="50">process<pos:position pos:line="835" pos:column="57"/></name><operator pos:line="835" pos:column="57">-&gt;<pos:position pos:line="835" pos:column="62"/></operator><name pos:line="835" pos:column="59">argc<pos:position pos:line="835" pos:column="63"/></name></name></expr></argument>,
                                  <argument><expr><sizeof pos:line="836" pos:column="35">sizeof<argument_list pos:line="836" pos:column="41">(<argument><expr><specifier pos:line="836" pos:column="42">const<pos:position pos:line="836" pos:column="47"/></specifier> <name pos:line="836" pos:column="48">char<pos:position pos:line="836" pos:column="52"/></name> <operator pos:line="836" pos:column="53">*<pos:position pos:line="836" pos:column="54"/></operator><operator pos:line="836" pos:column="54">*<pos:position pos:line="836" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="836" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="836" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="836" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="837" pos:column="5">*<pos:position pos:line="837" pos:column="6"/></operator><operator pos:line="837" pos:column="6">(<pos:position pos:line="837" pos:column="7"/></operator><specifier pos:line="837" pos:column="7">const<pos:position pos:line="837" pos:column="12"/></specifier> <name pos:line="837" pos:column="13">char<pos:position pos:line="837" pos:column="17"/></name> <operator pos:line="837" pos:column="18">*<pos:position pos:line="837" pos:column="19"/></operator><operator pos:line="837" pos:column="19">*<pos:position pos:line="837" pos:column="20"/></operator><operator pos:line="837" pos:column="20">)<pos:position pos:line="837" pos:column="21"/></operator><call><name pos:line="837" pos:column="21">apr_array_push<pos:position pos:line="837" pos:column="35"/></name><argument_list pos:line="837" pos:column="35">(<argument><expr><name pos:line="837" pos:column="36">mpm_new_argv<pos:position pos:line="837" pos:column="48"/></name></expr></argument>)<pos:position pos:line="837" pos:column="49"/></argument_list></call> <operator pos:line="837" pos:column="50">=<pos:position pos:line="837" pos:column="51"/></operator> <name><name pos:line="837" pos:column="52">process<pos:position pos:line="837" pos:column="59"/></name><operator pos:line="837" pos:column="59">-&gt;<pos:position pos:line="837" pos:column="64"/></operator><name pos:line="837" pos:column="61">argv<pos:position pos:line="837" pos:column="65"/></name><index pos:line="837" pos:column="65">[<expr><literal type="number" pos:line="837" pos:column="66">0<pos:position pos:line="837" pos:column="67"/></literal></expr>]<pos:position pos:line="837" pos:column="68"/></index></name></expr>;<pos:position pos:line="837" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="838" pos:column="5">fixed_args<pos:position pos:line="838" pos:column="15"/></name> <operator pos:line="838" pos:column="16">=<pos:position pos:line="838" pos:column="17"/></operator> <name><name pos:line="838" pos:column="18">mpm_new_argv<pos:position pos:line="838" pos:column="30"/></name><operator pos:line="838" pos:column="30">-&gt;<pos:position pos:line="838" pos:column="35"/></operator><name pos:line="838" pos:column="32">nelts<pos:position pos:line="838" pos:column="37"/></name></name></expr>;<pos:position pos:line="838" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="839" pos:column="5">apr_getopt_init<pos:position pos:line="839" pos:column="20"/></name><argument_list pos:line="839" pos:column="20">(<argument><expr><operator pos:line="839" pos:column="21">&amp;<pos:position pos:line="839" pos:column="26"/></operator><name pos:line="839" pos:column="22">opt<pos:position pos:line="839" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="839" pos:column="27">process<pos:position pos:line="839" pos:column="34"/></name><operator pos:line="839" pos:column="34">-&gt;<pos:position pos:line="839" pos:column="39"/></operator><name pos:line="839" pos:column="36">pool<pos:position pos:line="839" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="839" pos:column="42">process<pos:position pos:line="839" pos:column="49"/></name><operator pos:line="839" pos:column="49">-&gt;<pos:position pos:line="839" pos:column="54"/></operator><name pos:line="839" pos:column="51">argc<pos:position pos:line="839" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="839" pos:column="57">process<pos:position pos:line="839" pos:column="64"/></name><operator pos:line="839" pos:column="64">-&gt;<pos:position pos:line="839" pos:column="69"/></operator><name pos:line="839" pos:column="66">argv<pos:position pos:line="839" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="839" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="839" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="840" pos:column="5">opt<pos:position pos:line="840" pos:column="8"/></name><operator pos:line="840" pos:column="8">-&gt;<pos:position pos:line="840" pos:column="13"/></operator><name pos:line="840" pos:column="10">errfn<pos:position pos:line="840" pos:column="15"/></name></name> <operator pos:line="840" pos:column="16">=<pos:position pos:line="840" pos:column="17"/></operator> <name pos:line="840" pos:column="18">NULL<pos:position pos:line="840" pos:column="22"/></name></expr>;<pos:position pos:line="840" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="841" pos:column="5">optbuf<pos:position pos:line="841" pos:column="11"/></name><index pos:line="841" pos:column="11">[<expr><literal type="number" pos:line="841" pos:column="12">0<pos:position pos:line="841" pos:column="13"/></literal></expr>]<pos:position pos:line="841" pos:column="14"/></index></name> <operator pos:line="841" pos:column="15">=<pos:position pos:line="841" pos:column="16"/></operator> <literal type="char" pos:line="841" pos:column="17">'-'<pos:position pos:line="841" pos:column="20"/></literal></expr>;<pos:position pos:line="841" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="842" pos:column="5">/* option char returned by apr_getopt() will be stored in optbuf[1] */</comment>
    <expr_stmt><expr><name><name pos:line="843" pos:column="5">optbuf<pos:position pos:line="843" pos:column="11"/></name><index pos:line="843" pos:column="11">[<expr><literal type="number" pos:line="843" pos:column="12">2<pos:position pos:line="843" pos:column="13"/></literal></expr>]<pos:position pos:line="843" pos:column="14"/></index></name> <operator pos:line="843" pos:column="15">=<pos:position pos:line="843" pos:column="16"/></operator> <literal type="char" pos:line="843" pos:column="17">'\0'<pos:position pos:line="843" pos:column="21"/></literal></expr>;<pos:position pos:line="843" pos:column="22"/></expr_stmt>
    <while pos:line="844" pos:column="5">while <condition pos:line="844" pos:column="11">(<expr><operator pos:line="844" pos:column="12">(<pos:position pos:line="844" pos:column="13"/></operator><name pos:line="844" pos:column="13">rv<pos:position pos:line="844" pos:column="15"/></name> <operator pos:line="844" pos:column="16">=<pos:position pos:line="844" pos:column="17"/></operator> <call><name pos:line="844" pos:column="18">apr_getopt<pos:position pos:line="844" pos:column="28"/></name><argument_list pos:line="844" pos:column="28">(<argument><expr><name pos:line="844" pos:column="29">opt<pos:position pos:line="844" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="844" pos:column="34">"k:"<pos:position pos:line="844" pos:column="38"/></literal> <name pos:line="844" pos:column="39">AP_SERVER_BASEARGS<pos:position pos:line="844" pos:column="57"/></name></expr></argument>,
                            <argument><expr><name pos:line="845" pos:column="29">optbuf<pos:position pos:line="845" pos:column="35"/></name> <operator pos:line="845" pos:column="36">+<pos:position pos:line="845" pos:column="37"/></operator> <literal type="number" pos:line="845" pos:column="38">1<pos:position pos:line="845" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="845" pos:column="41">&amp;<pos:position pos:line="845" pos:column="46"/></operator><name pos:line="845" pos:column="42">optarg<pos:position pos:line="845" pos:column="48"/></name></expr></argument>)<pos:position pos:line="845" pos:column="49"/></argument_list></call><operator pos:line="845" pos:column="49">)<pos:position pos:line="845" pos:column="50"/></operator> <operator pos:line="845" pos:column="51">==<pos:position pos:line="845" pos:column="53"/></operator> <name pos:line="845" pos:column="54">APR_SUCCESS<pos:position pos:line="845" pos:column="65"/></name></expr>)<pos:position pos:line="845" pos:column="66"/></condition> <block pos:line="845" pos:column="67">{
        <switch pos:line="846" pos:column="9">switch<condition pos:line="846" pos:column="15">(<expr><name><name pos:line="846" pos:column="16">optbuf<pos:position pos:line="846" pos:column="22"/></name><index pos:line="846" pos:column="22">[<expr><literal type="number" pos:line="846" pos:column="23">1<pos:position pos:line="846" pos:column="24"/></literal></expr>]<pos:position pos:line="846" pos:column="25"/></index></name></expr>)<pos:position pos:line="846" pos:column="26"/></condition> <block pos:line="846" pos:column="27">{
        <case pos:line="847" pos:column="9">case <expr><literal type="char" pos:line="847" pos:column="14">'k'<pos:position pos:line="847" pos:column="17"/></literal></expr>:<pos:position pos:line="847" pos:column="18"/></case>
            <if pos:line="848" pos:column="13">if <condition pos:line="848" pos:column="16">(<expr><operator pos:line="848" pos:column="17">!<pos:position pos:line="848" pos:column="18"/></operator><name pos:line="848" pos:column="18">dash_k_arg<pos:position pos:line="848" pos:column="28"/></name></expr>)<pos:position pos:line="848" pos:column="29"/></condition><then pos:line="848" pos:column="29"> <block pos:line="848" pos:column="30">{
                <if pos:line="849" pos:column="17">if <condition pos:line="849" pos:column="20">(<expr><operator pos:line="849" pos:column="21">!<pos:position pos:line="849" pos:column="22"/></operator><call><name pos:line="849" pos:column="22">strcmp<pos:position pos:line="849" pos:column="28"/></name><argument_list pos:line="849" pos:column="28">(<argument><expr><name pos:line="849" pos:column="29">optarg<pos:position pos:line="849" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="849" pos:column="37">"start"<pos:position pos:line="849" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="849" pos:column="45"/></argument_list></call> <operator pos:line="849" pos:column="46">||<pos:position pos:line="849" pos:column="48"/></operator> <operator pos:line="849" pos:column="49">!<pos:position pos:line="849" pos:column="50"/></operator><call><name pos:line="849" pos:column="50">strcmp<pos:position pos:line="849" pos:column="56"/></name><argument_list pos:line="849" pos:column="56">(<argument><expr><name pos:line="849" pos:column="57">optarg<pos:position pos:line="849" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="849" pos:column="65">"stop"<pos:position pos:line="849" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="849" pos:column="72"/></argument_list></call> <operator pos:line="849" pos:column="73">||<pos:position pos:line="849" pos:column="75"/></operator>
                    <operator pos:line="850" pos:column="21">!<pos:position pos:line="850" pos:column="22"/></operator><call><name pos:line="850" pos:column="22">strcmp<pos:position pos:line="850" pos:column="28"/></name><argument_list pos:line="850" pos:column="28">(<argument><expr><name pos:line="850" pos:column="29">optarg<pos:position pos:line="850" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="850" pos:column="37">"restart"<pos:position pos:line="850" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="850" pos:column="47"/></argument_list></call> <operator pos:line="850" pos:column="48">||<pos:position pos:line="850" pos:column="50"/></operator> <operator pos:line="850" pos:column="51">!<pos:position pos:line="850" pos:column="52"/></operator><call><name pos:line="850" pos:column="52">strcmp<pos:position pos:line="850" pos:column="58"/></name><argument_list pos:line="850" pos:column="58">(<argument><expr><name pos:line="850" pos:column="59">optarg<pos:position pos:line="850" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="850" pos:column="67">"graceful"<pos:position pos:line="850" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="850" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="850" pos:column="79"/></condition><then pos:line="850" pos:column="79"> <block pos:line="850" pos:column="80">{
                    <expr_stmt><expr><name pos:line="851" pos:column="21">dash_k_arg<pos:position pos:line="851" pos:column="31"/></name> <operator pos:line="851" pos:column="32">=<pos:position pos:line="851" pos:column="33"/></operator> <name pos:line="851" pos:column="34">optarg<pos:position pos:line="851" pos:column="40"/></name></expr>;<pos:position pos:line="851" pos:column="41"/></expr_stmt>
                    <break pos:line="852" pos:column="21">break;<pos:position pos:line="852" pos:column="27"/></break>
                }<pos:position pos:line="853" pos:column="18"/></block></then></if>
            }<pos:position pos:line="854" pos:column="14"/></block></then></if>
        <default pos:line="855" pos:column="9">default:<pos:position pos:line="855" pos:column="17"/></default>
            <expr_stmt><expr><operator pos:line="856" pos:column="13">*<pos:position pos:line="856" pos:column="14"/></operator><operator pos:line="856" pos:column="14">(<pos:position pos:line="856" pos:column="15"/></operator><specifier pos:line="856" pos:column="15">const<pos:position pos:line="856" pos:column="20"/></specifier> <name pos:line="856" pos:column="21">char<pos:position pos:line="856" pos:column="25"/></name> <operator pos:line="856" pos:column="26">*<pos:position pos:line="856" pos:column="27"/></operator><operator pos:line="856" pos:column="27">*<pos:position pos:line="856" pos:column="28"/></operator><operator pos:line="856" pos:column="28">)<pos:position pos:line="856" pos:column="29"/></operator><call><name pos:line="856" pos:column="29">apr_array_push<pos:position pos:line="856" pos:column="43"/></name><argument_list pos:line="856" pos:column="43">(<argument><expr><name pos:line="856" pos:column="44">mpm_new_argv<pos:position pos:line="856" pos:column="56"/></name></expr></argument>)<pos:position pos:line="856" pos:column="57"/></argument_list></call> <operator pos:line="856" pos:column="58">=<pos:position pos:line="856" pos:column="59"/></operator>
                <call><name pos:line="857" pos:column="17">apr_pstrdup<pos:position pos:line="857" pos:column="28"/></name><argument_list pos:line="857" pos:column="28">(<argument><expr><name><name pos:line="857" pos:column="29">process<pos:position pos:line="857" pos:column="36"/></name><operator pos:line="857" pos:column="36">-&gt;<pos:position pos:line="857" pos:column="41"/></operator><name pos:line="857" pos:column="38">pool<pos:position pos:line="857" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="857" pos:column="44">optbuf<pos:position pos:line="857" pos:column="50"/></name></expr></argument>)<pos:position pos:line="857" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="857" pos:column="52"/></expr_stmt>
            <if pos:line="858" pos:column="13">if <condition pos:line="858" pos:column="16">(<expr><name pos:line="858" pos:column="17">optarg<pos:position pos:line="858" pos:column="23"/></name></expr>)<pos:position pos:line="858" pos:column="24"/></condition><then pos:line="858" pos:column="24"> <block pos:line="858" pos:column="25">{
                <expr_stmt><expr><operator pos:line="859" pos:column="17">*<pos:position pos:line="859" pos:column="18"/></operator><operator pos:line="859" pos:column="18">(<pos:position pos:line="859" pos:column="19"/></operator><specifier pos:line="859" pos:column="19">const<pos:position pos:line="859" pos:column="24"/></specifier> <name pos:line="859" pos:column="25">char<pos:position pos:line="859" pos:column="29"/></name> <operator pos:line="859" pos:column="30">*<pos:position pos:line="859" pos:column="31"/></operator><operator pos:line="859" pos:column="31">*<pos:position pos:line="859" pos:column="32"/></operator><operator pos:line="859" pos:column="32">)<pos:position pos:line="859" pos:column="33"/></operator><call><name pos:line="859" pos:column="33">apr_array_push<pos:position pos:line="859" pos:column="47"/></name><argument_list pos:line="859" pos:column="47">(<argument><expr><name pos:line="859" pos:column="48">mpm_new_argv<pos:position pos:line="859" pos:column="60"/></name></expr></argument>)<pos:position pos:line="859" pos:column="61"/></argument_list></call> <operator pos:line="859" pos:column="62">=<pos:position pos:line="859" pos:column="63"/></operator> <name pos:line="859" pos:column="64">optarg<pos:position pos:line="859" pos:column="70"/></name></expr>;<pos:position pos:line="859" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="860" pos:column="14"/></block></then></if>
        }<pos:position pos:line="861" pos:column="10"/></block></switch>
    }<pos:position pos:line="862" pos:column="6"/></block></while>

    <comment type="block" pos:line="864" pos:column="5">/* back up to capture the bad argument */</comment>
    <if pos:line="865" pos:column="5">if <condition pos:line="865" pos:column="8">(<expr><name pos:line="865" pos:column="9">rv<pos:position pos:line="865" pos:column="11"/></name> <operator pos:line="865" pos:column="12">==<pos:position pos:line="865" pos:column="14"/></operator> <name pos:line="865" pos:column="15">APR_BADCH<pos:position pos:line="865" pos:column="24"/></name> <operator pos:line="865" pos:column="25">||<pos:position pos:line="865" pos:column="27"/></operator> <name pos:line="865" pos:column="28">rv<pos:position pos:line="865" pos:column="30"/></name> <operator pos:line="865" pos:column="31">==<pos:position pos:line="865" pos:column="33"/></operator> <name pos:line="865" pos:column="34">APR_BADARG<pos:position pos:line="865" pos:column="44"/></name></expr>)<pos:position pos:line="865" pos:column="45"/></condition><then pos:line="865" pos:column="45"> <block pos:line="865" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="866" pos:column="9">opt<pos:position pos:line="866" pos:column="12"/></name><operator pos:line="866" pos:column="12">-&gt;<pos:position pos:line="866" pos:column="17"/></operator><name pos:line="866" pos:column="14">ind<pos:position pos:line="866" pos:column="17"/></name></name><operator pos:line="866" pos:column="17">--<pos:position pos:line="866" pos:column="19"/></operator></expr>;<pos:position pos:line="866" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="867" pos:column="6"/></block></then></if>

    <while pos:line="869" pos:column="5">while <condition pos:line="869" pos:column="11">(<expr><name><name pos:line="869" pos:column="12">opt<pos:position pos:line="869" pos:column="15"/></name><operator pos:line="869" pos:column="15">-&gt;<pos:position pos:line="869" pos:column="20"/></operator><name pos:line="869" pos:column="17">ind<pos:position pos:line="869" pos:column="20"/></name></name> <operator pos:line="869" pos:column="21">&lt;<pos:position pos:line="869" pos:column="25"/></operator> <name><name pos:line="869" pos:column="23">opt<pos:position pos:line="869" pos:column="26"/></name><operator pos:line="869" pos:column="26">-&gt;<pos:position pos:line="869" pos:column="31"/></operator><name pos:line="869" pos:column="28">argc<pos:position pos:line="869" pos:column="32"/></name></name></expr>)<pos:position pos:line="869" pos:column="33"/></condition> <block pos:line="869" pos:column="34">{
        <expr_stmt><expr><operator pos:line="870" pos:column="9">*<pos:position pos:line="870" pos:column="10"/></operator><operator pos:line="870" pos:column="10">(<pos:position pos:line="870" pos:column="11"/></operator><specifier pos:line="870" pos:column="11">const<pos:position pos:line="870" pos:column="16"/></specifier> <name pos:line="870" pos:column="17">char<pos:position pos:line="870" pos:column="21"/></name> <operator pos:line="870" pos:column="22">*<pos:position pos:line="870" pos:column="23"/></operator><operator pos:line="870" pos:column="23">*<pos:position pos:line="870" pos:column="24"/></operator><operator pos:line="870" pos:column="24">)<pos:position pos:line="870" pos:column="25"/></operator><call><name pos:line="870" pos:column="25">apr_array_push<pos:position pos:line="870" pos:column="39"/></name><argument_list pos:line="870" pos:column="39">(<argument><expr><name pos:line="870" pos:column="40">mpm_new_argv<pos:position pos:line="870" pos:column="52"/></name></expr></argument>)<pos:position pos:line="870" pos:column="53"/></argument_list></call> <operator pos:line="870" pos:column="54">=<pos:position pos:line="870" pos:column="55"/></operator>
            <call><name pos:line="871" pos:column="13">apr_pstrdup<pos:position pos:line="871" pos:column="24"/></name><argument_list pos:line="871" pos:column="24">(<argument><expr><name><name pos:line="871" pos:column="25">process<pos:position pos:line="871" pos:column="32"/></name><operator pos:line="871" pos:column="32">-&gt;<pos:position pos:line="871" pos:column="37"/></operator><name pos:line="871" pos:column="34">pool<pos:position pos:line="871" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="871" pos:column="40">opt<pos:position pos:line="871" pos:column="43"/></name><operator pos:line="871" pos:column="43">-&gt;<pos:position pos:line="871" pos:column="48"/></operator><name pos:line="871" pos:column="45">argv<pos:position pos:line="871" pos:column="49"/></name><index pos:line="871" pos:column="49">[<expr><name><name pos:line="871" pos:column="50">opt<pos:position pos:line="871" pos:column="53"/></name><operator pos:line="871" pos:column="53">-&gt;<pos:position pos:line="871" pos:column="58"/></operator><name pos:line="871" pos:column="55">ind<pos:position pos:line="871" pos:column="58"/></name></name><operator pos:line="871" pos:column="58">++<pos:position pos:line="871" pos:column="60"/></operator></expr>]<pos:position pos:line="871" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="871" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="871" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="872" pos:column="6"/></block></while>

    <expr_stmt><expr><name><name pos:line="874" pos:column="5">process<pos:position pos:line="874" pos:column="12"/></name><operator pos:line="874" pos:column="12">-&gt;<pos:position pos:line="874" pos:column="17"/></operator><name pos:line="874" pos:column="14">argc<pos:position pos:line="874" pos:column="18"/></name></name> <operator pos:line="874" pos:column="19">=<pos:position pos:line="874" pos:column="20"/></operator> <name><name pos:line="874" pos:column="21">mpm_new_argv<pos:position pos:line="874" pos:column="33"/></name><operator pos:line="874" pos:column="33">-&gt;<pos:position pos:line="874" pos:column="38"/></operator><name pos:line="874" pos:column="35">nelts<pos:position pos:line="874" pos:column="40"/></name></name></expr>;<pos:position pos:line="874" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="875" pos:column="5">process<pos:position pos:line="875" pos:column="12"/></name><operator pos:line="875" pos:column="12">-&gt;<pos:position pos:line="875" pos:column="17"/></operator><name pos:line="875" pos:column="14">argv<pos:position pos:line="875" pos:column="18"/></name></name> <operator pos:line="875" pos:column="19">=<pos:position pos:line="875" pos:column="20"/></operator> <operator pos:line="875" pos:column="21">(<pos:position pos:line="875" pos:column="22"/></operator><specifier pos:line="875" pos:column="22">const<pos:position pos:line="875" pos:column="27"/></specifier> <name pos:line="875" pos:column="28">char<pos:position pos:line="875" pos:column="32"/></name> <operator pos:line="875" pos:column="33">*<pos:position pos:line="875" pos:column="34"/></operator> <specifier pos:line="875" pos:column="35">const<pos:position pos:line="875" pos:column="40"/></specifier> <operator pos:line="875" pos:column="41">*<pos:position pos:line="875" pos:column="42"/></operator><operator pos:line="875" pos:column="42">)<pos:position pos:line="875" pos:column="43"/></operator><name><name pos:line="875" pos:column="43">mpm_new_argv<pos:position pos:line="875" pos:column="55"/></name><operator pos:line="875" pos:column="55">-&gt;<pos:position pos:line="875" pos:column="60"/></operator><name pos:line="875" pos:column="57">elts<pos:position pos:line="875" pos:column="61"/></name></name></expr>;<pos:position pos:line="875" pos:column="62"/></expr_stmt>

    <if pos:line="877" pos:column="5">if <condition pos:line="877" pos:column="8">(<expr><name pos:line="877" pos:column="9">dash_k_arg<pos:position pos:line="877" pos:column="19"/></name></expr>)<pos:position pos:line="877" pos:column="20"/></condition><then pos:line="877" pos:column="20"> <block pos:line="877" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="878" pos:column="9">APR_REGISTER_OPTIONAL_FN<pos:position pos:line="878" pos:column="33"/></name><argument_list pos:line="878" pos:column="33">(<argument><expr><name pos:line="878" pos:column="34">ap_signal_server<pos:position pos:line="878" pos:column="50"/></name></expr></argument>)<pos:position pos:line="878" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="878" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="879" pos:column="6"/></block></then></if>
}<pos:position pos:line="880" pos:column="2"/></block></function>

<cpp:endif pos:line="882" pos:column="1">#<cpp:directive pos:line="882" pos:column="2">endif<pos:position pos:line="882" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="882" pos:column="8">/* AP_MPM_WANT_SIGNAL_SERVER */</comment>

<cpp:ifdef pos:line="884" pos:column="1">#<cpp:directive pos:line="884" pos:column="2">ifdef<pos:position pos:line="884" pos:column="7"/></cpp:directive> <name pos:line="884" pos:column="8">AP_MPM_WANT_SET_MAX_MEM_FREE<pos:position pos:line="884" pos:column="36"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="885" pos:column="1">apr_uint32_t<pos:position pos:line="885" pos:column="13"/></name></type> <name pos:line="885" pos:column="14">ap_max_mem_free<pos:position pos:line="885" pos:column="29"/></name> <init pos:line="885" pos:column="30">= <expr><name pos:line="885" pos:column="32">APR_ALLOCATOR_MAX_FREE_UNLIMITED<pos:position pos:line="885" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="885" pos:column="65"/></decl_stmt>

<function><type><specifier pos:line="887" pos:column="1">const<pos:position pos:line="887" pos:column="6"/></specifier> <name pos:line="887" pos:column="7">char<pos:position pos:line="887" pos:column="11"/></name> <modifier pos:line="887" pos:column="12">*<pos:position pos:line="887" pos:column="13"/></modifier></type><name pos:line="887" pos:column="13">ap_mpm_set_max_mem_free<pos:position pos:line="887" pos:column="36"/></name><parameter_list pos:line="887" pos:column="36">(<parameter><decl><type><name pos:line="887" pos:column="37">cmd_parms<pos:position pos:line="887" pos:column="46"/></name> <modifier pos:line="887" pos:column="47">*<pos:position pos:line="887" pos:column="48"/></modifier></type><name pos:line="887" pos:column="48">cmd<pos:position pos:line="887" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="887" pos:column="53">void<pos:position pos:line="887" pos:column="57"/></name> <modifier pos:line="887" pos:column="58">*<pos:position pos:line="887" pos:column="59"/></modifier></type><name pos:line="887" pos:column="59">dummy<pos:position pos:line="887" pos:column="64"/></name></decl></parameter>,
	                            <parameter><decl><type><specifier pos:line="888" pos:column="37">const<pos:position pos:line="888" pos:column="42"/></specifier> <name pos:line="888" pos:column="43">char<pos:position pos:line="888" pos:column="47"/></name> <modifier pos:line="888" pos:column="48">*<pos:position pos:line="888" pos:column="49"/></modifier></type><name pos:line="888" pos:column="49">arg<pos:position pos:line="888" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="888" pos:column="53"/></parameter_list>
<block pos:line="889" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="890" pos:column="5">long<pos:position pos:line="890" pos:column="9"/></name></type> <name pos:line="890" pos:column="10">value<pos:position pos:line="890" pos:column="15"/></name></decl>;<pos:position pos:line="890" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="891" pos:column="5">const<pos:position pos:line="891" pos:column="10"/></specifier> <name pos:line="891" pos:column="11">char<pos:position pos:line="891" pos:column="15"/></name> <modifier pos:line="891" pos:column="16">*<pos:position pos:line="891" pos:column="17"/></modifier></type><name pos:line="891" pos:column="17">err<pos:position pos:line="891" pos:column="20"/></name> <init pos:line="891" pos:column="21">= <expr><call><name pos:line="891" pos:column="23">ap_check_cmd_context<pos:position pos:line="891" pos:column="43"/></name><argument_list pos:line="891" pos:column="43">(<argument><expr><name pos:line="891" pos:column="44">cmd<pos:position pos:line="891" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="891" pos:column="49">GLOBAL_ONLY<pos:position pos:line="891" pos:column="60"/></name></expr></argument>)<pos:position pos:line="891" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="891" pos:column="62"/></decl_stmt>
    <if pos:line="892" pos:column="5">if <condition pos:line="892" pos:column="8">(<expr><name pos:line="892" pos:column="9">err<pos:position pos:line="892" pos:column="12"/></name> <operator pos:line="892" pos:column="13">!=<pos:position pos:line="892" pos:column="15"/></operator> <name pos:line="892" pos:column="16">NULL<pos:position pos:line="892" pos:column="20"/></name></expr>)<pos:position pos:line="892" pos:column="21"/></condition><then pos:line="892" pos:column="21"> <block pos:line="892" pos:column="22">{
        <return pos:line="893" pos:column="9">return <expr><name pos:line="893" pos:column="16">err<pos:position pos:line="893" pos:column="19"/></name></expr>;<pos:position pos:line="893" pos:column="20"/></return>
    }<pos:position pos:line="894" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><name pos:line="896" pos:column="5">value<pos:position pos:line="896" pos:column="10"/></name> <operator pos:line="896" pos:column="11">=<pos:position pos:line="896" pos:column="12"/></operator> <call><name pos:line="896" pos:column="13">strtol<pos:position pos:line="896" pos:column="19"/></name><argument_list pos:line="896" pos:column="19">(<argument><expr><name pos:line="896" pos:column="20">arg<pos:position pos:line="896" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="896" pos:column="25">NULL<pos:position pos:line="896" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="896" pos:column="31">0<pos:position pos:line="896" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="896" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="896" pos:column="34"/></expr_stmt>
    <if pos:line="897" pos:column="5">if <condition pos:line="897" pos:column="8">(<expr><name pos:line="897" pos:column="9">value<pos:position pos:line="897" pos:column="14"/></name> <operator pos:line="897" pos:column="15">&lt;<pos:position pos:line="897" pos:column="19"/></operator> <literal type="number" pos:line="897" pos:column="17">0<pos:position pos:line="897" pos:column="18"/></literal> <operator pos:line="897" pos:column="19">||<pos:position pos:line="897" pos:column="21"/></operator> <name pos:line="897" pos:column="22">errno<pos:position pos:line="897" pos:column="27"/></name> <operator pos:line="897" pos:column="28">==<pos:position pos:line="897" pos:column="30"/></operator> <name pos:line="897" pos:column="31">ERANGE<pos:position pos:line="897" pos:column="37"/></name></expr>)<pos:position pos:line="897" pos:column="38"/></condition><then pos:line="897" pos:column="38">
        <block type="pseudo"><return pos:line="898" pos:column="9">return <expr><call><name pos:line="898" pos:column="16">apr_pstrcat<pos:position pos:line="898" pos:column="27"/></name><argument_list pos:line="898" pos:column="27">(<argument><expr><name><name pos:line="898" pos:column="28">cmd<pos:position pos:line="898" pos:column="31"/></name><operator pos:line="898" pos:column="31">-&gt;<pos:position pos:line="898" pos:column="36"/></operator><name pos:line="898" pos:column="33">pool<pos:position pos:line="898" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="898" pos:column="39">"Invalid MaxMemFree value: "<pos:position pos:line="898" pos:column="67"/></literal></expr></argument>, 
                           <argument><expr><name pos:line="899" pos:column="28">arg<pos:position pos:line="899" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="899" pos:column="33">NULL<pos:position pos:line="899" pos:column="37"/></name></expr></argument>)<pos:position pos:line="899" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="899" pos:column="39"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="901" pos:column="5">ap_max_mem_free<pos:position pos:line="901" pos:column="20"/></name> <operator pos:line="901" pos:column="21">=<pos:position pos:line="901" pos:column="22"/></operator> <operator pos:line="901" pos:column="23">(<pos:position pos:line="901" pos:column="24"/></operator><name pos:line="901" pos:column="24">apr_uint32_t<pos:position pos:line="901" pos:column="36"/></name><operator pos:line="901" pos:column="36">)<pos:position pos:line="901" pos:column="37"/></operator><name pos:line="901" pos:column="37">value<pos:position pos:line="901" pos:column="42"/></name> <operator pos:line="901" pos:column="43">*<pos:position pos:line="901" pos:column="44"/></operator> <literal type="number" pos:line="901" pos:column="45">1024<pos:position pos:line="901" pos:column="49"/></literal></expr>;<pos:position pos:line="901" pos:column="50"/></expr_stmt>

    <return pos:line="903" pos:column="5">return <expr><name pos:line="903" pos:column="12">NULL<pos:position pos:line="903" pos:column="16"/></name></expr>;<pos:position pos:line="903" pos:column="17"/></return>
}<pos:position pos:line="904" pos:column="2"/></block></function>

<cpp:endif pos:line="906" pos:column="1">#<cpp:directive pos:line="906" pos:column="2">endif<pos:position pos:line="906" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="906" pos:column="8">/* AP_MPM_WANT_SET_MAX_MEM_FREE */</comment>
</unit>
