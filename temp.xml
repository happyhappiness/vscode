<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/repos/mutt-1.7.2/imap/auth.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * Copyright (C) 1996-1998 Michael R. Elkins &lt;me@mutt.org&gt;
 * Copyright (C) 1996-1999 Brandon Long &lt;blong@fiction.net&gt;
 * Copyright (C) 1999-2001 Brendan Cully &lt;brendan@kublai.com&gt;
 * 
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 * 
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with this program; if not, write to the Free Software
 *     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */</comment> 

<comment type="block" pos:line="21" pos:column="1">/* IMAP login/authentication code */</comment>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><name pos:line="23" pos:column="5">HAVE_CONFIG_H<pos:position pos:line="23" pos:column="18"/></name></expr></cpp:if>
<cpp:include pos:line="24" pos:column="1"># <cpp:directive pos:line="24" pos:column="3">include<pos:position pos:line="24" pos:column="10"/></cpp:directive> <cpp:file pos:line="24" pos:column="11">"config.h"<pos:position pos:line="24" pos:column="21"/></cpp:file></cpp:include>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include<pos:position pos:line="27" pos:column="9"/></cpp:directive> <cpp:file pos:line="27" pos:column="10">"mutt.h"<pos:position pos:line="27" pos:column="18"/></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include<pos:position pos:line="28" pos:column="9"/></cpp:directive> <cpp:file pos:line="28" pos:column="10">"imap_private.h"<pos:position pos:line="28" pos:column="26"/></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include<pos:position pos:line="29" pos:column="9"/></cpp:directive> <cpp:file pos:line="29" pos:column="10">"auth.h"<pos:position pos:line="29" pos:column="18"/></cpp:file></cpp:include>

<decl_stmt><decl><specifier pos:line="31" pos:column="1">static<pos:position pos:line="31" pos:column="7"/></specifier> <type><specifier pos:line="31" pos:column="8">const<pos:position pos:line="31" pos:column="13"/></specifier> <name pos:line="31" pos:column="14">imap_auth_t<pos:position pos:line="31" pos:column="25"/></name></type> <name><name pos:line="31" pos:column="26">imap_authenticators<pos:position pos:line="31" pos:column="45"/></name><index pos:line="31" pos:column="45">[]<pos:position pos:line="31" pos:column="47"/></index></name> <init pos:line="31" pos:column="48">= <expr><block pos:line="31" pos:column="50">{
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">USE_SASL<pos:position pos:line="32" pos:column="16"/></name></cpp:ifdef>
  <expr><block pos:line="33" pos:column="3">{ <expr><name pos:line="33" pos:column="5">imap_auth_sasl<pos:position pos:line="33" pos:column="19"/></name></expr>, <expr><name pos:line="33" pos:column="21">NULL<pos:position pos:line="33" pos:column="25"/></name></expr> }<pos:position pos:line="33" pos:column="27"/></block></expr>,
<cpp:else pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">else<pos:position pos:line="34" pos:column="6"/></cpp:directive></cpp:else>
  <expr><block pos:line="35" pos:column="3">{ <expr><name pos:line="35" pos:column="5">imap_auth_anon<pos:position pos:line="35" pos:column="19"/></name></expr>, <expr><literal type="string" pos:line="35" pos:column="21">"anonymous"<pos:position pos:line="35" pos:column="32"/></literal></expr> }<pos:position pos:line="35" pos:column="34"/></block></expr>,
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">USE_GSS<pos:position pos:line="37" pos:column="15"/></name></cpp:ifdef>
  <expr><block pos:line="38" pos:column="3">{ <expr><name pos:line="38" pos:column="5">imap_auth_gss<pos:position pos:line="38" pos:column="18"/></name></expr>, <expr><literal type="string" pos:line="38" pos:column="20">"gssapi"<pos:position pos:line="38" pos:column="28"/></literal></expr> }<pos:position pos:line="38" pos:column="30"/></block></expr>,
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="40" pos:column="3">/* SASL includes CRAM-MD5 (and GSSAPI, but that's not enabled by default) */</comment>
<cpp:ifndef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifndef<pos:position pos:line="41" pos:column="8"/></cpp:directive> <name pos:line="41" pos:column="9">USE_SASL<pos:position pos:line="41" pos:column="17"/></name></cpp:ifndef>
  <expr><block pos:line="42" pos:column="3">{ <expr><name pos:line="42" pos:column="5">imap_auth_cram_md5<pos:position pos:line="42" pos:column="23"/></name></expr>, <expr><literal type="string" pos:line="42" pos:column="25">"cram-md5"<pos:position pos:line="42" pos:column="35"/></literal></expr> }<pos:position pos:line="42" pos:column="37"/></block></expr>,
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
  <expr><block pos:line="44" pos:column="3">{ <expr><name pos:line="44" pos:column="5">imap_auth_login<pos:position pos:line="44" pos:column="20"/></name></expr>, <expr><literal type="string" pos:line="44" pos:column="22">"login"<pos:position pos:line="44" pos:column="29"/></literal></expr> }<pos:position pos:line="44" pos:column="31"/></block></expr>,

  <expr><block pos:line="46" pos:column="3">{ <expr><name pos:line="46" pos:column="5">NULL<pos:position pos:line="46" pos:column="9"/></name></expr>, <expr><name pos:line="46" pos:column="11">NULL<pos:position pos:line="46" pos:column="15"/></name></expr> }<pos:position pos:line="46" pos:column="17"/></block></expr>
}<pos:position pos:line="47" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="47" pos:column="3"/></decl_stmt>

<comment type="block" pos:line="49" pos:column="1">/* imap_authenticate: Attempt to authenticate using either user-specified
 *   authentication method if specified, or any. */</comment>
<function><type><name pos:line="51" pos:column="1">int<pos:position pos:line="51" pos:column="4"/></name></type> <name pos:line="51" pos:column="5">imap_authenticate<pos:position pos:line="51" pos:column="22"/></name> <parameter_list pos:line="51" pos:column="23">(<parameter><decl><type><name pos:line="51" pos:column="24">IMAP_DATA<pos:position pos:line="51" pos:column="33"/></name><modifier pos:line="51" pos:column="33">*<pos:position pos:line="51" pos:column="34"/></modifier></type> <name pos:line="51" pos:column="35">idata<pos:position pos:line="51" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="51" pos:column="41"/></parameter_list>
<block pos:line="52" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="53" pos:column="3">const<pos:position pos:line="53" pos:column="8"/></specifier> <name pos:line="53" pos:column="9">imap_auth_t<pos:position pos:line="53" pos:column="20"/></name><modifier pos:line="53" pos:column="20">*<pos:position pos:line="53" pos:column="21"/></modifier></type> <name pos:line="53" pos:column="22">authenticator<pos:position pos:line="53" pos:column="35"/></name></decl>;<pos:position pos:line="53" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="54" pos:column="3">char<pos:position pos:line="54" pos:column="7"/></name><modifier pos:line="54" pos:column="7">*<pos:position pos:line="54" pos:column="8"/></modifier></type> <name pos:line="54" pos:column="9">methods<pos:position pos:line="54" pos:column="16"/></name></decl>;<pos:position pos:line="54" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="55" pos:column="3">char<pos:position pos:line="55" pos:column="7"/></name><modifier pos:line="55" pos:column="7">*<pos:position pos:line="55" pos:column="8"/></modifier></type> <name pos:line="55" pos:column="9">method<pos:position pos:line="55" pos:column="15"/></name></decl>;<pos:position pos:line="55" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="56" pos:column="3">char<pos:position pos:line="56" pos:column="7"/></name><modifier pos:line="56" pos:column="7">*<pos:position pos:line="56" pos:column="8"/></modifier></type> <name pos:line="56" pos:column="9">delim<pos:position pos:line="56" pos:column="14"/></name></decl>;<pos:position pos:line="56" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="57" pos:column="3">int<pos:position pos:line="57" pos:column="6"/></name></type> <name pos:line="57" pos:column="7">r<pos:position pos:line="57" pos:column="8"/></name> <init pos:line="57" pos:column="9">= <expr><operator pos:line="57" pos:column="11">-<pos:position pos:line="57" pos:column="12"/></operator><literal type="number" pos:line="57" pos:column="12">1<pos:position pos:line="57" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="57" pos:column="14"/></decl_stmt>

  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><name pos:line="59" pos:column="7">ImapAuthenticators<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">&amp;&amp;<pos:position pos:line="59" pos:column="36"/></operator> <operator pos:line="59" pos:column="29">*<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="30">ImapAuthenticators<pos:position pos:line="59" pos:column="48"/></name></expr>)<pos:position pos:line="59" pos:column="49"/></condition><then pos:line="59" pos:column="49">
  <block pos:line="60" pos:column="3">{
    <comment type="block" pos:line="61" pos:column="5">/* Try user-specified list of authentication methods */</comment>
    <expr_stmt><expr><name pos:line="62" pos:column="5">methods<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <call><name pos:line="62" pos:column="15">safe_strdup<pos:position pos:line="62" pos:column="26"/></name> <argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">ImapAuthenticators<pos:position pos:line="62" pos:column="46"/></name></expr></argument>)<pos:position pos:line="62" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="48"/></expr_stmt>

    <for pos:line="64" pos:column="5">for <control pos:line="64" pos:column="9">(<init><expr><name pos:line="64" pos:column="10">method<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <name pos:line="64" pos:column="19">methods<pos:position pos:line="64" pos:column="26"/></name></expr>;<pos:position pos:line="64" pos:column="27"/></init> <condition><expr><name pos:line="64" pos:column="28">method<pos:position pos:line="64" pos:column="34"/></name></expr>;<pos:position pos:line="64" pos:column="35"/></condition> <incr><expr><name pos:line="64" pos:column="36">method<pos:position pos:line="64" pos:column="42"/></name> <operator pos:line="64" pos:column="43">=<pos:position pos:line="64" pos:column="44"/></operator> <name pos:line="64" pos:column="45">delim<pos:position pos:line="64" pos:column="50"/></name></expr></incr>)<pos:position pos:line="64" pos:column="51"/></control>
    <block pos:line="65" pos:column="5">{
      <expr_stmt><expr><name pos:line="66" pos:column="7">delim<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <call><name pos:line="66" pos:column="15">strchr<pos:position pos:line="66" pos:column="21"/></name> <argument_list pos:line="66" pos:column="22">(<argument><expr><name pos:line="66" pos:column="23">method<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="66" pos:column="31">':'<pos:position pos:line="66" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
      <if pos:line="67" pos:column="7">if <condition pos:line="67" pos:column="10">(<expr><name pos:line="67" pos:column="11">delim<pos:position pos:line="67" pos:column="16"/></name></expr>)<pos:position pos:line="67" pos:column="17"/></condition><then pos:line="67" pos:column="17">
	<block type="pseudo"><expr_stmt><expr><operator pos:line="68" pos:column="9">*<pos:position pos:line="68" pos:column="10"/></operator><name pos:line="68" pos:column="10">delim<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">++<pos:position pos:line="68" pos:column="17"/></operator> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <literal type="char" pos:line="68" pos:column="20">'\0'<pos:position pos:line="68" pos:column="24"/></literal></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt></block></then></if>
      <if pos:line="69" pos:column="7">if <condition pos:line="69" pos:column="10">(<expr><operator pos:line="69" pos:column="11">!<pos:position pos:line="69" pos:column="12"/></operator> <name><name pos:line="69" pos:column="13">method<pos:position pos:line="69" pos:column="19"/></name><index pos:line="69" pos:column="19">[<expr><literal type="number" pos:line="69" pos:column="20">0<pos:position pos:line="69" pos:column="21"/></literal></expr>]<pos:position pos:line="69" pos:column="22"/></index></name></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23">
	<block type="pseudo"><continue pos:line="70" pos:column="9">continue;<pos:position pos:line="70" pos:column="18"/></continue></block></then></if>
      
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">dprint<pos:position pos:line="72" pos:column="13"/></name> <argument_list pos:line="72" pos:column="14">(<argument><expr><literal type="number" pos:line="72" pos:column="15">2<pos:position pos:line="72" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="72" pos:column="18">(<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">debugfile<pos:position pos:line="72" pos:column="28"/></name><operator pos:line="72" pos:column="28">,<pos:position pos:line="72" pos:column="29"/></operator> <literal type="string" pos:line="72" pos:column="30">"imap_authenticate: Trying method %s\n"<pos:position pos:line="72" pos:column="69"/></literal><operator pos:line="72" pos:column="69">,<pos:position pos:line="72" pos:column="70"/></operator> <name pos:line="72" pos:column="71">method<pos:position pos:line="72" pos:column="77"/></name><operator pos:line="72" pos:column="77">)<pos:position pos:line="72" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="72" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><name pos:line="73" pos:column="7">authenticator<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <name pos:line="73" pos:column="23">imap_authenticators<pos:position pos:line="73" pos:column="42"/></name></expr>;<pos:position pos:line="73" pos:column="43"/></expr_stmt>

      <while pos:line="75" pos:column="7">while <condition pos:line="75" pos:column="13">(<expr><name><name pos:line="75" pos:column="14">authenticator<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">-&gt;<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="29">authenticate<pos:position pos:line="75" pos:column="41"/></name></name></expr>)<pos:position pos:line="75" pos:column="42"/></condition>
      <block pos:line="76" pos:column="7">{
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">!<pos:position pos:line="77" pos:column="14"/></operator><name><name pos:line="77" pos:column="14">authenticator<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">-&gt;<pos:position pos:line="77" pos:column="32"/></operator><name pos:line="77" pos:column="29">method<pos:position pos:line="77" pos:column="35"/></name></name> <operator pos:line="77" pos:column="36">||<pos:position pos:line="77" pos:column="38"/></operator>
	    <operator pos:line="78" pos:column="13">!<pos:position pos:line="78" pos:column="14"/></operator><call><name pos:line="78" pos:column="14">ascii_strcasecmp<pos:position pos:line="78" pos:column="30"/></name> <argument_list pos:line="78" pos:column="31">(<argument><expr><name><name pos:line="78" pos:column="32">authenticator<pos:position pos:line="78" pos:column="45"/></name><operator pos:line="78" pos:column="45">-&gt;<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="47">method<pos:position pos:line="78" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="55">method<pos:position pos:line="78" pos:column="61"/></name></expr></argument>)<pos:position pos:line="78" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="63"/></condition><then pos:line="78" pos:column="63">
	  <block type="pseudo"><if pos:line="79" pos:column="11">if <condition pos:line="79" pos:column="14">(<expr><operator pos:line="79" pos:column="15">(<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">r<pos:position pos:line="79" pos:column="17"/></name> <operator pos:line="79" pos:column="18">=<pos:position pos:line="79" pos:column="19"/></operator> <call><name><name pos:line="79" pos:column="20">authenticator<pos:position pos:line="79" pos:column="33"/></name><operator pos:line="79" pos:column="33">-&gt;<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="35">authenticate<pos:position pos:line="79" pos:column="47"/></name></name> <argument_list pos:line="79" pos:column="48">(<argument><expr><name pos:line="79" pos:column="49">idata<pos:position pos:line="79" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">method<pos:position pos:line="79" pos:column="62"/></name></expr></argument>)<pos:position pos:line="79" pos:column="63"/></argument_list></call><operator pos:line="79" pos:column="63">)<pos:position pos:line="79" pos:column="64"/></operator> <operator pos:line="79" pos:column="65">!=<pos:position pos:line="79" pos:column="67"/></operator>
	      <name pos:line="80" pos:column="15">IMAP_AUTH_UNAVAIL<pos:position pos:line="80" pos:column="32"/></name></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33">
	  <block pos:line="81" pos:column="11">{
	    <expr_stmt><expr><call><name pos:line="82" pos:column="13">FREE<pos:position pos:line="82" pos:column="17"/></name> <argument_list pos:line="82" pos:column="18">(<argument><expr><operator pos:line="82" pos:column="19">&amp;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="20">methods<pos:position pos:line="82" pos:column="27"/></name></expr></argument>)<pos:position pos:line="82" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="29"/></expr_stmt>
	    <return pos:line="83" pos:column="13">return <expr><name pos:line="83" pos:column="20">r<pos:position pos:line="83" pos:column="21"/></name></expr>;<pos:position pos:line="83" pos:column="22"/></return>
	  }<pos:position pos:line="84" pos:column="12"/></block></then></if></block></then></if>
	
	<expr_stmt><expr><name pos:line="86" pos:column="9">authenticator<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">++<pos:position pos:line="86" pos:column="24"/></operator></expr>;<pos:position pos:line="86" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="87" pos:column="8"/></block></while>
    }<pos:position pos:line="88" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="90" pos:column="5">FREE<pos:position pos:line="90" pos:column="9"/></name> <argument_list pos:line="90" pos:column="10">(<argument><expr><operator pos:line="90" pos:column="11">&amp;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="12">methods<pos:position pos:line="90" pos:column="19"/></name></expr></argument>)<pos:position pos:line="90" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></then>
  <else pos:line="92" pos:column="3">else
  <block pos:line="93" pos:column="3">{
    <comment type="block" pos:line="94" pos:column="5">/* Fall back to default: any authenticator */</comment>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">dprint<pos:position pos:line="95" pos:column="11"/></name> <argument_list pos:line="95" pos:column="12">(<argument><expr><literal type="number" pos:line="95" pos:column="13">2<pos:position pos:line="95" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="95" pos:column="16">(<pos:position pos:line="95" pos:column="17"/></operator><name pos:line="95" pos:column="17">debugfile<pos:position pos:line="95" pos:column="26"/></name><operator pos:line="95" pos:column="26">,<pos:position pos:line="95" pos:column="27"/></operator> <literal type="string" pos:line="95" pos:column="28">"imap_authenticate: Using any available method.\n"<pos:position pos:line="95" pos:column="78"/></literal><operator pos:line="95" pos:column="78">)<pos:position pos:line="95" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="95" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><name pos:line="96" pos:column="5">authenticator<pos:position pos:line="96" pos:column="18"/></name> <operator pos:line="96" pos:column="19">=<pos:position pos:line="96" pos:column="20"/></operator> <name pos:line="96" pos:column="21">imap_authenticators<pos:position pos:line="96" pos:column="40"/></name></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt>

    <while pos:line="98" pos:column="5">while <condition pos:line="98" pos:column="11">(<expr><name><name pos:line="98" pos:column="12">authenticator<pos:position pos:line="98" pos:column="25"/></name><operator pos:line="98" pos:column="25">-&gt;<pos:position pos:line="98" pos:column="30"/></operator><name pos:line="98" pos:column="27">authenticate<pos:position pos:line="98" pos:column="39"/></name></name></expr>)<pos:position pos:line="98" pos:column="40"/></condition>
    <block pos:line="99" pos:column="5">{
      <if pos:line="100" pos:column="7">if <condition pos:line="100" pos:column="10">(<expr><operator pos:line="100" pos:column="11">(<pos:position pos:line="100" pos:column="12"/></operator><name pos:line="100" pos:column="12">r<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <call><name><name pos:line="100" pos:column="16">authenticator<pos:position pos:line="100" pos:column="29"/></name><operator pos:line="100" pos:column="29">-&gt;<pos:position pos:line="100" pos:column="34"/></operator><name pos:line="100" pos:column="31">authenticate<pos:position pos:line="100" pos:column="43"/></name></name> <argument_list pos:line="100" pos:column="44">(<argument><expr><name pos:line="100" pos:column="45">idata<pos:position pos:line="100" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="52">NULL<pos:position pos:line="100" pos:column="56"/></name></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call><operator pos:line="100" pos:column="57">)<pos:position pos:line="100" pos:column="58"/></operator> <operator pos:line="100" pos:column="59">!=<pos:position pos:line="100" pos:column="61"/></operator> <name pos:line="100" pos:column="62">IMAP_AUTH_UNAVAIL<pos:position pos:line="100" pos:column="79"/></name></expr>)<pos:position pos:line="100" pos:column="80"/></condition><then pos:line="100" pos:column="80">
	<block type="pseudo"><return pos:line="101" pos:column="9">return <expr><name pos:line="101" pos:column="16">r<pos:position pos:line="101" pos:column="17"/></name></expr>;<pos:position pos:line="101" pos:column="18"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="102" pos:column="7">authenticator<pos:position pos:line="102" pos:column="20"/></name><operator pos:line="102" pos:column="20">++<pos:position pos:line="102" pos:column="22"/></operator></expr>;<pos:position pos:line="102" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></while>
  }<pos:position pos:line="104" pos:column="4"/></block></else></if>

  <if pos:line="106" pos:column="3">if <condition pos:line="106" pos:column="6">(<expr><name pos:line="106" pos:column="7">r<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">==<pos:position pos:line="106" pos:column="11"/></operator> <name pos:line="106" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="106" pos:column="29"/></name></expr>)<pos:position pos:line="106" pos:column="30"/></condition><then pos:line="106" pos:column="30">
  <block pos:line="107" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="108" pos:column="5">mutt_error<pos:position pos:line="108" pos:column="15"/></name> <argument_list pos:line="108" pos:column="16">(<argument><expr><call><name pos:line="108" pos:column="17">_<pos:position pos:line="108" pos:column="18"/></name><argument_list pos:line="108" pos:column="18">(<argument><expr><literal type="string" pos:line="108" pos:column="19">"No authenticators available"<pos:position pos:line="108" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="108" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">mutt_sleep<pos:position pos:line="109" pos:column="15"/></name> <argument_list pos:line="109" pos:column="16">(<argument><expr><literal type="number" pos:line="109" pos:column="17">1<pos:position pos:line="109" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="110" pos:column="4"/></block></then></if>
  
  <return pos:line="112" pos:column="3">return <expr><name pos:line="112" pos:column="10">r<pos:position pos:line="112" pos:column="11"/></name></expr>;<pos:position pos:line="112" pos:column="12"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function>
</unit>
