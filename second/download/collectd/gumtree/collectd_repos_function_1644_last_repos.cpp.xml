<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1644_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">srrd_update<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">filename<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><specifier pos:line="1" pos:column="46">template<pos:position pos:line="1" pos:column="54"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">argc<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">argv<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list> <block pos:line="2" pos:column="43">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">new_argc<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">new_argv<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <macro><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument pos:line="8" pos:column="10">template == NULL<pos:position pos:line="8" pos:column="26"/></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></macro><empty_stmt pos:line="8" pos:column="27">;<pos:position pos:line="8" pos:column="28"/></empty_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">new_argc<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <literal type="number" pos:line="10" pos:column="14">2<pos:position pos:line="10" pos:column="15"/></literal> <operator pos:line="10" pos:column="16">+<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">argc<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">new_argv<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">malloc<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><operator pos:line="11" pos:column="21">(<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">new_argc<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">+<pos:position pos:line="11" pos:column="32"/></operator> <literal type="number" pos:line="11" pos:column="33">1<pos:position pos:line="11" pos:column="34"/></literal><operator pos:line="11" pos:column="34">)<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator> <sizeof pos:line="11" pos:column="38">sizeof<argument_list pos:line="11" pos:column="44">(<argument><expr><operator pos:line="11" pos:column="45">*<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="46">new_argv<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">new_argv<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">NULL<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <block pos:line="12" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"rrdtool plugin: malloc failed."<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="17" pos:column="3">new_argv<pos:position pos:line="17" pos:column="11"/></name><index pos:line="17" pos:column="11">[<expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>]<pos:position pos:line="17" pos:column="14"/></index></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="string" pos:line="17" pos:column="17">"update"<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">new_argv<pos:position pos:line="18" pos:column="11"/></name><index pos:line="18" pos:column="11">[<expr><literal type="number" pos:line="18" pos:column="12">1<pos:position pos:line="18" pos:column="13"/></literal></expr>]<pos:position pos:line="18" pos:column="14"/></index></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">filename<pos:position pos:line="18" pos:column="25"/></name></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="20" pos:column="3">memcpy<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><name pos:line="20" pos:column="10">new_argv<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">+<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">2<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">argv<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">argc<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">*<pos:position pos:line="20" pos:column="36"/></operator> <sizeof pos:line="20" pos:column="37">sizeof<argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">char<pos:position pos:line="20" pos:column="48"/></name> <operator pos:line="20" pos:column="49">*<pos:position pos:line="20" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">new_argv<pos:position pos:line="21" pos:column="11"/></name><index pos:line="21" pos:column="11">[<expr><name pos:line="21" pos:column="12">new_argc<pos:position pos:line="21" pos:column="20"/></name></expr>]<pos:position pos:line="21" pos:column="21"/></index></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">NULL<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">pthread_mutex_lock<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><operator pos:line="23" pos:column="22">&amp;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="23">librrd_lock<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">optind<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></expr_stmt> <comment type="block" pos:line="24" pos:column="15">/* bug in librrd? */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">rrd_clear_error<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">()<pos:position pos:line="25" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name pos:line="27" pos:column="3">status<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <call><name pos:line="27" pos:column="12">rrd_update<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">new_argc<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">new_argv<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">pthread_mutex_unlock<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><operator pos:line="28" pos:column="24">&amp;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="25">librrd_lock<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">status<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">!=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19"> <block pos:line="30" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">WARNING<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><literal type="string" pos:line="31" pos:column="13">"rrdtool plugin: rrd_update_r failed: %s: %s"<pos:position pos:line="31" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">filename<pos:position pos:line="31" pos:column="68"/></name></expr></argument>,
            <argument><expr><call><name pos:line="32" pos:column="13">rrd_get_error<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">()<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">sfree<pos:position pos:line="35" pos:column="8"/></name><argument_list pos:line="35" pos:column="8">(<argument><expr><name pos:line="35" pos:column="9">new_argv<pos:position pos:line="35" pos:column="17"/></name></expr></argument>)<pos:position pos:line="35" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">status<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
