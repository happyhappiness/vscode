<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_569_collectd-5.5.3.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">replace_str<pos:position pos:line="1" pos:column="25"/></name><argument_list pos:line="1" pos:column="25">(<argument><expr><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <operator pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></operator><name pos:line="1" pos:column="38">str<pos:position pos:line="1" pos:column="41"/></name></expr></argument>, <argument><expr><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <operator pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></operator><name pos:line="1" pos:column="55">old<pos:position pos:line="1" pos:column="58"/></name></expr></argument>, <comment type="block" pos:line="1" pos:column="60">/* {{{ */</comment>
		<argument><expr><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <operator pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></operator><operator pos:line="2" pos:column="29">new<pos:position pos:line="2" pos:column="32"/></operator></expr></argument>)<pos:position pos:line="2" pos:column="33"/></argument_list>
<argument_list pos:line="3" pos:column="1">{
	<argument><expr><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">ret<pos:position pos:line="4" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">r<pos:position pos:line="4" pos:column="22"/></name></expr></argument>;
	<argument><expr><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">p<pos:position pos:line="5" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">q<pos:position pos:line="5" pos:column="26"/></name></expr></argument>;
	<argument><expr><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">oldlen<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <call><name pos:line="6" pos:column="25">strlen<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">old<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr></argument>;
	<argument><expr><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">count<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <call><name pos:line="7" pos:column="24">strlen<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><operator pos:line="7" pos:column="31">new<pos:position pos:line="7" pos:column="34"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr></argument>;
	<argument><expr><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">retlen<pos:position pos:line="8" pos:column="22"/></name></expr></argument>;
	<argument><expr><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">newlen<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">count<pos:position pos:line="9" pos:column="30"/></name></expr></argument>;
	<argument><expr><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name> <name pos:line="10" pos:column="13">samesize<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">oldlen<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">==<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="35">newlen<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">)<pos:position pos:line="10" pos:column="42"/></operator></expr></argument>;

	if <argument><expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">samesize<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator> <block pos:line="12" pos:column="24">{
		<for pos:line="13" pos:column="17">for <control pos:line="13" pos:column="21">(<init><expr><name pos:line="13" pos:column="22">count<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">=<pos:position pos:line="13" pos:column="29"/></operator> <literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr><operator pos:line="13" pos:column="31">,<pos:position pos:line="13" pos:column="32"/></operator> <expr><name pos:line="13" pos:column="33">p<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">=<pos:position pos:line="13" pos:column="36"/></operator> <name pos:line="13" pos:column="37">str<pos:position pos:line="13" pos:column="40"/></name></expr>;<pos:position pos:line="13" pos:column="41"/></init> <condition><expr><operator pos:line="13" pos:column="42">(<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="43">q<pos:position pos:line="13" pos:column="44"/></name> <operator pos:line="13" pos:column="45">=<pos:position pos:line="13" pos:column="46"/></operator> <call><name pos:line="13" pos:column="47">strstr<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(<argument><expr><name pos:line="13" pos:column="54">p<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">old<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator> <operator pos:line="13" pos:column="63">!=<pos:position pos:line="13" pos:column="65"/></operator> <name pos:line="13" pos:column="66">NULL<pos:position pos:line="13" pos:column="70"/></name></expr>;<pos:position pos:line="13" pos:column="71"/></condition> <incr><expr><name pos:line="13" pos:column="72">p<pos:position pos:line="13" pos:column="73"/></name> <operator pos:line="13" pos:column="74">=<pos:position pos:line="13" pos:column="75"/></operator> <name pos:line="13" pos:column="76">q<pos:position pos:line="13" pos:column="77"/></name> <operator pos:line="13" pos:column="78">+<pos:position pos:line="13" pos:column="79"/></operator> <name pos:line="13" pos:column="80">oldlen<pos:position pos:line="13" pos:column="86"/></name></expr></incr>)<pos:position pos:line="13" pos:column="87"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">count<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">++<pos:position pos:line="14" pos:column="32"/></operator></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></for>
		<comment type="block" pos:line="15" pos:column="17">/* This is undefined if p - str &gt; PTRDIFF_MAX */</comment>
		<name pos:line="16" pos:column="17">retlen<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">p<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">-<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">str<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">+<pos:position pos:line="16" pos:column="35"/></operator> <call><name pos:line="16" pos:column="36">strlen<pos:position pos:line="16" pos:column="42"/></name><argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">p<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call> <operator pos:line="16" pos:column="46">+<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">count<pos:position pos:line="16" pos:column="53"/></name> <operator pos:line="16" pos:column="54">*<pos:position pos:line="16" pos:column="55"/></operator> <operator pos:line="16" pos:column="56">(<pos:position pos:line="16" pos:column="57"/></operator><name pos:line="16" pos:column="57">newlen<pos:position pos:line="16" pos:column="63"/></name> <operator pos:line="16" pos:column="64">-<pos:position pos:line="16" pos:column="65"/></operator> <name pos:line="16" pos:column="66">oldlen<pos:position pos:line="16" pos:column="72"/></name><operator pos:line="16" pos:column="72">)<pos:position pos:line="16" pos:column="73"/></operator></block></expr></argument>;
	}<pos:position pos:line="17" pos:column="10"/></argument_list> else
		<name pos:line="18" pos:column="17">retlen<pos:position pos:line="18" pos:column="23"/></name> <init pos:line="18" pos:column="24">= <expr><call><name pos:line="18" pos:column="26">strlen<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">str<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="38"/></decl_stmt>

	<expr_stmt><expr><name pos:line="20" pos:column="9">ret<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">malloc<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">retlen<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">+<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">ret<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">==<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">NULL<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></return></block></then></if>
	<comment type="line" pos:line="23" pos:column="9">// added to original: not optimized, but keeps valgrind happy.</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">memset<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">ret<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="21">0<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="24">retlen<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">+<pos:position pos:line="24" pos:column="32"/></operator> <literal type="number" pos:line="24" pos:column="33">1<pos:position pos:line="24" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><name pos:line="26" pos:column="9">r<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <name pos:line="26" pos:column="13">ret<pos:position pos:line="26" pos:column="16"/></name></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">p<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <name pos:line="27" pos:column="13">str<pos:position pos:line="27" pos:column="16"/></name></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><literal type="number" pos:line="28" pos:column="16">1<pos:position pos:line="28" pos:column="17"/></literal></expr>)<pos:position pos:line="28" pos:column="18"/></condition> <block pos:line="28" pos:column="19">{
		<comment type="block" pos:line="29" pos:column="17">/* If the old and new strings are different lengths - in other
		 * words we have already iterated through with strstr above,
		 * and thus we know how many times we need to call it - then we
		 * can avoid the final (potentially lengthy) call to strstr,
		 * which we already know is going to return NULL, by
		 * decrementing and checking count.
		 */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">samesize<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">&amp;&amp;<pos:position pos:line="36" pos:column="41"/></operator> <operator pos:line="36" pos:column="34">!<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="35">count<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">--<pos:position pos:line="36" pos:column="42"/></operator></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43">
			<block type="pseudo"><break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="38" pos:column="17">/* Otherwise i.e. when the old and new strings are the same
		 * length, and we don't know how many times to call strstr,
		 * we must check for a NULL return here (we check it in any
		 * event, to avoid further conditions, and because there's
		 * no harm done with the check even when the old and new
		 * strings are different lengths).
		 */</comment>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">(<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">q<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <call><name pos:line="45" pos:column="26">strstr<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">p<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="36">old<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call><operator pos:line="45" pos:column="40">)<pos:position pos:line="45" pos:column="41"/></operator> <operator pos:line="45" pos:column="42">==<pos:position pos:line="45" pos:column="44"/></operator> <name pos:line="45" pos:column="45">NULL<pos:position pos:line="45" pos:column="49"/></name></expr>)<pos:position pos:line="45" pos:column="50"/></condition><then pos:line="45" pos:column="50">
			<block type="pseudo"><break pos:line="46" pos:column="25">break;<pos:position pos:line="46" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="47" pos:column="17">/* This is undefined if q - p &gt; PTRDIFF_MAX */</comment>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">ptrdiff_t<pos:position pos:line="48" pos:column="26"/></name></type> <name pos:line="48" pos:column="27">l<pos:position pos:line="48" pos:column="28"/></name> <init pos:line="48" pos:column="29">= <expr><name pos:line="48" pos:column="31">q<pos:position pos:line="48" pos:column="32"/></name> <operator pos:line="48" pos:column="33">-<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">p<pos:position pos:line="48" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="37"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">memcpy<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">r<pos:position pos:line="49" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="27">p<pos:position pos:line="49" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="30">l<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">r<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">+=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">l<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">memcpy<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">r<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="27">new<pos:position pos:line="51" pos:column="30"/></operator></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">newlen<pos:position pos:line="51" pos:column="38"/></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">r<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">+=<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">newlen<pos:position pos:line="52" pos:column="28"/></name></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">p<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <name pos:line="53" pos:column="21">q<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">+<pos:position pos:line="53" pos:column="24"/></operator> <name pos:line="53" pos:column="25">oldlen<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">strncpy<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">(<argument><expr><name pos:line="55" pos:column="17">r<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="20">p<pos:position pos:line="55" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="23">strlen<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">p<pos:position pos:line="55" pos:column="31"/></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt>

	<return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">ret<pos:position pos:line="57" pos:column="19"/></name></expr>;<pos:position pos:line="57" pos:column="20"/></return>
}</unit>
