<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1924_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_encr_aes256<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">sockent_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">se<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
                                  <parameter><decl><type><name pos:line="2" pos:column="35">void<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">ret_buffer<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">size_t<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">ret_buffer_len<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">int<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">flags<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="45"/></parameter_list> <block pos:line="3" pos:column="46">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">buffer<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><operator pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">ret_buffer<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">buffer_len<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><operator pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">ret_buffer_len<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">payload_len<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">part_size<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">buffer_offset<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">uint16_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">username_len<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">part_encryption_aes256_t<pos:position pos:line="10" pos:column="27"/></name></type> <name pos:line="10" pos:column="28">pea<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name><name pos:line="11" pos:column="17">hash<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><sizeof pos:line="11" pos:column="22">sizeof<argument_list pos:line="11" pos:column="28">(<argument><expr><name><name pos:line="11" pos:column="29">pea<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">hash<pos:position pos:line="11" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></sizeof></expr>]<pos:position pos:line="11" pos:column="39"/></index></name> <init pos:line="11" pos:column="40">= <expr><block pos:line="11" pos:column="42">{<expr><literal type="number" pos:line="11" pos:column="43">0<pos:position pos:line="11" pos:column="44"/></literal></expr>}<pos:position pos:line="11" pos:column="45"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="46"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">gcry_cipher_hd_t<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">cypher<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">gcry_error_t<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">err<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Make sure at least the header if available. */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">buffer_len<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">&lt;=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="21">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="17" pos:column="48"/></name></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49"> <block pos:line="17" pos:column="50">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">NOTICE<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="string" pos:line="18" pos:column="12">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="18" pos:column="54"/></literal>
           <literal type="string" pos:line="19" pos:column="12">"Discarding short packet."<pos:position pos:line="19" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">buffer_offset<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="number" pos:line="23" pos:column="19">0<pos:position pos:line="23" pos:column="20"/></literal></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* Copy the unencrypted information into `pea'. */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">BUFFER_READ<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><operator pos:line="26" pos:column="15">&amp;<pos:position pos:line="26" pos:column="20"/></operator><name><name pos:line="26" pos:column="16">pea<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">head<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">type<pos:position pos:line="26" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="31">sizeof<argument_list pos:line="26" pos:column="37">(<argument><expr><name><name pos:line="26" pos:column="38">pea<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">.<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">head<pos:position pos:line="26" pos:column="46"/></name><operator pos:line="26" pos:column="46">.<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="47">type<pos:position pos:line="26" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">BUFFER_READ<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><operator pos:line="27" pos:column="15">&amp;<pos:position pos:line="27" pos:column="20"/></operator><name><name pos:line="27" pos:column="16">pea<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">head<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">.<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">length<pos:position pos:line="27" pos:column="31"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="33">sizeof<argument_list pos:line="27" pos:column="39">(<argument><expr><name><name pos:line="27" pos:column="40">pea<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">head<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">.<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">length<pos:position pos:line="27" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* Check the `part size'. */</comment>
  <expr_stmt><expr><name pos:line="30" pos:column="3">part_size<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">ntohs<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name><name pos:line="30" pos:column="21">pea<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">head<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">.<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">length<pos:position pos:line="30" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><operator pos:line="31" pos:column="7">(<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">part_size<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">&lt;=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="21">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="31" pos:column="48"/></name><operator pos:line="31" pos:column="48">)<pos:position pos:line="31" pos:column="49"/></operator> <operator pos:line="31" pos:column="50">||<pos:position pos:line="31" pos:column="52"/></operator> <operator pos:line="31" pos:column="53">(<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="54">part_size<pos:position pos:line="31" pos:column="63"/></name> <operator pos:line="31" pos:column="64">&gt;<pos:position pos:line="31" pos:column="68"/></operator> <name pos:line="31" pos:column="66">buffer_len<pos:position pos:line="31" pos:column="76"/></name><operator pos:line="31" pos:column="76">)<pos:position pos:line="31" pos:column="77"/></operator></expr>)<pos:position pos:line="31" pos:column="78"/></condition><then pos:line="31" pos:column="78"> <block pos:line="31" pos:column="79">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">NOTICE<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="string" pos:line="32" pos:column="12">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="32" pos:column="54"/></literal>
           <literal type="string" pos:line="33" pos:column="12">"Discarding part with invalid size."<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><operator pos:line="34" pos:column="13">-<pos:position pos:line="34" pos:column="14"/></operator><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal><operator pos:line="34" pos:column="15">)<pos:position pos:line="34" pos:column="16"/></operator></expr>;<pos:position pos:line="34" pos:column="17"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* Read the username */</comment>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">BUFFER_READ<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><operator pos:line="38" pos:column="15">&amp;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="16">username_len<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="30">sizeof<argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">username_len<pos:position pos:line="38" pos:column="49"/></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="39" pos:column="3">username_len<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">ntohs<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">username_len<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>

  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">username_len<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">==<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal><operator pos:line="41" pos:column="25">)<pos:position pos:line="41" pos:column="26"/></operator> <operator pos:line="41" pos:column="27">||<pos:position pos:line="41" pos:column="29"/></operator>
      <operator pos:line="42" pos:column="7">(<pos:position pos:line="42" pos:column="8"/></operator><name pos:line="42" pos:column="8">username_len<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">&gt;<pos:position pos:line="42" pos:column="25"/></operator> <operator pos:line="42" pos:column="23">(<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">part_size<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">-<pos:position pos:line="42" pos:column="35"/></operator> <operator pos:line="42" pos:column="36">(<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="42" pos:column="64"/></name> <operator pos:line="42" pos:column="65">+<pos:position pos:line="42" pos:column="66"/></operator> <literal type="number" pos:line="42" pos:column="67">1<pos:position pos:line="42" pos:column="68"/></literal><operator pos:line="42" pos:column="68">)<pos:position pos:line="42" pos:column="69"/></operator><operator pos:line="42" pos:column="69">)<pos:position pos:line="42" pos:column="70"/></operator><operator pos:line="42" pos:column="70">)<pos:position pos:line="42" pos:column="71"/></operator></expr>)<pos:position pos:line="42" pos:column="72"/></condition><then pos:line="42" pos:column="72"> <block pos:line="42" pos:column="73">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">NOTICE<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="string" pos:line="43" pos:column="12">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="43" pos:column="54"/></literal>
           <literal type="string" pos:line="44" pos:column="12">"Discarding part with invalid username length."<pos:position pos:line="44" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><operator pos:line="45" pos:column="13">-<pos:position pos:line="45" pos:column="14"/></operator><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal><operator pos:line="45" pos:column="15">)<pos:position pos:line="45" pos:column="16"/></operator></expr>;<pos:position pos:line="45" pos:column="17"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">assert<pos:position pos:line="48" pos:column="9"/></name><argument_list pos:line="48" pos:column="9">(<argument><expr><name pos:line="48" pos:column="10">username_len<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">&gt;<pos:position pos:line="48" pos:column="27"/></operator> <literal type="number" pos:line="48" pos:column="25">0<pos:position pos:line="48" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">pea<pos:position pos:line="49" pos:column="6"/></name><operator pos:line="49" pos:column="6">.<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">username<pos:position pos:line="49" pos:column="15"/></name></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">malloc<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">username_len<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">+<pos:position pos:line="49" pos:column="39"/></operator> <literal type="number" pos:line="49" pos:column="40">1<pos:position pos:line="49" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name><name pos:line="50" pos:column="7">pea<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">.<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">username<pos:position pos:line="50" pos:column="19"/></name></name> <operator pos:line="50" pos:column="20">==<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">NULL<pos:position pos:line="50" pos:column="27"/></name></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
    <block type="pseudo"><return pos:line="51" pos:column="5">return <expr><operator pos:line="51" pos:column="12">(<pos:position pos:line="51" pos:column="13"/></operator><operator pos:line="51" pos:column="13">-<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">ENOMEM<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">)<pos:position pos:line="51" pos:column="21"/></operator></expr>;<pos:position pos:line="51" pos:column="22"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">BUFFER_READ<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name><name pos:line="52" pos:column="15">pea<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">.<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="19">username<pos:position pos:line="52" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="29">username_len<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">pea<pos:position pos:line="53" pos:column="6"/></name><operator pos:line="53" pos:column="6">.<pos:position pos:line="53" pos:column="7"/></operator><name pos:line="53" pos:column="7">username<pos:position pos:line="53" pos:column="15"/></name><index pos:line="53" pos:column="15">[<expr><name pos:line="53" pos:column="16">username_len<pos:position pos:line="53" pos:column="28"/></name></expr>]<pos:position pos:line="53" pos:column="29"/></index></name> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <literal type="number" pos:line="53" pos:column="32">0<pos:position pos:line="53" pos:column="33"/></literal></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="55" pos:column="3">/* Last but not least, the initialization vector */</comment>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">BUFFER_READ<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name><name pos:line="56" pos:column="15">pea<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">.<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">iv<pos:position pos:line="56" pos:column="21"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="23">sizeof<argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">pea<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">.<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="34">iv<pos:position pos:line="56" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="58" pos:column="3">/* Make sure we are at the right position */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">assert<pos:position pos:line="59" pos:column="9"/></name><argument_list pos:line="59" pos:column="9">(<argument><expr><name pos:line="59" pos:column="10">buffer_offset<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">==<pos:position pos:line="59" pos:column="26"/></operator>
         <operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="11">username_len<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">+<pos:position pos:line="60" pos:column="25"/></operator> <name pos:line="60" pos:column="26">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="60" pos:column="53"/></name> <operator pos:line="60" pos:column="54">-<pos:position pos:line="60" pos:column="55"/></operator> <sizeof pos:line="60" pos:column="56">sizeof<argument_list pos:line="60" pos:column="62">(<argument><expr><name><name pos:line="60" pos:column="63">pea<pos:position pos:line="60" pos:column="66"/></name><operator pos:line="60" pos:column="66">.<pos:position pos:line="60" pos:column="67"/></operator><name pos:line="60" pos:column="67">hash<pos:position pos:line="60" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></sizeof><operator pos:line="60" pos:column="72">)<pos:position pos:line="60" pos:column="73"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="75"/></expr_stmt>

  <expr_stmt><expr><name pos:line="62" pos:column="3">cypher<pos:position pos:line="62" pos:column="9"/></name> <operator pos:line="62" pos:column="10">=<pos:position pos:line="62" pos:column="11"/></operator> <call><name pos:line="62" pos:column="12">network_get_aes256_cypher<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">se<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="42">pea<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">.<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">iv<pos:position pos:line="62" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="50">sizeof<argument_list pos:line="62" pos:column="56">(<argument><expr><name><name pos:line="62" pos:column="57">pea<pos:position pos:line="62" pos:column="60"/></name><operator pos:line="62" pos:column="60">.<pos:position pos:line="62" pos:column="61"/></operator><name pos:line="62" pos:column="61">iv<pos:position pos:line="62" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="66">pea<pos:position pos:line="62" pos:column="69"/></name><operator pos:line="62" pos:column="69">.<pos:position pos:line="62" pos:column="70"/></operator><name pos:line="62" pos:column="70">username<pos:position pos:line="62" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="80"/></expr_stmt>
  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><name pos:line="63" pos:column="7">cypher<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">==<pos:position pos:line="63" pos:column="16"/></operator> <name pos:line="63" pos:column="17">NULL<pos:position pos:line="63" pos:column="21"/></name></expr>)<pos:position pos:line="63" pos:column="22"/></condition><then pos:line="63" pos:column="22"> <block pos:line="63" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">ERROR<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><literal type="string" pos:line="64" pos:column="11">"network plugin: Failed to get cypher. Username: %s"<pos:position pos:line="64" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="65">pea<pos:position pos:line="64" pos:column="68"/></name><operator pos:line="64" pos:column="68">.<pos:position pos:line="64" pos:column="69"/></operator><name pos:line="64" pos:column="69">username<pos:position pos:line="64" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">sfree<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><name><name pos:line="65" pos:column="11">pea<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">.<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="15">username<pos:position pos:line="65" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>
    <return pos:line="66" pos:column="5">return <expr><operator pos:line="66" pos:column="12">(<pos:position pos:line="66" pos:column="13"/></operator><operator pos:line="66" pos:column="13">-<pos:position pos:line="66" pos:column="14"/></operator><literal type="number" pos:line="66" pos:column="14">1<pos:position pos:line="66" pos:column="15"/></literal><operator pos:line="66" pos:column="15">)<pos:position pos:line="66" pos:column="16"/></operator></expr>;<pos:position pos:line="66" pos:column="17"/></return>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="69" pos:column="3">payload_len<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">part_size<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">-<pos:position pos:line="69" pos:column="28"/></operator> <operator pos:line="69" pos:column="29">(<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="69" pos:column="57"/></name> <operator pos:line="69" pos:column="58">+<pos:position pos:line="69" pos:column="59"/></operator> <name pos:line="69" pos:column="60">username_len<pos:position pos:line="69" pos:column="72"/></name><operator pos:line="69" pos:column="72">)<pos:position pos:line="69" pos:column="73"/></operator></expr>;<pos:position pos:line="69" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="70" pos:column="3">assert<pos:position pos:line="70" pos:column="9"/></name><argument_list pos:line="70" pos:column="9">(<argument><expr><name pos:line="70" pos:column="10">payload_len<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">&gt;<pos:position pos:line="70" pos:column="26"/></operator> <literal type="number" pos:line="70" pos:column="24">0<pos:position pos:line="70" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="72" pos:column="3">/* Decrypt the packet in-place */</comment>
  <expr_stmt><expr><name pos:line="73" pos:column="3">err<pos:position pos:line="73" pos:column="6"/></name> <operator pos:line="73" pos:column="7">=<pos:position pos:line="73" pos:column="8"/></operator> <call><name pos:line="73" pos:column="9">gcry_cipher_decrypt<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><name pos:line="73" pos:column="29">cypher<pos:position pos:line="73" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="37">buffer<pos:position pos:line="73" pos:column="43"/></name> <operator pos:line="73" pos:column="44">+<pos:position pos:line="73" pos:column="45"/></operator> <name pos:line="73" pos:column="46">buffer_offset<pos:position pos:line="73" pos:column="59"/></name></expr></argument>,
                            <argument><expr><name pos:line="74" pos:column="29">part_size<pos:position pos:line="74" pos:column="38"/></name> <operator pos:line="74" pos:column="39">-<pos:position pos:line="74" pos:column="40"/></operator> <name pos:line="74" pos:column="41">buffer_offset<pos:position pos:line="74" pos:column="54"/></name></expr></argument>,
                            <comment type="block" pos:line="75" pos:column="29">/* in = */</comment> <argument><expr><name pos:line="75" pos:column="40">NULL<pos:position pos:line="75" pos:column="44"/></name></expr></argument>, <comment type="block" pos:line="75" pos:column="46">/* in len = */</comment> <argument><expr><literal type="number" pos:line="75" pos:column="61">0<pos:position pos:line="75" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="64"/></expr_stmt>
  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name pos:line="76" pos:column="7">err<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">!=<pos:position pos:line="76" pos:column="13"/></operator> <literal type="number" pos:line="76" pos:column="14">0<pos:position pos:line="76" pos:column="15"/></literal></expr>)<pos:position pos:line="76" pos:column="16"/></condition><then pos:line="76" pos:column="16"> <block pos:line="76" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">ERROR<pos:position pos:line="77" pos:column="10"/></name><argument_list pos:line="77" pos:column="10">(<argument><expr><literal type="string" pos:line="77" pos:column="11">"network plugin: gcry_cipher_decrypt returned: %s. Username: %s"<pos:position pos:line="77" pos:column="75"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="78" pos:column="11">gcry_strerror<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><name pos:line="78" pos:column="25">err<pos:position pos:line="78" pos:column="28"/></name></expr></argument>)<pos:position pos:line="78" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="31">pea<pos:position pos:line="78" pos:column="34"/></name><operator pos:line="78" pos:column="34">.<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="35">username<pos:position pos:line="78" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">sfree<pos:position pos:line="79" pos:column="10"/></name><argument_list pos:line="79" pos:column="10">(<argument><expr><name><name pos:line="79" pos:column="11">pea<pos:position pos:line="79" pos:column="14"/></name><operator pos:line="79" pos:column="14">.<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="15">username<pos:position pos:line="79" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="25"/></expr_stmt>
    <return pos:line="80" pos:column="5">return <expr><operator pos:line="80" pos:column="12">(<pos:position pos:line="80" pos:column="13"/></operator><operator pos:line="80" pos:column="13">-<pos:position pos:line="80" pos:column="14"/></operator><literal type="number" pos:line="80" pos:column="14">1<pos:position pos:line="80" pos:column="15"/></literal><operator pos:line="80" pos:column="15">)<pos:position pos:line="80" pos:column="16"/></operator></expr>;<pos:position pos:line="80" pos:column="17"/></return>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="83" pos:column="3">/* Read the hash */</comment>
  <expr_stmt><expr><call><name pos:line="84" pos:column="3">BUFFER_READ<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name><name pos:line="84" pos:column="15">pea<pos:position pos:line="84" pos:column="18"/></name><operator pos:line="84" pos:column="18">.<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="19">hash<pos:position pos:line="84" pos:column="23"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="25">sizeof<argument_list pos:line="84" pos:column="31">(<argument><expr><name><name pos:line="84" pos:column="32">pea<pos:position pos:line="84" pos:column="35"/></name><operator pos:line="84" pos:column="35">.<pos:position pos:line="84" pos:column="36"/></operator><name pos:line="84" pos:column="36">hash<pos:position pos:line="84" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="86" pos:column="3">/* Make sure we're at the right position - again */</comment>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">assert<pos:position pos:line="87" pos:column="9"/></name><argument_list pos:line="87" pos:column="9">(<argument><expr><name pos:line="87" pos:column="10">buffer_offset<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">==<pos:position pos:line="87" pos:column="26"/></operator> <operator pos:line="87" pos:column="27">(<pos:position pos:line="87" pos:column="28"/></operator><name pos:line="87" pos:column="28">username_len<pos:position pos:line="87" pos:column="40"/></name> <operator pos:line="87" pos:column="41">+<pos:position pos:line="87" pos:column="42"/></operator> <name pos:line="87" pos:column="43">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="87" pos:column="70"/></name><operator pos:line="87" pos:column="70">)<pos:position pos:line="87" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="87" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="73"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">assert<pos:position pos:line="88" pos:column="9"/></name><argument_list pos:line="88" pos:column="9">(<argument><expr><name pos:line="88" pos:column="10">buffer_offset<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">==<pos:position pos:line="88" pos:column="26"/></operator> <operator pos:line="88" pos:column="27">(<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="28">part_size<pos:position pos:line="88" pos:column="37"/></name> <operator pos:line="88" pos:column="38">-<pos:position pos:line="88" pos:column="39"/></operator> <name pos:line="88" pos:column="40">payload_len<pos:position pos:line="88" pos:column="51"/></name><operator pos:line="88" pos:column="51">)<pos:position pos:line="88" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="88" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="90" pos:column="3">/* Check hash sum */</comment>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">gcry_md_hash_buffer<pos:position pos:line="91" pos:column="22"/></name><argument_list pos:line="91" pos:column="22">(<argument><expr><name pos:line="91" pos:column="23">GCRY_MD_SHA1<pos:position pos:line="91" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="37">hash<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="43">buffer<pos:position pos:line="91" pos:column="49"/></name> <operator pos:line="91" pos:column="50">+<pos:position pos:line="91" pos:column="51"/></operator> <name pos:line="91" pos:column="52">buffer_offset<pos:position pos:line="91" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="67">payload_len<pos:position pos:line="91" pos:column="78"/></name></expr></argument>)<pos:position pos:line="91" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="80"/></expr_stmt>
  <if pos:line="92" pos:column="3">if <condition pos:line="92" pos:column="6">(<expr><call><name pos:line="92" pos:column="7">memcmp<pos:position pos:line="92" pos:column="13"/></name><argument_list pos:line="92" pos:column="13">(<argument><expr><name pos:line="92" pos:column="14">hash<pos:position pos:line="92" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="20">pea<pos:position pos:line="92" pos:column="23"/></name><operator pos:line="92" pos:column="23">.<pos:position pos:line="92" pos:column="24"/></operator><name pos:line="92" pos:column="24">hash<pos:position pos:line="92" pos:column="28"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="30">sizeof<argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">hash<pos:position pos:line="92" pos:column="41"/></name></expr></argument>)<pos:position pos:line="92" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call> <operator pos:line="92" pos:column="44">!=<pos:position pos:line="92" pos:column="46"/></operator> <literal type="number" pos:line="92" pos:column="47">0<pos:position pos:line="92" pos:column="48"/></literal></expr>)<pos:position pos:line="92" pos:column="49"/></condition><then pos:line="92" pos:column="49"> <block pos:line="92" pos:column="50">{
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">ERROR<pos:position pos:line="93" pos:column="10"/></name><argument_list pos:line="93" pos:column="10">(<argument><expr><literal type="string" pos:line="93" pos:column="11">"network plugin: Checksum mismatch. Username: %s"<pos:position pos:line="93" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="62">pea<pos:position pos:line="93" pos:column="65"/></name><operator pos:line="93" pos:column="65">.<pos:position pos:line="93" pos:column="66"/></operator><name pos:line="93" pos:column="66">username<pos:position pos:line="93" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">sfree<pos:position pos:line="94" pos:column="10"/></name><argument_list pos:line="94" pos:column="10">(<argument><expr><name><name pos:line="94" pos:column="11">pea<pos:position pos:line="94" pos:column="14"/></name><operator pos:line="94" pos:column="14">.<pos:position pos:line="94" pos:column="15"/></operator><name pos:line="94" pos:column="15">username<pos:position pos:line="94" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>
    <return pos:line="95" pos:column="5">return <expr><operator pos:line="95" pos:column="12">(<pos:position pos:line="95" pos:column="13"/></operator><operator pos:line="95" pos:column="13">-<pos:position pos:line="95" pos:column="14"/></operator><literal type="number" pos:line="95" pos:column="14">1<pos:position pos:line="95" pos:column="15"/></literal><operator pos:line="95" pos:column="15">)<pos:position pos:line="95" pos:column="16"/></operator></expr>;<pos:position pos:line="95" pos:column="17"/></return>
  }<pos:position pos:line="96" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="98" pos:column="3">parse_packet<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name pos:line="98" pos:column="16">se<pos:position pos:line="98" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="20">buffer<pos:position pos:line="98" pos:column="26"/></name> <operator pos:line="98" pos:column="27">+<pos:position pos:line="98" pos:column="28"/></operator> <name pos:line="98" pos:column="29">buffer_offset<pos:position pos:line="98" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="44">payload_len<pos:position pos:line="98" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="57">flags<pos:position pos:line="98" pos:column="62"/></name> <operator pos:line="98" pos:column="63">|<pos:position pos:line="98" pos:column="64"/></operator> <name pos:line="98" pos:column="65">PP_ENCRYPTED<pos:position pos:line="98" pos:column="77"/></name></expr></argument>,
               <argument><expr><name><name pos:line="99" pos:column="16">pea<pos:position pos:line="99" pos:column="19"/></name><operator pos:line="99" pos:column="19">.<pos:position pos:line="99" pos:column="20"/></operator><name pos:line="99" pos:column="20">username<pos:position pos:line="99" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="101" pos:column="3">/* Update return values */</comment>
  <expr_stmt><expr><operator pos:line="102" pos:column="3">*<pos:position pos:line="102" pos:column="4"/></operator><name pos:line="102" pos:column="4">ret_buffer<pos:position pos:line="102" pos:column="14"/></name> <operator pos:line="102" pos:column="15">=<pos:position pos:line="102" pos:column="16"/></operator> <name pos:line="102" pos:column="17">buffer<pos:position pos:line="102" pos:column="23"/></name> <operator pos:line="102" pos:column="24">+<pos:position pos:line="102" pos:column="25"/></operator> <name pos:line="102" pos:column="26">part_size<pos:position pos:line="102" pos:column="35"/></name></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="103" pos:column="3">*<pos:position pos:line="103" pos:column="4"/></operator><name pos:line="103" pos:column="4">ret_buffer_len<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">=<pos:position pos:line="103" pos:column="20"/></operator> <name pos:line="103" pos:column="21">buffer_len<pos:position pos:line="103" pos:column="31"/></name> <operator pos:line="103" pos:column="32">-<pos:position pos:line="103" pos:column="33"/></operator> <name pos:line="103" pos:column="34">part_size<pos:position pos:line="103" pos:column="43"/></name></expr>;<pos:position pos:line="103" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="105" pos:column="3">sfree<pos:position pos:line="105" pos:column="8"/></name><argument_list pos:line="105" pos:column="8">(<argument><expr><name><name pos:line="105" pos:column="9">pea<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">.<pos:position pos:line="105" pos:column="13"/></operator><name pos:line="105" pos:column="13">username<pos:position pos:line="105" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="23"/></expr_stmt>

  <return pos:line="107" pos:column="3">return <expr><operator pos:line="107" pos:column="10">(<pos:position pos:line="107" pos:column="11"/></operator><literal type="number" pos:line="107" pos:column="11">0<pos:position pos:line="107" pos:column="12"/></literal><operator pos:line="107" pos:column="12">)<pos:position pos:line="107" pos:column="13"/></operator></expr>;<pos:position pos:line="107" pos:column="14"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
