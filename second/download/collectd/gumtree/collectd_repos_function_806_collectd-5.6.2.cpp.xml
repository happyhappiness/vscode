<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_806_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">collect<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">arg<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">collector_t<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">this<pos:position pos:line="2" pos:column="20"/></name> <init pos:line="2" pos:column="21">= <expr><operator pos:line="2" pos:column="23">(<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">collector_t<pos:position pos:line="2" pos:column="35"/></name> <operator pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></operator><operator pos:line="2" pos:column="37">)<pos:position pos:line="2" pos:column="38"/></operator><name pos:line="2" pos:column="38">arg<pos:position pos:line="2" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="42"/></decl_stmt>

  <while pos:line="4" pos:column="3">while <condition pos:line="4" pos:column="9">(<expr><literal type="number" pos:line="4" pos:column="10">1<pos:position pos:line="4" pos:column="11"/></literal></expr>)<pos:position pos:line="4" pos:column="12"/></condition> <block pos:line="4" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">conn_t<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">connection<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">pthread_mutex_lock<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="25">conns_mutex<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <name><name pos:line="9" pos:column="20">conns<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">head<pos:position pos:line="9" pos:column="30"/></name></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition> <block pos:line="9" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">pthread_cond_wait<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><operator pos:line="10" pos:column="25">&amp;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="26">conn_available<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="42">&amp;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="43">conns_mutex<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="13" pos:column="5">connection<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">conns<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">head<pos:position pos:line="13" pos:column="28"/></name></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">conns<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">.<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">head<pos:position pos:line="14" pos:column="15"/></name></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <name><name pos:line="14" pos:column="18">conns<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">.<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">head<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">next<pos:position pos:line="14" pos:column="34"/></name></name></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">NULL<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">==<pos:position pos:line="16" pos:column="16"/></operator> <name><name pos:line="16" pos:column="17">conns<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">head<pos:position pos:line="16" pos:column="27"/></name></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28"> <block pos:line="16" pos:column="29">{
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">conns<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">tail<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">pthread_mutex_unlock<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><operator pos:line="20" pos:column="26">&amp;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="27">conns_mutex<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* make the socket available to the global
     * thread and connection management */</comment>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">this<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">socket<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name><name pos:line="24" pos:column="20">connection<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">socket<pos:position pos:line="24" pos:column="38"/></name></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">log_debug<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><literal type="string" pos:line="26" pos:column="15">"collect: handling connection on fd #%i"<pos:position pos:line="26" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="57">fileno<pos:position pos:line="26" pos:column="63"/></name><argument_list pos:line="26" pos:column="63">(<argument><expr><name><name pos:line="26" pos:column="64">this<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">-&gt;<pos:position pos:line="26" pos:column="73"/></operator><name pos:line="26" pos:column="70">socket<pos:position pos:line="26" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="79"/></expr_stmt>

    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><literal type="number" pos:line="28" pos:column="12">42<pos:position pos:line="28" pos:column="14"/></literal></expr>)<pos:position pos:line="28" pos:column="15"/></condition> <block pos:line="28" pos:column="16">{
      <comment type="block" pos:line="29" pos:column="7">/* 256 bytes ought to be enough for anybody ;-) */</comment>
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">char<pos:position pos:line="30" pos:column="11"/></name></type> <name><name pos:line="30" pos:column="12">line<pos:position pos:line="30" pos:column="16"/></name><index pos:line="30" pos:column="16">[<expr><literal type="number" pos:line="30" pos:column="17">256<pos:position pos:line="30" pos:column="20"/></literal> <operator pos:line="30" pos:column="21">+<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="23">1<pos:position pos:line="30" pos:column="24"/></literal></expr>]<pos:position pos:line="30" pos:column="25"/></index></name></decl>;<pos:position pos:line="30" pos:column="26"/></decl_stmt> <comment type="block" pos:line="30" pos:column="27">/* line + '\0' */</comment>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">int<pos:position pos:line="31" pos:column="10"/></name></type> <name pos:line="31" pos:column="11">len<pos:position pos:line="31" pos:column="14"/></name> <init pos:line="31" pos:column="15">= <expr><literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="19"/></decl_stmt>

      <expr_stmt><expr><name pos:line="33" pos:column="7">errno<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><name pos:line="34" pos:column="11">NULL<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">==<pos:position pos:line="34" pos:column="18"/></operator> <call><name pos:line="34" pos:column="19">fgets<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">line<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="31">sizeof<argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">line<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="45">this<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">socket<pos:position pos:line="34" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="59"/></condition><then pos:line="34" pos:column="59"> <block pos:line="34" pos:column="60">{
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal> <operator pos:line="35" pos:column="15">!=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">errno<pos:position pos:line="35" pos:column="23"/></name></expr>)<pos:position pos:line="35" pos:column="24"/></condition><then pos:line="35" pos:column="24"> <block pos:line="35" pos:column="25">{
          <decl_stmt><decl><type><name pos:line="36" pos:column="11">char<pos:position pos:line="36" pos:column="15"/></name></type> <name><name pos:line="36" pos:column="16">errbuf<pos:position pos:line="36" pos:column="22"/></name><index pos:line="36" pos:column="22">[<expr><literal type="number" pos:line="36" pos:column="23">1024<pos:position pos:line="36" pos:column="27"/></literal></expr>]<pos:position pos:line="36" pos:column="28"/></index></name></decl>;<pos:position pos:line="36" pos:column="29"/></decl_stmt>
          <expr_stmt><expr><call><name pos:line="37" pos:column="11">log_err<pos:position pos:line="37" pos:column="18"/></name><argument_list pos:line="37" pos:column="18">(<argument><expr><literal type="string" pos:line="37" pos:column="19">"collect: reading from socket (fd #%i) "<pos:position pos:line="37" pos:column="59"/></literal>
                  <literal type="string" pos:line="38" pos:column="19">"failed: %s"<pos:position pos:line="38" pos:column="31"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="39" pos:column="19">fileno<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name><name pos:line="39" pos:column="26">this<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">-&gt;<pos:position pos:line="39" pos:column="35"/></operator><name pos:line="39" pos:column="32">socket<pos:position pos:line="39" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr></argument>,
                  <argument><expr><call><name pos:line="40" pos:column="19">sstrerror<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">errno<pos:position pos:line="40" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="36">errbuf<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="44">sizeof<argument_list pos:line="40" pos:column="50">(<argument><expr><name pos:line="40" pos:column="51">errbuf<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
        <break pos:line="42" pos:column="9">break;<pos:position pos:line="42" pos:column="15"/></break>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="45" pos:column="7">len<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <call><name pos:line="45" pos:column="13">strlen<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">line<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><operator pos:line="46" pos:column="11">(<pos:position pos:line="46" pos:column="12"/></operator><literal type="char" pos:line="46" pos:column="12">'\n'<pos:position pos:line="46" pos:column="16"/></literal> <operator pos:line="46" pos:column="17">!=<pos:position pos:line="46" pos:column="19"/></operator> <name><name pos:line="46" pos:column="20">line<pos:position pos:line="46" pos:column="24"/></name><index pos:line="46" pos:column="24">[<expr><name pos:line="46" pos:column="25">len<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">-<pos:position pos:line="46" pos:column="30"/></operator> <literal type="number" pos:line="46" pos:column="31">1<pos:position pos:line="46" pos:column="32"/></literal></expr>]<pos:position pos:line="46" pos:column="33"/></index></name><operator pos:line="46" pos:column="33">)<pos:position pos:line="46" pos:column="34"/></operator> <operator pos:line="46" pos:column="35">&amp;&amp;<pos:position pos:line="46" pos:column="45"/></operator> <operator pos:line="46" pos:column="38">(<pos:position pos:line="46" pos:column="39"/></operator><literal type="char" pos:line="46" pos:column="39">'\r'<pos:position pos:line="46" pos:column="43"/></literal> <operator pos:line="46" pos:column="44">!=<pos:position pos:line="46" pos:column="46"/></operator> <name><name pos:line="46" pos:column="47">line<pos:position pos:line="46" pos:column="51"/></name><index pos:line="46" pos:column="51">[<expr><name pos:line="46" pos:column="52">len<pos:position pos:line="46" pos:column="55"/></name> <operator pos:line="46" pos:column="56">-<pos:position pos:line="46" pos:column="57"/></operator> <literal type="number" pos:line="46" pos:column="58">1<pos:position pos:line="46" pos:column="59"/></literal></expr>]<pos:position pos:line="46" pos:column="60"/></index></name><operator pos:line="46" pos:column="60">)<pos:position pos:line="46" pos:column="61"/></operator></expr>)<pos:position pos:line="46" pos:column="62"/></condition><then pos:line="46" pos:column="62"> <block pos:line="46" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">log_warn<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><literal type="string" pos:line="47" pos:column="18">"collect: line too long (&gt; %zu characters): "<pos:position pos:line="47" pos:column="66"/></literal>
                 <literal type="string" pos:line="48" pos:column="18">"'%s' (truncated)"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>,
                 <argument><expr><sizeof pos:line="49" pos:column="18">sizeof<argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">line<pos:position pos:line="49" pos:column="29"/></name></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></sizeof> <operator pos:line="49" pos:column="31">-<pos:position pos:line="49" pos:column="32"/></operator> <literal type="number" pos:line="49" pos:column="33">1<pos:position pos:line="49" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="36">line<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>

        <while pos:line="51" pos:column="9">while <condition pos:line="51" pos:column="15">(<expr><name pos:line="51" pos:column="16">NULL<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">!=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">fgets<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">line<pos:position pos:line="51" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="36">sizeof<argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">line<pos:position pos:line="51" pos:column="47"/></name></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="50">this<pos:position pos:line="51" pos:column="54"/></name><operator pos:line="51" pos:column="54">-&gt;<pos:position pos:line="51" pos:column="59"/></operator><name pos:line="51" pos:column="56">socket<pos:position pos:line="51" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="64"/></condition>
          <block type="pseudo"><if pos:line="52" pos:column="11">if <condition pos:line="52" pos:column="14">(<expr><operator pos:line="52" pos:column="15">(<pos:position pos:line="52" pos:column="16"/></operator><literal type="char" pos:line="52" pos:column="16">'\n'<pos:position pos:line="52" pos:column="20"/></literal> <operator pos:line="52" pos:column="21">==<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="24">line<pos:position pos:line="52" pos:column="28"/></name><index pos:line="52" pos:column="28">[<expr><name pos:line="52" pos:column="29">len<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">-<pos:position pos:line="52" pos:column="34"/></operator> <literal type="number" pos:line="52" pos:column="35">1<pos:position pos:line="52" pos:column="36"/></literal></expr>]<pos:position pos:line="52" pos:column="37"/></index></name><operator pos:line="52" pos:column="37">)<pos:position pos:line="52" pos:column="38"/></operator> <operator pos:line="52" pos:column="39">||<pos:position pos:line="52" pos:column="41"/></operator> <operator pos:line="52" pos:column="42">(<pos:position pos:line="52" pos:column="43"/></operator><literal type="char" pos:line="52" pos:column="43">'\r'<pos:position pos:line="52" pos:column="47"/></literal> <operator pos:line="52" pos:column="48">==<pos:position pos:line="52" pos:column="50"/></operator> <name><name pos:line="52" pos:column="51">line<pos:position pos:line="52" pos:column="55"/></name><index pos:line="52" pos:column="55">[<expr><name pos:line="52" pos:column="56">len<pos:position pos:line="52" pos:column="59"/></name> <operator pos:line="52" pos:column="60">-<pos:position pos:line="52" pos:column="61"/></operator> <literal type="number" pos:line="52" pos:column="62">1<pos:position pos:line="52" pos:column="63"/></literal></expr>]<pos:position pos:line="52" pos:column="64"/></index></name><operator pos:line="52" pos:column="64">)<pos:position pos:line="52" pos:column="65"/></operator></expr>)<pos:position pos:line="52" pos:column="66"/></condition><then pos:line="52" pos:column="66">
            <block type="pseudo"><break pos:line="53" pos:column="13">break;<pos:position pos:line="53" pos:column="19"/></break></block></then></if></block></while>
        <continue pos:line="54" pos:column="9">continue;<pos:position pos:line="54" pos:column="18"/></continue>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>
      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><name pos:line="56" pos:column="11">len<pos:position pos:line="56" pos:column="14"/></name> <operator pos:line="56" pos:column="15">&lt;<pos:position pos:line="56" pos:column="19"/></operator> <literal type="number" pos:line="56" pos:column="17">3<pos:position pos:line="56" pos:column="18"/></literal></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19"> <block pos:line="56" pos:column="20">{ <comment type="block" pos:line="56" pos:column="22">/* [a-z] ':' '\n' */</comment>
        <continue pos:line="57" pos:column="9">continue;<pos:position pos:line="57" pos:column="18"/></continue>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="60" pos:column="7">line<pos:position pos:line="60" pos:column="11"/></name><index pos:line="60" pos:column="11">[<expr><name pos:line="60" pos:column="12">len<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">-<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">1<pos:position pos:line="60" pos:column="19"/></literal></expr>]<pos:position pos:line="60" pos:column="20"/></index></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <literal type="number" pos:line="60" pos:column="23">0<pos:position pos:line="60" pos:column="24"/></literal></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="62" pos:column="7">log_debug<pos:position pos:line="62" pos:column="16"/></name><argument_list pos:line="62" pos:column="16">(<argument><expr><literal type="string" pos:line="62" pos:column="17">"collect: line = '%s'"<pos:position pos:line="62" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="41">line<pos:position pos:line="62" pos:column="45"/></name></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="47"/></expr_stmt>

      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><literal type="char" pos:line="64" pos:column="11">':'<pos:position pos:line="64" pos:column="14"/></literal> <operator pos:line="64" pos:column="15">!=<pos:position pos:line="64" pos:column="17"/></operator> <name><name pos:line="64" pos:column="18">line<pos:position pos:line="64" pos:column="22"/></name><index pos:line="64" pos:column="22">[<expr><literal type="number" pos:line="64" pos:column="23">1<pos:position pos:line="64" pos:column="24"/></literal></expr>]<pos:position pos:line="64" pos:column="25"/></index></name></expr>)<pos:position pos:line="64" pos:column="26"/></condition><then pos:line="64" pos:column="26"> <block pos:line="64" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">log_err<pos:position pos:line="65" pos:column="16"/></name><argument_list pos:line="65" pos:column="16">(<argument><expr><literal type="string" pos:line="65" pos:column="17">"collect: syntax error in line '%s'"<pos:position pos:line="65" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="55">line<pos:position pos:line="65" pos:column="59"/></name></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt>
        <continue pos:line="66" pos:column="9">continue;<pos:position pos:line="66" pos:column="18"/></continue>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>

      <if pos:line="69" pos:column="7">if <condition pos:line="69" pos:column="10">(<expr><literal type="char" pos:line="69" pos:column="11">'e'<pos:position pos:line="69" pos:column="14"/></literal> <operator pos:line="69" pos:column="15">==<pos:position pos:line="69" pos:column="17"/></operator> <name><name pos:line="69" pos:column="18">line<pos:position pos:line="69" pos:column="22"/></name><index pos:line="69" pos:column="22">[<expr><literal type="number" pos:line="69" pos:column="23">0<pos:position pos:line="69" pos:column="24"/></literal></expr>]<pos:position pos:line="69" pos:column="25"/></index></name></expr>)<pos:position pos:line="69" pos:column="26"/></condition><then pos:line="69" pos:column="26"> <block pos:line="69" pos:column="27">{ <comment type="block" pos:line="69" pos:column="29">/* e:&lt;type&gt;:&lt;bytes&gt; */</comment>
        <decl_stmt><decl><type><name pos:line="70" pos:column="9">char<pos:position pos:line="70" pos:column="13"/></name> <modifier pos:line="70" pos:column="14">*<pos:position pos:line="70" pos:column="15"/></modifier></type><name pos:line="70" pos:column="15">ptr<pos:position pos:line="70" pos:column="18"/></name> <init pos:line="70" pos:column="19">= <expr><name pos:line="70" pos:column="21">NULL<pos:position pos:line="70" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="71" pos:column="9">char<pos:position pos:line="71" pos:column="13"/></name> <modifier pos:line="71" pos:column="14">*<pos:position pos:line="71" pos:column="15"/></modifier></type><name pos:line="71" pos:column="15">type<pos:position pos:line="71" pos:column="19"/></name> <init pos:line="71" pos:column="20">= <expr><call><name pos:line="71" pos:column="22">strtok_r<pos:position pos:line="71" pos:column="30"/></name><argument_list pos:line="71" pos:column="30">(<argument><expr><name pos:line="71" pos:column="31">line<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">+<pos:position pos:line="71" pos:column="37"/></operator> <literal type="number" pos:line="71" pos:column="38">2<pos:position pos:line="71" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="41">":"<pos:position pos:line="71" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="71" pos:column="46">&amp;<pos:position pos:line="71" pos:column="51"/></operator><name pos:line="71" pos:column="47">ptr<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="71" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="72" pos:column="9">char<pos:position pos:line="72" pos:column="13"/></name> <modifier pos:line="72" pos:column="14">*<pos:position pos:line="72" pos:column="15"/></modifier></type><name pos:line="72" pos:column="15">tmp<pos:position pos:line="72" pos:column="18"/></name> <init pos:line="72" pos:column="19">= <expr><call><name pos:line="72" pos:column="21">strtok_r<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">NULL<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="36">":"<pos:position pos:line="72" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="72" pos:column="41">&amp;<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="42">ptr<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="73" pos:column="9">int<pos:position pos:line="73" pos:column="12"/></name></type> <name pos:line="73" pos:column="13">bytes<pos:position pos:line="73" pos:column="18"/></name> <init pos:line="73" pos:column="19">= <expr><literal type="number" pos:line="73" pos:column="21">0<pos:position pos:line="73" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="73" pos:column="23"/></decl_stmt>

        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">NULL<pos:position pos:line="75" pos:column="17"/></name> <operator pos:line="75" pos:column="18">==<pos:position pos:line="75" pos:column="20"/></operator> <name pos:line="75" pos:column="21">tmp<pos:position pos:line="75" pos:column="24"/></name></expr>)<pos:position pos:line="75" pos:column="25"/></condition><then pos:line="75" pos:column="25"> <block pos:line="75" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="76" pos:column="11">log_err<pos:position pos:line="76" pos:column="18"/></name><argument_list pos:line="76" pos:column="18">(<argument><expr><literal type="string" pos:line="76" pos:column="19">"collect: syntax error in line '%s'"<pos:position pos:line="76" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="57">line<pos:position pos:line="76" pos:column="61"/></name></expr></argument>)<pos:position pos:line="76" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="63"/></expr_stmt>
          <continue pos:line="77" pos:column="11">continue;<pos:position pos:line="77" pos:column="20"/></continue>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="80" pos:column="9">bytes<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">=<pos:position pos:line="80" pos:column="16"/></operator> <call><name pos:line="80" pos:column="17">atoi<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">tmp<pos:position pos:line="80" pos:column="25"/></name></expr></argument>)<pos:position pos:line="80" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="27"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="82" pos:column="9">pthread_mutex_lock<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><operator pos:line="82" pos:column="28">&amp;<pos:position pos:line="82" pos:column="33"/></operator><name pos:line="82" pos:column="29">count_mutex<pos:position pos:line="82" pos:column="40"/></name></expr></argument>)<pos:position pos:line="82" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">type_list_incr<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><operator pos:line="83" pos:column="24">&amp;<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="25">list_count<pos:position pos:line="83" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="37">type<pos:position pos:line="83" pos:column="41"/></name></expr></argument>, <comment type="block" pos:line="83" pos:column="43">/* increment = */</comment> <argument><expr><literal type="number" pos:line="83" pos:column="61">1<pos:position pos:line="83" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">pthread_mutex_unlock<pos:position pos:line="84" pos:column="29"/></name><argument_list pos:line="84" pos:column="29">(<argument><expr><operator pos:line="84" pos:column="30">&amp;<pos:position pos:line="84" pos:column="35"/></operator><name pos:line="84" pos:column="31">count_mutex<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt>

        <if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">bytes<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">&gt;<pos:position pos:line="86" pos:column="23"/></operator> <literal type="number" pos:line="86" pos:column="21">0<pos:position pos:line="86" pos:column="22"/></literal></expr>)<pos:position pos:line="86" pos:column="23"/></condition><then pos:line="86" pos:column="23"> <block pos:line="86" pos:column="24">{
          <expr_stmt><expr><call><name pos:line="87" pos:column="11">pthread_mutex_lock<pos:position pos:line="87" pos:column="29"/></name><argument_list pos:line="87" pos:column="29">(<argument><expr><operator pos:line="87" pos:column="30">&amp;<pos:position pos:line="87" pos:column="35"/></operator><name pos:line="87" pos:column="31">size_mutex<pos:position pos:line="87" pos:column="41"/></name></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="88" pos:column="11">type_list_incr<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><operator pos:line="88" pos:column="26">&amp;<pos:position pos:line="88" pos:column="31"/></operator><name pos:line="88" pos:column="27">list_size<pos:position pos:line="88" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="38">type<pos:position pos:line="88" pos:column="42"/></name></expr></argument>, <comment type="block" pos:line="88" pos:column="44">/* increment = */</comment> <argument><expr><name pos:line="88" pos:column="62">bytes<pos:position pos:line="88" pos:column="67"/></name></expr></argument>)<pos:position pos:line="88" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="69"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="89" pos:column="11">pthread_mutex_unlock<pos:position pos:line="89" pos:column="31"/></name><argument_list pos:line="89" pos:column="31">(<argument><expr><operator pos:line="89" pos:column="32">&amp;<pos:position pos:line="89" pos:column="37"/></operator><name pos:line="89" pos:column="33">size_mutex<pos:position pos:line="89" pos:column="43"/></name></expr></argument>)<pos:position pos:line="89" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></then></if>
      }<pos:position pos:line="91" pos:column="8"/></block></then> <elseif pos:line="91" pos:column="9">else <if pos:line="91" pos:column="14">if <condition pos:line="91" pos:column="17">(<expr><literal type="char" pos:line="91" pos:column="18">'s'<pos:position pos:line="91" pos:column="21"/></literal> <operator pos:line="91" pos:column="22">==<pos:position pos:line="91" pos:column="24"/></operator> <name><name pos:line="91" pos:column="25">line<pos:position pos:line="91" pos:column="29"/></name><index pos:line="91" pos:column="29">[<expr><literal type="number" pos:line="91" pos:column="30">0<pos:position pos:line="91" pos:column="31"/></literal></expr>]<pos:position pos:line="91" pos:column="32"/></index></name></expr>)<pos:position pos:line="91" pos:column="33"/></condition><then pos:line="91" pos:column="33"> <block pos:line="91" pos:column="34">{ <comment type="block" pos:line="91" pos:column="36">/* s:&lt;value&gt; */</comment>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">pthread_mutex_lock<pos:position pos:line="92" pos:column="27"/></name><argument_list pos:line="92" pos:column="27">(<argument><expr><operator pos:line="92" pos:column="28">&amp;<pos:position pos:line="92" pos:column="33"/></operator><name pos:line="92" pos:column="29">score_mutex<pos:position pos:line="92" pos:column="40"/></name></expr></argument>)<pos:position pos:line="92" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="93" pos:column="9">score<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <operator pos:line="93" pos:column="17">(<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="18">score<pos:position pos:line="93" pos:column="23"/></name> <operator pos:line="93" pos:column="24">*<pos:position pos:line="93" pos:column="25"/></operator> <operator pos:line="93" pos:column="26">(<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="27">double<pos:position pos:line="93" pos:column="33"/></name><operator pos:line="93" pos:column="33">)<pos:position pos:line="93" pos:column="34"/></operator><name pos:line="93" pos:column="34">score_count<pos:position pos:line="93" pos:column="45"/></name> <operator pos:line="93" pos:column="46">+<pos:position pos:line="93" pos:column="47"/></operator> <call><name pos:line="93" pos:column="48">atof<pos:position pos:line="93" pos:column="52"/></name><argument_list pos:line="93" pos:column="52">(<argument><expr><name pos:line="93" pos:column="53">line<pos:position pos:line="93" pos:column="57"/></name> <operator pos:line="93" pos:column="58">+<pos:position pos:line="93" pos:column="59"/></operator> <literal type="number" pos:line="93" pos:column="60">2<pos:position pos:line="93" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="62"/></argument_list></call><operator pos:line="93" pos:column="62">)<pos:position pos:line="93" pos:column="63"/></operator> <operator pos:line="93" pos:column="64">/<pos:position pos:line="93" pos:column="65"/></operator>
                <call pos:line="94" pos:column="17">(<name pos:line="94" pos:column="18">double<pos:position pos:line="94" pos:column="24"/></name>)<argument_list pos:line="94" pos:column="25">(<argument><expr><name pos:line="94" pos:column="26">score_count<pos:position pos:line="94" pos:column="37"/></name> <operator pos:line="94" pos:column="38">+<pos:position pos:line="94" pos:column="39"/></operator> <literal type="number" pos:line="94" pos:column="40">1<pos:position pos:line="94" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="95" pos:column="9">++<pos:position pos:line="95" pos:column="11"/></operator><name pos:line="95" pos:column="11">score_count<pos:position pos:line="95" pos:column="22"/></name></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">pthread_mutex_unlock<pos:position pos:line="96" pos:column="29"/></name><argument_list pos:line="96" pos:column="29">(<argument><expr><operator pos:line="96" pos:column="30">&amp;<pos:position pos:line="96" pos:column="35"/></operator><name pos:line="96" pos:column="31">score_mutex<pos:position pos:line="96" pos:column="42"/></name></expr></argument>)<pos:position pos:line="96" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if></elseif> <elseif pos:line="97" pos:column="9">else <if pos:line="97" pos:column="14">if <condition pos:line="97" pos:column="17">(<expr><literal type="char" pos:line="97" pos:column="18">'c'<pos:position pos:line="97" pos:column="21"/></literal> <operator pos:line="97" pos:column="22">==<pos:position pos:line="97" pos:column="24"/></operator> <name><name pos:line="97" pos:column="25">line<pos:position pos:line="97" pos:column="29"/></name><index pos:line="97" pos:column="29">[<expr><literal type="number" pos:line="97" pos:column="30">0<pos:position pos:line="97" pos:column="31"/></literal></expr>]<pos:position pos:line="97" pos:column="32"/></index></name></expr>)<pos:position pos:line="97" pos:column="33"/></condition><then pos:line="97" pos:column="33"> <block pos:line="97" pos:column="34">{ <comment type="block" pos:line="97" pos:column="36">/* c:&lt;type1&gt;[,&lt;type2&gt;,...] */</comment>
        <decl_stmt><decl><type><name pos:line="98" pos:column="9">char<pos:position pos:line="98" pos:column="13"/></name> <modifier pos:line="98" pos:column="14">*<pos:position pos:line="98" pos:column="15"/></modifier></type><name pos:line="98" pos:column="15">dummy<pos:position pos:line="98" pos:column="20"/></name> <init pos:line="98" pos:column="21">= <expr><name pos:line="98" pos:column="23">line<pos:position pos:line="98" pos:column="27"/></name> <operator pos:line="98" pos:column="28">+<pos:position pos:line="98" pos:column="29"/></operator> <literal type="number" pos:line="98" pos:column="30">2<pos:position pos:line="98" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="98" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="99" pos:column="9">char<pos:position pos:line="99" pos:column="13"/></name> <modifier pos:line="99" pos:column="14">*<pos:position pos:line="99" pos:column="15"/></modifier></type><name pos:line="99" pos:column="15">endptr<pos:position pos:line="99" pos:column="21"/></name> <init pos:line="99" pos:column="22">= <expr><name pos:line="99" pos:column="24">NULL<pos:position pos:line="99" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="99" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="100" pos:column="9">char<pos:position pos:line="100" pos:column="13"/></name> <modifier pos:line="100" pos:column="14">*<pos:position pos:line="100" pos:column="15"/></modifier></type><name pos:line="100" pos:column="15">type<pos:position pos:line="100" pos:column="19"/></name></decl>;<pos:position pos:line="100" pos:column="20"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="102" pos:column="9">pthread_mutex_lock<pos:position pos:line="102" pos:column="27"/></name><argument_list pos:line="102" pos:column="27">(<argument><expr><operator pos:line="102" pos:column="28">&amp;<pos:position pos:line="102" pos:column="33"/></operator><name pos:line="102" pos:column="29">check_mutex<pos:position pos:line="102" pos:column="40"/></name></expr></argument>)<pos:position pos:line="102" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="42"/></expr_stmt>
        <while pos:line="103" pos:column="9">while <condition pos:line="103" pos:column="15">(<expr><operator pos:line="103" pos:column="16">(<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="17">type<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">=<pos:position pos:line="103" pos:column="23"/></operator> <call><name pos:line="103" pos:column="24">strtok_r<pos:position pos:line="103" pos:column="32"/></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name pos:line="103" pos:column="33">dummy<pos:position pos:line="103" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="40">","<pos:position pos:line="103" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="103" pos:column="45">&amp;<pos:position pos:line="103" pos:column="50"/></operator><name pos:line="103" pos:column="46">endptr<pos:position pos:line="103" pos:column="52"/></name></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call><operator pos:line="103" pos:column="53">)<pos:position pos:line="103" pos:column="54"/></operator> <operator pos:line="103" pos:column="55">!=<pos:position pos:line="103" pos:column="57"/></operator> <name pos:line="103" pos:column="58">NULL<pos:position pos:line="103" pos:column="62"/></name></expr>)<pos:position pos:line="103" pos:column="63"/></condition> <block pos:line="103" pos:column="64">{
          <expr_stmt><expr><name pos:line="104" pos:column="11">dummy<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <name pos:line="104" pos:column="19">NULL<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="105" pos:column="11">type_list_incr<pos:position pos:line="105" pos:column="25"/></name><argument_list pos:line="105" pos:column="25">(<argument><expr><operator pos:line="105" pos:column="26">&amp;<pos:position pos:line="105" pos:column="31"/></operator><name pos:line="105" pos:column="27">list_check<pos:position pos:line="105" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="39">type<pos:position pos:line="105" pos:column="43"/></name></expr></argument>, <comment type="block" pos:line="105" pos:column="45">/* increment = */</comment> <argument><expr><literal type="number" pos:line="105" pos:column="63">1<pos:position pos:line="105" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="66"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></while>
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">pthread_mutex_unlock<pos:position pos:line="107" pos:column="29"/></name><argument_list pos:line="107" pos:column="29">(<argument><expr><operator pos:line="107" pos:column="30">&amp;<pos:position pos:line="107" pos:column="35"/></operator><name pos:line="107" pos:column="31">check_mutex<pos:position pos:line="107" pos:column="42"/></name></expr></argument>)<pos:position pos:line="107" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="108" pos:column="8"/></block></then></if></elseif> <else pos:line="108" pos:column="9">else <block pos:line="108" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">log_err<pos:position pos:line="109" pos:column="16"/></name><argument_list pos:line="109" pos:column="16">(<argument><expr><literal type="string" pos:line="109" pos:column="17">"collect: unknown type '%c'"<pos:position pos:line="109" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="47">line<pos:position pos:line="109" pos:column="51"/></name><index pos:line="109" pos:column="51">[<expr><literal type="number" pos:line="109" pos:column="52">0<pos:position pos:line="109" pos:column="53"/></literal></expr>]<pos:position pos:line="109" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="109" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="110" pos:column="8"/></block></else></if>
    }<pos:position pos:line="111" pos:column="6"/></block></while> <comment type="block" pos:line="111" pos:column="7">/* while (42) */</comment>

    <expr_stmt><expr><call><name pos:line="113" pos:column="5">log_debug<pos:position pos:line="113" pos:column="14"/></name><argument_list pos:line="113" pos:column="14">(<argument><expr><literal type="string" pos:line="113" pos:column="15">"Shutting down connection on fd #%i"<pos:position pos:line="113" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="113" pos:column="53">fileno<pos:position pos:line="113" pos:column="59"/></name><argument_list pos:line="113" pos:column="59">(<argument><expr><name><name pos:line="113" pos:column="60">this<pos:position pos:line="113" pos:column="64"/></name><operator pos:line="113" pos:column="64">-&gt;<pos:position pos:line="113" pos:column="69"/></operator><name pos:line="113" pos:column="66">socket<pos:position pos:line="113" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="75"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="115" pos:column="5">fclose<pos:position pos:line="115" pos:column="11"/></name><argument_list pos:line="115" pos:column="11">(<argument><expr><name><name pos:line="115" pos:column="12">connection<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">socket<pos:position pos:line="115" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="116" pos:column="5">free<pos:position pos:line="116" pos:column="9"/></name><argument_list pos:line="116" pos:column="9">(<argument><expr><name pos:line="116" pos:column="10">connection<pos:position pos:line="116" pos:column="20"/></name></expr></argument>)<pos:position pos:line="116" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="118" pos:column="5">this<pos:position pos:line="118" pos:column="9"/></name><operator pos:line="118" pos:column="9">-&gt;<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="11">socket<pos:position pos:line="118" pos:column="17"/></name></name> <operator pos:line="118" pos:column="18">=<pos:position pos:line="118" pos:column="19"/></operator> <name pos:line="118" pos:column="20">NULL<pos:position pos:line="118" pos:column="24"/></name></expr>;<pos:position pos:line="118" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="120" pos:column="5">pthread_mutex_lock<pos:position pos:line="120" pos:column="23"/></name><argument_list pos:line="120" pos:column="23">(<argument><expr><operator pos:line="120" pos:column="24">&amp;<pos:position pos:line="120" pos:column="29"/></operator><name pos:line="120" pos:column="25">available_mutex<pos:position pos:line="120" pos:column="40"/></name></expr></argument>)<pos:position pos:line="120" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="121" pos:column="5">++<pos:position pos:line="121" pos:column="7"/></operator><name pos:line="121" pos:column="7">available_collectors<pos:position pos:line="121" pos:column="27"/></name></expr>;<pos:position pos:line="121" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="122" pos:column="5">pthread_mutex_unlock<pos:position pos:line="122" pos:column="25"/></name><argument_list pos:line="122" pos:column="25">(<argument><expr><operator pos:line="122" pos:column="26">&amp;<pos:position pos:line="122" pos:column="31"/></operator><name pos:line="122" pos:column="27">available_mutex<pos:position pos:line="122" pos:column="42"/></name></expr></argument>)<pos:position pos:line="122" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="124" pos:column="5">pthread_cond_signal<pos:position pos:line="124" pos:column="24"/></name><argument_list pos:line="124" pos:column="24">(<argument><expr><operator pos:line="124" pos:column="25">&amp;<pos:position pos:line="124" pos:column="30"/></operator><name pos:line="124" pos:column="26">collector_available<pos:position pos:line="124" pos:column="45"/></name></expr></argument>)<pos:position pos:line="124" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="125" pos:column="4"/></block></while> <comment type="block" pos:line="125" pos:column="5">/* while (1) */</comment>

  <expr_stmt><expr><call><name pos:line="127" pos:column="3">pthread_exit<pos:position pos:line="127" pos:column="15"/></name><argument_list pos:line="127" pos:column="15">(<argument><expr><operator pos:line="127" pos:column="16">(<pos:position pos:line="127" pos:column="17"/></operator><name pos:line="127" pos:column="17">void<pos:position pos:line="127" pos:column="21"/></name> <operator pos:line="127" pos:column="22">*<pos:position pos:line="127" pos:column="23"/></operator><operator pos:line="127" pos:column="23">)<pos:position pos:line="127" pos:column="24"/></operator><literal type="number" pos:line="127" pos:column="24">0<pos:position pos:line="127" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="27"/></expr_stmt>
  <return pos:line="128" pos:column="3">return <expr><operator pos:line="128" pos:column="10">(<pos:position pos:line="128" pos:column="11"/></operator><operator pos:line="128" pos:column="11">(<pos:position pos:line="128" pos:column="12"/></operator><name pos:line="128" pos:column="12">void<pos:position pos:line="128" pos:column="16"/></name> <operator pos:line="128" pos:column="17">*<pos:position pos:line="128" pos:column="18"/></operator><operator pos:line="128" pos:column="18">)<pos:position pos:line="128" pos:column="19"/></operator><literal type="number" pos:line="128" pos:column="19">0<pos:position pos:line="128" pos:column="20"/></literal><operator pos:line="128" pos:column="20">)<pos:position pos:line="128" pos:column="21"/></operator></expr>;<pos:position pos:line="128" pos:column="22"/></return>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
