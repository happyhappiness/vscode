<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1323_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">grpc<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">string<pos:position pos:line="1" pos:column="20"/></name></name></type> <name pos:line="1" pos:column="21">read_file<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">filename<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">std<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">ifstream<pos:position pos:line="2" pos:column="16"/></name></name></type> <name pos:line="2" pos:column="17">f<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">grpc<pos:position pos:line="3" pos:column="7"/></name><operator pos:line="3" pos:column="7">::<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">string<pos:position pos:line="3" pos:column="15"/></name></name></type> <name pos:line="3" pos:column="16">s<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">content<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name><name pos:line="5" pos:column="3">f<pos:position pos:line="5" pos:column="4"/></name><operator pos:line="5" pos:column="4">.<pos:position pos:line="5" pos:column="5"/></operator><name pos:line="5" pos:column="5">open<pos:position pos:line="5" pos:column="9"/></name></name><argument_list pos:line="5" pos:column="9">(<argument><expr><name pos:line="5" pos:column="10">filename<pos:position pos:line="5" pos:column="18"/></name></expr></argument>)<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><call><name><name pos:line="6" pos:column="8">f<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">.<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">is_open<pos:position pos:line="6" pos:column="17"/></name></name><argument_list pos:line="6" pos:column="17">()<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ERROR<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><literal type="string" pos:line="7" pos:column="11">"grpc: Failed to open '%s'"<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="40">filename<pos:position pos:line="7" pos:column="48"/></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><literal type="string" pos:line="8" pos:column="12">""<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><call><name><name pos:line="11" pos:column="10">std<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">::<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">getline<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">f<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">s<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="29"/></condition> <block pos:line="11" pos:column="30">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">content<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">+=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">s<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">content<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">.<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">push_back<pos:position pos:line="13" pos:column="22"/></name></name><argument_list pos:line="13" pos:column="22">(<argument><expr><literal type="char" pos:line="13" pos:column="23">'\n'<pos:position pos:line="13" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name><name pos:line="15" pos:column="3">f<pos:position pos:line="15" pos:column="4"/></name><operator pos:line="15" pos:column="4">.<pos:position pos:line="15" pos:column="5"/></operator><name pos:line="15" pos:column="5">close<pos:position pos:line="15" pos:column="10"/></name></name><argument_list pos:line="15" pos:column="10">()<pos:position pos:line="15" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
  <return pos:line="16" pos:column="3">return <expr><name pos:line="16" pos:column="10">content<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
