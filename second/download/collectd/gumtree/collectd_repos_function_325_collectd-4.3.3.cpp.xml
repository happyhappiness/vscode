<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_325_collectd-4.3.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">rfc1035NameUnpack<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">buf<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">size_t<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">sz<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">off_t<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type> <name pos:line="2" pos:column="55">off<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">name<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="72">size_t<pos:position pos:line="2" pos:column="78"/></name></type> <name pos:line="2" pos:column="79">ns<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>
)<pos:position pos:line="3" pos:column="2"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">off_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">no<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">c<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">len<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">ns<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">&gt;<pos:position pos:line="8" pos:column="19"/></operator> <literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>
    <do pos:line="9" pos:column="5">do <block pos:line="9" pos:column="8">{
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><operator pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">off<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">)<pos:position pos:line="10" pos:column="19"/></operator> <operator pos:line="10" pos:column="20">&gt;=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="23">sz<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26">
	    <block type="pseudo"><break pos:line="11" pos:column="13">break;<pos:position pos:line="11" pos:column="19"/></break></block></then></if>
	<expr_stmt><expr><name pos:line="12" pos:column="9">c<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <operator pos:line="12" pos:column="13">*<pos:position pos:line="12" pos:column="14"/></operator><operator pos:line="12" pos:column="14">(<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">buf<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">+<pos:position pos:line="12" pos:column="20"/></operator> <operator pos:line="12" pos:column="21">(<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">off<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">c<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&gt;<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="17">191<pos:position pos:line="13" pos:column="20"/></literal></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
	    <comment type="block" pos:line="14" pos:column="13">/* blasted compression */</comment>
	    <decl_stmt><decl><type><name pos:line="15" pos:column="13">unsigned<pos:position pos:line="15" pos:column="21"/></name> <name pos:line="15" pos:column="22">short<pos:position pos:line="15" pos:column="27"/></name></type> <name pos:line="15" pos:column="28">s<pos:position pos:line="15" pos:column="29"/></name></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
	    <decl_stmt><decl><type><name pos:line="16" pos:column="13">off_t<pos:position pos:line="16" pos:column="18"/></name></type> <name pos:line="16" pos:column="19">ptr<pos:position pos:line="16" pos:column="22"/></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
	    <expr_stmt><expr><call><name pos:line="17" pos:column="13">memcpy<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><operator pos:line="17" pos:column="20">&amp;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="21">s<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="24">buf<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">+<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><operator pos:line="17" pos:column="31">*<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">off<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">)<pos:position pos:line="17" pos:column="36"/></operator></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="38">sizeof<argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">s<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="18" pos:column="13">s<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">ntohs<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">s<pos:position pos:line="18" pos:column="24"/></name></expr></argument>)<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
	    <expr_stmt><expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><operator pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">off<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">)<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">+=<pos:position pos:line="19" pos:column="22"/></operator> <sizeof pos:line="19" pos:column="23">sizeof<argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">s<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></sizeof></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
	    <comment type="block" pos:line="20" pos:column="13">/* Sanity check */</comment>
	    <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><operator pos:line="21" pos:column="18">*<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">off<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">)<pos:position pos:line="21" pos:column="23"/></operator> <operator pos:line="21" pos:column="24">&gt;=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="27">sz<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">1<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return></block></then></if>
	    <expr_stmt><expr><name pos:line="23" pos:column="13">ptr<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">s<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">&amp;<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="23">0x3FFF<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
	    <comment type="block" pos:line="24" pos:column="13">/* Make sure the pointer is inside this message */</comment>
	    <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">ptr<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&gt;=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="24">sz<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">2<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if>
	    <return pos:line="27" pos:column="13">return <expr><call><name pos:line="27" pos:column="20">rfc1035NameUnpack<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">buf<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">sz<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="47">&amp;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="48">ptr<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="53">name<pos:position pos:line="27" pos:column="57"/></name> <operator pos:line="27" pos:column="58">+<pos:position pos:line="27" pos:column="59"/></operator> <name pos:line="27" pos:column="60">no<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="64">ns<pos:position pos:line="27" pos:column="66"/></name> <operator pos:line="27" pos:column="67">-<pos:position pos:line="27" pos:column="68"/></operator> <name pos:line="27" pos:column="69">no<pos:position pos:line="27" pos:column="71"/></name></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><name pos:line="28" pos:column="20">c<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">&gt;<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="24">RFC1035_MAXLABELSZ<pos:position pos:line="28" pos:column="42"/></name></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <block pos:line="28" pos:column="44">{
	    <comment type="block" pos:line="29" pos:column="13">/*
	     * "(The 10 and 01 combinations are reserved for future use.)"
	     */</comment>
	    <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
	    <return pos:line="33" pos:column="13">return <expr><literal type="number" pos:line="33" pos:column="20">3<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif> <else pos:line="34" pos:column="11">else <block pos:line="34" pos:column="16">{
	    <expr_stmt><expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><operator pos:line="35" pos:column="14">*<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">off<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">)<pos:position pos:line="35" pos:column="19"/></operator><operator pos:line="35" pos:column="19">++<pos:position pos:line="35" pos:column="21"/></operator></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="36" pos:column="13">len<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <operator pos:line="36" pos:column="19">(<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">size_t<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="28">c<pos:position pos:line="36" pos:column="29"/></name></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
	    <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><name pos:line="37" pos:column="17">len<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">==<pos:position pos:line="37" pos:column="23"/></operator> <literal type="number" pos:line="37" pos:column="24">0<pos:position pos:line="37" pos:column="25"/></literal></expr>)<pos:position pos:line="37" pos:column="26"/></condition><then pos:line="37" pos:column="26">
		<block type="pseudo"><break pos:line="38" pos:column="17">break;<pos:position pos:line="38" pos:column="23"/></break></block></then></if>
	    <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">len<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">&gt;<pos:position pos:line="39" pos:column="25"/></operator> <operator pos:line="39" pos:column="23">(<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">ns<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">-<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="29">1<pos:position pos:line="39" pos:column="30"/></literal><operator pos:line="39" pos:column="30">)<pos:position pos:line="39" pos:column="31"/></operator></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">len<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="23">ns<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">-<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="28">1<pos:position pos:line="40" pos:column="29"/></literal></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt></block></then></if>
	    <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><operator pos:line="41" pos:column="17">(<pos:position pos:line="41" pos:column="18"/></operator><operator pos:line="41" pos:column="18">*<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">off<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">)<pos:position pos:line="41" pos:column="23"/></operator> <operator pos:line="41" pos:column="24">+<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">len<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">&gt;<pos:position pos:line="41" pos:column="34"/></operator> <name pos:line="41" pos:column="32">sz<pos:position pos:line="41" pos:column="34"/></name></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35">	<comment type="block" pos:line="41" pos:column="41">/* message is too short */</comment>
		<block type="pseudo"><return pos:line="42" pos:column="17">return <expr><literal type="number" pos:line="42" pos:column="24">4<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return></block></then></if>
	    <expr_stmt><expr><call><name pos:line="43" pos:column="13">memcpy<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">name<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">+<pos:position pos:line="43" pos:column="26"/></operator> <name pos:line="43" pos:column="27">no<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">buf<pos:position pos:line="43" pos:column="34"/></name> <operator pos:line="43" pos:column="35">+<pos:position pos:line="43" pos:column="36"/></operator> <operator pos:line="43" pos:column="37">(<pos:position pos:line="43" pos:column="38"/></operator><operator pos:line="43" pos:column="38">*<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="39">off<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">len<pos:position pos:line="43" pos:column="48"/></name></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
	    <expr_stmt><expr><operator pos:line="44" pos:column="13">(<pos:position pos:line="44" pos:column="14"/></operator><operator pos:line="44" pos:column="14">*<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">off<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">)<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="20">+=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">len<pos:position pos:line="44" pos:column="26"/></name></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="45" pos:column="13">no<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">+=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">len<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
	    <expr_stmt><expr><operator pos:line="46" pos:column="13">*<pos:position pos:line="46" pos:column="14"/></operator><operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">name<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">+<pos:position pos:line="46" pos:column="21"/></operator> <operator pos:line="46" pos:column="22">(<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">no<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">++<pos:position pos:line="46" pos:column="27"/></operator><operator pos:line="46" pos:column="27">)<pos:position pos:line="46" pos:column="28"/></operator><operator pos:line="46" pos:column="28">)<pos:position pos:line="46" pos:column="29"/></operator> <operator pos:line="46" pos:column="30">=<pos:position pos:line="46" pos:column="31"/></operator> <literal type="char" pos:line="46" pos:column="32">'.'<pos:position pos:line="46" pos:column="35"/></literal></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
    }<pos:position pos:line="48" pos:column="6"/></block> while <condition pos:line="48" pos:column="13">(<expr><name pos:line="48" pos:column="14">c<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">&gt;<pos:position pos:line="48" pos:column="20"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>)<pos:position pos:line="48" pos:column="20"/></condition>;<pos:position pos:line="48" pos:column="21"/></do>
    <expr_stmt><expr><operator pos:line="49" pos:column="5">*<pos:position pos:line="49" pos:column="6"/></operator><operator pos:line="49" pos:column="6">(<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">name<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">+<pos:position pos:line="49" pos:column="13"/></operator> <name pos:line="49" pos:column="14">no<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">-<pos:position pos:line="49" pos:column="18"/></operator> <literal type="number" pos:line="49" pos:column="19">1<pos:position pos:line="49" pos:column="20"/></literal><operator pos:line="49" pos:column="20">)<pos:position pos:line="49" pos:column="21"/></operator> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <literal type="char" pos:line="49" pos:column="24">'\0'<pos:position pos:line="49" pos:column="28"/></literal></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
    <comment type="block" pos:line="50" pos:column="5">/* make sure we didn't allow someone to overflow the name buffer */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">assert<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">no<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">&lt;=<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="18">ns<pos:position pos:line="51" pos:column="20"/></name></expr></argument>)<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><literal type="number" pos:line="52" pos:column="12">0<pos:position pos:line="52" pos:column="13"/></literal></expr>;<pos:position pos:line="52" pos:column="14"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
