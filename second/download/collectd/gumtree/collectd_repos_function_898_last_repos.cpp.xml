<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_898_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_add_read_callback<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">memcached_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">st<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list> <block pos:line="1" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">callback_name<pos:position pos:line="2" pos:column="21"/></name><index pos:line="2" pos:column="21">[<expr><literal type="number" pos:line="2" pos:column="22">3<pos:position pos:line="2" pos:column="23"/></literal> <operator pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></operator> <name pos:line="2" pos:column="26">DATA_MAX_NAME_LEN<pos:position pos:line="2" pos:column="43"/></name></expr>]<pos:position pos:line="2" pos:column="44"/></index></name></decl>;<pos:position pos:line="2" pos:column="45"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><call><name pos:line="4" pos:column="7">memcached_set_defaults<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name pos:line="4" pos:column="30">st<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call> <operator pos:line="4" pos:column="34">!=<pos:position pos:line="4" pos:column="36"/></operator> <literal type="number" pos:line="4" pos:column="37">0<pos:position pos:line="4" pos:column="38"/></literal></expr>)<pos:position pos:line="4" pos:column="39"/></condition><then pos:line="4" pos:column="39"> <block pos:line="4" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">memcached_free<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">st<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal></expr>;<pos:position pos:line="6" pos:column="15"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">snprintf<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">callback_name<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="27">sizeof<argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">callback_name<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="50">"memcached/%s"<pos:position pos:line="9" pos:column="64"/></literal></expr></argument>,
           <argument><expr><ternary><condition><expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name><name pos:line="10" pos:column="13">st<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">name<pos:position pos:line="10" pos:column="21"/></name></name> <operator pos:line="10" pos:column="22">!=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">)<pos:position pos:line="10" pos:column="30"/></operator></expr> ?<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32"> <expr><name><name pos:line="10" pos:column="33">st<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">name<pos:position pos:line="10" pos:column="41"/></name></name></expr> <pos:position pos:line="10" pos:column="42"/></then><else pos:line="10" pos:column="42">: <expr><literal type="string" pos:line="10" pos:column="44">"__legacy__"<pos:position pos:line="10" pos:column="56"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt>

  <return pos:line="12" pos:column="3">return <expr><call><name pos:line="12" pos:column="10">plugin_register_complex_read<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(
      <comment type="block" pos:line="13" pos:column="7">/* group = */</comment> <argument><expr><literal type="string" pos:line="13" pos:column="21">"memcached"<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>,
      <comment type="block" pos:line="14" pos:column="7">/* name      = */</comment> <argument><expr><name pos:line="14" pos:column="25">callback_name<pos:position pos:line="14" pos:column="38"/></name></expr></argument>,
      <comment type="block" pos:line="15" pos:column="7">/* callback  = */</comment> <argument><expr><name pos:line="15" pos:column="25">memcached_read<pos:position pos:line="15" pos:column="39"/></name></expr></argument>,
      <comment type="block" pos:line="16" pos:column="7">/* interval  = */</comment> <argument><expr><literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr></argument>,
      <argument><expr><operator pos:line="17" pos:column="7">&amp;<pos:position pos:line="17" pos:column="12"/></operator><operator pos:line="17" pos:column="8">(<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">user_data_t<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">)<pos:position pos:line="17" pos:column="21"/></operator><block pos:line="17" pos:column="21">{
          <expr><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">data<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">st<pos:position pos:line="18" pos:column="21"/></name></expr>, <expr><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">free_func<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">=<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="36">memcached_free<pos:position pos:line="18" pos:column="50"/></name></expr>,
      }<pos:position pos:line="19" pos:column="8"/></block></expr></argument>)<pos:position pos:line="19" pos:column="9"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="10"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
