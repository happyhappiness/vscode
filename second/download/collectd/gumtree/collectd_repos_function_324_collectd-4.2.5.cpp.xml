<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_324_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_char<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">conn_t<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">src<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">ret<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="char" pos:line="3" pos:column="20">'\0'<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">fd_set<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">fdset<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">FD_ZERO<pos:position pos:line="7" pos:column="16"/></name> <argument_list pos:line="7" pos:column="17">(<argument><expr><operator pos:line="7" pos:column="18">&amp;<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="19">fdset<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">FD_SET<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><name><name pos:line="8" pos:column="17">src<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">socket<pos:position pos:line="8" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="30">&amp;<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="31">fdset<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">select<pos:position pos:line="10" pos:column="25"/></name> <argument_list pos:line="10" pos:column="26">(<argument><expr><name><name pos:line="10" pos:column="27">src<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">socket<pos:position pos:line="10" pos:column="38"/></name></name> <operator pos:line="10" pos:column="39">+<pos:position pos:line="10" pos:column="40"/></operator> <literal type="number" pos:line="10" pos:column="41">1<pos:position pos:line="10" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="45">fdset<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">NULL<pos:position pos:line="10" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">NULL<pos:position pos:line="10" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="64">NULL<pos:position pos:line="10" pos:column="68"/></name></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="70"/></condition><then pos:line="10" pos:column="70"> <block pos:line="10" pos:column="71">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">char<pos:position pos:line="11" pos:column="21"/></name></type> <name><name pos:line="11" pos:column="22">errbuf<pos:position pos:line="11" pos:column="28"/></name><index pos:line="11" pos:column="28">[<expr><literal type="number" pos:line="11" pos:column="29">1024<pos:position pos:line="11" pos:column="33"/></literal></expr>]<pos:position pos:line="11" pos:column="34"/></index></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">log_err<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><literal type="string" pos:line="12" pos:column="26">"select() failed: %s"<pos:position pos:line="12" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="13" pos:column="33">sstrerror<pos:position pos:line="13" pos:column="42"/></name> <argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">errno<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">errbuf<pos:position pos:line="13" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="59">sizeof <argument_list pos:line="13" pos:column="66">(<argument><expr><name pos:line="13" pos:column="67">errbuf<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><literal type="char" pos:line="14" pos:column="24">'\0'<pos:position pos:line="14" pos:column="28"/></literal></expr>;<pos:position pos:line="14" pos:column="29"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><call><name pos:line="17" pos:column="17">FD_ISSET<pos:position pos:line="17" pos:column="25"/></name> <argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">src<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">socket<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="40">&amp;<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="41">fdset<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>

	<do pos:line="19" pos:column="9">do <block pos:line="19" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">ssize_t<pos:position pos:line="20" pos:column="24"/></name></type> <name pos:line="20" pos:column="25">len<pos:position pos:line="20" pos:column="28"/></name> <init pos:line="20" pos:column="29">= <expr><literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="22" pos:column="17">errno<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="25">0<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><literal type="number" pos:line="23" pos:column="21">0<pos:position pos:line="23" pos:column="22"/></literal> <operator pos:line="23" pos:column="23">&gt;<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="25">(<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">len<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <call><name pos:line="23" pos:column="32">read<pos:position pos:line="23" pos:column="36"/></name> <argument_list pos:line="23" pos:column="37">(<argument><expr><name><name pos:line="23" pos:column="38">src<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">-&gt;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="43">socket<pos:position pos:line="23" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="51">(<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="52">void<pos:position pos:line="23" pos:column="56"/></name> <operator pos:line="23" pos:column="57">*<pos:position pos:line="23" pos:column="58"/></operator><operator pos:line="23" pos:column="58">)<pos:position pos:line="23" pos:column="59"/></operator><operator pos:line="23" pos:column="59">&amp;<pos:position pos:line="23" pos:column="64"/></operator><name pos:line="23" pos:column="60">ret<pos:position pos:line="23" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="65">1<pos:position pos:line="23" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call><operator pos:line="23" pos:column="67">)<pos:position pos:line="23" pos:column="68"/></operator></expr>)<pos:position pos:line="23" pos:column="69"/></condition><then pos:line="23" pos:column="69"> <block pos:line="23" pos:column="70">{
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">EINTR<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">!=<pos:position pos:line="24" pos:column="37"/></operator> <name pos:line="24" pos:column="38">errno<pos:position pos:line="24" pos:column="43"/></name></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <block pos:line="24" pos:column="45">{
				<decl_stmt><decl><type><name pos:line="25" pos:column="33">char<pos:position pos:line="25" pos:column="37"/></name></type> <name><name pos:line="25" pos:column="38">errbuf<pos:position pos:line="25" pos:column="44"/></name><index pos:line="25" pos:column="44">[<expr><literal type="number" pos:line="25" pos:column="45">1024<pos:position pos:line="25" pos:column="49"/></literal></expr>]<pos:position pos:line="25" pos:column="50"/></index></name></decl>;<pos:position pos:line="25" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">log_err<pos:position pos:line="26" pos:column="40"/></name> <argument_list pos:line="26" pos:column="41">(<argument><expr><literal type="string" pos:line="26" pos:column="42">"read() failed: %s"<pos:position pos:line="26" pos:column="61"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="27" pos:column="49">sstrerror<pos:position pos:line="27" pos:column="58"/></name> <argument_list pos:line="27" pos:column="59">(<argument><expr><name pos:line="27" pos:column="60">errno<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">errbuf<pos:position pos:line="27" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="75">sizeof <argument_list pos:line="27" pos:column="82">(<argument><expr><name pos:line="27" pos:column="83">errbuf<pos:position pos:line="27" pos:column="89"/></name></expr></argument>)<pos:position pos:line="27" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="93"/></expr_stmt>
				<return pos:line="28" pos:column="33">return <expr><literal type="char" pos:line="28" pos:column="40">'\0'<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></return>
			}<pos:position pos:line="29" pos:column="26"/></block></then></if>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><literal type="number" pos:line="32" pos:column="21">0<pos:position pos:line="32" pos:column="22"/></literal> <operator pos:line="32" pos:column="23">==<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">len<pos:position pos:line="32" pos:column="29"/></name></expr>)<pos:position pos:line="32" pos:column="30"/></condition><then pos:line="32" pos:column="30">
			<block type="pseudo"><return pos:line="33" pos:column="25">return <expr><literal type="char" pos:line="33" pos:column="32">'\0'<pos:position pos:line="33" pos:column="36"/></literal></expr>;<pos:position pos:line="33" pos:column="37"/></return></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block> while <condition pos:line="34" pos:column="17">(<expr><name pos:line="34" pos:column="18">EINTR<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">errno<pos:position pos:line="34" pos:column="32"/></name></expr>)<pos:position pos:line="34" pos:column="33"/></condition>;<pos:position pos:line="34" pos:column="34"/></do>
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">ret<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
