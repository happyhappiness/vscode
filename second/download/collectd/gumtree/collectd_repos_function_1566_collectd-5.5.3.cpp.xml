<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1566_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_main_loop<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">uint32_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">request_type<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="12">ret<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">some_unreachable<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">timeval<pos:position pos:line="4" pos:column="19"/></name></name></type> <name pos:line="4" pos:column="20">end_tv<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">cconn<pos:position pos:line="5" pos:column="17"/></name></name></type> <name><name pos:line="5" pos:column="18">io_array<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[<expr><name pos:line="5" pos:column="27">g_num_daemons<pos:position pos:line="5" pos:column="40"/></name></expr>]<pos:position pos:line="5" pos:column="41"/></index></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">DEBUG<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><literal type="string" pos:line="7" pos:column="11">"ceph plugin: entering cconn_main_loop(request_type = %d)"<pos:position pos:line="7" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="71">request_type<pos:position pos:line="7" pos:column="83"/></name></expr></argument>)<pos:position pos:line="7" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="85"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* create cconn array */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">memset<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">io_array<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="25">sizeof<argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">io_array<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
    <for pos:line="11" pos:column="5">for<control pos:line="11" pos:column="8">(<init><expr><name pos:line="11" pos:column="9">i<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></init> <condition><expr><name pos:line="11" pos:column="16">i<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="20">g_num_daemons<pos:position pos:line="11" pos:column="33"/></name></expr>;<pos:position pos:line="11" pos:column="34"/></condition> <incr><expr><operator pos:line="11" pos:column="35">++<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">i<pos:position pos:line="11" pos:column="38"/></name></expr></incr>)<pos:position pos:line="11" pos:column="39"/></control>
    <block pos:line="12" pos:column="5">{
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">io_array<pos:position pos:line="13" pos:column="17"/></name><index pos:line="13" pos:column="17">[<expr><name pos:line="13" pos:column="18">i<pos:position pos:line="13" pos:column="19"/></name></expr>]<pos:position pos:line="13" pos:column="20"/></index></name><operator pos:line="13" pos:column="20">.<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">d<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name><name pos:line="13" pos:column="25">g_daemons<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">i<pos:position pos:line="13" pos:column="36"/></name></expr>]<pos:position pos:line="13" pos:column="37"/></index></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">io_array<pos:position pos:line="14" pos:column="17"/></name><index pos:line="14" pos:column="17">[<expr><name pos:line="14" pos:column="18">i<pos:position pos:line="14" pos:column="19"/></name></expr>]<pos:position pos:line="14" pos:column="20"/></index></name><operator pos:line="14" pos:column="20">.<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">request_type<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">=<pos:position pos:line="14" pos:column="35"/></operator> <name pos:line="14" pos:column="36">request_type<pos:position pos:line="14" pos:column="48"/></name></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">io_array<pos:position pos:line="15" pos:column="17"/></name><index pos:line="15" pos:column="17">[<expr><name pos:line="15" pos:column="18">i<pos:position pos:line="15" pos:column="19"/></name></expr>]<pos:position pos:line="15" pos:column="20"/></index></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">state<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">CSTATE_UNCONNECTED<pos:position pos:line="15" pos:column="47"/></name></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></for>

    <comment type="block" format="doxygen" pos:line="18" pos:column="5">/** Calculate the time at which we should give up */</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">gettimeofday<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><operator pos:line="19" pos:column="18">&amp;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="19">end_tv<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">NULL<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">end_tv<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">tv_sec<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">+=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">CEPH_TIMEOUT_INTERVAL<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>

    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><literal type="number" pos:line="22" pos:column="12">1<pos:position pos:line="22" pos:column="13"/></literal></expr>)<pos:position pos:line="22" pos:column="14"/></condition>
    <block pos:line="23" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">nfds<pos:position pos:line="24" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="24" pos:column="19">diff<pos:position pos:line="24" pos:column="23"/></name></decl>;<pos:position pos:line="24" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="25" pos:column="9">struct<pos:position pos:line="25" pos:column="15"/></name> <name pos:line="25" pos:column="16">timeval<pos:position pos:line="25" pos:column="23"/></name></name></type> <name pos:line="25" pos:column="24">tv<pos:position pos:line="25" pos:column="26"/></name></decl>;<pos:position pos:line="25" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="26" pos:column="9">struct<pos:position pos:line="26" pos:column="15"/></name> <name pos:line="26" pos:column="16">cconn<pos:position pos:line="26" pos:column="21"/></name></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name><name pos:line="26" pos:column="23">polled_io_array<pos:position pos:line="26" pos:column="38"/></name><index pos:line="26" pos:column="38">[<expr><name pos:line="26" pos:column="39">g_num_daemons<pos:position pos:line="26" pos:column="52"/></name></expr>]<pos:position pos:line="26" pos:column="53"/></index></name></decl>;<pos:position pos:line="26" pos:column="54"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="27" pos:column="9">struct<pos:position pos:line="27" pos:column="15"/></name> <name pos:line="27" pos:column="16">pollfd<pos:position pos:line="27" pos:column="22"/></name></name></type> <name><name pos:line="27" pos:column="23">fds<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><name pos:line="27" pos:column="27">g_num_daemons<pos:position pos:line="27" pos:column="40"/></name></expr>]<pos:position pos:line="27" pos:column="41"/></index></name></decl>;<pos:position pos:line="27" pos:column="42"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">memset<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">fds<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="24">sizeof<argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">fds<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">nfds<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></expr_stmt>
        <for pos:line="30" pos:column="9">for<control pos:line="30" pos:column="12">(<init><expr><name pos:line="30" pos:column="13">i<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></init> <condition><expr><name pos:line="30" pos:column="20">i<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&lt;<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="24">g_num_daemons<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></condition> <incr><expr><operator pos:line="30" pos:column="39">++<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="41">i<pos:position pos:line="30" pos:column="42"/></name></expr></incr>)<pos:position pos:line="30" pos:column="43"/></control>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="32" pos:column="13">struct<pos:position pos:line="32" pos:column="19"/></name> <name pos:line="32" pos:column="20">cconn<pos:position pos:line="32" pos:column="25"/></name></name> <modifier pos:line="32" pos:column="26">*<pos:position pos:line="32" pos:column="27"/></modifier></type><name pos:line="32" pos:column="27">io<pos:position pos:line="32" pos:column="29"/></name> <init pos:line="32" pos:column="30">= <expr><name pos:line="32" pos:column="32">io_array<pos:position pos:line="32" pos:column="40"/></name> <operator pos:line="32" pos:column="41">+<pos:position pos:line="32" pos:column="42"/></operator> <name pos:line="32" pos:column="43">i<pos:position pos:line="32" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="45"/></decl_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">ret<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">cconn_prepare<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">io<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">fds<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">+<pos:position pos:line="33" pos:column="42"/></operator> <name pos:line="33" pos:column="43">nfds<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
            <if pos:line="34" pos:column="13">if<condition pos:line="34" pos:column="15">(<expr><name pos:line="34" pos:column="16">ret<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">&lt;<pos:position pos:line="34" pos:column="24"/></operator> <literal type="number" pos:line="34" pos:column="22">0<pos:position pos:line="34" pos:column="23"/></literal></expr>)<pos:position pos:line="34" pos:column="24"/></condition><then pos:line="34" pos:column="24">
            <block pos:line="35" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">WARNING<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><literal type="string" pos:line="36" pos:column="25">"ceph plugin: cconn_prepare(name=%s,i=%d,st=%d)=%d"<pos:position pos:line="36" pos:column="76"/></literal></expr></argument>,
                        <argument><expr><name><name pos:line="37" pos:column="25">io<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">d<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">name<pos:position pos:line="37" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="38">i<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="41">io<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">-&gt;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="45">state<pos:position pos:line="37" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="52">ret<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">cconn_close<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">io<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="39" pos:column="17">io<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">request_type<pos:position pos:line="39" pos:column="33"/></name></name> <operator pos:line="39" pos:column="34">=<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="36">ASOK_REQ_NONE<pos:position pos:line="39" pos:column="49"/></name></expr>;<pos:position pos:line="39" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name pos:line="40" pos:column="17">some_unreachable<pos:position pos:line="40" pos:column="33"/></name> <operator pos:line="40" pos:column="34">=<pos:position pos:line="40" pos:column="35"/></operator> <literal type="number" pos:line="40" pos:column="36">1<pos:position pos:line="40" pos:column="37"/></literal></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></then>
            <elseif pos:line="42" pos:column="13">else <if pos:line="42" pos:column="18">if<condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">ret<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">==<pos:position pos:line="42" pos:column="27"/></operator> <literal type="number" pos:line="42" pos:column="28">1<pos:position pos:line="42" pos:column="29"/></literal></expr>)<pos:position pos:line="42" pos:column="30"/></condition><then pos:line="42" pos:column="30">
            <block pos:line="43" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="44" pos:column="17">polled_io_array<pos:position pos:line="44" pos:column="32"/></name><index pos:line="44" pos:column="32">[<expr><name pos:line="44" pos:column="33">nfds<pos:position pos:line="44" pos:column="37"/></name><operator pos:line="44" pos:column="37">++<pos:position pos:line="44" pos:column="39"/></operator></expr>]<pos:position pos:line="44" pos:column="40"/></index></name> <operator pos:line="44" pos:column="41">=<pos:position pos:line="44" pos:column="42"/></operator> <name pos:line="44" pos:column="43">io_array<pos:position pos:line="44" pos:column="51"/></name> <operator pos:line="44" pos:column="52">+<pos:position pos:line="44" pos:column="53"/></operator> <name pos:line="44" pos:column="54">i<pos:position pos:line="44" pos:column="55"/></name></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="46" pos:column="10"/></block></for>
        <if pos:line="47" pos:column="9">if<condition pos:line="47" pos:column="11">(<expr><name pos:line="47" pos:column="12">nfds<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">==<pos:position pos:line="47" pos:column="19"/></operator> <literal type="number" pos:line="47" pos:column="20">0<pos:position pos:line="47" pos:column="21"/></literal></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22">
        <block pos:line="48" pos:column="9">{
            <comment type="block" pos:line="49" pos:column="13">/* finished */</comment>
            <expr_stmt><expr><name pos:line="50" pos:column="13">ret<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="number" pos:line="50" pos:column="19">0<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
            <goto pos:line="51" pos:column="13">goto <name pos:line="51" pos:column="18">done<pos:position pos:line="51" pos:column="22"/></name>;<pos:position pos:line="51" pos:column="23"/></goto>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">gettimeofday<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><operator pos:line="53" pos:column="22">&amp;<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="23">tv<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="27">NULL<pos:position pos:line="53" pos:column="31"/></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="54" pos:column="9">diff<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">milli_diff<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><operator pos:line="54" pos:column="27">&amp;<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="28">end_tv<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="36">&amp;<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="37">tv<pos:position pos:line="54" pos:column="39"/></name></expr></argument>)<pos:position pos:line="54" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt>
        <if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">(<expr><name pos:line="55" pos:column="12">diff<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">&lt;=<pos:position pos:line="55" pos:column="22"/></operator> <literal type="number" pos:line="55" pos:column="20">0<pos:position pos:line="55" pos:column="21"/></literal></expr>)<pos:position pos:line="55" pos:column="22"/></condition><then pos:line="55" pos:column="22">
        <block pos:line="56" pos:column="9">{
            <comment type="block" pos:line="57" pos:column="13">/* Timed out */</comment>
            <expr_stmt><expr><name pos:line="58" pos:column="13">ret<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <operator pos:line="58" pos:column="19">-<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">ETIMEDOUT<pos:position pos:line="58" pos:column="29"/></name></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">WARNING<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><literal type="string" pos:line="59" pos:column="21">"ceph plugin: cconn_main_loop: timed out."<pos:position pos:line="59" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="65"/></expr_stmt>
            <goto pos:line="60" pos:column="13">goto <name pos:line="60" pos:column="18">done<pos:position pos:line="60" pos:column="22"/></name>;<pos:position pos:line="60" pos:column="23"/></goto>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">RETRY_ON_EINTR<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">ret<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="29">poll<pos:position pos:line="62" pos:column="33"/></name><argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">fds<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">nfds<pos:position pos:line="62" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="45">diff<pos:position pos:line="62" pos:column="49"/></name></expr></argument>)<pos:position pos:line="62" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt>
        <if pos:line="63" pos:column="9">if<condition pos:line="63" pos:column="11">(<expr><name pos:line="63" pos:column="12">ret<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">&lt;<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>)<pos:position pos:line="63" pos:column="20"/></condition><then pos:line="63" pos:column="20">
        <block pos:line="64" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">ERROR<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><literal type="string" pos:line="65" pos:column="19">"ceph plugin: poll(2) error: %d"<pos:position pos:line="65" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">ret<pos:position pos:line="65" pos:column="56"/></name></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="58"/></expr_stmt>
            <goto pos:line="66" pos:column="13">goto <name pos:line="66" pos:column="18">done<pos:position pos:line="66" pos:column="22"/></name>;<pos:position pos:line="66" pos:column="23"/></goto>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
        <for pos:line="68" pos:column="9">for<control pos:line="68" pos:column="12">(<init><expr><name pos:line="68" pos:column="13">i<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <literal type="number" pos:line="68" pos:column="17">0<pos:position pos:line="68" pos:column="18"/></literal></expr>;<pos:position pos:line="68" pos:column="19"/></init> <condition><expr><name pos:line="68" pos:column="20">i<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">&lt;<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="24">nfds<pos:position pos:line="68" pos:column="28"/></name></expr>;<pos:position pos:line="68" pos:column="29"/></condition> <incr><expr><operator pos:line="68" pos:column="30">++<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">i<pos:position pos:line="68" pos:column="33"/></name></expr></incr>)<pos:position pos:line="68" pos:column="34"/></control>
        <block pos:line="69" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="70" pos:column="13">struct<pos:position pos:line="70" pos:column="19"/></name> <name pos:line="70" pos:column="20">cconn<pos:position pos:line="70" pos:column="25"/></name></name> <modifier pos:line="70" pos:column="26">*<pos:position pos:line="70" pos:column="27"/></modifier></type><name pos:line="70" pos:column="27">io<pos:position pos:line="70" pos:column="29"/></name> <init pos:line="70" pos:column="30">= <expr><name><name pos:line="70" pos:column="32">polled_io_array<pos:position pos:line="70" pos:column="47"/></name><index pos:line="70" pos:column="47">[<expr><name pos:line="70" pos:column="48">i<pos:position pos:line="70" pos:column="49"/></name></expr>]<pos:position pos:line="70" pos:column="50"/></index></name></expr></init></decl>;<pos:position pos:line="70" pos:column="51"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">int<pos:position pos:line="71" pos:column="16"/></name></type> <name pos:line="71" pos:column="17">revents<pos:position pos:line="71" pos:column="24"/></name> <init pos:line="71" pos:column="25">= <expr><name><name pos:line="71" pos:column="27">fds<pos:position pos:line="71" pos:column="30"/></name><index pos:line="71" pos:column="30">[<expr><name pos:line="71" pos:column="31">i<pos:position pos:line="71" pos:column="32"/></name></expr>]<pos:position pos:line="71" pos:column="33"/></index></name><operator pos:line="71" pos:column="33">.<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="34">revents<pos:position pos:line="71" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="71" pos:column="42"/></decl_stmt>
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">revents<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">==<pos:position pos:line="72" pos:column="26"/></operator> <literal type="number" pos:line="72" pos:column="27">0<pos:position pos:line="72" pos:column="28"/></literal></expr>)<pos:position pos:line="72" pos:column="29"/></condition><then pos:line="72" pos:column="29">
            <block pos:line="73" pos:column="13">{
                <comment type="block" pos:line="74" pos:column="17">/* do nothing */</comment>
            }<pos:position pos:line="75" pos:column="14"/></block></then>
            <elseif pos:line="76" pos:column="13">else <if pos:line="76" pos:column="18">if<condition pos:line="76" pos:column="20">(<expr><call><name pos:line="76" pos:column="21">cconn_validate_revents<pos:position pos:line="76" pos:column="43"/></name><argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">io<pos:position pos:line="76" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="48">revents<pos:position pos:line="76" pos:column="55"/></name></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="57"/></condition><then pos:line="76" pos:column="57">
            <block pos:line="77" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="78" pos:column="17">WARNING<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><literal type="string" pos:line="78" pos:column="25">"ceph plugin: cconn(name=%s,i=%d,st=%d): "<pos:position pos:line="78" pos:column="67"/></literal>
                <literal type="string" pos:line="79" pos:column="17">"revents validation error: "<pos:position pos:line="79" pos:column="45"/></literal>
                <literal type="string" pos:line="80" pos:column="17">"revents=0x%08x"<pos:position pos:line="80" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="35">io<pos:position pos:line="80" pos:column="37"/></name><operator pos:line="80" pos:column="37">-&gt;<pos:position pos:line="80" pos:column="42"/></operator><name pos:line="80" pos:column="39">d<pos:position pos:line="80" pos:column="40"/></name><operator pos:line="80" pos:column="40">-&gt;<pos:position pos:line="80" pos:column="45"/></operator><name pos:line="80" pos:column="42">name<pos:position pos:line="80" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="48">i<pos:position pos:line="80" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="51">io<pos:position pos:line="80" pos:column="53"/></name><operator pos:line="80" pos:column="53">-&gt;<pos:position pos:line="80" pos:column="58"/></operator><name pos:line="80" pos:column="55">state<pos:position pos:line="80" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="62">revents<pos:position pos:line="80" pos:column="69"/></name></expr></argument>)<pos:position pos:line="80" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="81" pos:column="17">cconn_close<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">io<pos:position pos:line="81" pos:column="31"/></name></expr></argument>)<pos:position pos:line="81" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="82" pos:column="17">io<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">-&gt;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="21">request_type<pos:position pos:line="82" pos:column="33"/></name></name> <operator pos:line="82" pos:column="34">=<pos:position pos:line="82" pos:column="35"/></operator> <name pos:line="82" pos:column="36">ASOK_REQ_NONE<pos:position pos:line="82" pos:column="49"/></name></expr>;<pos:position pos:line="82" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name pos:line="83" pos:column="17">some_unreachable<pos:position pos:line="83" pos:column="33"/></name> <operator pos:line="83" pos:column="34">=<pos:position pos:line="83" pos:column="35"/></operator> <literal type="number" pos:line="83" pos:column="36">1<pos:position pos:line="83" pos:column="37"/></literal></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></then></if></elseif>
            <else pos:line="85" pos:column="13">else
            <block pos:line="86" pos:column="13">{
                <expr_stmt><expr><name pos:line="87" pos:column="17">ret<pos:position pos:line="87" pos:column="20"/></name> <operator pos:line="87" pos:column="21">=<pos:position pos:line="87" pos:column="22"/></operator> <call><name pos:line="87" pos:column="23">cconn_handle_event<pos:position pos:line="87" pos:column="41"/></name><argument_list pos:line="87" pos:column="41">(<argument><expr><name pos:line="87" pos:column="42">io<pos:position pos:line="87" pos:column="44"/></name></expr></argument>)<pos:position pos:line="87" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="46"/></expr_stmt>
                <if pos:line="88" pos:column="17">if<condition pos:line="88" pos:column="19">(<expr><name pos:line="88" pos:column="20">ret<pos:position pos:line="88" pos:column="23"/></name></expr>)<pos:position pos:line="88" pos:column="24"/></condition><then pos:line="88" pos:column="24">
                <block pos:line="89" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">WARNING<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><literal type="string" pos:line="90" pos:column="29">"ceph plugin: cconn_handle_event(name=%s,"<pos:position pos:line="90" pos:column="71"/></literal>
                    <literal type="string" pos:line="91" pos:column="21">"i=%d,st=%d): error %d"<pos:position pos:line="91" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="46">io<pos:position pos:line="91" pos:column="48"/></name><operator pos:line="91" pos:column="48">-&gt;<pos:position pos:line="91" pos:column="53"/></operator><name pos:line="91" pos:column="50">d<pos:position pos:line="91" pos:column="51"/></name><operator pos:line="91" pos:column="51">-&gt;<pos:position pos:line="91" pos:column="56"/></operator><name pos:line="91" pos:column="53">name<pos:position pos:line="91" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="59">i<pos:position pos:line="91" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="62">io<pos:position pos:line="91" pos:column="64"/></name><operator pos:line="91" pos:column="64">-&gt;<pos:position pos:line="91" pos:column="69"/></operator><name pos:line="91" pos:column="66">state<pos:position pos:line="91" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="73">ret<pos:position pos:line="91" pos:column="76"/></name></expr></argument>)<pos:position pos:line="91" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="78"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="92" pos:column="21">cconn_close<pos:position pos:line="92" pos:column="32"/></name><argument_list pos:line="92" pos:column="32">(<argument><expr><name pos:line="92" pos:column="33">io<pos:position pos:line="92" pos:column="35"/></name></expr></argument>)<pos:position pos:line="92" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="37"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="93" pos:column="21">io<pos:position pos:line="93" pos:column="23"/></name><operator pos:line="93" pos:column="23">-&gt;<pos:position pos:line="93" pos:column="28"/></operator><name pos:line="93" pos:column="25">request_type<pos:position pos:line="93" pos:column="37"/></name></name> <operator pos:line="93" pos:column="38">=<pos:position pos:line="93" pos:column="39"/></operator> <name pos:line="93" pos:column="40">ASOK_REQ_NONE<pos:position pos:line="93" pos:column="53"/></name></expr>;<pos:position pos:line="93" pos:column="54"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="94" pos:column="21">some_unreachable<pos:position pos:line="94" pos:column="37"/></name> <operator pos:line="94" pos:column="38">=<pos:position pos:line="94" pos:column="39"/></operator> <literal type="number" pos:line="94" pos:column="40">1<pos:position pos:line="94" pos:column="41"/></literal></expr>;<pos:position pos:line="94" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="95" pos:column="18"/></block></then></if>
            }<pos:position pos:line="96" pos:column="14"/></block></else></if>
        }<pos:position pos:line="97" pos:column="10"/></block></for>
    }<pos:position pos:line="98" pos:column="6"/></block></while>
    <label><name pos:line="99" pos:column="5">done<pos:position pos:line="99" pos:column="9"/></name>:<pos:position pos:line="99" pos:column="10"/></label> <for pos:line="99" pos:column="11">for<control pos:line="99" pos:column="14">(<init><expr><name pos:line="99" pos:column="15">i<pos:position pos:line="99" pos:column="16"/></name> <operator pos:line="99" pos:column="17">=<pos:position pos:line="99" pos:column="18"/></operator> <literal type="number" pos:line="99" pos:column="19">0<pos:position pos:line="99" pos:column="20"/></literal></expr>;<pos:position pos:line="99" pos:column="21"/></init> <condition><expr><name pos:line="99" pos:column="22">i<pos:position pos:line="99" pos:column="23"/></name> <operator pos:line="99" pos:column="24">&lt;<pos:position pos:line="99" pos:column="28"/></operator> <name pos:line="99" pos:column="26">g_num_daemons<pos:position pos:line="99" pos:column="39"/></name></expr>;<pos:position pos:line="99" pos:column="40"/></condition> <incr><expr><operator pos:line="99" pos:column="41">++<pos:position pos:line="99" pos:column="43"/></operator><name pos:line="99" pos:column="43">i<pos:position pos:line="99" pos:column="44"/></name></expr></incr>)<pos:position pos:line="99" pos:column="45"/></control>
    <block pos:line="100" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">cconn_close<pos:position pos:line="101" pos:column="20"/></name><argument_list pos:line="101" pos:column="20">(<argument><expr><name pos:line="101" pos:column="21">io_array<pos:position pos:line="101" pos:column="29"/></name> <operator pos:line="101" pos:column="30">+<pos:position pos:line="101" pos:column="31"/></operator> <name pos:line="101" pos:column="32">i<pos:position pos:line="101" pos:column="33"/></name></expr></argument>)<pos:position pos:line="101" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></for>
    <if pos:line="103" pos:column="5">if<condition pos:line="103" pos:column="7">(<expr><name pos:line="103" pos:column="8">some_unreachable<pos:position pos:line="103" pos:column="24"/></name></expr>)<pos:position pos:line="103" pos:column="25"/></condition><then pos:line="103" pos:column="25">
    <block pos:line="104" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">DEBUG<pos:position pos:line="105" pos:column="14"/></name><argument_list pos:line="105" pos:column="14">(<argument><expr><literal type="string" pos:line="105" pos:column="15">"ceph plugin: cconn_main_loop: some Ceph daemons were unreachable."<pos:position pos:line="105" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then>
    <else pos:line="107" pos:column="5">else
    <block pos:line="108" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">DEBUG<pos:position pos:line="109" pos:column="14"/></name><argument_list pos:line="109" pos:column="14">(<argument><expr><literal type="string" pos:line="109" pos:column="15">"ceph plugin: cconn_main_loop: reached all Ceph daemons :)"<pos:position pos:line="109" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="76"/></expr_stmt>
    }<pos:position pos:line="110" pos:column="6"/></block></else></if>
    <return pos:line="111" pos:column="5">return <expr><name pos:line="111" pos:column="12">ret<pos:position pos:line="111" pos:column="15"/></name></expr>;<pos:position pos:line="111" pos:column="16"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
