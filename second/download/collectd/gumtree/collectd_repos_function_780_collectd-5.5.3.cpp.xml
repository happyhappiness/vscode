<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_780_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">log_logstash_print<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">yajl_gen<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">g<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">severity<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
	   	<parameter><decl><type><name pos:line="2" pos:column="17">cdtime_t<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">timestamp_time<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">fh<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">_Bool<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">do_close<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tm<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">timestamp_tm<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">timestamp_str<pos:position pos:line="7" pos:column="27"/></name><index pos:line="7" pos:column="27">[<expr><literal type="number" pos:line="7" pos:column="28">64<pos:position pos:line="7" pos:column="30"/></literal></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">unsigned<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">char<pos:position pos:line="8" pos:column="28"/></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">buf<pos:position pos:line="8" pos:column="33"/></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">time_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">tt<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="10" pos:column="17"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">size_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">len<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">unsigned<pos:position pos:line="13" pos:column="17"/></name> <name pos:line="13" pos:column="18">int<pos:position pos:line="13" pos:column="21"/></name></type> <name pos:line="13" pos:column="22">len<pos:position pos:line="13" pos:column="25"/></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">yajl_gen_string<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">g<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="32">(<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">u_char<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">*<pos:position pos:line="16" pos:column="41"/></operator><operator pos:line="16" pos:column="41">)<pos:position pos:line="16" pos:column="42"/></operator><literal type="string" pos:line="16" pos:column="42">"level"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="51">strlen<pos:position pos:line="16" pos:column="57"/></name><argument_list pos:line="16" pos:column="57">(<argument><expr><literal type="string" pos:line="16" pos:column="58">"level"<pos:position pos:line="16" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call> <operator pos:line="16" pos:column="68">!=<pos:position pos:line="16" pos:column="70"/></operator>
	    <name pos:line="17" pos:column="13">yajl_gen_status_ok<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
		<block type="pseudo"><goto pos:line="18" pos:column="17">goto <name pos:line="18" pos:column="22">err<pos:position pos:line="18" pos:column="25"/></name>;<pos:position pos:line="18" pos:column="26"/></goto></block></then></if>

	<switch pos:line="20" pos:column="9">switch <condition pos:line="20" pos:column="16">(<expr><name pos:line="20" pos:column="17">severity<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition> <block pos:line="20" pos:column="27">{
	<case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">LOG_ERR<pos:position pos:line="21" pos:column="21"/></name></expr>:<pos:position pos:line="21" pos:column="22"/></case>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">yajl_gen_string<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">g<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="40">(<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="41">u_char<pos:position pos:line="22" pos:column="47"/></name> <operator pos:line="22" pos:column="48">*<pos:position pos:line="22" pos:column="49"/></operator><operator pos:line="22" pos:column="49">)<pos:position pos:line="22" pos:column="50"/></operator><literal type="string" pos:line="22" pos:column="50">"error"<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="59">strlen<pos:position pos:line="22" pos:column="65"/></name><argument_list pos:line="22" pos:column="65">(<argument><expr><literal type="string" pos:line="22" pos:column="66">"error"<pos:position pos:line="22" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call> <operator pos:line="22" pos:column="76">!=<pos:position pos:line="22" pos:column="78"/></operator>
		    <name pos:line="23" pos:column="21">yajl_gen_status_ok<pos:position pos:line="23" pos:column="39"/></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
			<block type="pseudo"><goto pos:line="24" pos:column="25">goto <name pos:line="24" pos:column="30">err<pos:position pos:line="24" pos:column="33"/></name>;<pos:position pos:line="24" pos:column="34"/></goto></block></then></if>
		<break pos:line="25" pos:column="17">break;<pos:position pos:line="25" pos:column="23"/></break>
	<case pos:line="26" pos:column="9">case <expr><name pos:line="26" pos:column="14">LOG_WARNING<pos:position pos:line="26" pos:column="25"/></name></expr>:<pos:position pos:line="26" pos:column="26"/></case>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">yajl_gen_string<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">g<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">u_char<pos:position pos:line="27" pos:column="47"/></name> <operator pos:line="27" pos:column="48">*<pos:position pos:line="27" pos:column="49"/></operator><operator pos:line="27" pos:column="49">)<pos:position pos:line="27" pos:column="50"/></operator><literal type="string" pos:line="27" pos:column="50">"warning"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="28" pos:column="37">strlen<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><literal type="string" pos:line="28" pos:column="44">"warning"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call> <operator pos:line="28" pos:column="56">!=<pos:position pos:line="28" pos:column="58"/></operator>
		    <name pos:line="29" pos:column="21">yajl_gen_status_ok<pos:position pos:line="29" pos:column="39"/></name></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40">
			<block type="pseudo"><goto pos:line="30" pos:column="25">goto <name pos:line="30" pos:column="30">err<pos:position pos:line="30" pos:column="33"/></name>;<pos:position pos:line="30" pos:column="34"/></goto></block></then></if>
		<break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
	<case pos:line="32" pos:column="9">case <expr><name pos:line="32" pos:column="14">LOG_NOTICE<pos:position pos:line="32" pos:column="24"/></name></expr>:<pos:position pos:line="32" pos:column="25"/></case>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">yajl_gen_string<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">g<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="40">(<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="41">u_char<pos:position pos:line="33" pos:column="47"/></name> <operator pos:line="33" pos:column="48">*<pos:position pos:line="33" pos:column="49"/></operator><operator pos:line="33" pos:column="49">)<pos:position pos:line="33" pos:column="50"/></operator><literal type="string" pos:line="33" pos:column="50">"notice"<pos:position pos:line="33" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="60">strlen<pos:position pos:line="33" pos:column="66"/></name><argument_list pos:line="33" pos:column="66">(<argument><expr><literal type="string" pos:line="33" pos:column="67">"notice"<pos:position pos:line="33" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call> <operator pos:line="33" pos:column="78">!=<pos:position pos:line="33" pos:column="80"/></operator>
		    <name pos:line="34" pos:column="21">yajl_gen_status_ok<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
			<block type="pseudo"><goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">err<pos:position pos:line="35" pos:column="33"/></name>;<pos:position pos:line="35" pos:column="34"/></goto></block></then></if>
		<break pos:line="36" pos:column="17">break;<pos:position pos:line="36" pos:column="23"/></break>
	<case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">LOG_INFO<pos:position pos:line="37" pos:column="22"/></name></expr>:<pos:position pos:line="37" pos:column="23"/></case>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">yajl_gen_string<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">g<pos:position pos:line="38" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="40">(<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="41">u_char<pos:position pos:line="38" pos:column="47"/></name> <operator pos:line="38" pos:column="48">*<pos:position pos:line="38" pos:column="49"/></operator><operator pos:line="38" pos:column="49">)<pos:position pos:line="38" pos:column="50"/></operator><literal type="string" pos:line="38" pos:column="50">"info"<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="58">strlen<pos:position pos:line="38" pos:column="64"/></name><argument_list pos:line="38" pos:column="64">(<argument><expr><literal type="string" pos:line="38" pos:column="65">"info"<pos:position pos:line="38" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call> <operator pos:line="38" pos:column="74">!=<pos:position pos:line="38" pos:column="76"/></operator>
		    <name pos:line="39" pos:column="21">yajl_gen_status_ok<pos:position pos:line="39" pos:column="39"/></name></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40">
			<block type="pseudo"><goto pos:line="40" pos:column="25">goto <name pos:line="40" pos:column="30">err<pos:position pos:line="40" pos:column="33"/></name>;<pos:position pos:line="40" pos:column="34"/></goto></block></then></if>
		<break pos:line="41" pos:column="17">break;<pos:position pos:line="41" pos:column="23"/></break>
	<case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">LOG_DEBUG<pos:position pos:line="42" pos:column="23"/></name></expr>:<pos:position pos:line="42" pos:column="24"/></case>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">yajl_gen_string<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">g<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="40">(<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">u_char<pos:position pos:line="43" pos:column="47"/></name> <operator pos:line="43" pos:column="48">*<pos:position pos:line="43" pos:column="49"/></operator><operator pos:line="43" pos:column="49">)<pos:position pos:line="43" pos:column="50"/></operator><literal type="string" pos:line="43" pos:column="50">"debug"<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="59">strlen<pos:position pos:line="43" pos:column="65"/></name><argument_list pos:line="43" pos:column="65">(<argument><expr><literal type="string" pos:line="43" pos:column="66">"debug"<pos:position pos:line="43" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="75"/></argument_list></call> <operator pos:line="43" pos:column="76">!=<pos:position pos:line="43" pos:column="78"/></operator>
		    <name pos:line="44" pos:column="21">yajl_gen_status_ok<pos:position pos:line="44" pos:column="39"/></name></expr>)<pos:position pos:line="44" pos:column="40"/></condition><then pos:line="44" pos:column="40">
			<block type="pseudo"><goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">err<pos:position pos:line="45" pos:column="33"/></name>;<pos:position pos:line="45" pos:column="34"/></goto></block></then></if>
		<break pos:line="46" pos:column="17">break;<pos:position pos:line="46" pos:column="23"/></break>
	<default pos:line="47" pos:column="9">default:<pos:position pos:line="47" pos:column="17"/></default>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name pos:line="48" pos:column="21">yajl_gen_string<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">g<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="40">(<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="41">u_char<pos:position pos:line="48" pos:column="47"/></name> <operator pos:line="48" pos:column="48">*<pos:position pos:line="48" pos:column="49"/></operator><operator pos:line="48" pos:column="49">)<pos:position pos:line="48" pos:column="50"/></operator><literal type="string" pos:line="48" pos:column="50">"unknown"<pos:position pos:line="48" pos:column="59"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="49" pos:column="37">strlen<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><literal type="string" pos:line="49" pos:column="44">"unknown"<pos:position pos:line="49" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call> <operator pos:line="49" pos:column="56">!=<pos:position pos:line="49" pos:column="58"/></operator>
		    <name pos:line="50" pos:column="21">yajl_gen_status_ok<pos:position pos:line="50" pos:column="39"/></name></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40">
			<block type="pseudo"><goto pos:line="51" pos:column="25">goto <name pos:line="51" pos:column="30">err<pos:position pos:line="51" pos:column="33"/></name>;<pos:position pos:line="51" pos:column="34"/></goto></block></then></if>
		<break pos:line="52" pos:column="17">break;<pos:position pos:line="52" pos:column="23"/></break>
	}<pos:position pos:line="53" pos:column="10"/></block></switch>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">yajl_gen_string<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">g<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="32">(<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="33">u_char<pos:position pos:line="55" pos:column="39"/></name> <operator pos:line="55" pos:column="40">*<pos:position pos:line="55" pos:column="41"/></operator><operator pos:line="55" pos:column="41">)<pos:position pos:line="55" pos:column="42"/></operator><literal type="string" pos:line="55" pos:column="42">"@timestamp"<pos:position pos:line="55" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="56">strlen<pos:position pos:line="55" pos:column="62"/></name><argument_list pos:line="55" pos:column="62">(<argument><expr><literal type="string" pos:line="55" pos:column="63">"@timestamp"<pos:position pos:line="55" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="77"/></argument_list></call> <operator pos:line="55" pos:column="78">!=<pos:position pos:line="55" pos:column="80"/></operator>
	    <name pos:line="56" pos:column="13">yajl_gen_status_ok<pos:position pos:line="56" pos:column="31"/></name></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32">
		<block type="pseudo"><goto pos:line="57" pos:column="17">goto <name pos:line="57" pos:column="22">err<pos:position pos:line="57" pos:column="25"/></name>;<pos:position pos:line="57" pos:column="26"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="59" pos:column="9">tt<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">CDTIME_T_TO_TIME_T<pos:position pos:line="59" pos:column="32"/></name> <argument_list pos:line="59" pos:column="33">(<argument><expr><name pos:line="59" pos:column="34">timestamp_time<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">gmtime_r<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><operator pos:line="60" pos:column="19">&amp;<pos:position pos:line="60" pos:column="24"/></operator><name pos:line="60" pos:column="20">tt<pos:position pos:line="60" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="25">timestamp_tm<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>

	<comment type="block" pos:line="62" pos:column="9">/*
	 * format time as a UTC ISO 8601 compliant string
	 */</comment>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">strftime<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">timestamp_str<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="34">sizeof <argument_list pos:line="65" pos:column="41">(<argument><expr><name pos:line="65" pos:column="42">timestamp_str<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></sizeof></expr></argument>,
		  <argument><expr><literal type="string" pos:line="66" pos:column="19">"%Y-%m-%dT%H:%M:%SZ"<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="66" pos:column="41">&amp;<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="42">timestamp_tm<pos:position pos:line="66" pos:column="54"/></name></expr></argument>)<pos:position pos:line="66" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="67" pos:column="9">timestamp_str<pos:position pos:line="67" pos:column="22"/></name><index pos:line="67" pos:column="22">[<expr><sizeof pos:line="67" pos:column="23">sizeof <argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">timestamp_str<pos:position pos:line="67" pos:column="44"/></name></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></sizeof> <operator pos:line="67" pos:column="46">-<pos:position pos:line="67" pos:column="47"/></operator> <literal type="number" pos:line="67" pos:column="48">1<pos:position pos:line="67" pos:column="49"/></literal></expr>]<pos:position pos:line="67" pos:column="50"/></index></name> <operator pos:line="67" pos:column="51">=<pos:position pos:line="67" pos:column="52"/></operator> <literal type="char" pos:line="67" pos:column="53">'\0'<pos:position pos:line="67" pos:column="57"/></literal></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><call><name pos:line="69" pos:column="13">yajl_gen_string<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">g<pos:position pos:line="69" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="32">(<pos:position pos:line="69" pos:column="33"/></operator><name pos:line="69" pos:column="33">u_char<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">*<pos:position pos:line="69" pos:column="41"/></operator><operator pos:line="69" pos:column="41">)<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="42">timestamp_str<pos:position pos:line="69" pos:column="55"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="70" pos:column="29">strlen<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">timestamp_str<pos:position pos:line="70" pos:column="49"/></name></expr></argument>)<pos:position pos:line="70" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call> <operator pos:line="70" pos:column="52">!=<pos:position pos:line="70" pos:column="54"/></operator>
	    <name pos:line="71" pos:column="13">yajl_gen_status_ok<pos:position pos:line="71" pos:column="31"/></name></expr>)<pos:position pos:line="71" pos:column="32"/></condition><then pos:line="71" pos:column="32">
		<block type="pseudo"><goto pos:line="72" pos:column="17">goto <name pos:line="72" pos:column="22">err<pos:position pos:line="72" pos:column="25"/></name>;<pos:position pos:line="72" pos:column="26"/></goto></block></then></if>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><call><name pos:line="74" pos:column="13">yajl_gen_map_close<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><name pos:line="74" pos:column="32">g<pos:position pos:line="74" pos:column="33"/></name></expr></argument>)<pos:position pos:line="74" pos:column="34"/></argument_list></call> <operator pos:line="74" pos:column="35">!=<pos:position pos:line="74" pos:column="37"/></operator> <name pos:line="74" pos:column="38">yajl_gen_status_ok<pos:position pos:line="74" pos:column="56"/></name></expr>)<pos:position pos:line="74" pos:column="57"/></condition><then pos:line="74" pos:column="57">
		<block type="pseudo"><goto pos:line="75" pos:column="17">goto <name pos:line="75" pos:column="22">err<pos:position pos:line="75" pos:column="25"/></name>;<pos:position pos:line="75" pos:column="26"/></goto></block></then></if>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">yajl_gen_get_buf<pos:position pos:line="77" pos:column="29"/></name><argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">g<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="33">&amp;<pos:position pos:line="77" pos:column="38"/></operator><name pos:line="77" pos:column="34">buf<pos:position pos:line="77" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="39">&amp;<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="40">len<pos:position pos:line="77" pos:column="43"/></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call> <operator pos:line="77" pos:column="45">!=<pos:position pos:line="77" pos:column="47"/></operator> <name pos:line="77" pos:column="48">yajl_gen_status_ok<pos:position pos:line="77" pos:column="66"/></name></expr>)<pos:position pos:line="77" pos:column="67"/></condition><then pos:line="77" pos:column="67">
		<block type="pseudo"><goto pos:line="78" pos:column="17">goto <name pos:line="78" pos:column="22">err<pos:position pos:line="78" pos:column="25"/></name>;<pos:position pos:line="78" pos:column="26"/></goto></block></then></if>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">pthread_mutex_lock<pos:position pos:line="79" pos:column="27"/></name> <argument_list pos:line="79" pos:column="28">(<argument><expr><operator pos:line="79" pos:column="29">&amp;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="30">file_lock<pos:position pos:line="79" pos:column="39"/></name></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">log_file<pos:position pos:line="81" pos:column="21"/></name> <operator pos:line="81" pos:column="22">==<pos:position pos:line="81" pos:column="24"/></operator> <name pos:line="81" pos:column="25">NULL<pos:position pos:line="81" pos:column="29"/></name></expr>)<pos:position pos:line="81" pos:column="30"/></condition><then pos:line="81" pos:column="30">
	<block pos:line="82" pos:column="9">{
		<expr_stmt><expr><name pos:line="83" pos:column="17">fh<pos:position pos:line="83" pos:column="19"/></name> <operator pos:line="83" pos:column="20">=<pos:position pos:line="83" pos:column="21"/></operator> <call><name pos:line="83" pos:column="22">fopen<pos:position pos:line="83" pos:column="27"/></name> <argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">DEFAULT_LOGFILE<pos:position pos:line="83" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="46">"a"<pos:position pos:line="83" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="84" pos:column="17">do_close<pos:position pos:line="84" pos:column="25"/></name> <operator pos:line="84" pos:column="26">=<pos:position pos:line="84" pos:column="27"/></operator> <literal type="number" pos:line="84" pos:column="28">1<pos:position pos:line="84" pos:column="29"/></literal></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then> <elseif pos:line="85" pos:column="11">else <if pos:line="85" pos:column="16">if <condition pos:line="85" pos:column="19">(<expr><call><name pos:line="85" pos:column="20">strcasecmp<pos:position pos:line="85" pos:column="30"/></name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">log_file<pos:position pos:line="85" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="41">"stdout"<pos:position pos:line="85" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="50"/></argument_list></call> <operator pos:line="85" pos:column="51">==<pos:position pos:line="85" pos:column="53"/></operator> <literal type="number" pos:line="85" pos:column="54">0<pos:position pos:line="85" pos:column="55"/></literal></expr>)<pos:position pos:line="85" pos:column="56"/></condition><then pos:line="85" pos:column="56"> <block pos:line="85" pos:column="57">{
        <expr_stmt><expr><name pos:line="86" pos:column="9">fh<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">=<pos:position pos:line="86" pos:column="13"/></operator> <name pos:line="86" pos:column="14">stdout<pos:position pos:line="86" pos:column="20"/></name></expr>;<pos:position pos:line="86" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="87" pos:column="9">do_close<pos:position pos:line="87" pos:column="17"/></name> <operator pos:line="87" pos:column="18">=<pos:position pos:line="87" pos:column="19"/></operator> <literal type="number" pos:line="87" pos:column="20">0<pos:position pos:line="87" pos:column="21"/></literal></expr>;<pos:position pos:line="87" pos:column="22"/></expr_stmt>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if></elseif> <elseif pos:line="88" pos:column="11">else <if pos:line="88" pos:column="16">if <condition pos:line="88" pos:column="19">(<expr><call><name pos:line="88" pos:column="20">strcasecmp<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><name pos:line="88" pos:column="31">log_file<pos:position pos:line="88" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="41">"stderr"<pos:position pos:line="88" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="50"/></argument_list></call> <operator pos:line="88" pos:column="51">==<pos:position pos:line="88" pos:column="53"/></operator> <literal type="number" pos:line="88" pos:column="54">0<pos:position pos:line="88" pos:column="55"/></literal></expr>)<pos:position pos:line="88" pos:column="56"/></condition><then pos:line="88" pos:column="56"> <block pos:line="88" pos:column="57">{
        <expr_stmt><expr><name pos:line="89" pos:column="9">fh<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <name pos:line="89" pos:column="14">stderr<pos:position pos:line="89" pos:column="20"/></name></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="90" pos:column="9">do_close<pos:position pos:line="90" pos:column="17"/></name> <operator pos:line="90" pos:column="18">=<pos:position pos:line="90" pos:column="19"/></operator> <literal type="number" pos:line="90" pos:column="20">0<pos:position pos:line="90" pos:column="21"/></literal></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if></elseif> <else pos:line="91" pos:column="11">else <block pos:line="91" pos:column="16">{
		<expr_stmt><expr><name pos:line="92" pos:column="17">fh<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <call><name pos:line="92" pos:column="22">fopen<pos:position pos:line="92" pos:column="27"/></name> <argument_list pos:line="92" pos:column="28">(<argument><expr><name pos:line="92" pos:column="29">log_file<pos:position pos:line="92" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="39">"a"<pos:position pos:line="92" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">do_close<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">=<pos:position pos:line="93" pos:column="27"/></operator> <literal type="number" pos:line="93" pos:column="28">1<pos:position pos:line="93" pos:column="29"/></literal></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="94" pos:column="10"/></block></else></if>

	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">fh<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">==<pos:position pos:line="96" pos:column="18"/></operator> <name pos:line="96" pos:column="19">NULL<pos:position pos:line="96" pos:column="23"/></name></expr>)<pos:position pos:line="96" pos:column="24"/></condition><then pos:line="96" pos:column="24">
	<block pos:line="97" pos:column="9">{
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">char<pos:position pos:line="98" pos:column="29"/></name></type> <name><name pos:line="98" pos:column="30">errbuf<pos:position pos:line="98" pos:column="36"/></name><index pos:line="98" pos:column="36">[<expr><literal type="number" pos:line="98" pos:column="37">1024<pos:position pos:line="98" pos:column="41"/></literal></expr>]<pos:position pos:line="98" pos:column="42"/></index></name></decl>;<pos:position pos:line="98" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">fprintf<pos:position pos:line="99" pos:column="32"/></name> <argument_list pos:line="99" pos:column="33">(<argument><expr><name pos:line="99" pos:column="34">stderr<pos:position pos:line="99" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="42">"log_logstash plugin: fopen (%s) failed: %s\n"<pos:position pos:line="99" pos:column="88"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator pos:line="100" pos:column="41">(<pos:position pos:line="100" pos:column="42"/></operator><name pos:line="100" pos:column="42">log_file<pos:position pos:line="100" pos:column="50"/></name> <operator pos:line="100" pos:column="51">==<pos:position pos:line="100" pos:column="53"/></operator> <name pos:line="100" pos:column="54">NULL<pos:position pos:line="100" pos:column="58"/></name><operator pos:line="100" pos:column="58">)<pos:position pos:line="100" pos:column="59"/></operator></expr> ?<pos:position pos:line="100" pos:column="61"/></condition><then pos:line="100" pos:column="61"> <expr><name pos:line="100" pos:column="62">DEFAULT_LOGFILE<pos:position pos:line="100" pos:column="77"/></name></expr> <pos:position pos:line="100" pos:column="78"/></then><else pos:line="100" pos:column="78">: <expr><name pos:line="100" pos:column="80">log_file<pos:position pos:line="100" pos:column="88"/></name></expr></else></ternary></expr></argument>,
					<argument><expr><call><name pos:line="101" pos:column="41">sstrerror<pos:position pos:line="101" pos:column="50"/></name> <argument_list pos:line="101" pos:column="51">(<argument><expr><name pos:line="101" pos:column="52">errno<pos:position pos:line="101" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="59">errbuf<pos:position pos:line="101" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="101" pos:column="67">sizeof <argument_list pos:line="101" pos:column="74">(<argument><expr><name pos:line="101" pos:column="75">errbuf<pos:position pos:line="101" pos:column="81"/></name></expr></argument>)<pos:position pos:line="101" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="101" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="85"/></expr_stmt>
	}<pos:position pos:line="102" pos:column="10"/></block></then>
	<else pos:line="103" pos:column="9">else
	<block pos:line="104" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">fprintf<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><name pos:line="105" pos:column="25">fh<pos:position pos:line="105" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="29">"%s\n"<pos:position pos:line="105" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="37">buf<pos:position pos:line="105" pos:column="40"/></name></expr></argument>)<pos:position pos:line="105" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="42"/></expr_stmt>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name pos:line="106" pos:column="21">do_close<pos:position pos:line="106" pos:column="29"/></name></expr>)<pos:position pos:line="106" pos:column="30"/></condition><then pos:line="106" pos:column="30"> <block pos:line="106" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">fclose<pos:position pos:line="107" pos:column="31"/></name> <argument_list pos:line="107" pos:column="32">(<argument><expr><name pos:line="107" pos:column="33">fh<pos:position pos:line="107" pos:column="35"/></name></expr></argument>)<pos:position pos:line="107" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="108" pos:column="18"/></block></then> <else pos:line="108" pos:column="19">else <block pos:line="108" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">fflush<pos:position pos:line="109" pos:column="31"/></name><argument_list pos:line="109" pos:column="31">(<argument><expr><name pos:line="109" pos:column="32">fh<pos:position pos:line="109" pos:column="34"/></name></expr></argument>)<pos:position pos:line="109" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="110" pos:column="18"/></block></else></if>
	}<pos:position pos:line="111" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">pthread_mutex_unlock<pos:position pos:line="112" pos:column="29"/></name> <argument_list pos:line="112" pos:column="30">(<argument><expr><operator pos:line="112" pos:column="31">&amp;<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="32">file_lock<pos:position pos:line="112" pos:column="41"/></name></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">yajl_gen_free<pos:position pos:line="113" pos:column="22"/></name><argument_list pos:line="113" pos:column="22">(<argument><expr><name pos:line="113" pos:column="23">g<pos:position pos:line="113" pos:column="24"/></name></expr></argument>)<pos:position pos:line="113" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="26"/></expr_stmt>
	<return pos:line="114" pos:column="9">return;<pos:position pos:line="114" pos:column="16"/></return>

 <label><name pos:line="116" pos:column="2">err<pos:position pos:line="116" pos:column="5"/></name>:<pos:position pos:line="116" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">yajl_gen_free<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><name pos:line="117" pos:column="23">g<pos:position pos:line="117" pos:column="24"/></name></expr></argument>)<pos:position pos:line="117" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="118" pos:column="9">fprintf<pos:position pos:line="118" pos:column="16"/></name><argument_list pos:line="118" pos:column="16">(<argument><expr><name pos:line="118" pos:column="17">stderr<pos:position pos:line="118" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="25">"Could not correctly generate JSON message\n"<pos:position pos:line="118" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="72"/></expr_stmt>
	<return pos:line="119" pos:column="9">return;<pos:position pos:line="119" pos:column="16"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
