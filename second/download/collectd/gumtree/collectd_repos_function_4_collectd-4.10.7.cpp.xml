<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_4_collectd-4.10.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">argz_stringify<pos:position pos:line="2" pos:column="15"/></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argz<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">size_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">argz_len<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">sep<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">assert<pos:position pos:line="4" pos:column="9"/></name> <argument_list pos:line="4" pos:column="10">(<argument><expr><operator pos:line="4" pos:column="11">(<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">argz<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">&amp;&amp;<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="20">argz_len<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">)<pos:position pos:line="4" pos:column="29"/></operator> <operator pos:line="4" pos:column="30">||<pos:position pos:line="4" pos:column="32"/></operator> <operator pos:line="4" pos:column="33">(<pos:position pos:line="4" pos:column="34"/></operator><operator pos:line="4" pos:column="34">!<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">argz<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">&amp;&amp;<pos:position pos:line="4" pos:column="50"/></operator> <operator pos:line="4" pos:column="43">!<pos:position pos:line="4" pos:column="44"/></operator><name pos:line="4" pos:column="44">argz_len<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">)<pos:position pos:line="4" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">sep<pos:position pos:line="6" pos:column="10"/></name></expr>)<pos:position pos:line="6" pos:column="11"/></condition><then pos:line="6" pos:column="11">
    <block pos:line="7" pos:column="5">{
      <expr_stmt><expr><operator pos:line="8" pos:column="7">--<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">argz_len<pos:position pos:line="8" pos:column="17"/></name></expr>;<pos:position pos:line="8" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="8" pos:column="33">/* don't stringify the terminating EOS */</comment>
      <while pos:line="9" pos:column="7">while <condition pos:line="9" pos:column="13">(<expr><operator pos:line="9" pos:column="14">--<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">argz_len<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">&gt;<pos:position pos:line="9" pos:column="29"/></operator> <literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr>)<pos:position pos:line="9" pos:column="29"/></condition>
	<block pos:line="10" pos:column="9">{
	  <if pos:line="11" pos:column="11">if <condition pos:line="11" pos:column="14">(<expr><name><name pos:line="11" pos:column="15">argz<pos:position pos:line="11" pos:column="19"/></name><index pos:line="11" pos:column="19">[<expr><name pos:line="11" pos:column="20">argz_len<pos:position pos:line="11" pos:column="28"/></name></expr>]<pos:position pos:line="11" pos:column="29"/></index></name> <operator pos:line="11" pos:column="30">==<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">EOS_CHAR<pos:position pos:line="11" pos:column="41"/></name></expr>)<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42">
	    <block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="13">argz<pos:position pos:line="12" pos:column="17"/></name><index pos:line="12" pos:column="17">[<expr><name pos:line="12" pos:column="18">argz_len<pos:position pos:line="12" pos:column="26"/></name></expr>]<pos:position pos:line="12" pos:column="27"/></index></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">sep<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
