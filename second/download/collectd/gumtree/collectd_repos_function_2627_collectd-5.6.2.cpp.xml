<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2627_collectd-5.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_init_all<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list> <block pos:line="1" pos:column="27">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <specifier pos:line="2" pos:column="8">const<pos:position pos:line="2" pos:column="13"/></specifier> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">chain_name<pos:position pos:line="2" pos:column="25"/></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">llentry_t<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">le<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">ret<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Init the value cache */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">uc_init<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">()<pos:position pos:line="8" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="13"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">IS_TRUE<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><call><name pos:line="10" pos:column="15">global_option_get<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><literal type="string" pos:line="10" pos:column="33">"CollectInternalStats"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="58"/></condition><then pos:line="10" pos:column="58">
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">record_statistics<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">chain_name<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <call><name pos:line="13" pos:column="16">global_option_get<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><literal type="string" pos:line="13" pos:column="34">"PreCacheChain"<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">pre_cache_chain<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">fc_chain_get_by_name<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">(<argument><expr><name pos:line="14" pos:column="42">chain_name<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">chain_name<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">global_option_get<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><literal type="string" pos:line="16" pos:column="34">"PostCacheChain"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">post_cache_chain<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">fc_chain_get_by_name<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">chain_name<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">write_limit_high<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">global_option_get_long<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><literal type="string" pos:line="19" pos:column="45">"WriteQueueLimitHigh"<pos:position pos:line="19" pos:column="66"/></literal></expr></argument>,
                                            <comment type="block" pos:line="20" pos:column="45">/* default = */</comment> <argument><expr><literal type="number" pos:line="20" pos:column="61">0<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">write_limit_high<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">&lt;<pos:position pos:line="21" pos:column="28"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <block pos:line="21" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="string" pos:line="22" pos:column="11">"WriteQueueLimitHigh must be positive or zero."<pos:position pos:line="22" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">write_limit_high<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">write_limit_low<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator>
      <call><name pos:line="27" pos:column="7">global_option_get_long<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><literal type="string" pos:line="27" pos:column="30">"WriteQueueLimitLow"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>,
                             <comment type="block" pos:line="28" pos:column="30">/* default = */</comment> <argument><expr><name pos:line="28" pos:column="46">write_limit_high<pos:position pos:line="28" pos:column="62"/></name> <operator pos:line="28" pos:column="63">/<pos:position pos:line="28" pos:column="64"/></operator> <literal type="number" pos:line="28" pos:column="65">2<pos:position pos:line="28" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">write_limit_low<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <literal type="number" pos:line="29" pos:column="25">0<pos:position pos:line="29" pos:column="26"/></literal></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"WriteQueueLimitLow must be positive or zero."<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">write_limit_low<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">write_limit_high<pos:position pos:line="31" pos:column="39"/></name> <operator pos:line="31" pos:column="40">/<pos:position pos:line="31" pos:column="41"/></operator> <literal type="number" pos:line="31" pos:column="42">2<pos:position pos:line="31" pos:column="43"/></literal></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then> <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><name pos:line="32" pos:column="14">write_limit_low<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">&gt;<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="32">write_limit_high<pos:position pos:line="32" pos:column="48"/></name></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49"> <block pos:line="32" pos:column="50">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ERROR<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><literal type="string" pos:line="33" pos:column="11">"WriteQueueLimitLow must not be larger than "<pos:position pos:line="33" pos:column="56"/></literal>
          <literal type="string" pos:line="34" pos:column="11">"WriteQueueLimitHigh."<pos:position pos:line="34" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">write_limit_low<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">write_limit_high<pos:position pos:line="35" pos:column="39"/></name></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="38" pos:column="3">write_threads_num<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <call><name pos:line="38" pos:column="23">global_option_get_long<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><literal type="string" pos:line="38" pos:column="46">"WriteThreads"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>,
                                             <comment type="block" pos:line="39" pos:column="46">/* default = */</comment> <argument><expr><literal type="number" pos:line="39" pos:column="62">5<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">write_threads_num<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">&lt;<pos:position pos:line="40" pos:column="29"/></operator> <literal type="number" pos:line="40" pos:column="27">1<pos:position pos:line="40" pos:column="28"/></literal></expr>)<pos:position pos:line="40" pos:column="29"/></condition><then pos:line="40" pos:column="29"> <block pos:line="40" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ERROR<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><literal type="string" pos:line="41" pos:column="11">"WriteThreads must be positive."<pos:position pos:line="41" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">write_threads_num<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <literal type="number" pos:line="42" pos:column="25">5<pos:position pos:line="42" pos:column="26"/></literal></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><operator pos:line="45" pos:column="7">(<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">list_init<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">==<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">NULL<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">)<pos:position pos:line="45" pos:column="26"/></operator> <operator pos:line="45" pos:column="27">&amp;&amp;<pos:position pos:line="45" pos:column="37"/></operator> <operator pos:line="45" pos:column="30">(<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="31">read_heap<pos:position pos:line="45" pos:column="40"/></name> <operator pos:line="45" pos:column="41">==<pos:position pos:line="45" pos:column="43"/></operator> <name pos:line="45" pos:column="44">NULL<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">)<pos:position pos:line="45" pos:column="49"/></operator></expr>)<pos:position pos:line="45" pos:column="50"/></condition><then pos:line="45" pos:column="50">
    <block type="pseudo"><return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">ret<pos:position pos:line="46" pos:column="15"/></name></expr>;<pos:position pos:line="46" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="48" pos:column="3">/* Calling all init callbacks before checking if read callbacks
   * are available allows the init callbacks to register the read
   * callback. */</comment>
  <expr_stmt><expr><name pos:line="51" pos:column="3">le<pos:position pos:line="51" pos:column="5"/></name> <operator pos:line="51" pos:column="6">=<pos:position pos:line="51" pos:column="7"/></operator> <call><name pos:line="51" pos:column="8">llist_head<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">list_init<pos:position pos:line="51" pos:column="28"/></name></expr></argument>)<pos:position pos:line="51" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>
  <while pos:line="52" pos:column="3">while <condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">le<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">!=<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">NULL<pos:position pos:line="52" pos:column="20"/></name></expr>)<pos:position pos:line="52" pos:column="21"/></condition> <block pos:line="52" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="53" pos:column="5">callback_func_t<pos:position pos:line="53" pos:column="20"/></name> <modifier pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></modifier></type><name pos:line="53" pos:column="22">cf<pos:position pos:line="53" pos:column="24"/></name></decl>;<pos:position pos:line="53" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">plugin_init_cb<pos:position pos:line="54" pos:column="19"/></name></type> <name pos:line="54" pos:column="20">callback<pos:position pos:line="54" pos:column="28"/></name></decl>;<pos:position pos:line="54" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">plugin_ctx_t<pos:position pos:line="55" pos:column="17"/></name></type> <name pos:line="55" pos:column="18">old_ctx<pos:position pos:line="55" pos:column="25"/></name></decl>;<pos:position pos:line="55" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="57" pos:column="5">cf<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <name><name pos:line="57" pos:column="10">le<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">value<pos:position pos:line="57" pos:column="19"/></name></name></expr>;<pos:position pos:line="57" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="58" pos:column="5">old_ctx<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <call><name pos:line="58" pos:column="15">plugin_set_ctx<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name><name pos:line="58" pos:column="30">cf<pos:position pos:line="58" pos:column="32"/></name><operator pos:line="58" pos:column="32">-&gt;<pos:position pos:line="58" pos:column="37"/></operator><name pos:line="58" pos:column="34">cf_ctx<pos:position pos:line="58" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">callback<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <name><name pos:line="59" pos:column="16">cf<pos:position pos:line="59" pos:column="18"/></name><operator pos:line="59" pos:column="18">-&gt;<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="20">cf_callback<pos:position pos:line="59" pos:column="31"/></name></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">status<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call pos:line="60" pos:column="14">(<modifier pos:line="60" pos:column="15">*<pos:position pos:line="60" pos:column="16"/></modifier><name pos:line="60" pos:column="16">callback<pos:position pos:line="60" pos:column="24"/></name>)<argument_list pos:line="60" pos:column="25">()<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">plugin_set_ctx<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">old_ctx<pos:position pos:line="61" pos:column="27"/></name></expr></argument>)<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">status<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">!=<pos:position pos:line="63" pos:column="18"/></operator> <literal type="number" pos:line="63" pos:column="19">0<pos:position pos:line="63" pos:column="20"/></literal></expr>)<pos:position pos:line="63" pos:column="21"/></condition><then pos:line="63" pos:column="21"> <block pos:line="63" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">ERROR<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><literal type="string" pos:line="64" pos:column="13">"Initialization of plugin `%s' "<pos:position pos:line="64" pos:column="45"/></literal>
            <literal type="string" pos:line="65" pos:column="13">"failed with status %i. "<pos:position pos:line="65" pos:column="38"/></literal>
            <literal type="string" pos:line="66" pos:column="13">"Plugin will be unloaded."<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="67" pos:column="13">le<pos:position pos:line="67" pos:column="15"/></name><operator pos:line="67" pos:column="15">-&gt;<pos:position pos:line="67" pos:column="20"/></operator><name pos:line="67" pos:column="17">key<pos:position pos:line="67" pos:column="20"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="22">status<pos:position pos:line="67" pos:column="28"/></name></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
      <comment type="block" pos:line="68" pos:column="7">/* Plugins that register read callbacks from the init
       * callback should take care of appropriate error
       * handling themselves. */</comment>
      <comment type="block" pos:line="71" pos:column="7">/* FIXME: Unload _all_ functions */</comment>
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">plugin_unregister_read<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name><name pos:line="72" pos:column="30">le<pos:position pos:line="72" pos:column="32"/></name><operator pos:line="72" pos:column="32">-&gt;<pos:position pos:line="72" pos:column="37"/></operator><name pos:line="72" pos:column="34">key<pos:position pos:line="72" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="73" pos:column="7">ret<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <operator pos:line="73" pos:column="13">-<pos:position pos:line="73" pos:column="14"/></operator><literal type="number" pos:line="73" pos:column="14">1<pos:position pos:line="73" pos:column="15"/></literal></expr>;<pos:position pos:line="73" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="76" pos:column="5">le<pos:position pos:line="76" pos:column="7"/></name> <operator pos:line="76" pos:column="8">=<pos:position pos:line="76" pos:column="9"/></operator> <name><name pos:line="76" pos:column="10">le<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">next<pos:position pos:line="76" pos:column="18"/></name></name></expr>;<pos:position pos:line="76" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="77" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="79" pos:column="3">start_write_threads<pos:position pos:line="79" pos:column="22"/></name><argument_list pos:line="79" pos:column="22">(<argument><expr><operator pos:line="79" pos:column="23">(<pos:position pos:line="79" pos:column="24"/></operator><name pos:line="79" pos:column="24">size_t<pos:position pos:line="79" pos:column="30"/></name><operator pos:line="79" pos:column="30">)<pos:position pos:line="79" pos:column="31"/></operator><name pos:line="79" pos:column="31">write_threads_num<pos:position pos:line="79" pos:column="48"/></name></expr></argument>)<pos:position pos:line="79" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="50"/></expr_stmt>

  <expr_stmt><expr><name pos:line="81" pos:column="3">max_read_interval<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">=<pos:position pos:line="81" pos:column="22"/></operator>
      <call><name pos:line="82" pos:column="7">global_option_get_time<pos:position pos:line="82" pos:column="29"/></name><argument_list pos:line="82" pos:column="29">(<argument><expr><literal type="string" pos:line="82" pos:column="30">"MaxReadInterval"<pos:position pos:line="82" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">DEFAULT_MAX_READ_INTERVAL<pos:position pos:line="82" pos:column="74"/></name></expr></argument>)<pos:position pos:line="82" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="76"/></expr_stmt>

  <comment type="block" pos:line="84" pos:column="3">/* Start read-threads */</comment>
  <if pos:line="85" pos:column="3">if <condition pos:line="85" pos:column="6">(<expr><name pos:line="85" pos:column="7">read_heap<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">!=<pos:position pos:line="85" pos:column="19"/></operator> <name pos:line="85" pos:column="20">NULL<pos:position pos:line="85" pos:column="24"/></name></expr>)<pos:position pos:line="85" pos:column="25"/></condition><then pos:line="85" pos:column="25"> <block pos:line="85" pos:column="26">{
    <decl_stmt><decl><type><specifier pos:line="86" pos:column="5">const<pos:position pos:line="86" pos:column="10"/></specifier> <name pos:line="86" pos:column="11">char<pos:position pos:line="86" pos:column="15"/></name> <modifier pos:line="86" pos:column="16">*<pos:position pos:line="86" pos:column="17"/></modifier></type><name pos:line="86" pos:column="17">rt<pos:position pos:line="86" pos:column="19"/></name></decl>;<pos:position pos:line="86" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="87" pos:column="5">int<pos:position pos:line="87" pos:column="8"/></name></type> <name pos:line="87" pos:column="9">num<pos:position pos:line="87" pos:column="12"/></name></decl>;<pos:position pos:line="87" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="89" pos:column="5">rt<pos:position pos:line="89" pos:column="7"/></name> <operator pos:line="89" pos:column="8">=<pos:position pos:line="89" pos:column="9"/></operator> <call><name pos:line="89" pos:column="10">global_option_get<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><literal type="string" pos:line="89" pos:column="28">"ReadThreads"<pos:position pos:line="89" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="90" pos:column="5">num<pos:position pos:line="90" pos:column="8"/></name> <operator pos:line="90" pos:column="9">=<pos:position pos:line="90" pos:column="10"/></operator> <call><name pos:line="90" pos:column="11">atoi<pos:position pos:line="90" pos:column="15"/></name><argument_list pos:line="90" pos:column="15">(<argument><expr><name pos:line="90" pos:column="16">rt<pos:position pos:line="90" pos:column="18"/></name></expr></argument>)<pos:position pos:line="90" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="20"/></expr_stmt>
    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><name pos:line="91" pos:column="9">num<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">!=<pos:position pos:line="91" pos:column="15"/></operator> <operator pos:line="91" pos:column="16">-<pos:position pos:line="91" pos:column="17"/></operator><literal type="number" pos:line="91" pos:column="17">1<pos:position pos:line="91" pos:column="18"/></literal></expr>)<pos:position pos:line="91" pos:column="19"/></condition><then pos:line="91" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="7">start_read_threads<pos:position pos:line="92" pos:column="25"/></name><argument_list pos:line="92" pos:column="25">(<argument><expr><ternary><condition><expr><operator pos:line="92" pos:column="26">(<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="27">num<pos:position pos:line="92" pos:column="30"/></name> <operator pos:line="92" pos:column="31">&gt;<pos:position pos:line="92" pos:column="35"/></operator> <literal type="number" pos:line="92" pos:column="33">0<pos:position pos:line="92" pos:column="34"/></literal><operator pos:line="92" pos:column="34">)<pos:position pos:line="92" pos:column="35"/></operator></expr> ?<pos:position pos:line="92" pos:column="37"/></condition><then pos:line="92" pos:column="37"> <expr><name pos:line="92" pos:column="38">num<pos:position pos:line="92" pos:column="41"/></name></expr> <pos:position pos:line="92" pos:column="42"/></then><else pos:line="92" pos:column="42">: <expr><literal type="number" pos:line="92" pos:column="44">5<pos:position pos:line="92" pos:column="45"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="92" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="47"/></expr_stmt></block></then></if>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>
  <return pos:line="94" pos:column="3">return <expr><name pos:line="94" pos:column="10">ret<pos:position pos:line="94" pos:column="13"/></name></expr>;<pos:position pos:line="94" pos:column="14"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
