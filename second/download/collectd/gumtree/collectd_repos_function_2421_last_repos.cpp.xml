<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2421_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ts_invoke_derive<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">data_set_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ds<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">value_list_t<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">vl<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="69">/* {{{ */</comment>
                            <parameter><decl><type><name pos:line="2" pos:column="29">ts_data_t<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">data<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">dsrc_index<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <block pos:line="2" pos:column="62">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int64_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">curr_derive<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">failure<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Required meta data */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int64_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">prev_derive<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">key_prev_derive<pos:position pos:line="9" pos:column="23"/></name><index pos:line="9" pos:column="23">[<expr><literal type="number" pos:line="9" pos:column="24">128<pos:position pos:line="9" pos:column="27"/></literal></expr>]<pos:position pos:line="9" pos:column="28"/></index></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int64_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">int_derive<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">key_int_derive<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><literal type="number" pos:line="11" pos:column="23">128<pos:position pos:line="11" pos:column="26"/></literal></expr>]<pos:position pos:line="11" pos:column="27"/></index></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">double<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">int_fraction<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name><name pos:line="13" pos:column="8">key_int_fraction<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><literal type="number" pos:line="13" pos:column="25">128<pos:position pos:line="13" pos:column="28"/></literal></expr>]<pos:position pos:line="13" pos:column="29"/></index></name></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">curr_derive<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <operator pos:line="15" pos:column="17">(<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">int64_t<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator><name><name pos:line="15" pos:column="26">vl<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">values<pos:position pos:line="15" pos:column="36"/></name><index pos:line="15" pos:column="36">[<expr><name pos:line="15" pos:column="37">dsrc_index<pos:position pos:line="15" pos:column="47"/></name></expr>]<pos:position pos:line="15" pos:column="48"/></index></name><operator pos:line="15" pos:column="48">.<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">derive<pos:position pos:line="15" pos:column="55"/></name></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">snprintf<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">key_prev_derive<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="29">sizeof<argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">key_prev_derive<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string" pos:line="18" pos:column="12">"target_scale[%p,%i]:prev_derive"<pos:position pos:line="18" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="47">(<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">void<pos:position pos:line="18" pos:column="52"/></name> <operator pos:line="18" pos:column="53">*<pos:position pos:line="18" pos:column="54"/></operator><operator pos:line="18" pos:column="54">)<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="55">data<pos:position pos:line="18" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="61">dsrc_index<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">snprintf<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">key_int_derive<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="28">sizeof<argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">key_int_derive<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string" pos:line="20" pos:column="12">"target_scale[%p,%i]:int_derive"<pos:position pos:line="20" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">(<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">void<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">*<pos:position pos:line="20" pos:column="53"/></operator><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">data<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="60">dsrc_index<pos:position pos:line="20" pos:column="70"/></name></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">snprintf<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">key_int_fraction<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="30">sizeof<argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">key_int_fraction<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string" pos:line="22" pos:column="12">"target_scale[%p,%i]:int_fraction"<pos:position pos:line="22" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">(<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">void<pos:position pos:line="22" pos:column="53"/></name> <operator pos:line="22" pos:column="54">*<pos:position pos:line="22" pos:column="55"/></operator><operator pos:line="22" pos:column="55">)<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">data<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="62">dsrc_index<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">prev_derive<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">curr_derive<pos:position pos:line="24" pos:column="28"/></name></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">int_derive<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="26" pos:column="3">int_fraction<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0.0<pos:position pos:line="26" pos:column="21"/></literal></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Query the meta data */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">failure<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><name pos:line="31" pos:column="3">status<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <call><name pos:line="31" pos:column="12">uc_meta_data_get_signed_int<pos:position pos:line="31" pos:column="39"/></name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">vl<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">key_prev_derive<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="61">&amp;<pos:position pos:line="31" pos:column="66"/></operator><name pos:line="31" pos:column="62">prev_derive<pos:position pos:line="31" pos:column="73"/></name></expr></argument>)<pos:position pos:line="31" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="75"/></expr_stmt>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">status<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">!=<pos:position pos:line="32" pos:column="16"/></operator> <literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="5">failure<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">++<pos:position pos:line="33" pos:column="14"/></operator></expr>;<pos:position pos:line="33" pos:column="15"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="35" pos:column="3">status<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">uc_meta_data_get_signed_int<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">vl<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">key_int_derive<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="60">&amp;<pos:position pos:line="35" pos:column="65"/></operator><name pos:line="35" pos:column="61">int_derive<pos:position pos:line="35" pos:column="71"/></name></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="73"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="5">failure<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">++<pos:position pos:line="37" pos:column="14"/></operator></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="39" pos:column="3">status<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <call><name pos:line="39" pos:column="12">uc_meta_data_get_double<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">vl<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">key_int_fraction<pos:position pos:line="39" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="58">&amp;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="59">int_fraction<pos:position pos:line="39" pos:column="71"/></name></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="73"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">!=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal></expr>)<pos:position pos:line="40" pos:column="19"/></condition><then pos:line="40" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="5">failure<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">++<pos:position pos:line="41" pos:column="14"/></operator></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt></block></then></if>

  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><name pos:line="43" pos:column="7">failure<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">==<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20"> <block pos:line="43" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">int64_t<pos:position pos:line="44" pos:column="12"/></name></type> <name pos:line="44" pos:column="13">difference<pos:position pos:line="44" pos:column="23"/></name></decl>;<pos:position pos:line="44" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">double<pos:position pos:line="45" pos:column="11"/></name></type> <name pos:line="45" pos:column="12">rate<pos:position pos:line="45" pos:column="16"/></name></decl>;<pos:position pos:line="45" pos:column="17"/></decl_stmt>

    <comment type="block" pos:line="47" pos:column="5">/* Calcualte the rate */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">difference<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">curr_derive<pos:position pos:line="48" pos:column="29"/></name> <operator pos:line="48" pos:column="30">-<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="32">prev_derive<pos:position pos:line="48" pos:column="43"/></name></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="49" pos:column="5">rate<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <operator pos:line="49" pos:column="12">(<pos:position pos:line="49" pos:column="13"/></operator><operator pos:line="49" pos:column="13">(<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">double<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">)<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">difference<pos:position pos:line="49" pos:column="31"/></name><operator pos:line="49" pos:column="31">)<pos:position pos:line="49" pos:column="32"/></operator> <operator pos:line="49" pos:column="33">/<pos:position pos:line="49" pos:column="34"/></operator> <call><name pos:line="49" pos:column="35">CDTIME_T_TO_DOUBLE<pos:position pos:line="49" pos:column="53"/></name><argument_list pos:line="49" pos:column="53">(<argument><expr><name><name pos:line="49" pos:column="54">vl<pos:position pos:line="49" pos:column="56"/></name><operator pos:line="49" pos:column="56">-&gt;<pos:position pos:line="49" pos:column="61"/></operator><name pos:line="49" pos:column="58">interval<pos:position pos:line="49" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="68"/></expr_stmt>

    <comment type="block" pos:line="51" pos:column="5">/* Modify the rate. */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><operator pos:line="52" pos:column="9">!<pos:position pos:line="52" pos:column="10"/></operator><call><name pos:line="52" pos:column="10">isnan<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><name><name pos:line="52" pos:column="16">data<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">-&gt;<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="22">factor<pos:position pos:line="52" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="7">rate<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">*=<pos:position pos:line="53" pos:column="14"/></operator> <name><name pos:line="53" pos:column="15">data<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">factor<pos:position pos:line="53" pos:column="27"/></name></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt></block></then></if>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><operator pos:line="54" pos:column="9">!<pos:position pos:line="54" pos:column="10"/></operator><call><name pos:line="54" pos:column="10">isnan<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name><name pos:line="54" pos:column="16">data<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">offset<pos:position pos:line="54" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="7">rate<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">+=<pos:position pos:line="55" pos:column="14"/></operator> <name><name pos:line="55" pos:column="15">data<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">offset<pos:position pos:line="55" pos:column="27"/></name></name></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* Calculate the internal derive. */</comment>
    <expr_stmt><expr><name pos:line="58" pos:column="5">int_fraction<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">+=<pos:position pos:line="58" pos:column="20"/></operator> <operator pos:line="58" pos:column="21">(<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">rate<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">*<pos:position pos:line="58" pos:column="28"/></operator> <call><name pos:line="58" pos:column="29">CDTIME_T_TO_DOUBLE<pos:position pos:line="58" pos:column="47"/></name><argument_list pos:line="58" pos:column="47">(<argument><expr><name><name pos:line="58" pos:column="48">vl<pos:position pos:line="58" pos:column="50"/></name><operator pos:line="58" pos:column="50">-&gt;<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="52">interval<pos:position pos:line="58" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call><operator pos:line="58" pos:column="61">)<pos:position pos:line="58" pos:column="62"/></operator></expr>;<pos:position pos:line="58" pos:column="63"/></expr_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">int_fraction<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">&lt;<pos:position pos:line="59" pos:column="26"/></operator> <literal type="number" pos:line="59" pos:column="24">0.0<pos:position pos:line="59" pos:column="27"/></literal></expr>)<pos:position pos:line="59" pos:column="28"/></condition><then pos:line="59" pos:column="28"> <comment type="block" pos:line="59" pos:column="29">/* handle negative integer rounding correctly */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="7">difference<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <operator pos:line="60" pos:column="20">(<pos:position pos:line="60" pos:column="21"/></operator><operator pos:line="60" pos:column="21">(<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">int64_t<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">)<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">int_fraction<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">)<pos:position pos:line="60" pos:column="43"/></operator> <operator pos:line="60" pos:column="44">-<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="46">1<pos:position pos:line="60" pos:column="47"/></literal></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt></block></then>
    <else pos:line="61" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="7">difference<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <operator pos:line="62" pos:column="20">(<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="21">int64_t<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">)<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="29">int_fraction<pos:position pos:line="62" pos:column="41"/></name></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">int_fraction<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">-=<pos:position pos:line="63" pos:column="20"/></operator> <operator pos:line="63" pos:column="21">(<pos:position pos:line="63" pos:column="22"/></operator><operator pos:line="63" pos:column="22">(<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="23">double<pos:position pos:line="63" pos:column="29"/></name><operator pos:line="63" pos:column="29">)<pos:position pos:line="63" pos:column="30"/></operator><name pos:line="63" pos:column="30">difference<pos:position pos:line="63" pos:column="40"/></name><operator pos:line="63" pos:column="40">)<pos:position pos:line="63" pos:column="41"/></operator></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">int_derive<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">+=<pos:position pos:line="64" pos:column="18"/></operator> <name pos:line="64" pos:column="19">difference<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">assert<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><name pos:line="66" pos:column="12">int_fraction<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">&gt;=<pos:position pos:line="66" pos:column="30"/></operator> <literal type="number" pos:line="66" pos:column="28">0.0<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">assert<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name pos:line="67" pos:column="12">int_fraction<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">&lt;<pos:position pos:line="67" pos:column="29"/></operator> <literal type="number" pos:line="67" pos:column="27">1.0<pos:position pos:line="67" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">DEBUG<pos:position pos:line="69" pos:column="10"/></name><argument_list pos:line="69" pos:column="10">(<argument><expr><literal type="string" pos:line="69" pos:column="11">"Target `scale': ts_invoke_derive: %"<pos:position pos:line="69" pos:column="48"/></literal> <name pos:line="69" pos:column="49">PRIu64<pos:position pos:line="69" pos:column="55"/></name> <literal type="string" pos:line="69" pos:column="56">" -&gt; %g -&gt; %"<pos:position pos:line="69" pos:column="75"/></literal> <name pos:line="69" pos:column="70">PRIu64<pos:position pos:line="69" pos:column="76"/></name>
          <literal type="string" pos:line="70" pos:column="11">"(+%g)"<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>,
          <argument><expr><name pos:line="71" pos:column="11">curr_derive<pos:position pos:line="71" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="24">rate<pos:position pos:line="71" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="30">int_derive<pos:position pos:line="71" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="42">int_fraction<pos:position pos:line="71" pos:column="54"/></name></expr></argument>)<pos:position pos:line="71" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="72" pos:column="4"/></block></then> <else pos:line="72" pos:column="5">else <comment type="block" pos:line="72" pos:column="10">/* (failure != 0) */</comment>
  <block pos:line="73" pos:column="3">{
    <expr_stmt><expr><name pos:line="74" pos:column="5">int_derive<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr>;<pos:position pos:line="74" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="75" pos:column="5">int_fraction<pos:position pos:line="75" pos:column="17"/></name> <operator pos:line="75" pos:column="18">=<pos:position pos:line="75" pos:column="19"/></operator> <literal type="number" pos:line="75" pos:column="20">0.0<pos:position pos:line="75" pos:column="23"/></literal></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name><name pos:line="78" pos:column="3">vl<pos:position pos:line="78" pos:column="5"/></name><operator pos:line="78" pos:column="5">-&gt;<pos:position pos:line="78" pos:column="10"/></operator><name pos:line="78" pos:column="7">values<pos:position pos:line="78" pos:column="13"/></name><index pos:line="78" pos:column="13">[<expr><name pos:line="78" pos:column="14">dsrc_index<pos:position pos:line="78" pos:column="24"/></name></expr>]<pos:position pos:line="78" pos:column="25"/></index></name><operator pos:line="78" pos:column="25">.<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="26">derive<pos:position pos:line="78" pos:column="32"/></name> <operator pos:line="78" pos:column="33">=<pos:position pos:line="78" pos:column="34"/></operator> <operator pos:line="78" pos:column="35">(<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="36">derive_t<pos:position pos:line="78" pos:column="44"/></name><operator pos:line="78" pos:column="44">)<pos:position pos:line="78" pos:column="45"/></operator><name pos:line="78" pos:column="45">int_derive<pos:position pos:line="78" pos:column="55"/></name></expr>;<pos:position pos:line="78" pos:column="56"/></expr_stmt>

  <comment type="block" pos:line="80" pos:column="3">/* Update to the new derive value */</comment>
  <expr_stmt><expr><call><name pos:line="81" pos:column="3">uc_meta_data_add_signed_int<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><name pos:line="81" pos:column="31">vl<pos:position pos:line="81" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="35">key_prev_derive<pos:position pos:line="81" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">curr_derive<pos:position pos:line="81" pos:column="63"/></name></expr></argument>)<pos:position pos:line="81" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="82" pos:column="3">uc_meta_data_add_signed_int<pos:position pos:line="82" pos:column="30"/></name><argument_list pos:line="82" pos:column="30">(<argument><expr><name pos:line="82" pos:column="31">vl<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">key_int_derive<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="51">int_derive<pos:position pos:line="82" pos:column="61"/></name></expr></argument>)<pos:position pos:line="82" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="83" pos:column="3">uc_meta_data_add_double<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><name pos:line="83" pos:column="27">vl<pos:position pos:line="83" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="31">key_int_fraction<pos:position pos:line="83" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="49">int_fraction<pos:position pos:line="83" pos:column="61"/></name></expr></argument>)<pos:position pos:line="83" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="63"/></expr_stmt>

  <return pos:line="85" pos:column="3">return <expr><literal type="number" pos:line="85" pos:column="10">0<pos:position pos:line="85" pos:column="11"/></literal></expr>;<pos:position pos:line="85" pos:column="12"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
