<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1517_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <specifier pos:line="1" pos:column="13">const<pos:position pos:line="1" pos:column="18"/></specifier> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">escape_label_value<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">buffer<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">size_t<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">buffer_size<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">value<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list> <block pos:line="2" pos:column="58">{
  <comment type="block" pos:line="3" pos:column="3">/* shortcut for values that don't need escaping. */</comment>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><call><name pos:line="4" pos:column="7">strpbrk<pos:position pos:line="4" pos:column="14"/></name><argument_list pos:line="4" pos:column="14">(<argument><expr><name pos:line="4" pos:column="15">value<pos:position pos:line="4" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="22">"\n\"\\"<pos:position pos:line="4" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="31"/></argument_list></call> <operator pos:line="4" pos:column="32">==<pos:position pos:line="4" pos:column="34"/></operator> <name pos:line="4" pos:column="35">NULL<pos:position pos:line="4" pos:column="39"/></name></expr>)<pos:position pos:line="4" pos:column="40"/></condition><then pos:line="4" pos:column="40">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><name pos:line="5" pos:column="12">value<pos:position pos:line="5" pos:column="17"/></name></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">value_len<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name pos:line="7" pos:column="22">strlen<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">value<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">buffer_len<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><decl><type><name pos:line="10" pos:column="8">size_t<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">i<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></init> <condition><expr><name pos:line="10" pos:column="22">i<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="26">value_len<pos:position pos:line="10" pos:column="35"/></name></expr>;<pos:position pos:line="10" pos:column="36"/></condition> <incr><expr><name pos:line="10" pos:column="37">i<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">++<pos:position pos:line="10" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="41"/></control> <block pos:line="10" pos:column="42">{
    <switch pos:line="11" pos:column="5">switch <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">value<pos:position pos:line="11" pos:column="18"/></name><index pos:line="11" pos:column="18">[<expr><name pos:line="11" pos:column="19">i<pos:position pos:line="11" pos:column="20"/></name></expr>]<pos:position pos:line="11" pos:column="21"/></index></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition> <block pos:line="11" pos:column="23">{
    <case pos:line="12" pos:column="5">case <expr><literal type="char" pos:line="12" pos:column="10">'\n'<pos:position pos:line="12" pos:column="14"/></literal></expr>:<pos:position pos:line="12" pos:column="15"/></case>
    <case pos:line="13" pos:column="5">case <expr><literal type="char" pos:line="13" pos:column="10">'"'<pos:position pos:line="13" pos:column="13"/></literal></expr>:<pos:position pos:line="13" pos:column="14"/></case>
    <case pos:line="14" pos:column="5">case <expr><literal type="char" pos:line="14" pos:column="10">'\\'<pos:position pos:line="14" pos:column="14"/></literal></expr>:<pos:position pos:line="14" pos:column="15"/></case>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><operator pos:line="15" pos:column="11">(<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">buffer_size<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">buffer_len<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator> <operator pos:line="15" pos:column="38">&lt;<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="40">3<pos:position pos:line="15" pos:column="41"/></literal></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
        <break pos:line="16" pos:column="9">break;<pos:position pos:line="16" pos:column="15"/></break>
      }<pos:position pos:line="17" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="18" pos:column="7">buffer<pos:position pos:line="18" pos:column="13"/></name><index pos:line="18" pos:column="13">[<expr><name pos:line="18" pos:column="14">buffer_len<pos:position pos:line="18" pos:column="24"/></name></expr>]<pos:position pos:line="18" pos:column="25"/></index></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <literal type="char" pos:line="18" pos:column="28">'\\'<pos:position pos:line="18" pos:column="32"/></literal></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="19" pos:column="7">buffer<pos:position pos:line="19" pos:column="13"/></name><index pos:line="19" pos:column="13">[<expr><name pos:line="19" pos:column="14">buffer_len<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">+<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal></expr>]<pos:position pos:line="19" pos:column="29"/></index></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <ternary><condition><expr><operator pos:line="19" pos:column="32">(<pos:position pos:line="19" pos:column="33"/></operator><name><name pos:line="19" pos:column="33">value<pos:position pos:line="19" pos:column="38"/></name><index pos:line="19" pos:column="38">[<expr><name pos:line="19" pos:column="39">i<pos:position pos:line="19" pos:column="40"/></name></expr>]<pos:position pos:line="19" pos:column="41"/></index></name> <operator pos:line="19" pos:column="42">==<pos:position pos:line="19" pos:column="44"/></operator> <literal type="char" pos:line="19" pos:column="45">'\n'<pos:position pos:line="19" pos:column="49"/></literal><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator></expr> ?<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52"> <expr><literal type="char" pos:line="19" pos:column="53">'n'<pos:position pos:line="19" pos:column="56"/></literal></expr> <pos:position pos:line="19" pos:column="57"/></then><else pos:line="19" pos:column="57">: <expr><name><name pos:line="19" pos:column="59">value<pos:position pos:line="19" pos:column="64"/></name><index pos:line="19" pos:column="64">[<expr><name pos:line="19" pos:column="65">i<pos:position pos:line="19" pos:column="66"/></name></expr>]<pos:position pos:line="19" pos:column="67"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="20" pos:column="7">buffer_len<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">+=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">2<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
      <break pos:line="21" pos:column="7">break;<pos:position pos:line="21" pos:column="13"/></break>

    <default pos:line="23" pos:column="5">default:<pos:position pos:line="23" pos:column="13"/></default>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><operator pos:line="24" pos:column="11">(<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">buffer_size<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">-<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">buffer_len<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator> <operator pos:line="24" pos:column="38">&lt;<pos:position pos:line="24" pos:column="42"/></operator> <literal type="number" pos:line="24" pos:column="40">2<pos:position pos:line="24" pos:column="41"/></literal></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <block pos:line="24" pos:column="43">{
        <break pos:line="25" pos:column="9">break;<pos:position pos:line="25" pos:column="15"/></break>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">buffer<pos:position pos:line="27" pos:column="13"/></name><index pos:line="27" pos:column="13">[<expr><name pos:line="27" pos:column="14">buffer_len<pos:position pos:line="27" pos:column="24"/></name></expr>]<pos:position pos:line="27" pos:column="25"/></index></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <name><name pos:line="27" pos:column="28">value<pos:position pos:line="27" pos:column="33"/></name><index pos:line="27" pos:column="33">[<expr><name pos:line="27" pos:column="34">i<pos:position pos:line="27" pos:column="35"/></name></expr>]<pos:position pos:line="27" pos:column="36"/></index></name></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="28" pos:column="7">buffer_len<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">++<pos:position pos:line="28" pos:column="19"/></operator></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
      <break pos:line="29" pos:column="7">break;<pos:position pos:line="29" pos:column="13"/></break>
    }<pos:position pos:line="30" pos:column="6"/></block></switch>
  }<pos:position pos:line="31" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">assert<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name pos:line="33" pos:column="10">buffer_len<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">&lt;<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="23">buffer_size<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="34" pos:column="3">buffer<pos:position pos:line="34" pos:column="9"/></name><index pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">buffer_len<pos:position pos:line="34" pos:column="20"/></name></expr>]<pos:position pos:line="34" pos:column="21"/></index></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">buffer<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
