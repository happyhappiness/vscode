<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2163_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_number<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">ret_buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">ret_buffer_len<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">uint64_t<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">value<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list> <block pos:line="2" pos:column="47">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buffer<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">ret_buffer<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_len<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">ret_buffer_len<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uint16_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">tmp16<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">uint64_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">tmp64<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">exp_size<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><literal type="number" pos:line="8" pos:column="21">2<pos:position pos:line="8" pos:column="22"/></literal> <operator pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></operator> <sizeof pos:line="8" pos:column="25">sizeof<argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">uint16_t<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></sizeof> <operator pos:line="8" pos:column="42">+<pos:position pos:line="8" pos:column="43"/></operator> <sizeof pos:line="8" pos:column="44">sizeof<argument_list pos:line="8" pos:column="50">(<argument><expr><name pos:line="8" pos:column="51">uint64_t<pos:position pos:line="8" pos:column="59"/></name></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uint16_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">pkg_length<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">buffer_len<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&lt;<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="20">exp_size<pos:position pos:line="12" pos:column="28"/></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">WARNING<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><literal type="string" pos:line="13" pos:column="13">"network plugin: parse_part_number: "<pos:position pos:line="13" pos:column="50"/></literal>
            <literal type="string" pos:line="14" pos:column="13">"Packet too short: "<pos:position pos:line="14" pos:column="33"/></literal>
            <literal type="string" pos:line="15" pos:column="13">"Chunk of size %zu expected, "<pos:position pos:line="15" pos:column="43"/></literal>
            <literal type="string" pos:line="16" pos:column="13">"but buffer has only %zu bytes left."<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>,
            <argument><expr><name pos:line="17" pos:column="13">exp_size<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">buffer_len<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">memcpy<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><operator pos:line="21" pos:column="10">(<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">void<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></operator><operator pos:line="21" pos:column="17">)<pos:position pos:line="21" pos:column="18"/></operator><operator pos:line="21" pos:column="18">&amp;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="19">tmp16<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">buffer<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="34">sizeof<argument_list pos:line="21" pos:column="40">(<argument><expr><name pos:line="21" pos:column="41">tmp16<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">buffer<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">+=<pos:position pos:line="22" pos:column="12"/></operator> <sizeof pos:line="22" pos:column="13">sizeof<argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">tmp16<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
  <comment type="block" pos:line="23" pos:column="3">/* pkg_type = ntohs (tmp16); */</comment>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">memcpy<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><operator pos:line="25" pos:column="10">(<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">void<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">*<pos:position pos:line="25" pos:column="17"/></operator><operator pos:line="25" pos:column="17">)<pos:position pos:line="25" pos:column="18"/></operator><operator pos:line="25" pos:column="18">&amp;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="19">tmp16<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">buffer<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="34">sizeof<argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">tmp16<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="26" pos:column="3">buffer<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">+=<pos:position pos:line="26" pos:column="12"/></operator> <sizeof pos:line="26" pos:column="13">sizeof<argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">tmp16<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="27" pos:column="3">pkg_length<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <call><name pos:line="27" pos:column="16">ntohs<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">tmp16<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">memcpy<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">void<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">*<pos:position pos:line="29" pos:column="17"/></operator><operator pos:line="29" pos:column="17">)<pos:position pos:line="29" pos:column="18"/></operator><operator pos:line="29" pos:column="18">&amp;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="19">tmp64<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="26">buffer<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="34">sizeof<argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">tmp64<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">buffer<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">+=<pos:position pos:line="30" pos:column="12"/></operator> <sizeof pos:line="30" pos:column="13">sizeof<argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">tmp64<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="31" pos:column="3">*<pos:position pos:line="31" pos:column="4"/></operator><name pos:line="31" pos:column="4">value<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <call><name pos:line="31" pos:column="12">ntohll<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name pos:line="31" pos:column="19">tmp64<pos:position pos:line="31" pos:column="24"/></name></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="33" pos:column="3">*<pos:position pos:line="33" pos:column="4"/></operator><name pos:line="33" pos:column="4">ret_buffer<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">buffer<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="34" pos:column="3">*<pos:position pos:line="34" pos:column="4"/></operator><name pos:line="34" pos:column="4">ret_buffer_len<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">buffer_len<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">-<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">pkg_length<pos:position pos:line="34" pos:column="44"/></name></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>

  <return pos:line="36" pos:column="3">return <expr><literal type="number" pos:line="36" pos:column="10">0<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
