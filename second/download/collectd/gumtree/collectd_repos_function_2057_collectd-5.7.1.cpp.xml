<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2057_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_send_buffer_plain<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">sockent_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">se<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="54">/* {{{ */</comment>
                                      <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">buffer<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">size_t<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">buffer_size<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list> <block pos:line="2" pos:column="79">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <while pos:line="5" pos:column="3">while <condition pos:line="5" pos:column="9">(<expr><literal type="number" pos:line="5" pos:column="10">42<pos:position pos:line="5" pos:column="12"/></literal></expr>)<pos:position pos:line="5" pos:column="13"/></condition> <block pos:line="5" pos:column="14">{
    <expr_stmt><expr><name pos:line="6" pos:column="5">status<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">sockent_client_connect<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">se<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">!=<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr>)<pos:position pos:line="7" pos:column="21"/></condition><then pos:line="7" pos:column="21">
      <block type="pseudo"><return pos:line="8" pos:column="7">return;<pos:position pos:line="8" pos:column="14"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="10" pos:column="5">status<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">sendto<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name><name pos:line="10" pos:column="21">se<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">-&gt;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="25">data<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">client<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">fd<pos:position pos:line="10" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">buffer<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="49">buffer_size<pos:position pos:line="10" pos:column="60"/></name></expr></argument>,
                    <comment type="block" pos:line="11" pos:column="21">/* flags = */</comment> <argument><expr><literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator>struct <name pos:line="11" pos:column="46">sockaddr<pos:position pos:line="11" pos:column="54"/></name> <operator pos:line="11" pos:column="55">*<pos:position pos:line="11" pos:column="56"/></operator><operator pos:line="11" pos:column="56">)<pos:position pos:line="11" pos:column="57"/></operator><name><name pos:line="11" pos:column="57">se<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">-&gt;<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="61">data<pos:position pos:line="11" pos:column="65"/></name><operator pos:line="11" pos:column="65">.<pos:position pos:line="11" pos:column="66"/></operator><name pos:line="11" pos:column="66">client<pos:position pos:line="11" pos:column="72"/></name><operator pos:line="11" pos:column="72">.<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="73">addr<pos:position pos:line="11" pos:column="77"/></name></name></expr></argument>,
                    <argument><expr><name><name pos:line="12" pos:column="21">se<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">data<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">client<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">addrlen<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">status<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&lt;<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">char<pos:position pos:line="14" pos:column="11"/></name></type> <name><name pos:line="14" pos:column="12">errbuf<pos:position pos:line="14" pos:column="18"/></name><index pos:line="14" pos:column="18">[<expr><literal type="number" pos:line="14" pos:column="19">1024<pos:position pos:line="14" pos:column="23"/></literal></expr>]<pos:position pos:line="14" pos:column="24"/></index></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>

      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><operator pos:line="16" pos:column="11">(<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">errno<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">EINTR<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">)<pos:position pos:line="16" pos:column="27"/></operator> <operator pos:line="16" pos:column="28">||<pos:position pos:line="16" pos:column="30"/></operator> <operator pos:line="16" pos:column="31">(<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">errno<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">==<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">EAGAIN<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">)<pos:position pos:line="16" pos:column="48"/></operator></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49">
        <block type="pseudo"><continue pos:line="17" pos:column="9">continue;<pos:position pos:line="17" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="19" pos:column="7">ERROR<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="string" pos:line="19" pos:column="13">"network plugin: sendto failed: %s. Closing sending socket."<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="20" pos:column="13">sstrerror<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">errno<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">errbuf<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="38">sizeof<argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">errbuf<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">sockent_client_disconnect<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">se<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
      <return pos:line="22" pos:column="7">return;<pos:position pos:line="22" pos:column="14"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <break pos:line="25" pos:column="5">break;<pos:position pos:line="25" pos:column="11"/></break>
  }<pos:position pos:line="26" pos:column="4"/></block></while> <comment type="block" pos:line="26" pos:column="5">/* while (42) */</comment>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
