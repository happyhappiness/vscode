<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_212_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">listval<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">lcc_connection_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">c<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">argc<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier><modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">argv<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">lcc_identifier_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ret_ident<pos:position pos:line="3" pos:column="30"/></name>     <init pos:line="3" pos:column="35">= <expr><name pos:line="3" pos:column="37">NULL<pos:position pos:line="3" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type>            <name pos:line="4" pos:column="21">ret_ident_num<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><literal type="number" pos:line="4" pos:column="37">0<pos:position pos:line="4" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><call><name pos:line="9" pos:column="11">strcasecmp<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name><name pos:line="9" pos:column="23">argv<pos:position pos:line="9" pos:column="27"/></name><index pos:line="9" pos:column="27">[<expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr>]<pos:position pos:line="9" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="32">"listval"<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call> <operator pos:line="9" pos:column="43">==<pos:position pos:line="9" pos:column="45"/></operator> <literal type="number" pos:line="9" pos:column="46">0<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="49"/></expr_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">argc<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">!=<pos:position pos:line="11" pos:column="14"/></operator> <literal type="number" pos:line="11" pos:column="15">1<pos:position pos:line="11" pos:column="16"/></literal></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">fprintf<pos:position pos:line="12" pos:column="12"/></name> <argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">stderr<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"ERROR: listval: Does not accept any arguments.\n"<pos:position pos:line="12" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="74"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

<cpp:define pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">define<pos:position pos:line="16" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="16" pos:column="9">BAIL_OUT<pos:position pos:line="16" pos:column="17"/></name><parameter_list pos:line="16" pos:column="17">(<parameter><type><name pos:line="16" pos:column="18">s<pos:position pos:line="16" pos:column="19"/></name></type></parameter>)<pos:position pos:line="16" pos:column="20"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="17" pos:column="3">do { \
    if (ret_ident != NULL) \
      free (ret_ident); \
    ret_ident_num = 0; \
    return (s); \
  } while (0)<pos:position pos:line="22" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="24" pos:column="3">status<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">lcc_listval<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">c<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="28">&amp;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="29">ret_ident<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="40">&amp;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="41">ret_ident_num<pos:position pos:line="24" pos:column="54"/></name></expr></argument>)<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="56"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">status<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">!=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name> <argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">stderr<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="22">"ERROR: %s\n"<pos:position pos:line="26" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="37">lcc_strerror<pos:position pos:line="26" pos:column="49"/></name> <argument_list pos:line="26" pos:column="50">(<argument><expr><name pos:line="26" pos:column="51">c<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">BAIL_OUT<pos:position pos:line="27" pos:column="13"/></name> <argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">status<pos:position pos:line="27" pos:column="21"/></name></expr></argument>)<pos:position pos:line="27" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <for pos:line="30" pos:column="3">for <control pos:line="30" pos:column="7">(<init><expr><name pos:line="30" pos:column="8">i<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <literal type="number" pos:line="30" pos:column="12">0<pos:position pos:line="30" pos:column="13"/></literal></expr>;<pos:position pos:line="30" pos:column="14"/></init> <condition><expr><name pos:line="30" pos:column="15">i<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">&lt;<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="19">ret_ident_num<pos:position pos:line="30" pos:column="32"/></name></expr>;<pos:position pos:line="30" pos:column="33"/></condition> <incr><expr><operator pos:line="30" pos:column="34">++<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="36">i<pos:position pos:line="30" pos:column="37"/></name></expr></incr>)<pos:position pos:line="30" pos:column="38"/></control> <block pos:line="30" pos:column="39">{
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">char<pos:position pos:line="31" pos:column="9"/></name></type> <name><name pos:line="31" pos:column="10">id<pos:position pos:line="31" pos:column="12"/></name><index pos:line="31" pos:column="12">[<expr><literal type="number" pos:line="31" pos:column="13">1024<pos:position pos:line="31" pos:column="17"/></literal></expr>]<pos:position pos:line="31" pos:column="18"/></index></name></decl>;<pos:position pos:line="31" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">status<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">lcc_identifier_to_string<pos:position pos:line="33" pos:column="38"/></name> <argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">c<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="43">id<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="47">sizeof <argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">id<pos:position pos:line="33" pos:column="57"/></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="33" pos:column="60">ret_ident<pos:position pos:line="33" pos:column="69"/></name> <operator pos:line="33" pos:column="70">+<pos:position pos:line="33" pos:column="71"/></operator> <name pos:line="33" pos:column="72">i<pos:position pos:line="33" pos:column="73"/></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">status<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">!=<pos:position pos:line="34" pos:column="18"/></operator> <literal type="number" pos:line="34" pos:column="19">0<pos:position pos:line="34" pos:column="20"/></literal></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">fprintf<pos:position pos:line="35" pos:column="14"/></name> <argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">stderr<pos:position pos:line="35" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="24">"ERROR: listval: Failed to convert returned "<pos:position pos:line="35" pos:column="69"/></literal>
          <literal type="string" pos:line="36" pos:column="11">"identifier to a string: %s\n"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="43">lcc_strerror<pos:position pos:line="36" pos:column="55"/></name> <argument_list pos:line="36" pos:column="56">(<argument><expr><name pos:line="36" pos:column="57">c<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt>
      <continue pos:line="37" pos:column="7">continue;<pos:position pos:line="37" pos:column="16"/></continue>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">printf<pos:position pos:line="40" pos:column="11"/></name> <argument_list pos:line="40" pos:column="12">(<argument><expr><literal type="string" pos:line="40" pos:column="13">"%s\n"<pos:position pos:line="40" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="21">id<pos:position pos:line="40" pos:column="23"/></name></expr></argument>)<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">BAIL_OUT<pos:position pos:line="42" pos:column="11"/></name> <argument_list pos:line="42" pos:column="12">(<argument><expr><literal type="number" pos:line="42" pos:column="13">0<pos:position pos:line="42" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>
<cpp:undef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">undef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">BAIL_OUT<pos:position pos:line="43" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
