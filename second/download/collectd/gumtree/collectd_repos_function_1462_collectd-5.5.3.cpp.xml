<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1462_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">Msg<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">riemann_value_list_to_protobuf<pos:position pos:line="1" pos:column="43"/></name> <parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">riemann_host<pos:position pos:line="1" pos:column="64"/></name></name> <specifier pos:line="1" pos:column="65">const<pos:position pos:line="1" pos:column="70"/></specifier> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">host<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="78">/* {{{ */</comment>
					    <parameter><decl><type><name pos:line="2" pos:column="45">data_set_t<pos:position pos:line="2" pos:column="55"/></name> <specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">ds<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="3" pos:column="45">value_list_t<pos:position pos:line="3" pos:column="57"/></name> <specifier pos:line="3" pos:column="58">const<pos:position pos:line="3" pos:column="63"/></specifier> <modifier pos:line="3" pos:column="64">*<pos:position pos:line="3" pos:column="65"/></modifier></type><name pos:line="3" pos:column="65">vl<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="4" pos:column="45">int<pos:position pos:line="4" pos:column="48"/></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier></type><name pos:line="4" pos:column="50">statuses<pos:position pos:line="4" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="59"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">Msg<pos:position pos:line="6" pos:column="12"/></name> <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier></type><name pos:line="6" pos:column="14">msg<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">i<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">gauge_t<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">rates<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name pos:line="8" pos:column="26">NULL<pos:position pos:line="8" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Initialize the Msg structure. */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">msg<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">malloc<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><sizeof pos:line="11" pos:column="23">sizeof <argument_list pos:line="11" pos:column="30">(<argument><expr><operator pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">msg<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">msg<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">==<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">NULL<pos:position pos:line="12" pos:column="24"/></name></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"write_riemann plugin: malloc failed."<pos:position pos:line="14" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">NULL<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">)<pos:position pos:line="15" pos:column="30"/></operator></expr>;<pos:position pos:line="15" pos:column="31"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">memset<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">msg<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="25">sizeof <argument_list pos:line="17" pos:column="32">(<argument><expr><operator pos:line="17" pos:column="33">*<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">msg<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">msg__init<pos:position pos:line="18" pos:column="18"/></name> <argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">msg<pos:position pos:line="18" pos:column="23"/></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="20" pos:column="9">/* Set up events. First, the list of pointers. */</comment>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">msg<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">n_events<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">size_t<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">)<pos:position pos:line="21" pos:column="33"/></operator> <name><name pos:line="21" pos:column="34">vl<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">values_len<pos:position pos:line="21" pos:column="48"/></name></name></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">msg<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">events<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">calloc<pos:position pos:line="22" pos:column="29"/></name> <argument_list pos:line="22" pos:column="30">(<argument><expr><name><name pos:line="22" pos:column="31">msg<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">n_events<pos:position pos:line="22" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="46">sizeof <argument_list pos:line="22" pos:column="53">(<argument><expr><operator pos:line="22" pos:column="54">*<pos:position pos:line="22" pos:column="55"/></operator><name><name pos:line="22" pos:column="55">msg<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">-&gt;<pos:position pos:line="22" pos:column="63"/></operator><name pos:line="22" pos:column="60">events<pos:position pos:line="22" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">msg<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">events<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="28">NULL<pos:position pos:line="23" pos:column="32"/></name></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">ERROR<pos:position pos:line="25" pos:column="22"/></name> <argument_list pos:line="25" pos:column="23">(<argument><expr><literal type="string" pos:line="25" pos:column="24">"write_riemann plugin: calloc failed."<pos:position pos:line="25" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">riemann_msg_protobuf_free<pos:position pos:line="26" pos:column="42"/></name> <argument_list pos:line="26" pos:column="43">(<argument><expr><name pos:line="26" pos:column="44">msg<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><operator pos:line="27" pos:column="24">(<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">NULL<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">)<pos:position pos:line="27" pos:column="30"/></operator></expr>;<pos:position pos:line="27" pos:column="31"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">host<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">store_rates<pos:position pos:line="30" pos:column="30"/></name></name></expr>)<pos:position pos:line="30" pos:column="31"/></condition><then pos:line="30" pos:column="31">
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><name pos:line="32" pos:column="17">rates<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <call><name pos:line="32" pos:column="25">uc_get_rate<pos:position pos:line="32" pos:column="36"/></name> <argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">ds<pos:position pos:line="32" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="42">vl<pos:position pos:line="32" pos:column="44"/></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">rates<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">==<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">NULL<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35">
		<block pos:line="34" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">ERROR<pos:position pos:line="35" pos:column="30"/></name> <argument_list pos:line="35" pos:column="31">(<argument><expr><literal type="string" pos:line="35" pos:column="32">"write_riemann plugin: uc_get_rate failed."<pos:position pos:line="35" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">riemann_msg_protobuf_free<pos:position pos:line="36" pos:column="50"/></name> <argument_list pos:line="36" pos:column="51">(<argument><expr><name pos:line="36" pos:column="52">msg<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
			<return pos:line="37" pos:column="25">return <expr><operator pos:line="37" pos:column="32">(<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">NULL<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">)<pos:position pos:line="37" pos:column="38"/></operator></expr>;<pos:position pos:line="37" pos:column="39"/></return>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">i<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">i<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">&lt;<pos:position pos:line="41" pos:column="27"/></operator> <name><name pos:line="41" pos:column="25">msg<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">n_events<pos:position pos:line="41" pos:column="38"/></name></name></expr>;<pos:position pos:line="41" pos:column="39"/></condition> <incr><expr><name pos:line="41" pos:column="40">i<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">++<pos:position pos:line="41" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="44"/></control>
	<block pos:line="42" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">msg<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">events<pos:position pos:line="43" pos:column="28"/></name><index pos:line="43" pos:column="28">[<expr><name pos:line="43" pos:column="29">i<pos:position pos:line="43" pos:column="30"/></name></expr>]<pos:position pos:line="43" pos:column="31"/></index></name> <operator pos:line="43" pos:column="32">=<pos:position pos:line="43" pos:column="33"/></operator> <call><name pos:line="43" pos:column="34">riemann_value_to_protobuf<pos:position pos:line="43" pos:column="59"/></name> <argument_list pos:line="43" pos:column="60">(<argument><expr><name pos:line="43" pos:column="61">host<pos:position pos:line="43" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="67">ds<pos:position pos:line="43" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="71">vl<pos:position pos:line="43" pos:column="73"/></name></expr></argument>,
							    <argument><expr><operator pos:line="44" pos:column="61">(<pos:position pos:line="44" pos:column="62"/></operator><name pos:line="44" pos:column="62">int<pos:position pos:line="44" pos:column="65"/></name><operator pos:line="44" pos:column="65">)<pos:position pos:line="44" pos:column="66"/></operator> <name pos:line="44" pos:column="67">i<pos:position pos:line="44" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="70">rates<pos:position pos:line="44" pos:column="75"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="77">statuses<pos:position pos:line="44" pos:column="85"/></name><index pos:line="44" pos:column="85">[<expr><name pos:line="44" pos:column="86">i<pos:position pos:line="44" pos:column="87"/></name></expr>]<pos:position pos:line="44" pos:column="88"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="90"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name><name pos:line="45" pos:column="21">msg<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">events<pos:position pos:line="45" pos:column="32"/></name><index pos:line="45" pos:column="32">[<expr><name pos:line="45" pos:column="33">i<pos:position pos:line="45" pos:column="34"/></name></expr>]<pos:position pos:line="45" pos:column="35"/></index></name> <operator pos:line="45" pos:column="36">==<pos:position pos:line="45" pos:column="38"/></operator> <name pos:line="45" pos:column="39">NULL<pos:position pos:line="45" pos:column="43"/></name></expr>)<pos:position pos:line="45" pos:column="44"/></condition><then pos:line="45" pos:column="44">
		<block pos:line="46" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">riemann_msg_protobuf_free<pos:position pos:line="47" pos:column="50"/></name> <argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">msg<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">sfree<pos:position pos:line="48" pos:column="30"/></name> <argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">rates<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
			<return pos:line="49" pos:column="25">return <expr><operator pos:line="49" pos:column="32">(<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">NULL<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">)<pos:position pos:line="49" pos:column="38"/></operator></expr>;<pos:position pos:line="49" pos:column="39"/></return>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">sfree<pos:position pos:line="53" pos:column="14"/></name> <argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">rates<pos:position pos:line="53" pos:column="21"/></name></expr></argument>)<pos:position pos:line="53" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
	<return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="17">msg<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">)<pos:position pos:line="54" pos:column="21"/></operator></expr>;<pos:position pos:line="54" pos:column="22"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
