<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1519_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">cu_mount_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">cu_mount_getfsstat<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">void<pos:position pos:line="1" pos:column="43"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><name pos:line="2" pos:column="5">HAVE_GETFSSTAT<pos:position pos:line="2" pos:column="19"/></name></expr></cpp:if>
<cpp:define pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">define<pos:position pos:line="3" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="3" pos:column="9">STRUCT_STATFS<pos:position pos:line="3" pos:column="22"/></name></cpp:macro> <cpp:value pos:line="3" pos:column="23">struct statfs<pos:position pos:line="3" pos:column="36"/></cpp:value></cpp:define>
<cpp:define pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">define<pos:position pos:line="4" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="9">CMD_STATFS<pos:position pos:line="4" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="4" pos:column="20">getfsstat<pos:position pos:line="4" pos:column="29"/></cpp:value></cpp:define>
<cpp:define pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">define<pos:position pos:line="5" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="5" pos:column="9">FLAGS_STATFS<pos:position pos:line="5" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="5" pos:column="22">MNT_NOWAIT<pos:position pos:line="5" pos:column="32"/></cpp:value></cpp:define>
<comment type="block" pos:line="6" pos:column="1">/* #endif HAVE_GETFSSTAT */</comment>
<cpp:elif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">elif<pos:position pos:line="7" pos:column="6"/></cpp:directive> <expr><name pos:line="7" pos:column="7">HAVE_GETVFSSTAT<pos:position pos:line="7" pos:column="22"/></name></expr></cpp:elif>
<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define<pos:position pos:line="8" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">STRUCT_STATFS<pos:position pos:line="8" pos:column="22"/></name></cpp:macro> <cpp:value pos:line="8" pos:column="23">struct statvfs<pos:position pos:line="8" pos:column="37"/></cpp:value></cpp:define>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define<pos:position pos:line="9" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">CMD_STATFS<pos:position pos:line="9" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="9" pos:column="20">getvfsstat<pos:position pos:line="9" pos:column="30"/></cpp:value></cpp:define>
<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">FLAGS_STATFS<pos:position pos:line="10" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="10" pos:column="22">ST_NOWAIT<pos:position pos:line="10" pos:column="31"/></cpp:value></cpp:define>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="11" pos:column="8">/* HAVE_GETVFSSTAT */</comment>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">bufsize<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">STRUCT_STATFS<pos:position pos:line="14" pos:column="16"/></name> <modifier pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></modifier></type><name pos:line="14" pos:column="18">buf<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">num<pos:position pos:line="16" pos:column="10"/></name></decl>;<pos:position pos:line="16" pos:column="11"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">cu_mount_t<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier></type><name pos:line="18" pos:column="15">first<pos:position pos:line="18" pos:column="20"/></name> <init pos:line="18" pos:column="21">= <expr><name pos:line="18" pos:column="23">NULL<pos:position pos:line="18" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">cu_mount_t<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">last<pos:position pos:line="19" pos:column="19"/></name> <init pos:line="19" pos:column="20">= <expr><name pos:line="19" pos:column="22">NULL<pos:position pos:line="19" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="27"/></decl_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">cu_mount_t<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">*<pos:position pos:line="20" pos:column="15"/></operator><operator pos:line="20" pos:column="15">new<pos:position pos:line="20" pos:column="18"/></operator> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">NULL<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Get the number of mounted file systems */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">(<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">bufsize<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">CMD_STATFS<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">NULL<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="35">0<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">FLAGS_STATFS<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call><operator pos:line="23" pos:column="51">)<pos:position pos:line="23" pos:column="52"/></operator> <operator pos:line="23" pos:column="53">&lt;<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="55">1<pos:position pos:line="23" pos:column="56"/></literal></expr>)<pos:position pos:line="23" pos:column="57"/></condition><then pos:line="23" pos:column="57"> <block pos:line="23" pos:column="58">{
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">COLLECT_DEBUG<pos:position pos:line="24" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">char<pos:position pos:line="25" pos:column="9"/></name></type> <name><name pos:line="25" pos:column="10">errbuf<pos:position pos:line="25" pos:column="16"/></name><index pos:line="25" pos:column="16">[<expr><literal type="number" pos:line="25" pos:column="17">1024<pos:position pos:line="25" pos:column="21"/></literal></expr>]<pos:position pos:line="25" pos:column="22"/></index></name></decl>;<pos:position pos:line="25" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">DEBUG<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><literal type="string" pos:line="26" pos:column="11">"utils_mount: getv?fsstat failed: %s"<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="27" pos:column="11">sstrerror<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">errno<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">errbuf<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="36">sizeof<argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">errbuf<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="28" pos:column="8">/* COLLECT_DEBUG */</comment>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">NULL<pos:position pos:line="29" pos:column="16"/></name></expr>;<pos:position pos:line="29" pos:column="17"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><operator pos:line="32" pos:column="7">(<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">buf<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">calloc<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">bufsize<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="30">sizeof<argument_list pos:line="32" pos:column="36">(<argument><expr><operator pos:line="32" pos:column="37">*<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">buf<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call><operator pos:line="32" pos:column="43">)<pos:position pos:line="32" pos:column="44"/></operator> <operator pos:line="32" pos:column="45">==<pos:position pos:line="32" pos:column="47"/></operator> <name pos:line="32" pos:column="48">NULL<pos:position pos:line="32" pos:column="52"/></name></expr>)<pos:position pos:line="32" pos:column="53"/></condition><then pos:line="32" pos:column="53">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">NULL<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/* The bufsize needs to be passed in bytes. Really. This is not in the
   * manpage.. -octo */</comment>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">(<pos:position pos:line="37" pos:column="8"/></operator><name pos:line="37" pos:column="8">num<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">CMD_STATFS<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">buf<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="30">bufsize<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></operator> <sizeof pos:line="37" pos:column="40">sizeof<argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">STRUCT_STATFS<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="37" pos:column="63">FLAGS_STATFS<pos:position pos:line="37" pos:column="75"/></name></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call><operator pos:line="37" pos:column="76">)<pos:position pos:line="37" pos:column="77"/></operator> <operator pos:line="37" pos:column="78">&lt;<pos:position pos:line="37" pos:column="82"/></operator>
      <literal type="number" pos:line="38" pos:column="7">1<pos:position pos:line="38" pos:column="8"/></literal></expr>)<pos:position pos:line="38" pos:column="9"/></condition><then pos:line="38" pos:column="9"> <block pos:line="38" pos:column="10">{
<cpp:if pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">if<pos:position pos:line="39" pos:column="4"/></cpp:directive> <expr><name pos:line="39" pos:column="5">COLLECT_DEBUG<pos:position pos:line="39" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">char<pos:position pos:line="40" pos:column="9"/></name></type> <name><name pos:line="40" pos:column="10">errbuf<pos:position pos:line="40" pos:column="16"/></name><index pos:line="40" pos:column="16">[<expr><literal type="number" pos:line="40" pos:column="17">1024<pos:position pos:line="40" pos:column="21"/></literal></expr>]<pos:position pos:line="40" pos:column="22"/></index></name></decl>;<pos:position pos:line="40" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">DEBUG<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><literal type="string" pos:line="41" pos:column="11">"utils_mount: getv?fsstat failed: %s"<pos:position pos:line="41" pos:column="48"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="42" pos:column="11">sstrerror<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">errno<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="28">errbuf<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="36">sizeof<argument_list pos:line="42" pos:column="42">(<argument><expr><name pos:line="42" pos:column="43">errbuf<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="43" pos:column="8">/* COLLECT_DEBUG */</comment>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">free<pos:position pos:line="44" pos:column="9"/></name><argument_list pos:line="44" pos:column="9">(<argument><expr><name pos:line="44" pos:column="10">buf<pos:position pos:line="44" pos:column="13"/></name></expr></argument>)<pos:position pos:line="44" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="15"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">NULL<pos:position pos:line="45" pos:column="16"/></name></expr>;<pos:position pos:line="45" pos:column="17"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <for pos:line="48" pos:column="3">for <control pos:line="48" pos:column="7">(<init><decl><type><name pos:line="48" pos:column="8">int<pos:position pos:line="48" pos:column="11"/></name></type> <name pos:line="48" pos:column="12">i<pos:position pos:line="48" pos:column="13"/></name> <init pos:line="48" pos:column="14">= <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="48" pos:column="18"/></init> <condition><expr><name pos:line="48" pos:column="19">i<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">&lt;<pos:position pos:line="48" pos:column="25"/></operator> <name pos:line="48" pos:column="23">num<pos:position pos:line="48" pos:column="26"/></name></expr>;<pos:position pos:line="48" pos:column="27"/></condition> <incr><expr><name pos:line="48" pos:column="28">i<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">++<pos:position pos:line="48" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="32"/></control> <block pos:line="48" pos:column="33">{
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">(<pos:position pos:line="49" pos:column="10"/></operator><operator pos:line="49" pos:column="10">new<pos:position pos:line="49" pos:column="13"/></operator> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">calloc<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><literal type="number" pos:line="49" pos:column="23">1<pos:position pos:line="49" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="26">sizeof<argument_list pos:line="49" pos:column="32">(<argument><expr><operator pos:line="49" pos:column="33">*<pos:position pos:line="49" pos:column="34"/></operator><operator pos:line="49" pos:column="34">new<pos:position pos:line="49" pos:column="37"/></operator></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call><operator pos:line="49" pos:column="39">)<pos:position pos:line="49" pos:column="40"/></operator> <operator pos:line="49" pos:column="41">==<pos:position pos:line="49" pos:column="43"/></operator> <name pos:line="49" pos:column="44">NULL<pos:position pos:line="49" pos:column="48"/></name></expr>)<pos:position pos:line="49" pos:column="49"/></condition><then pos:line="49" pos:column="49">
      <block type="pseudo"><break pos:line="50" pos:column="7">break;<pos:position pos:line="50" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="52" pos:column="5">/* Copy values from `struct mnttab' */</comment>
    <expr_stmt><expr><operator pos:line="53" pos:column="5">new<pos:position pos:line="53" pos:column="8"/></operator><operator pos:line="53" pos:column="8">-&gt;<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="10">dir<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <call><name pos:line="53" pos:column="16">sstrdup<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name><name pos:line="53" pos:column="24">buf<pos:position pos:line="53" pos:column="27"/></name><index pos:line="53" pos:column="27">[<expr><name pos:line="53" pos:column="28">i<pos:position pos:line="53" pos:column="29"/></name></expr>]<pos:position pos:line="53" pos:column="30"/></index></name><operator pos:line="53" pos:column="30">.<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">f_mntonname<pos:position pos:line="53" pos:column="42"/></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="54" pos:column="5">new<pos:position pos:line="54" pos:column="8"/></operator><operator pos:line="54" pos:column="8">-&gt;<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="10">spec_device<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <call><name pos:line="54" pos:column="24">sstrdup<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name><name pos:line="54" pos:column="32">buf<pos:position pos:line="54" pos:column="35"/></name><index pos:line="54" pos:column="35">[<expr><name pos:line="54" pos:column="36">i<pos:position pos:line="54" pos:column="37"/></name></expr>]<pos:position pos:line="54" pos:column="38"/></index></name><operator pos:line="54" pos:column="38">.<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="39">f_mntfromname<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="55" pos:column="5">new<pos:position pos:line="55" pos:column="8"/></operator><operator pos:line="55" pos:column="8">-&gt;<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="10">type<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">=<pos:position pos:line="55" pos:column="16"/></operator> <call><name pos:line="55" pos:column="17">sstrdup<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name><name pos:line="55" pos:column="25">buf<pos:position pos:line="55" pos:column="28"/></name><index pos:line="55" pos:column="28">[<expr><name pos:line="55" pos:column="29">i<pos:position pos:line="55" pos:column="30"/></name></expr>]<pos:position pos:line="55" pos:column="31"/></index></name><operator pos:line="55" pos:column="31">.<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="32">f_fstypename<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="56" pos:column="5">new<pos:position pos:line="56" pos:column="8"/></operator><operator pos:line="56" pos:column="8">-&gt;<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="10">options<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <name pos:line="56" pos:column="20">NULL<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="57" pos:column="5">new<pos:position pos:line="57" pos:column="8"/></operator><operator pos:line="57" pos:column="8">-&gt;<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="10">device<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <call><name pos:line="57" pos:column="19">get_device_name<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><operator pos:line="57" pos:column="35">new<pos:position pos:line="57" pos:column="38"/></operator><operator pos:line="57" pos:column="38">-&gt;<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="40">options<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="58" pos:column="5">new<pos:position pos:line="58" pos:column="8"/></operator><operator pos:line="58" pos:column="8">-&gt;<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="10">next<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">NULL<pos:position pos:line="58" pos:column="21"/></name></expr>;<pos:position pos:line="58" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="60" pos:column="5">/* Append to list */</comment>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">first<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">==<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">NULL<pos:position pos:line="61" pos:column="22"/></name></expr>)<pos:position pos:line="61" pos:column="23"/></condition><then pos:line="61" pos:column="23"> <block pos:line="61" pos:column="24">{
      <expr_stmt><expr><name pos:line="62" pos:column="7">first<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <operator pos:line="62" pos:column="15">new<pos:position pos:line="62" pos:column="18"/></operator></expr>;<pos:position pos:line="62" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">last<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <operator pos:line="63" pos:column="14">new<pos:position pos:line="63" pos:column="17"/></operator></expr>;<pos:position pos:line="63" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then> <else pos:line="64" pos:column="7">else <block pos:line="64" pos:column="12">{
      <expr_stmt><expr><name><name pos:line="65" pos:column="7">last<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">-&gt;<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="13">next<pos:position pos:line="65" pos:column="17"/></name></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <operator pos:line="65" pos:column="20">new<pos:position pos:line="65" pos:column="23"/></operator></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">last<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">=<pos:position pos:line="66" pos:column="13"/></operator> <operator pos:line="66" pos:column="14">new<pos:position pos:line="66" pos:column="17"/></operator></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>
  }<pos:position pos:line="68" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">free<pos:position pos:line="70" pos:column="7"/></name><argument_list pos:line="70" pos:column="7">(<argument><expr><name pos:line="70" pos:column="8">buf<pos:position pos:line="70" pos:column="11"/></name></expr></argument>)<pos:position pos:line="70" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="13"/></expr_stmt>

  <return pos:line="72" pos:column="3">return <expr><name pos:line="72" pos:column="10">first<pos:position pos:line="72" pos:column="15"/></name></expr>;<pos:position pos:line="72" pos:column="16"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
