<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1068_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">multi3_read<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">name<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">FILE<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">fh<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">buffer<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><literal type="number" pos:line="2" pos:column="15">1024<pos:position pos:line="2" pos:column="19"/></literal></expr>]<pos:position pos:line="2" pos:column="20"/></index></name></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name><name pos:line="3" pos:column="9">fields<pos:position pos:line="3" pos:column="15"/></name><index pos:line="3" pos:column="15">[<expr><literal type="number" pos:line="3" pos:column="16">15<pos:position pos:line="3" pos:column="18"/></literal></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">max_fields<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">STATIC_ARRAY_SIZE<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">fields<pos:position pos:line="4" pos:column="50"/></name></expr></argument>)<pos:position pos:line="4" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">fields_num<pos:position pos:line="5" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="19">read<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name> <name pos:line="6" pos:column="8">long<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">sum_users<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

  <while pos:line="8" pos:column="3">while <condition pos:line="8" pos:column="9">(<expr><call><name pos:line="8" pos:column="10">fgets<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">buffer<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="24">sizeof<argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">buffer<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">fh<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call> <operator pos:line="8" pos:column="44">!=<pos:position pos:line="8" pos:column="46"/></operator> <name pos:line="8" pos:column="47">NULL<pos:position pos:line="8" pos:column="51"/></name></expr>)<pos:position pos:line="8" pos:column="52"/></condition> <block pos:line="8" pos:column="53">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">fields_num<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">strsplit<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">buffer<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">fields<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="43">max_fields<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* status file is generated by openvpn/multi.c:multi_print_status()
     * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/multi.c
     *
     * The line we're expecting has 12 fields. We ignore all lines
     *  with more or less fields.
     */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">fields_num<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">!=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="23">12<pos:position pos:line="17" pos:column="25"/></literal></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
      <continue pos:line="18" pos:column="7">continue;<pos:position pos:line="18" pos:column="16"/></continue>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><call><name pos:line="20" pos:column="11">strcmp<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">fields<pos:position pos:line="20" pos:column="24"/></name><index pos:line="20" pos:column="24">[<expr><literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr>]<pos:position pos:line="20" pos:column="27"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="29">"CLIENT_LIST"<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call> <operator pos:line="20" pos:column="44">!=<pos:position pos:line="20" pos:column="46"/></operator> <literal type="number" pos:line="20" pos:column="47">0<pos:position pos:line="20" pos:column="48"/></literal></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49">
        <block type="pseudo"><continue pos:line="21" pos:column="9">continue;<pos:position pos:line="21" pos:column="18"/></continue></block></then></if>

      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><name pos:line="23" pos:column="11">collect_user_count<pos:position pos:line="23" pos:column="29"/></name></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30">
      <comment type="block" pos:line="24" pos:column="7">/* If so, sum all users, ignore the individuals*/</comment>
      <block pos:line="25" pos:column="7">{
        <expr_stmt><expr><name pos:line="26" pos:column="9">sum_users<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">+=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="22">1<pos:position pos:line="26" pos:column="23"/></literal></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>

      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><name pos:line="29" pos:column="11">collect_individual_users<pos:position pos:line="29" pos:column="35"/></name></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36"> <block pos:line="29" pos:column="37">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">new_naming_schema<pos:position pos:line="30" pos:column="30"/></name></expr>)<pos:position pos:line="30" pos:column="31"/></condition><then pos:line="30" pos:column="31"> <block pos:line="30" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="31" pos:column="11">iostats_submit<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">name<pos:position pos:line="31" pos:column="30"/></name></expr></argument>,              <comment type="block" pos:line="31" pos:column="45">/* vpn instance */</comment>
                         <argument><expr><name><name pos:line="32" pos:column="26">fields<pos:position pos:line="32" pos:column="32"/></name><index pos:line="32" pos:column="32">[<expr><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>]<pos:position pos:line="32" pos:column="35"/></index></name></expr></argument>,         <comment type="block" pos:line="32" pos:column="45">/* "Common Name" */</comment>
                         <argument><expr><call><name pos:line="33" pos:column="26">atoll<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name><name pos:line="33" pos:column="32">fields<pos:position pos:line="33" pos:column="38"/></name><index pos:line="33" pos:column="38">[<expr><literal type="number" pos:line="33" pos:column="39">4<pos:position pos:line="33" pos:column="40"/></literal></expr>]<pos:position pos:line="33" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="33" pos:column="45">/* "Bytes Received" */</comment>
                         <argument><expr><call><name pos:line="34" pos:column="26">atoll<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name><name pos:line="34" pos:column="32">fields<pos:position pos:line="34" pos:column="38"/></name><index pos:line="34" pos:column="38">[<expr><literal type="number" pos:line="34" pos:column="39">5<pos:position pos:line="34" pos:column="40"/></literal></expr>]<pos:position pos:line="34" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt> <comment type="block" pos:line="34" pos:column="45">/* "Bytes Sent" */</comment>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
          <expr_stmt><expr><call><name pos:line="36" pos:column="11">iostats_submit<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name><name pos:line="36" pos:column="26">fields<pos:position pos:line="36" pos:column="32"/></name><index pos:line="36" pos:column="32">[<expr><literal type="number" pos:line="36" pos:column="33">1<pos:position pos:line="36" pos:column="34"/></literal></expr>]<pos:position pos:line="36" pos:column="35"/></index></name></expr></argument>,         <comment type="block" pos:line="36" pos:column="45">/* "Common Name" */</comment>
                         <argument><expr><name pos:line="37" pos:column="26">NULL<pos:position pos:line="37" pos:column="30"/></name></expr></argument>,              <comment type="block" pos:line="37" pos:column="45">/* unused when in multimode */</comment>
                         <argument><expr><call><name pos:line="38" pos:column="26">atoll<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name><name pos:line="38" pos:column="32">fields<pos:position pos:line="38" pos:column="38"/></name><index pos:line="38" pos:column="38">[<expr><literal type="number" pos:line="38" pos:column="39">4<pos:position pos:line="38" pos:column="40"/></literal></expr>]<pos:position pos:line="38" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="38" pos:column="45">/* "Bytes Received" */</comment>
                         <argument><expr><call><name pos:line="39" pos:column="26">atoll<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name><name pos:line="39" pos:column="32">fields<pos:position pos:line="39" pos:column="38"/></name><index pos:line="39" pos:column="38">[<expr><literal type="number" pos:line="39" pos:column="39">5<pos:position pos:line="39" pos:column="40"/></literal></expr>]<pos:position pos:line="39" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt> <comment type="block" pos:line="39" pos:column="45">/* "Bytes Sent" */</comment>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="43" pos:column="7">read<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <literal type="number" pos:line="43" pos:column="14">1<pos:position pos:line="43" pos:column="15"/></literal></expr>;<pos:position pos:line="43" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>
  }<pos:position pos:line="45" pos:column="4"/></block></while>

  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><name pos:line="47" pos:column="7">collect_user_count<pos:position pos:line="47" pos:column="25"/></name></expr>)<pos:position pos:line="47" pos:column="26"/></condition><then pos:line="47" pos:column="26"> <block pos:line="47" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">numusers_submit<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">name<pos:position pos:line="48" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="27">name<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="33">sum_users<pos:position pos:line="48" pos:column="42"/></name></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="49" pos:column="5">read<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <literal type="number" pos:line="49" pos:column="12">1<pos:position pos:line="49" pos:column="13"/></literal></expr>;<pos:position pos:line="49" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <return pos:line="52" pos:column="3">return <expr><operator pos:line="52" pos:column="10">(<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">read<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
