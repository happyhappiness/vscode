<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1773_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_process_json<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cconn<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">io<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <block pos:line="1" pos:column="49">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><operator pos:line="2" pos:column="7">(<pos:position pos:line="2" pos:column="8"/></operator><name><name pos:line="2" pos:column="8">io<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">-&gt;<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="12">request_type<pos:position pos:line="2" pos:column="24"/></name></name> <operator pos:line="2" pos:column="25">!=<pos:position pos:line="2" pos:column="27"/></operator> <name pos:line="2" pos:column="28">ASOK_REQ_DATA<pos:position pos:line="2" pos:column="41"/></name><operator pos:line="2" pos:column="41">)<pos:position pos:line="2" pos:column="42"/></operator> <operator pos:line="2" pos:column="43">&amp;&amp;<pos:position pos:line="2" pos:column="53"/></operator>
      <operator pos:line="3" pos:column="7">(<pos:position pos:line="3" pos:column="8"/></operator><name><name pos:line="3" pos:column="8">io<pos:position pos:line="3" pos:column="10"/></name><operator pos:line="3" pos:column="10">-&gt;<pos:position pos:line="3" pos:column="15"/></operator><name pos:line="3" pos:column="12">request_type<pos:position pos:line="3" pos:column="24"/></name></name> <operator pos:line="3" pos:column="25">!=<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="28">ASOK_REQ_SCHEMA<pos:position pos:line="3" pos:column="43"/></name><operator pos:line="3" pos:column="43">)<pos:position pos:line="3" pos:column="44"/></operator></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45"> <block pos:line="3" pos:column="46">{
    <return pos:line="4" pos:column="5">return <expr><operator pos:line="4" pos:column="12">-<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">EDOM<pos:position pos:line="4" pos:column="17"/></name></expr>;<pos:position pos:line="4" pos:column="18"/></return>
  }<pos:position pos:line="5" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">result<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">1<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">yajl_handle<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">hand<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">yajl_status<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">status<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">hand<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <call><name pos:line="11" pos:column="10">yajl_alloc<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><operator pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="22">callbacks<pos:position pos:line="11" pos:column="31"/></name></expr></argument>,
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><name pos:line="12" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="12" pos:column="17"/></name></expr></cpp:if>
                    <comment type="block" pos:line="13" pos:column="21">/* alloc funcs = */</comment> <argument><expr><name pos:line="13" pos:column="41">NULL<pos:position pos:line="13" pos:column="45"/></name></expr></argument>,
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
                    <comment type="block" pos:line="15" pos:column="21">/* alloc funcs = */</comment> <argument><expr><name pos:line="15" pos:column="41">NULL<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">NULL<pos:position pos:line="15" pos:column="51"/></name></expr></argument>,
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
                    <comment type="block" pos:line="17" pos:column="21">/* context = */</comment> <argument><expr><operator pos:line="17" pos:column="37">(<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">void<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">*<pos:position pos:line="17" pos:column="44"/></operator><operator pos:line="17" pos:column="44">)<pos:position pos:line="17" pos:column="45"/></operator><operator pos:line="17" pos:column="45">(<pos:position pos:line="17" pos:column="46"/></operator><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name><name pos:line="17" pos:column="47">io<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">-&gt;<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="51">yajl<pos:position pos:line="17" pos:column="55"/></name></name><operator pos:line="17" pos:column="55">)<pos:position pos:line="17" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="58"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">!<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">hand<pos:position pos:line="19" pos:column="12"/></name></expr>)<pos:position pos:line="19" pos:column="13"/></condition><then pos:line="19" pos:column="13"> <block pos:line="19" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ERROR<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"ceph plugin: yajl_alloc failed."<pos:position pos:line="20" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">ENOMEM<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="24" pos:column="3">io<pos:position pos:line="24" pos:column="5"/></name><operator pos:line="24" pos:column="5">-&gt;<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="7">yajl<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">.<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">depth<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

  <switch pos:line="26" pos:column="3">switch <condition pos:line="26" pos:column="10">(<expr><name><name pos:line="26" pos:column="11">io<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">request_type<pos:position pos:line="26" pos:column="27"/></name></name></expr>)<pos:position pos:line="26" pos:column="28"/></condition> <block pos:line="26" pos:column="29">{
  <case pos:line="27" pos:column="3">case <expr><name pos:line="27" pos:column="8">ASOK_REQ_DATA<pos:position pos:line="27" pos:column="21"/></name></expr>:<pos:position pos:line="27" pos:column="22"/></case>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">io<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">-&gt;<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="9">yajl<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">handler<pos:position pos:line="28" pos:column="21"/></name></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">node_handler_fetch_data<pos:position pos:line="28" pos:column="47"/></name></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">result<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">cconn_process_data<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">io<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="37">&amp;<pos:position pos:line="29" pos:column="42"/></operator><name><name pos:line="29" pos:column="38">io<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">yajl<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">hand<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
    <break pos:line="30" pos:column="5">break;<pos:position pos:line="30" pos:column="11"/></break>
  <case pos:line="31" pos:column="3">case <expr><name pos:line="31" pos:column="8">ASOK_REQ_SCHEMA<pos:position pos:line="31" pos:column="23"/></name></expr>:<pos:position pos:line="31" pos:column="24"/></case>
    <comment type="line" pos:line="32" pos:column="5">// init daemon specific variables</comment>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">io<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">d<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">ds_num<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <literal type="number" pos:line="33" pos:column="21">0<pos:position pos:line="33" pos:column="22"/></literal></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">io<pos:position pos:line="34" pos:column="7"/></name><operator pos:line="34" pos:column="7">-&gt;<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="9">d<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">last_idx<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="23">0<pos:position pos:line="34" pos:column="24"/></literal></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">io<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">-&gt;<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="9">d<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">last_poll_data<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <name pos:line="35" pos:column="29">NULL<pos:position pos:line="35" pos:column="33"/></name></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">io<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">yajl<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">handler<pos:position pos:line="36" pos:column="21"/></name></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="24">node_handler_define_schema<pos:position pos:line="36" pos:column="50"/></name></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">io<pos:position pos:line="37" pos:column="7"/></name><operator pos:line="37" pos:column="7">-&gt;<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="9">yajl<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">handler_arg<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <name><name pos:line="37" pos:column="28">io<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">d<pos:position pos:line="37" pos:column="33"/></name></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">result<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <call><name pos:line="38" pos:column="14">traverse_json<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">io<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">json<pos:position pos:line="38" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="38">io<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">-&gt;<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="42">json_len<pos:position pos:line="38" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="52">hand<pos:position pos:line="38" pos:column="56"/></name></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="58"/></expr_stmt>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  }<pos:position pos:line="40" pos:column="4"/></block></switch>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">result<pos:position pos:line="42" pos:column="13"/></name></expr>)<pos:position pos:line="42" pos:column="14"/></condition><then pos:line="42" pos:column="14"> <block pos:line="42" pos:column="15">{
    <goto pos:line="43" pos:column="5">goto <name pos:line="43" pos:column="10">done<pos:position pos:line="43" pos:column="14"/></name>;<pos:position pos:line="43" pos:column="15"/></goto>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><name pos:line="46" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="46" pos:column="17"/></name></expr></cpp:if>
  <expr_stmt><expr><name pos:line="47" pos:column="3">status<pos:position pos:line="47" pos:column="9"/></name> <operator pos:line="47" pos:column="10">=<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">yajl_complete_parse<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">hand<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>
<cpp:else pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">else<pos:position pos:line="48" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="49" pos:column="3">status<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <call><name pos:line="49" pos:column="12">yajl_parse_complete<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">hand<pos:position pos:line="49" pos:column="36"/></name></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name pos:line="52" pos:column="7">status<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">!=<pos:position pos:line="52" pos:column="16"/></operator> <name pos:line="52" pos:column="17">yajl_status_ok<pos:position pos:line="52" pos:column="31"/></name></expr>)<pos:position pos:line="52" pos:column="32"/></condition><then pos:line="52" pos:column="32"> <block pos:line="52" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="53" pos:column="5">unsigned<pos:position pos:line="53" pos:column="13"/></name> <name pos:line="53" pos:column="14">char<pos:position pos:line="53" pos:column="18"/></name> <modifier pos:line="53" pos:column="19">*<pos:position pos:line="53" pos:column="20"/></modifier></type><name pos:line="53" pos:column="20">errmsg<pos:position pos:line="53" pos:column="26"/></name> <init pos:line="53" pos:column="27">=
        <expr><call><name pos:line="54" pos:column="9">yajl_get_error<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">hand<pos:position pos:line="54" pos:column="28"/></name></expr></argument>, <comment type="block" pos:line="54" pos:column="30">/* verbose = */</comment> <argument><expr><literal type="number" pos:line="54" pos:column="46">0<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>,
                       <comment type="block" pos:line="55" pos:column="24">/* jsonText = */</comment> <argument><expr><name pos:line="55" pos:column="41">NULL<pos:position pos:line="55" pos:column="45"/></name></expr></argument>, <comment type="block" pos:line="55" pos:column="47">/* jsonTextLen = */</comment> <argument><expr><literal type="number" pos:line="55" pos:column="67">0<pos:position pos:line="55" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="70"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">ERROR<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><literal type="string" pos:line="56" pos:column="11">"ceph plugin: yajl_parse_complete failed: %s"<pos:position pos:line="56" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="56" pos:column="58">(<pos:position pos:line="56" pos:column="59"/></operator><name pos:line="56" pos:column="59">char<pos:position pos:line="56" pos:column="63"/></name> <operator pos:line="56" pos:column="64">*<pos:position pos:line="56" pos:column="65"/></operator><operator pos:line="56" pos:column="65">)<pos:position pos:line="56" pos:column="66"/></operator><name pos:line="56" pos:column="66">errmsg<pos:position pos:line="56" pos:column="72"/></name></expr></argument>)<pos:position pos:line="56" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">yajl_free_error<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">hand<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="27">errmsg<pos:position pos:line="57" pos:column="33"/></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">yajl_free<pos:position pos:line="58" pos:column="14"/></name><argument_list pos:line="58" pos:column="14">(<argument><expr><name pos:line="58" pos:column="15">hand<pos:position pos:line="58" pos:column="19"/></name></expr></argument>)<pos:position pos:line="58" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="21"/></expr_stmt>
    <return pos:line="59" pos:column="5">return <expr><literal type="number" pos:line="59" pos:column="12">1<pos:position pos:line="59" pos:column="13"/></literal></expr>;<pos:position pos:line="59" pos:column="14"/></return>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

<label><name pos:line="62" pos:column="1">done<pos:position pos:line="62" pos:column="5"/></name>:<pos:position pos:line="62" pos:column="6"/></label>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">yajl_free<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name pos:line="63" pos:column="13">hand<pos:position pos:line="63" pos:column="17"/></name></expr></argument>)<pos:position pos:line="63" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
  <return pos:line="64" pos:column="3">return <expr><name pos:line="64" pos:column="10">result<pos:position pos:line="64" pos:column="16"/></name></expr>;<pos:position pos:line="64" pos:column="17"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
