<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_284_collectd-5.0.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ignorelist_t<pos:position pos:line="1" pos:column="13"/></name> <modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">ignorelist_create<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">invert<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">ignorelist_t<pos:position pos:line="3" pos:column="21"/></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">il<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* smalloc exits if it failes */</comment>
	<expr_stmt><expr><name pos:line="6" pos:column="9">il<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">ignorelist_t<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></operator><operator pos:line="6" pos:column="29">)<pos:position pos:line="6" pos:column="30"/></operator> <call><name pos:line="6" pos:column="31">smalloc<pos:position pos:line="6" pos:column="38"/></name> <argument_list pos:line="6" pos:column="39">(<argument><expr><sizeof pos:line="6" pos:column="40">sizeof <argument_list pos:line="6" pos:column="47">(<argument><expr><name pos:line="6" pos:column="48">ignorelist_t<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">il<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="21">'\0'<pos:position pos:line="7" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="27">sizeof <argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">ignorelist_t<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * -&gt;ignore == 0  =&gt;  collect
	 * -&gt;ignore == 1  =&gt;  ignore
	 */</comment>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">il<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">ignore<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="13" pos:column="22">invert<pos:position pos:line="13" pos:column="28"/></name></expr> ?<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30"> <expr><literal type="number" pos:line="13" pos:column="31">0<pos:position pos:line="13" pos:column="32"/></literal></expr> <pos:position pos:line="13" pos:column="33"/></then><else pos:line="13" pos:column="33">: <expr><literal type="number" pos:line="13" pos:column="35">1<pos:position pos:line="13" pos:column="36"/></literal></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>

	<return pos:line="15" pos:column="9">return <expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">il<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator></expr>;<pos:position pos:line="15" pos:column="21"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
