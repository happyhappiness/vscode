<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1366_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">create_sockets<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">socket_entry_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ret_sockets<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="58">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">size_t<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">ret_sockets_num<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">node<pos:position pos:line="3" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="23">const<pos:position pos:line="3" pos:column="28"/></specifier> <name pos:line="3" pos:column="29">char<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">service<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="44">int<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">listen<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="55"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ai_list<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type>              <name pos:line="6" pos:column="20">ai_return<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">socket_entry_t<pos:position pos:line="8" pos:column="17"/></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">sockets<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type>          <name pos:line="9" pos:column="19">sockets_num<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><literal type="number" pos:line="9" pos:column="33">0<pos:position pos:line="9" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">*<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">ret_sockets<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">!=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">NULL<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">EINVAL<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">)<pos:position pos:line="14" pos:column="20"/></operator></expr>;<pos:position pos:line="14" pos:column="21"/></return></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">addrinfo<pos:position pos:line="16" pos:column="18"/></name></name></type> <name pos:line="16" pos:column="19">ai_hints<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><block pos:line="16" pos:column="30">{
    <expr><operator pos:line="17" pos:column="5">.<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">ai_family<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">AF_UNSPEC<pos:position pos:line="17" pos:column="27"/></name></expr>,
    <expr><operator pos:line="18" pos:column="5">.<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">ai_flags<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">AI_ADDRCONFIG<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">|<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">AI_PASSIVE<pos:position pos:line="18" pos:column="43"/></name></expr>,
    <expr><operator pos:line="19" pos:column="5">.<pos:position pos:line="19" pos:column="6"/></operator><name pos:line="19" pos:column="6">ai_protocol<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">IPPROTO_UDP<pos:position pos:line="19" pos:column="31"/></name></expr>,
    <expr><operator pos:line="20" pos:column="5">.<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">ai_socktype<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">SOCK_DGRAM<pos:position pos:line="20" pos:column="30"/></name></expr>
  }<pos:position pos:line="21" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="21" pos:column="5"/></decl_stmt>

  <expr_stmt><expr><name pos:line="23" pos:column="3">ai_return<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">getaddrinfo<pos:position pos:line="23" pos:column="26"/></name> <argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">node<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">service<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">ai_hints<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="54">&amp;<pos:position pos:line="23" pos:column="59"/></operator><name pos:line="23" pos:column="55">ai_list<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">ai_return<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">!=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
  <block pos:line="25" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">errbuf<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><literal type="number" pos:line="26" pos:column="17">1024<pos:position pos:line="26" pos:column="21"/></literal></expr>]<pos:position pos:line="26" pos:column="22"/></index></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ERROR<pos:position pos:line="27" pos:column="10"/></name> <argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="string" pos:line="27" pos:column="12">"gmond plugin: getaddrinfo (%s, %s) failed: %s"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="28" pos:column="9">(<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">node<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">==<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">NULL<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">)<pos:position pos:line="28" pos:column="23"/></operator></expr> ?<pos:position pos:line="28" pos:column="25"/></condition><then pos:line="28" pos:column="25"> <expr><literal type="string" pos:line="28" pos:column="26">"(null)"<pos:position pos:line="28" pos:column="34"/></literal></expr> <pos:position pos:line="28" pos:column="35"/></then><else pos:line="28" pos:column="35">: <expr><name pos:line="28" pos:column="37">node<pos:position pos:line="28" pos:column="41"/></name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">service<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">NULL<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">)<pos:position pos:line="29" pos:column="26"/></operator></expr> ?<pos:position pos:line="29" pos:column="28"/></condition><then pos:line="29" pos:column="28"> <expr><literal type="string" pos:line="29" pos:column="29">"(null)"<pos:position pos:line="29" pos:column="37"/></literal></expr> <pos:position pos:line="29" pos:column="38"/></then><else pos:line="29" pos:column="38">: <expr><name pos:line="29" pos:column="40">service<pos:position pos:line="29" pos:column="47"/></name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">ai_return<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">==<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">EAI_SYSTEM<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">)<pos:position pos:line="30" pos:column="34"/></operator></expr>
        ?<pos:position pos:line="31" pos:column="10"/></condition><then pos:line="31" pos:column="10"> <expr><call><name pos:line="31" pos:column="11">sstrerror<pos:position pos:line="31" pos:column="20"/></name> <argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">errno<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="29">errbuf<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="37">sizeof <argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">errbuf<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>
        <pos:position pos:line="32" pos:column="9"/></then><else pos:line="32" pos:column="9">: <expr><call><name pos:line="32" pos:column="11">gai_strerror<pos:position pos:line="32" pos:column="23"/></name> <argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">ai_return<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><operator pos:line="33" pos:column="13">-<pos:position pos:line="33" pos:column="14"/></operator><literal type="number" pos:line="33" pos:column="14">1<pos:position pos:line="33" pos:column="15"/></literal><operator pos:line="33" pos:column="15">)<pos:position pos:line="33" pos:column="16"/></operator></expr>;<pos:position pos:line="33" pos:column="17"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <for pos:line="36" pos:column="3">for <control pos:line="36" pos:column="7">(<init><decl><type><name><name pos:line="36" pos:column="8">struct<pos:position pos:line="36" pos:column="14"/></name> <name pos:line="36" pos:column="15">addrinfo<pos:position pos:line="36" pos:column="23"/></name></name> <modifier pos:line="36" pos:column="24">*<pos:position pos:line="36" pos:column="25"/></modifier><name pos:line="36" pos:column="25">ai_ptr<pos:position pos:line="36" pos:column="31"/></name></type> <init pos:line="36" pos:column="32">= <expr><name pos:line="36" pos:column="34">ai_list<pos:position pos:line="36" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="42"/></init> <condition><expr><name pos:line="36" pos:column="43">ai_ptr<pos:position pos:line="36" pos:column="49"/></name> <operator pos:line="36" pos:column="50">!=<pos:position pos:line="36" pos:column="52"/></operator> <name pos:line="36" pos:column="53">NULL<pos:position pos:line="36" pos:column="57"/></name></expr>;<pos:position pos:line="36" pos:column="58"/></condition> <incr><expr><name pos:line="36" pos:column="59">ai_ptr<pos:position pos:line="36" pos:column="65"/></name> <operator pos:line="36" pos:column="66">=<pos:position pos:line="36" pos:column="67"/></operator> <name><name pos:line="36" pos:column="68">ai_ptr<pos:position pos:line="36" pos:column="74"/></name><operator pos:line="36" pos:column="74">-&gt;<pos:position pos:line="36" pos:column="79"/></operator><name pos:line="36" pos:column="76">ai_next<pos:position pos:line="36" pos:column="83"/></name></name></expr></incr>)<pos:position pos:line="36" pos:column="84"/></control> <comment type="block" pos:line="36" pos:column="85">/* {{{ */</comment>
  <block pos:line="37" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">socket_entry_t<pos:position pos:line="38" pos:column="19"/></name> <modifier pos:line="38" pos:column="20">*<pos:position pos:line="38" pos:column="21"/></modifier></type><name pos:line="38" pos:column="21">tmp<pos:position pos:line="38" pos:column="24"/></name></decl>;<pos:position pos:line="38" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><name pos:line="40" pos:column="5">tmp<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">=<pos:position pos:line="40" pos:column="10"/></operator> <call><name pos:line="40" pos:column="11">realloc<pos:position pos:line="40" pos:column="18"/></name> <argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">sockets<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="29">(<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">sockets_num<pos:position pos:line="40" pos:column="41"/></name> <operator pos:line="40" pos:column="42">+<pos:position pos:line="40" pos:column="43"/></operator> <literal type="number" pos:line="40" pos:column="44">1<pos:position pos:line="40" pos:column="45"/></literal><operator pos:line="40" pos:column="45">)<pos:position pos:line="40" pos:column="46"/></operator> <operator pos:line="40" pos:column="47">*<pos:position pos:line="40" pos:column="48"/></operator> <sizeof pos:line="40" pos:column="49">sizeof <argument_list pos:line="40" pos:column="56">(<argument><expr><operator pos:line="40" pos:column="57">*<pos:position pos:line="40" pos:column="58"/></operator><name pos:line="40" pos:column="58">sockets<pos:position pos:line="40" pos:column="65"/></name></expr></argument>)<pos:position pos:line="40" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="68"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">tmp<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">==<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">NULL<pos:position pos:line="41" pos:column="20"/></name></expr>)<pos:position pos:line="41" pos:column="21"/></condition><then pos:line="41" pos:column="21">
    <block pos:line="42" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">ERROR<pos:position pos:line="43" pos:column="12"/></name> <argument_list pos:line="43" pos:column="13">(<argument><expr><literal type="string" pos:line="43" pos:column="14">"gmond plugin: realloc failed."<pos:position pos:line="43" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
      <continue pos:line="44" pos:column="7">continue;<pos:position pos:line="44" pos:column="16"/></continue>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="46" pos:column="5">sockets<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">tmp<pos:position pos:line="46" pos:column="18"/></name></expr>;<pos:position pos:line="46" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">sockets<pos:position pos:line="48" pos:column="12"/></name><index pos:line="48" pos:column="12">[<expr><name pos:line="48" pos:column="13">sockets_num<pos:position pos:line="48" pos:column="24"/></name></expr>]<pos:position pos:line="48" pos:column="25"/></index></name><operator pos:line="48" pos:column="25">.<pos:position pos:line="48" pos:column="26"/></operator><name pos:line="48" pos:column="26">fd<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <call><name pos:line="48" pos:column="31">socket<pos:position pos:line="48" pos:column="37"/></name> <argument_list pos:line="48" pos:column="38">(<argument><expr><name><name pos:line="48" pos:column="39">ai_ptr<pos:position pos:line="48" pos:column="45"/></name><operator pos:line="48" pos:column="45">-&gt;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="47">ai_family<pos:position pos:line="48" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="58">ai_ptr<pos:position pos:line="48" pos:column="64"/></name><operator pos:line="48" pos:column="64">-&gt;<pos:position pos:line="48" pos:column="69"/></operator><name pos:line="48" pos:column="66">ai_socktype<pos:position pos:line="48" pos:column="77"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="49" pos:column="9">ai_ptr<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">-&gt;<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="17">ai_protocol<pos:position pos:line="49" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">sockets<pos:position pos:line="50" pos:column="16"/></name><index pos:line="50" pos:column="16">[<expr><name pos:line="50" pos:column="17">sockets_num<pos:position pos:line="50" pos:column="28"/></name></expr>]<pos:position pos:line="50" pos:column="29"/></index></name><operator pos:line="50" pos:column="29">.<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">fd<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">&lt;<pos:position pos:line="50" pos:column="37"/></operator> <literal type="number" pos:line="50" pos:column="35">0<pos:position pos:line="50" pos:column="36"/></literal></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
    <block pos:line="51" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="52" pos:column="7">char<pos:position pos:line="52" pos:column="11"/></name></type> <name><name pos:line="52" pos:column="12">errbuf<pos:position pos:line="52" pos:column="18"/></name><index pos:line="52" pos:column="18">[<expr><literal type="number" pos:line="52" pos:column="19">1024<pos:position pos:line="52" pos:column="23"/></literal></expr>]<pos:position pos:line="52" pos:column="24"/></index></name></decl>;<pos:position pos:line="52" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">ERROR<pos:position pos:line="53" pos:column="12"/></name> <argument_list pos:line="53" pos:column="13">(<argument><expr><literal type="string" pos:line="53" pos:column="14">"gmond plugin: socket failed: %s"<pos:position pos:line="53" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="54" pos:column="11">sstrerror<pos:position pos:line="54" pos:column="20"/></name> <argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">errno<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">errbuf<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="37">sizeof <argument_list pos:line="54" pos:column="44">(<argument><expr><name pos:line="54" pos:column="45">errbuf<pos:position pos:line="54" pos:column="51"/></name></expr></argument>)<pos:position pos:line="54" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
      <continue pos:line="55" pos:column="7">continue;<pos:position pos:line="55" pos:column="16"/></continue>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">assert<pos:position pos:line="58" pos:column="11"/></name> <argument_list pos:line="58" pos:column="12">(<argument><expr><sizeof pos:line="58" pos:column="13">sizeof <argument_list pos:line="58" pos:column="20">(<argument><expr><name><name pos:line="58" pos:column="21">sockets<pos:position pos:line="58" pos:column="28"/></name><index pos:line="58" pos:column="28">[<expr><name pos:line="58" pos:column="29">sockets_num<pos:position pos:line="58" pos:column="40"/></name></expr>]<pos:position pos:line="58" pos:column="41"/></index></name><operator pos:line="58" pos:column="41">.<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">addr<pos:position pos:line="58" pos:column="46"/></name></expr></argument>)<pos:position pos:line="58" pos:column="47"/></argument_list></sizeof> <operator pos:line="58" pos:column="48">&gt;=<pos:position pos:line="58" pos:column="53"/></operator> <name><name pos:line="58" pos:column="51">ai_ptr<pos:position pos:line="58" pos:column="57"/></name><operator pos:line="58" pos:column="57">-&gt;<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="59">ai_addrlen<pos:position pos:line="58" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">memcpy<pos:position pos:line="59" pos:column="11"/></name> <argument_list pos:line="59" pos:column="12">(<argument><expr><operator pos:line="59" pos:column="13">&amp;<pos:position pos:line="59" pos:column="18"/></operator><name><name pos:line="59" pos:column="14">sockets<pos:position pos:line="59" pos:column="21"/></name><index pos:line="59" pos:column="21">[<expr><name pos:line="59" pos:column="22">sockets_num<pos:position pos:line="59" pos:column="33"/></name></expr>]<pos:position pos:line="59" pos:column="34"/></index></name><operator pos:line="59" pos:column="34">.<pos:position pos:line="59" pos:column="35"/></operator><name pos:line="59" pos:column="35">addr<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="41">ai_ptr<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">-&gt;<pos:position pos:line="59" pos:column="52"/></operator><name pos:line="59" pos:column="49">ai_addr<pos:position pos:line="59" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="58">ai_ptr<pos:position pos:line="59" pos:column="64"/></name><operator pos:line="59" pos:column="64">-&gt;<pos:position pos:line="59" pos:column="69"/></operator><name pos:line="59" pos:column="66">ai_addrlen<pos:position pos:line="59" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">sockets<pos:position pos:line="60" pos:column="12"/></name><index pos:line="60" pos:column="12">[<expr><name pos:line="60" pos:column="13">sockets_num<pos:position pos:line="60" pos:column="24"/></name></expr>]<pos:position pos:line="60" pos:column="25"/></index></name><operator pos:line="60" pos:column="25">.<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="26">addrlen<pos:position pos:line="60" pos:column="33"/></name> <operator pos:line="60" pos:column="34">=<pos:position pos:line="60" pos:column="35"/></operator> <name><name pos:line="60" pos:column="36">ai_ptr<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">-&gt;<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="44">ai_addrlen<pos:position pos:line="60" pos:column="54"/></name></name></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="62" pos:column="5">/* Sending socket: Open only one socket and don't bind it. */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">listen<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">==<pos:position pos:line="63" pos:column="18"/></operator> <literal type="number" pos:line="63" pos:column="19">0<pos:position pos:line="63" pos:column="20"/></literal></expr>)<pos:position pos:line="63" pos:column="21"/></condition><then pos:line="63" pos:column="21">
    <block pos:line="64" pos:column="5">{
      <expr_stmt><expr><name pos:line="65" pos:column="7">sockets_num<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">++<pos:position pos:line="65" pos:column="20"/></operator></expr>;<pos:position pos:line="65" pos:column="21"/></expr_stmt>
      <break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break>
    }<pos:position pos:line="67" pos:column="6"/></block></then>
    <else pos:line="68" pos:column="5">else
    <block pos:line="69" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="70" pos:column="7">int<pos:position pos:line="70" pos:column="10"/></name></type> <name pos:line="70" pos:column="11">yes<pos:position pos:line="70" pos:column="14"/></name> <init pos:line="70" pos:column="15">= <expr><literal type="number" pos:line="70" pos:column="17">1<pos:position pos:line="70" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="70" pos:column="19"/></decl_stmt>

      <expr_stmt><expr><name pos:line="72" pos:column="7">status<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <call><name pos:line="72" pos:column="16">setsockopt<pos:position pos:line="72" pos:column="26"/></name> <argument_list pos:line="72" pos:column="27">(<argument><expr><name><name pos:line="72" pos:column="28">sockets<pos:position pos:line="72" pos:column="35"/></name><index pos:line="72" pos:column="35">[<expr><name pos:line="72" pos:column="36">sockets_num<pos:position pos:line="72" pos:column="47"/></name></expr>]<pos:position pos:line="72" pos:column="48"/></index></name><operator pos:line="72" pos:column="48">.<pos:position pos:line="72" pos:column="49"/></operator><name pos:line="72" pos:column="49">fd<pos:position pos:line="72" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">SOL_SOCKET<pos:position pos:line="72" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="65">SO_REUSEADDR<pos:position pos:line="72" pos:column="77"/></name></expr></argument>,
          <argument><expr><operator pos:line="73" pos:column="11">(<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">void<pos:position pos:line="73" pos:column="16"/></name> <operator pos:line="73" pos:column="17">*<pos:position pos:line="73" pos:column="18"/></operator><operator pos:line="73" pos:column="18">)<pos:position pos:line="73" pos:column="19"/></operator> <operator pos:line="73" pos:column="20">&amp;<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="21">yes<pos:position pos:line="73" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="26">sizeof <argument_list pos:line="73" pos:column="33">(<argument><expr><name pos:line="73" pos:column="34">yes<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt>
      <if pos:line="74" pos:column="7">if <condition pos:line="74" pos:column="10">(<expr><name pos:line="74" pos:column="11">status<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">!=<pos:position pos:line="74" pos:column="20"/></operator> <literal type="number" pos:line="74" pos:column="21">0<pos:position pos:line="74" pos:column="22"/></literal></expr>)<pos:position pos:line="74" pos:column="23"/></condition><then pos:line="74" pos:column="23">
      <block pos:line="75" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="76" pos:column="9">char<pos:position pos:line="76" pos:column="13"/></name></type> <name><name pos:line="76" pos:column="14">errbuf<pos:position pos:line="76" pos:column="20"/></name><index pos:line="76" pos:column="20">[<expr><literal type="number" pos:line="76" pos:column="21">1024<pos:position pos:line="76" pos:column="25"/></literal></expr>]<pos:position pos:line="76" pos:column="26"/></index></name></decl>;<pos:position pos:line="76" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">WARNING<pos:position pos:line="77" pos:column="16"/></name> <argument_list pos:line="77" pos:column="17">(<argument><expr><literal type="string" pos:line="77" pos:column="18">"gmond plugin: setsockopt(2) failed: %s"<pos:position pos:line="77" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="78" pos:column="18">sstrerror<pos:position pos:line="78" pos:column="27"/></name> <argument_list pos:line="78" pos:column="28">(<argument><expr><name pos:line="78" pos:column="29">errno<pos:position pos:line="78" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="36">errbuf<pos:position pos:line="78" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="44">sizeof <argument_list pos:line="78" pos:column="51">(<argument><expr><name pos:line="78" pos:column="52">errbuf<pos:position pos:line="78" pos:column="58"/></name></expr></argument>)<pos:position pos:line="78" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="82" pos:column="5">status<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <call><name pos:line="82" pos:column="14">bind<pos:position pos:line="82" pos:column="18"/></name> <argument_list pos:line="82" pos:column="19">(<argument><expr><name><name pos:line="82" pos:column="20">sockets<pos:position pos:line="82" pos:column="27"/></name><index pos:line="82" pos:column="27">[<expr><name pos:line="82" pos:column="28">sockets_num<pos:position pos:line="82" pos:column="39"/></name></expr>]<pos:position pos:line="82" pos:column="40"/></index></name><operator pos:line="82" pos:column="40">.<pos:position pos:line="82" pos:column="41"/></operator><name pos:line="82" pos:column="41">fd<pos:position pos:line="82" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="45">ai_ptr<pos:position pos:line="82" pos:column="51"/></name><operator pos:line="82" pos:column="51">-&gt;<pos:position pos:line="82" pos:column="56"/></operator><name pos:line="82" pos:column="53">ai_addr<pos:position pos:line="82" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="62">ai_ptr<pos:position pos:line="82" pos:column="68"/></name><operator pos:line="82" pos:column="68">-&gt;<pos:position pos:line="82" pos:column="73"/></operator><name pos:line="82" pos:column="70">ai_addrlen<pos:position pos:line="82" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="82"/></expr_stmt>
    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">status<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">!=<pos:position pos:line="83" pos:column="18"/></operator> <literal type="number" pos:line="83" pos:column="19">0<pos:position pos:line="83" pos:column="20"/></literal></expr>)<pos:position pos:line="83" pos:column="21"/></condition><then pos:line="83" pos:column="21">
    <block pos:line="84" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="85" pos:column="7">char<pos:position pos:line="85" pos:column="11"/></name></type> <name><name pos:line="85" pos:column="12">errbuf<pos:position pos:line="85" pos:column="18"/></name><index pos:line="85" pos:column="18">[<expr><literal type="number" pos:line="85" pos:column="19">1024<pos:position pos:line="85" pos:column="23"/></literal></expr>]<pos:position pos:line="85" pos:column="24"/></index></name></decl>;<pos:position pos:line="85" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">ERROR<pos:position pos:line="86" pos:column="12"/></name> <argument_list pos:line="86" pos:column="13">(<argument><expr><literal type="string" pos:line="86" pos:column="14">"gmond plugin: bind failed: %s"<pos:position pos:line="86" pos:column="45"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="87" pos:column="11">sstrerror<pos:position pos:line="87" pos:column="20"/></name> <argument_list pos:line="87" pos:column="21">(<argument><expr><name pos:line="87" pos:column="22">errno<pos:position pos:line="87" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="29">errbuf<pos:position pos:line="87" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="87" pos:column="37">sizeof <argument_list pos:line="87" pos:column="44">(<argument><expr><name pos:line="87" pos:column="45">errbuf<pos:position pos:line="87" pos:column="51"/></name></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="87" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="88" pos:column="7">close<pos:position pos:line="88" pos:column="12"/></name> <argument_list pos:line="88" pos:column="13">(<argument><expr><name><name pos:line="88" pos:column="14">sockets<pos:position pos:line="88" pos:column="21"/></name><index pos:line="88" pos:column="21">[<expr><name pos:line="88" pos:column="22">sockets_num<pos:position pos:line="88" pos:column="33"/></name></expr>]<pos:position pos:line="88" pos:column="34"/></index></name><operator pos:line="88" pos:column="34">.<pos:position pos:line="88" pos:column="35"/></operator><name pos:line="88" pos:column="35">fd<pos:position pos:line="88" pos:column="37"/></name></expr></argument>)<pos:position pos:line="88" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="39"/></expr_stmt>
      <continue pos:line="89" pos:column="7">continue;<pos:position pos:line="89" pos:column="16"/></continue>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name><name pos:line="92" pos:column="9">ai_ptr<pos:position pos:line="92" pos:column="15"/></name><operator pos:line="92" pos:column="15">-&gt;<pos:position pos:line="92" pos:column="20"/></operator><name pos:line="92" pos:column="17">ai_family<pos:position pos:line="92" pos:column="26"/></name></name> <operator pos:line="92" pos:column="27">==<pos:position pos:line="92" pos:column="29"/></operator> <name pos:line="92" pos:column="30">AF_INET<pos:position pos:line="92" pos:column="37"/></name></expr>)<pos:position pos:line="92" pos:column="38"/></condition><then pos:line="92" pos:column="38">
    <block pos:line="93" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="94" pos:column="7">struct<pos:position pos:line="94" pos:column="13"/></name> <name pos:line="94" pos:column="14">sockaddr_in<pos:position pos:line="94" pos:column="25"/></name></name> <modifier pos:line="94" pos:column="26">*<pos:position pos:line="94" pos:column="27"/></modifier></type><name pos:line="94" pos:column="27">addr<pos:position pos:line="94" pos:column="31"/></name></decl>;<pos:position pos:line="94" pos:column="32"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="95" pos:column="7">int<pos:position pos:line="95" pos:column="10"/></name></type> <name pos:line="95" pos:column="11">loop<pos:position pos:line="95" pos:column="15"/></name></decl>;<pos:position pos:line="95" pos:column="16"/></decl_stmt>

      <expr_stmt><expr><name pos:line="97" pos:column="7">addr<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <operator pos:line="97" pos:column="14">(<pos:position pos:line="97" pos:column="15"/></operator>struct <name pos:line="97" pos:column="22">sockaddr_in<pos:position pos:line="97" pos:column="33"/></name> <operator pos:line="97" pos:column="34">*<pos:position pos:line="97" pos:column="35"/></operator><operator pos:line="97" pos:column="35">)<pos:position pos:line="97" pos:column="36"/></operator> <name><name pos:line="97" pos:column="37">ai_ptr<pos:position pos:line="97" pos:column="43"/></name><operator pos:line="97" pos:column="43">-&gt;<pos:position pos:line="97" pos:column="48"/></operator><name pos:line="97" pos:column="45">ai_addr<pos:position pos:line="97" pos:column="52"/></name></name></expr>;<pos:position pos:line="97" pos:column="53"/></expr_stmt>

      <if pos:line="99" pos:column="7">if <condition pos:line="99" pos:column="10">(<expr><operator pos:line="99" pos:column="11">!<pos:position pos:line="99" pos:column="12"/></operator><call><name pos:line="99" pos:column="12">IN_MULTICAST<pos:position pos:line="99" pos:column="24"/></name> <argument_list pos:line="99" pos:column="25">(<argument><expr><call><name pos:line="99" pos:column="26">ntohl<pos:position pos:line="99" pos:column="31"/></name> <argument_list pos:line="99" pos:column="32">(<argument><expr><name><name pos:line="99" pos:column="33">addr<pos:position pos:line="99" pos:column="37"/></name><operator pos:line="99" pos:column="37">-&gt;<pos:position pos:line="99" pos:column="42"/></operator><name pos:line="99" pos:column="39">sin_addr<pos:position pos:line="99" pos:column="47"/></name><operator pos:line="99" pos:column="47">.<pos:position pos:line="99" pos:column="48"/></operator><name pos:line="99" pos:column="48">s_addr<pos:position pos:line="99" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="57"/></condition><then pos:line="99" pos:column="57">
      <block pos:line="100" pos:column="7">{
        <expr_stmt><expr><name pos:line="101" pos:column="9">sockets_num<pos:position pos:line="101" pos:column="20"/></name><operator pos:line="101" pos:column="20">++<pos:position pos:line="101" pos:column="22"/></operator></expr>;<pos:position pos:line="101" pos:column="23"/></expr_stmt>
        <continue pos:line="102" pos:column="9">continue;<pos:position pos:line="102" pos:column="18"/></continue>
      }<pos:position pos:line="103" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="105" pos:column="7">loop<pos:position pos:line="105" pos:column="11"/></name> <operator pos:line="105" pos:column="12">=<pos:position pos:line="105" pos:column="13"/></operator> <literal type="number" pos:line="105" pos:column="14">1<pos:position pos:line="105" pos:column="15"/></literal></expr>;<pos:position pos:line="105" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="106" pos:column="7">status<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">=<pos:position pos:line="106" pos:column="15"/></operator> <call><name pos:line="106" pos:column="16">setsockopt<pos:position pos:line="106" pos:column="26"/></name> <argument_list pos:line="106" pos:column="27">(<argument><expr><name><name pos:line="106" pos:column="28">sockets<pos:position pos:line="106" pos:column="35"/></name><index pos:line="106" pos:column="35">[<expr><name pos:line="106" pos:column="36">sockets_num<pos:position pos:line="106" pos:column="47"/></name></expr>]<pos:position pos:line="106" pos:column="48"/></index></name><operator pos:line="106" pos:column="48">.<pos:position pos:line="106" pos:column="49"/></operator><name pos:line="106" pos:column="49">fd<pos:position pos:line="106" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="53">IPPROTO_IP<pos:position pos:line="106" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="65">IP_MULTICAST_LOOP<pos:position pos:line="106" pos:column="82"/></name></expr></argument>,
          <argument><expr><operator pos:line="107" pos:column="11">(<pos:position pos:line="107" pos:column="12"/></operator><name pos:line="107" pos:column="12">void<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">*<pos:position pos:line="107" pos:column="18"/></operator><operator pos:line="107" pos:column="18">)<pos:position pos:line="107" pos:column="19"/></operator> <operator pos:line="107" pos:column="20">&amp;<pos:position pos:line="107" pos:column="25"/></operator><name pos:line="107" pos:column="21">loop<pos:position pos:line="107" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="107" pos:column="27">sizeof <argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">loop<pos:position pos:line="107" pos:column="39"/></name></expr></argument>)<pos:position pos:line="107" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="42"/></expr_stmt>
      <if pos:line="108" pos:column="7">if <condition pos:line="108" pos:column="10">(<expr><name pos:line="108" pos:column="11">status<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">!=<pos:position pos:line="108" pos:column="20"/></operator> <literal type="number" pos:line="108" pos:column="21">0<pos:position pos:line="108" pos:column="22"/></literal></expr>)<pos:position pos:line="108" pos:column="23"/></condition><then pos:line="108" pos:column="23">
      <block pos:line="109" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="110" pos:column="9">char<pos:position pos:line="110" pos:column="13"/></name></type> <name><name pos:line="110" pos:column="14">errbuf<pos:position pos:line="110" pos:column="20"/></name><index pos:line="110" pos:column="20">[<expr><literal type="number" pos:line="110" pos:column="21">1024<pos:position pos:line="110" pos:column="25"/></literal></expr>]<pos:position pos:line="110" pos:column="26"/></index></name></decl>;<pos:position pos:line="110" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">WARNING<pos:position pos:line="111" pos:column="16"/></name> <argument_list pos:line="111" pos:column="17">(<argument><expr><literal type="string" pos:line="111" pos:column="18">"gmond plugin: setsockopt(2) failed: %s"<pos:position pos:line="111" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="112" pos:column="18">sstrerror<pos:position pos:line="112" pos:column="27"/></name> <argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">errno<pos:position pos:line="112" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="36">errbuf<pos:position pos:line="112" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="112" pos:column="44">sizeof <argument_list pos:line="112" pos:column="51">(<argument><expr><name pos:line="112" pos:column="52">errbuf<pos:position pos:line="112" pos:column="58"/></name></expr></argument>)<pos:position pos:line="112" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="112" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="112" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if>

      <decl_stmt><decl><type><name><name pos:line="115" pos:column="7">struct<pos:position pos:line="115" pos:column="13"/></name> <name pos:line="115" pos:column="14">ip_mreq<pos:position pos:line="115" pos:column="21"/></name></name></type> <name pos:line="115" pos:column="22">mreq<pos:position pos:line="115" pos:column="26"/></name> <init pos:line="115" pos:column="27">= <expr><block pos:line="115" pos:column="29">{
        <expr><operator pos:line="116" pos:column="9">.<pos:position pos:line="116" pos:column="10"/></operator><name><name pos:line="116" pos:column="10">imr_multiaddr<pos:position pos:line="116" pos:column="23"/></name><operator pos:line="116" pos:column="23">.<pos:position pos:line="116" pos:column="24"/></operator><name pos:line="116" pos:column="24">s_addr<pos:position pos:line="116" pos:column="30"/></name></name> <operator pos:line="116" pos:column="31">=<pos:position pos:line="116" pos:column="32"/></operator> <name><name pos:line="116" pos:column="33">addr<pos:position pos:line="116" pos:column="37"/></name><operator pos:line="116" pos:column="37">-&gt;<pos:position pos:line="116" pos:column="42"/></operator><name pos:line="116" pos:column="39">sin_addr<pos:position pos:line="116" pos:column="47"/></name><operator pos:line="116" pos:column="47">.<pos:position pos:line="116" pos:column="48"/></operator><name pos:line="116" pos:column="48">s_addr<pos:position pos:line="116" pos:column="54"/></name></name></expr>,
        <expr><operator pos:line="117" pos:column="9">.<pos:position pos:line="117" pos:column="10"/></operator><name><name pos:line="117" pos:column="10">imr_interface<pos:position pos:line="117" pos:column="23"/></name><operator pos:line="117" pos:column="23">.<pos:position pos:line="117" pos:column="24"/></operator><name pos:line="117" pos:column="24">s_addr<pos:position pos:line="117" pos:column="30"/></name></name> <operator pos:line="117" pos:column="31">=<pos:position pos:line="117" pos:column="32"/></operator> <macro><name pos:line="117" pos:column="33">htonl<pos:position pos:line="117" pos:column="38"/></name> <argument_list pos:line="117" pos:column="39">(<argument pos:line="117" pos:column="40">INADDR_ANY<pos:position pos:line="117" pos:column="50"/></argument>)<pos:position pos:line="117" pos:column="51"/></argument_list></macro></expr>
      }<pos:position pos:line="118" pos:column="8"/></block></expr></init></decl>;<pos:position pos:line="118" pos:column="9"/></decl_stmt>

      <expr_stmt><expr><name pos:line="120" pos:column="7">status<pos:position pos:line="120" pos:column="13"/></name> <operator pos:line="120" pos:column="14">=<pos:position pos:line="120" pos:column="15"/></operator> <call><name pos:line="120" pos:column="16">setsockopt<pos:position pos:line="120" pos:column="26"/></name> <argument_list pos:line="120" pos:column="27">(<argument><expr><name><name pos:line="120" pos:column="28">sockets<pos:position pos:line="120" pos:column="35"/></name><index pos:line="120" pos:column="35">[<expr><name pos:line="120" pos:column="36">sockets_num<pos:position pos:line="120" pos:column="47"/></name></expr>]<pos:position pos:line="120" pos:column="48"/></index></name><operator pos:line="120" pos:column="48">.<pos:position pos:line="120" pos:column="49"/></operator><name pos:line="120" pos:column="49">fd<pos:position pos:line="120" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="53">IPPROTO_IP<pos:position pos:line="120" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="65">IP_ADD_MEMBERSHIP<pos:position pos:line="120" pos:column="82"/></name></expr></argument>,
          <argument><expr><operator pos:line="121" pos:column="11">(<pos:position pos:line="121" pos:column="12"/></operator><name pos:line="121" pos:column="12">void<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">*<pos:position pos:line="121" pos:column="18"/></operator><operator pos:line="121" pos:column="18">)<pos:position pos:line="121" pos:column="19"/></operator> <operator pos:line="121" pos:column="20">&amp;<pos:position pos:line="121" pos:column="25"/></operator><name pos:line="121" pos:column="21">mreq<pos:position pos:line="121" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="27">sizeof <argument_list pos:line="121" pos:column="34">(<argument><expr><name pos:line="121" pos:column="35">mreq<pos:position pos:line="121" pos:column="39"/></name></expr></argument>)<pos:position pos:line="121" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="42"/></expr_stmt>
      <if pos:line="122" pos:column="7">if <condition pos:line="122" pos:column="10">(<expr><name pos:line="122" pos:column="11">status<pos:position pos:line="122" pos:column="17"/></name> <operator pos:line="122" pos:column="18">!=<pos:position pos:line="122" pos:column="20"/></operator> <literal type="number" pos:line="122" pos:column="21">0<pos:position pos:line="122" pos:column="22"/></literal></expr>)<pos:position pos:line="122" pos:column="23"/></condition><then pos:line="122" pos:column="23">
      <block pos:line="123" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="124" pos:column="9">char<pos:position pos:line="124" pos:column="13"/></name></type> <name><name pos:line="124" pos:column="14">errbuf<pos:position pos:line="124" pos:column="20"/></name><index pos:line="124" pos:column="20">[<expr><literal type="number" pos:line="124" pos:column="21">1024<pos:position pos:line="124" pos:column="25"/></literal></expr>]<pos:position pos:line="124" pos:column="26"/></index></name></decl>;<pos:position pos:line="124" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">WARNING<pos:position pos:line="125" pos:column="16"/></name> <argument_list pos:line="125" pos:column="17">(<argument><expr><literal type="string" pos:line="125" pos:column="18">"gmond plugin: setsockopt(2) failed: %s"<pos:position pos:line="125" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="126" pos:column="18">sstrerror<pos:position pos:line="126" pos:column="27"/></name> <argument_list pos:line="126" pos:column="28">(<argument><expr><name pos:line="126" pos:column="29">errno<pos:position pos:line="126" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="36">errbuf<pos:position pos:line="126" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="126" pos:column="44">sizeof <argument_list pos:line="126" pos:column="51">(<argument><expr><name pos:line="126" pos:column="52">errbuf<pos:position pos:line="126" pos:column="58"/></name></expr></argument>)<pos:position pos:line="126" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="126" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="126" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="127" pos:column="8"/></block></then></if>
    }<pos:position pos:line="128" pos:column="6"/></block></then> <comment type="block" pos:line="128" pos:column="7">/* if (ai_ptr-&gt;ai_family == AF_INET) */</comment>
    <elseif pos:line="129" pos:column="5">else <if pos:line="129" pos:column="10">if <condition pos:line="129" pos:column="13">(<expr><name><name pos:line="129" pos:column="14">ai_ptr<pos:position pos:line="129" pos:column="20"/></name><operator pos:line="129" pos:column="20">-&gt;<pos:position pos:line="129" pos:column="25"/></operator><name pos:line="129" pos:column="22">ai_family<pos:position pos:line="129" pos:column="31"/></name></name> <operator pos:line="129" pos:column="32">==<pos:position pos:line="129" pos:column="34"/></operator> <name pos:line="129" pos:column="35">AF_INET6<pos:position pos:line="129" pos:column="43"/></name></expr>)<pos:position pos:line="129" pos:column="44"/></condition><then pos:line="129" pos:column="44">
    <block pos:line="130" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="131" pos:column="7">struct<pos:position pos:line="131" pos:column="13"/></name> <name pos:line="131" pos:column="14">sockaddr_in6<pos:position pos:line="131" pos:column="26"/></name></name> <modifier pos:line="131" pos:column="27">*<pos:position pos:line="131" pos:column="28"/></modifier></type><name pos:line="131" pos:column="28">addr<pos:position pos:line="131" pos:column="32"/></name></decl>;<pos:position pos:line="131" pos:column="33"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="132" pos:column="7">int<pos:position pos:line="132" pos:column="10"/></name></type> <name pos:line="132" pos:column="11">loop<pos:position pos:line="132" pos:column="15"/></name></decl>;<pos:position pos:line="132" pos:column="16"/></decl_stmt>

      <expr_stmt><expr><name pos:line="134" pos:column="7">addr<pos:position pos:line="134" pos:column="11"/></name> <operator pos:line="134" pos:column="12">=<pos:position pos:line="134" pos:column="13"/></operator> <operator pos:line="134" pos:column="14">(<pos:position pos:line="134" pos:column="15"/></operator>struct <name pos:line="134" pos:column="22">sockaddr_in6<pos:position pos:line="134" pos:column="34"/></name> <operator pos:line="134" pos:column="35">*<pos:position pos:line="134" pos:column="36"/></operator><operator pos:line="134" pos:column="36">)<pos:position pos:line="134" pos:column="37"/></operator> <name><name pos:line="134" pos:column="38">ai_ptr<pos:position pos:line="134" pos:column="44"/></name><operator pos:line="134" pos:column="44">-&gt;<pos:position pos:line="134" pos:column="49"/></operator><name pos:line="134" pos:column="46">ai_addr<pos:position pos:line="134" pos:column="53"/></name></name></expr>;<pos:position pos:line="134" pos:column="54"/></expr_stmt>

      <if pos:line="136" pos:column="7">if <condition pos:line="136" pos:column="10">(<expr><operator pos:line="136" pos:column="11">!<pos:position pos:line="136" pos:column="12"/></operator><call><name pos:line="136" pos:column="12">IN6_IS_ADDR_MULTICAST<pos:position pos:line="136" pos:column="33"/></name> <argument_list pos:line="136" pos:column="34">(<argument><expr><operator pos:line="136" pos:column="35">&amp;<pos:position pos:line="136" pos:column="40"/></operator><name><name pos:line="136" pos:column="36">addr<pos:position pos:line="136" pos:column="40"/></name><operator pos:line="136" pos:column="40">-&gt;<pos:position pos:line="136" pos:column="45"/></operator><name pos:line="136" pos:column="42">sin6_addr<pos:position pos:line="136" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="53"/></condition><then pos:line="136" pos:column="53">
      <block pos:line="137" pos:column="7">{
        <expr_stmt><expr><name pos:line="138" pos:column="9">sockets_num<pos:position pos:line="138" pos:column="20"/></name><operator pos:line="138" pos:column="20">++<pos:position pos:line="138" pos:column="22"/></operator></expr>;<pos:position pos:line="138" pos:column="23"/></expr_stmt>
        <continue pos:line="139" pos:column="9">continue;<pos:position pos:line="139" pos:column="18"/></continue>
      }<pos:position pos:line="140" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="142" pos:column="7">loop<pos:position pos:line="142" pos:column="11"/></name> <operator pos:line="142" pos:column="12">=<pos:position pos:line="142" pos:column="13"/></operator> <literal type="number" pos:line="142" pos:column="14">1<pos:position pos:line="142" pos:column="15"/></literal></expr>;<pos:position pos:line="142" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="143" pos:column="7">status<pos:position pos:line="143" pos:column="13"/></name> <operator pos:line="143" pos:column="14">=<pos:position pos:line="143" pos:column="15"/></operator> <call><name pos:line="143" pos:column="16">setsockopt<pos:position pos:line="143" pos:column="26"/></name> <argument_list pos:line="143" pos:column="27">(<argument><expr><name><name pos:line="143" pos:column="28">sockets<pos:position pos:line="143" pos:column="35"/></name><index pos:line="143" pos:column="35">[<expr><name pos:line="143" pos:column="36">sockets_num<pos:position pos:line="143" pos:column="47"/></name></expr>]<pos:position pos:line="143" pos:column="48"/></index></name><operator pos:line="143" pos:column="48">.<pos:position pos:line="143" pos:column="49"/></operator><name pos:line="143" pos:column="49">fd<pos:position pos:line="143" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="53">IPPROTO_IPV6<pos:position pos:line="143" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="67">IPV6_MULTICAST_LOOP<pos:position pos:line="143" pos:column="86"/></name></expr></argument>,
          <argument><expr><operator pos:line="144" pos:column="11">(<pos:position pos:line="144" pos:column="12"/></operator><name pos:line="144" pos:column="12">void<pos:position pos:line="144" pos:column="16"/></name> <operator pos:line="144" pos:column="17">*<pos:position pos:line="144" pos:column="18"/></operator><operator pos:line="144" pos:column="18">)<pos:position pos:line="144" pos:column="19"/></operator> <operator pos:line="144" pos:column="20">&amp;<pos:position pos:line="144" pos:column="25"/></operator><name pos:line="144" pos:column="21">loop<pos:position pos:line="144" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="144" pos:column="27">sizeof <argument_list pos:line="144" pos:column="34">(<argument><expr><name pos:line="144" pos:column="35">loop<pos:position pos:line="144" pos:column="39"/></name></expr></argument>)<pos:position pos:line="144" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="144" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="42"/></expr_stmt>
      <if pos:line="145" pos:column="7">if <condition pos:line="145" pos:column="10">(<expr><name pos:line="145" pos:column="11">status<pos:position pos:line="145" pos:column="17"/></name> <operator pos:line="145" pos:column="18">!=<pos:position pos:line="145" pos:column="20"/></operator> <literal type="number" pos:line="145" pos:column="21">0<pos:position pos:line="145" pos:column="22"/></literal></expr>)<pos:position pos:line="145" pos:column="23"/></condition><then pos:line="145" pos:column="23">
      <block pos:line="146" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="147" pos:column="9">char<pos:position pos:line="147" pos:column="13"/></name></type> <name><name pos:line="147" pos:column="14">errbuf<pos:position pos:line="147" pos:column="20"/></name><index pos:line="147" pos:column="20">[<expr><literal type="number" pos:line="147" pos:column="21">1024<pos:position pos:line="147" pos:column="25"/></literal></expr>]<pos:position pos:line="147" pos:column="26"/></index></name></decl>;<pos:position pos:line="147" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="148" pos:column="9">WARNING<pos:position pos:line="148" pos:column="16"/></name> <argument_list pos:line="148" pos:column="17">(<argument><expr><literal type="string" pos:line="148" pos:column="18">"gmond plugin: setsockopt(2) failed: %s"<pos:position pos:line="148" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="149" pos:column="18">sstrerror<pos:position pos:line="149" pos:column="27"/></name> <argument_list pos:line="149" pos:column="28">(<argument><expr><name pos:line="149" pos:column="29">errno<pos:position pos:line="149" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="36">errbuf<pos:position pos:line="149" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="44">sizeof <argument_list pos:line="149" pos:column="51">(<argument><expr><name pos:line="149" pos:column="52">errbuf<pos:position pos:line="149" pos:column="58"/></name></expr></argument>)<pos:position pos:line="149" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="149" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="150" pos:column="8"/></block></then></if>

      <decl_stmt><decl><type><name><name pos:line="152" pos:column="7">struct<pos:position pos:line="152" pos:column="13"/></name> <name pos:line="152" pos:column="14">ipv6_mreq<pos:position pos:line="152" pos:column="23"/></name></name></type> <name pos:line="152" pos:column="24">mreq<pos:position pos:line="152" pos:column="28"/></name> <init pos:line="152" pos:column="29">= <expr><block pos:line="152" pos:column="31">{
        <expr><operator pos:line="153" pos:column="9">.<pos:position pos:line="153" pos:column="10"/></operator><name pos:line="153" pos:column="10">ipv6mr_interface<pos:position pos:line="153" pos:column="26"/></name> <operator pos:line="153" pos:column="27">=<pos:position pos:line="153" pos:column="28"/></operator> <literal type="number" pos:line="153" pos:column="29">0<pos:position pos:line="153" pos:column="30"/></literal></expr> <comment type="block" pos:line="153" pos:column="31">/* any */</comment>
      }<pos:position pos:line="154" pos:column="8"/></block></expr></init></decl>;<pos:position pos:line="154" pos:column="9"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="156" pos:column="7">memcpy<pos:position pos:line="156" pos:column="13"/></name> <argument_list pos:line="156" pos:column="14">(<argument><expr><operator pos:line="156" pos:column="15">&amp;<pos:position pos:line="156" pos:column="20"/></operator><name><name pos:line="156" pos:column="16">mreq<pos:position pos:line="156" pos:column="20"/></name><operator pos:line="156" pos:column="20">.<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="21">ipv6mr_multiaddr<pos:position pos:line="156" pos:column="37"/></name></name></expr></argument>,
          <argument><expr><operator pos:line="157" pos:column="11">&amp;<pos:position pos:line="157" pos:column="16"/></operator><name><name pos:line="157" pos:column="12">addr<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">-&gt;<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="18">sin6_addr<pos:position pos:line="157" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="157" pos:column="29">sizeof <argument_list pos:line="157" pos:column="36">(<argument><expr><name><name pos:line="157" pos:column="37">addr<pos:position pos:line="157" pos:column="41"/></name><operator pos:line="157" pos:column="41">-&gt;<pos:position pos:line="157" pos:column="46"/></operator><name pos:line="157" pos:column="43">sin6_addr<pos:position pos:line="157" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="157" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><name pos:line="158" pos:column="7">status<pos:position pos:line="158" pos:column="13"/></name> <operator pos:line="158" pos:column="14">=<pos:position pos:line="158" pos:column="15"/></operator> <call><name pos:line="158" pos:column="16">setsockopt<pos:position pos:line="158" pos:column="26"/></name> <argument_list pos:line="158" pos:column="27">(<argument><expr><name><name pos:line="158" pos:column="28">sockets<pos:position pos:line="158" pos:column="35"/></name><index pos:line="158" pos:column="35">[<expr><name pos:line="158" pos:column="36">sockets_num<pos:position pos:line="158" pos:column="47"/></name></expr>]<pos:position pos:line="158" pos:column="48"/></index></name><operator pos:line="158" pos:column="48">.<pos:position pos:line="158" pos:column="49"/></operator><name pos:line="158" pos:column="49">fd<pos:position pos:line="158" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="53">IPPROTO_IPV6<pos:position pos:line="158" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="67">IPV6_ADD_MEMBERSHIP<pos:position pos:line="158" pos:column="86"/></name></expr></argument>,
          <argument><expr><operator pos:line="159" pos:column="11">(<pos:position pos:line="159" pos:column="12"/></operator><name pos:line="159" pos:column="12">void<pos:position pos:line="159" pos:column="16"/></name> <operator pos:line="159" pos:column="17">*<pos:position pos:line="159" pos:column="18"/></operator><operator pos:line="159" pos:column="18">)<pos:position pos:line="159" pos:column="19"/></operator> <operator pos:line="159" pos:column="20">&amp;<pos:position pos:line="159" pos:column="25"/></operator><name pos:line="159" pos:column="21">mreq<pos:position pos:line="159" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="27">sizeof <argument_list pos:line="159" pos:column="34">(<argument><expr><name pos:line="159" pos:column="35">mreq<pos:position pos:line="159" pos:column="39"/></name></expr></argument>)<pos:position pos:line="159" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="159" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="42"/></expr_stmt>
      <if pos:line="160" pos:column="7">if <condition pos:line="160" pos:column="10">(<expr><name pos:line="160" pos:column="11">status<pos:position pos:line="160" pos:column="17"/></name> <operator pos:line="160" pos:column="18">!=<pos:position pos:line="160" pos:column="20"/></operator> <literal type="number" pos:line="160" pos:column="21">0<pos:position pos:line="160" pos:column="22"/></literal></expr>)<pos:position pos:line="160" pos:column="23"/></condition><then pos:line="160" pos:column="23">
      <block pos:line="161" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="162" pos:column="9">char<pos:position pos:line="162" pos:column="13"/></name></type> <name><name pos:line="162" pos:column="14">errbuf<pos:position pos:line="162" pos:column="20"/></name><index pos:line="162" pos:column="20">[<expr><literal type="number" pos:line="162" pos:column="21">1024<pos:position pos:line="162" pos:column="25"/></literal></expr>]<pos:position pos:line="162" pos:column="26"/></index></name></decl>;<pos:position pos:line="162" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">WARNING<pos:position pos:line="163" pos:column="16"/></name> <argument_list pos:line="163" pos:column="17">(<argument><expr><literal type="string" pos:line="163" pos:column="18">"gmond plugin: setsockopt(2) failed: %s"<pos:position pos:line="163" pos:column="58"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="164" pos:column="18">sstrerror<pos:position pos:line="164" pos:column="27"/></name> <argument_list pos:line="164" pos:column="28">(<argument><expr><name pos:line="164" pos:column="29">errno<pos:position pos:line="164" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="36">errbuf<pos:position pos:line="164" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="164" pos:column="44">sizeof <argument_list pos:line="164" pos:column="51">(<argument><expr><name pos:line="164" pos:column="52">errbuf<pos:position pos:line="164" pos:column="58"/></name></expr></argument>)<pos:position pos:line="164" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="164" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="164" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="165" pos:column="8"/></block></then></if>
    }<pos:position pos:line="166" pos:column="6"/></block></then></if></elseif></if> <comment type="block" pos:line="166" pos:column="7">/* if (ai_ptr-&gt;ai_family == AF_INET6) */</comment>

    <expr_stmt><expr><name pos:line="168" pos:column="5">sockets_num<pos:position pos:line="168" pos:column="16"/></name><operator pos:line="168" pos:column="16">++<pos:position pos:line="168" pos:column="18"/></operator></expr>;<pos:position pos:line="168" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="169" pos:column="4"/></block></for> <comment type="block" pos:line="169" pos:column="5">/* }}} for (ai_ptr = ai_list; ai_ptr != NULL; ai_ptr = ai_ptr-&gt;ai_next) */</comment>

  <expr_stmt><expr><call><name pos:line="171" pos:column="3">freeaddrinfo<pos:position pos:line="171" pos:column="15"/></name> <argument_list pos:line="171" pos:column="16">(<argument><expr><name pos:line="171" pos:column="17">ai_list<pos:position pos:line="171" pos:column="24"/></name></expr></argument>)<pos:position pos:line="171" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="26"/></expr_stmt>

  <if pos:line="173" pos:column="3">if <condition pos:line="173" pos:column="6">(<expr><name pos:line="173" pos:column="7">sockets_num<pos:position pos:line="173" pos:column="18"/></name> <operator pos:line="173" pos:column="19">==<pos:position pos:line="173" pos:column="21"/></operator> <literal type="number" pos:line="173" pos:column="22">0<pos:position pos:line="173" pos:column="23"/></literal></expr>)<pos:position pos:line="173" pos:column="24"/></condition><then pos:line="173" pos:column="24">
  <block pos:line="174" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="175" pos:column="5">sfree<pos:position pos:line="175" pos:column="10"/></name> <argument_list pos:line="175" pos:column="11">(<argument><expr><name pos:line="175" pos:column="12">sockets<pos:position pos:line="175" pos:column="19"/></name></expr></argument>)<pos:position pos:line="175" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="21"/></expr_stmt>
    <return pos:line="176" pos:column="5">return <expr><operator pos:line="176" pos:column="12">(<pos:position pos:line="176" pos:column="13"/></operator><operator pos:line="176" pos:column="13">-<pos:position pos:line="176" pos:column="14"/></operator><literal type="number" pos:line="176" pos:column="14">1<pos:position pos:line="176" pos:column="15"/></literal><operator pos:line="176" pos:column="15">)<pos:position pos:line="176" pos:column="16"/></operator></expr>;<pos:position pos:line="176" pos:column="17"/></return>
  }<pos:position pos:line="177" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="179" pos:column="3">*<pos:position pos:line="179" pos:column="4"/></operator><name pos:line="179" pos:column="4">ret_sockets<pos:position pos:line="179" pos:column="15"/></name> <operator pos:line="179" pos:column="16">=<pos:position pos:line="179" pos:column="17"/></operator> <name pos:line="179" pos:column="18">sockets<pos:position pos:line="179" pos:column="25"/></name></expr>;<pos:position pos:line="179" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="180" pos:column="3">*<pos:position pos:line="180" pos:column="4"/></operator><name pos:line="180" pos:column="4">ret_sockets_num<pos:position pos:line="180" pos:column="19"/></name> <operator pos:line="180" pos:column="20">=<pos:position pos:line="180" pos:column="21"/></operator> <name pos:line="180" pos:column="22">sockets_num<pos:position pos:line="180" pos:column="33"/></name></expr>;<pos:position pos:line="180" pos:column="34"/></expr_stmt>
  <return pos:line="181" pos:column="3">return <expr><operator pos:line="181" pos:column="10">(<pos:position pos:line="181" pos:column="11"/></operator><literal type="number" pos:line="181" pos:column="11">0<pos:position pos:line="181" pos:column="12"/></literal><operator pos:line="181" pos:column="12">)<pos:position pos:line="181" pos:column="13"/></operator></expr>;<pos:position pos:line="181" pos:column="14"/></return>
}<pos:position pos:line="182" pos:column="2"/></block></function></unit>
