<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_356_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_read_body<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">camqp_config_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
        <parameter><decl><type><name pos:line="2" pos:column="9">size_t<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">body_size<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">content_type<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">body<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">body_size<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">+<pos:position pos:line="4" pos:column="26"/></operator> <literal type="number" pos:line="4" pos:column="27">1<pos:position pos:line="4" pos:column="28"/></literal></expr>]<pos:position pos:line="4" pos:column="29"/></index></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">body_ptr<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">received<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">amqp_frame_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">frame<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">status<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">memset<pos:position pos:line="10" pos:column="11"/></name> <argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">body<pos:position pos:line="10" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="22">sizeof <argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">body<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">body_ptr<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <operator pos:line="11" pos:column="16">&amp;<pos:position pos:line="11" pos:column="21"/></operator><name><name pos:line="11" pos:column="17">body<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><literal type="number" pos:line="11" pos:column="22">0<pos:position pos:line="11" pos:column="23"/></literal></expr>]<pos:position pos:line="11" pos:column="24"/></index></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">received<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>

    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><name pos:line="14" pos:column="12">received<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&lt;<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="23">body_size<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition>
    <block pos:line="15" pos:column="5">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">status<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">amqp_simple_wait_frame<pos:position pos:line="16" pos:column="40"/></name> <argument_list pos:line="16" pos:column="41">(<argument><expr><name><name pos:line="16" pos:column="42">conf<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">connection<pos:position pos:line="16" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="60">&amp;<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="61">frame<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">status<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">&lt;<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24">
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">char<pos:position pos:line="19" pos:column="17"/></name></type> <name><name pos:line="19" pos:column="18">errbuf<pos:position pos:line="19" pos:column="24"/></name><index pos:line="19" pos:column="24">[<expr><literal type="number" pos:line="19" pos:column="25">1024<pos:position pos:line="19" pos:column="29"/></literal></expr>]<pos:position pos:line="19" pos:column="30"/></index></name></decl>;<pos:position pos:line="19" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <operator pos:line="20" pos:column="22">(<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">-<pos:position pos:line="20" pos:column="24"/></operator><literal type="number" pos:line="20" pos:column="24">1<pos:position pos:line="20" pos:column="25"/></literal><operator pos:line="20" pos:column="25">)<pos:position pos:line="20" pos:column="26"/></operator> <operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">status<pos:position pos:line="20" pos:column="35"/></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">ERROR<pos:position pos:line="21" pos:column="18"/></name> <argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="string" pos:line="21" pos:column="20">"amqp plugin: amqp_simple_wait_frame failed: %s"<pos:position pos:line="21" pos:column="68"/></literal></expr></argument>,
                    <argument><expr><call><name pos:line="22" pos:column="21">sstrerror<pos:position pos:line="22" pos:column="30"/></name> <argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">status<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">errbuf<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="48">sizeof <argument_list pos:line="22" pos:column="55">(<argument><expr><name pos:line="22" pos:column="56">errbuf<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">camqp_close_connection<pos:position pos:line="23" pos:column="35"/></name> <argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">conf<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
            <return pos:line="24" pos:column="13">return <expr><operator pos:line="24" pos:column="20">(<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">status<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">)<pos:position pos:line="24" pos:column="28"/></operator></expr>;<pos:position pos:line="24" pos:column="29"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name><name pos:line="27" pos:column="13">frame<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">frame_type<pos:position pos:line="27" pos:column="29"/></name></name> <operator pos:line="27" pos:column="30">!=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">AMQP_FRAME_BODY<pos:position pos:line="27" pos:column="48"/></name></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49">
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">NOTICE<pos:position pos:line="29" pos:column="19"/></name> <argument_list pos:line="29" pos:column="20">(<argument><expr><literal type="string" pos:line="29" pos:column="21">"amqp plugin: Unexpected frame type: %#"<pos:position pos:line="29" pos:column="61"/></literal><name pos:line="29" pos:column="61">PRIx8<pos:position pos:line="29" pos:column="66"/></name></expr></argument>,
                    <argument><expr><name><name pos:line="30" pos:column="21">frame<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">frame_type<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
            <return pos:line="31" pos:column="13">return <expr><operator pos:line="31" pos:column="20">(<pos:position pos:line="31" pos:column="21"/></operator><operator pos:line="31" pos:column="21">-<pos:position pos:line="31" pos:column="22"/></operator><literal type="number" pos:line="31" pos:column="22">1<pos:position pos:line="31" pos:column="23"/></literal><operator pos:line="31" pos:column="23">)<pos:position pos:line="31" pos:column="24"/></operator></expr>;<pos:position pos:line="31" pos:column="25"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">(<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">body_size<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">-<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">received<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">)<pos:position pos:line="34" pos:column="35"/></operator> <operator pos:line="34" pos:column="36">&lt;<pos:position pos:line="34" pos:column="40"/></operator> <name><name pos:line="34" pos:column="38">frame<pos:position pos:line="34" pos:column="43"/></name><operator pos:line="34" pos:column="43">.<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="44">payload<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">.<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">body_fragment<pos:position pos:line="34" pos:column="65"/></name><operator pos:line="34" pos:column="65">.<pos:position pos:line="34" pos:column="66"/></operator><name pos:line="34" pos:column="66">len<pos:position pos:line="34" pos:column="69"/></name></name></expr>)<pos:position pos:line="34" pos:column="70"/></condition><then pos:line="34" pos:column="70">
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">WARNING<pos:position pos:line="36" pos:column="20"/></name> <argument_list pos:line="36" pos:column="21">(<argument><expr><literal type="string" pos:line="36" pos:column="22">"amqp plugin: Body is larger than indicated by header."<pos:position pos:line="36" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt>
            <return pos:line="37" pos:column="13">return <expr><operator pos:line="37" pos:column="20">(<pos:position pos:line="37" pos:column="21"/></operator><operator pos:line="37" pos:column="21">-<pos:position pos:line="37" pos:column="22"/></operator><literal type="number" pos:line="37" pos:column="22">1<pos:position pos:line="37" pos:column="23"/></literal><operator pos:line="37" pos:column="23">)<pos:position pos:line="37" pos:column="24"/></operator></expr>;<pos:position pos:line="37" pos:column="25"/></return>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="40" pos:column="9">memcpy<pos:position pos:line="40" pos:column="15"/></name> <argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">body_ptr<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="27">frame<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">.<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="33">payload<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">.<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="41">body_fragment<pos:position pos:line="40" pos:column="54"/></name><operator pos:line="40" pos:column="54">.<pos:position pos:line="40" pos:column="55"/></operator><name pos:line="40" pos:column="55">bytes<pos:position pos:line="40" pos:column="60"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="41" pos:column="17">frame<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">payload<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">.<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="31">body_fragment<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">.<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="45">len<pos:position pos:line="41" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="42" pos:column="9">body_ptr<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">+=<pos:position pos:line="42" pos:column="20"/></operator> <name><name pos:line="42" pos:column="21">frame<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">.<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">payload<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">.<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="35">body_fragment<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">.<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">len<pos:position pos:line="42" pos:column="52"/></name></name></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">received<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">+=<pos:position pos:line="43" pos:column="20"/></operator> <name><name pos:line="43" pos:column="21">frame<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">payload<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">.<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="35">body_fragment<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">.<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">len<pos:position pos:line="43" pos:column="52"/></name></name></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></while> <comment type="block" pos:line="44" pos:column="7">/* while (received &lt; body_size) */</comment>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">strcasecmp<pos:position pos:line="46" pos:column="19"/></name> <argument_list pos:line="46" pos:column="20">(<argument><expr><literal type="string" pos:line="46" pos:column="21">"text/collectd"<pos:position pos:line="46" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="38">content_type<pos:position pos:line="46" pos:column="50"/></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call> <operator pos:line="46" pos:column="52">==<pos:position pos:line="46" pos:column="54"/></operator> <literal type="number" pos:line="46" pos:column="55">0<pos:position pos:line="46" pos:column="56"/></literal></expr>)<pos:position pos:line="46" pos:column="57"/></condition><then pos:line="46" pos:column="57">
    <block pos:line="47" pos:column="5">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">status<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <call><name pos:line="48" pos:column="18">handle_putval<pos:position pos:line="48" pos:column="31"/></name> <argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">stderr<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="41">body<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">status<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">!=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="number" pos:line="49" pos:column="23">0<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="13">ERROR<pos:position pos:line="50" pos:column="18"/></name> <argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="string" pos:line="50" pos:column="20">"amqp plugin: handle_putval failed with status %i."<pos:position pos:line="50" pos:column="71"/></literal></expr></argument>,
                    <argument><expr><name pos:line="51" pos:column="21">status<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt></block></then></if>
        <return pos:line="52" pos:column="9">return <expr><operator pos:line="52" pos:column="16">(<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">status<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">)<pos:position pos:line="52" pos:column="24"/></operator></expr>;<pos:position pos:line="52" pos:column="25"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then>
    <elseif pos:line="54" pos:column="5">else <if pos:line="54" pos:column="10">if <condition pos:line="54" pos:column="13">(<expr><call><name pos:line="54" pos:column="14">strcasecmp<pos:position pos:line="54" pos:column="24"/></name> <argument_list pos:line="54" pos:column="25">(<argument><expr><literal type="string" pos:line="54" pos:column="26">"application/json"<pos:position pos:line="54" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">content_type<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call> <operator pos:line="54" pos:column="60">==<pos:position pos:line="54" pos:column="62"/></operator> <literal type="number" pos:line="54" pos:column="63">0<pos:position pos:line="54" pos:column="64"/></literal></expr>)<pos:position pos:line="54" pos:column="65"/></condition><then pos:line="54" pos:column="65">
    <block pos:line="55" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">ERROR<pos:position pos:line="56" pos:column="14"/></name> <argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="string" pos:line="56" pos:column="16">"amqp plugin: camqp_read_body: Parsing JSON data has not "<pos:position pos:line="56" pos:column="74"/></literal>
                <literal type="string" pos:line="57" pos:column="17">"been implemented yet. FIXME!"<pos:position pos:line="57" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
        <return pos:line="58" pos:column="9">return <expr><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><literal type="number" pos:line="58" pos:column="17">0<pos:position pos:line="58" pos:column="18"/></literal><operator pos:line="58" pos:column="18">)<pos:position pos:line="58" pos:column="19"/></operator></expr>;<pos:position pos:line="58" pos:column="20"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if></elseif>
    <else pos:line="60" pos:column="5">else
    <block pos:line="61" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">ERROR<pos:position pos:line="62" pos:column="14"/></name> <argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="string" pos:line="62" pos:column="16">"amqp plugin: camqp_read_body: Unknown content type \"%s\"."<pos:position pos:line="62" pos:column="76"/></literal></expr></argument>,
                <argument><expr><name pos:line="63" pos:column="17">content_type<pos:position pos:line="63" pos:column="29"/></name></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
        <return pos:line="64" pos:column="9">return <expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">EINVAL<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">)<pos:position pos:line="64" pos:column="24"/></operator></expr>;<pos:position pos:line="64" pos:column="25"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="67" pos:column="5">/* not reached */</comment>
    <return pos:line="68" pos:column="5">return <expr><operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator><literal type="number" pos:line="68" pos:column="13">0<pos:position pos:line="68" pos:column="14"/></literal><operator pos:line="68" pos:column="14">)<pos:position pos:line="68" pos:column="15"/></operator></expr>;<pos:position pos:line="68" pos:column="16"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
