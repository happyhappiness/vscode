<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1485_collectd-4.10.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">meta_data_type<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">meta_data_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">md<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">key<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">meta_entry_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">e<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">md<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <name pos:line="5" pos:column="14">NULL<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">)<pos:position pos:line="5" pos:column="19"/></operator> <operator pos:line="5" pos:column="20">||<pos:position pos:line="5" pos:column="22"/></operator> <operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">key<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">)<pos:position pos:line="5" pos:column="36"/></operator></expr>)<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">EINVAL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name><name pos:line="8" pos:column="24">md<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">lock<pos:position pos:line="8" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><expr><name pos:line="10" pos:column="8">e<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name><name pos:line="10" pos:column="12">md<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">head<pos:position pos:line="10" pos:column="20"/></name></name></expr>;<pos:position pos:line="10" pos:column="21"/></init> <condition><expr><name pos:line="10" pos:column="22">e<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">!=<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">NULL<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></condition> <incr><expr><name pos:line="10" pos:column="33">e<pos:position pos:line="10" pos:column="34"/></name> <operator pos:line="10" pos:column="35">=<pos:position pos:line="10" pos:column="36"/></operator> <name><name pos:line="10" pos:column="37">e<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">-&gt;<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="40">next<pos:position pos:line="10" pos:column="44"/></name></name></expr></incr>)<pos:position pos:line="10" pos:column="45"/></control>
  <block pos:line="11" pos:column="3">{
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">strcasecmp<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">key<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="26">e<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-&gt;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="29">key<pos:position pos:line="12" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call> <operator pos:line="12" pos:column="34">==<pos:position pos:line="12" pos:column="36"/></operator> <literal type="number" pos:line="12" pos:column="37">0<pos:position pos:line="12" pos:column="38"/></literal></expr>)<pos:position pos:line="12" pos:column="39"/></condition><then pos:line="12" pos:column="39">
    <block pos:line="13" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">pthread_mutex_unlock<pos:position pos:line="14" pos:column="27"/></name> <argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name><name pos:line="14" pos:column="30">md<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">lock<pos:position pos:line="14" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><name><name pos:line="15" pos:column="14">e<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">type<pos:position pos:line="15" pos:column="21"/></name></name></expr>;<pos:position pos:line="15" pos:column="22"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
  }<pos:position pos:line="17" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">pthread_mutex_unlock<pos:position pos:line="19" pos:column="23"/></name> <argument_list pos:line="19" pos:column="24">(<argument><expr><operator pos:line="19" pos:column="25">&amp;<pos:position pos:line="19" pos:column="30"/></operator><name><name pos:line="19" pos:column="26">md<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">lock<pos:position pos:line="19" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
  <return pos:line="20" pos:column="3">return <expr><literal type="number" pos:line="20" pos:column="10">0<pos:position pos:line="20" pos:column="11"/></literal></expr>;<pos:position pos:line="20" pos:column="12"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
