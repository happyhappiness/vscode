<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2502_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">sstrdup<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">s<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list> <block pos:line="1" pos:column="30">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">r<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">sz<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">s<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">==<pos:position pos:line="5" pos:column="11"/></operator> <name pos:line="5" pos:column="12">NULL<pos:position pos:line="5" pos:column="16"/></name></expr>)<pos:position pos:line="5" pos:column="17"/></condition><then pos:line="5" pos:column="17">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">)<pos:position pos:line="6" pos:column="18"/></operator></expr>;<pos:position pos:line="6" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/* Do not use `strdup' here, because it's not specified in POSIX. It's
   * ``only'' an XSI extension. */</comment>
  <expr_stmt><expr><name pos:line="10" pos:column="3">sz<pos:position pos:line="10" pos:column="5"/></name> <operator pos:line="10" pos:column="6">=<pos:position pos:line="10" pos:column="7"/></operator> <call><name pos:line="10" pos:column="8">strlen<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">s<pos:position pos:line="10" pos:column="16"/></name></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call> <operator pos:line="10" pos:column="18">+<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="20">1<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">r<pos:position pos:line="11" pos:column="4"/></name> <operator pos:line="11" pos:column="5">=<pos:position pos:line="11" pos:column="6"/></operator> <call><name pos:line="11" pos:column="7">malloc<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">sz<pos:position pos:line="11" pos:column="16"/></name></expr></argument>)<pos:position pos:line="11" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">r<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">==<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17"> <block pos:line="12" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"sstrdup: Out of memory."<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">exit<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><literal type="number" pos:line="14" pos:column="10">3<pos:position pos:line="14" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">memcpy<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><name pos:line="16" pos:column="10">r<pos:position pos:line="16" pos:column="11"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="13">s<pos:position pos:line="16" pos:column="14"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="16">sizeof<argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></sizeof> <operator pos:line="16" pos:column="29">*<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">sz<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

  <return pos:line="18" pos:column="3">return <expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">r<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">)<pos:position pos:line="18" pos:column="13"/></operator></expr>;<pos:position pos:line="18" pos:column="14"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
