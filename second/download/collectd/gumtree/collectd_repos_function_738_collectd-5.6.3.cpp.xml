<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_738_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ignore_list_add_name<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">name<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">addrinfo<pos:position pos:line="2" pos:column="18"/></name></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">ai_list<pos:position pos:line="2" pos:column="27"/></name></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">in6_addr<pos:position pos:line="3" pos:column="18"/></name></name></type> <name pos:line="3" pos:column="19">addr<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">status<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <call><name pos:line="6" pos:column="12">getaddrinfo<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">name<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="36">NULL<pos:position pos:line="6" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="42">&amp;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="43">ai_list<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">!=<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19">
    <block type="pseudo"><return pos:line="8" pos:column="5">return;<pos:position pos:line="8" pos:column="12"/></return></block></then></if>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><decl><type><name><name pos:line="10" pos:column="8">struct<pos:position pos:line="10" pos:column="14"/></name> <name pos:line="10" pos:column="15">addrinfo<pos:position pos:line="10" pos:column="23"/></name></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier><name pos:line="10" pos:column="25">ai_ptr<pos:position pos:line="10" pos:column="31"/></name></type> <init pos:line="10" pos:column="32">= <expr><name pos:line="10" pos:column="34">ai_list<pos:position pos:line="10" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></init> <condition><expr><name pos:line="10" pos:column="43">ai_ptr<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">!=<pos:position pos:line="10" pos:column="52"/></operator> <name pos:line="10" pos:column="53">NULL<pos:position pos:line="10" pos:column="57"/></name></expr>;<pos:position pos:line="10" pos:column="58"/></condition>
       <incr><expr><name pos:line="11" pos:column="8">ai_ptr<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name><name pos:line="11" pos:column="17">ai_ptr<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">ai_next<pos:position pos:line="11" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="11" pos:column="33"/></control> <block pos:line="11" pos:column="34">{
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">ai_ptr<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">ai_family<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">==<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">AF_INET<pos:position pos:line="12" pos:column="37"/></name></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38"> <block pos:line="12" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">memset<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><operator pos:line="13" pos:column="14">&amp;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="15">addr<pos:position pos:line="13" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="21">'\0'<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="27">sizeof<argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">addr<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="14" pos:column="7">addr<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">s6_addr<pos:position pos:line="14" pos:column="19"/></name><index pos:line="14" pos:column="19">[<expr><literal type="number" pos:line="14" pos:column="20">10<pos:position pos:line="14" pos:column="22"/></literal></expr>]<pos:position pos:line="14" pos:column="23"/></index></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="26">0xFF<pos:position pos:line="14" pos:column="30"/></literal></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="15" pos:column="7">addr<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">s6_addr<pos:position pos:line="15" pos:column="19"/></name><index pos:line="15" pos:column="19">[<expr><literal type="number" pos:line="15" pos:column="20">11<pos:position pos:line="15" pos:column="22"/></literal></expr>]<pos:position pos:line="15" pos:column="23"/></index></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="26">0xFF<pos:position pos:line="15" pos:column="30"/></literal></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">memcpy<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name><name pos:line="16" pos:column="14">addr<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">s6_addr<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">+<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="29">12<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>,
             <argument><expr><operator pos:line="17" pos:column="14">&amp;<pos:position pos:line="17" pos:column="19"/></operator><operator pos:line="17" pos:column="15">(<pos:position pos:line="17" pos:column="16"/></operator><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator>struct <name pos:line="17" pos:column="24">sockaddr_in<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">*<pos:position pos:line="17" pos:column="37"/></operator><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator><name><name pos:line="17" pos:column="38">ai_ptr<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">-&gt;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="46">ai_addr<pos:position pos:line="17" pos:column="53"/></name></name><operator pos:line="17" pos:column="53">)<pos:position pos:line="17" pos:column="54"/></operator><operator pos:line="17" pos:column="54">-&gt;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="56">sin_addr<pos:position pos:line="17" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="66">4<pos:position pos:line="17" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="19" pos:column="7">ignore_list_add<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><operator pos:line="19" pos:column="23">&amp;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="24">addr<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">ignore_list_add<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><operator pos:line="21" pos:column="23">&amp;<pos:position pos:line="21" pos:column="28"/></operator><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator>struct <name pos:line="21" pos:column="33">sockaddr_in6<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">*<pos:position pos:line="21" pos:column="47"/></operator><operator pos:line="21" pos:column="47">)<pos:position pos:line="21" pos:column="48"/></operator><name><name pos:line="21" pos:column="48">ai_ptr<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">-&gt;<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="56">ai_addr<pos:position pos:line="21" pos:column="63"/></name></name><operator pos:line="21" pos:column="63">)<pos:position pos:line="21" pos:column="64"/></operator><operator pos:line="21" pos:column="64">-&gt;<pos:position pos:line="21" pos:column="69"/></operator><name pos:line="21" pos:column="66">sin6_addr<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>
  }<pos:position pos:line="23" pos:column="4"/></block></for> <comment type="block" pos:line="23" pos:column="5">/* for */</comment>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">freeaddrinfo<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">ai_list<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
