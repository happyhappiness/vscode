<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_843_collectd-4.5.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_shutdown<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">listen_loop<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">++<pos:position pos:line="3" pos:column="22"/></operator></expr>;<pos:position pos:line="3" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* Kill the listening thread */</comment>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">receive_thread_id<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">!=<pos:position pos:line="6" pos:column="33"/></operator> <operator pos:line="6" pos:column="34">(<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="35">pthread_t<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">)<pos:position pos:line="6" pos:column="45"/></operator> <literal type="number" pos:line="6" pos:column="46">0<pos:position pos:line="6" pos:column="47"/></literal></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">pthread_kill<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">receive_thread_id<pos:position pos:line="8" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="50">SIGTERM<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">pthread_join<pos:position pos:line="9" pos:column="29"/></name> <argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">receive_thread_id<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">NULL<pos:position pos:line="9" pos:column="54"/></name></expr></argument> <comment type="block" pos:line="9" pos:column="55">/* no return value */</comment>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">receive_thread_id<pos:position pos:line="10" pos:column="34"/></name> <operator pos:line="10" pos:column="35">=<pos:position pos:line="10" pos:column="36"/></operator> <operator pos:line="10" pos:column="37">(<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">pthread_t<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">)<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="49">0<pos:position pos:line="10" pos:column="50"/></literal></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* Shutdown the dispatching thread */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">dispatch_thread_id<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">!=<pos:position pos:line="14" pos:column="34"/></operator> <operator pos:line="14" pos:column="35">(<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">pthread_t<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">)<pos:position pos:line="14" pos:column="46"/></operator> <literal type="number" pos:line="14" pos:column="47">0<pos:position pos:line="14" pos:column="48"/></literal></expr>)<pos:position pos:line="14" pos:column="49"/></condition><then pos:line="14" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">pthread_cond_broadcast<pos:position pos:line="15" pos:column="39"/></name> <argument_list pos:line="15" pos:column="40">(<argument><expr><operator pos:line="15" pos:column="41">&amp;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="42">receive_list_cond<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">send_buffer_fill<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">&gt;<pos:position pos:line="17" pos:column="34"/></operator> <literal type="number" pos:line="17" pos:column="32">0<pos:position pos:line="17" pos:column="33"/></literal></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">flush_buffer<pos:position pos:line="18" pos:column="29"/></name> <argument_list pos:line="18" pos:column="30">()<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">cache_tree<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">!=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">NULL<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32">
	<block pos:line="21" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">void<pos:position pos:line="22" pos:column="21"/></name> <modifier pos:line="22" pos:column="22">*<pos:position pos:line="22" pos:column="23"/></modifier></type><name pos:line="22" pos:column="23">key<pos:position pos:line="22" pos:column="26"/></name></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">void<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier></type><name pos:line="23" pos:column="23">value<pos:position pos:line="23" pos:column="28"/></name></decl>;<pos:position pos:line="23" pos:column="29"/></decl_stmt>

		<while pos:line="25" pos:column="17">while <condition pos:line="25" pos:column="23">(<expr><call><name pos:line="25" pos:column="24">c_avl_pick<pos:position pos:line="25" pos:column="34"/></name> <argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">cache_tree<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="48">&amp;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="49">key<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="55">value<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call> <operator pos:line="25" pos:column="62">==<pos:position pos:line="25" pos:column="64"/></operator> <literal type="number" pos:line="25" pos:column="65">0<pos:position pos:line="25" pos:column="66"/></literal></expr>)<pos:position pos:line="25" pos:column="67"/></condition>
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">sfree<pos:position pos:line="27" pos:column="30"/></name> <argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">key<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">sfree<pos:position pos:line="28" pos:column="30"/></name> <argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">value<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">c_avl_destroy<pos:position pos:line="30" pos:column="30"/></name> <argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">cache_tree<pos:position pos:line="30" pos:column="42"/></name></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">cache_tree<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">NULL<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/* TODO: Close `sending_sockets' */</comment>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">plugin_unregister_config<pos:position pos:line="36" pos:column="33"/></name> <argument_list pos:line="36" pos:column="34">(<argument><expr><literal type="string" pos:line="36" pos:column="35">"network"<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">plugin_unregister_init<pos:position pos:line="37" pos:column="31"/></name> <argument_list pos:line="37" pos:column="32">(<argument><expr><literal type="string" pos:line="37" pos:column="33">"network"<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">plugin_unregister_write<pos:position pos:line="38" pos:column="32"/></name> <argument_list pos:line="38" pos:column="33">(<argument><expr><literal type="string" pos:line="38" pos:column="34">"network"<pos:position pos:line="38" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">plugin_unregister_shutdown<pos:position pos:line="39" pos:column="35"/></name> <argument_list pos:line="39" pos:column="36">(<argument><expr><literal type="string" pos:line="39" pos:column="37">"network"<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="41" pos:column="9">/* Let the init function do it's move again ;) */</comment>
	<expr_stmt><expr><name pos:line="42" pos:column="9">cache_flush_last<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <literal type="number" pos:line="42" pos:column="28">0<pos:position pos:line="42" pos:column="29"/></literal></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>

	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">0<pos:position pos:line="44" pos:column="18"/></literal><operator pos:line="44" pos:column="18">)<pos:position pos:line="44" pos:column="19"/></operator></expr>;<pos:position pos:line="44" pos:column="20"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
