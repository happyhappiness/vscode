<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_571_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sensu_notification_to_json<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">sensu_host<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">host<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">notification_t<pos:position pos:line="2" pos:column="31"/></name> <specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">n<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">service_buffer<pos:position pos:line="4" pos:column="28"/></name><index pos:line="4" pos:column="28">[<expr><literal type="number" pos:line="4" pos:column="29">6<pos:position pos:line="4" pos:column="30"/></literal> <operator pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></operator> <name pos:line="4" pos:column="33">DATA_MAX_NAME_LEN<pos:position pos:line="4" pos:column="50"/></name></expr>]<pos:position pos:line="4" pos:column="51"/></index></name></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <specifier pos:line="5" pos:column="14">const<pos:position pos:line="5" pos:column="19"/></specifier> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">severity<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">notification_meta_t<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">meta<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">ret_str<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">temp_str<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">status<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">i<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">res<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
	<comment type="line" pos:line="12" pos:column="9">// add the severity/status</comment>
	<switch pos:line="13" pos:column="9">switch <condition pos:line="13" pos:column="16">(<expr><name><name pos:line="13" pos:column="17">n<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">severity<pos:position pos:line="13" pos:column="28"/></name></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition> <block pos:line="13" pos:column="30">{
		<case pos:line="14" pos:column="17">case <expr><name pos:line="14" pos:column="22">NOTIF_OKAY<pos:position pos:line="14" pos:column="32"/></name></expr>:<pos:position pos:line="14" pos:column="33"/></case>
			<expr_stmt><expr><name pos:line="15" pos:column="25">severity<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">=<pos:position pos:line="15" pos:column="35"/></operator> <literal type="string" pos:line="15" pos:column="36">"OK"<pos:position pos:line="15" pos:column="40"/></literal></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="16" pos:column="25">status<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">=<pos:position pos:line="16" pos:column="33"/></operator> <literal type="number" pos:line="16" pos:column="34">0<pos:position pos:line="16" pos:column="35"/></literal></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
			<break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break>
		<case pos:line="18" pos:column="17">case <expr><name pos:line="18" pos:column="22">NOTIF_WARNING<pos:position pos:line="18" pos:column="35"/></name></expr>:<pos:position pos:line="18" pos:column="36"/></case>
			<expr_stmt><expr><name pos:line="19" pos:column="25">severity<pos:position pos:line="19" pos:column="33"/></name> <operator pos:line="19" pos:column="34">=<pos:position pos:line="19" pos:column="35"/></operator> <literal type="string" pos:line="19" pos:column="36">"WARNING"<pos:position pos:line="19" pos:column="45"/></literal></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">status<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">=<pos:position pos:line="20" pos:column="33"/></operator> <literal type="number" pos:line="20" pos:column="34">1<pos:position pos:line="20" pos:column="35"/></literal></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
			<break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break>
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">NOTIF_FAILURE<pos:position pos:line="22" pos:column="35"/></name></expr>:<pos:position pos:line="22" pos:column="36"/></case>
			<expr_stmt><expr><name pos:line="23" pos:column="25">severity<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">=<pos:position pos:line="23" pos:column="35"/></operator> <literal type="string" pos:line="23" pos:column="36">"CRITICAL"<pos:position pos:line="23" pos:column="46"/></literal></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">status<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">2<pos:position pos:line="24" pos:column="35"/></literal></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
			<break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break>
		<default pos:line="26" pos:column="17">default:<pos:position pos:line="26" pos:column="25"/></default>
			<expr_stmt><expr><name pos:line="27" pos:column="25">severity<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <literal type="string" pos:line="27" pos:column="36">"UNKNOWN"<pos:position pos:line="27" pos:column="45"/></literal></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">status<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <literal type="number" pos:line="28" pos:column="34">3<pos:position pos:line="28" pos:column="35"/></literal></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></switch>
	<expr_stmt><expr><name pos:line="30" pos:column="9">res<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">asprintf<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">temp_str<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="35">"{\"status\": %d"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">status<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">res<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">==<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="20">-<pos:position pos:line="31" pos:column="21"/></operator><literal type="number" pos:line="31" pos:column="21">1<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23"> <block pos:line="31" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">ERROR<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><literal type="string" pos:line="32" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="32" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="69"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><name pos:line="33" pos:column="24">NULL<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="35" pos:column="9">ret_str<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">temp_str<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>

	<comment type="line" pos:line="37" pos:column="9">// incorporate the timestamp</comment>
	<expr_stmt><expr><name pos:line="38" pos:column="9">res<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">asprintf<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="25">temp_str<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="35">"%s, \"timestamp\": %ld"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="61">ret_str<pos:position pos:line="38" pos:column="68"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="70">CDTIME_T_TO_TIME_T<pos:position pos:line="38" pos:column="88"/></name><argument_list pos:line="38" pos:column="88">(<argument><expr><name><name pos:line="38" pos:column="89">n<pos:position pos:line="38" pos:column="90"/></name><operator pos:line="38" pos:column="90">-&gt;<pos:position pos:line="38" pos:column="95"/></operator><name pos:line="38" pos:column="92">time<pos:position pos:line="38" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="99"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">ret_str<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">res<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">==<pos:position pos:line="40" pos:column="19"/></operator> <operator pos:line="40" pos:column="20">-<pos:position pos:line="40" pos:column="21"/></operator><literal type="number" pos:line="40" pos:column="21">1<pos:position pos:line="40" pos:column="22"/></literal></expr>)<pos:position pos:line="40" pos:column="23"/></condition><then pos:line="40" pos:column="23"> <block pos:line="40" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">ERROR<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><literal type="string" pos:line="41" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="41" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="69"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="44" pos:column="9">ret_str<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">temp_str<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>

	<decl_stmt><decl><type><name pos:line="46" pos:column="9">char<pos:position pos:line="46" pos:column="13"/></name> <modifier pos:line="46" pos:column="14">*<pos:position pos:line="46" pos:column="15"/></modifier></type><name pos:line="46" pos:column="15">handlers_str<pos:position pos:line="46" pos:column="27"/></name> <init pos:line="46" pos:column="28">= <expr><call><name pos:line="46" pos:column="30">build_json_str_list<pos:position pos:line="46" pos:column="49"/></name><argument_list pos:line="46" pos:column="49">(<argument><expr><literal type="string" pos:line="46" pos:column="50">"handlers"<pos:position pos:line="46" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="62">&amp;<pos:position pos:line="46" pos:column="67"/></operator><operator pos:line="46" pos:column="63">(<pos:position pos:line="46" pos:column="64"/></operator><name><name pos:line="46" pos:column="64">host<pos:position pos:line="46" pos:column="68"/></name><operator pos:line="46" pos:column="68">-&gt;<pos:position pos:line="46" pos:column="73"/></operator><name pos:line="46" pos:column="70">notification_handlers<pos:position pos:line="46" pos:column="91"/></name></name><operator pos:line="46" pos:column="91">)<pos:position pos:line="46" pos:column="92"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="94"/></decl_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">handlers_str<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">==<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">NULL<pos:position pos:line="47" pos:column="33"/></name></expr>)<pos:position pos:line="47" pos:column="34"/></condition><then pos:line="47" pos:column="34"> <block pos:line="47" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">ERROR<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><literal type="string" pos:line="48" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="48" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">free<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">ret_str<pos:position pos:line="49" pos:column="29"/></name></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
		<return pos:line="50" pos:column="17">return <expr><name pos:line="50" pos:column="24">NULL<pos:position pos:line="50" pos:column="28"/></name></expr>;<pos:position pos:line="50" pos:column="29"/></return>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<comment type="line" pos:line="52" pos:column="9">// incorporate the handlers</comment>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><call><name pos:line="53" pos:column="13">strlen<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">handlers_str<pos:position pos:line="53" pos:column="32"/></name></expr></argument>)<pos:position pos:line="53" pos:column="33"/></argument_list></call> <operator pos:line="53" pos:column="34">!=<pos:position pos:line="53" pos:column="36"/></operator> <literal type="number" pos:line="53" pos:column="37">0<pos:position pos:line="53" pos:column="38"/></literal></expr>)<pos:position pos:line="53" pos:column="39"/></condition><then pos:line="53" pos:column="39"> <block pos:line="53" pos:column="40">{
		<expr_stmt><expr><name pos:line="54" pos:column="17">res<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <call><name pos:line="54" pos:column="23">asprintf<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><operator pos:line="54" pos:column="32">&amp;<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="33">temp_str<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="43">"%s, %s"<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">ret_str<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">handlers_str<pos:position pos:line="54" pos:column="74"/></name></expr></argument>)<pos:position pos:line="54" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">free<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">ret_str<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">free<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">handlers_str<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">res<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">==<pos:position pos:line="57" pos:column="27"/></operator> <operator pos:line="57" pos:column="28">-<pos:position pos:line="57" pos:column="29"/></operator><literal type="number" pos:line="57" pos:column="29">1<pos:position pos:line="57" pos:column="30"/></literal></expr>)<pos:position pos:line="57" pos:column="31"/></condition><then pos:line="57" pos:column="31"> <block pos:line="57" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">ERROR<pos:position pos:line="58" pos:column="30"/></name><argument_list pos:line="58" pos:column="30">(<argument><expr><literal type="string" pos:line="58" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="58" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="77"/></expr_stmt>
			<return pos:line="59" pos:column="25">return <expr><name pos:line="59" pos:column="32">NULL<pos:position pos:line="59" pos:column="36"/></name></expr>;<pos:position pos:line="59" pos:column="37"/></return>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="61" pos:column="17">ret_str<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">=<pos:position pos:line="61" pos:column="26"/></operator> <name pos:line="61" pos:column="27">temp_str<pos:position pos:line="61" pos:column="35"/></name></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then> <else pos:line="62" pos:column="11">else <block pos:line="62" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">free<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">handlers_str<pos:position pos:line="63" pos:column="34"/></name></expr></argument>)<pos:position pos:line="63" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></else></if>

	<comment type="line" pos:line="66" pos:column="9">// incorporate the plugin name information if any</comment>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name><name pos:line="67" pos:column="13">n<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">-&gt;<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="16">plugin<pos:position pos:line="67" pos:column="22"/></name><index pos:line="67" pos:column="22">[<expr><literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>]<pos:position pos:line="67" pos:column="25"/></index></name> <operator pos:line="67" pos:column="26">!=<pos:position pos:line="67" pos:column="28"/></operator> <literal type="number" pos:line="67" pos:column="29">0<pos:position pos:line="67" pos:column="30"/></literal></expr>)<pos:position pos:line="67" pos:column="31"/></condition><then pos:line="67" pos:column="31"> <block pos:line="67" pos:column="32">{
		<expr_stmt><expr><name pos:line="68" pos:column="17">res<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <call><name pos:line="68" pos:column="23">asprintf<pos:position pos:line="68" pos:column="31"/></name><argument_list pos:line="68" pos:column="31">(<argument><expr><operator pos:line="68" pos:column="32">&amp;<pos:position pos:line="68" pos:column="37"/></operator><name pos:line="68" pos:column="33">temp_str<pos:position pos:line="68" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="43">"%s, \"collectd_plugin\": \"%s\""<pos:position pos:line="68" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="78">ret_str<pos:position pos:line="68" pos:column="85"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="87">n<pos:position pos:line="68" pos:column="88"/></name><operator pos:line="68" pos:column="88">-&gt;<pos:position pos:line="68" pos:column="93"/></operator><name pos:line="68" pos:column="90">plugin<pos:position pos:line="68" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="98"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">free<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><name pos:line="69" pos:column="22">ret_str<pos:position pos:line="69" pos:column="29"/></name></expr></argument>)<pos:position pos:line="69" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="31"/></expr_stmt>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name pos:line="70" pos:column="21">res<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">==<pos:position pos:line="70" pos:column="27"/></operator> <operator pos:line="70" pos:column="28">-<pos:position pos:line="70" pos:column="29"/></operator><literal type="number" pos:line="70" pos:column="29">1<pos:position pos:line="70" pos:column="30"/></literal></expr>)<pos:position pos:line="70" pos:column="31"/></condition><then pos:line="70" pos:column="31"> <block pos:line="70" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">ERROR<pos:position pos:line="71" pos:column="30"/></name><argument_list pos:line="71" pos:column="30">(<argument><expr><literal type="string" pos:line="71" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="71" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="77"/></expr_stmt>
			<return pos:line="72" pos:column="25">return <expr><name pos:line="72" pos:column="32">NULL<pos:position pos:line="72" pos:column="36"/></name></expr>;<pos:position pos:line="72" pos:column="37"/></return>
		}<pos:position pos:line="73" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="74" pos:column="17">ret_str<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <name pos:line="74" pos:column="27">temp_str<pos:position pos:line="74" pos:column="35"/></name></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="77" pos:column="9">// incorporate the plugin type if any</comment>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name><name pos:line="78" pos:column="13">n<pos:position pos:line="78" pos:column="14"/></name><operator pos:line="78" pos:column="14">-&gt;<pos:position pos:line="78" pos:column="19"/></operator><name pos:line="78" pos:column="16">type<pos:position pos:line="78" pos:column="20"/></name><index pos:line="78" pos:column="20">[<expr><literal type="number" pos:line="78" pos:column="21">0<pos:position pos:line="78" pos:column="22"/></literal></expr>]<pos:position pos:line="78" pos:column="23"/></index></name> <operator pos:line="78" pos:column="24">!=<pos:position pos:line="78" pos:column="26"/></operator> <literal type="number" pos:line="78" pos:column="27">0<pos:position pos:line="78" pos:column="28"/></literal></expr>)<pos:position pos:line="78" pos:column="29"/></condition><then pos:line="78" pos:column="29"> <block pos:line="78" pos:column="30">{
		<expr_stmt><expr><name pos:line="79" pos:column="17">res<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">=<pos:position pos:line="79" pos:column="22"/></operator> <call><name pos:line="79" pos:column="23">asprintf<pos:position pos:line="79" pos:column="31"/></name><argument_list pos:line="79" pos:column="31">(<argument><expr><operator pos:line="79" pos:column="32">&amp;<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="33">temp_str<pos:position pos:line="79" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="43">"%s, \"collectd_plugin_type\": \"%s\""<pos:position pos:line="79" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="83">ret_str<pos:position pos:line="79" pos:column="90"/></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="92">n<pos:position pos:line="79" pos:column="93"/></name><operator pos:line="79" pos:column="93">-&gt;<pos:position pos:line="79" pos:column="98"/></operator><name pos:line="79" pos:column="95">type<pos:position pos:line="79" pos:column="99"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="101"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">free<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">ret_str<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">res<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">==<pos:position pos:line="81" pos:column="27"/></operator> <operator pos:line="81" pos:column="28">-<pos:position pos:line="81" pos:column="29"/></operator><literal type="number" pos:line="81" pos:column="29">1<pos:position pos:line="81" pos:column="30"/></literal></expr>)<pos:position pos:line="81" pos:column="31"/></condition><then pos:line="81" pos:column="31"> <block pos:line="81" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">ERROR<pos:position pos:line="82" pos:column="30"/></name><argument_list pos:line="82" pos:column="30">(<argument><expr><literal type="string" pos:line="82" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="82" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="77"/></expr_stmt>
			<return pos:line="83" pos:column="25">return <expr><name pos:line="83" pos:column="32">NULL<pos:position pos:line="83" pos:column="36"/></name></expr>;<pos:position pos:line="83" pos:column="37"/></return>
		}<pos:position pos:line="84" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="85" pos:column="17">ret_str<pos:position pos:line="85" pos:column="24"/></name> <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="27">temp_str<pos:position pos:line="85" pos:column="35"/></name></expr>;<pos:position pos:line="85" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="88" pos:column="9">// incorporate the plugin instance if any</comment>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name><name pos:line="89" pos:column="13">n<pos:position pos:line="89" pos:column="14"/></name><operator pos:line="89" pos:column="14">-&gt;<pos:position pos:line="89" pos:column="19"/></operator><name pos:line="89" pos:column="16">plugin_instance<pos:position pos:line="89" pos:column="31"/></name><index pos:line="89" pos:column="31">[<expr><literal type="number" pos:line="89" pos:column="32">0<pos:position pos:line="89" pos:column="33"/></literal></expr>]<pos:position pos:line="89" pos:column="34"/></index></name> <operator pos:line="89" pos:column="35">!=<pos:position pos:line="89" pos:column="37"/></operator> <literal type="number" pos:line="89" pos:column="38">0<pos:position pos:line="89" pos:column="39"/></literal></expr>)<pos:position pos:line="89" pos:column="40"/></condition><then pos:line="89" pos:column="40"> <block pos:line="89" pos:column="41">{
		<expr_stmt><expr><name pos:line="90" pos:column="17">res<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <call><name pos:line="90" pos:column="23">asprintf<pos:position pos:line="90" pos:column="31"/></name><argument_list pos:line="90" pos:column="31">(<argument><expr><operator pos:line="90" pos:column="32">&amp;<pos:position pos:line="90" pos:column="37"/></operator><name pos:line="90" pos:column="33">temp_str<pos:position pos:line="90" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="43">"%s, \"collectd_plugin_instance\": \"%s\""<pos:position pos:line="90" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="87">ret_str<pos:position pos:line="90" pos:column="94"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="96">n<pos:position pos:line="90" pos:column="97"/></name><operator pos:line="90" pos:column="97">-&gt;<pos:position pos:line="90" pos:column="102"/></operator><name pos:line="90" pos:column="99">plugin_instance<pos:position pos:line="90" pos:column="114"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="116"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">free<pos:position pos:line="91" pos:column="21"/></name><argument_list pos:line="91" pos:column="21">(<argument><expr><name pos:line="91" pos:column="22">ret_str<pos:position pos:line="91" pos:column="29"/></name></expr></argument>)<pos:position pos:line="91" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="31"/></expr_stmt>
		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">res<pos:position pos:line="92" pos:column="24"/></name> <operator pos:line="92" pos:column="25">==<pos:position pos:line="92" pos:column="27"/></operator> <operator pos:line="92" pos:column="28">-<pos:position pos:line="92" pos:column="29"/></operator><literal type="number" pos:line="92" pos:column="29">1<pos:position pos:line="92" pos:column="30"/></literal></expr>)<pos:position pos:line="92" pos:column="31"/></condition><then pos:line="92" pos:column="31"> <block pos:line="92" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">ERROR<pos:position pos:line="93" pos:column="30"/></name><argument_list pos:line="93" pos:column="30">(<argument><expr><literal type="string" pos:line="93" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="93" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="77"/></expr_stmt>
			<return pos:line="94" pos:column="25">return <expr><name pos:line="94" pos:column="32">NULL<pos:position pos:line="94" pos:column="36"/></name></expr>;<pos:position pos:line="94" pos:column="37"/></return>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="96" pos:column="17">ret_str<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">=<pos:position pos:line="96" pos:column="26"/></operator> <name pos:line="96" pos:column="27">temp_str<pos:position pos:line="96" pos:column="35"/></name></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="97" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="99" pos:column="9">// incorporate the plugin type instance if any</comment>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name><name pos:line="100" pos:column="13">n<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">type_instance<pos:position pos:line="100" pos:column="29"/></name><index pos:line="100" pos:column="29">[<expr><literal type="number" pos:line="100" pos:column="30">0<pos:position pos:line="100" pos:column="31"/></literal></expr>]<pos:position pos:line="100" pos:column="32"/></index></name> <operator pos:line="100" pos:column="33">!=<pos:position pos:line="100" pos:column="35"/></operator> <literal type="number" pos:line="100" pos:column="36">0<pos:position pos:line="100" pos:column="37"/></literal></expr>)<pos:position pos:line="100" pos:column="38"/></condition><then pos:line="100" pos:column="38"> <block pos:line="100" pos:column="39">{
		<expr_stmt><expr><name pos:line="101" pos:column="17">res<pos:position pos:line="101" pos:column="20"/></name> <operator pos:line="101" pos:column="21">=<pos:position pos:line="101" pos:column="22"/></operator> <call><name pos:line="101" pos:column="23">asprintf<pos:position pos:line="101" pos:column="31"/></name><argument_list pos:line="101" pos:column="31">(<argument><expr><operator pos:line="101" pos:column="32">&amp;<pos:position pos:line="101" pos:column="37"/></operator><name pos:line="101" pos:column="33">temp_str<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="43">"%s, \"collectd_plugin_type_instance\": \"%s\""<pos:position pos:line="101" pos:column="90"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="92">ret_str<pos:position pos:line="101" pos:column="99"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="101">n<pos:position pos:line="101" pos:column="102"/></name><operator pos:line="101" pos:column="102">-&gt;<pos:position pos:line="101" pos:column="107"/></operator><name pos:line="101" pos:column="104">type_instance<pos:position pos:line="101" pos:column="117"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="119"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">free<pos:position pos:line="102" pos:column="21"/></name><argument_list pos:line="102" pos:column="21">(<argument><expr><name pos:line="102" pos:column="22">ret_str<pos:position pos:line="102" pos:column="29"/></name></expr></argument>)<pos:position pos:line="102" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="31"/></expr_stmt>
		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">res<pos:position pos:line="103" pos:column="24"/></name> <operator pos:line="103" pos:column="25">==<pos:position pos:line="103" pos:column="27"/></operator> <operator pos:line="103" pos:column="28">-<pos:position pos:line="103" pos:column="29"/></operator><literal type="number" pos:line="103" pos:column="29">1<pos:position pos:line="103" pos:column="30"/></literal></expr>)<pos:position pos:line="103" pos:column="31"/></condition><then pos:line="103" pos:column="31"> <block pos:line="103" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="104" pos:column="25">ERROR<pos:position pos:line="104" pos:column="30"/></name><argument_list pos:line="104" pos:column="30">(<argument><expr><literal type="string" pos:line="104" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="104" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="77"/></expr_stmt>
			<return pos:line="105" pos:column="25">return <expr><name pos:line="105" pos:column="32">NULL<pos:position pos:line="105" pos:column="36"/></name></expr>;<pos:position pos:line="105" pos:column="37"/></return>
		}<pos:position pos:line="106" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="107" pos:column="17">ret_str<pos:position pos:line="107" pos:column="24"/></name> <operator pos:line="107" pos:column="25">=<pos:position pos:line="107" pos:column="26"/></operator> <name pos:line="107" pos:column="27">temp_str<pos:position pos:line="107" pos:column="35"/></name></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="108" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="110" pos:column="9">// add key value attributes from config if any</comment>
	<for pos:line="111" pos:column="9">for <control pos:line="111" pos:column="13">(<init><expr><name pos:line="111" pos:column="14">i<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <literal type="number" pos:line="111" pos:column="18">0<pos:position pos:line="111" pos:column="19"/></literal></expr>;<pos:position pos:line="111" pos:column="20"/></init> <condition><expr><name pos:line="111" pos:column="21">i<pos:position pos:line="111" pos:column="22"/></name> <operator pos:line="111" pos:column="23">&lt;<pos:position pos:line="111" pos:column="27"/></operator> <name pos:line="111" pos:column="25">sensu_attrs_num<pos:position pos:line="111" pos:column="40"/></name></expr>;<pos:position pos:line="111" pos:column="41"/></condition> <incr><expr><name pos:line="111" pos:column="42">i<pos:position pos:line="111" pos:column="43"/></name> <operator pos:line="111" pos:column="44">+=<pos:position pos:line="111" pos:column="46"/></operator> <literal type="number" pos:line="111" pos:column="47">2<pos:position pos:line="111" pos:column="48"/></literal></expr></incr>)<pos:position pos:line="111" pos:column="49"/></control> <block pos:line="111" pos:column="50">{
		<expr_stmt><expr><name pos:line="112" pos:column="17">res<pos:position pos:line="112" pos:column="20"/></name> <operator pos:line="112" pos:column="21">=<pos:position pos:line="112" pos:column="22"/></operator> <call><name pos:line="112" pos:column="23">asprintf<pos:position pos:line="112" pos:column="31"/></name><argument_list pos:line="112" pos:column="31">(<argument><expr><operator pos:line="112" pos:column="32">&amp;<pos:position pos:line="112" pos:column="37"/></operator><name pos:line="112" pos:column="33">temp_str<pos:position pos:line="112" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="43">"%s, \"%s\": \"%s\""<pos:position pos:line="112" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="65">ret_str<pos:position pos:line="112" pos:column="72"/></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="74">sensu_attrs<pos:position pos:line="112" pos:column="85"/></name><index pos:line="112" pos:column="85">[<expr><name pos:line="112" pos:column="86">i<pos:position pos:line="112" pos:column="87"/></name></expr>]<pos:position pos:line="112" pos:column="88"/></index></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="90">sensu_attrs<pos:position pos:line="112" pos:column="101"/></name><index pos:line="112" pos:column="101">[<expr><name pos:line="112" pos:column="102">i<pos:position pos:line="112" pos:column="103"/></name><operator pos:line="112" pos:column="103">+<pos:position pos:line="112" pos:column="104"/></operator><literal type="number" pos:line="112" pos:column="104">1<pos:position pos:line="112" pos:column="105"/></literal></expr>]<pos:position pos:line="112" pos:column="106"/></index></name></expr></argument>)<pos:position pos:line="112" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="108"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">free<pos:position pos:line="113" pos:column="21"/></name><argument_list pos:line="113" pos:column="21">(<argument><expr><name pos:line="113" pos:column="22">ret_str<pos:position pos:line="113" pos:column="29"/></name></expr></argument>)<pos:position pos:line="113" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="31"/></expr_stmt>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">res<pos:position pos:line="114" pos:column="24"/></name> <operator pos:line="114" pos:column="25">==<pos:position pos:line="114" pos:column="27"/></operator> <operator pos:line="114" pos:column="28">-<pos:position pos:line="114" pos:column="29"/></operator><literal type="number" pos:line="114" pos:column="29">1<pos:position pos:line="114" pos:column="30"/></literal></expr>)<pos:position pos:line="114" pos:column="31"/></condition><then pos:line="114" pos:column="31"> <block pos:line="114" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">ERROR<pos:position pos:line="115" pos:column="30"/></name><argument_list pos:line="115" pos:column="30">(<argument><expr><literal type="string" pos:line="115" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="115" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="77"/></expr_stmt>
			<return pos:line="116" pos:column="25">return <expr><name pos:line="116" pos:column="32">NULL<pos:position pos:line="116" pos:column="36"/></name></expr>;<pos:position pos:line="116" pos:column="37"/></return>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="118" pos:column="17">ret_str<pos:position pos:line="118" pos:column="24"/></name> <operator pos:line="118" pos:column="25">=<pos:position pos:line="118" pos:column="26"/></operator> <name pos:line="118" pos:column="27">temp_str<pos:position pos:line="118" pos:column="35"/></name></expr>;<pos:position pos:line="118" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="119" pos:column="10"/></block></for>

	<comment type="line" pos:line="121" pos:column="9">// incorporate sensu tags from config if any</comment>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><operator pos:line="122" pos:column="13">(<pos:position pos:line="122" pos:column="14"/></operator><name pos:line="122" pos:column="14">sensu_tags<pos:position pos:line="122" pos:column="24"/></name> <operator pos:line="122" pos:column="25">!=<pos:position pos:line="122" pos:column="27"/></operator> <name pos:line="122" pos:column="28">NULL<pos:position pos:line="122" pos:column="32"/></name><operator pos:line="122" pos:column="32">)<pos:position pos:line="122" pos:column="33"/></operator> <operator pos:line="122" pos:column="34">&amp;&amp;<pos:position pos:line="122" pos:column="44"/></operator> <operator pos:line="122" pos:column="37">(<pos:position pos:line="122" pos:column="38"/></operator><call><name pos:line="122" pos:column="38">strlen<pos:position pos:line="122" pos:column="44"/></name><argument_list pos:line="122" pos:column="44">(<argument><expr><name pos:line="122" pos:column="45">sensu_tags<pos:position pos:line="122" pos:column="55"/></name></expr></argument>)<pos:position pos:line="122" pos:column="56"/></argument_list></call> <operator pos:line="122" pos:column="57">!=<pos:position pos:line="122" pos:column="59"/></operator> <literal type="number" pos:line="122" pos:column="60">0<pos:position pos:line="122" pos:column="61"/></literal><operator pos:line="122" pos:column="61">)<pos:position pos:line="122" pos:column="62"/></operator></expr>)<pos:position pos:line="122" pos:column="63"/></condition><then pos:line="122" pos:column="63"> <block pos:line="122" pos:column="64">{
		<expr_stmt><expr><name pos:line="123" pos:column="17">res<pos:position pos:line="123" pos:column="20"/></name> <operator pos:line="123" pos:column="21">=<pos:position pos:line="123" pos:column="22"/></operator> <call><name pos:line="123" pos:column="23">asprintf<pos:position pos:line="123" pos:column="31"/></name><argument_list pos:line="123" pos:column="31">(<argument><expr><operator pos:line="123" pos:column="32">&amp;<pos:position pos:line="123" pos:column="37"/></operator><name pos:line="123" pos:column="33">temp_str<pos:position pos:line="123" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="43">"%s, %s"<pos:position pos:line="123" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="53">ret_str<pos:position pos:line="123" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="62">sensu_tags<pos:position pos:line="123" pos:column="72"/></name></expr></argument>)<pos:position pos:line="123" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="124" pos:column="17">free<pos:position pos:line="124" pos:column="21"/></name><argument_list pos:line="124" pos:column="21">(<argument><expr><name pos:line="124" pos:column="22">ret_str<pos:position pos:line="124" pos:column="29"/></name></expr></argument>)<pos:position pos:line="124" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="31"/></expr_stmt>
		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><name pos:line="125" pos:column="21">res<pos:position pos:line="125" pos:column="24"/></name> <operator pos:line="125" pos:column="25">==<pos:position pos:line="125" pos:column="27"/></operator> <operator pos:line="125" pos:column="28">-<pos:position pos:line="125" pos:column="29"/></operator><literal type="number" pos:line="125" pos:column="29">1<pos:position pos:line="125" pos:column="30"/></literal></expr>)<pos:position pos:line="125" pos:column="31"/></condition><then pos:line="125" pos:column="31"> <block pos:line="125" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="126" pos:column="25">ERROR<pos:position pos:line="126" pos:column="30"/></name><argument_list pos:line="126" pos:column="30">(<argument><expr><literal type="string" pos:line="126" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="126" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="77"/></expr_stmt>
			<return pos:line="127" pos:column="25">return <expr><name pos:line="127" pos:column="32">NULL<pos:position pos:line="127" pos:column="36"/></name></expr>;<pos:position pos:line="127" pos:column="37"/></return>
		}<pos:position pos:line="128" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="129" pos:column="17">ret_str<pos:position pos:line="129" pos:column="24"/></name> <operator pos:line="129" pos:column="25">=<pos:position pos:line="129" pos:column="26"/></operator> <name pos:line="129" pos:column="27">temp_str<pos:position pos:line="129" pos:column="35"/></name></expr>;<pos:position pos:line="129" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="130" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="132" pos:column="9">// incorporate the service name</comment>
	<expr_stmt><expr><call><name pos:line="133" pos:column="9">sensu_format_name2<pos:position pos:line="133" pos:column="27"/></name><argument_list pos:line="133" pos:column="27">(<argument><expr><name pos:line="133" pos:column="28">service_buffer<pos:position pos:line="133" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="133" pos:column="44">sizeof<argument_list pos:line="133" pos:column="50">(<argument><expr><name pos:line="133" pos:column="51">service_buffer<pos:position pos:line="133" pos:column="65"/></name></expr></argument>)<pos:position pos:line="133" pos:column="66"/></argument_list></sizeof></expr></argument>,
				<comment type="block" pos:line="134" pos:column="33">/* host */</comment> <argument><expr><literal type="string" pos:line="134" pos:column="44">""<pos:position pos:line="134" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="48">n<pos:position pos:line="134" pos:column="49"/></name><operator pos:line="134" pos:column="49">-&gt;<pos:position pos:line="134" pos:column="54"/></operator><name pos:line="134" pos:column="51">plugin<pos:position pos:line="134" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="59">n<pos:position pos:line="134" pos:column="60"/></name><operator pos:line="134" pos:column="60">-&gt;<pos:position pos:line="134" pos:column="65"/></operator><name pos:line="134" pos:column="62">plugin_instance<pos:position pos:line="134" pos:column="77"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="135" pos:column="33">n<pos:position pos:line="135" pos:column="34"/></name><operator pos:line="135" pos:column="34">-&gt;<pos:position pos:line="135" pos:column="39"/></operator><name pos:line="135" pos:column="36">type<pos:position pos:line="135" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="42">n<pos:position pos:line="135" pos:column="43"/></name><operator pos:line="135" pos:column="43">-&gt;<pos:position pos:line="135" pos:column="48"/></operator><name pos:line="135" pos:column="45">type_instance<pos:position pos:line="135" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="60">host<pos:position pos:line="135" pos:column="64"/></name><operator pos:line="135" pos:column="64">-&gt;<pos:position pos:line="135" pos:column="69"/></operator><name pos:line="135" pos:column="66">separator<pos:position pos:line="135" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="77"/></expr_stmt>
	<comment type="line" pos:line="136" pos:column="9">// replace sensu event name chars that are considered illegal</comment>
	<expr_stmt><expr><call><name pos:line="137" pos:column="9">in_place_replace_sensu_name_reserved<pos:position pos:line="137" pos:column="45"/></name><argument_list pos:line="137" pos:column="45">(<argument><expr><name pos:line="137" pos:column="46">service_buffer<pos:position pos:line="137" pos:column="60"/></name></expr></argument>)<pos:position pos:line="137" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name pos:line="138" pos:column="9">res<pos:position pos:line="138" pos:column="12"/></name> <operator pos:line="138" pos:column="13">=<pos:position pos:line="138" pos:column="14"/></operator> <call><name pos:line="138" pos:column="15">asprintf<pos:position pos:line="138" pos:column="23"/></name><argument_list pos:line="138" pos:column="23">(<argument><expr><operator pos:line="138" pos:column="24">&amp;<pos:position pos:line="138" pos:column="29"/></operator><name pos:line="138" pos:column="25">temp_str<pos:position pos:line="138" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="35">"%s, \"name\": \"%s\""<pos:position pos:line="138" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="59">ret_str<pos:position pos:line="138" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="138" pos:column="68">&amp;<pos:position pos:line="138" pos:column="73"/></operator><name><name pos:line="138" pos:column="69">service_buffer<pos:position pos:line="138" pos:column="83"/></name><index pos:line="138" pos:column="83">[<expr><literal type="number" pos:line="138" pos:column="84">1<pos:position pos:line="138" pos:column="85"/></literal></expr>]<pos:position pos:line="138" pos:column="86"/></index></name></expr></argument>)<pos:position pos:line="138" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="88"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">free<pos:position pos:line="139" pos:column="13"/></name><argument_list pos:line="139" pos:column="13">(<argument><expr><name pos:line="139" pos:column="14">ret_str<pos:position pos:line="139" pos:column="21"/></name></expr></argument>)<pos:position pos:line="139" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="23"/></expr_stmt>
	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">res<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">==<pos:position pos:line="140" pos:column="19"/></operator> <operator pos:line="140" pos:column="20">-<pos:position pos:line="140" pos:column="21"/></operator><literal type="number" pos:line="140" pos:column="21">1<pos:position pos:line="140" pos:column="22"/></literal></expr>)<pos:position pos:line="140" pos:column="23"/></condition><then pos:line="140" pos:column="23"> <block pos:line="140" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="141" pos:column="17">ERROR<pos:position pos:line="141" pos:column="22"/></name><argument_list pos:line="141" pos:column="22">(<argument><expr><literal type="string" pos:line="141" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="141" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="69"/></expr_stmt>
		<return pos:line="142" pos:column="17">return <expr><name pos:line="142" pos:column="24">NULL<pos:position pos:line="142" pos:column="28"/></name></expr>;<pos:position pos:line="142" pos:column="29"/></return>
	}<pos:position pos:line="143" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="144" pos:column="9">ret_str<pos:position pos:line="144" pos:column="16"/></name> <operator pos:line="144" pos:column="17">=<pos:position pos:line="144" pos:column="18"/></operator> <name pos:line="144" pos:column="19">temp_str<pos:position pos:line="144" pos:column="27"/></name></expr>;<pos:position pos:line="144" pos:column="28"/></expr_stmt>

	<comment type="line" pos:line="146" pos:column="9">// incorporate the check output</comment>
	<if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><name><name pos:line="147" pos:column="13">n<pos:position pos:line="147" pos:column="14"/></name><operator pos:line="147" pos:column="14">-&gt;<pos:position pos:line="147" pos:column="19"/></operator><name pos:line="147" pos:column="16">message<pos:position pos:line="147" pos:column="23"/></name><index pos:line="147" pos:column="23">[<expr><literal type="number" pos:line="147" pos:column="24">0<pos:position pos:line="147" pos:column="25"/></literal></expr>]<pos:position pos:line="147" pos:column="26"/></index></name> <operator pos:line="147" pos:column="27">!=<pos:position pos:line="147" pos:column="29"/></operator> <literal type="number" pos:line="147" pos:column="30">0<pos:position pos:line="147" pos:column="31"/></literal></expr>)<pos:position pos:line="147" pos:column="32"/></condition><then pos:line="147" pos:column="32"> <block pos:line="147" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="148" pos:column="17">char<pos:position pos:line="148" pos:column="21"/></name> <modifier pos:line="148" pos:column="22">*<pos:position pos:line="148" pos:column="23"/></modifier></type><name pos:line="148" pos:column="23">msg<pos:position pos:line="148" pos:column="26"/></name> <init pos:line="148" pos:column="27">= <expr><call><name pos:line="148" pos:column="29">replace_json_reserved<pos:position pos:line="148" pos:column="50"/></name><argument_list pos:line="148" pos:column="50">(<argument><expr><name><name pos:line="148" pos:column="51">n<pos:position pos:line="148" pos:column="52"/></name><operator pos:line="148" pos:column="52">-&gt;<pos:position pos:line="148" pos:column="57"/></operator><name pos:line="148" pos:column="54">message<pos:position pos:line="148" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="148" pos:column="63"/></decl_stmt>
		<if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><name pos:line="149" pos:column="21">msg<pos:position pos:line="149" pos:column="24"/></name> <operator pos:line="149" pos:column="25">==<pos:position pos:line="149" pos:column="27"/></operator> <name pos:line="149" pos:column="28">NULL<pos:position pos:line="149" pos:column="32"/></name></expr>)<pos:position pos:line="149" pos:column="33"/></condition><then pos:line="149" pos:column="33"> <block pos:line="149" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="150" pos:column="25">ERROR<pos:position pos:line="150" pos:column="30"/></name><argument_list pos:line="150" pos:column="30">(<argument><expr><literal type="string" pos:line="150" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="150" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="151" pos:column="25">free<pos:position pos:line="151" pos:column="29"/></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">ret_str<pos:position pos:line="151" pos:column="37"/></name></expr></argument>)<pos:position pos:line="151" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="39"/></expr_stmt>
			<return pos:line="152" pos:column="25">return <expr><name pos:line="152" pos:column="32">NULL<pos:position pos:line="152" pos:column="36"/></name></expr>;<pos:position pos:line="152" pos:column="37"/></return>
		}<pos:position pos:line="153" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="154" pos:column="17">res<pos:position pos:line="154" pos:column="20"/></name> <operator pos:line="154" pos:column="21">=<pos:position pos:line="154" pos:column="22"/></operator> <call><name pos:line="154" pos:column="23">asprintf<pos:position pos:line="154" pos:column="31"/></name><argument_list pos:line="154" pos:column="31">(<argument><expr><operator pos:line="154" pos:column="32">&amp;<pos:position pos:line="154" pos:column="37"/></operator><name pos:line="154" pos:column="33">temp_str<pos:position pos:line="154" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="43">"%s, \"output\": \"%s - %s\""<pos:position pos:line="154" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="74">ret_str<pos:position pos:line="154" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="83">severity<pos:position pos:line="154" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="93">msg<pos:position pos:line="154" pos:column="96"/></name></expr></argument>)<pos:position pos:line="154" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="98"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="155" pos:column="17">free<pos:position pos:line="155" pos:column="21"/></name><argument_list pos:line="155" pos:column="21">(<argument><expr><name pos:line="155" pos:column="22">ret_str<pos:position pos:line="155" pos:column="29"/></name></expr></argument>)<pos:position pos:line="155" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="156" pos:column="17">free<pos:position pos:line="156" pos:column="21"/></name><argument_list pos:line="156" pos:column="21">(<argument><expr><name pos:line="156" pos:column="22">msg<pos:position pos:line="156" pos:column="25"/></name></expr></argument>)<pos:position pos:line="156" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="27"/></expr_stmt>
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">res<pos:position pos:line="157" pos:column="24"/></name> <operator pos:line="157" pos:column="25">==<pos:position pos:line="157" pos:column="27"/></operator> <operator pos:line="157" pos:column="28">-<pos:position pos:line="157" pos:column="29"/></operator><literal type="number" pos:line="157" pos:column="29">1<pos:position pos:line="157" pos:column="30"/></literal></expr>)<pos:position pos:line="157" pos:column="31"/></condition><then pos:line="157" pos:column="31"> <block pos:line="157" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="158" pos:column="25">ERROR<pos:position pos:line="158" pos:column="30"/></name><argument_list pos:line="158" pos:column="30">(<argument><expr><literal type="string" pos:line="158" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="158" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="77"/></expr_stmt>
			<return pos:line="159" pos:column="25">return <expr><name pos:line="159" pos:column="32">NULL<pos:position pos:line="159" pos:column="36"/></name></expr>;<pos:position pos:line="159" pos:column="37"/></return>
		}<pos:position pos:line="160" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="161" pos:column="17">ret_str<pos:position pos:line="161" pos:column="24"/></name> <operator pos:line="161" pos:column="25">=<pos:position pos:line="161" pos:column="26"/></operator> <name pos:line="161" pos:column="27">temp_str<pos:position pos:line="161" pos:column="35"/></name></expr>;<pos:position pos:line="161" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="162" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="164" pos:column="9">// Pull in values from threshold and add extra attributes</comment>
	<for pos:line="165" pos:column="9">for <control pos:line="165" pos:column="13">(<init><expr><name pos:line="165" pos:column="14">meta<pos:position pos:line="165" pos:column="18"/></name> <operator pos:line="165" pos:column="19">=<pos:position pos:line="165" pos:column="20"/></operator> <name><name pos:line="165" pos:column="21">n<pos:position pos:line="165" pos:column="22"/></name><operator pos:line="165" pos:column="22">-&gt;<pos:position pos:line="165" pos:column="27"/></operator><name pos:line="165" pos:column="24">meta<pos:position pos:line="165" pos:column="28"/></name></name></expr>;<pos:position pos:line="165" pos:column="29"/></init> <condition><expr><name pos:line="165" pos:column="30">meta<pos:position pos:line="165" pos:column="34"/></name> <operator pos:line="165" pos:column="35">!=<pos:position pos:line="165" pos:column="37"/></operator> <name pos:line="165" pos:column="38">NULL<pos:position pos:line="165" pos:column="42"/></name></expr>;<pos:position pos:line="165" pos:column="43"/></condition> <incr><expr><name pos:line="165" pos:column="44">meta<pos:position pos:line="165" pos:column="48"/></name> <operator pos:line="165" pos:column="49">=<pos:position pos:line="165" pos:column="50"/></operator> <name><name pos:line="165" pos:column="51">meta<pos:position pos:line="165" pos:column="55"/></name><operator pos:line="165" pos:column="55">-&gt;<pos:position pos:line="165" pos:column="60"/></operator><name pos:line="165" pos:column="57">next<pos:position pos:line="165" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="165" pos:column="62"/></control> <block pos:line="165" pos:column="63">{
		<if pos:line="166" pos:column="17">if <condition pos:line="166" pos:column="20">(<expr><call><name pos:line="166" pos:column="21">strcasecmp<pos:position pos:line="166" pos:column="31"/></name><argument_list pos:line="166" pos:column="31">(<argument><expr><literal type="string" pos:line="166" pos:column="32">"CurrentValue"<pos:position pos:line="166" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="48">meta<pos:position pos:line="166" pos:column="52"/></name><operator pos:line="166" pos:column="52">-&gt;<pos:position pos:line="166" pos:column="57"/></operator><name pos:line="166" pos:column="54">name<pos:position pos:line="166" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="59"/></argument_list></call> <operator pos:line="166" pos:column="60">==<pos:position pos:line="166" pos:column="62"/></operator> <literal type="number" pos:line="166" pos:column="63">0<pos:position pos:line="166" pos:column="64"/></literal> <operator pos:line="166" pos:column="65">&amp;&amp;<pos:position pos:line="166" pos:column="75"/></operator> <name><name pos:line="166" pos:column="68">meta<pos:position pos:line="166" pos:column="72"/></name><operator pos:line="166" pos:column="72">-&gt;<pos:position pos:line="166" pos:column="77"/></operator><name pos:line="166" pos:column="74">type<pos:position pos:line="166" pos:column="78"/></name></name> <operator pos:line="166" pos:column="79">==<pos:position pos:line="166" pos:column="81"/></operator> <name pos:line="166" pos:column="82">NM_TYPE_DOUBLE<pos:position pos:line="166" pos:column="96"/></name></expr>)<pos:position pos:line="166" pos:column="97"/></condition><then pos:line="166" pos:column="97"> <block pos:line="166" pos:column="98">{
			<expr_stmt><expr><name pos:line="167" pos:column="25">res<pos:position pos:line="167" pos:column="28"/></name> <operator pos:line="167" pos:column="29">=<pos:position pos:line="167" pos:column="30"/></operator> <call><name pos:line="167" pos:column="31">asprintf<pos:position pos:line="167" pos:column="39"/></name><argument_list pos:line="167" pos:column="39">(<argument><expr><operator pos:line="167" pos:column="40">&amp;<pos:position pos:line="167" pos:column="45"/></operator><name pos:line="167" pos:column="41">temp_str<pos:position pos:line="167" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="51">"%s, \"current_value\": \"%.8f\""<pos:position pos:line="167" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="86">ret_str<pos:position pos:line="167" pos:column="93"/></name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="95">meta<pos:position pos:line="167" pos:column="99"/></name><operator pos:line="167" pos:column="99">-&gt;<pos:position pos:line="167" pos:column="104"/></operator><name pos:line="167" pos:column="101">nm_value<pos:position pos:line="167" pos:column="109"/></name><operator pos:line="167" pos:column="109">.<pos:position pos:line="167" pos:column="110"/></operator><name pos:line="167" pos:column="110">nm_double<pos:position pos:line="167" pos:column="119"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="121"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="168" pos:column="25">free<pos:position pos:line="168" pos:column="29"/></name><argument_list pos:line="168" pos:column="29">(<argument><expr><name pos:line="168" pos:column="30">ret_str<pos:position pos:line="168" pos:column="37"/></name></expr></argument>)<pos:position pos:line="168" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="39"/></expr_stmt>
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name pos:line="169" pos:column="29">res<pos:position pos:line="169" pos:column="32"/></name> <operator pos:line="169" pos:column="33">==<pos:position pos:line="169" pos:column="35"/></operator> <operator pos:line="169" pos:column="36">-<pos:position pos:line="169" pos:column="37"/></operator><literal type="number" pos:line="169" pos:column="37">1<pos:position pos:line="169" pos:column="38"/></literal></expr>)<pos:position pos:line="169" pos:column="39"/></condition><then pos:line="169" pos:column="39"> <block pos:line="169" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="170" pos:column="33">ERROR<pos:position pos:line="170" pos:column="38"/></name><argument_list pos:line="170" pos:column="38">(<argument><expr><literal type="string" pos:line="170" pos:column="39">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="170" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="85"/></expr_stmt>
				<return pos:line="171" pos:column="33">return <expr><name pos:line="171" pos:column="40">NULL<pos:position pos:line="171" pos:column="44"/></name></expr>;<pos:position pos:line="171" pos:column="45"/></return>
			}<pos:position pos:line="172" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="173" pos:column="25">ret_str<pos:position pos:line="173" pos:column="32"/></name> <operator pos:line="173" pos:column="33">=<pos:position pos:line="173" pos:column="34"/></operator> <name pos:line="173" pos:column="35">temp_str<pos:position pos:line="173" pos:column="43"/></name></expr>;<pos:position pos:line="173" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="174" pos:column="18"/></block></then></if>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name><name pos:line="175" pos:column="21">meta<pos:position pos:line="175" pos:column="25"/></name><operator pos:line="175" pos:column="25">-&gt;<pos:position pos:line="175" pos:column="30"/></operator><name pos:line="175" pos:column="27">type<pos:position pos:line="175" pos:column="31"/></name></name> <operator pos:line="175" pos:column="32">==<pos:position pos:line="175" pos:column="34"/></operator> <name pos:line="175" pos:column="35">NM_TYPE_STRING<pos:position pos:line="175" pos:column="49"/></name></expr>)<pos:position pos:line="175" pos:column="50"/></condition><then pos:line="175" pos:column="50"> <block pos:line="175" pos:column="51">{
			<expr_stmt><expr><name pos:line="176" pos:column="25">res<pos:position pos:line="176" pos:column="28"/></name> <operator pos:line="176" pos:column="29">=<pos:position pos:line="176" pos:column="30"/></operator> <call><name pos:line="176" pos:column="31">asprintf<pos:position pos:line="176" pos:column="39"/></name><argument_list pos:line="176" pos:column="39">(<argument><expr><operator pos:line="176" pos:column="40">&amp;<pos:position pos:line="176" pos:column="45"/></operator><name pos:line="176" pos:column="41">temp_str<pos:position pos:line="176" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="51">"%s, \"%s\": \"%s\""<pos:position pos:line="176" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="176" pos:column="73">ret_str<pos:position pos:line="176" pos:column="80"/></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="82">meta<pos:position pos:line="176" pos:column="86"/></name><operator pos:line="176" pos:column="86">-&gt;<pos:position pos:line="176" pos:column="91"/></operator><name pos:line="176" pos:column="88">name<pos:position pos:line="176" pos:column="92"/></name></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="94">meta<pos:position pos:line="176" pos:column="98"/></name><operator pos:line="176" pos:column="98">-&gt;<pos:position pos:line="176" pos:column="103"/></operator><name pos:line="176" pos:column="100">nm_value<pos:position pos:line="176" pos:column="108"/></name><operator pos:line="176" pos:column="108">.<pos:position pos:line="176" pos:column="109"/></operator><name pos:line="176" pos:column="109">nm_string<pos:position pos:line="176" pos:column="118"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="120"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="177" pos:column="25">free<pos:position pos:line="177" pos:column="29"/></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">ret_str<pos:position pos:line="177" pos:column="37"/></name></expr></argument>)<pos:position pos:line="177" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="39"/></expr_stmt>
			<if pos:line="178" pos:column="25">if <condition pos:line="178" pos:column="28">(<expr><name pos:line="178" pos:column="29">res<pos:position pos:line="178" pos:column="32"/></name> <operator pos:line="178" pos:column="33">==<pos:position pos:line="178" pos:column="35"/></operator> <operator pos:line="178" pos:column="36">-<pos:position pos:line="178" pos:column="37"/></operator><literal type="number" pos:line="178" pos:column="37">1<pos:position pos:line="178" pos:column="38"/></literal></expr>)<pos:position pos:line="178" pos:column="39"/></condition><then pos:line="178" pos:column="39"> <block pos:line="178" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="179" pos:column="33">ERROR<pos:position pos:line="179" pos:column="38"/></name><argument_list pos:line="179" pos:column="38">(<argument><expr><literal type="string" pos:line="179" pos:column="39">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="179" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="85"/></expr_stmt>
				<return pos:line="180" pos:column="33">return <expr><name pos:line="180" pos:column="40">NULL<pos:position pos:line="180" pos:column="44"/></name></expr>;<pos:position pos:line="180" pos:column="45"/></return>
			}<pos:position pos:line="181" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="182" pos:column="25">ret_str<pos:position pos:line="182" pos:column="32"/></name> <operator pos:line="182" pos:column="33">=<pos:position pos:line="182" pos:column="34"/></operator> <name pos:line="182" pos:column="35">temp_str<pos:position pos:line="182" pos:column="43"/></name></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="183" pos:column="18"/></block></then></if>
	}<pos:position pos:line="184" pos:column="10"/></block></for>

	<comment type="line" pos:line="186" pos:column="9">// close the curly bracket</comment>
	<expr_stmt><expr><name pos:line="187" pos:column="9">res<pos:position pos:line="187" pos:column="12"/></name> <operator pos:line="187" pos:column="13">=<pos:position pos:line="187" pos:column="14"/></operator> <call><name pos:line="187" pos:column="15">asprintf<pos:position pos:line="187" pos:column="23"/></name><argument_list pos:line="187" pos:column="23">(<argument><expr><operator pos:line="187" pos:column="24">&amp;<pos:position pos:line="187" pos:column="29"/></operator><name pos:line="187" pos:column="25">temp_str<pos:position pos:line="187" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="187" pos:column="35">"%s}\n"<pos:position pos:line="187" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="187" pos:column="44">ret_str<pos:position pos:line="187" pos:column="51"/></name></expr></argument>)<pos:position pos:line="187" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="188" pos:column="9">free<pos:position pos:line="188" pos:column="13"/></name><argument_list pos:line="188" pos:column="13">(<argument><expr><name pos:line="188" pos:column="14">ret_str<pos:position pos:line="188" pos:column="21"/></name></expr></argument>)<pos:position pos:line="188" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="23"/></expr_stmt>
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><name pos:line="189" pos:column="13">res<pos:position pos:line="189" pos:column="16"/></name> <operator pos:line="189" pos:column="17">==<pos:position pos:line="189" pos:column="19"/></operator> <operator pos:line="189" pos:column="20">-<pos:position pos:line="189" pos:column="21"/></operator><literal type="number" pos:line="189" pos:column="21">1<pos:position pos:line="189" pos:column="22"/></literal></expr>)<pos:position pos:line="189" pos:column="23"/></condition><then pos:line="189" pos:column="23"> <block pos:line="189" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="190" pos:column="17">ERROR<pos:position pos:line="190" pos:column="22"/></name><argument_list pos:line="190" pos:column="22">(<argument><expr><literal type="string" pos:line="190" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="190" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="69"/></expr_stmt>
		<return pos:line="191" pos:column="17">return <expr><name pos:line="191" pos:column="24">NULL<pos:position pos:line="191" pos:column="28"/></name></expr>;<pos:position pos:line="191" pos:column="29"/></return>
	}<pos:position pos:line="192" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="193" pos:column="9">ret_str<pos:position pos:line="193" pos:column="16"/></name> <operator pos:line="193" pos:column="17">=<pos:position pos:line="193" pos:column="18"/></operator> <name pos:line="193" pos:column="19">temp_str<pos:position pos:line="193" pos:column="27"/></name></expr>;<pos:position pos:line="193" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="195" pos:column="9">DEBUG<pos:position pos:line="195" pos:column="14"/></name><argument_list pos:line="195" pos:column="14">(<argument><expr><literal type="string" pos:line="195" pos:column="15">"write_sensu plugin: Successfully created JSON for notification: "<pos:position pos:line="195" pos:column="81"/></literal>
				<literal type="string" pos:line="196" pos:column="33">"host = \"%s\", service = \"%s\", state = \"%s\""<pos:position pos:line="196" pos:column="82"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="197" pos:column="33">n<pos:position pos:line="197" pos:column="34"/></name><operator pos:line="197" pos:column="34">-&gt;<pos:position pos:line="197" pos:column="39"/></operator><name pos:line="197" pos:column="36">host<pos:position pos:line="197" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="42">service_buffer<pos:position pos:line="197" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="58">severity<pos:position pos:line="197" pos:column="66"/></name></expr></argument>)<pos:position pos:line="197" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="68"/></expr_stmt>
	<return pos:line="198" pos:column="9">return <expr><name pos:line="198" pos:column="16">ret_str<pos:position pos:line="198" pos:column="23"/></name></expr>;<pos:position pos:line="198" pos:column="24"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function></unit>
