<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1390_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dns_sleep_one_interval<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <comment type="block" pos:line="1" pos:column="42">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">cdtime_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">interval<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">timespec<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">ts<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><block pos:line="4" pos:column="30">{ <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr>, <expr><literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal></expr> }<pos:position pos:line="4" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">interval<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <call><name pos:line="7" pos:column="20">plugin_get_interval<pos:position pos:line="7" pos:column="39"/></name> <argument_list pos:line="7" pos:column="40">()<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">CDTIME_T_TO_TIMESPEC<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">interval<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="41">&amp;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="42">ts<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><literal type="number" pos:line="10" pos:column="16">42<pos:position pos:line="10" pos:column="18"/></literal></expr>)<pos:position pos:line="10" pos:column="19"/></condition>
	<block pos:line="11" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">timespec<pos:position pos:line="12" pos:column="32"/></name></name></type> <name pos:line="12" pos:column="33">rem<pos:position pos:line="12" pos:column="36"/></name> <init pos:line="12" pos:column="37">= <expr><block pos:line="12" pos:column="39">{ <expr><literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr>, <expr><literal type="number" pos:line="12" pos:column="44">0<pos:position pos:line="12" pos:column="45"/></literal></expr> }<pos:position pos:line="12" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>

		<expr_stmt><expr><name pos:line="14" pos:column="17">status<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <call><name pos:line="14" pos:column="26">nanosleep<pos:position pos:line="14" pos:column="35"/></name> <argument_list pos:line="14" pos:column="36">(<argument><expr><operator pos:line="14" pos:column="37">&amp;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="38">ts<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="42">&amp;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="43">rem<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">status<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">==<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><operator pos:line="17" pos:column="26">(<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">errno<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">==<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="36">EINTR<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator> <operator pos:line="17" pos:column="43">||<pos:position pos:line="17" pos:column="45"/></operator> <operator pos:line="17" pos:column="46">(<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="47">errno<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">==<pos:position pos:line="17" pos:column="55"/></operator> <name pos:line="17" pos:column="56">EAGAIN<pos:position pos:line="17" pos:column="62"/></name><operator pos:line="17" pos:column="62">)<pos:position pos:line="17" pos:column="63"/></operator></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64">
		<block pos:line="18" pos:column="17">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">ts<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">rem<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
			<continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if></elseif>
		<else pos:line="22" pos:column="17">else
			<block type="pseudo"><break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="24" pos:column="10"/></block></while>

	<return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">status<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">)<pos:position pos:line="26" pos:column="24"/></operator></expr>;<pos:position pos:line="26" pos:column="25"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
