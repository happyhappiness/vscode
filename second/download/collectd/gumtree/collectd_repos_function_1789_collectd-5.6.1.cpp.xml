<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1789_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">value_list_to_filename<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">buffer_size<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">value_list_t<pos:position pos:line="2" pos:column="29"/></name> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">vl<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ptr<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">buffer<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">ptr_size<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">buffer_size<pos:position pos:line="7" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">time_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">now<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">tm<pos:position pos:line="9" pos:column="18"/></name></name></type> <name pos:line="9" pos:column="19">struct_tm<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">datadir<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">NULL<pos:position pos:line="11" pos:column="28"/></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
	<block pos:line="12" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">size_t<pos:position pos:line="13" pos:column="23"/></name></type> <name pos:line="13" pos:column="24">len<pos:position pos:line="13" pos:column="27"/></name> <init pos:line="13" pos:column="28">= <expr><call><name pos:line="13" pos:column="30">strlen<pos:position pos:line="13" pos:column="36"/></name> <argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">datadir<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call> <operator pos:line="13" pos:column="47">+<pos:position pos:line="13" pos:column="48"/></operator> <literal type="number" pos:line="13" pos:column="49">1<pos:position pos:line="13" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="51"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">len<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&gt;=<pos:position pos:line="15" pos:column="30"/></operator> <name pos:line="15" pos:column="28">ptr_size<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
			<block type="pseudo"><return pos:line="16" pos:column="25">return <expr><operator pos:line="16" pos:column="32">(<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">ENOBUFS<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">)<pos:position pos:line="16" pos:column="41"/></operator></expr>;<pos:position pos:line="16" pos:column="42"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="18" pos:column="17">memcpy<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">ptr<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">datadir<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">len<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">ptr<pos:position pos:line="19" pos:column="20"/></name><index pos:line="19" pos:column="20">[<expr><name pos:line="19" pos:column="21">len<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">-<pos:position pos:line="19" pos:column="25"/></operator><literal type="number" pos:line="19" pos:column="25">1<pos:position pos:line="19" pos:column="26"/></literal></expr>]<pos:position pos:line="19" pos:column="27"/></index></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <literal type="char" pos:line="19" pos:column="30">'/'<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">ptr_size<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">-=<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">len<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">ptr<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">+=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">len<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">status<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">FORMAT_VL<pos:position pos:line="24" pos:column="27"/></name> <argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">ptr<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">ptr_size<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">vl<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">status<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">!=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">(<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">status<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">)<pos:position pos:line="26" pos:column="32"/></operator></expr>;<pos:position pos:line="26" pos:column="33"/></return></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/* Skip all the time formatting stuff when printing to STDOUT or
	 * STDERR. */</comment>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">use_stdio<pos:position pos:line="30" pos:column="22"/></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal><operator pos:line="31" pos:column="26">)<pos:position pos:line="31" pos:column="27"/></operator></expr>;<pos:position pos:line="31" pos:column="28"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="33" pos:column="9">ptr_size<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">-=<pos:position pos:line="33" pos:column="20"/></operator> <call><name pos:line="33" pos:column="21">strlen<pos:position pos:line="33" pos:column="27"/></name> <argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">ptr<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">ptr<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">+=<pos:position pos:line="34" pos:column="15"/></operator>  <call><name pos:line="34" pos:column="17">strlen<pos:position pos:line="34" pos:column="23"/></name> <argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">ptr<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="36" pos:column="9">/* "-2013-07-12" =&gt; 11 bytes */</comment>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">ptr_size<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">&lt;<pos:position pos:line="37" pos:column="26"/></operator> <literal type="number" pos:line="37" pos:column="24">12<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
	<block pos:line="38" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">ERROR<pos:position pos:line="39" pos:column="22"/></name> <argument_list pos:line="39" pos:column="23">(<argument><expr><literal type="string" pos:line="39" pos:column="24">"csv plugin: Buffer too small."<pos:position pos:line="39" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">ENOMEM<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">)<pos:position pos:line="40" pos:column="32"/></operator></expr>;<pos:position pos:line="40" pos:column="33"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* TODO: Find a way to minimize the calls to `localtime_r',
	 * since they are pretty expensive.. */</comment>
	<expr_stmt><expr><name pos:line="45" pos:column="9">now<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">time<pos:position pos:line="45" pos:column="19"/></name> <argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">NULL<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">localtime_r<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">now<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">struct_tm<pos:position pos:line="46" pos:column="42"/></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call> <operator pos:line="46" pos:column="44">==<pos:position pos:line="46" pos:column="46"/></operator> <name pos:line="46" pos:column="47">NULL<pos:position pos:line="46" pos:column="51"/></name></expr>)<pos:position pos:line="46" pos:column="52"/></condition><then pos:line="46" pos:column="52">
	<block pos:line="47" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">ERROR<pos:position pos:line="48" pos:column="22"/></name> <argument_list pos:line="48" pos:column="23">(<argument><expr><literal type="string" pos:line="48" pos:column="24">"csv plugin: localtime_r failed"<pos:position pos:line="48" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt>
		<return pos:line="49" pos:column="17">return <expr><operator pos:line="49" pos:column="24">(<pos:position pos:line="49" pos:column="25"/></operator><operator pos:line="49" pos:column="25">-<pos:position pos:line="49" pos:column="26"/></operator><literal type="number" pos:line="49" pos:column="26">1<pos:position pos:line="49" pos:column="27"/></literal><operator pos:line="49" pos:column="27">)<pos:position pos:line="49" pos:column="28"/></operator></expr>;<pos:position pos:line="49" pos:column="29"/></return>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="52" pos:column="9">status<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <call><name pos:line="52" pos:column="18">strftime<pos:position pos:line="52" pos:column="26"/></name> <argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">ptr<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">ptr_size<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="43">"-%Y-%m-%d"<pos:position pos:line="52" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="56">&amp;<pos:position pos:line="52" pos:column="61"/></operator><name pos:line="52" pos:column="57">struct_tm<pos:position pos:line="52" pos:column="66"/></name></expr></argument>)<pos:position pos:line="52" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="68"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">status<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">==<pos:position pos:line="53" pos:column="22"/></operator> <literal type="number" pos:line="53" pos:column="23">0<pos:position pos:line="53" pos:column="24"/></literal></expr>)<pos:position pos:line="53" pos:column="25"/></condition><then pos:line="53" pos:column="25"> <comment type="block" pos:line="53" pos:column="26">/* yep, it returns zero on error. */</comment>
	<block pos:line="54" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">ERROR<pos:position pos:line="55" pos:column="22"/></name> <argument_list pos:line="55" pos:column="23">(<argument><expr><literal type="string" pos:line="55" pos:column="24">"csv plugin: strftime failed"<pos:position pos:line="55" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="55"/></expr_stmt>
		<return pos:line="56" pos:column="17">return <expr><operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">-<pos:position pos:line="56" pos:column="26"/></operator><literal type="number" pos:line="56" pos:column="26">1<pos:position pos:line="56" pos:column="27"/></literal><operator pos:line="56" pos:column="27">)<pos:position pos:line="56" pos:column="28"/></operator></expr>;<pos:position pos:line="56" pos:column="29"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<return pos:line="59" pos:column="9">return <expr><operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal><operator pos:line="59" pos:column="18">)<pos:position pos:line="59" pos:column="19"/></operator></expr>;<pos:position pos:line="59" pos:column="20"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
