<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1646_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">daemonize<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list> <block pos:line="1" pos:column="28">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">rlimit<pos:position pos:line="2" pos:column="16"/></name></name></type> <name pos:line="2" pos:column="17">rl<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">dev_null<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">pid_t<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">pid<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><literal type="number" pos:line="5" pos:column="15">0<pos:position pos:line="5" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name> <init pos:line="6" pos:column="9">= <expr><literal type="number" pos:line="6" pos:column="11">0<pos:position pos:line="6" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><literal type="number" pos:line="8" pos:column="7">0<pos:position pos:line="8" pos:column="8"/></literal> <operator pos:line="8" pos:column="9">!=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">chdir<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><literal type="string" pos:line="8" pos:column="18">"/"<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block pos:line="8" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">fprintf<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">stderr<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="21">"Error: chdir() failed: %s\n"<pos:position pos:line="9" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="52">strerror<pos:position pos:line="9" pos:column="60"/></name><argument_list pos:line="9" pos:column="60">(<argument><expr><name pos:line="9" pos:column="61">errno<pos:position pos:line="9" pos:column="66"/></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><literal type="number" pos:line="13" pos:column="7">0<pos:position pos:line="13" pos:column="8"/></literal> <operator pos:line="13" pos:column="9">!=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">getrlimit<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">RLIMIT_NOFILE<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="37">&amp;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="38">rl<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42"> <block pos:line="13" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">fprintf<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">stderr<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="21">"Error: getrlimit() failed: %s\n"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="56">strerror<pos:position pos:line="14" pos:column="64"/></name><argument_list pos:line="14" pos:column="64">(<argument><expr><name pos:line="14" pos:column="65">errno<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><literal type="number" pos:line="18" pos:column="7">0<pos:position pos:line="18" pos:column="8"/></literal> <operator pos:line="18" pos:column="9">&gt;<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">pid<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">fork<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call><operator pos:line="18" pos:column="24">)<pos:position pos:line="18" pos:column="25"/></operator></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26"> <block pos:line="18" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">fprintf<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">stderr<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="21">"Error: fork() failed: %s\n"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="51">strerror<pos:position pos:line="19" pos:column="59"/></name><argument_list pos:line="19" pos:column="59">(<argument><expr><name pos:line="19" pos:column="60">errno<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then> <elseif pos:line="21" pos:column="5">else <if pos:line="21" pos:column="10">if <condition pos:line="21" pos:column="13">(<expr><name pos:line="21" pos:column="14">pid<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">!=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="21">0<pos:position pos:line="21" pos:column="22"/></literal></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">exit<pos:position pos:line="22" pos:column="9"/></name><argument_list pos:line="22" pos:column="9">(<argument><expr><literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if></elseif></if>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><literal type="number" pos:line="25" pos:column="7">0<pos:position pos:line="25" pos:column="8"/></literal> <operator pos:line="25" pos:column="9">!=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">pidfile_create<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">()<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">-<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">1<pos:position pos:line="26" pos:column="14"/></literal></expr>;<pos:position pos:line="26" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">setsid<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">()<pos:position pos:line="28" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="12"/></expr_stmt>

  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">RLIM_INFINITY<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">==<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="24">rl<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">rlim_max<pos:position pos:line="30" pos:column="35"/></name></name></expr>)<pos:position pos:line="30" pos:column="36"/></condition><then pos:line="30" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="5">rl<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">.<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">rlim_max<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <literal type="number" pos:line="31" pos:column="19">1024<pos:position pos:line="31" pos:column="23"/></literal></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt></block></then></if>

  <for pos:line="33" pos:column="3">for <control pos:line="33" pos:column="7">(<init><expr><name pos:line="33" pos:column="8">i<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></init> <condition><expr><name pos:line="33" pos:column="15">i<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">&lt;<pos:position pos:line="33" pos:column="21"/></operator> <operator pos:line="33" pos:column="19">(<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">int<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">)<pos:position pos:line="33" pos:column="24"/></operator><name><name pos:line="33" pos:column="24">rl<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">.<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">rlim_max<pos:position pos:line="33" pos:column="35"/></name></name></expr>;<pos:position pos:line="33" pos:column="36"/></condition> <incr><expr><operator pos:line="33" pos:column="37">++<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="39">i<pos:position pos:line="33" pos:column="40"/></name></expr></incr>)<pos:position pos:line="33" pos:column="41"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="5">close<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">i<pos:position pos:line="34" pos:column="12"/></name></expr></argument>)<pos:position pos:line="34" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="14"/></expr_stmt></block></for>

  <expr_stmt><expr><name pos:line="36" pos:column="3">dev_null<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">open<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><literal type="string" pos:line="36" pos:column="19">"/dev/null"<pos:position pos:line="36" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="32">O_RDWR<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">dev_null<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">==<pos:position pos:line="37" pos:column="18"/></operator> <operator pos:line="37" pos:column="19">-<pos:position pos:line="37" pos:column="20"/></operator><literal type="number" pos:line="37" pos:column="20">1<pos:position pos:line="37" pos:column="21"/></literal></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22"> <block pos:line="37" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">syslog<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><name pos:line="38" pos:column="12">LOG_ERR<pos:position pos:line="38" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="21">"Error: couldn't open /dev/null: %s"<pos:position pos:line="38" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="59">strerror<pos:position pos:line="38" pos:column="67"/></name><argument_list pos:line="38" pos:column="67">(<argument><expr><name pos:line="38" pos:column="68">errno<pos:position pos:line="38" pos:column="73"/></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="76"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">-<pos:position pos:line="39" pos:column="13"/></operator><literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr>;<pos:position pos:line="39" pos:column="15"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><call><name pos:line="42" pos:column="7">dup2<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">dev_null<pos:position pos:line="42" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="22">STDIN_FILENO<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call> <operator pos:line="42" pos:column="36">==<pos:position pos:line="42" pos:column="38"/></operator> <operator pos:line="42" pos:column="39">-<pos:position pos:line="42" pos:column="40"/></operator><literal type="number" pos:line="42" pos:column="40">1<pos:position pos:line="42" pos:column="41"/></literal></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42"> <block pos:line="42" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">close<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name pos:line="43" pos:column="11">dev_null<pos:position pos:line="43" pos:column="19"/></name></expr></argument>)<pos:position pos:line="43" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">syslog<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><name pos:line="44" pos:column="12">LOG_ERR<pos:position pos:line="44" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="21">"Error: couldn't connect STDIN to /dev/null: %s"<pos:position pos:line="44" pos:column="69"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="45" pos:column="12">strerror<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">errno<pos:position pos:line="45" pos:column="26"/></name></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><operator pos:line="46" pos:column="12">-<pos:position pos:line="46" pos:column="13"/></operator><literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><call><name pos:line="49" pos:column="7">dup2<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><name pos:line="49" pos:column="12">dev_null<pos:position pos:line="49" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="22">STDOUT_FILENO<pos:position pos:line="49" pos:column="35"/></name></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call> <operator pos:line="49" pos:column="37">==<pos:position pos:line="49" pos:column="39"/></operator> <operator pos:line="49" pos:column="40">-<pos:position pos:line="49" pos:column="41"/></operator><literal type="number" pos:line="49" pos:column="41">1<pos:position pos:line="49" pos:column="42"/></literal></expr>)<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">close<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><name pos:line="50" pos:column="11">dev_null<pos:position pos:line="50" pos:column="19"/></name></expr></argument>)<pos:position pos:line="50" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">syslog<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">LOG_ERR<pos:position pos:line="51" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="21">"Error: couldn't connect STDOUT to /dev/null: %s"<pos:position pos:line="51" pos:column="70"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="52" pos:column="12">strerror<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">errno<pos:position pos:line="52" pos:column="26"/></name></expr></argument>)<pos:position pos:line="52" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><call><name pos:line="56" pos:column="7">dup2<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">dev_null<pos:position pos:line="56" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="22">STDERR_FILENO<pos:position pos:line="56" pos:column="35"/></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call> <operator pos:line="56" pos:column="37">==<pos:position pos:line="56" pos:column="39"/></operator> <operator pos:line="56" pos:column="40">-<pos:position pos:line="56" pos:column="41"/></operator><literal type="number" pos:line="56" pos:column="41">1<pos:position pos:line="56" pos:column="42"/></literal></expr>)<pos:position pos:line="56" pos:column="43"/></condition><then pos:line="56" pos:column="43"> <block pos:line="56" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">close<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><name pos:line="57" pos:column="11">dev_null<pos:position pos:line="57" pos:column="19"/></name></expr></argument>)<pos:position pos:line="57" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">syslog<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><name pos:line="58" pos:column="12">LOG_ERR<pos:position pos:line="58" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="21">"Error: couldn't connect STDERR to /dev/null: %s"<pos:position pos:line="58" pos:column="70"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="59" pos:column="12">strerror<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">errno<pos:position pos:line="59" pos:column="26"/></name></expr></argument>)<pos:position pos:line="59" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><operator pos:line="60" pos:column="12">-<pos:position pos:line="60" pos:column="13"/></operator><literal type="number" pos:line="60" pos:column="13">1<pos:position pos:line="60" pos:column="14"/></literal></expr>;<pos:position pos:line="60" pos:column="15"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><operator pos:line="63" pos:column="7">(<pos:position pos:line="63" pos:column="8"/></operator><name pos:line="63" pos:column="8">dev_null<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">!=<pos:position pos:line="63" pos:column="19"/></operator> <name pos:line="63" pos:column="20">STDIN_FILENO<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">)<pos:position pos:line="63" pos:column="33"/></operator> <operator pos:line="63" pos:column="34">&amp;&amp;<pos:position pos:line="63" pos:column="44"/></operator> <operator pos:line="63" pos:column="37">(<pos:position pos:line="63" pos:column="38"/></operator><name pos:line="63" pos:column="38">dev_null<pos:position pos:line="63" pos:column="46"/></name> <operator pos:line="63" pos:column="47">!=<pos:position pos:line="63" pos:column="49"/></operator> <name pos:line="63" pos:column="50">STDOUT_FILENO<pos:position pos:line="63" pos:column="63"/></name><operator pos:line="63" pos:column="63">)<pos:position pos:line="63" pos:column="64"/></operator> <operator pos:line="63" pos:column="65">&amp;&amp;<pos:position pos:line="63" pos:column="75"/></operator>
      <operator pos:line="64" pos:column="7">(<pos:position pos:line="64" pos:column="8"/></operator><name pos:line="64" pos:column="8">dev_null<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">!=<pos:position pos:line="64" pos:column="19"/></operator> <name pos:line="64" pos:column="20">STDERR_FILENO<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">)<pos:position pos:line="64" pos:column="34"/></operator></expr>)<pos:position pos:line="64" pos:column="35"/></condition><then pos:line="64" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="5">close<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><name pos:line="65" pos:column="11">dev_null<pos:position pos:line="65" pos:column="19"/></name></expr></argument>)<pos:position pos:line="65" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="21"/></expr_stmt></block></then></if>

  <return pos:line="67" pos:column="3">return <expr><literal type="number" pos:line="67" pos:column="10">0<pos:position pos:line="67" pos:column="11"/></literal></expr>;<pos:position pos:line="67" pos:column="12"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
