<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_376_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">net_send<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">sockfd<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">buff<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list> <block pos:line="1" pos:column="61">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">uint16_t<pos:position pos:line="2" pos:column="11"/></name></type> <name pos:line="2" pos:column="12">packet_size<pos:position pos:line="2" pos:column="23"/></name></decl>;<pos:position pos:line="2" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4" pos:column="3">assert<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">&gt;<pos:position pos:line="4" pos:column="18"/></operator> <literal type="number" pos:line="4" pos:column="16">0<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">assert<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">sockfd<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">&gt;=<pos:position pos:line="5" pos:column="23"/></operator> <literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* send short containing size of data packet */</comment>
  <expr_stmt><expr><name pos:line="8" pos:column="3">packet_size<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">htons<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">(<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">uint16_t<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">)<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">swrite<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><operator pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">sockfd<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="23">(<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">void<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">*<pos:position pos:line="10" pos:column="30"/></operator><operator pos:line="10" pos:column="30">)<pos:position pos:line="10" pos:column="31"/></operator><operator pos:line="10" pos:column="31">&amp;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="32">packet_size<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="45">sizeof<argument_list pos:line="10" pos:column="51">(<argument><expr><name pos:line="10" pos:column="52">packet_size<pos:position pos:line="10" pos:column="63"/></name></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call> <operator pos:line="10" pos:column="66">!=<pos:position pos:line="10" pos:column="68"/></operator> <literal type="number" pos:line="10" pos:column="69">0<pos:position pos:line="10" pos:column="70"/></literal></expr>)<pos:position pos:line="10" pos:column="71"/></condition><then pos:line="10" pos:column="71"> <block pos:line="10" pos:column="72">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">close<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><operator pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">sockfd<pos:position pos:line="11" pos:column="18"/></name></expr></argument>)<pos:position pos:line="11" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">sockfd<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <operator pos:line="12" pos:column="15">-<pos:position pos:line="12" pos:column="16"/></operator><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* send data packet */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">swrite<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><operator pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">sockfd<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="23">(<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">void<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator><operator pos:line="17" pos:column="30">)<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">buff<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">len<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call> <operator pos:line="17" pos:column="42">!=<pos:position pos:line="17" pos:column="44"/></operator> <literal type="number" pos:line="17" pos:column="45">0<pos:position pos:line="17" pos:column="46"/></literal></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">close<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><operator pos:line="18" pos:column="11">*<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">sockfd<pos:position pos:line="18" pos:column="18"/></name></expr></argument>)<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="19" pos:column="5">*<pos:position pos:line="19" pos:column="6"/></operator><name pos:line="19" pos:column="6">sockfd<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <operator pos:line="19" pos:column="15">-<pos:position pos:line="19" pos:column="16"/></operator><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">2<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <return pos:line="23" pos:column="3">return <expr><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><literal type="number" pos:line="23" pos:column="11">0<pos:position pos:line="23" pos:column="12"/></literal><operator pos:line="23" pos:column="12">)<pos:position pos:line="23" pos:column="13"/></operator></expr>;<pos:position pos:line="23" pos:column="14"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
