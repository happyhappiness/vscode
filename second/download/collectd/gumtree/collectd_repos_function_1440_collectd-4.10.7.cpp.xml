<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1440_collectd-4.10.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_set_interface<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">sockent_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">se<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name><name pos:line="1" pos:column="62">struct<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">addrinfo<pos:position pos:line="1" pos:column="77"/></name></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">ai<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list> <comment type="block" pos:line="1" pos:column="83">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">DEBUG<pos:position pos:line="3" pos:column="14"/></name> <argument_list pos:line="3" pos:column="15">(<argument><expr><literal type="string" pos:line="3" pos:column="16">"network plugin: network_set_interface: interface index = %i;"<pos:position pos:line="3" pos:column="78"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="4" pos:column="25">se<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">interface<pos:position pos:line="4" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name> <argument_list pos:line="6" pos:column="16">(<argument><expr><name><name pos:line="6" pos:column="17">se<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">type<pos:position pos:line="6" pos:column="25"/></name></name> <operator pos:line="6" pos:column="26">==<pos:position pos:line="6" pos:column="28"/></operator> <name pos:line="6" pos:column="29">SOCKENT_TYPE_CLIENT<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="50"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">ai<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">ai_family<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">AF_INET<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
	<block pos:line="9" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">sockaddr_in<pos:position pos:line="10" pos:column="35"/></name></name> <modifier pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></modifier></type><name pos:line="10" pos:column="37">addr<pos:position pos:line="10" pos:column="41"/></name> <init pos:line="10" pos:column="42">= <expr><operator pos:line="10" pos:column="44">(<pos:position pos:line="10" pos:column="45"/></operator>struct <name pos:line="10" pos:column="52">sockaddr_in<pos:position pos:line="10" pos:column="63"/></name> <operator pos:line="10" pos:column="64">*<pos:position pos:line="10" pos:column="65"/></operator><operator pos:line="10" pos:column="65">)<pos:position pos:line="10" pos:column="66"/></operator> <name><name pos:line="10" pos:column="67">ai<pos:position pos:line="10" pos:column="69"/></name><operator pos:line="10" pos:column="69">-&gt;<pos:position pos:line="10" pos:column="74"/></operator><name pos:line="10" pos:column="71">ai_addr<pos:position pos:line="10" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="79"/></decl_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">IN_MULTICAST<pos:position pos:line="12" pos:column="33"/></name> <argument_list pos:line="12" pos:column="34">(<argument><expr><call><name pos:line="12" pos:column="35">ntohl<pos:position pos:line="12" pos:column="40"/></name> <argument_list pos:line="12" pos:column="41">(<argument><expr><name><name pos:line="12" pos:column="42">addr<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">sin_addr<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">.<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">s_addr<pos:position pos:line="12" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="66"/></condition><then pos:line="12" pos:column="66">
		<block pos:line="13" pos:column="17">{
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="14" pos:column="37"/></name></expr></cpp:if>
			<comment type="block" pos:line="15" pos:column="25">/* If possible, use the "ip_mreqn" structure which has
			 * an "interface index" member. Using the interface
			 * index is preferred here, because of its similarity
			 * to the way IPv6 handles this. Unfortunately, it
			 * appears not to be portable. */</comment>
			<decl_stmt><decl><type><name><name pos:line="20" pos:column="25">struct<pos:position pos:line="20" pos:column="31"/></name> <name pos:line="20" pos:column="32">ip_mreqn<pos:position pos:line="20" pos:column="40"/></name></name></type> <name pos:line="20" pos:column="41">mreq<pos:position pos:line="20" pos:column="45"/></name></decl>;<pos:position pos:line="20" pos:column="46"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="22" pos:column="25">memset<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="34">mreq<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="40">0<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="43">sizeof <argument_list pos:line="22" pos:column="50">(<argument><expr><name pos:line="22" pos:column="51">mreq<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">mreq<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">imr_multiaddr<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">.<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">s_addr<pos:position pos:line="23" pos:column="50"/></name></name> <operator pos:line="23" pos:column="51">=<pos:position pos:line="23" pos:column="52"/></operator> <name><name pos:line="23" pos:column="53">addr<pos:position pos:line="23" pos:column="57"/></name><operator pos:line="23" pos:column="57">-&gt;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="59">sin_addr<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">.<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">s_addr<pos:position pos:line="23" pos:column="74"/></name></name></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="24" pos:column="25">mreq<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">.<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">imr_address<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">.<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">s_addr<pos:position pos:line="24" pos:column="48"/></name></name> <operator pos:line="24" pos:column="49">=<pos:position pos:line="24" pos:column="50"/></operator> <call><name pos:line="24" pos:column="51">ntohl<pos:position pos:line="24" pos:column="56"/></name> <argument_list pos:line="24" pos:column="57">(<argument><expr><name pos:line="24" pos:column="58">INADDR_ANY<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="25" pos:column="25">mreq<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">imr_ifindex<pos:position pos:line="25" pos:column="41"/></name></name> <operator pos:line="25" pos:column="42">=<pos:position pos:line="25" pos:column="43"/></operator> <name><name pos:line="25" pos:column="44">se<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">interface<pos:position pos:line="25" pos:column="57"/></name></name></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
			<decl_stmt><decl><type><name><name pos:line="27" pos:column="25">struct<pos:position pos:line="27" pos:column="31"/></name> <name pos:line="27" pos:column="32">ip_mreq<pos:position pos:line="27" pos:column="39"/></name></name></type> <name pos:line="27" pos:column="40">mreq<pos:position pos:line="27" pos:column="44"/></name></decl>;<pos:position pos:line="27" pos:column="45"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="29" pos:column="25">memset<pos:position pos:line="29" pos:column="31"/></name> <argument_list pos:line="29" pos:column="32">(<argument><expr><operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="34">mreq<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="43">sizeof <argument_list pos:line="29" pos:column="50">(<argument><expr><name pos:line="29" pos:column="51">mreq<pos:position pos:line="29" pos:column="55"/></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">mreq<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">.<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">imr_multiaddr<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">.<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="44">s_addr<pos:position pos:line="30" pos:column="50"/></name></name> <operator pos:line="30" pos:column="51">=<pos:position pos:line="30" pos:column="52"/></operator> <name><name pos:line="30" pos:column="53">addr<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">sin_addr<pos:position pos:line="30" pos:column="67"/></name><operator pos:line="30" pos:column="67">.<pos:position pos:line="30" pos:column="68"/></operator><name pos:line="30" pos:column="68">s_addr<pos:position pos:line="30" pos:column="74"/></name></name></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">mreq<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">imr_interface<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">s_addr<pos:position pos:line="31" pos:column="50"/></name></name> <operator pos:line="31" pos:column="51">=<pos:position pos:line="31" pos:column="52"/></operator> <call><name pos:line="31" pos:column="53">ntohl<pos:position pos:line="31" pos:column="58"/></name> <argument_list pos:line="31" pos:column="59">(<argument><expr><name pos:line="31" pos:column="60">INADDR_ANY<pos:position pos:line="31" pos:column="70"/></name></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><call><name pos:line="34" pos:column="29">setsockopt<pos:position pos:line="34" pos:column="39"/></name> <argument_list pos:line="34" pos:column="40">(<argument><expr><name><name pos:line="34" pos:column="41">se<pos:position pos:line="34" pos:column="43"/></name><operator pos:line="34" pos:column="43">-&gt;<pos:position pos:line="34" pos:column="48"/></operator><name pos:line="34" pos:column="45">data<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">client<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">.<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">fd<pos:position pos:line="34" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="61">IPPROTO_IP<pos:position pos:line="34" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="73">IP_MULTICAST_IF<pos:position pos:line="34" pos:column="88"/></name></expr></argument>,
						<argument><expr><operator pos:line="35" pos:column="49">&amp;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="50">mreq<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="56">sizeof <argument_list pos:line="35" pos:column="63">(<argument><expr><name pos:line="35" pos:column="64">mreq<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call> <operator pos:line="35" pos:column="71">!=<pos:position pos:line="35" pos:column="73"/></operator> <literal type="number" pos:line="35" pos:column="74">0<pos:position pos:line="35" pos:column="75"/></literal></expr>)<pos:position pos:line="35" pos:column="76"/></condition><then pos:line="35" pos:column="76">
			<block pos:line="36" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">char<pos:position pos:line="37" pos:column="37"/></name></type> <name><name pos:line="37" pos:column="38">errbuf<pos:position pos:line="37" pos:column="44"/></name><index pos:line="37" pos:column="44">[<expr><literal type="number" pos:line="37" pos:column="45">1024<pos:position pos:line="37" pos:column="49"/></literal></expr>]<pos:position pos:line="37" pos:column="50"/></index></name></decl>;<pos:position pos:line="37" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">ERROR<pos:position pos:line="38" pos:column="38"/></name> <argument_list pos:line="38" pos:column="39">(<argument><expr><literal type="string" pos:line="38" pos:column="40">"setsockopt: %s"<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="39" pos:column="49">sstrerror<pos:position pos:line="39" pos:column="58"/></name> <argument_list pos:line="39" pos:column="59">(<argument><expr><name pos:line="39" pos:column="60">errno<pos:position pos:line="39" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="67">errbuf<pos:position pos:line="39" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="75">sizeof <argument_list pos:line="39" pos:column="82">(<argument><expr><name pos:line="39" pos:column="83">errbuf<pos:position pos:line="39" pos:column="89"/></name></expr></argument>)<pos:position pos:line="39" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="93"/></expr_stmt>
				<return pos:line="40" pos:column="33">return <expr><operator pos:line="40" pos:column="40">(<pos:position pos:line="40" pos:column="41"/></operator><operator pos:line="40" pos:column="41">-<pos:position pos:line="40" pos:column="42"/></operator><literal type="number" pos:line="40" pos:column="42">1<pos:position pos:line="40" pos:column="43"/></literal><operator pos:line="40" pos:column="43">)<pos:position pos:line="40" pos:column="44"/></operator></expr>;<pos:position pos:line="40" pos:column="45"/></return>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>

			<return pos:line="43" pos:column="25">return <expr><operator pos:line="43" pos:column="32">(<pos:position pos:line="43" pos:column="33"/></operator><literal type="number" pos:line="43" pos:column="33">0<pos:position pos:line="43" pos:column="34"/></literal><operator pos:line="43" pos:column="34">)<pos:position pos:line="43" pos:column="35"/></operator></expr>;<pos:position pos:line="43" pos:column="36"/></return>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></then>
	<elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><name><name pos:line="46" pos:column="18">ai<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">ai_family<pos:position pos:line="46" pos:column="31"/></name></name> <operator pos:line="46" pos:column="32">==<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">AF_INET6<pos:position pos:line="46" pos:column="43"/></name></expr>)<pos:position pos:line="46" pos:column="44"/></condition><then pos:line="46" pos:column="44">
	<block pos:line="47" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="48" pos:column="17">struct<pos:position pos:line="48" pos:column="23"/></name> <name pos:line="48" pos:column="24">sockaddr_in6<pos:position pos:line="48" pos:column="36"/></name></name> <modifier pos:line="48" pos:column="37">*<pos:position pos:line="48" pos:column="38"/></modifier></type><name pos:line="48" pos:column="38">addr<pos:position pos:line="48" pos:column="42"/></name> <init pos:line="48" pos:column="43">= <expr><operator pos:line="48" pos:column="45">(<pos:position pos:line="48" pos:column="46"/></operator>struct <name pos:line="48" pos:column="53">sockaddr_in6<pos:position pos:line="48" pos:column="65"/></name> <operator pos:line="48" pos:column="66">*<pos:position pos:line="48" pos:column="67"/></operator><operator pos:line="48" pos:column="67">)<pos:position pos:line="48" pos:column="68"/></operator> <name><name pos:line="48" pos:column="69">ai<pos:position pos:line="48" pos:column="71"/></name><operator pos:line="48" pos:column="71">-&gt;<pos:position pos:line="48" pos:column="76"/></operator><name pos:line="48" pos:column="73">ai_addr<pos:position pos:line="48" pos:column="80"/></name></name></expr></init></decl>;<pos:position pos:line="48" pos:column="81"/></decl_stmt>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><call><name pos:line="50" pos:column="21">IN6_IS_ADDR_MULTICAST<pos:position pos:line="50" pos:column="42"/></name> <argument_list pos:line="50" pos:column="43">(<argument><expr><operator pos:line="50" pos:column="44">&amp;<pos:position pos:line="50" pos:column="49"/></operator><name><name pos:line="50" pos:column="45">addr<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">-&gt;<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="51">sin6_addr<pos:position pos:line="50" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="62"/></condition><then pos:line="50" pos:column="62">
		<block pos:line="51" pos:column="17">{
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">setsockopt<pos:position pos:line="52" pos:column="39"/></name> <argument_list pos:line="52" pos:column="40">(<argument><expr><name><name pos:line="52" pos:column="41">se<pos:position pos:line="52" pos:column="43"/></name><operator pos:line="52" pos:column="43">-&gt;<pos:position pos:line="52" pos:column="48"/></operator><name pos:line="52" pos:column="45">data<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">.<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="50">client<pos:position pos:line="52" pos:column="56"/></name><operator pos:line="52" pos:column="56">.<pos:position pos:line="52" pos:column="57"/></operator><name pos:line="52" pos:column="57">fd<pos:position pos:line="52" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="61">IPPROTO_IPV6<pos:position pos:line="52" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="75">IPV6_MULTICAST_IF<pos:position pos:line="52" pos:column="92"/></name></expr></argument>,
						<argument><expr><operator pos:line="53" pos:column="49">&amp;<pos:position pos:line="53" pos:column="54"/></operator><name><name pos:line="53" pos:column="50">se<pos:position pos:line="53" pos:column="52"/></name><operator pos:line="53" pos:column="52">-&gt;<pos:position pos:line="53" pos:column="57"/></operator><name pos:line="53" pos:column="54">interface<pos:position pos:line="53" pos:column="63"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="54" pos:column="49">sizeof <argument_list pos:line="54" pos:column="56">(<argument><expr><name><name pos:line="54" pos:column="57">se<pos:position pos:line="54" pos:column="59"/></name><operator pos:line="54" pos:column="59">-&gt;<pos:position pos:line="54" pos:column="64"/></operator><name pos:line="54" pos:column="61">interface<pos:position pos:line="54" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="72"/></argument_list></call> <operator pos:line="54" pos:column="73">!=<pos:position pos:line="54" pos:column="75"/></operator> <literal type="number" pos:line="54" pos:column="76">0<pos:position pos:line="54" pos:column="77"/></literal></expr>)<pos:position pos:line="54" pos:column="78"/></condition><then pos:line="54" pos:column="78">
			<block pos:line="55" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="56" pos:column="33">char<pos:position pos:line="56" pos:column="37"/></name></type> <name><name pos:line="56" pos:column="38">errbuf<pos:position pos:line="56" pos:column="44"/></name><index pos:line="56" pos:column="44">[<expr><literal type="number" pos:line="56" pos:column="45">1024<pos:position pos:line="56" pos:column="49"/></literal></expr>]<pos:position pos:line="56" pos:column="50"/></index></name></decl>;<pos:position pos:line="56" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">ERROR<pos:position pos:line="57" pos:column="38"/></name> <argument_list pos:line="57" pos:column="39">(<argument><expr><literal type="string" pos:line="57" pos:column="40">"setsockopt: %s"<pos:position pos:line="57" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="58" pos:column="49">sstrerror<pos:position pos:line="58" pos:column="58"/></name> <argument_list pos:line="58" pos:column="59">(<argument><expr><name pos:line="58" pos:column="60">errno<pos:position pos:line="58" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="67">errbuf<pos:position pos:line="58" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="59" pos:column="57">sizeof <argument_list pos:line="59" pos:column="64">(<argument><expr><name pos:line="59" pos:column="65">errbuf<pos:position pos:line="59" pos:column="71"/></name></expr></argument>)<pos:position pos:line="59" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="75"/></expr_stmt>
				<return pos:line="60" pos:column="33">return <expr><operator pos:line="60" pos:column="40">(<pos:position pos:line="60" pos:column="41"/></operator><operator pos:line="60" pos:column="41">-<pos:position pos:line="60" pos:column="42"/></operator><literal type="number" pos:line="60" pos:column="42">1<pos:position pos:line="60" pos:column="43"/></literal><operator pos:line="60" pos:column="43">)<pos:position pos:line="60" pos:column="44"/></operator></expr>;<pos:position pos:line="60" pos:column="45"/></return>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>

			<return pos:line="63" pos:column="25">return <expr><operator pos:line="63" pos:column="32">(<pos:position pos:line="63" pos:column="33"/></operator><literal type="number" pos:line="63" pos:column="33">0<pos:position pos:line="63" pos:column="34"/></literal><operator pos:line="63" pos:column="34">)<pos:position pos:line="63" pos:column="35"/></operator></expr>;<pos:position pos:line="63" pos:column="36"/></return>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if></elseif></if>

	<comment type="block" pos:line="67" pos:column="9">/* else: Not a multicast interface. */</comment>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name><name pos:line="68" pos:column="13">se<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">-&gt;<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="17">interface<pos:position pos:line="68" pos:column="26"/></name></name> <operator pos:line="68" pos:column="27">!=<pos:position pos:line="68" pos:column="29"/></operator> <literal type="number" pos:line="68" pos:column="30">0<pos:position pos:line="68" pos:column="31"/></literal></expr>)<pos:position pos:line="68" pos:column="32"/></condition><then pos:line="68" pos:column="32">
	<block pos:line="69" pos:column="9">{
<cpp:if pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">if<pos:position pos:line="70" pos:column="4"/></cpp:directive> <expr><call><name pos:line="70" pos:column="5">defined<pos:position pos:line="70" pos:column="12"/></name><argument_list pos:line="70" pos:column="12">(<argument><expr><name pos:line="70" pos:column="13">HAVE_IF_INDEXTONAME<pos:position pos:line="70" pos:column="32"/></name></expr></argument>)<pos:position pos:line="70" pos:column="33"/></argument_list></call> <operator pos:line="70" pos:column="34">&amp;&amp;<pos:position pos:line="70" pos:column="44"/></operator> <name pos:line="70" pos:column="37">HAVE_IF_INDEXTONAME<pos:position pos:line="70" pos:column="56"/></name> <operator pos:line="70" pos:column="57">&amp;&amp;<pos:position pos:line="70" pos:column="67"/></operator> <call><name pos:line="70" pos:column="60">defined<pos:position pos:line="70" pos:column="67"/></name><argument_list pos:line="70" pos:column="67">(<argument><expr><name pos:line="70" pos:column="68">SO_BINDTODEVICE<pos:position pos:line="70" pos:column="83"/></name></expr></argument>)<pos:position pos:line="70" pos:column="84"/></argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">char<pos:position pos:line="71" pos:column="21"/></name></type> <name><name pos:line="71" pos:column="22">interface_name<pos:position pos:line="71" pos:column="36"/></name><index pos:line="71" pos:column="36">[<expr><name pos:line="71" pos:column="37">IFNAMSIZ<pos:position pos:line="71" pos:column="45"/></name></expr>]<pos:position pos:line="71" pos:column="46"/></index></name></decl>;<pos:position pos:line="71" pos:column="47"/></decl_stmt>

		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">if_indextoname<pos:position pos:line="73" pos:column="35"/></name> <argument_list pos:line="73" pos:column="36">(<argument><expr><name><name pos:line="73" pos:column="37">se<pos:position pos:line="73" pos:column="39"/></name><operator pos:line="73" pos:column="39">-&gt;<pos:position pos:line="73" pos:column="44"/></operator><name pos:line="73" pos:column="41">interface<pos:position pos:line="73" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="52">interface_name<pos:position pos:line="73" pos:column="66"/></name></expr></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></call> <operator pos:line="73" pos:column="68">==<pos:position pos:line="73" pos:column="70"/></operator> <name pos:line="73" pos:column="71">NULL<pos:position pos:line="73" pos:column="75"/></name></expr>)<pos:position pos:line="73" pos:column="76"/></condition><then pos:line="73" pos:column="76">
			<block type="pseudo"><return pos:line="74" pos:column="25">return <expr><operator pos:line="74" pos:column="32">(<pos:position pos:line="74" pos:column="33"/></operator><operator pos:line="74" pos:column="33">-<pos:position pos:line="74" pos:column="34"/></operator><literal type="number" pos:line="74" pos:column="34">1<pos:position pos:line="74" pos:column="35"/></literal><operator pos:line="74" pos:column="35">)<pos:position pos:line="74" pos:column="36"/></operator></expr>;<pos:position pos:line="74" pos:column="37"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="76" pos:column="17">DEBUG<pos:position pos:line="76" pos:column="22"/></name> <argument_list pos:line="76" pos:column="23">(<argument><expr><literal type="string" pos:line="76" pos:column="24">"network plugin: Binding socket to interface %s"<pos:position pos:line="76" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="74">interface_name<pos:position pos:line="76" pos:column="88"/></name></expr></argument>)<pos:position pos:line="76" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="90"/></expr_stmt>

		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">setsockopt<pos:position pos:line="78" pos:column="31"/></name> <argument_list pos:line="78" pos:column="32">(<argument><expr><name><name pos:line="78" pos:column="33">se<pos:position pos:line="78" pos:column="35"/></name><operator pos:line="78" pos:column="35">-&gt;<pos:position pos:line="78" pos:column="40"/></operator><name pos:line="78" pos:column="37">data<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">.<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">client<pos:position pos:line="78" pos:column="48"/></name><operator pos:line="78" pos:column="48">.<pos:position pos:line="78" pos:column="49"/></operator><name pos:line="78" pos:column="49">fd<pos:position pos:line="78" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="53">SOL_SOCKET<pos:position pos:line="78" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="65">SO_BINDTODEVICE<pos:position pos:line="78" pos:column="80"/></name></expr></argument>,
					<argument><expr><name pos:line="79" pos:column="41">interface_name<pos:position pos:line="79" pos:column="55"/></name></expr></argument>,
					<argument><expr><sizeof pos:line="80" pos:column="41">sizeof<argument_list pos:line="80" pos:column="47">(<argument><expr><name pos:line="80" pos:column="48">interface_name<pos:position pos:line="80" pos:column="62"/></name></expr></argument>)<pos:position pos:line="80" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="64"/></argument_list></call> <operator pos:line="80" pos:column="65">==<pos:position pos:line="80" pos:column="67"/></operator> <operator pos:line="80" pos:column="68">-<pos:position pos:line="80" pos:column="69"/></operator><literal type="number" pos:line="80" pos:column="69">1<pos:position pos:line="80" pos:column="70"/></literal></expr> )<pos:position pos:line="80" pos:column="72"/></condition><then pos:line="80" pos:column="72">
		<block pos:line="81" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="82" pos:column="25">char<pos:position pos:line="82" pos:column="29"/></name></type> <name><name pos:line="82" pos:column="30">errbuf<pos:position pos:line="82" pos:column="36"/></name><index pos:line="82" pos:column="36">[<expr><literal type="number" pos:line="82" pos:column="37">1024<pos:position pos:line="82" pos:column="41"/></literal></expr>]<pos:position pos:line="82" pos:column="42"/></index></name></decl>;<pos:position pos:line="82" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">ERROR<pos:position pos:line="83" pos:column="30"/></name> <argument_list pos:line="83" pos:column="31">(<argument><expr><literal type="string" pos:line="83" pos:column="32">"setsockopt: %s"<pos:position pos:line="83" pos:column="48"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="84" pos:column="41">sstrerror<pos:position pos:line="84" pos:column="50"/></name> <argument_list pos:line="84" pos:column="51">(<argument><expr><name pos:line="84" pos:column="52">errno<pos:position pos:line="84" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="59">errbuf<pos:position pos:line="84" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="67">sizeof <argument_list pos:line="84" pos:column="74">(<argument><expr><name pos:line="84" pos:column="75">errbuf<pos:position pos:line="84" pos:column="81"/></name></expr></argument>)<pos:position pos:line="84" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="85"/></expr_stmt>
			<return pos:line="85" pos:column="25">return <expr><operator pos:line="85" pos:column="32">(<pos:position pos:line="85" pos:column="33"/></operator><operator pos:line="85" pos:column="33">-<pos:position pos:line="85" pos:column="34"/></operator><literal type="number" pos:line="85" pos:column="34">1<pos:position pos:line="85" pos:column="35"/></literal><operator pos:line="85" pos:column="35">)<pos:position pos:line="85" pos:column="36"/></operator></expr>;<pos:position pos:line="85" pos:column="37"/></return>
		}<pos:position pos:line="86" pos:column="18"/></block></then></if>
<comment type="block" pos:line="87" pos:column="1">/* #endif HAVE_IF_INDEXTONAME &amp;&amp; SO_BINDTODEVICE */</comment>

<cpp:else pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">else<pos:position pos:line="89" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">WARNING<pos:position pos:line="90" pos:column="24"/></name> <argument_list pos:line="90" pos:column="25">(<argument><expr><literal type="string" pos:line="90" pos:column="26">"network plugin: Cannot set the interface on a unicast "<pos:position pos:line="90" pos:column="82"/></literal>
			<literal type="string" pos:line="91" pos:column="25">"socket because "<pos:position pos:line="91" pos:column="42"/></literal>
<cpp:if pos:line="92" pos:column="1"># <cpp:directive pos:line="92" pos:column="3">if<pos:position pos:line="92" pos:column="5"/></cpp:directive> <expr><operator pos:line="92" pos:column="6">!<pos:position pos:line="92" pos:column="7"/></operator><call><name pos:line="92" pos:column="7">defined<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">(<argument><expr><name pos:line="92" pos:column="15">SO_BINDTODEVICE<pos:position pos:line="92" pos:column="30"/></name></expr></argument>)<pos:position pos:line="92" pos:column="31"/></argument_list></call></expr></cpp:if>
			<literal type="string" pos:line="93" pos:column="25">"the \"SO_BINDTODEVICE\" socket option "<pos:position pos:line="93" pos:column="65"/></literal>
<cpp:else pos:line="94" pos:column="1"># <cpp:directive pos:line="94" pos:column="3">else<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:else>
			<literal type="string" pos:line="95" pos:column="25">"the \"if_indextoname\" function "<pos:position pos:line="95" pos:column="59"/></literal>
<cpp:endif pos:line="96" pos:column="1"># <cpp:directive pos:line="96" pos:column="3">endif<pos:position pos:line="96" pos:column="8"/></cpp:directive></cpp:endif>
			<literal type="string" pos:line="97" pos:column="25">"is not available on your system."<pos:position pos:line="97" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif>

	}<pos:position pos:line="100" pos:column="10"/></block></then></if>

	<return pos:line="102" pos:column="9">return <expr><operator pos:line="102" pos:column="16">(<pos:position pos:line="102" pos:column="17"/></operator><literal type="number" pos:line="102" pos:column="17">0<pos:position pos:line="102" pos:column="18"/></literal><operator pos:line="102" pos:column="18">)<pos:position pos:line="102" pos:column="19"/></operator></expr>;<pos:position pos:line="102" pos:column="20"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
