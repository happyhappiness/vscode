<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_398_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">interface_config<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">key<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">ignorelist<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">==<pos:position pos:line="3" pos:column="26"/></operator> <name pos:line="3" pos:column="27">NULL<pos:position pos:line="3" pos:column="31"/></name></expr>)<pos:position pos:line="3" pos:column="32"/></condition><then pos:line="3" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">ignorelist<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">=<pos:position pos:line="4" pos:column="29"/></operator> <call><name pos:line="4" pos:column="30">ignorelist_create<pos:position pos:line="4" pos:column="47"/></name> <argument_list pos:line="4" pos:column="48">(<comment type="block" pos:line="4" pos:column="49">/* invert = */</comment> <argument><expr><literal type="number" pos:line="4" pos:column="64">1<pos:position pos:line="4" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="67"/></expr_stmt></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strcasecmp<pos:position pos:line="6" pos:column="23"/></name> <argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">key<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="30">"Interface"<pos:position pos:line="6" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></call> <operator pos:line="6" pos:column="43">==<pos:position pos:line="6" pos:column="45"/></operator> <literal type="number" pos:line="6" pos:column="46">0<pos:position pos:line="6" pos:column="47"/></literal></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">ignorelist_add<pos:position pos:line="8" pos:column="31"/></name> <argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">ignorelist<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">value<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then>
	<elseif pos:line="10" pos:column="9">else <if pos:line="10" pos:column="14">if <condition pos:line="10" pos:column="17">(<expr><call><name pos:line="10" pos:column="18">strcasecmp<pos:position pos:line="10" pos:column="28"/></name> <argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">key<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="35">"IgnoreSelected"<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call> <operator pos:line="10" pos:column="53">==<pos:position pos:line="10" pos:column="55"/></operator> <literal type="number" pos:line="10" pos:column="56">0<pos:position pos:line="10" pos:column="57"/></literal></expr>)<pos:position pos:line="10" pos:column="58"/></condition><then pos:line="10" pos:column="58">
	<block pos:line="11" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">invert<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><call><name pos:line="13" pos:column="21">IS_TRUE<pos:position pos:line="13" pos:column="28"/></name> <argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">value<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">invert<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">=<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">ignorelist_set_invert<pos:position pos:line="15" pos:column="38"/></name> <argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">ignorelist<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">invert<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if></elseif>
	<else pos:line="17" pos:column="9">else
	<block pos:line="18" pos:column="9">{
		<return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><operator pos:line="19" pos:column="25">-<pos:position pos:line="19" pos:column="26"/></operator><literal type="number" pos:line="19" pos:column="26">1<pos:position pos:line="19" pos:column="27"/></literal><operator pos:line="19" pos:column="27">)<pos:position pos:line="19" pos:column="28"/></operator></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></else></if>

	<return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><literal type="number" pos:line="22" pos:column="17">0<pos:position pos:line="22" pos:column="18"/></literal><operator pos:line="22" pos:column="18">)<pos:position pos:line="22" pos:column="19"/></operator></expr>;<pos:position pos:line="22" pos:column="20"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
