<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2629_collectd-5.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_read_all_once<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <block pos:line="1" pos:column="32">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">status<pos:position pos:line="2" pos:column="13"/></name></decl>;<pos:position pos:line="2" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">return_status<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">read_heap<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">NOTICE<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"No read-functions are registered."<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><literal type="number" pos:line="7" pos:column="13">0<pos:position pos:line="7" pos:column="14"/></literal><operator pos:line="7" pos:column="14">)<pos:position pos:line="7" pos:column="15"/></operator></expr>;<pos:position pos:line="7" pos:column="16"/></return>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>

  <while pos:line="10" pos:column="3">while <condition pos:line="10" pos:column="9">(<expr><literal type="number" pos:line="10" pos:column="10">42<pos:position pos:line="10" pos:column="12"/></literal></expr>)<pos:position pos:line="10" pos:column="13"/></condition> <block pos:line="10" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">read_func_t<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">rf<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">plugin_ctx_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">old_ctx<pos:position pos:line="12" pos:column="25"/></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">rf<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator> <call><name pos:line="14" pos:column="10">c_heap_get_root<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">read_heap<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">rf<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">==<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">NULL<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
      <block type="pseudo"><break pos:line="16" pos:column="7">break;<pos:position pos:line="16" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">old_ctx<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">plugin_set_ctx<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name><name pos:line="18" pos:column="30">rf<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">rf_ctx<pos:position pos:line="18" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">rf<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">rf_type<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">RF_SIMPLE<pos:position pos:line="20" pos:column="33"/></name></expr>)<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34"> <block pos:line="20" pos:column="35">{
      <function_decl><type><name pos:line="21" pos:column="7">int<pos:position pos:line="21" pos:column="10"/></name></type> (<modifier pos:line="21" pos:column="12">*<pos:position pos:line="21" pos:column="13"/></modifier><name pos:line="21" pos:column="13">callback<pos:position pos:line="21" pos:column="21"/></name>)<parameter_list pos:line="21" pos:column="22">(<parameter><decl><type><name pos:line="21" pos:column="23">void<pos:position pos:line="21" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="21" pos:column="28"/></parameter_list>;<pos:position pos:line="21" pos:column="29"/></function_decl>

      <expr_stmt><expr><name pos:line="23" pos:column="7">callback<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <name><name pos:line="23" pos:column="18">rf<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">-&gt;<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="22">rf_callback<pos:position pos:line="23" pos:column="33"/></name></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="24" pos:column="7">status<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call pos:line="24" pos:column="16">(<modifier pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></modifier><name pos:line="24" pos:column="18">callback<pos:position pos:line="24" pos:column="26"/></name>)<argument_list pos:line="24" pos:column="27">()<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <else pos:line="25" pos:column="7">else <block pos:line="25" pos:column="12">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">plugin_read_cb<pos:position pos:line="26" pos:column="21"/></name></type> <name pos:line="26" pos:column="22">callback<pos:position pos:line="26" pos:column="30"/></name></decl>;<pos:position pos:line="26" pos:column="31"/></decl_stmt>

      <expr_stmt><expr><name pos:line="28" pos:column="7">callback<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name><name pos:line="28" pos:column="18">rf<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">rf_callback<pos:position pos:line="28" pos:column="33"/></name></name></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="29" pos:column="7">status<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call pos:line="29" pos:column="16">(<modifier pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></modifier><name pos:line="29" pos:column="18">callback<pos:position pos:line="29" pos:column="26"/></name>)<argument_list pos:line="29" pos:column="27">(<argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="29">rf<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">-&gt;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="33">rf_udata<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">plugin_set_ctx<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">old_ctx<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">status<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">!=<pos:position pos:line="34" pos:column="18"/></operator> <literal type="number" pos:line="34" pos:column="19">0<pos:position pos:line="34" pos:column="20"/></literal></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">NOTICE<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><literal type="string" pos:line="35" pos:column="14">"read-function of plugin `%s' failed."<pos:position pos:line="35" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="54">rf<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">-&gt;<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="58">rf_name<pos:position pos:line="35" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="36" pos:column="7">return_status<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <operator pos:line="36" pos:column="23">-<pos:position pos:line="36" pos:column="24"/></operator><literal type="number" pos:line="36" pos:column="24">1<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">sfree<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><name><name pos:line="39" pos:column="11">rf<pos:position pos:line="39" pos:column="13"/></name><operator pos:line="39" pos:column="13">-&gt;<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="15">rf_name<pos:position pos:line="39" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">destroy_callback<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">void<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">rf<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></while>

  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">return_status<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">)<pos:position pos:line="43" pos:column="25"/></operator></expr>;<pos:position pos:line="43" pos:column="26"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
