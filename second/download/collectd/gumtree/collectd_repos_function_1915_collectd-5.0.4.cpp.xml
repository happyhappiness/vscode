<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1915_collectd-5.0.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">TC_HANDLE_T<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">TC_INIT<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><specifier pos:line="2" pos:column="9">const<pos:position pos:line="2" pos:column="14"/></specifier> <name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">tablename<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">TC_HANDLE_T<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">h<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">STRUCT_GETINFO<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">info<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">tmp<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">socklen_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">s<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">iptc_fn<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">TC_INIT<pos:position pos:line="9" pos:column="26"/></name></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">strlen<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">tablename<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call> <operator pos:line="11" pos:column="31">&gt;=<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="34">TABLE_MAXNAMELEN<pos:position pos:line="11" pos:column="50"/></name></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51"> <block pos:line="11" pos:column="52">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">errno<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">EINVAL<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
	
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">sockfd_use<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29"> <block pos:line="16" pos:column="30">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">sockfd<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">socket<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">TC_AF<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">SOCK_RAW<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">IPPROTO_RAW<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">sockfd<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">&lt;<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32">
			<block type="pseudo"><return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">NULL<pos:position pos:line="19" pos:column="36"/></name></expr>;<pos:position pos:line="19" pos:column="37"/></return></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">sockfd_use<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">++<pos:position pos:line="21" pos:column="21"/></operator></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
<label><name pos:line="22" pos:column="1">retry<pos:position pos:line="22" pos:column="6"/></name>:<pos:position pos:line="22" pos:column="7"/></label>
	<expr_stmt><expr><name pos:line="23" pos:column="9">s<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <sizeof pos:line="23" pos:column="13">sizeof<argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">info<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">strcpy<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name><name pos:line="25" pos:column="16">info<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">.<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">name<pos:position pos:line="25" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="27">tablename<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">getsockopt<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">sockfd<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">TC_IPPROTO<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="44">SO_GET_INFO<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="57">&amp;<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="58">info<pos:position pos:line="26" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="64">&amp;<pos:position pos:line="26" pos:column="69"/></operator><name pos:line="26" pos:column="65">s<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call> <operator pos:line="26" pos:column="68">&lt;<pos:position pos:line="26" pos:column="72"/></operator> <literal type="number" pos:line="26" pos:column="70">0<pos:position pos:line="26" pos:column="71"/></literal></expr>)<pos:position pos:line="26" pos:column="72"/></condition><then pos:line="26" pos:column="72"> <block pos:line="26" pos:column="73">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">--<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">sockfd_use<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">==<pos:position pos:line="27" pos:column="36"/></operator> <literal type="number" pos:line="27" pos:column="37">0<pos:position pos:line="27" pos:column="38"/></literal></expr>)<pos:position pos:line="27" pos:column="39"/></condition><then pos:line="27" pos:column="39"> <block pos:line="27" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">close<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">sockfd<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">sockfd<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <operator pos:line="29" pos:column="34">-<pos:position pos:line="29" pos:column="35"/></operator><literal type="number" pos:line="29" pos:column="35">1<pos:position pos:line="29" pos:column="36"/></literal></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">NULL<pos:position pos:line="31" pos:column="28"/></name></expr>;<pos:position pos:line="31" pos:column="29"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="34" pos:column="9">DEBUGP<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="string" pos:line="34" pos:column="16">"valid_hooks=0x%08x, num_entries=%u, size=%u\n"<pos:position pos:line="34" pos:column="63"/></literal></expr></argument>,
		<argument><expr><name><name pos:line="35" pos:column="17">info<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">valid_hooks<pos:position pos:line="35" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="35">info<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">.<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">num_entries<pos:position pos:line="35" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="53">info<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">.<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="58">size<pos:position pos:line="35" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">(<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">h<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">alloc_handle<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name><name pos:line="37" pos:column="31">info<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">.<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="36">name<pos:position pos:line="37" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="42">info<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">.<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="47">size<pos:position pos:line="37" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="53">info<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">.<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="58">num_entries<pos:position pos:line="37" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call><operator pos:line="37" pos:column="70">)<pos:position pos:line="37" pos:column="71"/></operator>
	    <operator pos:line="38" pos:column="13">==<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">NULL<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">--<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">sockfd_use<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">==<pos:position pos:line="39" pos:column="36"/></operator> <literal type="number" pos:line="39" pos:column="37">0<pos:position pos:line="39" pos:column="38"/></literal></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39"> <block pos:line="39" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">close<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">sockfd<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">sockfd<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <operator pos:line="41" pos:column="34">-<pos:position pos:line="41" pos:column="35"/></operator><literal type="number" pos:line="41" pos:column="35">1<pos:position pos:line="41" pos:column="36"/></literal></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<return pos:line="43" pos:column="17">return <expr><name pos:line="43" pos:column="24">NULL<pos:position pos:line="43" pos:column="28"/></name></expr>;<pos:position pos:line="43" pos:column="29"/></return>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="46" pos:column="9">/* Initialize current state */</comment>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">h<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">info<pos:position pos:line="47" pos:column="16"/></name></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">info<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="49" pos:column="9">h<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">entries<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">-&gt;<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="21">size<pos:position pos:line="49" pos:column="25"/></name></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <name><name pos:line="49" pos:column="28">h<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">-&gt;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="31">info<pos:position pos:line="49" pos:column="35"/></name><operator pos:line="49" pos:column="35">.<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="36">size<pos:position pos:line="49" pos:column="40"/></name></name></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="51" pos:column="9">tmp<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <sizeof pos:line="51" pos:column="15">sizeof<argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">STRUCT_GET_ENTRIES<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></sizeof> <operator pos:line="51" pos:column="42">+<pos:position pos:line="51" pos:column="43"/></operator> <name><name pos:line="51" pos:column="44">h<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">-&gt;<pos:position pos:line="51" pos:column="50"/></operator><name pos:line="51" pos:column="47">info<pos:position pos:line="51" pos:column="51"/></name><operator pos:line="51" pos:column="51">.<pos:position pos:line="51" pos:column="52"/></operator><name pos:line="51" pos:column="52">size<pos:position pos:line="51" pos:column="56"/></name></name></expr>;<pos:position pos:line="51" pos:column="57"/></expr_stmt>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><call><name pos:line="53" pos:column="13">getsockopt<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">sockfd<pos:position pos:line="53" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="32">TC_IPPROTO<pos:position pos:line="53" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="44">SO_GET_ENTRIES<pos:position pos:line="53" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="60">h<pos:position pos:line="53" pos:column="61"/></name><operator pos:line="53" pos:column="61">-&gt;<pos:position pos:line="53" pos:column="66"/></operator><name pos:line="53" pos:column="63">entries<pos:position pos:line="53" pos:column="70"/></name></name></expr></argument>,
		       <argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">tmp<pos:position pos:line="54" pos:column="28"/></name></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call> <operator pos:line="54" pos:column="30">&lt;<pos:position pos:line="54" pos:column="34"/></operator> <literal type="number" pos:line="54" pos:column="32">0<pos:position pos:line="54" pos:column="33"/></literal></expr>)<pos:position pos:line="54" pos:column="34"/></condition><then pos:line="54" pos:column="34">
		<block type="pseudo"><goto pos:line="55" pos:column="17">goto <name pos:line="55" pos:column="22">error<pos:position pos:line="55" pos:column="27"/></name>;<pos:position pos:line="55" pos:column="28"/></goto></block></then></if>

<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">IPTC_DEBUG2<pos:position pos:line="57" pos:column="19"/></name></cpp:ifdef>
	<block pos:line="58" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">int<pos:position pos:line="59" pos:column="20"/></name></type> <name pos:line="59" pos:column="21">fd<pos:position pos:line="59" pos:column="23"/></name> <init pos:line="59" pos:column="24">= <expr><call><name pos:line="59" pos:column="26">open<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><literal type="string" pos:line="59" pos:column="31">"/tmp/libiptc-so_get_entries.blob"<pos:position pos:line="59" pos:column="65"/></literal></expr></argument>, 
				<argument><expr><name pos:line="60" pos:column="33">O_CREAT<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">|<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">O_WRONLY<pos:position pos:line="60" pos:column="49"/></name></expr></argument>)<pos:position pos:line="60" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="51"/></decl_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">fd<pos:position pos:line="61" pos:column="23"/></name> <operator pos:line="61" pos:column="24">&gt;=<pos:position pos:line="61" pos:column="29"/></operator> <literal type="number" pos:line="61" pos:column="27">0<pos:position pos:line="61" pos:column="28"/></literal></expr>)<pos:position pos:line="61" pos:column="29"/></condition><then pos:line="61" pos:column="29"> <block pos:line="61" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">write<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">fd<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="35">h<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">-&gt;<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="38">entries<pos:position pos:line="62" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="47">tmp<pos:position pos:line="62" pos:column="50"/></name></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">close<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">fd<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">parse_table<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">h<pos:position pos:line="68" pos:column="26"/></name></expr></argument>)<pos:position pos:line="68" pos:column="27"/></argument_list></call> <operator pos:line="68" pos:column="28">&lt;<pos:position pos:line="68" pos:column="32"/></operator> <literal type="number" pos:line="68" pos:column="30">0<pos:position pos:line="68" pos:column="31"/></literal></expr>)<pos:position pos:line="68" pos:column="32"/></condition><then pos:line="68" pos:column="32">
		<block type="pseudo"><goto pos:line="69" pos:column="17">goto <name pos:line="69" pos:column="22">error<pos:position pos:line="69" pos:column="27"/></name>;<pos:position pos:line="69" pos:column="28"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="71" pos:column="9">CHECK<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">(<argument><expr><name pos:line="71" pos:column="15">h<pos:position pos:line="71" pos:column="16"/></name></expr></argument>)<pos:position pos:line="71" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="18"/></expr_stmt>
	<return pos:line="72" pos:column="9">return <expr><name pos:line="72" pos:column="16">h<pos:position pos:line="72" pos:column="17"/></name></expr>;<pos:position pos:line="72" pos:column="18"/></return>
<label><name pos:line="73" pos:column="1">error<pos:position pos:line="73" pos:column="6"/></name>:<pos:position pos:line="73" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">TC_FREE<pos:position pos:line="74" pos:column="16"/></name><argument_list pos:line="74" pos:column="16">(<argument><expr><operator pos:line="74" pos:column="17">&amp;<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="18">h<pos:position pos:line="74" pos:column="19"/></name></expr></argument>)<pos:position pos:line="74" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
	<comment type="block" pos:line="75" pos:column="9">/* A different process changed the ruleset size, retry */</comment>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">errno<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">==<pos:position pos:line="76" pos:column="21"/></operator> <name pos:line="76" pos:column="22">EAGAIN<pos:position pos:line="76" pos:column="28"/></name></expr>)<pos:position pos:line="76" pos:column="29"/></condition><then pos:line="76" pos:column="29">
		<block type="pseudo"><goto pos:line="77" pos:column="17">goto <name pos:line="77" pos:column="22">retry<pos:position pos:line="77" pos:column="27"/></name>;<pos:position pos:line="77" pos:column="28"/></goto></block></then></if>
	<return pos:line="78" pos:column="9">return <expr><name pos:line="78" pos:column="16">NULL<pos:position pos:line="78" pos:column="20"/></name></expr>;<pos:position pos:line="78" pos:column="21"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
