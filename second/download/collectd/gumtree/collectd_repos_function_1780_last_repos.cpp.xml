<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1780_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dpdk_helper_spawn<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">dpdk_helper_ctx_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">phc<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list> <block pos:line="1" pos:column="54">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">errbuf<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><name pos:line="2" pos:column="15">ERR_BUF_SIZE<pos:position pos:line="2" pos:column="27"/></name></expr>]<pos:position pos:line="2" pos:column="28"/></index></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">phc<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">==<pos:position pos:line="3" pos:column="13"/></operator> <name pos:line="3" pos:column="14">NULL<pos:position pos:line="3" pos:column="18"/></name></expr>)<pos:position pos:line="3" pos:column="19"/></condition><then pos:line="3" pos:column="19"> <block pos:line="3" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">ERROR<pos:position pos:line="4" pos:column="10"/></name><argument_list pos:line="4" pos:column="10">(<argument><expr><literal type="string" pos:line="4" pos:column="11">"Invalid argument(phc)"<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><operator pos:line="5" pos:column="12">-<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">EINVAL<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DPDK_HELPER_TRACE<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">phc<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">shm_name<pos:position pos:line="8" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">phc<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">eal_initialized<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">phc<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">cmd_wait_time<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name pos:line="11" pos:column="24">MS_TO_CDTIME_T<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">DPDK_CDM_DEFAULT_TIMEOUT<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/*
   * Create a pipe for helper stdout back to collectd. This is necessary for
   * logging EAL failures, as rte_eal_init() calls rte_panic().
   */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">phc<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">pipes<pos:position pos:line="17" pos:column="17"/></name><index pos:line="17" pos:column="17">[<expr><literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr>]<pos:position pos:line="17" pos:column="20"/></index></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21"> <block pos:line="17" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">DEBUG<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"dpdk_helper_spawn: collectd closing helper pipe %d"<pos:position pos:line="18" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="65">phc<pos:position pos:line="18" pos:column="68"/></name><operator pos:line="18" pos:column="68">-&gt;<pos:position pos:line="18" pos:column="73"/></operator><name pos:line="18" pos:column="70">pipes<pos:position pos:line="18" pos:column="75"/></name><index pos:line="18" pos:column="75">[<expr><literal type="number" pos:line="18" pos:column="76">1<pos:position pos:line="18" pos:column="77"/></literal></expr>]<pos:position pos:line="18" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then> <else pos:line="19" pos:column="5">else <block pos:line="19" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"dpdk_helper_spawn: collectd helper pipe %d, not closing"<pos:position pos:line="20" pos:column="68"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="21" pos:column="11">phc<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">pipes<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><literal type="number" pos:line="21" pos:column="22">1<pos:position pos:line="21" pos:column="23"/></literal></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></else></if>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><call><name pos:line="24" pos:column="7">pipe<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name><name pos:line="24" pos:column="12">phc<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">pipes<pos:position pos:line="24" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="23"/></argument_list></call> <operator pos:line="24" pos:column="24">!=<pos:position pos:line="24" pos:column="26"/></operator> <literal type="number" pos:line="24" pos:column="27">0<pos:position pos:line="24" pos:column="28"/></literal></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29"> <block pos:line="24" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">DEBUG<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><literal type="string" pos:line="25" pos:column="11">"dpdk_helper_spawn: Could not create helper pipe: %s"<pos:position pos:line="25" pos:column="64"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="26" pos:column="11">sstrerror<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">errno<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">errbuf<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof<argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">errbuf<pos:position pos:line="26" pos:column="49"/></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><literal type="number" pos:line="27" pos:column="13">1<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="30" pos:column="3">int<pos:position pos:line="30" pos:column="6"/></name></type> <name pos:line="30" pos:column="7">pipe0_flags<pos:position pos:line="30" pos:column="18"/></name> <init pos:line="30" pos:column="19">= <expr><call><name pos:line="30" pos:column="21">fcntl<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name><name pos:line="30" pos:column="27">phc<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">pipes<pos:position pos:line="30" pos:column="37"/></name><index pos:line="30" pos:column="37">[<expr><literal type="number" pos:line="30" pos:column="38">0<pos:position pos:line="30" pos:column="39"/></literal></expr>]<pos:position pos:line="30" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">F_GETFL<pos:position pos:line="30" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="51">0<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="31" pos:column="3">int<pos:position pos:line="31" pos:column="6"/></name></type> <name pos:line="31" pos:column="7">pipe1_flags<pos:position pos:line="31" pos:column="18"/></name> <init pos:line="31" pos:column="19">= <expr><call><name pos:line="31" pos:column="21">fcntl<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name><name pos:line="31" pos:column="27">phc<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">pipes<pos:position pos:line="31" pos:column="37"/></name><index pos:line="31" pos:column="37">[<expr><literal type="number" pos:line="31" pos:column="38">1<pos:position pos:line="31" pos:column="39"/></literal></expr>]<pos:position pos:line="31" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">F_GETFL<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="54"/></decl_stmt>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">pipe0_flags<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">==<pos:position pos:line="32" pos:column="21"/></operator> <operator pos:line="32" pos:column="22">-<pos:position pos:line="32" pos:column="23"/></operator><literal type="number" pos:line="32" pos:column="23">1<pos:position pos:line="32" pos:column="24"/></literal> <operator pos:line="32" pos:column="25">||<pos:position pos:line="32" pos:column="27"/></operator> <name pos:line="32" pos:column="28">pipe1_flags<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">==<pos:position pos:line="32" pos:column="42"/></operator> <operator pos:line="32" pos:column="43">-<pos:position pos:line="32" pos:column="44"/></operator><literal type="number" pos:line="32" pos:column="44">1<pos:position pos:line="32" pos:column="45"/></literal></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">WARNING<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="string" pos:line="33" pos:column="13">"dpdk_helper_spawn: error setting up pipe flags: %s"<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="34" pos:column="13">sstrerror<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">errno<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="30">errbuf<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="38">sizeof<argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">errbuf<pos:position pos:line="34" pos:column="51"/></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>
  <decl_stmt><decl><type><name pos:line="36" pos:column="3">int<pos:position pos:line="36" pos:column="6"/></name></type> <name pos:line="36" pos:column="7">pipe0_err<pos:position pos:line="36" pos:column="16"/></name> <init pos:line="36" pos:column="17">= <expr><call><name pos:line="36" pos:column="19">fcntl<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name><name pos:line="36" pos:column="25">phc<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">-&gt;<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="30">pipes<pos:position pos:line="36" pos:column="35"/></name><index pos:line="36" pos:column="35">[<expr><literal type="number" pos:line="36" pos:column="36">0<pos:position pos:line="36" pos:column="37"/></literal></expr>]<pos:position pos:line="36" pos:column="38"/></index></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">F_SETFL<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">pipe1_flags<pos:position pos:line="36" pos:column="60"/></name> <operator pos:line="36" pos:column="61">|<pos:position pos:line="36" pos:column="62"/></operator> <name pos:line="36" pos:column="63">O_NONBLOCK<pos:position pos:line="36" pos:column="73"/></name></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="75"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="37" pos:column="3">int<pos:position pos:line="37" pos:column="6"/></name></type> <name pos:line="37" pos:column="7">pipe1_err<pos:position pos:line="37" pos:column="16"/></name> <init pos:line="37" pos:column="17">= <expr><call><name pos:line="37" pos:column="19">fcntl<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name><name pos:line="37" pos:column="25">phc<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">pipes<pos:position pos:line="37" pos:column="35"/></name><index pos:line="37" pos:column="35">[<expr><literal type="number" pos:line="37" pos:column="36">1<pos:position pos:line="37" pos:column="37"/></literal></expr>]<pos:position pos:line="37" pos:column="38"/></index></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">F_SETFL<pos:position pos:line="37" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="49">pipe0_flags<pos:position pos:line="37" pos:column="60"/></name> <operator pos:line="37" pos:column="61">|<pos:position pos:line="37" pos:column="62"/></operator> <name pos:line="37" pos:column="63">O_NONBLOCK<pos:position pos:line="37" pos:column="73"/></name></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="75"/></decl_stmt>
  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">pipe0_err<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">==<pos:position pos:line="38" pos:column="19"/></operator> <operator pos:line="38" pos:column="20">-<pos:position pos:line="38" pos:column="21"/></operator><literal type="number" pos:line="38" pos:column="21">1<pos:position pos:line="38" pos:column="22"/></literal> <operator pos:line="38" pos:column="23">||<pos:position pos:line="38" pos:column="25"/></operator> <name pos:line="38" pos:column="26">pipe1_err<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">==<pos:position pos:line="38" pos:column="38"/></operator> <operator pos:line="38" pos:column="39">-<pos:position pos:line="38" pos:column="40"/></operator><literal type="number" pos:line="38" pos:column="40">1<pos:position pos:line="38" pos:column="41"/></literal></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">WARNING<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><literal type="string" pos:line="39" pos:column="13">"dpdk_helper_spawn: error setting up pipes: %s"<pos:position pos:line="39" pos:column="60"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="40" pos:column="13">sstrerror<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">errno<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">errbuf<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="38">sizeof<argument_list pos:line="40" pos:column="44">(<argument><expr><name pos:line="40" pos:column="45">errbuf<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="43" pos:column="3">pid_t<pos:position pos:line="43" pos:column="8"/></name></type> <name pos:line="43" pos:column="9">pid<pos:position pos:line="43" pos:column="12"/></name> <init pos:line="43" pos:column="13">= <expr><call><name pos:line="43" pos:column="15">fork<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">()<pos:position pos:line="43" pos:column="21"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="22"/></decl_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">pid<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">&gt;<pos:position pos:line="44" pos:column="15"/></operator> <literal type="number" pos:line="44" pos:column="13">0<pos:position pos:line="44" pos:column="14"/></literal></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15"> <block pos:line="44" pos:column="16">{
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">phc<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">-&gt;<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="10">pid<pos:position pos:line="45" pos:column="13"/></name></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">pid<pos:position pos:line="45" pos:column="19"/></name></expr>;<pos:position pos:line="45" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">close<pos:position pos:line="46" pos:column="10"/></name><argument_list pos:line="46" pos:column="10">(<argument><expr><name><name pos:line="46" pos:column="11">phc<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">pipes<pos:position pos:line="46" pos:column="21"/></name><index pos:line="46" pos:column="21">[<expr><literal type="number" pos:line="46" pos:column="22">1<pos:position pos:line="46" pos:column="23"/></literal></expr>]<pos:position pos:line="46" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">DEBUG<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><literal type="string" pos:line="47" pos:column="11">"%s:dpdk_helper_spawn: helper pid %lu"<pos:position pos:line="47" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="51">phc<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">-&gt;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="56">shm_name<pos:position pos:line="47" pos:column="64"/></name></name></expr></argument>,
          <argument><expr><operator pos:line="48" pos:column="11">(<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">long<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">)<pos:position pos:line="48" pos:column="17"/></operator><name><name pos:line="48" pos:column="17">phc<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">-&gt;<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="22">pid<pos:position pos:line="48" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="49" pos:column="4"/></block></then> <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><name pos:line="49" pos:column="14">pid<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">==<pos:position pos:line="49" pos:column="20"/></operator> <literal type="number" pos:line="49" pos:column="21">0<pos:position pos:line="49" pos:column="22"/></literal></expr>)<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23"> <block pos:line="49" pos:column="24">{
    <comment type="block" pos:line="50" pos:column="5">/* Replace stdout with a pipe to collectd. */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">close<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name><name pos:line="51" pos:column="11">phc<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">-&gt;<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="16">pipes<pos:position pos:line="51" pos:column="21"/></name><index pos:line="51" pos:column="21">[<expr><literal type="number" pos:line="51" pos:column="22">0<pos:position pos:line="51" pos:column="23"/></literal></expr>]<pos:position pos:line="51" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="51" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">close<pos:position pos:line="52" pos:column="10"/></name><argument_list pos:line="52" pos:column="10">(<argument><expr><name pos:line="52" pos:column="11">STDOUT_FILENO<pos:position pos:line="52" pos:column="24"/></name></expr></argument>)<pos:position pos:line="52" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">dup2<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name><name pos:line="53" pos:column="10">phc<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">pipes<pos:position pos:line="53" pos:column="20"/></name><index pos:line="53" pos:column="20">[<expr><literal type="number" pos:line="53" pos:column="21">1<pos:position pos:line="53" pos:column="22"/></literal></expr>]<pos:position pos:line="53" pos:column="23"/></index></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="25">STDOUT_FILENO<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">DPDK_CHILD_TRACE<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name><name pos:line="54" pos:column="22">phc<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">-&gt;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="27">shm_name<pos:position pos:line="54" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">dpdk_helper_worker<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">phc<pos:position pos:line="55" pos:column="27"/></name></expr></argument>)<pos:position pos:line="55" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">exit<pos:position pos:line="56" pos:column="9"/></name><argument_list pos:line="56" pos:column="9">(<argument><expr><literal type="number" pos:line="56" pos:column="10">0<pos:position pos:line="56" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if></elseif> <else pos:line="57" pos:column="5">else <block pos:line="57" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">ERROR<pos:position pos:line="58" pos:column="10"/></name><argument_list pos:line="58" pos:column="10">(<argument><expr><literal type="string" pos:line="58" pos:column="11">"dpdk_helper_start: Failed to fork helper process: %s"<pos:position pos:line="58" pos:column="65"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="59" pos:column="11">sstrerror<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">errno<pos:position pos:line="59" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="28">errbuf<pos:position pos:line="59" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="36">sizeof<argument_list pos:line="59" pos:column="42">(<argument><expr><name pos:line="59" pos:column="43">errbuf<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><operator pos:line="60" pos:column="12">-<pos:position pos:line="60" pos:column="13"/></operator><literal type="number" pos:line="60" pos:column="13">1<pos:position pos:line="60" pos:column="14"/></literal></expr>;<pos:position pos:line="60" pos:column="15"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></else></if>

  <return pos:line="63" pos:column="3">return <expr><literal type="number" pos:line="63" pos:column="10">0<pos:position pos:line="63" pos:column="11"/></literal></expr>;<pos:position pos:line="63" pos:column="12"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
