<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1182_collectd-4.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wh_write_json<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">data_set_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ds<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">value_list_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">vl<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="73">/* {{{ */</comment>
                <parameter><decl><type><name pos:line="2" pos:column="17">wh_callback_t<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">cb<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="6" pos:column="9">pthread_mutex_lock<pos:position pos:line="6" pos:column="27"/></name> <argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name><name pos:line="6" pos:column="30">cb<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">send_lock<pos:position pos:line="6" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt>

        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">cb<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">curl<pos:position pos:line="8" pos:column="21"/></name></name> <operator pos:line="8" pos:column="22">==<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="25">NULL<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
        <block pos:line="9" pos:column="9">{
                <expr_stmt><expr><name pos:line="10" pos:column="17">status<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <call><name pos:line="10" pos:column="26">wh_callback_init<pos:position pos:line="10" pos:column="42"/></name> <argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">cb<pos:position pos:line="10" pos:column="46"/></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
                <if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">status<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">!=<pos:position pos:line="11" pos:column="30"/></operator> <literal type="number" pos:line="11" pos:column="31">0<pos:position pos:line="11" pos:column="32"/></literal></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
                <block pos:line="12" pos:column="17">{
                        <expr_stmt><expr><call><name pos:line="13" pos:column="25">ERROR<pos:position pos:line="13" pos:column="30"/></name> <argument_list pos:line="13" pos:column="31">(<argument><expr><literal type="string" pos:line="13" pos:column="32">"write_http plugin: wh_callback_init failed."<pos:position pos:line="13" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="14" pos:column="25">pthread_mutex_unlock<pos:position pos:line="14" pos:column="45"/></name> <argument_list pos:line="14" pos:column="46">(<argument><expr><operator pos:line="14" pos:column="47">&amp;<pos:position pos:line="14" pos:column="52"/></operator><name><name pos:line="14" pos:column="48">cb<pos:position pos:line="14" pos:column="50"/></name><operator pos:line="14" pos:column="50">-&gt;<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="52">send_lock<pos:position pos:line="14" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>
                        <return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">(<pos:position pos:line="15" pos:column="33"/></operator><operator pos:line="15" pos:column="33">-<pos:position pos:line="15" pos:column="34"/></operator><literal type="number" pos:line="15" pos:column="34">1<pos:position pos:line="15" pos:column="35"/></literal><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator></expr>;<pos:position pos:line="15" pos:column="37"/></return>
                }<pos:position pos:line="16" pos:column="18"/></block></then></if>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">format_json_value_list<pos:position pos:line="19" pos:column="40"/></name> <argument_list pos:line="19" pos:column="41">(<argument><expr><name><name pos:line="19" pos:column="42">cb<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">send_buffer<pos:position pos:line="19" pos:column="57"/></name></name></expr></argument>,
                        <argument><expr><operator pos:line="20" pos:column="25">&amp;<pos:position pos:line="20" pos:column="30"/></operator><name><name pos:line="20" pos:column="26">cb<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">send_buffer_fill<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>,
                        <argument><expr><operator pos:line="21" pos:column="25">&amp;<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="26">cb<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">send_buffer_free<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="22" pos:column="25">ds<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="29">vl<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">status<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">==<pos:position pos:line="23" pos:column="22"/></operator> <operator pos:line="23" pos:column="23">(<pos:position pos:line="23" pos:column="24"/></operator><operator pos:line="23" pos:column="24">-<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">ENOMEM<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
        <block pos:line="24" pos:column="9">{
                <expr_stmt><expr><name pos:line="25" pos:column="17">status<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <call><name pos:line="25" pos:column="26">wh_flush_nolock<pos:position pos:line="25" pos:column="41"/></name> <argument_list pos:line="25" pos:column="42">(<comment type="block" pos:line="25" pos:column="43">/* timeout = */</comment> <argument><expr><operator pos:line="25" pos:column="59">-<pos:position pos:line="25" pos:column="60"/></operator><literal type="number" pos:line="25" pos:column="60">1<pos:position pos:line="25" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">cb<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
                <if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">status<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">!=<pos:position pos:line="26" pos:column="30"/></operator> <literal type="number" pos:line="26" pos:column="31">0<pos:position pos:line="26" pos:column="32"/></literal></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
                <block pos:line="27" pos:column="17">{
                        <expr_stmt><expr><call><name pos:line="28" pos:column="25">wh_reset_buffer<pos:position pos:line="28" pos:column="40"/></name> <argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">cb<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="29" pos:column="25">pthread_mutex_unlock<pos:position pos:line="29" pos:column="45"/></name> <argument_list pos:line="29" pos:column="46">(<argument><expr><operator pos:line="29" pos:column="47">&amp;<pos:position pos:line="29" pos:column="52"/></operator><name><name pos:line="29" pos:column="48">cb<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">-&gt;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="52">send_lock<pos:position pos:line="29" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="63"/></expr_stmt>
                        <return pos:line="30" pos:column="25">return <expr><operator pos:line="30" pos:column="32">(<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">status<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">)<pos:position pos:line="30" pos:column="40"/></operator></expr>;<pos:position pos:line="30" pos:column="41"/></return>
                }<pos:position pos:line="31" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="33" pos:column="17">status<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <call><name pos:line="33" pos:column="26">format_json_value_list<pos:position pos:line="33" pos:column="48"/></name> <argument_list pos:line="33" pos:column="49">(<argument><expr><name><name pos:line="33" pos:column="50">cb<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">-&gt;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="54">send_buffer<pos:position pos:line="33" pos:column="65"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="34" pos:column="33">&amp;<pos:position pos:line="34" pos:column="38"/></operator><name><name pos:line="34" pos:column="34">cb<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">send_buffer_fill<pos:position pos:line="34" pos:column="54"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="35" pos:column="33">&amp;<pos:position pos:line="35" pos:column="38"/></operator><name><name pos:line="35" pos:column="34">cb<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">-&gt;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="38">send_buffer_free<pos:position pos:line="35" pos:column="54"/></name></name></expr></argument>,
                                <argument><expr><name pos:line="36" pos:column="33">ds<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">vl<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">status<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">!=<pos:position pos:line="38" pos:column="22"/></operator> <literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25">
        <block pos:line="39" pos:column="9">{
                <expr_stmt><expr><call><name pos:line="40" pos:column="17">pthread_mutex_unlock<pos:position pos:line="40" pos:column="37"/></name> <argument_list pos:line="40" pos:column="38">(<argument><expr><operator pos:line="40" pos:column="39">&amp;<pos:position pos:line="40" pos:column="44"/></operator><name><name pos:line="40" pos:column="40">cb<pos:position pos:line="40" pos:column="42"/></name><operator pos:line="40" pos:column="42">-&gt;<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="44">send_lock<pos:position pos:line="40" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
                <return pos:line="41" pos:column="17">return <expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">status<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">)<pos:position pos:line="41" pos:column="32"/></operator></expr>;<pos:position pos:line="41" pos:column="33"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="44" pos:column="9">DEBUG<pos:position pos:line="44" pos:column="14"/></name> <argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"write_http plugin: &lt;%s&gt; buffer %zu/%zu (%g%%)"<pos:position pos:line="44" pos:column="69"/></literal></expr></argument>,
                        <argument><expr><name><name pos:line="45" pos:column="25">cb<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">location<pos:position pos:line="45" pos:column="37"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="46" pos:column="25">cb<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">-&gt;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="29">send_buffer_fill<pos:position pos:line="46" pos:column="45"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="47">sizeof <argument_list pos:line="46" pos:column="54">(<argument><expr><name><name pos:line="46" pos:column="55">cb<pos:position pos:line="46" pos:column="57"/></name><operator pos:line="46" pos:column="57">-&gt;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="59">send_buffer<pos:position pos:line="46" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><literal type="number" pos:line="47" pos:column="25">100.0<pos:position pos:line="47" pos:column="30"/></literal> <operator pos:line="47" pos:column="31">*<pos:position pos:line="47" pos:column="32"/></operator> <operator pos:line="47" pos:column="33">(<pos:position pos:line="47" pos:column="34"/></operator><operator pos:line="47" pos:column="34">(<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="35">double<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">)<pos:position pos:line="47" pos:column="42"/></operator> <name><name pos:line="47" pos:column="43">cb<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">-&gt;<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="47">send_buffer_fill<pos:position pos:line="47" pos:column="63"/></name></name><operator pos:line="47" pos:column="63">)<pos:position pos:line="47" pos:column="64"/></operator> <operator pos:line="47" pos:column="65">/<pos:position pos:line="47" pos:column="66"/></operator> <operator pos:line="47" pos:column="67">(<pos:position pos:line="47" pos:column="68"/></operator><operator pos:line="47" pos:column="68">(<pos:position pos:line="47" pos:column="69"/></operator><name pos:line="47" pos:column="69">double<pos:position pos:line="47" pos:column="75"/></name><operator pos:line="47" pos:column="75">)<pos:position pos:line="47" pos:column="76"/></operator> <sizeof pos:line="47" pos:column="77">sizeof <argument_list pos:line="47" pos:column="84">(<argument><expr><name><name pos:line="47" pos:column="85">cb<pos:position pos:line="47" pos:column="87"/></name><operator pos:line="47" pos:column="87">-&gt;<pos:position pos:line="47" pos:column="92"/></operator><name pos:line="47" pos:column="89">send_buffer<pos:position pos:line="47" pos:column="100"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="101"/></argument_list></sizeof><operator pos:line="47" pos:column="101">)<pos:position pos:line="47" pos:column="102"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="104"/></expr_stmt>

        <comment type="block" pos:line="49" pos:column="9">/* Check if we have enough space for this command. */</comment>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">pthread_mutex_unlock<pos:position pos:line="50" pos:column="29"/></name> <argument_list pos:line="50" pos:column="30">(<argument><expr><operator pos:line="50" pos:column="31">&amp;<pos:position pos:line="50" pos:column="36"/></operator><name><name pos:line="50" pos:column="32">cb<pos:position pos:line="50" pos:column="34"/></name><operator pos:line="50" pos:column="34">-&gt;<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="36">send_lock<pos:position pos:line="50" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>

        <return pos:line="52" pos:column="9">return <expr><operator pos:line="52" pos:column="16">(<pos:position pos:line="52" pos:column="17"/></operator><literal type="number" pos:line="52" pos:column="17">0<pos:position pos:line="52" pos:column="18"/></literal><operator pos:line="52" pos:column="18">)<pos:position pos:line="52" pos:column="19"/></operator></expr>;<pos:position pos:line="52" pos:column="20"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
