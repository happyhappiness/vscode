<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_616_collectd-4.1.0.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">yy_stack_print<pos:position pos:line="2" pos:column="15"/></name> <argument_list pos:line="2" pos:column="16">(<argument><expr><name pos:line="2" pos:column="17">yytype_int16<pos:position pos:line="2" pos:column="29"/></name> <operator pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">bottom<pos:position pos:line="2" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="39">yytype_int16<pos:position pos:line="2" pos:column="51"/></name> <operator pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></operator><name pos:line="2" pos:column="53">top<pos:position pos:line="2" pos:column="56"/></name></expr></argument>)<pos:position pos:line="2" pos:column="57"/></argument_list>
<cpp:else pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">else<pos:position pos:line="3" pos:column="6"/></cpp:directive></cpp:else>
static <name pos:line="4" pos:column="8">void<pos:position pos:line="4" pos:column="12"/></name>
<name pos:line="5" pos:column="1">yy_stack_print<pos:position pos:line="5" pos:column="15"/></name> <argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">bottom<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="25">top<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list>
    <name pos:line="6" pos:column="5">yytype_int16<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><name pos:line="6" pos:column="19">bottom<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">yytype_int16<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">top<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
<block pos:line="9" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">YYFPRINTF<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">stderr<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="22">"Stack now"<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init pos:line="11" pos:column="8">;<pos:position pos:line="11" pos:column="9"/></init> <condition><expr><name pos:line="11" pos:column="10">bottom<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&lt;=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="20">top<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></condition> <incr><expr><operator pos:line="11" pos:column="25">++<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">bottom<pos:position pos:line="11" pos:column="33"/></name></expr></incr>)<pos:position pos:line="11" pos:column="34"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">YYFPRINTF<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">stderr<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="24">" %d"<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="31">*<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">bottom<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">YYFPRINTF<pos:position pos:line="13" pos:column="12"/></name> <argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">stderr<pos:position pos:line="13" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="22">"\n"<pos:position pos:line="13" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></unit>
