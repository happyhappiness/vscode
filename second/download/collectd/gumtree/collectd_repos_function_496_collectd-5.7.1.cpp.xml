<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_496_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">value_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">csnmp_value_list_to_value<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">variable_list<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">vl<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">type<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">double<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">scale<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">double<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">shift<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                                         <parameter><decl><type><specifier pos:line="3" pos:column="42">const<pos:position pos:line="3" pos:column="47"/></specifier> <name pos:line="3" pos:column="48">char<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">host_name<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>,
                                         <parameter><decl><type><specifier pos:line="4" pos:column="42">const<pos:position pos:line="4" pos:column="47"/></specifier> <name pos:line="4" pos:column="48">char<pos:position pos:line="4" pos:column="52"/></name> <modifier pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></modifier></type><name pos:line="4" pos:column="54">data_name<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="64"/></parameter_list> <block pos:line="4" pos:column="65">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">value_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">ret<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uint64_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">tmp_unsigned<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="number" pos:line="6" pos:column="27">0<pos:position pos:line="6" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int64_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">tmp_signed<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">_Bool<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">defined<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">1<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <comment type="block" pos:line="9" pos:column="3">/* Set to true when the original SNMP type appears to have been signed. */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">_Bool<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">prefer_signed<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">(<pos:position pos:line="12" pos:column="8"/></operator><name><name pos:line="12" pos:column="8">vl<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">type<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">==<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">ASN_INTEGER<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">)<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="33">||<pos:position pos:line="12" pos:column="35"/></operator> <operator pos:line="12" pos:column="36">(<pos:position pos:line="12" pos:column="37"/></operator><name><name pos:line="12" pos:column="37">vl<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">-&gt;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="41">type<pos:position pos:line="12" pos:column="45"/></name></name> <operator pos:line="12" pos:column="46">==<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">ASN_UINTEGER<pos:position pos:line="12" pos:column="61"/></name><operator pos:line="12" pos:column="61">)<pos:position pos:line="12" pos:column="62"/></operator> <operator pos:line="12" pos:column="63">||<pos:position pos:line="12" pos:column="65"/></operator>
      <operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><name><name pos:line="13" pos:column="8">vl<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">type<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">==<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">ASN_COUNTER<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">)<pos:position pos:line="13" pos:column="32"/></operator>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">ASN_TIMETICKS<pos:position pos:line="14" pos:column="21"/></name></cpp:ifdef>
      <operator pos:line="15" pos:column="7">||<pos:position pos:line="15" pos:column="9"/></operator> <operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><name><name pos:line="15" pos:column="11">vl<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">type<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">ASN_TIMETICKS<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
      <operator pos:line="17" pos:column="7">||<pos:position pos:line="17" pos:column="9"/></operator> <operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator><name><name pos:line="17" pos:column="11">vl<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">type<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">==<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">ASN_GAUGE<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">)<pos:position pos:line="17" pos:column="33"/></operator></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34"> <block pos:line="17" pos:column="35">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">tmp_unsigned<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">(<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">uint32_t<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></operator><name><name pos:line="18" pos:column="31">vl<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">val<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">.<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">integer<pos:position pos:line="18" pos:column="46"/></name></name></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">tmp_signed<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">int32_t<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator><operator pos:line="19" pos:column="27">*<pos:position pos:line="19" pos:column="28"/></operator><name><name pos:line="19" pos:column="28">vl<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">val<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">.<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="36">integer<pos:position pos:line="19" pos:column="43"/></name></name></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">vl<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">type<pos:position pos:line="21" pos:column="17"/></name></name> <operator pos:line="21" pos:column="18">==<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">ASN_INTEGER<pos:position pos:line="21" pos:column="32"/></name></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="7">prefer_signed<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="23">1<pos:position pos:line="22" pos:column="24"/></literal></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">DEBUG<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><literal type="string" pos:line="24" pos:column="11">"snmp plugin: Parsed int32 value is %"<pos:position pos:line="24" pos:column="49"/></literal> <name pos:line="24" pos:column="50">PRIu64<pos:position pos:line="24" pos:column="56"/></name> <literal type="string" pos:line="24" pos:column="57">"."<pos:position pos:line="24" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">tmp_unsigned<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></then> <elseif pos:line="25" pos:column="5">else <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><name><name pos:line="25" pos:column="14">vl<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">type<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">==<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">ASN_COUNTER64<pos:position pos:line="25" pos:column="39"/></name></expr>)<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40"> <block pos:line="25" pos:column="41">{
    <expr_stmt><expr><name pos:line="26" pos:column="5">tmp_unsigned<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <operator pos:line="26" pos:column="20">(<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">uint32_t<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">)<pos:position pos:line="26" pos:column="30"/></operator><name><name pos:line="26" pos:column="30">vl<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">-&gt;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="34">val<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">.<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">counter64<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">-&gt;<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="49">high<pos:position pos:line="26" pos:column="53"/></name></name></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">tmp_unsigned<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">tmp_unsigned<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">&lt;&lt;<pos:position pos:line="27" pos:column="41"/></operator> <literal type="number" pos:line="27" pos:column="36">32<pos:position pos:line="27" pos:column="38"/></literal></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">tmp_unsigned<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">+=<pos:position pos:line="28" pos:column="20"/></operator> <operator pos:line="28" pos:column="21">(<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">uint32_t<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">)<pos:position pos:line="28" pos:column="31"/></operator><name><name pos:line="28" pos:column="31">vl<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">val<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">counter64<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">low<pos:position pos:line="28" pos:column="53"/></name></name></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">tmp_signed<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">int64_t<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">)<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">tmp_unsigned<pos:position pos:line="29" pos:column="39"/></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">DEBUG<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"snmp plugin: Parsed int64 value is %"<pos:position pos:line="30" pos:column="49"/></literal> <name pos:line="30" pos:column="50">PRIu64<pos:position pos:line="30" pos:column="56"/></name> <literal type="string" pos:line="30" pos:column="57">"."<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="62">tmp_unsigned<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if></elseif> <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if <condition pos:line="31" pos:column="13">(<expr><name><name pos:line="31" pos:column="14">vl<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">type<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">ASN_OCTET_STR<pos:position pos:line="31" pos:column="39"/></name></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
    <comment type="block" pos:line="32" pos:column="5">/* We'll handle this later.. */</comment>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if></elseif> <else pos:line="33" pos:column="5">else <block pos:line="33" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name></type> <name><name pos:line="34" pos:column="10">oid_buffer<pos:position pos:line="34" pos:column="20"/></name><index pos:line="34" pos:column="20">[<expr><literal type="number" pos:line="34" pos:column="21">1024<pos:position pos:line="34" pos:column="25"/></literal></expr>]<pos:position pos:line="34" pos:column="26"/></index></name> <init pos:line="34" pos:column="27">= <expr><block pos:line="34" pos:column="29">{<expr><literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>}<pos:position pos:line="34" pos:column="32"/></block></expr></init></decl>;<pos:position pos:line="34" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">snprint_objid<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">oid_buffer<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="31">sizeof<argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">oid_buffer<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></sizeof> <operator pos:line="36" pos:column="50">-<pos:position pos:line="36" pos:column="51"/></operator> <literal type="number" pos:line="36" pos:column="52">1<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="55">vl<pos:position pos:line="36" pos:column="57"/></name><operator pos:line="36" pos:column="57">-&gt;<pos:position pos:line="36" pos:column="62"/></operator><name pos:line="36" pos:column="59">name<pos:position pos:line="36" pos:column="63"/></name></name></expr></argument>,
                  <argument><expr><name><name pos:line="37" pos:column="19">vl<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">name_length<pos:position pos:line="37" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>

<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">ASN_NULL<pos:position pos:line="39" pos:column="16"/></name></cpp:ifdef>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">vl<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">type<pos:position pos:line="40" pos:column="17"/></name></name> <operator pos:line="40" pos:column="18">==<pos:position pos:line="40" pos:column="20"/></operator> <name pos:line="40" pos:column="21">ASN_NULL<pos:position pos:line="40" pos:column="29"/></name></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">INFO<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="string" pos:line="41" pos:column="12">"snmp plugin: OID \"%s\" is undefined (type ASN_NULL)"<pos:position pos:line="41" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="68">oid_buffer<pos:position pos:line="41" pos:column="78"/></name></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt></block></then>
    <else pos:line="42" pos:column="5">else
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="7">WARNING<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><literal type="string" pos:line="44" pos:column="15">"snmp plugin: I don't know the ASN type #%i "<pos:position pos:line="44" pos:column="60"/></literal>
              <literal type="string" pos:line="45" pos:column="15">"(OID: \"%s\", data block \"%s\", host block \"%s\")"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>,
              <argument><expr><operator pos:line="46" pos:column="15">(<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">int<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">)<pos:position pos:line="46" pos:column="20"/></operator><name><name pos:line="46" pos:column="20">vl<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">-&gt;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="24">type<pos:position pos:line="46" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">oid_buffer<pos:position pos:line="46" pos:column="40"/></name></expr></argument>,
              <argument><expr><ternary><condition><expr><operator pos:line="47" pos:column="15">(<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="16">data_name<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">!=<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">NULL<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">)<pos:position pos:line="47" pos:column="34"/></operator></expr> ?<pos:position pos:line="47" pos:column="36"/></condition><then pos:line="47" pos:column="36"> <expr><name pos:line="47" pos:column="37">data_name<pos:position pos:line="47" pos:column="46"/></name></expr> <pos:position pos:line="47" pos:column="47"/></then><else pos:line="47" pos:column="47">: <expr><literal type="string" pos:line="47" pos:column="49">"UNKNOWN"<pos:position pos:line="47" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><operator pos:line="48" pos:column="15">(<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="16">host_name<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">!=<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">NULL<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">)<pos:position pos:line="48" pos:column="34"/></operator></expr> ?<pos:position pos:line="48" pos:column="36"/></condition><then pos:line="48" pos:column="36"> <expr><name pos:line="48" pos:column="37">host_name<pos:position pos:line="48" pos:column="46"/></name></expr> <pos:position pos:line="48" pos:column="47"/></then><else pos:line="48" pos:column="47">: <expr><literal type="string" pos:line="48" pos:column="49">"UNKNOWN"<pos:position pos:line="48" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="50" pos:column="5">defined<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <literal type="number" pos:line="50" pos:column="15">0<pos:position pos:line="50" pos:column="16"/></literal></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></else></if>

  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name><name pos:line="53" pos:column="7">vl<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">type<pos:position pos:line="53" pos:column="15"/></name></name> <operator pos:line="53" pos:column="16">==<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">ASN_OCTET_STR<pos:position pos:line="53" pos:column="32"/></name></expr>)<pos:position pos:line="53" pos:column="33"/></condition><then pos:line="53" pos:column="33"> <block pos:line="53" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">int<pos:position pos:line="54" pos:column="8"/></name></type> <name pos:line="54" pos:column="9">status<pos:position pos:line="54" pos:column="15"/></name> <init pos:line="54" pos:column="16">= <expr><operator pos:line="54" pos:column="18">-<pos:position pos:line="54" pos:column="19"/></operator><literal type="number" pos:line="54" pos:column="19">1<pos:position pos:line="54" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="54" pos:column="21"/></decl_stmt>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name><name pos:line="56" pos:column="9">vl<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">val<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">.<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">string<pos:position pos:line="56" pos:column="23"/></name></name> <operator pos:line="56" pos:column="24">!=<pos:position pos:line="56" pos:column="26"/></operator> <name pos:line="56" pos:column="27">NULL<pos:position pos:line="56" pos:column="31"/></name></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32"> <block pos:line="56" pos:column="33">{
      <decl_stmt><decl><type><name pos:line="57" pos:column="7">char<pos:position pos:line="57" pos:column="11"/></name></type> <name><name pos:line="57" pos:column="12">string<pos:position pos:line="57" pos:column="18"/></name><index pos:line="57" pos:column="18">[<expr><literal type="number" pos:line="57" pos:column="19">64<pos:position pos:line="57" pos:column="21"/></literal></expr>]<pos:position pos:line="57" pos:column="22"/></index></name></decl>;<pos:position pos:line="57" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="58" pos:column="7">size_t<pos:position pos:line="58" pos:column="13"/></name></type> <name pos:line="58" pos:column="14">string_length<pos:position pos:line="58" pos:column="27"/></name></decl>;<pos:position pos:line="58" pos:column="28"/></decl_stmt>

      <expr_stmt><expr><name pos:line="60" pos:column="7">string_length<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <sizeof pos:line="60" pos:column="23">sizeof<argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">string<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></sizeof> <operator pos:line="60" pos:column="38">-<pos:position pos:line="60" pos:column="39"/></operator> <literal type="number" pos:line="60" pos:column="40">1<pos:position pos:line="60" pos:column="41"/></literal></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><name><name pos:line="61" pos:column="11">vl<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">-&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">val_len<pos:position pos:line="61" pos:column="22"/></name></name> <operator pos:line="61" pos:column="23">&lt;<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="25">string_length<pos:position pos:line="61" pos:column="38"/></name></expr>)<pos:position pos:line="61" pos:column="39"/></condition><then pos:line="61" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="9">string_length<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <name><name pos:line="62" pos:column="25">vl<pos:position pos:line="62" pos:column="27"/></name><operator pos:line="62" pos:column="27">-&gt;<pos:position pos:line="62" pos:column="32"/></operator><name pos:line="62" pos:column="29">val_len<pos:position pos:line="62" pos:column="36"/></name></name></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="64" pos:column="7">/* The strings we get from the Net-SNMP library may not be null
       * terminated. That is why we're using `memcpy' here and not `strcpy'.
       * `string_length' is set to `vl-&gt;val_len' which holds the length of the
       * string.  -octo */</comment>
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">memcpy<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">string<pos:position pos:line="68" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="22">vl<pos:position pos:line="68" pos:column="24"/></name><operator pos:line="68" pos:column="24">-&gt;<pos:position pos:line="68" pos:column="29"/></operator><name pos:line="68" pos:column="26">val<pos:position pos:line="68" pos:column="29"/></name><operator pos:line="68" pos:column="29">.<pos:position pos:line="68" pos:column="30"/></operator><name pos:line="68" pos:column="30">string<pos:position pos:line="68" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">string_length<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="69" pos:column="7">string<pos:position pos:line="69" pos:column="13"/></name><index pos:line="69" pos:column="13">[<expr><name pos:line="69" pos:column="14">string_length<pos:position pos:line="69" pos:column="27"/></name></expr>]<pos:position pos:line="69" pos:column="28"/></index></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <literal type="number" pos:line="69" pos:column="31">0<pos:position pos:line="69" pos:column="32"/></literal></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>

      <expr_stmt><expr><name pos:line="71" pos:column="7">status<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">parse_value<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">string<pos:position pos:line="71" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="36">&amp;<pos:position pos:line="71" pos:column="41"/></operator><name pos:line="71" pos:column="37">ret<pos:position pos:line="71" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="42">type<pos:position pos:line="71" pos:column="46"/></name></expr></argument>)<pos:position pos:line="71" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="48"/></expr_stmt>
      <if pos:line="72" pos:column="7">if <condition pos:line="72" pos:column="10">(<expr><name pos:line="72" pos:column="11">status<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">!=<pos:position pos:line="72" pos:column="20"/></operator> <literal type="number" pos:line="72" pos:column="21">0<pos:position pos:line="72" pos:column="22"/></literal></expr>)<pos:position pos:line="72" pos:column="23"/></condition><then pos:line="72" pos:column="23"> <block pos:line="72" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">ERROR<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><literal type="string" pos:line="73" pos:column="15">"snmp plugin: host %s: csnmp_value_list_to_value: Parsing string "<pos:position pos:line="73" pos:column="81"/></literal>
              <literal type="string" pos:line="74" pos:column="15">"as %s failed: %s"<pos:position pos:line="74" pos:column="33"/></literal></expr></argument>,
              <argument><expr><ternary><condition><expr><operator pos:line="75" pos:column="15">(<pos:position pos:line="75" pos:column="16"/></operator><name pos:line="75" pos:column="16">host_name<pos:position pos:line="75" pos:column="25"/></name> <operator pos:line="75" pos:column="26">!=<pos:position pos:line="75" pos:column="28"/></operator> <name pos:line="75" pos:column="29">NULL<pos:position pos:line="75" pos:column="33"/></name><operator pos:line="75" pos:column="33">)<pos:position pos:line="75" pos:column="34"/></operator></expr> ?<pos:position pos:line="75" pos:column="36"/></condition><then pos:line="75" pos:column="36"> <expr><name pos:line="75" pos:column="37">host_name<pos:position pos:line="75" pos:column="46"/></name></expr> <pos:position pos:line="75" pos:column="47"/></then><else pos:line="75" pos:column="47">: <expr><literal type="string" pos:line="75" pos:column="49">"UNKNOWN"<pos:position pos:line="75" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><call><name pos:line="76" pos:column="15">DS_TYPE_TO_STRING<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">type<pos:position pos:line="76" pos:column="37"/></name></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="40">string<pos:position pos:line="76" pos:column="46"/></name></expr></argument>)<pos:position pos:line="76" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name pos:line="80" pos:column="9">status<pos:position pos:line="80" pos:column="15"/></name> <operator pos:line="80" pos:column="16">!=<pos:position pos:line="80" pos:column="18"/></operator> <literal type="number" pos:line="80" pos:column="19">0<pos:position pos:line="80" pos:column="20"/></literal></expr>)<pos:position pos:line="80" pos:column="21"/></condition><then pos:line="80" pos:column="21"> <block pos:line="80" pos:column="22">{
      <switch pos:line="81" pos:column="7">switch <condition pos:line="81" pos:column="14">(<expr><name pos:line="81" pos:column="15">type<pos:position pos:line="81" pos:column="19"/></name></expr>)<pos:position pos:line="81" pos:column="20"/></condition> <block pos:line="81" pos:column="21">{
      <case pos:line="82" pos:column="7">case <expr><name pos:line="82" pos:column="12">DS_TYPE_COUNTER<pos:position pos:line="82" pos:column="27"/></name></expr>:<pos:position pos:line="82" pos:column="28"/></case>
      <case pos:line="83" pos:column="7">case <expr><name pos:line="83" pos:column="12">DS_TYPE_DERIVE<pos:position pos:line="83" pos:column="26"/></name></expr>:<pos:position pos:line="83" pos:column="27"/></case>
      <case pos:line="84" pos:column="7">case <expr><name pos:line="84" pos:column="12">DS_TYPE_ABSOLUTE<pos:position pos:line="84" pos:column="28"/></name></expr>:<pos:position pos:line="84" pos:column="29"/></case>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">memset<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><operator pos:line="85" pos:column="16">&amp;<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="17">ret<pos:position pos:line="85" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="22">0<pos:position pos:line="85" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="25">sizeof<argument_list pos:line="85" pos:column="31">(<argument><expr><name pos:line="85" pos:column="32">ret<pos:position pos:line="85" pos:column="35"/></name></expr></argument>)<pos:position pos:line="85" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="85" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="38"/></expr_stmt>
        <break pos:line="86" pos:column="9">break;<pos:position pos:line="86" pos:column="15"/></break>

      <case pos:line="88" pos:column="7">case <expr><name pos:line="88" pos:column="12">DS_TYPE_GAUGE<pos:position pos:line="88" pos:column="25"/></name></expr>:<pos:position pos:line="88" pos:column="26"/></case>
        <expr_stmt><expr><name><name pos:line="89" pos:column="9">ret<pos:position pos:line="89" pos:column="12"/></name><operator pos:line="89" pos:column="12">.<pos:position pos:line="89" pos:column="13"/></operator><name pos:line="89" pos:column="13">gauge<pos:position pos:line="89" pos:column="18"/></name></name> <operator pos:line="89" pos:column="19">=<pos:position pos:line="89" pos:column="20"/></operator> <name pos:line="89" pos:column="21">NAN<pos:position pos:line="89" pos:column="24"/></name></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt>
        <break pos:line="90" pos:column="9">break;<pos:position pos:line="90" pos:column="15"/></break>

      <default pos:line="92" pos:column="7">default:<pos:position pos:line="92" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">ERROR<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><literal type="string" pos:line="93" pos:column="15">"snmp plugin: csnmp_value_list_to_value: Unknown "<pos:position pos:line="93" pos:column="65"/></literal>
              <literal type="string" pos:line="94" pos:column="15">"data source type: %i."<pos:position pos:line="94" pos:column="38"/></literal></expr></argument>,
              <argument><expr><name pos:line="95" pos:column="15">type<pos:position pos:line="95" pos:column="19"/></name></expr></argument>)<pos:position pos:line="95" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="96" pos:column="9">ret<pos:position pos:line="96" pos:column="12"/></name><operator pos:line="96" pos:column="12">.<pos:position pos:line="96" pos:column="13"/></operator><name pos:line="96" pos:column="13">gauge<pos:position pos:line="96" pos:column="18"/></name></name> <operator pos:line="96" pos:column="19">=<pos:position pos:line="96" pos:column="20"/></operator> <name pos:line="96" pos:column="21">NAN<pos:position pos:line="96" pos:column="24"/></name></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></switch>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>
  }<pos:position pos:line="99" pos:column="4"/></block></then> <comment type="block" pos:line="99" pos:column="5">/* if (vl-&gt;type == ASN_OCTET_STR) */</comment>
  <elseif pos:line="100" pos:column="3">else <if pos:line="100" pos:column="8">if <condition pos:line="100" pos:column="11">(<expr><name pos:line="100" pos:column="12">type<pos:position pos:line="100" pos:column="16"/></name> <operator pos:line="100" pos:column="17">==<pos:position pos:line="100" pos:column="19"/></operator> <name pos:line="100" pos:column="20">DS_TYPE_COUNTER<pos:position pos:line="100" pos:column="35"/></name></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
    <expr_stmt><expr><name><name pos:line="101" pos:column="5">ret<pos:position pos:line="101" pos:column="8"/></name><operator pos:line="101" pos:column="8">.<pos:position pos:line="101" pos:column="9"/></operator><name pos:line="101" pos:column="9">counter<pos:position pos:line="101" pos:column="16"/></name></name> <operator pos:line="101" pos:column="17">=<pos:position pos:line="101" pos:column="18"/></operator> <name pos:line="101" pos:column="19">tmp_unsigned<pos:position pos:line="101" pos:column="31"/></name></expr>;<pos:position pos:line="101" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="102" pos:column="4"/></block></then></if></elseif> <elseif pos:line="102" pos:column="5">else <if pos:line="102" pos:column="10">if <condition pos:line="102" pos:column="13">(<expr><name pos:line="102" pos:column="14">type<pos:position pos:line="102" pos:column="18"/></name> <operator pos:line="102" pos:column="19">==<pos:position pos:line="102" pos:column="21"/></operator> <name pos:line="102" pos:column="22">DS_TYPE_GAUGE<pos:position pos:line="102" pos:column="35"/></name></expr>)<pos:position pos:line="102" pos:column="36"/></condition><then pos:line="102" pos:column="36"> <block pos:line="102" pos:column="37">{
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><operator pos:line="103" pos:column="9">!<pos:position pos:line="103" pos:column="10"/></operator><name pos:line="103" pos:column="10">defined<pos:position pos:line="103" pos:column="17"/></name></expr>)<pos:position pos:line="103" pos:column="18"/></condition><then pos:line="103" pos:column="18">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="104" pos:column="7">ret<pos:position pos:line="104" pos:column="10"/></name><operator pos:line="104" pos:column="10">.<pos:position pos:line="104" pos:column="11"/></operator><name pos:line="104" pos:column="11">gauge<pos:position pos:line="104" pos:column="16"/></name></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <name pos:line="104" pos:column="19">NAN<pos:position pos:line="104" pos:column="22"/></name></expr>;<pos:position pos:line="104" pos:column="23"/></expr_stmt></block></then>
    <elseif pos:line="105" pos:column="5">else <if pos:line="105" pos:column="10">if <condition pos:line="105" pos:column="13">(<expr><name pos:line="105" pos:column="14">prefer_signed<pos:position pos:line="105" pos:column="27"/></name></expr>)<pos:position pos:line="105" pos:column="28"/></condition><then pos:line="105" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="106" pos:column="7">ret<pos:position pos:line="106" pos:column="10"/></name><operator pos:line="106" pos:column="10">.<pos:position pos:line="106" pos:column="11"/></operator><name pos:line="106" pos:column="11">gauge<pos:position pos:line="106" pos:column="16"/></name></name> <operator pos:line="106" pos:column="17">=<pos:position pos:line="106" pos:column="18"/></operator> <operator pos:line="106" pos:column="19">(<pos:position pos:line="106" pos:column="20"/></operator><name pos:line="106" pos:column="20">scale<pos:position pos:line="106" pos:column="25"/></name> <operator pos:line="106" pos:column="26">*<pos:position pos:line="106" pos:column="27"/></operator> <name pos:line="106" pos:column="28">tmp_signed<pos:position pos:line="106" pos:column="38"/></name><operator pos:line="106" pos:column="38">)<pos:position pos:line="106" pos:column="39"/></operator> <operator pos:line="106" pos:column="40">+<pos:position pos:line="106" pos:column="41"/></operator> <name pos:line="106" pos:column="42">shift<pos:position pos:line="106" pos:column="47"/></name></expr>;<pos:position pos:line="106" pos:column="48"/></expr_stmt></block></then></if></elseif>
    <else pos:line="107" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="7">ret<pos:position pos:line="108" pos:column="10"/></name><operator pos:line="108" pos:column="10">.<pos:position pos:line="108" pos:column="11"/></operator><name pos:line="108" pos:column="11">gauge<pos:position pos:line="108" pos:column="16"/></name></name> <operator pos:line="108" pos:column="17">=<pos:position pos:line="108" pos:column="18"/></operator> <operator pos:line="108" pos:column="19">(<pos:position pos:line="108" pos:column="20"/></operator><name pos:line="108" pos:column="20">scale<pos:position pos:line="108" pos:column="25"/></name> <operator pos:line="108" pos:column="26">*<pos:position pos:line="108" pos:column="27"/></operator> <name pos:line="108" pos:column="28">tmp_unsigned<pos:position pos:line="108" pos:column="40"/></name><operator pos:line="108" pos:column="40">)<pos:position pos:line="108" pos:column="41"/></operator> <operator pos:line="108" pos:column="42">+<pos:position pos:line="108" pos:column="43"/></operator> <name pos:line="108" pos:column="44">shift<pos:position pos:line="108" pos:column="49"/></name></expr>;<pos:position pos:line="108" pos:column="50"/></expr_stmt></block></else></if>
  }<pos:position pos:line="109" pos:column="4"/></block></then></if></elseif> <elseif pos:line="109" pos:column="5">else <if pos:line="109" pos:column="10">if <condition pos:line="109" pos:column="13">(<expr><name pos:line="109" pos:column="14">type<pos:position pos:line="109" pos:column="18"/></name> <operator pos:line="109" pos:column="19">==<pos:position pos:line="109" pos:column="21"/></operator> <name pos:line="109" pos:column="22">DS_TYPE_DERIVE<pos:position pos:line="109" pos:column="36"/></name></expr>)<pos:position pos:line="109" pos:column="37"/></condition><then pos:line="109" pos:column="37"> <block pos:line="109" pos:column="38">{
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><name pos:line="110" pos:column="9">prefer_signed<pos:position pos:line="110" pos:column="22"/></name></expr>)<pos:position pos:line="110" pos:column="23"/></condition><then pos:line="110" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="111" pos:column="7">ret<pos:position pos:line="111" pos:column="10"/></name><operator pos:line="111" pos:column="10">.<pos:position pos:line="111" pos:column="11"/></operator><name pos:line="111" pos:column="11">derive<pos:position pos:line="111" pos:column="17"/></name></name> <operator pos:line="111" pos:column="18">=<pos:position pos:line="111" pos:column="19"/></operator> <operator pos:line="111" pos:column="20">(<pos:position pos:line="111" pos:column="21"/></operator><name pos:line="111" pos:column="21">derive_t<pos:position pos:line="111" pos:column="29"/></name><operator pos:line="111" pos:column="29">)<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">tmp_signed<pos:position pos:line="111" pos:column="40"/></name></expr>;<pos:position pos:line="111" pos:column="41"/></expr_stmt></block></then>
    <else pos:line="112" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="7">ret<pos:position pos:line="113" pos:column="10"/></name><operator pos:line="113" pos:column="10">.<pos:position pos:line="113" pos:column="11"/></operator><name pos:line="113" pos:column="11">derive<pos:position pos:line="113" pos:column="17"/></name></name> <operator pos:line="113" pos:column="18">=<pos:position pos:line="113" pos:column="19"/></operator> <operator pos:line="113" pos:column="20">(<pos:position pos:line="113" pos:column="21"/></operator><name pos:line="113" pos:column="21">derive_t<pos:position pos:line="113" pos:column="29"/></name><operator pos:line="113" pos:column="29">)<pos:position pos:line="113" pos:column="30"/></operator><name pos:line="113" pos:column="30">tmp_unsigned<pos:position pos:line="113" pos:column="42"/></name></expr>;<pos:position pos:line="113" pos:column="43"/></expr_stmt></block></else></if>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if></elseif> <elseif pos:line="114" pos:column="5">else <if pos:line="114" pos:column="10">if <condition pos:line="114" pos:column="13">(<expr><name pos:line="114" pos:column="14">type<pos:position pos:line="114" pos:column="18"/></name> <operator pos:line="114" pos:column="19">==<pos:position pos:line="114" pos:column="21"/></operator> <name pos:line="114" pos:column="22">DS_TYPE_ABSOLUTE<pos:position pos:line="114" pos:column="38"/></name></expr>)<pos:position pos:line="114" pos:column="39"/></condition><then pos:line="114" pos:column="39"> <block pos:line="114" pos:column="40">{
    <expr_stmt><expr><name><name pos:line="115" pos:column="5">ret<pos:position pos:line="115" pos:column="8"/></name><operator pos:line="115" pos:column="8">.<pos:position pos:line="115" pos:column="9"/></operator><name pos:line="115" pos:column="9">absolute<pos:position pos:line="115" pos:column="17"/></name></name> <operator pos:line="115" pos:column="18">=<pos:position pos:line="115" pos:column="19"/></operator> <operator pos:line="115" pos:column="20">(<pos:position pos:line="115" pos:column="21"/></operator><name pos:line="115" pos:column="21">absolute_t<pos:position pos:line="115" pos:column="31"/></name><operator pos:line="115" pos:column="31">)<pos:position pos:line="115" pos:column="32"/></operator><name pos:line="115" pos:column="32">tmp_unsigned<pos:position pos:line="115" pos:column="44"/></name></expr>;<pos:position pos:line="115" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="116" pos:column="4"/></block></then></if></elseif> <else pos:line="116" pos:column="5">else <block pos:line="116" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">ERROR<pos:position pos:line="117" pos:column="10"/></name><argument_list pos:line="117" pos:column="10">(<argument><expr><literal type="string" pos:line="117" pos:column="11">"snmp plugin: csnmp_value_list_to_value: Unknown data source "<pos:position pos:line="117" pos:column="73"/></literal>
          <literal type="string" pos:line="118" pos:column="11">"type: %i."<pos:position pos:line="118" pos:column="22"/></literal></expr></argument>,
          <argument><expr><name pos:line="119" pos:column="11">type<pos:position pos:line="119" pos:column="15"/></name></expr></argument>)<pos:position pos:line="119" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="120" pos:column="5">ret<pos:position pos:line="120" pos:column="8"/></name><operator pos:line="120" pos:column="8">.<pos:position pos:line="120" pos:column="9"/></operator><name pos:line="120" pos:column="9">gauge<pos:position pos:line="120" pos:column="14"/></name></name> <operator pos:line="120" pos:column="15">=<pos:position pos:line="120" pos:column="16"/></operator> <name pos:line="120" pos:column="17">NAN<pos:position pos:line="120" pos:column="20"/></name></expr>;<pos:position pos:line="120" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="121" pos:column="4"/></block></else></if>

  <return pos:line="123" pos:column="3">return <expr><operator pos:line="123" pos:column="10">(<pos:position pos:line="123" pos:column="11"/></operator><name pos:line="123" pos:column="11">ret<pos:position pos:line="123" pos:column="14"/></name><operator pos:line="123" pos:column="14">)<pos:position pos:line="123" pos:column="15"/></operator></expr>;<pos:position pos:line="123" pos:column="16"/></return>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
