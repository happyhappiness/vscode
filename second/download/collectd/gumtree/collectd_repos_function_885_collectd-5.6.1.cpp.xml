<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_885_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_add_read_callback<pos:position pos:line="1" pos:column="39"/></name> <parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">memcached_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">st<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">callback_name<pos:position pos:line="3" pos:column="21"/></name><index pos:line="3" pos:column="21">[<expr><literal type="number" pos:line="3" pos:column="22">3<pos:position pos:line="3" pos:column="23"/></literal><operator pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">DATA_MAX_NAME_LEN<pos:position pos:line="3" pos:column="41"/></name></expr>]<pos:position pos:line="3" pos:column="42"/></index></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">assert<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><name><name pos:line="6" pos:column="11">st<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">name<pos:position pos:line="6" pos:column="19"/></name></name> <operator pos:line="6" pos:column="20">!=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">ssnprintf<pos:position pos:line="7" pos:column="12"/></name> <argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">callback_name<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="29">sizeof <argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">callback_name<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="53">"memcached/%s"<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="69">st<pos:position pos:line="7" pos:column="71"/></name><operator pos:line="7" pos:column="71">-&gt;<pos:position pos:line="7" pos:column="76"/></operator><name pos:line="7" pos:column="73">name<pos:position pos:line="7" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="79"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">user_data_t<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">ud<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><block pos:line="9" pos:column="20">{
    <expr><operator pos:line="10" pos:column="5">.<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">data<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">st<pos:position pos:line="10" pos:column="15"/></name></expr>,
    <expr><operator pos:line="11" pos:column="5">.<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">free_func<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">memcached_free<pos:position pos:line="11" pos:column="32"/></name></expr>
  }<pos:position pos:line="12" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="5"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">status<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">plugin_register_complex_read<pos:position pos:line="14" pos:column="40"/></name> <argument_list pos:line="14" pos:column="41">(<comment type="block" pos:line="14" pos:column="42">/* group = */</comment> <argument><expr><literal type="string" pos:line="14" pos:column="56">"memcached"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>,
      <comment type="block" pos:line="15" pos:column="7">/* name      = */</comment> <argument><expr><name pos:line="15" pos:column="25">callback_name<pos:position pos:line="15" pos:column="38"/></name></expr></argument>,
      <comment type="block" pos:line="16" pos:column="7">/* callback  = */</comment> <argument><expr><name pos:line="16" pos:column="25">memcached_read<pos:position pos:line="16" pos:column="39"/></name></expr></argument>,
      <comment type="block" pos:line="17" pos:column="7">/* interval  = */</comment> <argument><expr><literal type="number" pos:line="17" pos:column="25">0<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>,
      <comment type="block" pos:line="18" pos:column="7">/* user_data = */</comment> <argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="26">ud<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
  <return pos:line="19" pos:column="3">return <expr><operator pos:line="19" pos:column="10">(<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">status<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">)<pos:position pos:line="19" pos:column="18"/></operator></expr>;<pos:position pos:line="19" pos:column="19"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
