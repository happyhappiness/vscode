<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1816_collectd-4.10.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">list_head<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">iptcc_bsearch_chain_index<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">name<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">unsigned<pos:position pos:line="2" pos:column="53"/></name> <name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">idx<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">TC_HANDLE_T<pos:position pos:line="2" pos:column="75"/></name></type> <name pos:line="2" pos:column="76">handle<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="83"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">pos<pos:position pos:line="4" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="27">end<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">res<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">list_head<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">list_pos<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">list_pos<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator><operator pos:line="8" pos:column="18">&amp;<pos:position pos:line="8" pos:column="23"/></operator><name><name pos:line="8" pos:column="19">handle<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">chains<pos:position pos:line="8" pos:column="33"/></name></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Check for empty array, e.g. no user defined chains */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">handle<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">chain_index_sz<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">==<pos:position pos:line="11" pos:column="38"/></operator> <literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">debug<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"WARNING: handle-&gt;chain_index_sz == 0\n"<pos:position pos:line="12" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">list_pos<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Init */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">end<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name><name pos:line="17" pos:column="15">handle<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">chain_index_sz<pos:position pos:line="17" pos:column="37"/></name></name></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">pos<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">end<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">/<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="21">2<pos:position pos:line="18" pos:column="22"/></literal></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">debug<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="string" pos:line="20" pos:column="15">"bsearch Find chain:%s (pos:%d end:%d)\n"<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">name<pos:position pos:line="20" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="64">pos<pos:position pos:line="20" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="69">end<pos:position pos:line="20" pos:column="72"/></name></expr></argument>)<pos:position pos:line="20" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="74"/></expr_stmt>

	<comment type="block" pos:line="22" pos:column="9">/* Loop */</comment>
 <label><name pos:line="23" pos:column="2">loop<pos:position pos:line="23" pos:column="6"/></name>:<pos:position pos:line="23" pos:column="7"/></label>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name><name pos:line="24" pos:column="14">handle<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">chain_index<pos:position pos:line="24" pos:column="33"/></name><index pos:line="24" pos:column="33">[<expr><name pos:line="24" pos:column="34">pos<pos:position pos:line="24" pos:column="37"/></name></expr>]<pos:position pos:line="24" pos:column="38"/></index></name></expr>)<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39"> <block pos:line="24" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">fprintf<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">stderr<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="33">"ERROR: NULL pointer chain_index[%d]\n"<pos:position pos:line="25" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="74">pos<pos:position pos:line="25" pos:column="77"/></name></expr></argument>)<pos:position pos:line="25" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="79"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">&amp;<pos:position pos:line="26" pos:column="29"/></operator><name><name pos:line="26" pos:column="25">handle<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">chains<pos:position pos:line="26" pos:column="39"/></name></name></expr>;<pos:position pos:line="26" pos:column="40"/></return> <comment type="block" pos:line="26" pos:column="41">/* Be safe, return orig start pos */</comment>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="29" pos:column="9">res<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">strcmp<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">name<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="28">handle<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">chain_index<pos:position pos:line="29" pos:column="47"/></name><index pos:line="29" pos:column="47">[<expr><name pos:line="29" pos:column="48">pos<pos:position pos:line="29" pos:column="51"/></name></expr>]<pos:position pos:line="29" pos:column="52"/></index></name><operator pos:line="29" pos:column="52">-&gt;<pos:position pos:line="29" pos:column="57"/></operator><name pos:line="29" pos:column="54">name<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">list_pos<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <operator pos:line="30" pos:column="20">&amp;<pos:position pos:line="30" pos:column="25"/></operator><name><name pos:line="30" pos:column="21">handle<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">-&gt;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="29">chain_index<pos:position pos:line="30" pos:column="40"/></name><index pos:line="30" pos:column="40">[<expr><name pos:line="30" pos:column="41">pos<pos:position pos:line="30" pos:column="44"/></name></expr>]<pos:position pos:line="30" pos:column="45"/></index></name><operator pos:line="30" pos:column="45">-&gt;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="47">list<pos:position pos:line="30" pos:column="51"/></name></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="31" pos:column="9">*<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">idx<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">pos<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">debug<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><literal type="string" pos:line="33" pos:column="15">"bsearch Index[%d] name:%s res:%d "<pos:position pos:line="33" pos:column="50"/></literal></expr></argument>,
	      <argument><expr><name pos:line="34" pos:column="15">pos<pos:position pos:line="34" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="20">handle<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">chain_index<pos:position pos:line="34" pos:column="39"/></name><index pos:line="34" pos:column="39">[<expr><name pos:line="34" pos:column="40">pos<pos:position pos:line="34" pos:column="43"/></name></expr>]<pos:position pos:line="34" pos:column="44"/></index></name><operator pos:line="34" pos:column="44">-&gt;<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="46">name<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">res<pos:position pos:line="34" pos:column="55"/></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">res<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">==<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22"> <block pos:line="36" pos:column="23">{ <comment type="block" pos:line="36" pos:column="25">/* Found element, by direct hit */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">debug<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="string" pos:line="37" pos:column="23">"[found] Direct hit pos:%d end:%d\n"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">pos<pos:position pos:line="37" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="66">end<pos:position pos:line="37" pos:column="69"/></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><name pos:line="38" pos:column="24">list_pos<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then> <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if <condition pos:line="39" pos:column="19">(<expr><name pos:line="39" pos:column="20">res<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">&lt;<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="26">0<pos:position pos:line="39" pos:column="27"/></literal></expr>)<pos:position pos:line="39" pos:column="28"/></condition><then pos:line="39" pos:column="28"> <block pos:line="39" pos:column="29">{ <comment type="block" pos:line="39" pos:column="31">/* Too far, jump back */</comment>
		<expr_stmt><expr><name pos:line="40" pos:column="17">end<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="23">pos<pos:position pos:line="40" pos:column="26"/></name></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">pos<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">pos<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">/<pos:position pos:line="41" pos:column="28"/></operator> <literal type="number" pos:line="41" pos:column="29">2<pos:position pos:line="41" pos:column="30"/></literal></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>

		<comment type="block" pos:line="43" pos:column="17">/* Exit case: First element of array */</comment>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">end<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">==<pos:position pos:line="44" pos:column="27"/></operator> <literal type="number" pos:line="44" pos:column="28">0<pos:position pos:line="44" pos:column="29"/></literal></expr>)<pos:position pos:line="44" pos:column="30"/></condition><then pos:line="44" pos:column="30"> <block pos:line="44" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">debug<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="string" pos:line="45" pos:column="31">"[found] Reached first array elem (end%d)\n"<pos:position pos:line="45" pos:column="75"/></literal></expr></argument>,<argument><expr><name pos:line="45" pos:column="76">end<pos:position pos:line="45" pos:column="79"/></name></expr></argument>)<pos:position pos:line="45" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="81"/></expr_stmt>
			<return pos:line="46" pos:column="25">return <expr><name pos:line="46" pos:column="32">list_pos<pos:position pos:line="46" pos:column="40"/></name></expr>;<pos:position pos:line="46" pos:column="41"/></return>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">debug<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><literal type="string" pos:line="48" pos:column="23">"jump back to pos:%d (end:%d)\n"<pos:position pos:line="48" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="57">pos<pos:position pos:line="48" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="62">end<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
		<goto pos:line="49" pos:column="17">goto <name pos:line="49" pos:column="22">loop<pos:position pos:line="49" pos:column="26"/></name>;<pos:position pos:line="49" pos:column="27"/></goto>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if></elseif> <elseif pos:line="50" pos:column="11">else <if pos:line="50" pos:column="16">if <condition pos:line="50" pos:column="19">(<expr><name pos:line="50" pos:column="20">res<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">&gt;<pos:position pos:line="50" pos:column="28"/></operator> <literal type="number" pos:line="50" pos:column="26">0<pos:position pos:line="50" pos:column="27"/></literal></expr> )<pos:position pos:line="50" pos:column="29"/></condition><then><block pos:line="50" pos:column="29">{ <comment type="block" pos:line="50" pos:column="31">/* Not far enough, jump forward */</comment>

		<comment type="block" pos:line="52" pos:column="17">/* Exit case: Last element of array */</comment>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">pos<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">==<pos:position pos:line="53" pos:column="27"/></operator> <name><name pos:line="53" pos:column="28">handle<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">chain_index_sz<pos:position pos:line="53" pos:column="50"/></name></name><operator pos:line="53" pos:column="50">-<pos:position pos:line="53" pos:column="51"/></operator><literal type="number" pos:line="53" pos:column="51">1<pos:position pos:line="53" pos:column="52"/></literal></expr>)<pos:position pos:line="53" pos:column="53"/></condition><then pos:line="53" pos:column="53"> <block pos:line="53" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">debug<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><literal type="string" pos:line="54" pos:column="31">"[found] Last array elem (end:%d)\n"<pos:position pos:line="54" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="69">end<pos:position pos:line="54" pos:column="72"/></name></expr></argument>)<pos:position pos:line="54" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="74"/></expr_stmt>
			<return pos:line="55" pos:column="25">return <expr><name pos:line="55" pos:column="32">list_pos<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></return>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="58" pos:column="17">/* Exit case: Next index less, thus elem in this list section */</comment>
		<expr_stmt><expr><name pos:line="59" pos:column="17">res<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <call><name pos:line="59" pos:column="23">strcmp<pos:position pos:line="59" pos:column="29"/></name><argument_list pos:line="59" pos:column="29">(<argument><expr><name pos:line="59" pos:column="30">name<pos:position pos:line="59" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="36">handle<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">-&gt;<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="44">chain_index<pos:position pos:line="59" pos:column="55"/></name><index pos:line="59" pos:column="55">[<expr><name pos:line="59" pos:column="56">pos<pos:position pos:line="59" pos:column="59"/></name><operator pos:line="59" pos:column="59">+<pos:position pos:line="59" pos:column="60"/></operator><literal type="number" pos:line="59" pos:column="60">1<pos:position pos:line="59" pos:column="61"/></literal></expr>]<pos:position pos:line="59" pos:column="62"/></index></name><operator pos:line="59" pos:column="62">-&gt;<pos:position pos:line="59" pos:column="67"/></operator><name pos:line="59" pos:column="64">name<pos:position pos:line="59" pos:column="68"/></name></expr></argument>)<pos:position pos:line="59" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="70"/></expr_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">res<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">&lt;<pos:position pos:line="60" pos:column="29"/></operator> <literal type="number" pos:line="60" pos:column="27">0<pos:position pos:line="60" pos:column="28"/></literal></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">debug<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><literal type="string" pos:line="61" pos:column="31">"[found] closest list (end:%d)\n"<pos:position pos:line="61" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="66">end<pos:position pos:line="61" pos:column="69"/></name></expr></argument>)<pos:position pos:line="61" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="71"/></expr_stmt>
			<return pos:line="62" pos:column="25">return <expr><name pos:line="62" pos:column="32">list_pos<pos:position pos:line="62" pos:column="40"/></name></expr>;<pos:position pos:line="62" pos:column="41"/></return>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="65" pos:column="17">pos<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <operator pos:line="65" pos:column="23">(<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="24">pos<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">+<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="28">end<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">)<pos:position pos:line="65" pos:column="32"/></operator><operator pos:line="65" pos:column="32">/<pos:position pos:line="65" pos:column="33"/></operator><literal type="number" pos:line="65" pos:column="33">2<pos:position pos:line="65" pos:column="34"/></literal></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">debug<pos:position pos:line="66" pos:column="22"/></name><argument_list pos:line="66" pos:column="22">(<argument><expr><literal type="string" pos:line="66" pos:column="23">"jump forward to pos:%d (end:%d)\n"<pos:position pos:line="66" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">pos<pos:position pos:line="66" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="65">end<pos:position pos:line="66" pos:column="68"/></name></expr></argument>)<pos:position pos:line="66" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="70"/></expr_stmt>
		<goto pos:line="67" pos:column="17">goto <name pos:line="67" pos:column="22">loop<pos:position pos:line="67" pos:column="26"/></name>;<pos:position pos:line="67" pos:column="27"/></goto>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if></elseif></if>

	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">list_pos<pos:position pos:line="70" pos:column="24"/></name></expr>;<pos:position pos:line="70" pos:column="25"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
