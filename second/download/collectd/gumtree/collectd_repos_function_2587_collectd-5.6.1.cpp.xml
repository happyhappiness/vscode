<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2587_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">start_write_threads<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">num<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list> <comment type="block" pos:line="1" pos:column="46">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">write_threads<pos:position pos:line="3" pos:column="26"/></name> <operator pos:line="3" pos:column="27">!=<pos:position pos:line="3" pos:column="29"/></operator> <name pos:line="3" pos:column="30">NULL<pos:position pos:line="3" pos:column="34"/></name></expr>)<pos:position pos:line="3" pos:column="35"/></condition><then pos:line="3" pos:column="35">
		<block type="pseudo"><return pos:line="4" pos:column="17">return;<pos:position pos:line="4" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="6" pos:column="9">write_threads<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">pthread_t<pos:position pos:line="6" pos:column="35"/></name> <operator pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></operator><operator pos:line="6" pos:column="37">)<pos:position pos:line="6" pos:column="38"/></operator> <call><name pos:line="6" pos:column="39">calloc<pos:position pos:line="6" pos:column="45"/></name> <argument_list pos:line="6" pos:column="46">(<argument><expr><name pos:line="6" pos:column="47">num<pos:position pos:line="6" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="52">sizeof <argument_list pos:line="6" pos:column="59">(<argument><expr><name pos:line="6" pos:column="60">pthread_t<pos:position pos:line="6" pos:column="69"/></name></expr></argument>)<pos:position pos:line="6" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="72"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">write_threads<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">NULL<pos:position pos:line="7" pos:column="34"/></name></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
	<block pos:line="8" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">ERROR<pos:position pos:line="9" pos:column="22"/></name> <argument_list pos:line="9" pos:column="23">(<argument><expr><literal type="string" pos:line="9" pos:column="24">"plugin: start_write_threads: calloc failed."<pos:position pos:line="9" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt>
		<return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">write_threads_num<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><decl><type><name pos:line="14" pos:column="14">size_t<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></init> <condition><expr><name pos:line="14" pos:column="28">i<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">&lt;<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="32">num<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></condition> <incr><expr><name pos:line="14" pos:column="37">i<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">++<pos:position pos:line="14" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="41"/></control>
	<block pos:line="15" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">status<pos:position pos:line="16" pos:column="27"/></name></decl>;<pos:position pos:line="16" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="18" pos:column="17">status<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">pthread_create<pos:position pos:line="18" pos:column="40"/></name> <argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">write_threads<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">+<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="58">write_threads_num<pos:position pos:line="18" pos:column="75"/></name></expr></argument>,
				<comment type="block" pos:line="19" pos:column="33">/* attr = */</comment> <argument><expr><name pos:line="19" pos:column="46">NULL<pos:position pos:line="19" pos:column="50"/></name></expr></argument>,
				<argument><expr><name pos:line="20" pos:column="33">plugin_write_thread<pos:position pos:line="20" pos:column="52"/></name></expr></argument>,
				<comment type="block" pos:line="21" pos:column="33">/* arg = */</comment> <argument><expr><name pos:line="21" pos:column="45">NULL<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">status<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">!=<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
		<block pos:line="23" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">char<pos:position pos:line="24" pos:column="29"/></name></type> <name><name pos:line="24" pos:column="30">errbuf<pos:position pos:line="24" pos:column="36"/></name><index pos:line="24" pos:column="36">[<expr><literal type="number" pos:line="24" pos:column="37">1024<pos:position pos:line="24" pos:column="41"/></literal></expr>]<pos:position pos:line="24" pos:column="42"/></index></name></decl>;<pos:position pos:line="24" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ERROR<pos:position pos:line="25" pos:column="30"/></name> <argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"plugin: start_write_threads: pthread_create failed "<pos:position pos:line="25" pos:column="85"/></literal>
					<literal type="string" pos:line="26" pos:column="41">"with status %i (%s)."<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="65">status<pos:position pos:line="26" pos:column="71"/></name></expr></argument>,
					<argument><expr><call><name pos:line="27" pos:column="41">sstrerror<pos:position pos:line="27" pos:column="50"/></name> <argument_list pos:line="27" pos:column="51">(<argument><expr><name pos:line="27" pos:column="52">status<pos:position pos:line="27" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="60">errbuf<pos:position pos:line="27" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="68">sizeof <argument_list pos:line="27" pos:column="75">(<argument><expr><name pos:line="27" pos:column="76">errbuf<pos:position pos:line="27" pos:column="82"/></name></expr></argument>)<pos:position pos:line="27" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="86"/></expr_stmt>
			<return pos:line="28" pos:column="25">return;<pos:position pos:line="28" pos:column="32"/></return>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="31" pos:column="17">write_threads_num<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">++<pos:position pos:line="31" pos:column="36"/></operator></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for> <comment type="block" pos:line="32" pos:column="11">/* for (i) */</comment>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
