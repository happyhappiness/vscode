<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_353_collectd-4.4.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">collect<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">arg<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">collector_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">this<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><operator pos:line="3" pos:column="29">(<pos:position pos:line="3" pos:column="30"/></operator><name pos:line="3" pos:column="30">collector_t<pos:position pos:line="3" pos:column="41"/></name> <operator pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></operator><operator pos:line="3" pos:column="43">)<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="44">arg<pos:position pos:line="3" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">pthread_t<pos:position pos:line="4" pos:column="18"/></name></type>    <name pos:line="4" pos:column="22">self<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><call><name pos:line="4" pos:column="29">pthread_self<pos:position pos:line="4" pos:column="41"/></name> <argument_list pos:line="4" pos:column="42">()<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><literal type="number" pos:line="6" pos:column="16">1<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition> <block pos:line="6" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">loop<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><literal type="number" pos:line="7" pos:column="28">1<pos:position pos:line="7" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="9" pos:column="17">conn_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">connection<pos:position pos:line="9" pos:column="35"/></name></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="11" pos:column="17">pthread_mutex_lock<pos:position pos:line="11" pos:column="35"/></name> <argument_list pos:line="11" pos:column="36">(<argument><expr><operator pos:line="11" pos:column="37">&amp;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="38">conns_mutex<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>

		<while pos:line="13" pos:column="17">while <condition pos:line="13" pos:column="23">(<expr><name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">==<pos:position pos:line="13" pos:column="31"/></operator> <name><name pos:line="13" pos:column="32">conns<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">head<pos:position pos:line="13" pos:column="42"/></name></name></expr>)<pos:position pos:line="13" pos:column="43"/></condition> <block pos:line="13" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">pthread_cond_wait<pos:position pos:line="14" pos:column="42"/></name> <argument_list pos:line="14" pos:column="43">(<argument><expr><operator pos:line="14" pos:column="44">&amp;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="45">conn_available<pos:position pos:line="14" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="61">&amp;<pos:position pos:line="14" pos:column="66"/></operator><name pos:line="14" pos:column="62">conns_mutex<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="75"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></while>

		<expr_stmt><expr><name pos:line="17" pos:column="17">connection<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <name><name pos:line="17" pos:column="30">conns<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">.<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">head<pos:position pos:line="17" pos:column="40"/></name></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">conns<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">head<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name><name pos:line="18" pos:column="30">conns<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">.<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">head<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">next<pos:position pos:line="18" pos:column="46"/></name></name></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">NULL<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">==<pos:position pos:line="20" pos:column="28"/></operator> <name><name pos:line="20" pos:column="29">conns<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">.<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">head<pos:position pos:line="20" pos:column="39"/></name></name></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <block pos:line="20" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="21" pos:column="25">conns<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">tail<pos:position pos:line="21" pos:column="35"/></name></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">NULL<pos:position pos:line="21" pos:column="42"/></name></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="24" pos:column="17">pthread_mutex_unlock<pos:position pos:line="24" pos:column="37"/></name> <argument_list pos:line="24" pos:column="38">(<argument><expr><operator pos:line="24" pos:column="39">&amp;<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="40">conns_mutex<pos:position pos:line="24" pos:column="51"/></name></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>

		<comment type="block" pos:line="26" pos:column="17">/* make the socket available to the global
		 * thread and connection management */</comment>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">this<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">socket<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <name><name pos:line="28" pos:column="32">connection<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">-&gt;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="44">socket<pos:position pos:line="28" pos:column="50"/></name></name></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="30" pos:column="17">log_debug<pos:position pos:line="30" pos:column="26"/></name> <argument_list pos:line="30" pos:column="27">(<argument><expr><literal type="string" pos:line="30" pos:column="28">"[thread #%5lu] handling connection on fd #%i"<pos:position pos:line="30" pos:column="74"/></literal></expr></argument>,
				<argument><expr><name pos:line="31" pos:column="33">self<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="39">fileno<pos:position pos:line="31" pos:column="45"/></name> <argument_list pos:line="31" pos:column="46">(<argument><expr><name><name pos:line="31" pos:column="47">this<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">-&gt;<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="53">socket<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>

		<while pos:line="33" pos:column="17">while <condition pos:line="33" pos:column="23">(<expr><name pos:line="33" pos:column="24">loop<pos:position pos:line="33" pos:column="28"/></name></expr>)<pos:position pos:line="33" pos:column="29"/></condition> <block pos:line="33" pos:column="30">{
			<comment type="block" pos:line="34" pos:column="25">/* 256 bytes ought to be enough for anybody ;-) */</comment>
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">char<pos:position pos:line="35" pos:column="29"/></name></type> <name><name pos:line="35" pos:column="30">line<pos:position pos:line="35" pos:column="34"/></name><index pos:line="35" pos:column="34">[<expr><literal type="number" pos:line="35" pos:column="35">256<pos:position pos:line="35" pos:column="38"/></literal> <operator pos:line="35" pos:column="39">+<pos:position pos:line="35" pos:column="40"/></operator> <literal type="number" pos:line="35" pos:column="41">1<pos:position pos:line="35" pos:column="42"/></literal></expr>]<pos:position pos:line="35" pos:column="43"/></index></name></decl>;<pos:position pos:line="35" pos:column="44"/></decl_stmt> <comment type="block" pos:line="35" pos:column="45">/* line + '\0' */</comment>
			<decl_stmt><decl><type><name pos:line="36" pos:column="25">int<pos:position pos:line="36" pos:column="28"/></name></type>  <name pos:line="36" pos:column="30">len<pos:position pos:line="36" pos:column="33"/></name> <init pos:line="36" pos:column="34">= <expr><literal type="number" pos:line="36" pos:column="36">0<pos:position pos:line="36" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="38"/></decl_stmt>

			<expr_stmt><expr><name pos:line="38" pos:column="25">errno<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">=<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="33">0<pos:position pos:line="38" pos:column="34"/></literal></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">NULL<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">==<pos:position pos:line="39" pos:column="36"/></operator> <call><name pos:line="39" pos:column="37">fgets<pos:position pos:line="39" pos:column="42"/></name> <argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">line<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="50">sizeof <argument_list pos:line="39" pos:column="57">(<argument><expr><name pos:line="39" pos:column="58">line<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="65">this<pos:position pos:line="39" pos:column="69"/></name><operator pos:line="39" pos:column="69">-&gt;<pos:position pos:line="39" pos:column="74"/></operator><name pos:line="39" pos:column="71">socket<pos:position pos:line="39" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="79"/></condition><then pos:line="39" pos:column="79"> <block pos:line="39" pos:column="80">{
				<expr_stmt><expr><name pos:line="40" pos:column="33">loop<pos:position pos:line="40" pos:column="37"/></name> <operator pos:line="40" pos:column="38">=<pos:position pos:line="40" pos:column="39"/></operator> <literal type="number" pos:line="40" pos:column="40">0<pos:position pos:line="40" pos:column="41"/></literal></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>

				<if pos:line="42" pos:column="33">if <condition pos:line="42" pos:column="36">(<expr><literal type="number" pos:line="42" pos:column="37">0<pos:position pos:line="42" pos:column="38"/></literal> <operator pos:line="42" pos:column="39">!=<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="42">errno<pos:position pos:line="42" pos:column="47"/></name></expr>)<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48"> <block pos:line="42" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="43" pos:column="41">char<pos:position pos:line="43" pos:column="45"/></name></type> <name><name pos:line="43" pos:column="46">errbuf<pos:position pos:line="43" pos:column="52"/></name><index pos:line="43" pos:column="52">[<expr><literal type="number" pos:line="43" pos:column="53">1024<pos:position pos:line="43" pos:column="57"/></literal></expr>]<pos:position pos:line="43" pos:column="58"/></index></name></decl>;<pos:position pos:line="43" pos:column="59"/></decl_stmt>
					<expr_stmt><expr><call><name pos:line="44" pos:column="41">log_err<pos:position pos:line="44" pos:column="48"/></name> <argument_list pos:line="44" pos:column="49">(<argument><expr><literal type="string" pos:line="44" pos:column="50">"[thread #%5lu] reading from socket (fd #%i) "<pos:position pos:line="44" pos:column="96"/></literal>
							<literal type="string" pos:line="45" pos:column="57">"failed: %s"<pos:position pos:line="45" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="71">self<pos:position pos:line="45" pos:column="75"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="77">fileno<pos:position pos:line="45" pos:column="83"/></name> <argument_list pos:line="45" pos:column="84">(<argument><expr><name><name pos:line="45" pos:column="85">this<pos:position pos:line="45" pos:column="89"/></name><operator pos:line="45" pos:column="89">-&gt;<pos:position pos:line="45" pos:column="94"/></operator><name pos:line="45" pos:column="91">socket<pos:position pos:line="45" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="98"/></argument_list></call></expr></argument>,
							<argument><expr><call><name pos:line="46" pos:column="57">sstrerror<pos:position pos:line="46" pos:column="66"/></name> <argument_list pos:line="46" pos:column="67">(<argument><expr><name pos:line="46" pos:column="68">errno<pos:position pos:line="46" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="75">errbuf<pos:position pos:line="46" pos:column="81"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="83">sizeof <argument_list pos:line="46" pos:column="90">(<argument><expr><name pos:line="46" pos:column="91">errbuf<pos:position pos:line="46" pos:column="97"/></name></expr></argument>)<pos:position pos:line="46" pos:column="98"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="101"/></expr_stmt>
				}<pos:position pos:line="47" pos:column="34"/></block></then></if>
				<break pos:line="48" pos:column="33">break;<pos:position pos:line="48" pos:column="39"/></break>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="51" pos:column="25">len<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <call><name pos:line="51" pos:column="31">strlen<pos:position pos:line="51" pos:column="37"/></name> <argument_list pos:line="51" pos:column="38">(<argument><expr><name pos:line="51" pos:column="39">line<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><operator pos:line="52" pos:column="29">(<pos:position pos:line="52" pos:column="30"/></operator><literal type="char" pos:line="52" pos:column="30">'\n'<pos:position pos:line="52" pos:column="34"/></literal> <operator pos:line="52" pos:column="35">!=<pos:position pos:line="52" pos:column="37"/></operator> <name><name pos:line="52" pos:column="38">line<pos:position pos:line="52" pos:column="42"/></name><index pos:line="52" pos:column="42">[<expr><name pos:line="52" pos:column="43">len<pos:position pos:line="52" pos:column="46"/></name> <operator pos:line="52" pos:column="47">-<pos:position pos:line="52" pos:column="48"/></operator> <literal type="number" pos:line="52" pos:column="49">1<pos:position pos:line="52" pos:column="50"/></literal></expr>]<pos:position pos:line="52" pos:column="51"/></index></name><operator pos:line="52" pos:column="51">)<pos:position pos:line="52" pos:column="52"/></operator> <operator pos:line="52" pos:column="53">&amp;&amp;<pos:position pos:line="52" pos:column="63"/></operator> <operator pos:line="52" pos:column="56">(<pos:position pos:line="52" pos:column="57"/></operator><literal type="char" pos:line="52" pos:column="57">'\r'<pos:position pos:line="52" pos:column="61"/></literal> <operator pos:line="52" pos:column="62">!=<pos:position pos:line="52" pos:column="64"/></operator> <name><name pos:line="52" pos:column="65">line<pos:position pos:line="52" pos:column="69"/></name><index pos:line="52" pos:column="69">[<expr><name pos:line="52" pos:column="70">len<pos:position pos:line="52" pos:column="73"/></name> <operator pos:line="52" pos:column="74">-<pos:position pos:line="52" pos:column="75"/></operator> <literal type="number" pos:line="52" pos:column="76">1<pos:position pos:line="52" pos:column="77"/></literal></expr>]<pos:position pos:line="52" pos:column="78"/></index></name><operator pos:line="52" pos:column="78">)<pos:position pos:line="52" pos:column="79"/></operator></expr>)<pos:position pos:line="52" pos:column="80"/></condition><then pos:line="52" pos:column="80"> <block pos:line="52" pos:column="81">{
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">log_warn<pos:position pos:line="53" pos:column="41"/></name> <argument_list pos:line="53" pos:column="42">(<argument><expr><literal type="string" pos:line="53" pos:column="43">"[thread #%5lu] line too long (&gt; %lu characters): "<pos:position pos:line="53" pos:column="97"/></literal>
						<literal type="string" pos:line="54" pos:column="49">"'%s' (truncated)"<pos:position pos:line="54" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="69">self<pos:position pos:line="54" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="75">sizeof <argument_list pos:line="54" pos:column="82">(<argument><expr><name pos:line="54" pos:column="83">line<pos:position pos:line="54" pos:column="87"/></name></expr></argument>)<pos:position pos:line="54" pos:column="88"/></argument_list></sizeof> <operator pos:line="54" pos:column="89">-<pos:position pos:line="54" pos:column="90"/></operator> <literal type="number" pos:line="54" pos:column="91">1<pos:position pos:line="54" pos:column="92"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="94">line<pos:position pos:line="54" pos:column="98"/></name></expr></argument>)<pos:position pos:line="54" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="100"/></expr_stmt>

				<while pos:line="56" pos:column="33">while <condition pos:line="56" pos:column="39">(<expr><name pos:line="56" pos:column="40">NULL<pos:position pos:line="56" pos:column="44"/></name> <operator pos:line="56" pos:column="45">!=<pos:position pos:line="56" pos:column="47"/></operator> <call><name pos:line="56" pos:column="48">fgets<pos:position pos:line="56" pos:column="53"/></name> <argument_list pos:line="56" pos:column="54">(<argument><expr><name pos:line="56" pos:column="55">line<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="61">sizeof <argument_list pos:line="56" pos:column="68">(<argument><expr><name pos:line="56" pos:column="69">line<pos:position pos:line="56" pos:column="73"/></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="76">this<pos:position pos:line="56" pos:column="80"/></name><operator pos:line="56" pos:column="80">-&gt;<pos:position pos:line="56" pos:column="85"/></operator><name pos:line="56" pos:column="82">socket<pos:position pos:line="56" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="89"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="90"/></condition>
					<block type="pseudo"><if pos:line="57" pos:column="41">if <condition pos:line="57" pos:column="44">(<expr><operator pos:line="57" pos:column="45">(<pos:position pos:line="57" pos:column="46"/></operator><literal type="char" pos:line="57" pos:column="46">'\n'<pos:position pos:line="57" pos:column="50"/></literal> <operator pos:line="57" pos:column="51">==<pos:position pos:line="57" pos:column="53"/></operator> <name><name pos:line="57" pos:column="54">line<pos:position pos:line="57" pos:column="58"/></name><index pos:line="57" pos:column="58">[<expr><name pos:line="57" pos:column="59">len<pos:position pos:line="57" pos:column="62"/></name> <operator pos:line="57" pos:column="63">-<pos:position pos:line="57" pos:column="64"/></operator> <literal type="number" pos:line="57" pos:column="65">1<pos:position pos:line="57" pos:column="66"/></literal></expr>]<pos:position pos:line="57" pos:column="67"/></index></name><operator pos:line="57" pos:column="67">)<pos:position pos:line="57" pos:column="68"/></operator> <operator pos:line="57" pos:column="69">||<pos:position pos:line="57" pos:column="71"/></operator> <operator pos:line="57" pos:column="72">(<pos:position pos:line="57" pos:column="73"/></operator><literal type="char" pos:line="57" pos:column="73">'\r'<pos:position pos:line="57" pos:column="77"/></literal> <operator pos:line="57" pos:column="78">==<pos:position pos:line="57" pos:column="80"/></operator> <name><name pos:line="57" pos:column="81">line<pos:position pos:line="57" pos:column="85"/></name><index pos:line="57" pos:column="85">[<expr><name pos:line="57" pos:column="86">len<pos:position pos:line="57" pos:column="89"/></name> <operator pos:line="57" pos:column="90">-<pos:position pos:line="57" pos:column="91"/></operator> <literal type="number" pos:line="57" pos:column="92">1<pos:position pos:line="57" pos:column="93"/></literal></expr>]<pos:position pos:line="57" pos:column="94"/></index></name><operator pos:line="57" pos:column="94">)<pos:position pos:line="57" pos:column="95"/></operator></expr>)<pos:position pos:line="57" pos:column="96"/></condition><then pos:line="57" pos:column="96">
						<block type="pseudo"><break pos:line="58" pos:column="49">break;<pos:position pos:line="58" pos:column="55"/></break></block></then></if></block></while>
				<continue pos:line="59" pos:column="33">continue;<pos:position pos:line="59" pos:column="42"/></continue>
			}<pos:position pos:line="60" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name><name pos:line="62" pos:column="25">line<pos:position pos:line="62" pos:column="29"/></name><index pos:line="62" pos:column="29">[<expr><name pos:line="62" pos:column="30">len<pos:position pos:line="62" pos:column="33"/></name> <operator pos:line="62" pos:column="34">-<pos:position pos:line="62" pos:column="35"/></operator> <literal type="number" pos:line="62" pos:column="36">1<pos:position pos:line="62" pos:column="37"/></literal></expr>]<pos:position pos:line="62" pos:column="38"/></index></name> <operator pos:line="62" pos:column="39">=<pos:position pos:line="62" pos:column="40"/></operator> <literal type="char" pos:line="62" pos:column="41">'\0'<pos:position pos:line="62" pos:column="45"/></literal></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="64" pos:column="25">log_debug<pos:position pos:line="64" pos:column="34"/></name> <argument_list pos:line="64" pos:column="35">(<argument><expr><literal type="string" pos:line="64" pos:column="36">"[thread #%5lu] line = '%s'"<pos:position pos:line="64" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="66">self<pos:position pos:line="64" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="72">line<pos:position pos:line="64" pos:column="76"/></name></expr></argument>)<pos:position pos:line="64" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="78"/></expr_stmt>

			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><literal type="char" pos:line="66" pos:column="29">':'<pos:position pos:line="66" pos:column="32"/></literal> <operator pos:line="66" pos:column="33">!=<pos:position pos:line="66" pos:column="35"/></operator> <name><name pos:line="66" pos:column="36">line<pos:position pos:line="66" pos:column="40"/></name><index pos:line="66" pos:column="40">[<expr><literal type="number" pos:line="66" pos:column="41">1<pos:position pos:line="66" pos:column="42"/></literal></expr>]<pos:position pos:line="66" pos:column="43"/></index></name></expr>)<pos:position pos:line="66" pos:column="44"/></condition><then pos:line="66" pos:column="44"> <block pos:line="66" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="67" pos:column="33">log_err<pos:position pos:line="67" pos:column="40"/></name> <argument_list pos:line="67" pos:column="41">(<argument><expr><literal type="string" pos:line="67" pos:column="42">"[thread #%5lu] syntax error in line '%s'"<pos:position pos:line="67" pos:column="84"/></literal></expr></argument>,
						<argument><expr><name pos:line="68" pos:column="49">self<pos:position pos:line="68" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="55">line<pos:position pos:line="68" pos:column="59"/></name></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="61"/></expr_stmt>
				<continue pos:line="69" pos:column="33">continue;<pos:position pos:line="69" pos:column="42"/></continue>
			}<pos:position pos:line="70" pos:column="26"/></block></then></if>

			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><literal type="char" pos:line="72" pos:column="29">'e'<pos:position pos:line="72" pos:column="32"/></literal> <operator pos:line="72" pos:column="33">==<pos:position pos:line="72" pos:column="35"/></operator> <name><name pos:line="72" pos:column="36">line<pos:position pos:line="72" pos:column="40"/></name><index pos:line="72" pos:column="40">[<expr><literal type="number" pos:line="72" pos:column="41">0<pos:position pos:line="72" pos:column="42"/></literal></expr>]<pos:position pos:line="72" pos:column="43"/></index></name></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44"> <block pos:line="72" pos:column="45">{ <comment type="block" pos:line="72" pos:column="47">/* e:&lt;type&gt;:&lt;bytes&gt; */</comment>
				<decl_stmt><decl><type><name pos:line="73" pos:column="33">char<pos:position pos:line="73" pos:column="37"/></name> <modifier pos:line="73" pos:column="38">*<pos:position pos:line="73" pos:column="39"/></modifier></type><name pos:line="73" pos:column="39">ptr<pos:position pos:line="73" pos:column="42"/></name>  <init pos:line="73" pos:column="44">= <expr><name pos:line="73" pos:column="46">NULL<pos:position pos:line="73" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="73" pos:column="51"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="74" pos:column="33">char<pos:position pos:line="74" pos:column="37"/></name> <modifier pos:line="74" pos:column="38">*<pos:position pos:line="74" pos:column="39"/></modifier></type><name pos:line="74" pos:column="39">type<pos:position pos:line="74" pos:column="43"/></name> <init pos:line="74" pos:column="44">= <expr><call><name pos:line="74" pos:column="46">strtok_r<pos:position pos:line="74" pos:column="54"/></name> <argument_list pos:line="74" pos:column="55">(<argument><expr><name pos:line="74" pos:column="56">line<pos:position pos:line="74" pos:column="60"/></name> <operator pos:line="74" pos:column="61">+<pos:position pos:line="74" pos:column="62"/></operator> <literal type="number" pos:line="74" pos:column="63">2<pos:position pos:line="74" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="66">":"<pos:position pos:line="74" pos:column="69"/></literal></expr></argument>, <argument><expr><operator pos:line="74" pos:column="71">&amp;<pos:position pos:line="74" pos:column="76"/></operator><name pos:line="74" pos:column="72">ptr<pos:position pos:line="74" pos:column="75"/></name></expr></argument>)<pos:position pos:line="74" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="77"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="75" pos:column="33">char<pos:position pos:line="75" pos:column="37"/></name> <modifier pos:line="75" pos:column="38">*<pos:position pos:line="75" pos:column="39"/></modifier></type><name pos:line="75" pos:column="39">tmp<pos:position pos:line="75" pos:column="42"/></name>  <init pos:line="75" pos:column="44">= <expr><call><name pos:line="75" pos:column="46">strtok_r<pos:position pos:line="75" pos:column="54"/></name> <argument_list pos:line="75" pos:column="55">(<argument><expr><name pos:line="75" pos:column="56">NULL<pos:position pos:line="75" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="62">":"<pos:position pos:line="75" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="75" pos:column="67">&amp;<pos:position pos:line="75" pos:column="72"/></operator><name pos:line="75" pos:column="68">ptr<pos:position pos:line="75" pos:column="71"/></name></expr></argument>)<pos:position pos:line="75" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="75" pos:column="73"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="76" pos:column="33">int<pos:position pos:line="76" pos:column="36"/></name></type>  <name pos:line="76" pos:column="38">bytes<pos:position pos:line="76" pos:column="43"/></name> <init pos:line="76" pos:column="44">= <expr><literal type="number" pos:line="76" pos:column="46">0<pos:position pos:line="76" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="48"/></decl_stmt>

				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name pos:line="78" pos:column="37">NULL<pos:position pos:line="78" pos:column="41"/></name> <operator pos:line="78" pos:column="42">==<pos:position pos:line="78" pos:column="44"/></operator> <name pos:line="78" pos:column="45">tmp<pos:position pos:line="78" pos:column="48"/></name></expr>)<pos:position pos:line="78" pos:column="49"/></condition><then pos:line="78" pos:column="49"> <block pos:line="78" pos:column="50">{
					<expr_stmt><expr><call><name pos:line="79" pos:column="41">log_err<pos:position pos:line="79" pos:column="48"/></name> <argument_list pos:line="79" pos:column="49">(<argument><expr><literal type="string" pos:line="79" pos:column="50">"[thread #%5lu] syntax error in line '%s'"<pos:position pos:line="79" pos:column="92"/></literal></expr></argument>,
							<argument><expr><name pos:line="80" pos:column="57">self<pos:position pos:line="80" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="63">line<pos:position pos:line="80" pos:column="67"/></name></expr></argument>)<pos:position pos:line="80" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="69"/></expr_stmt>
					<continue pos:line="81" pos:column="41">continue;<pos:position pos:line="81" pos:column="50"/></continue>
				}<pos:position pos:line="82" pos:column="34"/></block></then></if>

				<expr_stmt><expr><name pos:line="84" pos:column="33">bytes<pos:position pos:line="84" pos:column="38"/></name> <operator pos:line="84" pos:column="39">=<pos:position pos:line="84" pos:column="40"/></operator> <call><name pos:line="84" pos:column="41">atoi<pos:position pos:line="84" pos:column="45"/></name> <argument_list pos:line="84" pos:column="46">(<argument><expr><name pos:line="84" pos:column="47">tmp<pos:position pos:line="84" pos:column="50"/></name></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="52"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="86" pos:column="33">pthread_mutex_lock<pos:position pos:line="86" pos:column="51"/></name> <argument_list pos:line="86" pos:column="52">(<argument><expr><operator pos:line="86" pos:column="53">&amp;<pos:position pos:line="86" pos:column="58"/></operator><name pos:line="86" pos:column="54">count_mutex<pos:position pos:line="86" pos:column="65"/></name></expr></argument>)<pos:position pos:line="86" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">type_list_incr<pos:position pos:line="87" pos:column="47"/></name> <argument_list pos:line="87" pos:column="48">(<argument><expr><operator pos:line="87" pos:column="49">&amp;<pos:position pos:line="87" pos:column="54"/></operator><name pos:line="87" pos:column="50">list_count<pos:position pos:line="87" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="62">type<pos:position pos:line="87" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="68">1<pos:position pos:line="87" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">pthread_mutex_unlock<pos:position pos:line="88" pos:column="53"/></name> <argument_list pos:line="88" pos:column="54">(<argument><expr><operator pos:line="88" pos:column="55">&amp;<pos:position pos:line="88" pos:column="60"/></operator><name pos:line="88" pos:column="56">count_mutex<pos:position pos:line="88" pos:column="67"/></name></expr></argument>)<pos:position pos:line="88" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="69"/></expr_stmt>

				<if pos:line="90" pos:column="33">if <condition pos:line="90" pos:column="36">(<expr><name pos:line="90" pos:column="37">bytes<pos:position pos:line="90" pos:column="42"/></name> <operator pos:line="90" pos:column="43">&gt;<pos:position pos:line="90" pos:column="47"/></operator> <literal type="number" pos:line="90" pos:column="45">0<pos:position pos:line="90" pos:column="46"/></literal></expr>)<pos:position pos:line="90" pos:column="47"/></condition><then pos:line="90" pos:column="47"> <block pos:line="90" pos:column="48">{
					<expr_stmt><expr><call><name pos:line="91" pos:column="41">pthread_mutex_lock<pos:position pos:line="91" pos:column="59"/></name> <argument_list pos:line="91" pos:column="60">(<argument><expr><operator pos:line="91" pos:column="61">&amp;<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="62">size_mutex<pos:position pos:line="91" pos:column="72"/></name></expr></argument>)<pos:position pos:line="91" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="74"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="92" pos:column="41">type_list_incr<pos:position pos:line="92" pos:column="55"/></name> <argument_list pos:line="92" pos:column="56">(<argument><expr><operator pos:line="92" pos:column="57">&amp;<pos:position pos:line="92" pos:column="62"/></operator><name pos:line="92" pos:column="58">list_size<pos:position pos:line="92" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="69">type<pos:position pos:line="92" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="75">bytes<pos:position pos:line="92" pos:column="80"/></name></expr></argument>)<pos:position pos:line="92" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="82"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="93" pos:column="41">pthread_mutex_unlock<pos:position pos:line="93" pos:column="61"/></name> <argument_list pos:line="93" pos:column="62">(<argument><expr><operator pos:line="93" pos:column="63">&amp;<pos:position pos:line="93" pos:column="68"/></operator><name pos:line="93" pos:column="64">size_mutex<pos:position pos:line="93" pos:column="74"/></name></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt>
				}<pos:position pos:line="94" pos:column="34"/></block></then></if>
			}<pos:position pos:line="95" pos:column="26"/></block></then>
			<elseif pos:line="96" pos:column="25">else <if pos:line="96" pos:column="30">if <condition pos:line="96" pos:column="33">(<expr><literal type="char" pos:line="96" pos:column="34">'s'<pos:position pos:line="96" pos:column="37"/></literal> <operator pos:line="96" pos:column="38">==<pos:position pos:line="96" pos:column="40"/></operator> <name><name pos:line="96" pos:column="41">line<pos:position pos:line="96" pos:column="45"/></name><index pos:line="96" pos:column="45">[<expr><literal type="number" pos:line="96" pos:column="46">0<pos:position pos:line="96" pos:column="47"/></literal></expr>]<pos:position pos:line="96" pos:column="48"/></index></name></expr>)<pos:position pos:line="96" pos:column="49"/></condition><then pos:line="96" pos:column="49"> <block pos:line="96" pos:column="50">{ <comment type="block" pos:line="96" pos:column="52">/* s:&lt;value&gt; */</comment>
				<expr_stmt><expr><call><name pos:line="97" pos:column="33">pthread_mutex_lock<pos:position pos:line="97" pos:column="51"/></name> <argument_list pos:line="97" pos:column="52">(<argument><expr><operator pos:line="97" pos:column="53">&amp;<pos:position pos:line="97" pos:column="58"/></operator><name pos:line="97" pos:column="54">score_mutex<pos:position pos:line="97" pos:column="65"/></name></expr></argument>)<pos:position pos:line="97" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name pos:line="98" pos:column="33">score<pos:position pos:line="98" pos:column="38"/></name> <operator pos:line="98" pos:column="39">=<pos:position pos:line="98" pos:column="40"/></operator> <operator pos:line="98" pos:column="41">(<pos:position pos:line="98" pos:column="42"/></operator><name pos:line="98" pos:column="42">score<pos:position pos:line="98" pos:column="47"/></name> <operator pos:line="98" pos:column="48">*<pos:position pos:line="98" pos:column="49"/></operator> <operator pos:line="98" pos:column="50">(<pos:position pos:line="98" pos:column="51"/></operator><name pos:line="98" pos:column="51">double<pos:position pos:line="98" pos:column="57"/></name><operator pos:line="98" pos:column="57">)<pos:position pos:line="98" pos:column="58"/></operator><name pos:line="98" pos:column="58">score_count<pos:position pos:line="98" pos:column="69"/></name> <operator pos:line="98" pos:column="70">+<pos:position pos:line="98" pos:column="71"/></operator> <call><name pos:line="98" pos:column="72">atof<pos:position pos:line="98" pos:column="76"/></name> <argument_list pos:line="98" pos:column="77">(<argument><expr><name pos:line="98" pos:column="78">line<pos:position pos:line="98" pos:column="82"/></name> <operator pos:line="98" pos:column="83">+<pos:position pos:line="98" pos:column="84"/></operator> <literal type="number" pos:line="98" pos:column="85">2<pos:position pos:line="98" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="87"/></argument_list></call><operator pos:line="98" pos:column="87">)<pos:position pos:line="98" pos:column="88"/></operator>
						<operator pos:line="99" pos:column="49">/<pos:position pos:line="99" pos:column="50"/></operator> <call pos:line="99" pos:column="51">(<name pos:line="99" pos:column="52">double<pos:position pos:line="99" pos:column="58"/></name>)<argument_list pos:line="99" pos:column="59">(<argument><expr><name pos:line="99" pos:column="60">score_count<pos:position pos:line="99" pos:column="71"/></name> <operator pos:line="99" pos:column="72">+<pos:position pos:line="99" pos:column="73"/></operator> <literal type="number" pos:line="99" pos:column="74">1<pos:position pos:line="99" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="77"/></expr_stmt>
				<expr_stmt><expr><operator pos:line="100" pos:column="33">++<pos:position pos:line="100" pos:column="35"/></operator><name pos:line="100" pos:column="35">score_count<pos:position pos:line="100" pos:column="46"/></name></expr>;<pos:position pos:line="100" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="101" pos:column="33">pthread_mutex_unlock<pos:position pos:line="101" pos:column="53"/></name> <argument_list pos:line="101" pos:column="54">(<argument><expr><operator pos:line="101" pos:column="55">&amp;<pos:position pos:line="101" pos:column="60"/></operator><name pos:line="101" pos:column="56">score_mutex<pos:position pos:line="101" pos:column="67"/></name></expr></argument>)<pos:position pos:line="101" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="69"/></expr_stmt>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if></elseif>
			<elseif pos:line="103" pos:column="25">else <if pos:line="103" pos:column="30">if <condition pos:line="103" pos:column="33">(<expr><literal type="char" pos:line="103" pos:column="34">'c'<pos:position pos:line="103" pos:column="37"/></literal> <operator pos:line="103" pos:column="38">==<pos:position pos:line="103" pos:column="40"/></operator> <name><name pos:line="103" pos:column="41">line<pos:position pos:line="103" pos:column="45"/></name><index pos:line="103" pos:column="45">[<expr><literal type="number" pos:line="103" pos:column="46">0<pos:position pos:line="103" pos:column="47"/></literal></expr>]<pos:position pos:line="103" pos:column="48"/></index></name></expr>)<pos:position pos:line="103" pos:column="49"/></condition><then pos:line="103" pos:column="49"> <block pos:line="103" pos:column="50">{ <comment type="block" pos:line="103" pos:column="52">/* c:&lt;type1&gt;[,&lt;type2&gt;,...] */</comment>
				<decl_stmt><decl><type><name pos:line="104" pos:column="33">char<pos:position pos:line="104" pos:column="37"/></name> <modifier pos:line="104" pos:column="38">*<pos:position pos:line="104" pos:column="39"/></modifier></type><name pos:line="104" pos:column="39">ptr<pos:position pos:line="104" pos:column="42"/></name>  <init pos:line="104" pos:column="44">= <expr><name pos:line="104" pos:column="46">NULL<pos:position pos:line="104" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="104" pos:column="51"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="105" pos:column="33">char<pos:position pos:line="105" pos:column="37"/></name> <modifier pos:line="105" pos:column="38">*<pos:position pos:line="105" pos:column="39"/></modifier></type><name pos:line="105" pos:column="39">type<pos:position pos:line="105" pos:column="43"/></name> <init pos:line="105" pos:column="44">= <expr><call><name pos:line="105" pos:column="46">strtok_r<pos:position pos:line="105" pos:column="54"/></name> <argument_list pos:line="105" pos:column="55">(<argument><expr><name pos:line="105" pos:column="56">line<pos:position pos:line="105" pos:column="60"/></name> <operator pos:line="105" pos:column="61">+<pos:position pos:line="105" pos:column="62"/></operator> <literal type="number" pos:line="105" pos:column="63">2<pos:position pos:line="105" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="66">","<pos:position pos:line="105" pos:column="69"/></literal></expr></argument>, <argument><expr><operator pos:line="105" pos:column="71">&amp;<pos:position pos:line="105" pos:column="76"/></operator><name pos:line="105" pos:column="72">ptr<pos:position pos:line="105" pos:column="75"/></name></expr></argument>)<pos:position pos:line="105" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="105" pos:column="77"/></decl_stmt>

				<do pos:line="107" pos:column="33">do <block pos:line="107" pos:column="36">{
					<expr_stmt><expr><call><name pos:line="108" pos:column="41">pthread_mutex_lock<pos:position pos:line="108" pos:column="59"/></name> <argument_list pos:line="108" pos:column="60">(<argument><expr><operator pos:line="108" pos:column="61">&amp;<pos:position pos:line="108" pos:column="66"/></operator><name pos:line="108" pos:column="62">check_mutex<pos:position pos:line="108" pos:column="73"/></name></expr></argument>)<pos:position pos:line="108" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="75"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="109" pos:column="41">type_list_incr<pos:position pos:line="109" pos:column="55"/></name> <argument_list pos:line="109" pos:column="56">(<argument><expr><operator pos:line="109" pos:column="57">&amp;<pos:position pos:line="109" pos:column="62"/></operator><name pos:line="109" pos:column="58">list_check<pos:position pos:line="109" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="70">type<pos:position pos:line="109" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="76">1<pos:position pos:line="109" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="79"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="110" pos:column="41">pthread_mutex_unlock<pos:position pos:line="110" pos:column="61"/></name> <argument_list pos:line="110" pos:column="62">(<argument><expr><operator pos:line="110" pos:column="63">&amp;<pos:position pos:line="110" pos:column="68"/></operator><name pos:line="110" pos:column="64">check_mutex<pos:position pos:line="110" pos:column="75"/></name></expr></argument>)<pos:position pos:line="110" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="77"/></expr_stmt>
				}<pos:position pos:line="111" pos:column="34"/></block> while <condition pos:line="111" pos:column="41">(<expr><name pos:line="111" pos:column="42">NULL<pos:position pos:line="111" pos:column="46"/></name> <operator pos:line="111" pos:column="47">!=<pos:position pos:line="111" pos:column="49"/></operator> <operator pos:line="111" pos:column="50">(<pos:position pos:line="111" pos:column="51"/></operator><name pos:line="111" pos:column="51">type<pos:position pos:line="111" pos:column="55"/></name> <operator pos:line="111" pos:column="56">=<pos:position pos:line="111" pos:column="57"/></operator> <call><name pos:line="111" pos:column="58">strtok_r<pos:position pos:line="111" pos:column="66"/></name> <argument_list pos:line="111" pos:column="67">(<argument><expr><name pos:line="111" pos:column="68">NULL<pos:position pos:line="111" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="74">","<pos:position pos:line="111" pos:column="77"/></literal></expr></argument>, <argument><expr><operator pos:line="111" pos:column="79">&amp;<pos:position pos:line="111" pos:column="84"/></operator><name pos:line="111" pos:column="80">ptr<pos:position pos:line="111" pos:column="83"/></name></expr></argument>)<pos:position pos:line="111" pos:column="84"/></argument_list></call><operator pos:line="111" pos:column="84">)<pos:position pos:line="111" pos:column="85"/></operator></expr>)<pos:position pos:line="111" pos:column="86"/></condition>;<pos:position pos:line="111" pos:column="87"/></do>
			}<pos:position pos:line="112" pos:column="26"/></block></then></if></elseif>
			<else pos:line="113" pos:column="25">else <block pos:line="113" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="114" pos:column="33">log_err<pos:position pos:line="114" pos:column="40"/></name> <argument_list pos:line="114" pos:column="41">(<argument><expr><literal type="string" pos:line="114" pos:column="42">"[thread #%5lu] unknown type '%c'"<pos:position pos:line="114" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="78">self<pos:position pos:line="114" pos:column="82"/></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="84">line<pos:position pos:line="114" pos:column="88"/></name><index pos:line="114" pos:column="88">[<expr><literal type="number" pos:line="114" pos:column="89">0<pos:position pos:line="114" pos:column="90"/></literal></expr>]<pos:position pos:line="114" pos:column="91"/></index></name></expr></argument>)<pos:position pos:line="114" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="93"/></expr_stmt>
			}<pos:position pos:line="115" pos:column="26"/></block></else></if>
		}<pos:position pos:line="116" pos:column="18"/></block></while> <comment type="block" pos:line="116" pos:column="19">/* while (loop) */</comment>

		<expr_stmt><expr><call><name pos:line="118" pos:column="17">log_debug<pos:position pos:line="118" pos:column="26"/></name> <argument_list pos:line="118" pos:column="27">(<argument><expr><literal type="string" pos:line="118" pos:column="28">"[thread #%5lu] shutting down connection on fd #%i"<pos:position pos:line="118" pos:column="79"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="119" pos:column="33">pthread_self<pos:position pos:line="119" pos:column="45"/></name> <argument_list pos:line="119" pos:column="46">()<pos:position pos:line="119" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="119" pos:column="50">fileno<pos:position pos:line="119" pos:column="56"/></name> <argument_list pos:line="119" pos:column="57">(<argument><expr><name><name pos:line="119" pos:column="58">this<pos:position pos:line="119" pos:column="62"/></name><operator pos:line="119" pos:column="62">-&gt;<pos:position pos:line="119" pos:column="67"/></operator><name pos:line="119" pos:column="64">socket<pos:position pos:line="119" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="119" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="73"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="121" pos:column="17">fclose<pos:position pos:line="121" pos:column="23"/></name> <argument_list pos:line="121" pos:column="24">(<argument><expr><name><name pos:line="121" pos:column="25">connection<pos:position pos:line="121" pos:column="35"/></name><operator pos:line="121" pos:column="35">-&gt;<pos:position pos:line="121" pos:column="40"/></operator><name pos:line="121" pos:column="37">socket<pos:position pos:line="121" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="122" pos:column="17">free<pos:position pos:line="122" pos:column="21"/></name> <argument_list pos:line="122" pos:column="22">(<argument><expr><name pos:line="122" pos:column="23">connection<pos:position pos:line="122" pos:column="33"/></name></expr></argument>)<pos:position pos:line="122" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="124" pos:column="17">this<pos:position pos:line="124" pos:column="21"/></name><operator pos:line="124" pos:column="21">-&gt;<pos:position pos:line="124" pos:column="26"/></operator><name pos:line="124" pos:column="23">socket<pos:position pos:line="124" pos:column="29"/></name></name> <operator pos:line="124" pos:column="30">=<pos:position pos:line="124" pos:column="31"/></operator> <name pos:line="124" pos:column="32">NULL<pos:position pos:line="124" pos:column="36"/></name></expr>;<pos:position pos:line="124" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="126" pos:column="17">pthread_mutex_lock<pos:position pos:line="126" pos:column="35"/></name> <argument_list pos:line="126" pos:column="36">(<argument><expr><operator pos:line="126" pos:column="37">&amp;<pos:position pos:line="126" pos:column="42"/></operator><name pos:line="126" pos:column="38">available_mutex<pos:position pos:line="126" pos:column="53"/></name></expr></argument>)<pos:position pos:line="126" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="127" pos:column="17">++<pos:position pos:line="127" pos:column="19"/></operator><name pos:line="127" pos:column="19">available_collectors<pos:position pos:line="127" pos:column="39"/></name></expr>;<pos:position pos:line="127" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="128" pos:column="17">pthread_mutex_unlock<pos:position pos:line="128" pos:column="37"/></name> <argument_list pos:line="128" pos:column="38">(<argument><expr><operator pos:line="128" pos:column="39">&amp;<pos:position pos:line="128" pos:column="44"/></operator><name pos:line="128" pos:column="40">available_mutex<pos:position pos:line="128" pos:column="55"/></name></expr></argument>)<pos:position pos:line="128" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="57"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="130" pos:column="17">pthread_cond_signal<pos:position pos:line="130" pos:column="36"/></name> <argument_list pos:line="130" pos:column="37">(<argument><expr><operator pos:line="130" pos:column="38">&amp;<pos:position pos:line="130" pos:column="43"/></operator><name pos:line="130" pos:column="39">collector_available<pos:position pos:line="130" pos:column="58"/></name></expr></argument>)<pos:position pos:line="130" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="131" pos:column="10"/></block></while> <comment type="block" pos:line="131" pos:column="11">/* while (1) */</comment>

	<expr_stmt><expr><call><name pos:line="133" pos:column="9">pthread_exit<pos:position pos:line="133" pos:column="21"/></name> <argument_list pos:line="133" pos:column="22">(<argument><expr><operator pos:line="133" pos:column="23">(<pos:position pos:line="133" pos:column="24"/></operator><name pos:line="133" pos:column="24">void<pos:position pos:line="133" pos:column="28"/></name> <operator pos:line="133" pos:column="29">*<pos:position pos:line="133" pos:column="30"/></operator><operator pos:line="133" pos:column="30">)<pos:position pos:line="133" pos:column="31"/></operator><literal type="number" pos:line="133" pos:column="31">0<pos:position pos:line="133" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="34"/></expr_stmt>
}<pos:position pos:line="134" pos:column="2"/></block></function></unit>
