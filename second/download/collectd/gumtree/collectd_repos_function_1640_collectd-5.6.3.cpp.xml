<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1640_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ceph_cb_number<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">ctx<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">number_val<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">yajl_len_t<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">number_len<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <block pos:line="2" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">yajl_struct<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">state<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><operator pos:line="3" pos:column="24">(<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="25">yajl_struct<pos:position pos:line="3" pos:column="36"/></name> <operator pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></operator><operator pos:line="3" pos:column="38">)<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="39">ctx<pos:position pos:line="3" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">number_len<pos:position pos:line="4" pos:column="25"/></name> <operator pos:line="4" pos:column="26">+<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="28">1<pos:position pos:line="4" pos:column="29"/></literal></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">key<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><literal type="number" pos:line="5" pos:column="12">2<pos:position pos:line="5" pos:column="13"/></literal> <operator pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">DATA_MAX_NAME_LEN<pos:position pos:line="5" pos:column="33"/></name></expr>]<pos:position pos:line="5" pos:column="34"/></index></name> <init pos:line="5" pos:column="35">= <expr><block pos:line="5" pos:column="37">{<expr><literal type="number" pos:line="5" pos:column="38">0<pos:position pos:line="5" pos:column="39"/></literal></expr>}<pos:position pos:line="5" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">_Bool<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">latency_type<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memcpy<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">buffer<pos:position pos:line="9" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="18">number_val<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">number_len<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">buffer<pos:position pos:line="10" pos:column="9"/></name><index pos:line="10" pos:column="9">[<expr><sizeof pos:line="10" pos:column="10">sizeof<argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">buffer<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></sizeof> <operator pos:line="10" pos:column="25">-<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="27">1<pos:position pos:line="10" pos:column="28"/></literal></expr>]<pos:position pos:line="10" pos:column="29"/></index></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <literal type="char" pos:line="10" pos:column="32">'\0'<pos:position pos:line="10" pos:column="36"/></literal></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">size_t<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">i<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></init> <condition><expr><name pos:line="12" pos:column="22">i<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <name><name pos:line="12" pos:column="26">state<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">depth<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></condition> <incr><expr><name pos:line="12" pos:column="40">i<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">++<pos:position pos:line="12" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="44"/></control> <block pos:line="12" pos:column="45">{
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">state<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">stack<pos:position pos:line="13" pos:column="21"/></name><index pos:line="13" pos:column="21">[<expr><name pos:line="13" pos:column="22">i<pos:position pos:line="13" pos:column="23"/></name></expr>]<pos:position pos:line="13" pos:column="24"/></index></name> <operator pos:line="13" pos:column="25">==<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="28">NULL<pos:position pos:line="13" pos:column="32"/></name></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33">
      <block type="pseudo"><continue pos:line="14" pos:column="7">continue;<pos:position pos:line="14" pos:column="16"/></continue></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">strlen<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">key<pos:position pos:line="16" pos:column="19"/></name></expr></argument>)<pos:position pos:line="16" pos:column="20"/></argument_list></call> <operator pos:line="16" pos:column="21">!=<pos:position pos:line="16" pos:column="23"/></operator> <literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="7">BUFFER_ADD<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">key<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"."<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">BUFFER_ADD<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">key<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="21">state<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">stack<pos:position pos:line="18" pos:column="33"/></name><index pos:line="18" pos:column="33">[<expr><name pos:line="18" pos:column="34">i<pos:position pos:line="18" pos:column="35"/></name></expr>]<pos:position pos:line="18" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></for>

  <comment type="block" pos:line="21" pos:column="3">/* Special case for latency metrics. */</comment>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><call><name pos:line="22" pos:column="8">strcmp<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="string" pos:line="22" pos:column="15">"avgcount"<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="27">state<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">key<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call> <operator pos:line="22" pos:column="39">==<pos:position pos:line="22" pos:column="41"/></operator> <literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal><operator pos:line="22" pos:column="43">)<pos:position pos:line="22" pos:column="44"/></operator> <operator pos:line="22" pos:column="45">||<pos:position pos:line="22" pos:column="47"/></operator>
      <operator pos:line="23" pos:column="7">(<pos:position pos:line="23" pos:column="8"/></operator><call><name pos:line="23" pos:column="8">strcmp<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="string" pos:line="23" pos:column="15">"sum"<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="22">state<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">key<pos:position pos:line="23" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call> <operator pos:line="23" pos:column="34">==<pos:position pos:line="23" pos:column="36"/></operator> <literal type="number" pos:line="23" pos:column="37">0<pos:position pos:line="23" pos:column="38"/></literal><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40"> <block pos:line="23" pos:column="41">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">latency_type<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="20">1<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* depth &gt;= 2  =&gt;  (stack[-1] != NULL &amp;&amp; stack[-2] != NULL) */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">assert<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name><name pos:line="27" pos:column="13">state<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">depth<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">&lt;<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="28">2<pos:position pos:line="27" pos:column="29"/></literal><operator pos:line="27" pos:column="29">)<pos:position pos:line="27" pos:column="30"/></operator> <operator pos:line="27" pos:column="31">||<pos:position pos:line="27" pos:column="33"/></operator> <operator pos:line="27" pos:column="34">(<pos:position pos:line="27" pos:column="35"/></operator><operator pos:line="27" pos:column="35">(<pos:position pos:line="27" pos:column="36"/></operator><name><name pos:line="27" pos:column="36">state<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">stack<pos:position pos:line="27" pos:column="48"/></name><index pos:line="27" pos:column="48">[<expr><name><name pos:line="27" pos:column="49">state<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">-&gt;<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="56">depth<pos:position pos:line="27" pos:column="61"/></name></name> <operator pos:line="27" pos:column="62">-<pos:position pos:line="27" pos:column="63"/></operator> <literal type="number" pos:line="27" pos:column="64">1<pos:position pos:line="27" pos:column="65"/></literal></expr>]<pos:position pos:line="27" pos:column="66"/></index></name> <operator pos:line="27" pos:column="67">!=<pos:position pos:line="27" pos:column="69"/></operator> <name pos:line="27" pos:column="70">NULL<pos:position pos:line="27" pos:column="74"/></name><operator pos:line="27" pos:column="74">)<pos:position pos:line="27" pos:column="75"/></operator> <operator pos:line="27" pos:column="76">&amp;&amp;<pos:position pos:line="27" pos:column="86"/></operator>
                                  <operator pos:line="28" pos:column="35">(<pos:position pos:line="28" pos:column="36"/></operator><name><name pos:line="28" pos:column="36">state<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">stack<pos:position pos:line="28" pos:column="48"/></name><index pos:line="28" pos:column="48">[<expr><name><name pos:line="28" pos:column="49">state<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">depth<pos:position pos:line="28" pos:column="61"/></name></name> <operator pos:line="28" pos:column="62">-<pos:position pos:line="28" pos:column="63"/></operator> <literal type="number" pos:line="28" pos:column="64">2<pos:position pos:line="28" pos:column="65"/></literal></expr>]<pos:position pos:line="28" pos:column="66"/></index></name> <operator pos:line="28" pos:column="67">!=<pos:position pos:line="28" pos:column="69"/></operator> <name pos:line="28" pos:column="70">NULL<pos:position pos:line="28" pos:column="74"/></name><operator pos:line="28" pos:column="74">)<pos:position pos:line="28" pos:column="75"/></operator><operator pos:line="28" pos:column="75">)<pos:position pos:line="28" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Super-special case for filestore.journal_wr_bytes.avgcount: For
     * some reason, Ceph schema encodes this as a count/sum pair while all
     * other "Bytes" data (excluding used/capacity bytes for OSD space) uses
     * a single "Derive" type. To spare further confusion, keep this KPI as
     * the same type of other "Bytes". Instead of keeping an "average" or
     * "rate", use the "sum" in the pair and assign that to the derive
     * value. */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">convert_special_metrics<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">&amp;&amp;<pos:position pos:line="37" pos:column="43"/></operator> <operator pos:line="37" pos:column="36">(<pos:position pos:line="37" pos:column="37"/></operator><name><name pos:line="37" pos:column="37">state<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-&gt;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="44">depth<pos:position pos:line="37" pos:column="49"/></name></name> <operator pos:line="37" pos:column="50">&gt;=<pos:position pos:line="37" pos:column="55"/></operator> <literal type="number" pos:line="37" pos:column="53">2<pos:position pos:line="37" pos:column="54"/></literal><operator pos:line="37" pos:column="54">)<pos:position pos:line="37" pos:column="55"/></operator> <operator pos:line="37" pos:column="56">&amp;&amp;<pos:position pos:line="37" pos:column="66"/></operator>
        <operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><call><name pos:line="38" pos:column="10">strcmp<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">(<argument><expr><literal type="string" pos:line="38" pos:column="17">"filestore"<pos:position pos:line="38" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="30">state<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">-&gt;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="37">stack<pos:position pos:line="38" pos:column="42"/></name><index pos:line="38" pos:column="42">[<expr><name><name pos:line="38" pos:column="43">state<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">-&gt;<pos:position pos:line="38" pos:column="53"/></operator><name pos:line="38" pos:column="50">depth<pos:position pos:line="38" pos:column="55"/></name></name> <operator pos:line="38" pos:column="56">-<pos:position pos:line="38" pos:column="57"/></operator> <literal type="number" pos:line="38" pos:column="58">2<pos:position pos:line="38" pos:column="59"/></literal></expr>]<pos:position pos:line="38" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call> <operator pos:line="38" pos:column="62">==<pos:position pos:line="38" pos:column="64"/></operator> <literal type="number" pos:line="38" pos:column="65">0<pos:position pos:line="38" pos:column="66"/></literal><operator pos:line="38" pos:column="66">)<pos:position pos:line="38" pos:column="67"/></operator> <operator pos:line="38" pos:column="68">&amp;&amp;<pos:position pos:line="38" pos:column="78"/></operator>
        <operator pos:line="39" pos:column="9">(<pos:position pos:line="39" pos:column="10"/></operator><call><name pos:line="39" pos:column="10">strcmp<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><literal type="string" pos:line="39" pos:column="17">"journal_wr_bytes"<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="37">state<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">stack<pos:position pos:line="39" pos:column="49"/></name><index pos:line="39" pos:column="49">[<expr><name><name pos:line="39" pos:column="50">state<pos:position pos:line="39" pos:column="55"/></name><operator pos:line="39" pos:column="55">-&gt;<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="57">depth<pos:position pos:line="39" pos:column="62"/></name></name> <operator pos:line="39" pos:column="63">-<pos:position pos:line="39" pos:column="64"/></operator> <literal type="number" pos:line="39" pos:column="65">1<pos:position pos:line="39" pos:column="66"/></literal></expr>]<pos:position pos:line="39" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call> <operator pos:line="39" pos:column="69">==<pos:position pos:line="39" pos:column="71"/></operator> <literal type="number" pos:line="39" pos:column="72">0<pos:position pos:line="39" pos:column="73"/></literal><operator pos:line="39" pos:column="73">)<pos:position pos:line="39" pos:column="74"/></operator> <operator pos:line="39" pos:column="75">&amp;&amp;<pos:position pos:line="39" pos:column="85"/></operator>
        <operator pos:line="40" pos:column="9">(<pos:position pos:line="40" pos:column="10"/></operator><call><name pos:line="40" pos:column="10">strcmp<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><literal type="string" pos:line="40" pos:column="17">"avgcount"<pos:position pos:line="40" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="29">state<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">-&gt;<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="36">key<pos:position pos:line="40" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call> <operator pos:line="40" pos:column="41">==<pos:position pos:line="40" pos:column="43"/></operator> <literal type="number" pos:line="40" pos:column="44">0<pos:position pos:line="40" pos:column="45"/></literal><operator pos:line="40" pos:column="45">)<pos:position pos:line="40" pos:column="46"/></operator></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47"> <block pos:line="40" pos:column="48">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">DEBUG<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><literal type="string" pos:line="41" pos:column="13">"ceph plugin: Skipping avgcount for filestore.JournalWrBytes"<pos:position pos:line="41" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="76"/></expr_stmt>
      <return pos:line="42" pos:column="7">return <expr><name pos:line="42" pos:column="14">CEPH_CB_CONTINUE<pos:position pos:line="42" pos:column="30"/></name></expr>;<pos:position pos:line="42" pos:column="31"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then> <else pos:line="44" pos:column="5">else <comment type="block" pos:line="44" pos:column="10">/* not a latency type */</comment>
  <block pos:line="45" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">BUFFER_ADD<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">key<pos:position pos:line="46" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="21">"."<pos:position pos:line="46" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">BUFFER_ADD<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">key<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="21">state<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">-&gt;<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="28">key<pos:position pos:line="47" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="50" pos:column="3">status<pos:position pos:line="50" pos:column="9"/></name> <operator pos:line="50" pos:column="10">=<pos:position pos:line="50" pos:column="11"/></operator> <call><name><name pos:line="50" pos:column="12">state<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">handler<pos:position pos:line="50" pos:column="26"/></name></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name><name pos:line="50" pos:column="27">state<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">handler_arg<pos:position pos:line="50" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="47">buffer<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="55">key<pos:position pos:line="50" pos:column="58"/></name></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><operator pos:line="51" pos:column="7">(<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">status<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">==<pos:position pos:line="51" pos:column="17"/></operator> <name pos:line="51" pos:column="18">RETRY_AVGCOUNT<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">)<pos:position pos:line="51" pos:column="33"/></operator> <operator pos:line="51" pos:column="34">&amp;&amp;<pos:position pos:line="51" pos:column="44"/></operator> <name pos:line="51" pos:column="37">latency_type<pos:position pos:line="51" pos:column="49"/></name></expr>)<pos:position pos:line="51" pos:column="50"/></condition><then pos:line="51" pos:column="50"> <block pos:line="51" pos:column="51">{
    <comment type="block" pos:line="52" pos:column="5">/* Add previously skipped part of the key, either "avgcount" or "sum",
     * and try again. */</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">BUFFER_ADD<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name pos:line="54" pos:column="16">key<pos:position pos:line="54" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="21">"."<pos:position pos:line="54" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">BUFFER_ADD<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">key<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="21">state<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">-&gt;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="28">key<pos:position pos:line="55" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="57" pos:column="5">status<pos:position pos:line="57" pos:column="11"/></name> <operator pos:line="57" pos:column="12">=<pos:position pos:line="57" pos:column="13"/></operator> <call><name><name pos:line="57" pos:column="14">state<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">-&gt;<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="21">handler<pos:position pos:line="57" pos:column="28"/></name></name><argument_list pos:line="57" pos:column="28">(<argument><expr><name><name pos:line="57" pos:column="29">state<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">-&gt;<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="36">handler_arg<pos:position pos:line="57" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="49">buffer<pos:position pos:line="57" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="57">key<pos:position pos:line="57" pos:column="60"/></name></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><name pos:line="60" pos:column="7">status<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">!=<pos:position pos:line="60" pos:column="16"/></operator> <literal type="number" pos:line="60" pos:column="17">0<pos:position pos:line="60" pos:column="18"/></literal></expr>)<pos:position pos:line="60" pos:column="19"/></condition><then pos:line="60" pos:column="19"> <block pos:line="60" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">ERROR<pos:position pos:line="61" pos:column="10"/></name><argument_list pos:line="61" pos:column="10">(<argument><expr><literal type="string" pos:line="61" pos:column="11">"ceph plugin: JSON handler failed with status %d."<pos:position pos:line="61" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="63">status<pos:position pos:line="61" pos:column="69"/></name></expr></argument>)<pos:position pos:line="61" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="71"/></expr_stmt>
    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">CEPH_CB_ABORT<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <return pos:line="65" pos:column="3">return <expr><name pos:line="65" pos:column="10">CEPH_CB_CONTINUE<pos:position pos:line="65" pos:column="26"/></name></expr>;<pos:position pos:line="65" pos:column="27"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
