<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_528_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ipc_read_msg<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <comment type="block" pos:line="1" pos:column="32">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ipcinfo_msg_t<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ipcinfo_msg<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">uint32_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">msg_used_space<pos:position pos:line="4" pos:column="26"/></name><init pos:line="4" pos:column="26">=<expr><literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">uint32_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">msg_alloc_queues<pos:position pos:line="5" pos:column="28"/></name><init pos:line="5" pos:column="28">=<expr><literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">msgqnum32_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">msg_qnum<pos:position pos:line="6" pos:column="23"/></name><init pos:line="6" pos:column="23">=<expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>,<decl><type ref="prev"/><name pos:line="7" pos:column="9">n<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">ipcinfo_msg<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <operator pos:line="9" pos:column="17">(<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">ipcinfo_msg_t<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">*<pos:position pos:line="9" pos:column="33"/></operator><operator pos:line="9" pos:column="33">)<pos:position pos:line="9" pos:column="34"/></operator><call><name pos:line="9" pos:column="34">ipc_get_info<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><literal type="number" pos:line="9" pos:column="47">0<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>,
    <argument><expr><name pos:line="10" pos:column="5">GET_IPCINFO_MSG_ALL<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">IPCINFO_MSG_VERSION<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="47">sizeof<argument_list pos:line="10" pos:column="53">(<argument><expr><name pos:line="10" pos:column="54">ipcinfo_msg_t<pos:position pos:line="10" pos:column="67"/></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="10" pos:column="70">&amp;<pos:position pos:line="10" pos:column="75"/></operator><name pos:line="10" pos:column="71">n<pos:position pos:line="10" pos:column="72"/></name></expr></argument>)<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="74"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">ipcinfo_msg<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">==<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">NULL<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return></block></then></if>

  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><expr><name pos:line="14" pos:column="8">i<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator><literal type="number" pos:line="14" pos:column="10">0<pos:position pos:line="14" pos:column="11"/></literal></expr>;<pos:position pos:line="14" pos:column="12"/></init> <condition><expr><name pos:line="14" pos:column="13">i<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">&lt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">n<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></condition> <incr><expr><name pos:line="14" pos:column="18">i<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">++<pos:position pos:line="14" pos:column="21"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="22"/></control> <block pos:line="14" pos:column="23">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">msg_alloc_queues<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">++<pos:position pos:line="15" pos:column="23"/></operator></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">msg_used_space<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">+=<pos:position pos:line="16" pos:column="22"/></operator> <name><name pos:line="16" pos:column="23">ipcinfo_msg<pos:position pos:line="16" pos:column="34"/></name><index pos:line="16" pos:column="34">[<expr><name pos:line="16" pos:column="35">i<pos:position pos:line="16" pos:column="36"/></name></expr>]<pos:position pos:line="16" pos:column="37"/></index></name><operator pos:line="16" pos:column="37">.<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="38">msg_cbytes<pos:position pos:line="16" pos:column="48"/></name></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">msg_qnum<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">+=<pos:position pos:line="17" pos:column="16"/></operator> <name><name pos:line="17" pos:column="17">ipcinfo_msg<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><name pos:line="17" pos:column="29">i<pos:position pos:line="17" pos:column="30"/></name></expr>]<pos:position pos:line="17" pos:column="31"/></index></name><operator pos:line="17" pos:column="31">.<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">msg_qnum<pos:position pos:line="17" pos:column="40"/></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">free<pos:position pos:line="19" pos:column="7"/></name><argument_list pos:line="19" pos:column="7">(<argument><expr><name pos:line="19" pos:column="8">ipcinfo_msg<pos:position pos:line="19" pos:column="19"/></name></expr></argument>)<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">ipc_submit_g<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"msg"<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"count"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"queues"<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">msg_alloc_queues<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">ipc_submit_g<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="string" pos:line="22" pos:column="16">"msg"<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"count"<pos:position pos:line="22" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"headers"<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="43">msg_qnum<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">ipc_submit_g<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="string" pos:line="23" pos:column="16">"msg"<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"count"<pos:position pos:line="23" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"space"<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">msg_used_space<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>

  <return pos:line="25" pos:column="3">return <expr><operator pos:line="25" pos:column="10">(<pos:position pos:line="25" pos:column="11"/></operator><literal type="number" pos:line="25" pos:column="11">0<pos:position pos:line="25" pos:column="12"/></literal><operator pos:line="25" pos:column="12">)<pos:position pos:line="25" pos:column="13"/></operator></expr>;<pos:position pos:line="25" pos:column="14"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></for>
<comment type="block" pos:line="27" pos:column="1">/* }}} */</comment>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="28" pos:column="8">/* KERNEL_AIX */</comment>

<function><specifier pos:line="30" pos:column="1">static<pos:position pos:line="30" pos:column="7"/></specifier> <type><name pos:line="30" pos:column="8">int<pos:position pos:line="30" pos:column="11"/></name></type> <name pos:line="30" pos:column="12">ipc_read<pos:position pos:line="30" pos:column="20"/></name> <parameter_list pos:line="30" pos:column="21">(<parameter><decl><type><name pos:line="30" pos:column="22">void<pos:position pos:line="30" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="30" pos:column="27"/></parameter_list> <comment type="block" pos:line="30" pos:column="28">/* {{{ */</comment>
<block pos:line="31" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="32" pos:column="3">int<pos:position pos:line="32" pos:column="6"/></name></type> <name pos:line="32" pos:column="7">x<pos:position pos:line="32" pos:column="8"/></name> <init pos:line="32" pos:column="9">= <expr><literal type="number" pos:line="32" pos:column="11">0<pos:position pos:line="32" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">x<pos:position pos:line="33" pos:column="4"/></name> <operator pos:line="33" pos:column="5">|=<pos:position pos:line="33" pos:column="7"/></operator> <call><name pos:line="33" pos:column="8">ipc_read_shm<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">()<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="34" pos:column="3">x<pos:position pos:line="34" pos:column="4"/></name> <operator pos:line="34" pos:column="5">|=<pos:position pos:line="34" pos:column="7"/></operator> <call><name pos:line="34" pos:column="8">ipc_read_sem<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">()<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="35" pos:column="3">x<pos:position pos:line="35" pos:column="4"/></name> <operator pos:line="35" pos:column="5">|=<pos:position pos:line="35" pos:column="7"/></operator> <call><name pos:line="35" pos:column="8">ipc_read_msg<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">()<pos:position pos:line="35" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="23"/></expr_stmt>

  <return pos:line="37" pos:column="3">return <expr><operator pos:line="37" pos:column="10">(<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">x<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">)<pos:position pos:line="37" pos:column="13"/></operator></expr>;<pos:position pos:line="37" pos:column="14"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function>
<comment type="block" pos:line="39" pos:column="1">/* }}} */</comment>

<function><type><name pos:line="41" pos:column="1">void<pos:position pos:line="41" pos:column="5"/></name></type> <name pos:line="41" pos:column="6">module_register<pos:position pos:line="41" pos:column="21"/></name> <parameter_list pos:line="41" pos:column="22">(<parameter><decl><type><name pos:line="41" pos:column="23">void<pos:position pos:line="41" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="41" pos:column="28"/></parameter_list> <comment type="block" pos:line="41" pos:column="29">/* {{{ */</comment>
<block pos:line="42" pos:column="1">{
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">KERNEL_LINUX<pos:position pos:line="43" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">plugin_register_init<pos:position pos:line="44" pos:column="23"/></name> <argument_list pos:line="44" pos:column="24">(<argument><expr><literal type="string" pos:line="44" pos:column="25">"ipc"<pos:position pos:line="44" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="32">ipc_init<pos:position pos:line="44" pos:column="40"/></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">plugin_register_read<pos:position pos:line="46" pos:column="23"/></name> <argument_list pos:line="46" pos:column="24">(<argument><expr><literal type="string" pos:line="46" pos:column="25">"ipc"<pos:position pos:line="46" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="32">ipc_read<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></block></function></unit>
