<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2699_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">log_list_callbacks<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">llist_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">list<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="48">/* {{{ */</comment>
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">comment<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list> <block pos:line="2" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">str<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">len<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">llentry_t<pos:position pos:line="6" pos:column="12"/></name> <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier></type><name pos:line="6" pos:column="14">le<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">n<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier><modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">keys<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">n<pos:position pos:line="10" pos:column="4"/></name> <operator pos:line="10" pos:column="5">=<pos:position pos:line="10" pos:column="6"/></operator> <call><name pos:line="10" pos:column="7">llist_size<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><operator pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">list<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">n<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">==<pos:position pos:line="11" pos:column="11"/></operator> <literal type="number" pos:line="11" pos:column="12">0<pos:position pos:line="11" pos:column="13"/></literal></expr>)<pos:position pos:line="11" pos:column="14"/></condition><then pos:line="11" pos:column="14"> <block pos:line="11" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">INFO<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><literal type="string" pos:line="12" pos:column="10">"%s [none]"<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">comment<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
    <return pos:line="13" pos:column="5">return;<pos:position pos:line="13" pos:column="12"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">keys<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">calloc<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><name pos:line="16" pos:column="17">n<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="20">sizeof<argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">char<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">*<pos:position pos:line="16" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">keys<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">==<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">NULL<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20"> <block pos:line="18" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ERROR<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><literal type="string" pos:line="19" pos:column="11">"%s: failed to allocate memory for list of callbacks"<pos:position pos:line="19" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="66">comment<pos:position pos:line="19" pos:column="73"/></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>

    <return pos:line="21" pos:column="5">return;<pos:position pos:line="21" pos:column="12"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <for pos:line="24" pos:column="3">for <control pos:line="24" pos:column="7">(<init><expr><name pos:line="24" pos:column="8">le<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <call><name pos:line="24" pos:column="13">llist_head<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">list<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr><operator pos:line="24" pos:column="30">,<pos:position pos:line="24" pos:column="31"/></operator> <expr><name pos:line="24" pos:column="32">i<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">=<pos:position pos:line="24" pos:column="35"/></operator> <literal type="number" pos:line="24" pos:column="36">0<pos:position pos:line="24" pos:column="37"/></literal></expr><operator pos:line="24" pos:column="37">,<pos:position pos:line="24" pos:column="38"/></operator> <expr><name pos:line="24" pos:column="39">len<pos:position pos:line="24" pos:column="42"/></name> <operator pos:line="24" pos:column="43">=<pos:position pos:line="24" pos:column="44"/></operator> <literal type="number" pos:line="24" pos:column="45">0<pos:position pos:line="24" pos:column="46"/></literal></expr>;<pos:position pos:line="24" pos:column="47"/></init> <condition><expr><name pos:line="24" pos:column="48">le<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">!=<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="54">NULL<pos:position pos:line="24" pos:column="58"/></name></expr>;<pos:position pos:line="24" pos:column="59"/></condition> <incr><expr><name pos:line="24" pos:column="60">le<pos:position pos:line="24" pos:column="62"/></name> <operator pos:line="24" pos:column="63">=<pos:position pos:line="24" pos:column="64"/></operator> <name><name pos:line="24" pos:column="65">le<pos:position pos:line="24" pos:column="67"/></name><operator pos:line="24" pos:column="67">-&gt;<pos:position pos:line="24" pos:column="72"/></operator><name pos:line="24" pos:column="69">next<pos:position pos:line="24" pos:column="73"/></name></name></expr><operator pos:line="24" pos:column="73">,<pos:position pos:line="24" pos:column="74"/></operator> <expr><name pos:line="24" pos:column="75">i<pos:position pos:line="24" pos:column="76"/></name><operator pos:line="24" pos:column="76">++<pos:position pos:line="24" pos:column="78"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="79"/></control> <block pos:line="24" pos:column="80">{
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">keys<pos:position pos:line="25" pos:column="9"/></name><index pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">i<pos:position pos:line="25" pos:column="11"/></name></expr>]<pos:position pos:line="25" pos:column="12"/></index></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <name><name pos:line="25" pos:column="15">le<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">key<pos:position pos:line="25" pos:column="22"/></name></name></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">len<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">+=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">strlen<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name><name pos:line="26" pos:column="19">le<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">key<pos:position pos:line="26" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call> <operator pos:line="26" pos:column="28">+<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="30">6<pos:position pos:line="26" pos:column="31"/></literal></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="28" pos:column="3">str<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <call><name pos:line="28" pos:column="9">malloc<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">len<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">+<pos:position pos:line="28" pos:column="21"/></operator> <literal type="number" pos:line="28" pos:column="22">10<pos:position pos:line="28" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">str<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">==<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">NULL<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"%s: failed to allocate memory for list of callbacks"<pos:position pos:line="30" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="66">comment<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then> <else pos:line="31" pos:column="5">else <block pos:line="31" pos:column="10">{
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">str<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">=<pos:position pos:line="32" pos:column="11"/></operator> <literal type="char" pos:line="32" pos:column="12">'\0'<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">strjoin<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">str<pos:position pos:line="33" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="18">len<pos:position pos:line="33" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="23">keys<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="29">n<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="32">"', '"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">INFO<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><literal type="string" pos:line="34" pos:column="10">"%s ['%s']"<pos:position pos:line="34" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="23">comment<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="32">str<pos:position pos:line="34" pos:column="35"/></name></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">sfree<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">str<pos:position pos:line="35" pos:column="14"/></name></expr></argument>)<pos:position pos:line="35" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">sfree<pos:position pos:line="37" pos:column="8"/></name><argument_list pos:line="37" pos:column="8">(<argument><expr><name pos:line="37" pos:column="9">keys<pos:position pos:line="37" pos:column="13"/></name></expr></argument>)<pos:position pos:line="37" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
