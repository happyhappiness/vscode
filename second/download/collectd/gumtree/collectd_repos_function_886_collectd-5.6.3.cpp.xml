<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_886_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_add_read_callback<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">memcached_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">st<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list> <block pos:line="1" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">callback_name<pos:position pos:line="2" pos:column="21"/></name><index pos:line="2" pos:column="21">[<expr><literal type="number" pos:line="2" pos:column="22">3<pos:position pos:line="2" pos:column="23"/></literal> <operator pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></operator> <name pos:line="2" pos:column="26">DATA_MAX_NAME_LEN<pos:position pos:line="2" pos:column="43"/></name></expr>]<pos:position pos:line="2" pos:column="44"/></index></name></decl>;<pos:position pos:line="2" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">assert<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><name><name pos:line="5" pos:column="10">st<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">-&gt;<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="14">name<pos:position pos:line="5" pos:column="18"/></name></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">ssnprintf<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">callback_name<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="28">sizeof<argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">callback_name<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="51">"memcached/%s"<pos:position pos:line="6" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="67">st<pos:position pos:line="6" pos:column="69"/></name><operator pos:line="6" pos:column="69">-&gt;<pos:position pos:line="6" pos:column="74"/></operator><name pos:line="6" pos:column="71">name<pos:position pos:line="6" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="77"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">user_data_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">ud<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><block pos:line="8" pos:column="20">{<expr><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">data<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="29">st<pos:position pos:line="8" pos:column="31"/></name></expr>, <expr><operator pos:line="8" pos:column="33">.<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">free_func<pos:position pos:line="8" pos:column="43"/></name> <operator pos:line="8" pos:column="44">=<pos:position pos:line="8" pos:column="45"/></operator> <name pos:line="8" pos:column="46">memcached_free<pos:position pos:line="8" pos:column="60"/></name></expr>}<pos:position pos:line="8" pos:column="61"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="62"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">status<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">plugin_register_complex_read<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<comment type="block" pos:line="10" pos:column="41">/* group = */</comment> <argument><expr><literal type="string" pos:line="10" pos:column="55">"memcached"<pos:position pos:line="10" pos:column="66"/></literal></expr></argument>,
                                        <comment type="block" pos:line="11" pos:column="41">/* name      = */</comment> <argument><expr><name pos:line="11" pos:column="59">callback_name<pos:position pos:line="11" pos:column="72"/></name></expr></argument>,
                                        <comment type="block" pos:line="12" pos:column="41">/* callback  = */</comment> <argument><expr><name pos:line="12" pos:column="59">memcached_read<pos:position pos:line="12" pos:column="73"/></name></expr></argument>,
                                        <comment type="block" pos:line="13" pos:column="41">/* interval  = */</comment> <argument><expr><literal type="number" pos:line="13" pos:column="59">0<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>,
                                        <comment type="block" pos:line="14" pos:column="41">/* user_data = */</comment> <argument><expr><operator pos:line="14" pos:column="59">&amp;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="60">ud<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
  <return pos:line="15" pos:column="3">return <expr><operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">status<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">)<pos:position pos:line="15" pos:column="18"/></operator></expr>;<pos:position pos:line="15" pos:column="19"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
