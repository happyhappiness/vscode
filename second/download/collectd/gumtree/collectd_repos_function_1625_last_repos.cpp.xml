<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1625_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">format_json_meta<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">yajl_gen<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">g<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">notification_meta_t<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">meta<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <comment type="block" pos:line="1" pos:column="68">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">meta<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">JSON_ADD<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">g<pos:position pos:line="6" pos:column="13"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="15">meta<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">name<pos:position pos:line="6" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
  <switch pos:line="7" pos:column="3">switch <condition pos:line="7" pos:column="10">(<expr><name><name pos:line="7" pos:column="11">meta<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">type<pos:position pos:line="7" pos:column="21"/></name></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition> <block pos:line="7" pos:column="23">{
  <case pos:line="8" pos:column="3">case <expr><name pos:line="8" pos:column="8">NM_TYPE_STRING<pos:position pos:line="8" pos:column="22"/></name></expr>:<pos:position pos:line="8" pos:column="23"/></case>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">JSON_ADD<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><name pos:line="9" pos:column="14">g<pos:position pos:line="9" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="17">meta<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">nm_value<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">nm_string<pos:position pos:line="9" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
    <break pos:line="10" pos:column="5">break;<pos:position pos:line="10" pos:column="11"/></break>
  <case pos:line="11" pos:column="3">case <expr><name pos:line="11" pos:column="8">NM_TYPE_SIGNED_INT<pos:position pos:line="11" pos:column="26"/></name></expr>:<pos:position pos:line="11" pos:column="27"/></case>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">JSON_ADDF<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">g<pos:position pos:line="12" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="18">"%"<pos:position pos:line="12" pos:column="21"/></literal> <name pos:line="12" pos:column="22">PRIi64<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="30">meta<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">nm_value<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">.<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">nm_signed_int<pos:position pos:line="12" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
    <break pos:line="13" pos:column="5">break;<pos:position pos:line="13" pos:column="11"/></break>
  <case pos:line="14" pos:column="3">case <expr><name pos:line="14" pos:column="8">NM_TYPE_UNSIGNED_INT<pos:position pos:line="14" pos:column="28"/></name></expr>:<pos:position pos:line="14" pos:column="29"/></case>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">JSON_ADDF<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">g<pos:position pos:line="15" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="18">"%"<pos:position pos:line="15" pos:column="21"/></literal> <name pos:line="15" pos:column="22">PRIu64<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="30">meta<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">-&gt;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="36">nm_value<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">.<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">nm_unsigned_int<pos:position pos:line="15" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
    <break pos:line="16" pos:column="5">break;<pos:position pos:line="16" pos:column="11"/></break>
  <case pos:line="17" pos:column="3">case <expr><name pos:line="17" pos:column="8">NM_TYPE_DOUBLE<pos:position pos:line="17" pos:column="22"/></name></expr>:<pos:position pos:line="17" pos:column="23"/></case>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">JSON_ADDF<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">g<pos:position pos:line="18" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="18">JSON_GAUGE_FORMAT<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="37">meta<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">-&gt;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="43">nm_value<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">.<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="52">nm_double<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
    <break pos:line="19" pos:column="5">break;<pos:position pos:line="19" pos:column="11"/></break>
  <case pos:line="20" pos:column="3">case <expr><name pos:line="20" pos:column="8">NM_TYPE_BOOLEAN<pos:position pos:line="20" pos:column="23"/></name></expr>:<pos:position pos:line="20" pos:column="24"/></case>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">JSON_ADD<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">g<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="21" pos:column="17">meta<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">nm_value<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">nm_boolean<pos:position pos:line="21" pos:column="42"/></name></name></expr> ?<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <expr><literal type="string" pos:line="21" pos:column="45">"true"<pos:position pos:line="21" pos:column="51"/></literal></expr> <pos:position pos:line="21" pos:column="52"/></then><else pos:line="21" pos:column="52">: <expr><literal type="string" pos:line="21" pos:column="54">"false"<pos:position pos:line="21" pos:column="61"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
    <break pos:line="22" pos:column="5">break;<pos:position pos:line="22" pos:column="11"/></break>
  <default pos:line="23" pos:column="3">default:<pos:position pos:line="23" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">ERROR<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><literal type="string" pos:line="24" pos:column="11">"format_json_meta: unknown meta data type %d (name \"%s\")"<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="25" pos:column="11">meta<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">type<pos:position pos:line="25" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="23">meta<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">name<pos:position pos:line="25" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">yajl_gen_null<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">g<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></switch>

  <return pos:line="29" pos:column="3">return <expr><call><name pos:line="29" pos:column="10">format_json_meta<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">g<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="30">meta<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">next<pos:position pos:line="29" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
