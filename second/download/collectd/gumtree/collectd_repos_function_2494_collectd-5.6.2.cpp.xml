<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2494_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">oconfig_item_t<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">cf_read_generic<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">path<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">pattern<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">depth<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list> <block pos:line="2" pos:column="51">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">oconfig_item_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">root<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">NULL<pos:position pos:line="3" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">path_ptr<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">wordexp_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">we<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">depth<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">&gt;=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="16">CF_MAX_DEPTH<pos:position pos:line="8" pos:column="28"/></name></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29"> <block pos:line="8" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ERROR<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><literal type="string" pos:line="9" pos:column="11">"configfile: Not including `%s' because the maximum "<pos:position pos:line="9" pos:column="64"/></literal>
          <literal type="string" pos:line="10" pos:column="11">"nesting depth has been reached."<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>,
          <argument><expr><name pos:line="11" pos:column="11">path<pos:position pos:line="11" pos:column="15"/></name></expr></argument>)<pos:position pos:line="11" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">NULL<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">)<pos:position pos:line="12" pos:column="18"/></operator></expr>;<pos:position pos:line="12" pos:column="19"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">status<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">wordexp<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">path<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="26">&amp;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="27">we<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">WRDE_NOCMD<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">status<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">!=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"configfile: wordexp (%s) failed."<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">path<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">NULL<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">)<pos:position pos:line="18" pos:column="18"/></operator></expr>;<pos:position pos:line="18" pos:column="19"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">root<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">calloc<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><literal type="number" pos:line="21" pos:column="17">1<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="20">sizeof<argument_list pos:line="21" pos:column="26">(<argument><expr><operator pos:line="21" pos:column="27">*<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">root<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">root<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">==<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">NULL<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ERROR<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><literal type="string" pos:line="23" pos:column="11">"configfile: calloc failed."<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">NULL<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">)<pos:position pos:line="24" pos:column="18"/></operator></expr>;<pos:position pos:line="24" pos:column="19"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="27" pos:column="3">/* wordexp() might return a sorted list already. That's not
   * documented though, so let's make sure we get what we want. */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">qsort<pos:position pos:line="29" pos:column="8"/></name><argument_list pos:line="29" pos:column="8">(<argument><expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">void<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">*<pos:position pos:line="29" pos:column="16"/></operator><operator pos:line="29" pos:column="16">)<pos:position pos:line="29" pos:column="17"/></operator><name><name pos:line="29" pos:column="17">we<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">we_wordv<pos:position pos:line="29" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="30">we<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">we_wordc<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="43">sizeof<argument_list pos:line="29" pos:column="49">(<argument><expr><operator pos:line="29" pos:column="50">*<pos:position pos:line="29" pos:column="51"/></operator><name><name pos:line="29" pos:column="51">we<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">.<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="54">we_wordv<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></sizeof></expr></argument>,
        <argument><expr><name pos:line="30" pos:column="9">cf_compare_string<pos:position pos:line="30" pos:column="26"/></name></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>

  <for pos:line="32" pos:column="3">for <control pos:line="32" pos:column="7">(<init><decl><type><name pos:line="32" pos:column="8">size_t<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">i<pos:position pos:line="32" pos:column="16"/></name> <init pos:line="32" pos:column="17">= <expr><literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="21"/></init> <condition><expr><name pos:line="32" pos:column="22">i<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&lt;<pos:position pos:line="32" pos:column="28"/></operator> <name><name pos:line="32" pos:column="26">we<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">.<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">we_wordc<pos:position pos:line="32" pos:column="37"/></name></name></expr>;<pos:position pos:line="32" pos:column="38"/></condition> <incr><expr><name pos:line="32" pos:column="39">i<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">++<pos:position pos:line="32" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="43"/></control> <block pos:line="32" pos:column="44">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">oconfig_item_t<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier></type><name pos:line="33" pos:column="21">temp<pos:position pos:line="33" pos:column="25"/></name></decl>;<pos:position pos:line="33" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="34" pos:column="5">struct<pos:position pos:line="34" pos:column="11"/></name> <name pos:line="34" pos:column="12">stat<pos:position pos:line="34" pos:column="16"/></name></name></type> <name pos:line="34" pos:column="17">statbuf<pos:position pos:line="34" pos:column="24"/></name></decl>;<pos:position pos:line="34" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">path_ptr<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <name><name pos:line="36" pos:column="16">we<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">we_wordv<pos:position pos:line="36" pos:column="27"/></name><index pos:line="36" pos:column="27">[<expr><name pos:line="36" pos:column="28">i<pos:position pos:line="36" pos:column="29"/></name></expr>]<pos:position pos:line="36" pos:column="30"/></index></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name pos:line="38" pos:column="5">status<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <call><name pos:line="38" pos:column="14">stat<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">path_ptr<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="30">statbuf<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">status<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">!=<pos:position pos:line="39" pos:column="18"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr>)<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21"> <block pos:line="39" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="40" pos:column="7">char<pos:position pos:line="40" pos:column="11"/></name></type> <name><name pos:line="40" pos:column="12">errbuf<pos:position pos:line="40" pos:column="18"/></name><index pos:line="40" pos:column="18">[<expr><literal type="number" pos:line="40" pos:column="19">1024<pos:position pos:line="40" pos:column="23"/></literal></expr>]<pos:position pos:line="40" pos:column="24"/></index></name></decl>;<pos:position pos:line="40" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">WARNING<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><literal type="string" pos:line="41" pos:column="15">"configfile: stat (%s) failed: %s"<pos:position pos:line="41" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="51">path_ptr<pos:position pos:line="41" pos:column="59"/></name></expr></argument>,
              <argument><expr><call><name pos:line="42" pos:column="15">sstrerror<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">errno<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">errbuf<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="40">sizeof<argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">errbuf<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
      <continue pos:line="43" pos:column="7">continue;<pos:position pos:line="43" pos:column="16"/></continue>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">S_ISREG<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name><name pos:line="46" pos:column="17">statbuf<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">.<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="25">st_mode<pos:position pos:line="46" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="7">temp<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">cf_read_file<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">path_ptr<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="37">pattern<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">depth<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt></block></then>
    <elseif pos:line="48" pos:column="5">else <if pos:line="48" pos:column="10">if <condition pos:line="48" pos:column="13">(<expr><call><name pos:line="48" pos:column="14">S_ISDIR<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name><name pos:line="48" pos:column="22">statbuf<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">.<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">st_mode<pos:position pos:line="48" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="39"/></condition><then pos:line="48" pos:column="39">
      <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="7">temp<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <call><name pos:line="49" pos:column="14">cf_read_dir<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">path_ptr<pos:position pos:line="49" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="36">pattern<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">depth<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="52"/></expr_stmt></block></then></if></elseif>
    <else pos:line="50" pos:column="5">else <block pos:line="50" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">WARNING<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><literal type="string" pos:line="51" pos:column="15">"configfile: %s is neither a file nor a "<pos:position pos:line="51" pos:column="56"/></literal>
              <literal type="string" pos:line="52" pos:column="15">"directory."<pos:position pos:line="52" pos:column="27"/></literal></expr></argument>,
              <argument><expr><name pos:line="53" pos:column="15">path<pos:position pos:line="53" pos:column="19"/></name></expr></argument>)<pos:position pos:line="53" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt>
      <continue pos:line="54" pos:column="7">continue;<pos:position pos:line="54" pos:column="16"/></continue>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">temp<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">==<pos:position pos:line="57" pos:column="16"/></operator> <name pos:line="57" pos:column="17">NULL<pos:position pos:line="57" pos:column="21"/></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22"> <block pos:line="57" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">oconfig_free<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><name pos:line="58" pos:column="20">root<pos:position pos:line="58" pos:column="24"/></name></expr></argument>)<pos:position pos:line="58" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
      <return pos:line="59" pos:column="7">return <expr><operator pos:line="59" pos:column="14">(<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">NULL<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">)<pos:position pos:line="59" pos:column="20"/></operator></expr>;<pos:position pos:line="59" pos:column="21"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">cf_ci_append_children<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">root<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="33">temp<pos:position pos:line="62" pos:column="37"/></name></expr></argument>)<pos:position pos:line="62" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">sfree<pos:position pos:line="63" pos:column="10"/></name><argument_list pos:line="63" pos:column="10">(<argument><expr><name><name pos:line="63" pos:column="11">temp<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">-&gt;<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="17">children<pos:position pos:line="63" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">sfree<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><name pos:line="64" pos:column="11">temp<pos:position pos:line="64" pos:column="15"/></name></expr></argument>)<pos:position pos:line="64" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">wordfree<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><operator pos:line="67" pos:column="12">&amp;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="13">we<pos:position pos:line="67" pos:column="15"/></name></expr></argument>)<pos:position pos:line="67" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="17"/></expr_stmt>

  <return pos:line="69" pos:column="3">return <expr><operator pos:line="69" pos:column="10">(<pos:position pos:line="69" pos:column="11"/></operator><name pos:line="69" pos:column="11">root<pos:position pos:line="69" pos:column="15"/></name><operator pos:line="69" pos:column="15">)<pos:position pos:line="69" pos:column="16"/></operator></expr>;<pos:position pos:line="69" pos:column="17"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
