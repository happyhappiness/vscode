<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1030_collectd-4.4.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">pinghost_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">ping_receive_ipv4<pos:position pos:line="1" pos:column="37"/></name> <parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">pinghost_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">ph<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">buffer<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">size_t<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">buffer_len<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ip<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">ip_hdr<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">icmp<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">icmp_hdr<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">ip_hdr_len<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint16_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">recv_checksum<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">uint16_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">calc_checksum<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="11" pos:column="9">uint16_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">ident<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">uint16_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">seq<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="14" pos:column="9">pinghost_t<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">ptr<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">buffer_len<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;<pos:position pos:line="16" pos:column="28"/></operator> <sizeof pos:line="16" pos:column="26">sizeof <argument_list pos:line="16" pos:column="33">(<argument><expr pos:line="16" pos:column="34">struct <name pos:line="16" pos:column="41">ip<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></sizeof></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator></expr>;<pos:position pos:line="17" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">ip_hdr<pos:position pos:line="19" pos:column="15"/></name>     <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <operator pos:line="19" pos:column="22">(<pos:position pos:line="19" pos:column="23"/></operator>struct <name pos:line="19" pos:column="30">ip<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">*<pos:position pos:line="19" pos:column="34"/></operator><operator pos:line="19" pos:column="34">)<pos:position pos:line="19" pos:column="35"/></operator> <name pos:line="19" pos:column="36">buffer<pos:position pos:line="19" pos:column="42"/></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">ip_hdr_len<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name><name pos:line="20" pos:column="22">ip_hdr<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">ip_hl<pos:position pos:line="20" pos:column="35"/></name></name> <operator pos:line="20" pos:column="36">&lt;&lt;<pos:position pos:line="20" pos:column="44"/></operator> <literal type="number" pos:line="20" pos:column="39">2<pos:position pos:line="20" pos:column="40"/></literal></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">buffer_len<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">&lt;<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="26">ip_hdr_len<pos:position pos:line="22" pos:column="36"/></name></expr>)<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">NULL<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator></expr>;<pos:position pos:line="23" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">buffer<pos:position pos:line="25" pos:column="15"/></name>     <operator pos:line="25" pos:column="20">+=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">ip_hdr_len<pos:position pos:line="25" pos:column="33"/></name></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">buffer_len<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">-=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">ip_hdr_len<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">buffer_len<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;<pos:position pos:line="28" pos:column="28"/></operator> <sizeof pos:line="28" pos:column="26">sizeof <argument_list pos:line="28" pos:column="33">(<argument><expr pos:line="28" pos:column="34">struct <name pos:line="28" pos:column="41">icmp<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></sizeof></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">NULL<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">)<pos:position pos:line="29" pos:column="30"/></operator></expr>;<pos:position pos:line="29" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="31" pos:column="9">icmp_hdr<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="20">(<pos:position pos:line="31" pos:column="21"/></operator>struct <name pos:line="31" pos:column="28">icmp<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">*<pos:position pos:line="31" pos:column="34"/></operator><operator pos:line="31" pos:column="34">)<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="36">buffer<pos:position pos:line="31" pos:column="42"/></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">buffer<pos:position pos:line="32" pos:column="15"/></name>     <operator pos:line="32" pos:column="20">+=<pos:position pos:line="32" pos:column="22"/></operator> <sizeof pos:line="32" pos:column="23">sizeof <argument_list pos:line="32" pos:column="30">(<argument><expr pos:line="32" pos:column="31">struct <name pos:line="32" pos:column="38">icmp<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="33" pos:column="9">buffer_len<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">-=<pos:position pos:line="33" pos:column="22"/></operator> <sizeof pos:line="33" pos:column="23">sizeof <argument_list pos:line="33" pos:column="30">(<argument><expr pos:line="33" pos:column="31">struct <name pos:line="33" pos:column="38">icmp<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name><name pos:line="35" pos:column="13">icmp_hdr<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">icmp_type<pos:position pos:line="35" pos:column="32"/></name></name> <operator pos:line="35" pos:column="33">!=<pos:position pos:line="35" pos:column="35"/></operator> <name pos:line="35" pos:column="36">ICMP_ECHOREPLY<pos:position pos:line="35" pos:column="50"/></name></expr>)<pos:position pos:line="35" pos:column="51"/></condition><then pos:line="35" pos:column="51">
	<block pos:line="36" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">dprintf<pos:position pos:line="37" pos:column="24"/></name> <argument_list pos:line="37" pos:column="25">(<argument><expr><literal type="string" pos:line="37" pos:column="26">"Unexpected ICMP type: %i\n"<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="56">icmp_hdr<pos:position pos:line="37" pos:column="64"/></name><operator pos:line="37" pos:column="64">-&gt;<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="66">icmp_type<pos:position pos:line="37" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="77"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">NULL<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">)<pos:position pos:line="38" pos:column="30"/></operator></expr>;<pos:position pos:line="38" pos:column="31"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="41" pos:column="9">recv_checksum<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name><name pos:line="41" pos:column="25">icmp_hdr<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">-&gt;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="35">icmp_cksum<pos:position pos:line="41" pos:column="45"/></name></name></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">icmp_hdr<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">icmp_cksum<pos:position pos:line="42" pos:column="29"/></name></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="32">0<pos:position pos:line="42" pos:column="33"/></literal></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">calc_checksum<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <call><name pos:line="43" pos:column="25">ping_icmp4_checksum<pos:position pos:line="43" pos:column="44"/></name> <argument_list pos:line="43" pos:column="45">(<argument><expr><operator pos:line="43" pos:column="46">(<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="47">char<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">*<pos:position pos:line="43" pos:column="53"/></operator><operator pos:line="43" pos:column="53">)<pos:position pos:line="43" pos:column="54"/></operator> <name pos:line="43" pos:column="55">icmp_hdr<pos:position pos:line="43" pos:column="63"/></name></expr></argument>,
			<argument><expr><sizeof pos:line="44" pos:column="25">sizeof <argument_list pos:line="44" pos:column="32">(<argument><expr pos:line="44" pos:column="33">struct <name pos:line="44" pos:column="40">icmp<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></sizeof> <operator pos:line="44" pos:column="46">+<pos:position pos:line="44" pos:column="47"/></operator> <name pos:line="44" pos:column="48">buffer_len<pos:position pos:line="44" pos:column="58"/></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="60"/></expr_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">recv_checksum<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">!=<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">calc_checksum<pos:position pos:line="46" pos:column="43"/></name></expr>)<pos:position pos:line="46" pos:column="44"/></condition><then pos:line="46" pos:column="44">
	<block pos:line="47" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">dprintf<pos:position pos:line="48" pos:column="24"/></name> <argument_list pos:line="48" pos:column="25">(<argument><expr><literal type="string" pos:line="48" pos:column="26">"Checksum missmatch: Got 0x%04x, calculated 0x%04x\n"<pos:position pos:line="48" pos:column="79"/></literal></expr></argument>,
				<argument><expr><name pos:line="49" pos:column="33">recv_checksum<pos:position pos:line="49" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">calc_checksum<pos:position pos:line="49" pos:column="61"/></name></expr></argument>)<pos:position pos:line="49" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="63"/></expr_stmt>
		<return pos:line="50" pos:column="17">return <expr><operator pos:line="50" pos:column="24">(<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">NULL<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator></expr>;<pos:position pos:line="50" pos:column="31"/></return>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="53" pos:column="9">ident<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <call><name pos:line="53" pos:column="17">ntohs<pos:position pos:line="53" pos:column="22"/></name> <argument_list pos:line="53" pos:column="23">(<argument><expr><name><name pos:line="53" pos:column="24">icmp_hdr<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">icmp_id<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="54" pos:column="9">seq<pos:position pos:line="54" pos:column="12"/></name>   <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <call><name pos:line="54" pos:column="17">ntohs<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><name><name pos:line="54" pos:column="24">icmp_hdr<pos:position pos:line="54" pos:column="32"/></name><operator pos:line="54" pos:column="32">-&gt;<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="34">icmp_seq<pos:position pos:line="54" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="44"/></expr_stmt>

	<for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">(<init><expr><name pos:line="56" pos:column="14">ptr<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <name pos:line="56" pos:column="20">ph<pos:position pos:line="56" pos:column="22"/></name></expr>;<pos:position pos:line="56" pos:column="23"/></init> <condition><expr><name pos:line="56" pos:column="24">ptr<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">!=<pos:position pos:line="56" pos:column="30"/></operator> <name pos:line="56" pos:column="31">NULL<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></condition> <incr><expr><name pos:line="56" pos:column="37">ptr<pos:position pos:line="56" pos:column="40"/></name> <operator pos:line="56" pos:column="41">=<pos:position pos:line="56" pos:column="42"/></operator> <name><name pos:line="56" pos:column="43">ptr<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">-&gt;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="48">next<pos:position pos:line="56" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="56" pos:column="53"/></control>
	<block pos:line="57" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">dprintf<pos:position pos:line="58" pos:column="24"/></name> <argument_list pos:line="58" pos:column="25">(<argument><expr><literal type="string" pos:line="58" pos:column="26">"hostname = %s, ident = 0x%04x, seq = %i\n"<pos:position pos:line="58" pos:column="69"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="59" pos:column="33">ptr<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">-&gt;<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="38">hostname<pos:position pos:line="59" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="48">ptr<pos:position pos:line="59" pos:column="51"/></name><operator pos:line="59" pos:column="51">-&gt;<pos:position pos:line="59" pos:column="56"/></operator><name pos:line="59" pos:column="53">ident<pos:position pos:line="59" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="60">(<pos:position pos:line="59" pos:column="61"/></operator><operator pos:line="59" pos:column="61">(<pos:position pos:line="59" pos:column="62"/></operator><name><name pos:line="59" pos:column="62">ptr<pos:position pos:line="59" pos:column="65"/></name><operator pos:line="59" pos:column="65">-&gt;<pos:position pos:line="59" pos:column="70"/></operator><name pos:line="59" pos:column="67">sequence<pos:position pos:line="59" pos:column="75"/></name></name> <operator pos:line="59" pos:column="76">-<pos:position pos:line="59" pos:column="77"/></operator> <literal type="number" pos:line="59" pos:column="78">1<pos:position pos:line="59" pos:column="79"/></literal><operator pos:line="59" pos:column="79">)<pos:position pos:line="59" pos:column="80"/></operator> <operator pos:line="59" pos:column="81">&amp;<pos:position pos:line="59" pos:column="86"/></operator> <literal type="number" pos:line="59" pos:column="83">0xFFFF<pos:position pos:line="59" pos:column="89"/></literal><operator pos:line="59" pos:column="89">)<pos:position pos:line="59" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="59" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="92"/></expr_stmt>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name><name pos:line="61" pos:column="21">ptr<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">addrfamily<pos:position pos:line="61" pos:column="36"/></name></name> <operator pos:line="61" pos:column="37">!=<pos:position pos:line="61" pos:column="39"/></operator> <name pos:line="61" pos:column="40">AF_INET<pos:position pos:line="61" pos:column="47"/></name></expr>)<pos:position pos:line="61" pos:column="48"/></condition><then pos:line="61" pos:column="48">
			<block type="pseudo"><continue pos:line="62" pos:column="25">continue;<pos:position pos:line="62" pos:column="34"/></continue></block></then></if>

		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><operator pos:line="64" pos:column="21">!<pos:position pos:line="64" pos:column="22"/></operator><call><name pos:line="64" pos:column="22">timerisset<pos:position pos:line="64" pos:column="32"/></name> <argument_list pos:line="64" pos:column="33">(<argument><expr><name><name pos:line="64" pos:column="34">ptr<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">-&gt;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="39">timer<pos:position pos:line="64" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="46"/></condition><then pos:line="64" pos:column="46">
			<block type="pseudo"><continue pos:line="65" pos:column="25">continue;<pos:position pos:line="65" pos:column="34"/></continue></block></then></if>

		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name><name pos:line="67" pos:column="21">ptr<pos:position pos:line="67" pos:column="24"/></name><operator pos:line="67" pos:column="24">-&gt;<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="26">ident<pos:position pos:line="67" pos:column="31"/></name></name> <operator pos:line="67" pos:column="32">!=<pos:position pos:line="67" pos:column="34"/></operator> <name pos:line="67" pos:column="35">ident<pos:position pos:line="67" pos:column="40"/></name></expr>)<pos:position pos:line="67" pos:column="41"/></condition><then pos:line="67" pos:column="41">
			<block type="pseudo"><continue pos:line="68" pos:column="25">continue;<pos:position pos:line="68" pos:column="34"/></continue></block></then></if>

		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><operator pos:line="70" pos:column="21">(<pos:position pos:line="70" pos:column="22"/></operator><operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator><name><name pos:line="70" pos:column="23">ptr<pos:position pos:line="70" pos:column="26"/></name><operator pos:line="70" pos:column="26">-&gt;<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="28">sequence<pos:position pos:line="70" pos:column="36"/></name></name> <operator pos:line="70" pos:column="37">-<pos:position pos:line="70" pos:column="38"/></operator> <literal type="number" pos:line="70" pos:column="39">1<pos:position pos:line="70" pos:column="40"/></literal><operator pos:line="70" pos:column="40">)<pos:position pos:line="70" pos:column="41"/></operator> <operator pos:line="70" pos:column="42">&amp;<pos:position pos:line="70" pos:column="47"/></operator> <literal type="number" pos:line="70" pos:column="44">0xFFFF<pos:position pos:line="70" pos:column="50"/></literal><operator pos:line="70" pos:column="50">)<pos:position pos:line="70" pos:column="51"/></operator> <operator pos:line="70" pos:column="52">!=<pos:position pos:line="70" pos:column="54"/></operator> <name pos:line="70" pos:column="55">seq<pos:position pos:line="70" pos:column="58"/></name></expr>)<pos:position pos:line="70" pos:column="59"/></condition><then pos:line="70" pos:column="59">
			<block type="pseudo"><continue pos:line="71" pos:column="25">continue;<pos:position pos:line="71" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="73" pos:column="17">dprintf<pos:position pos:line="73" pos:column="24"/></name> <argument_list pos:line="73" pos:column="25">(<argument><expr><literal type="string" pos:line="73" pos:column="26">"Match found: hostname = %s, ident = 0x%04x, seq = %i\n"<pos:position pos:line="73" pos:column="82"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="74" pos:column="33">ptr<pos:position pos:line="74" pos:column="36"/></name><operator pos:line="74" pos:column="36">-&gt;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="38">hostname<pos:position pos:line="74" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="48">ident<pos:position pos:line="74" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="55">seq<pos:position pos:line="74" pos:column="58"/></name></expr></argument>)<pos:position pos:line="74" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="60"/></expr_stmt>

		<break pos:line="76" pos:column="17">break;<pos:position pos:line="76" pos:column="23"/></break>
	}<pos:position pos:line="77" pos:column="10"/></block></for>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">ptr<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">==<pos:position pos:line="79" pos:column="19"/></operator> <name pos:line="79" pos:column="20">NULL<pos:position pos:line="79" pos:column="24"/></name></expr>)<pos:position pos:line="79" pos:column="25"/></condition><then pos:line="79" pos:column="25">
	<block pos:line="80" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">dprintf<pos:position pos:line="81" pos:column="24"/></name> <argument_list pos:line="81" pos:column="25">(<argument><expr><literal type="string" pos:line="81" pos:column="26">"No match found for ident = 0x%04x, seq = %i\n"<pos:position pos:line="81" pos:column="73"/></literal></expr></argument>,
				<argument><expr><name pos:line="82" pos:column="33">ident<pos:position pos:line="82" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="40">seq<pos:position pos:line="82" pos:column="43"/></name></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if>

	<return pos:line="85" pos:column="9">return <expr><operator pos:line="85" pos:column="16">(<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="17">ptr<pos:position pos:line="85" pos:column="20"/></name><operator pos:line="85" pos:column="20">)<pos:position pos:line="85" pos:column="21"/></operator></expr>;<pos:position pos:line="85" pos:column="22"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
