<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_717_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">meta_data_t<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">cpy_build_meta<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">PyObject<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">meta<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">i<pos:position pos:line="2" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="16">s<pos:position pos:line="2" pos:column="17"/></name></decl>;<pos:position pos:line="2" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">meta_data_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">m<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">NULL<pos:position pos:line="3" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">PyObject<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">l<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">meta<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">l<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <call><name pos:line="9" pos:column="13">PyDict_Items<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">meta<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt> <comment type="block" pos:line="9" pos:column="33">/* New reference. */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">l<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">cpy_log_exception<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><literal type="string" pos:line="11" pos:column="35">"building meta data"<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">NULL<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="14" pos:column="9">m<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">meta_data_create<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">()<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">s<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">PyList_Size<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">l<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><expr><name pos:line="16" pos:column="14">i<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></init> <condition><expr><name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="25">s<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></condition> <incr><expr><operator pos:line="16" pos:column="28">++<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">i<pos:position pos:line="16" pos:column="31"/></name></expr></incr>)<pos:position pos:line="16" pos:column="32"/></control> <block pos:line="16" pos:column="33">{
		<decl_stmt><decl><type><specifier pos:line="17" pos:column="17">const<pos:position pos:line="17" pos:column="22"/></specifier> <name pos:line="17" pos:column="23">char<pos:position pos:line="17" pos:column="27"/></name> <modifier pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></modifier></type><name pos:line="17" pos:column="29">string<pos:position pos:line="17" pos:column="35"/></name></decl>, <modifier pos:line="17" pos:column="37">*<pos:position pos:line="17" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="17" pos:column="38">keystring<pos:position pos:line="17" pos:column="47"/></name></decl>;<pos:position pos:line="17" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">PyObject<pos:position pos:line="18" pos:column="25"/></name> <modifier pos:line="18" pos:column="26">*<pos:position pos:line="18" pos:column="27"/></modifier></type><name pos:line="18" pos:column="27">key<pos:position pos:line="18" pos:column="30"/></name></decl>, <modifier pos:line="18" pos:column="32">*<pos:position pos:line="18" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="18" pos:column="33">value<pos:position pos:line="18" pos:column="38"/></name></decl>, <modifier pos:line="18" pos:column="40">*<pos:position pos:line="18" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="18" pos:column="41">item<pos:position pos:line="18" pos:column="45"/></name></decl>, <modifier pos:line="18" pos:column="47">*<pos:position pos:line="18" pos:column="48"/></modifier><decl><type ref="prev"/><name pos:line="18" pos:column="48">tmp<pos:position pos:line="18" pos:column="51"/></name></decl>;<pos:position pos:line="18" pos:column="52"/></decl_stmt>
		
		<expr_stmt><expr><name pos:line="20" pos:column="17">item<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">PyList_GET_ITEM<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">l<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">i<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">key<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">PyTuple_GET_ITEM<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><name pos:line="21" pos:column="40">item<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="46">0<pos:position pos:line="21" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">Py_INCREF<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">key<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">keystring<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <call><name pos:line="23" pos:column="29">cpy_unicode_or_bytes_to_string<pos:position pos:line="23" pos:column="59"/></name><argument_list pos:line="23" pos:column="59">(<argument><expr><operator pos:line="23" pos:column="60">&amp;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="61">key<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="66"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">keystring<pos:position pos:line="24" pos:column="31"/></name></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32"> <block pos:line="24" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">PyErr_Clear<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">()<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">Py_XDECREF<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">key<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
			<continue pos:line="27" pos:column="25">continue;<pos:position pos:line="27" pos:column="34"/></continue>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">value<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <call><name pos:line="29" pos:column="25">PyTuple_GET_ITEM<pos:position pos:line="29" pos:column="41"/></name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">item<pos:position pos:line="29" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="48">1<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">Py_INCREF<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">value<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">value<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">Py_True<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">meta_data_add_boolean<pos:position pos:line="32" pos:column="46"/></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name pos:line="32" pos:column="47">m<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">keystring<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="61">1<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then> <elseif pos:line="33" pos:column="19">else <if pos:line="33" pos:column="24">if <condition pos:line="33" pos:column="27">(<expr><name pos:line="33" pos:column="28">value<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">==<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">Py_False<pos:position pos:line="33" pos:column="45"/></name></expr>)<pos:position pos:line="33" pos:column="46"/></condition><then pos:line="33" pos:column="46"> <block pos:line="33" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">meta_data_add_boolean<pos:position pos:line="34" pos:column="46"/></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">m<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">keystring<pos:position pos:line="34" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="61">0<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if></elseif> <elseif pos:line="35" pos:column="19">else <if pos:line="35" pos:column="24">if <condition pos:line="35" pos:column="27">(<expr><call><name pos:line="35" pos:column="28">PyFloat_Check<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">value<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="49"/></condition><then pos:line="35" pos:column="49"> <block pos:line="35" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">meta_data_add_double<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">m<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">keystring<pos:position pos:line="36" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="60">PyFloat_AsDouble<pos:position pos:line="36" pos:column="76"/></name><argument_list pos:line="36" pos:column="76">(<argument><expr><name pos:line="36" pos:column="77">value<pos:position pos:line="36" pos:column="82"/></name></expr></argument>)<pos:position pos:line="36" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="85"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if></elseif> <elseif pos:line="37" pos:column="19">else <if pos:line="37" pos:column="24">if <condition pos:line="37" pos:column="27">(<expr><call><name pos:line="37" pos:column="28">PyObject_TypeCheck<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">value<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="54">&amp;<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="55">SignedType<pos:position pos:line="37" pos:column="65"/></name></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="67"/></condition><then pos:line="37" pos:column="67"> <block pos:line="37" pos:column="68">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">long<pos:position pos:line="38" pos:column="29"/></name> <name pos:line="38" pos:column="30">long<pos:position pos:line="38" pos:column="34"/></name> <name pos:line="38" pos:column="35">int<pos:position pos:line="38" pos:column="38"/></name></type> <name pos:line="38" pos:column="39">lli<pos:position pos:line="38" pos:column="42"/></name></decl>;<pos:position pos:line="38" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">lli<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <call><name pos:line="39" pos:column="31">PyLong_AsLongLong<pos:position pos:line="39" pos:column="48"/></name><argument_list pos:line="39" pos:column="48">(<argument><expr><name pos:line="39" pos:column="49">value<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">PyErr_Occurred<pos:position pos:line="40" pos:column="44"/></name><argument_list pos:line="40" pos:column="44">()<pos:position pos:line="40" pos:column="46"/></argument_list></call> <operator pos:line="40" pos:column="47">&amp;&amp;<pos:position pos:line="40" pos:column="57"/></operator> <operator pos:line="40" pos:column="50">(<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="51">lli<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">==<pos:position pos:line="40" pos:column="57"/></operator> <operator pos:line="40" pos:column="58">(<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="59">int64_t<pos:position pos:line="40" pos:column="66"/></name><operator pos:line="40" pos:column="66">)<pos:position pos:line="40" pos:column="67"/></operator> <name pos:line="40" pos:column="68">lli<pos:position pos:line="40" pos:column="71"/></name><operator pos:line="40" pos:column="71">)<pos:position pos:line="40" pos:column="72"/></operator></expr>)<pos:position pos:line="40" pos:column="73"/></condition><then pos:line="40" pos:column="73">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="33">meta_data_add_signed_int<pos:position pos:line="41" pos:column="57"/></name><argument_list pos:line="41" pos:column="57">(<argument><expr><name pos:line="41" pos:column="58">m<pos:position pos:line="41" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="61">keystring<pos:position pos:line="41" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="72">lli<pos:position pos:line="41" pos:column="75"/></name></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if></elseif> <elseif pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><call><name pos:line="42" pos:column="28">PyObject_TypeCheck<pos:position pos:line="42" pos:column="46"/></name><argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">value<pos:position pos:line="42" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="54">&amp;<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="55">UnsignedType<pos:position pos:line="42" pos:column="67"/></name></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="69"/></condition><then pos:line="42" pos:column="69"> <block pos:line="42" pos:column="70">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">long<pos:position pos:line="43" pos:column="29"/></name> <name pos:line="43" pos:column="30">long<pos:position pos:line="43" pos:column="34"/></name> <name pos:line="43" pos:column="35">unsigned<pos:position pos:line="43" pos:column="43"/></name></type> <name pos:line="43" pos:column="44">llu<pos:position pos:line="43" pos:column="47"/></name></decl>;<pos:position pos:line="43" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><name pos:line="44" pos:column="25">llu<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <call><name pos:line="44" pos:column="31">PyLong_AsUnsignedLongLong<pos:position pos:line="44" pos:column="56"/></name><argument_list pos:line="44" pos:column="56">(<argument><expr><name pos:line="44" pos:column="57">value<pos:position pos:line="44" pos:column="62"/></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="64"/></expr_stmt>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><operator pos:line="45" pos:column="29">!<pos:position pos:line="45" pos:column="30"/></operator><call><name pos:line="45" pos:column="30">PyErr_Occurred<pos:position pos:line="45" pos:column="44"/></name><argument_list pos:line="45" pos:column="44">()<pos:position pos:line="45" pos:column="46"/></argument_list></call> <operator pos:line="45" pos:column="47">&amp;&amp;<pos:position pos:line="45" pos:column="57"/></operator> <operator pos:line="45" pos:column="50">(<pos:position pos:line="45" pos:column="51"/></operator><name pos:line="45" pos:column="51">llu<pos:position pos:line="45" pos:column="54"/></name> <operator pos:line="45" pos:column="55">==<pos:position pos:line="45" pos:column="57"/></operator> <operator pos:line="45" pos:column="58">(<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="59">uint64_t<pos:position pos:line="45" pos:column="67"/></name><operator pos:line="45" pos:column="67">)<pos:position pos:line="45" pos:column="68"/></operator> <name pos:line="45" pos:column="69">llu<pos:position pos:line="45" pos:column="72"/></name><operator pos:line="45" pos:column="72">)<pos:position pos:line="45" pos:column="73"/></operator></expr>)<pos:position pos:line="45" pos:column="74"/></condition><then pos:line="45" pos:column="74">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">meta_data_add_unsigned_int<pos:position pos:line="46" pos:column="59"/></name><argument_list pos:line="46" pos:column="59">(<argument><expr><name pos:line="46" pos:column="60">m<pos:position pos:line="46" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="63">keystring<pos:position pos:line="46" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="74">llu<pos:position pos:line="46" pos:column="77"/></name></expr></argument>)<pos:position pos:line="46" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="79"/></expr_stmt></block></then></if>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if></elseif> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><call><name pos:line="47" pos:column="28">PyNumber_Check<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">value<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="50"/></condition><then pos:line="47" pos:column="50"> <block pos:line="47" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">long<pos:position pos:line="48" pos:column="29"/></name> <name pos:line="48" pos:column="30">long<pos:position pos:line="48" pos:column="34"/></name> <name pos:line="48" pos:column="35">int<pos:position pos:line="48" pos:column="38"/></name></type> <name pos:line="48" pos:column="39">lli<pos:position pos:line="48" pos:column="42"/></name></decl>;<pos:position pos:line="48" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="49" pos:column="25">long<pos:position pos:line="49" pos:column="29"/></name> <name pos:line="49" pos:column="30">long<pos:position pos:line="49" pos:column="34"/></name> <name pos:line="49" pos:column="35">unsigned<pos:position pos:line="49" pos:column="43"/></name></type> <name pos:line="49" pos:column="44">llu<pos:position pos:line="49" pos:column="47"/></name></decl>;<pos:position pos:line="49" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">tmp<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <call><name pos:line="50" pos:column="31">PyNumber_Long<pos:position pos:line="50" pos:column="44"/></name><argument_list pos:line="50" pos:column="44">(<argument><expr><name pos:line="50" pos:column="45">value<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">lli<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <call><name pos:line="51" pos:column="31">PyLong_AsLongLong<pos:position pos:line="51" pos:column="48"/></name><argument_list pos:line="51" pos:column="48">(<argument><expr><name pos:line="51" pos:column="49">tmp<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><operator pos:line="52" pos:column="29">!<pos:position pos:line="52" pos:column="30"/></operator><call><name pos:line="52" pos:column="30">PyErr_Occurred<pos:position pos:line="52" pos:column="44"/></name><argument_list pos:line="52" pos:column="44">()<pos:position pos:line="52" pos:column="46"/></argument_list></call> <operator pos:line="52" pos:column="47">&amp;&amp;<pos:position pos:line="52" pos:column="57"/></operator> <operator pos:line="52" pos:column="50">(<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">lli<pos:position pos:line="52" pos:column="54"/></name> <operator pos:line="52" pos:column="55">==<pos:position pos:line="52" pos:column="57"/></operator> <operator pos:line="52" pos:column="58">(<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="59">int64_t<pos:position pos:line="52" pos:column="66"/></name><operator pos:line="52" pos:column="66">)<pos:position pos:line="52" pos:column="67"/></operator> <name pos:line="52" pos:column="68">lli<pos:position pos:line="52" pos:column="71"/></name><operator pos:line="52" pos:column="71">)<pos:position pos:line="52" pos:column="72"/></operator></expr>)<pos:position pos:line="52" pos:column="73"/></condition><then pos:line="52" pos:column="73"> <block pos:line="52" pos:column="74">{
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">meta_data_add_signed_int<pos:position pos:line="53" pos:column="57"/></name><argument_list pos:line="53" pos:column="57">(<argument><expr><name pos:line="53" pos:column="58">m<pos:position pos:line="53" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">keystring<pos:position pos:line="53" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="72">lli<pos:position pos:line="53" pos:column="75"/></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="77"/></expr_stmt>
			}<pos:position pos:line="54" pos:column="26"/></block></then> <else pos:line="54" pos:column="27">else <block pos:line="54" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="55" pos:column="33">PyErr_Clear<pos:position pos:line="55" pos:column="44"/></name><argument_list pos:line="55" pos:column="44">()<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="56" pos:column="33">llu<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">=<pos:position pos:line="56" pos:column="38"/></operator> <call><name pos:line="56" pos:column="39">PyLong_AsUnsignedLongLong<pos:position pos:line="56" pos:column="64"/></name><argument_list pos:line="56" pos:column="64">(<argument><expr><name pos:line="56" pos:column="65">tmp<pos:position pos:line="56" pos:column="68"/></name></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt>
				<if pos:line="57" pos:column="33">if <condition pos:line="57" pos:column="36">(<expr><operator pos:line="57" pos:column="37">!<pos:position pos:line="57" pos:column="38"/></operator><call><name pos:line="57" pos:column="38">PyErr_Occurred<pos:position pos:line="57" pos:column="52"/></name><argument_list pos:line="57" pos:column="52">()<pos:position pos:line="57" pos:column="54"/></argument_list></call> <operator pos:line="57" pos:column="55">&amp;&amp;<pos:position pos:line="57" pos:column="65"/></operator> <operator pos:line="57" pos:column="58">(<pos:position pos:line="57" pos:column="59"/></operator><name pos:line="57" pos:column="59">llu<pos:position pos:line="57" pos:column="62"/></name> <operator pos:line="57" pos:column="63">==<pos:position pos:line="57" pos:column="65"/></operator> <operator pos:line="57" pos:column="66">(<pos:position pos:line="57" pos:column="67"/></operator><name pos:line="57" pos:column="67">uint64_t<pos:position pos:line="57" pos:column="75"/></name><operator pos:line="57" pos:column="75">)<pos:position pos:line="57" pos:column="76"/></operator> <name pos:line="57" pos:column="77">llu<pos:position pos:line="57" pos:column="80"/></name><operator pos:line="57" pos:column="80">)<pos:position pos:line="57" pos:column="81"/></operator></expr>)<pos:position pos:line="57" pos:column="82"/></condition><then pos:line="57" pos:column="82">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="41">meta_data_add_unsigned_int<pos:position pos:line="58" pos:column="67"/></name><argument_list pos:line="58" pos:column="67">(<argument><expr><name pos:line="58" pos:column="68">m<pos:position pos:line="58" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="71">keystring<pos:position pos:line="58" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="82">llu<pos:position pos:line="58" pos:column="85"/></name></expr></argument>)<pos:position pos:line="58" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="87"/></expr_stmt></block></then></if>
			}<pos:position pos:line="59" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">Py_XDECREF<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">tmp<pos:position pos:line="60" pos:column="39"/></name></expr></argument>)<pos:position pos:line="60" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if></elseif> <else pos:line="61" pos:column="19">else <block pos:line="61" pos:column="24">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">string<pos:position pos:line="62" pos:column="31"/></name> <operator pos:line="62" pos:column="32">=<pos:position pos:line="62" pos:column="33"/></operator> <call><name pos:line="62" pos:column="34">cpy_unicode_or_bytes_to_string<pos:position pos:line="62" pos:column="64"/></name><argument_list pos:line="62" pos:column="64">(<argument><expr><operator pos:line="62" pos:column="65">&amp;<pos:position pos:line="62" pos:column="70"/></operator><name pos:line="62" pos:column="66">value<pos:position pos:line="62" pos:column="71"/></name></expr></argument>)<pos:position pos:line="62" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="73"/></expr_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">string<pos:position pos:line="63" pos:column="35"/></name></expr>)<pos:position pos:line="63" pos:column="36"/></condition><then pos:line="63" pos:column="36"> <block pos:line="63" pos:column="37">{
				<expr_stmt><expr><call><name pos:line="64" pos:column="33">meta_data_add_string<pos:position pos:line="64" pos:column="53"/></name><argument_list pos:line="64" pos:column="53">(<argument><expr><name pos:line="64" pos:column="54">m<pos:position pos:line="64" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="57">keystring<pos:position pos:line="64" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="68">string<pos:position pos:line="64" pos:column="74"/></name></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="76"/></expr_stmt>
			}<pos:position pos:line="65" pos:column="26"/></block></then> <else pos:line="65" pos:column="27">else <block pos:line="65" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">PyErr_Clear<pos:position pos:line="66" pos:column="44"/></name><argument_list pos:line="66" pos:column="44">()<pos:position pos:line="66" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="67" pos:column="33">tmp<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">=<pos:position pos:line="67" pos:column="38"/></operator> <call><name pos:line="67" pos:column="39">PyObject_Str<pos:position pos:line="67" pos:column="51"/></name><argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">value<pos:position pos:line="67" pos:column="57"/></name></expr></argument>)<pos:position pos:line="67" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><name pos:line="68" pos:column="33">string<pos:position pos:line="68" pos:column="39"/></name> <operator pos:line="68" pos:column="40">=<pos:position pos:line="68" pos:column="41"/></operator> <call><name pos:line="68" pos:column="42">cpy_unicode_or_bytes_to_string<pos:position pos:line="68" pos:column="72"/></name><argument_list pos:line="68" pos:column="72">(<argument><expr><operator pos:line="68" pos:column="73">&amp;<pos:position pos:line="68" pos:column="78"/></operator><name pos:line="68" pos:column="74">tmp<pos:position pos:line="68" pos:column="77"/></name></expr></argument>)<pos:position pos:line="68" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="79"/></expr_stmt>
				<if pos:line="69" pos:column="33">if <condition pos:line="69" pos:column="36">(<expr><name pos:line="69" pos:column="37">string<pos:position pos:line="69" pos:column="43"/></name></expr>)<pos:position pos:line="69" pos:column="44"/></condition><then pos:line="69" pos:column="44">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="41">meta_data_add_string<pos:position pos:line="70" pos:column="61"/></name><argument_list pos:line="70" pos:column="61">(<argument><expr><name pos:line="70" pos:column="62">m<pos:position pos:line="70" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="65">keystring<pos:position pos:line="70" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="76">string<pos:position pos:line="70" pos:column="82"/></name></expr></argument>)<pos:position pos:line="70" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="84"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="71" pos:column="33">Py_XDECREF<pos:position pos:line="71" pos:column="43"/></name><argument_list pos:line="71" pos:column="43">(<argument><expr><name pos:line="71" pos:column="44">tmp<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="49"/></expr_stmt>
			}<pos:position pos:line="72" pos:column="26"/></block></else></if>
		}<pos:position pos:line="73" pos:column="18"/></block></else></if>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><call><name pos:line="74" pos:column="21">PyErr_Occurred<pos:position pos:line="74" pos:column="35"/></name><argument_list pos:line="74" pos:column="35">()<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="38"/></condition><then pos:line="74" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="25">cpy_log_exception<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><literal type="string" pos:line="75" pos:column="43">"building meta data"<pos:position pos:line="75" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="65"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">Py_XDECREF<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">value<pos:position pos:line="76" pos:column="33"/></name></expr></argument>)<pos:position pos:line="76" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">Py_DECREF<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">key<pos:position pos:line="77" pos:column="30"/></name></expr></argument>)<pos:position pos:line="77" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">Py_XDECREF<pos:position pos:line="79" pos:column="19"/></name><argument_list pos:line="79" pos:column="19">(<argument><expr><name pos:line="79" pos:column="20">l<pos:position pos:line="79" pos:column="21"/></name></expr></argument>)<pos:position pos:line="79" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="23"/></expr_stmt>
	<return pos:line="80" pos:column="9">return <expr><name pos:line="80" pos:column="16">m<pos:position pos:line="80" pos:column="17"/></name></expr>;<pos:position pos:line="80" pos:column="18"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
