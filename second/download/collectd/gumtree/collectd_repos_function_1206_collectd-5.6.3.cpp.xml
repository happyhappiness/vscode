<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1206_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">change_bin_width<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">latency_counter_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">lc<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">cdtime_t<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">latency<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list> <comment type="block" pos:line="1" pos:column="71">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* This function is called because the new value is above histogram's range.
   * First find the required bin width:
   *           requiredBinWidth = (value + 1) / numBins
   * then get the next nearest power of 2
   *           newBinWidth = 2^(ceil(log2(requiredBinWidth)))
   */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">double<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">required_bin_width<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">=
      <expr><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><call pos:line="10" pos:column="8">(<name pos:line="10" pos:column="9">double<pos:position pos:line="10" pos:column="15"/></name>)<argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">latency<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">+<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="27">1<pos:position pos:line="10" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call><operator pos:line="10" pos:column="29">)<pos:position pos:line="10" pos:column="30"/></operator> <operator pos:line="10" pos:column="31">/<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="33">(<pos:position pos:line="10" pos:column="34"/></operator><operator pos:line="10" pos:column="34">(<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">double<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">)<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">HISTOGRAM_NUM_BINS<pos:position pos:line="10" pos:column="60"/></name><operator pos:line="10" pos:column="60">)<pos:position pos:line="10" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">double<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">required_bin_width_logbase2<pos:position pos:line="11" pos:column="37"/></name> <init pos:line="11" pos:column="38">= <expr><call><name pos:line="11" pos:column="40">log<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">required_bin_width<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call> <operator pos:line="11" pos:column="64">/<pos:position pos:line="11" pos:column="65"/></operator> <call><name pos:line="11" pos:column="66">log<pos:position pos:line="11" pos:column="69"/></name><argument_list pos:line="11" pos:column="69">(<argument><expr><literal type="number" pos:line="11" pos:column="70">2.0<pos:position pos:line="11" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="75"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">cdtime_t<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">new_bin_width<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">=
      <expr><call pos:line="13" pos:column="7">(<name pos:line="13" pos:column="8">cdtime_t<pos:position pos:line="13" pos:column="16"/></name>)<argument_list pos:line="13" pos:column="17">(<argument><expr><call><name pos:line="13" pos:column="18">pow<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><literal type="number" pos:line="13" pos:column="22">2.0<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="27">ceil<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">required_bin_width_logbase2<pos:position pos:line="13" pos:column="59"/></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call> <operator pos:line="13" pos:column="62">+<pos:position pos:line="13" pos:column="63"/></operator> <literal type="number" pos:line="13" pos:column="64">.5<pos:position pos:line="13" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="68"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">cdtime_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">old_bin_width<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name><name pos:line="14" pos:column="28">lc<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">-&gt;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="32">bin_width<pos:position pos:line="14" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="16" pos:column="3">lc<pos:position pos:line="16" pos:column="5"/></name><operator pos:line="16" pos:column="5">-&gt;<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="7">bin_width<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">new_bin_width<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* bin_width has been increased, now iterate through all bins and move the
   * old bin's count to new bin. */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name><name pos:line="20" pos:column="7">lc<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">num<pos:position pos:line="20" pos:column="14"/></name></name> <operator pos:line="20" pos:column="15">&gt;<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <comment type="line" pos:line="20" pos:column="20">// if the histogram has data then iterate else skip</comment>
  <block pos:line="21" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">double<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">width_change_ratio<pos:position pos:line="22" pos:column="30"/></name> <init pos:line="22" pos:column="31">=
        <expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">double<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">old_bin_width<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator> <operator pos:line="23" pos:column="33">/<pos:position pos:line="23" pos:column="34"/></operator> <operator pos:line="23" pos:column="35">(<pos:position pos:line="23" pos:column="36"/></operator><operator pos:line="23" pos:column="36">(<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">double<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">)<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">new_bin_width<pos:position pos:line="23" pos:column="57"/></name><operator pos:line="23" pos:column="57">)<pos:position pos:line="23" pos:column="58"/></operator></expr></init></decl>;<pos:position pos:line="23" pos:column="59"/></decl_stmt>

    <for pos:line="25" pos:column="5">for <control pos:line="25" pos:column="9">(<init><decl><type><name pos:line="25" pos:column="10">size_t<pos:position pos:line="25" pos:column="16"/></name></type> <name pos:line="25" pos:column="17">i<pos:position pos:line="25" pos:column="18"/></name> <init pos:line="25" pos:column="19">= <expr><literal type="number" pos:line="25" pos:column="21">0<pos:position pos:line="25" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="23"/></init> <condition><expr><name pos:line="25" pos:column="24">i<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">&lt;<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="28">HISTOGRAM_NUM_BINS<pos:position pos:line="25" pos:column="46"/></name></expr>;<pos:position pos:line="25" pos:column="47"/></condition> <incr><expr><name pos:line="25" pos:column="48">i<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">++<pos:position pos:line="25" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="52"/></control> <block pos:line="25" pos:column="53">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">size_t<pos:position pos:line="26" pos:column="13"/></name></type> <name pos:line="26" pos:column="14">new_bin<pos:position pos:line="26" pos:column="21"/></name> <init pos:line="26" pos:column="22">= <expr><call pos:line="26" pos:column="24">(<name pos:line="26" pos:column="25">size_t<pos:position pos:line="26" pos:column="31"/></name>)<argument_list pos:line="26" pos:column="32">(<argument><expr><operator pos:line="26" pos:column="33">(<pos:position pos:line="26" pos:column="34"/></operator><operator pos:line="26" pos:column="34">(<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">double<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">i<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">)<pos:position pos:line="26" pos:column="44"/></operator> <operator pos:line="26" pos:column="45">*<pos:position pos:line="26" pos:column="46"/></operator> <name pos:line="26" pos:column="47">width_change_ratio<pos:position pos:line="26" pos:column="65"/></name></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="67"/></decl_stmt>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">i<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">==<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">new_bin<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24">
        <block type="pseudo"><continue pos:line="28" pos:column="9">continue;<pos:position pos:line="28" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">assert<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">new_bin<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">&lt;<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="24">i<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="31" pos:column="7">lc<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">-&gt;<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="11">histogram<pos:position pos:line="31" pos:column="20"/></name><index pos:line="31" pos:column="20">[<expr><name pos:line="31" pos:column="21">new_bin<pos:position pos:line="31" pos:column="28"/></name></expr>]<pos:position pos:line="31" pos:column="29"/></index></name> <operator pos:line="31" pos:column="30">+=<pos:position pos:line="31" pos:column="32"/></operator> <name><name pos:line="31" pos:column="33">lc<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">histogram<pos:position pos:line="31" pos:column="46"/></name><index pos:line="31" pos:column="46">[<expr><name pos:line="31" pos:column="47">i<pos:position pos:line="31" pos:column="48"/></name></expr>]<pos:position pos:line="31" pos:column="49"/></index></name></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="32" pos:column="7">lc<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">histogram<pos:position pos:line="32" pos:column="20"/></name><index pos:line="32" pos:column="20">[<expr><name pos:line="32" pos:column="21">i<pos:position pos:line="32" pos:column="22"/></name></expr>]<pos:position pos:line="32" pos:column="23"/></index></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">0<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></for>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">DEBUG<pos:position pos:line="36" pos:column="8"/></name><argument_list pos:line="36" pos:column="8">(<argument><expr><literal type="string" pos:line="36" pos:column="9">"utils_latency: change_bin_width: latency = %.3f; "<pos:position pos:line="36" pos:column="60"/></literal>
        <literal type="string" pos:line="37" pos:column="9">"old_bin_width = %.3f; new_bin_width = %.3f;"<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="38" pos:column="9">CDTIME_T_TO_DOUBLE<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">latency<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="38">CDTIME_T_TO_DOUBLE<pos:position pos:line="38" pos:column="56"/></name><argument_list pos:line="38" pos:column="56">(<argument><expr><name pos:line="38" pos:column="57">old_bin_width<pos:position pos:line="38" pos:column="70"/></name></expr></argument>)<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr></argument>,
        <argument><expr><call><name pos:line="39" pos:column="9">CDTIME_T_TO_DOUBLE<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">new_bin_width<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
