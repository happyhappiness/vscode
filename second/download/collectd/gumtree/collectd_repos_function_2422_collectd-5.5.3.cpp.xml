<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2422_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">plugin_write_enqueue<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">value_list_t<pos:position pos:line="1" pos:column="46"/></name> <specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">vl<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list> <comment type="block" pos:line="1" pos:column="58">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">write_queue_t<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">q<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">q<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <call><name pos:line="5" pos:column="13">malloc<pos:position pos:line="5" pos:column="19"/></name> <argument_list pos:line="5" pos:column="20">(<argument><expr><sizeof pos:line="5" pos:column="21">sizeof <argument_list pos:line="5" pos:column="28">(<argument><expr><operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">q<pos:position pos:line="5" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">q<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">(<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">ENOMEM<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">)<pos:position pos:line="7" pos:column="32"/></operator></expr>;<pos:position pos:line="7" pos:column="33"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">q<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">-&gt;<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="12">next<pos:position pos:line="8" pos:column="16"/></name></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="10" pos:column="9">q<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">vl<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">plugin_value_list_clone<pos:position pos:line="10" pos:column="40"/></name> <argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">vl<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">q<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">vl<pos:position pos:line="11" pos:column="18"/></name></name> <operator pos:line="11" pos:column="19">==<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">NULL<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
	<block pos:line="12" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">sfree<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">q<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">(<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">ENOMEM<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">)<pos:position pos:line="14" pos:column="32"/></operator></expr>;<pos:position pos:line="14" pos:column="33"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* Store context of caller (read plugin); otherwise, it would not be
	 * available to the write plugins when actually dispatching the
	 * value-list later on. */</comment>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">q<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">ctx<pos:position pos:line="20" pos:column="15"/></name></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <call><name pos:line="20" pos:column="18">plugin_get_ctx<pos:position pos:line="20" pos:column="32"/></name> <argument_list pos:line="20" pos:column="33">()<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">pthread_mutex_lock<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="30">write_lock<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">write_queue_tail<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">==<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">NULL<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38">
	<block pos:line="25" pos:column="9">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">write_queue_head<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">=<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="36">q<pos:position pos:line="26" pos:column="37"/></name></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">write_queue_tail<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">q<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">write_queue_length<pos:position pos:line="28" pos:column="35"/></name> <operator pos:line="28" pos:column="36">=<pos:position pos:line="28" pos:column="37"/></operator> <literal type="number" pos:line="28" pos:column="38">1<pos:position pos:line="28" pos:column="39"/></literal></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then>
	<else pos:line="30" pos:column="9">else
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">write_queue_tail<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">next<pos:position pos:line="32" pos:column="39"/></name></name> <operator pos:line="32" pos:column="40">=<pos:position pos:line="32" pos:column="41"/></operator> <name pos:line="32" pos:column="42">q<pos:position pos:line="32" pos:column="43"/></name></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">write_queue_tail<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">=<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="36">q<pos:position pos:line="33" pos:column="37"/></name></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">write_queue_length<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">+=<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="39">1<pos:position pos:line="34" pos:column="40"/></literal></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">pthread_cond_signal<pos:position pos:line="37" pos:column="28"/></name> <argument_list pos:line="37" pos:column="29">(<argument><expr><operator pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="31">write_cond<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">pthread_mutex_unlock<pos:position pos:line="38" pos:column="29"/></name> <argument_list pos:line="38" pos:column="30">(<argument><expr><operator pos:line="38" pos:column="31">&amp;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="32">write_lock<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>

	<return pos:line="40" pos:column="9">return <expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal><operator pos:line="40" pos:column="18">)<pos:position pos:line="40" pos:column="19"/></operator></expr>;<pos:position pos:line="40" pos:column="20"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
