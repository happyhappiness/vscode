<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_142_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">exec_read_one<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">arg<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <comment type="block" pos:line="1" pos:column="39">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">program_list_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">pl<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><operator pos:line="3" pos:column="24">(<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="25">program_list_t<pos:position pos:line="3" pos:column="39"/></name> <operator pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></operator><operator pos:line="3" pos:column="41">)<pos:position pos:line="3" pos:column="42"/></operator><name pos:line="3" pos:column="42">arg<pos:position pos:line="3" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">fd<pos:position pos:line="4" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="11">fd_err<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">highest_fd<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">fd_set<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fdset<pos:position pos:line="5" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="17">copy<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">buffer<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><literal type="number" pos:line="7" pos:column="15">1200<pos:position pos:line="7" pos:column="19"/></literal></expr>]<pos:position pos:line="7" pos:column="20"/></index></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt> <comment type="block" pos:line="7" pos:column="22">/* if not completely read */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">buffer_err<pos:position pos:line="8" pos:column="18"/></name><index pos:line="8" pos:column="18">[<expr><literal type="number" pos:line="8" pos:column="19">1024<pos:position pos:line="8" pos:column="23"/></literal></expr>]<pos:position pos:line="8" pos:column="24"/></index></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">pbuffer<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name pos:line="9" pos:column="19">buffer<pos:position pos:line="9" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">pbuffer_err<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><name pos:line="10" pos:column="23">buffer_err<pos:position pos:line="10" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">status<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <call><name pos:line="12" pos:column="12">fork_child<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">pl<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">NULL<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="33">&amp;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="34">fd<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">fd_err<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&lt;<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
    <comment type="block" pos:line="14" pos:column="5">/* Reset the "running" flag */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">pthread_mutex_lock<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">pl_lock<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">pl<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">flags<pos:position pos:line="16" pos:column="14"/></name></name> <operator pos:line="16" pos:column="15">&amp;=<pos:position pos:line="16" pos:column="21"/></operator> <operator pos:line="16" pos:column="18">~<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">PL_RUNNING<pos:position pos:line="16" pos:column="29"/></name></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">pthread_mutex_unlock<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="27">pl_lock<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_exit<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><operator pos:line="18" pos:column="18">(<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">void<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator><literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">pl<pos:position pos:line="20" pos:column="5"/></name><operator pos:line="20" pos:column="5">-&gt;<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="7">pid<pos:position pos:line="20" pos:column="10"/></name></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">assert<pos:position pos:line="22" pos:column="9"/></name><argument_list pos:line="22" pos:column="9">(<argument><expr><name><name pos:line="22" pos:column="10">pl<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">pid<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">!=<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">FD_ZERO<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><operator pos:line="24" pos:column="11">&amp;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="12">fdset<pos:position pos:line="24" pos:column="17"/></name></expr></argument>)<pos:position pos:line="24" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">FD_SET<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><name pos:line="25" pos:column="10">fd<pos:position pos:line="25" pos:column="12"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="14">&amp;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="15">fdset<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">FD_SET<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name pos:line="26" pos:column="10">fd_err<pos:position pos:line="26" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="18">&amp;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="19">fdset<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Determine the highest file descriptor */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">highest_fd<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">fd<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&gt;<pos:position pos:line="29" pos:column="24"/></operator> <name pos:line="29" pos:column="22">fd_err<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">)<pos:position pos:line="29" pos:column="29"/></operator></expr> ?<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31"> <expr><name pos:line="29" pos:column="32">fd<pos:position pos:line="29" pos:column="34"/></name></expr> <pos:position pos:line="29" pos:column="35"/></then><else pos:line="29" pos:column="35">: <expr><name pos:line="29" pos:column="37">fd_err<pos:position pos:line="29" pos:column="43"/></name></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* We use a copy of fdset, as select modifies it */</comment>
  <expr_stmt><expr><name pos:line="32" pos:column="3">copy<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <name pos:line="32" pos:column="10">fdset<pos:position pos:line="32" pos:column="15"/></name></expr>;<pos:position pos:line="32" pos:column="16"/></expr_stmt>

  <while pos:line="34" pos:column="3">while <condition pos:line="34" pos:column="9">(<expr><literal type="number" pos:line="34" pos:column="10">1<pos:position pos:line="34" pos:column="11"/></literal></expr>)<pos:position pos:line="34" pos:column="12"/></condition> <block pos:line="34" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">int<pos:position pos:line="35" pos:column="8"/></name></type> <name pos:line="35" pos:column="9">len<pos:position pos:line="35" pos:column="12"/></name></decl>;<pos:position pos:line="35" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">status<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">select<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">highest_fd<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">+<pos:position pos:line="37" pos:column="33"/></operator> <literal type="number" pos:line="37" pos:column="34">1<pos:position pos:line="37" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">copy<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">NULL<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">NULL<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="56">NULL<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">status<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">&lt;<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><name pos:line="39" pos:column="11">errno<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">==<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">EINTR<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
        <block type="pseudo"><continue pos:line="40" pos:column="9">continue;<pos:position pos:line="40" pos:column="18"/></continue></block></then></if>
      <break pos:line="41" pos:column="7">break;<pos:position pos:line="41" pos:column="13"/></break>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">FD_ISSET<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">(<argument><expr><name pos:line="44" pos:column="18">fd<pos:position pos:line="44" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="22">&amp;<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="23">copy<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{
      <decl_stmt><decl><type><name pos:line="45" pos:column="7">char<pos:position pos:line="45" pos:column="11"/></name> <modifier pos:line="45" pos:column="12">*<pos:position pos:line="45" pos:column="13"/></modifier></type><name pos:line="45" pos:column="13">pnl<pos:position pos:line="45" pos:column="16"/></name></decl>;<pos:position pos:line="45" pos:column="17"/></decl_stmt>

      <expr_stmt><expr><name pos:line="47" pos:column="7">len<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <call><name pos:line="47" pos:column="13">read<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">fd<pos:position pos:line="47" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="22">pbuffer<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="31">sizeof<argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">buffer<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></sizeof> <operator pos:line="47" pos:column="46">-<pos:position pos:line="47" pos:column="47"/></operator> <literal type="number" pos:line="47" pos:column="48">1<pos:position pos:line="47" pos:column="49"/></literal> <operator pos:line="47" pos:column="50">-<pos:position pos:line="47" pos:column="51"/></operator> <operator pos:line="47" pos:column="52">(<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="53">pbuffer<pos:position pos:line="47" pos:column="60"/></name> <operator pos:line="47" pos:column="61">-<pos:position pos:line="47" pos:column="62"/></operator> <name pos:line="47" pos:column="63">buffer<pos:position pos:line="47" pos:column="69"/></name><operator pos:line="47" pos:column="69">)<pos:position pos:line="47" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="72"/></expr_stmt>

      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">len<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">&lt;<pos:position pos:line="49" pos:column="19"/></operator> <literal type="number" pos:line="49" pos:column="17">0<pos:position pos:line="49" pos:column="18"/></literal></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19"> <block pos:line="49" pos:column="20">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">errno<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">==<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">EAGAIN<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">||<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="32">errno<pos:position pos:line="50" pos:column="37"/></name> <operator pos:line="50" pos:column="38">==<pos:position pos:line="50" pos:column="40"/></operator> <name pos:line="50" pos:column="41">EINTR<pos:position pos:line="50" pos:column="46"/></name></expr>)<pos:position pos:line="50" pos:column="47"/></condition><then pos:line="50" pos:column="47">
          <block type="pseudo"><continue pos:line="51" pos:column="11">continue;<pos:position pos:line="51" pos:column="20"/></continue></block></then></if>
        <break pos:line="52" pos:column="9">break;<pos:position pos:line="52" pos:column="15"/></break>
      }<pos:position pos:line="53" pos:column="8"/></block></then> <elseif pos:line="53" pos:column="9">else <if pos:line="53" pos:column="14">if <condition pos:line="53" pos:column="17">(<expr><name pos:line="53" pos:column="18">len<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">==<pos:position pos:line="53" pos:column="24"/></operator> <literal type="number" pos:line="53" pos:column="25">0<pos:position pos:line="53" pos:column="26"/></literal></expr>)<pos:position pos:line="53" pos:column="27"/></condition><then pos:line="53" pos:column="27">
        <block type="pseudo"><break pos:line="54" pos:column="9">break;<pos:position pos:line="54" pos:column="15"/></break></block></then></if></elseif></if> <comment type="block" pos:line="54" pos:column="16">/* We've reached EOF */</comment>

      <expr_stmt><expr><name><name pos:line="56" pos:column="7">pbuffer<pos:position pos:line="56" pos:column="14"/></name><index pos:line="56" pos:column="14">[<expr><name pos:line="56" pos:column="15">len<pos:position pos:line="56" pos:column="18"/></name></expr>]<pos:position pos:line="56" pos:column="19"/></index></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <literal type="char" pos:line="56" pos:column="22">'\0'<pos:position pos:line="56" pos:column="26"/></literal></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>

      <expr_stmt><expr><name pos:line="58" pos:column="7">len<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">+=<pos:position pos:line="58" pos:column="13"/></operator> <name pos:line="58" pos:column="14">pbuffer<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">-<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">buffer<pos:position pos:line="58" pos:column="30"/></name></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="59" pos:column="7">pbuffer<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <name pos:line="59" pos:column="17">buffer<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>

      <while pos:line="61" pos:column="7">while <condition pos:line="61" pos:column="13">(<expr><operator pos:line="61" pos:column="14">(<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">pnl<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <call><name pos:line="61" pos:column="21">strchr<pos:position pos:line="61" pos:column="27"/></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">pbuffer<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="61" pos:column="37">'\n'<pos:position pos:line="61" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call><operator pos:line="61" pos:column="42">)<pos:position pos:line="61" pos:column="43"/></operator></expr>)<pos:position pos:line="61" pos:column="44"/></condition> <block pos:line="61" pos:column="45">{
        <expr_stmt><expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">pnl<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <literal type="char" pos:line="62" pos:column="16">'\0'<pos:position pos:line="62" pos:column="20"/></literal></expr>;<pos:position pos:line="62" pos:column="21"/></expr_stmt>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">*<pos:position pos:line="63" pos:column="14"/></operator><operator pos:line="63" pos:column="14">(<pos:position pos:line="63" pos:column="15"/></operator><name pos:line="63" pos:column="15">pnl<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">-<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="21">1<pos:position pos:line="63" pos:column="22"/></literal><operator pos:line="63" pos:column="22">)<pos:position pos:line="63" pos:column="23"/></operator> <operator pos:line="63" pos:column="24">==<pos:position pos:line="63" pos:column="26"/></operator> <literal type="char" pos:line="63" pos:column="27">'\r'<pos:position pos:line="63" pos:column="31"/></literal></expr>)<pos:position pos:line="63" pos:column="32"/></condition><then pos:line="63" pos:column="32">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="64" pos:column="11">*<pos:position pos:line="64" pos:column="12"/></operator><operator pos:line="64" pos:column="12">(<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">pnl<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">-<pos:position pos:line="64" pos:column="18"/></operator> <literal type="number" pos:line="64" pos:column="19">1<pos:position pos:line="64" pos:column="20"/></literal><operator pos:line="64" pos:column="20">)<pos:position pos:line="64" pos:column="21"/></operator> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <literal type="char" pos:line="64" pos:column="24">'\0'<pos:position pos:line="64" pos:column="28"/></literal></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="66" pos:column="9">parse_line<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><name pos:line="66" pos:column="20">pbuffer<pos:position pos:line="66" pos:column="27"/></name></expr></argument>)<pos:position pos:line="66" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><name pos:line="68" pos:column="9">pbuffer<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <operator pos:line="68" pos:column="19">++<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">pnl<pos:position pos:line="68" pos:column="24"/></name></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="69" pos:column="8"/></block></while>
      <comment type="block" pos:line="70" pos:column="7">/* not completely read ? */</comment>
      <if pos:line="71" pos:column="7">if <condition pos:line="71" pos:column="10">(<expr><name pos:line="71" pos:column="11">pbuffer<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">-<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">buffer<pos:position pos:line="71" pos:column="27"/></name> <operator pos:line="71" pos:column="28">&lt;<pos:position pos:line="71" pos:column="32"/></operator> <name pos:line="71" pos:column="30">len<pos:position pos:line="71" pos:column="33"/></name></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34"> <block pos:line="71" pos:column="35">{
        <expr_stmt><expr><name pos:line="72" pos:column="9">len<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">-=<pos:position pos:line="72" pos:column="15"/></operator> <name pos:line="72" pos:column="16">pbuffer<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">-<pos:position pos:line="72" pos:column="25"/></operator> <name pos:line="72" pos:column="26">buffer<pos:position pos:line="72" pos:column="32"/></name></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">memmove<pos:position pos:line="73" pos:column="16"/></name><argument_list pos:line="73" pos:column="16">(<argument><expr><name pos:line="73" pos:column="17">buffer<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="25">pbuffer<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="34">len<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="74" pos:column="9">pbuffer<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">buffer<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">+<pos:position pos:line="74" pos:column="27"/></operator> <name pos:line="74" pos:column="28">len<pos:position pos:line="74" pos:column="31"/></name></expr>;<pos:position pos:line="74" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="75" pos:column="8"/></block></then> <else pos:line="75" pos:column="9">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="9">pbuffer<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">buffer<pos:position pos:line="76" pos:column="25"/></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt></block></else></if>
    }<pos:position pos:line="77" pos:column="6"/></block></then> <elseif pos:line="77" pos:column="7">else <if pos:line="77" pos:column="12">if <condition pos:line="77" pos:column="15">(<expr><call><name pos:line="77" pos:column="16">FD_ISSET<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">fd_err<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="33">&amp;<pos:position pos:line="77" pos:column="38"/></operator><name pos:line="77" pos:column="34">copy<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="40"/></condition><then pos:line="77" pos:column="40"> <block pos:line="77" pos:column="41">{
      <decl_stmt><decl><type><name pos:line="78" pos:column="7">char<pos:position pos:line="78" pos:column="11"/></name> <modifier pos:line="78" pos:column="12">*<pos:position pos:line="78" pos:column="13"/></modifier></type><name pos:line="78" pos:column="13">pnl<pos:position pos:line="78" pos:column="16"/></name></decl>;<pos:position pos:line="78" pos:column="17"/></decl_stmt>

      <expr_stmt><expr><name pos:line="80" pos:column="7">len<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">=<pos:position pos:line="80" pos:column="12"/></operator> <call><name pos:line="80" pos:column="13">read<pos:position pos:line="80" pos:column="17"/></name><argument_list pos:line="80" pos:column="17">(<argument><expr><name pos:line="80" pos:column="18">fd_err<pos:position pos:line="80" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="26">pbuffer_err<pos:position pos:line="80" pos:column="37"/></name></expr></argument>,
                 <argument><expr><sizeof pos:line="81" pos:column="18">sizeof<argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">buffer_err<pos:position pos:line="81" pos:column="35"/></name></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></sizeof> <operator pos:line="81" pos:column="37">-<pos:position pos:line="81" pos:column="38"/></operator> <literal type="number" pos:line="81" pos:column="39">1<pos:position pos:line="81" pos:column="40"/></literal> <operator pos:line="81" pos:column="41">-<pos:position pos:line="81" pos:column="42"/></operator> <operator pos:line="81" pos:column="43">(<pos:position pos:line="81" pos:column="44"/></operator><name pos:line="81" pos:column="44">pbuffer_err<pos:position pos:line="81" pos:column="55"/></name> <operator pos:line="81" pos:column="56">-<pos:position pos:line="81" pos:column="57"/></operator> <name pos:line="81" pos:column="58">buffer_err<pos:position pos:line="81" pos:column="68"/></name><operator pos:line="81" pos:column="68">)<pos:position pos:line="81" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="71"/></expr_stmt>

      <if pos:line="83" pos:column="7">if <condition pos:line="83" pos:column="10">(<expr><name pos:line="83" pos:column="11">len<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">&lt;<pos:position pos:line="83" pos:column="19"/></operator> <literal type="number" pos:line="83" pos:column="17">0<pos:position pos:line="83" pos:column="18"/></literal></expr>)<pos:position pos:line="83" pos:column="19"/></condition><then pos:line="83" pos:column="19"> <block pos:line="83" pos:column="20">{
        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">errno<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">==<pos:position pos:line="84" pos:column="21"/></operator> <name pos:line="84" pos:column="22">EAGAIN<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">||<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="32">errno<pos:position pos:line="84" pos:column="37"/></name> <operator pos:line="84" pos:column="38">==<pos:position pos:line="84" pos:column="40"/></operator> <name pos:line="84" pos:column="41">EINTR<pos:position pos:line="84" pos:column="46"/></name></expr>)<pos:position pos:line="84" pos:column="47"/></condition><then pos:line="84" pos:column="47">
          <block type="pseudo"><continue pos:line="85" pos:column="11">continue;<pos:position pos:line="85" pos:column="20"/></continue></block></then></if>
        <break pos:line="86" pos:column="9">break;<pos:position pos:line="86" pos:column="15"/></break>
      }<pos:position pos:line="87" pos:column="8"/></block></then> <elseif pos:line="87" pos:column="9">else <if pos:line="87" pos:column="14">if <condition pos:line="87" pos:column="17">(<expr><name pos:line="87" pos:column="18">len<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">==<pos:position pos:line="87" pos:column="24"/></operator> <literal type="number" pos:line="87" pos:column="25">0<pos:position pos:line="87" pos:column="26"/></literal></expr>)<pos:position pos:line="87" pos:column="27"/></condition><then pos:line="87" pos:column="27"> <block pos:line="87" pos:column="28">{
        <comment type="block" pos:line="88" pos:column="9">/* We've reached EOF */</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">NOTICE<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><literal type="string" pos:line="89" pos:column="16">"exec plugin: Program `%s' has closed STDERR."<pos:position pos:line="89" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="64">pl<pos:position pos:line="89" pos:column="66"/></name><operator pos:line="89" pos:column="66">-&gt;<pos:position pos:line="89" pos:column="71"/></operator><name pos:line="89" pos:column="68">exec<pos:position pos:line="89" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="74"/></expr_stmt>

        <comment type="block" pos:line="91" pos:column="9">/* Remove file descriptor form select() set. */</comment>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">FD_CLR<pos:position pos:line="92" pos:column="15"/></name><argument_list pos:line="92" pos:column="15">(<argument><expr><name pos:line="92" pos:column="16">fd_err<pos:position pos:line="92" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="24">&amp;<pos:position pos:line="92" pos:column="29"/></operator><name pos:line="92" pos:column="25">fdset<pos:position pos:line="92" pos:column="30"/></name></expr></argument>)<pos:position pos:line="92" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="93" pos:column="9">copy<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <name pos:line="93" pos:column="16">fdset<pos:position pos:line="93" pos:column="21"/></name></expr>;<pos:position pos:line="93" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="94" pos:column="9">highest_fd<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">=<pos:position pos:line="94" pos:column="21"/></operator> <name pos:line="94" pos:column="22">fd<pos:position pos:line="94" pos:column="24"/></name></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>

        <comment type="block" pos:line="96" pos:column="9">/* Clean up file descriptor */</comment>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">close<pos:position pos:line="97" pos:column="14"/></name><argument_list pos:line="97" pos:column="14">(<argument><expr><name pos:line="97" pos:column="15">fd_err<pos:position pos:line="97" pos:column="21"/></name></expr></argument>)<pos:position pos:line="97" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="98" pos:column="9">fd_err<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <operator pos:line="98" pos:column="18">-<pos:position pos:line="98" pos:column="19"/></operator><literal type="number" pos:line="98" pos:column="19">1<pos:position pos:line="98" pos:column="20"/></literal></expr>;<pos:position pos:line="98" pos:column="21"/></expr_stmt>
        <continue pos:line="99" pos:column="9">continue;<pos:position pos:line="99" pos:column="18"/></continue>
      }<pos:position pos:line="100" pos:column="8"/></block></then></if></elseif></if>

      <expr_stmt><expr><name><name pos:line="102" pos:column="7">pbuffer_err<pos:position pos:line="102" pos:column="18"/></name><index pos:line="102" pos:column="18">[<expr><name pos:line="102" pos:column="19">len<pos:position pos:line="102" pos:column="22"/></name></expr>]<pos:position pos:line="102" pos:column="23"/></index></name> <operator pos:line="102" pos:column="24">=<pos:position pos:line="102" pos:column="25"/></operator> <literal type="char" pos:line="102" pos:column="26">'\0'<pos:position pos:line="102" pos:column="30"/></literal></expr>;<pos:position pos:line="102" pos:column="31"/></expr_stmt>

      <expr_stmt><expr><name pos:line="104" pos:column="7">len<pos:position pos:line="104" pos:column="10"/></name> <operator pos:line="104" pos:column="11">+=<pos:position pos:line="104" pos:column="13"/></operator> <name pos:line="104" pos:column="14">pbuffer_err<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">-<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="28">buffer_err<pos:position pos:line="104" pos:column="38"/></name></expr>;<pos:position pos:line="104" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="105" pos:column="7">pbuffer_err<pos:position pos:line="105" pos:column="18"/></name> <operator pos:line="105" pos:column="19">=<pos:position pos:line="105" pos:column="20"/></operator> <name pos:line="105" pos:column="21">buffer_err<pos:position pos:line="105" pos:column="31"/></name></expr>;<pos:position pos:line="105" pos:column="32"/></expr_stmt>

      <while pos:line="107" pos:column="7">while <condition pos:line="107" pos:column="13">(<expr><operator pos:line="107" pos:column="14">(<pos:position pos:line="107" pos:column="15"/></operator><name pos:line="107" pos:column="15">pnl<pos:position pos:line="107" pos:column="18"/></name> <operator pos:line="107" pos:column="19">=<pos:position pos:line="107" pos:column="20"/></operator> <call><name pos:line="107" pos:column="21">strchr<pos:position pos:line="107" pos:column="27"/></name><argument_list pos:line="107" pos:column="27">(<argument><expr><name pos:line="107" pos:column="28">pbuffer_err<pos:position pos:line="107" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="107" pos:column="41">'\n'<pos:position pos:line="107" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="46"/></argument_list></call><operator pos:line="107" pos:column="46">)<pos:position pos:line="107" pos:column="47"/></operator></expr>)<pos:position pos:line="107" pos:column="48"/></condition> <block pos:line="107" pos:column="49">{
        <expr_stmt><expr><operator pos:line="108" pos:column="9">*<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">pnl<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <literal type="char" pos:line="108" pos:column="16">'\0'<pos:position pos:line="108" pos:column="20"/></literal></expr>;<pos:position pos:line="108" pos:column="21"/></expr_stmt>
        <if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><operator pos:line="109" pos:column="13">*<pos:position pos:line="109" pos:column="14"/></operator><operator pos:line="109" pos:column="14">(<pos:position pos:line="109" pos:column="15"/></operator><name pos:line="109" pos:column="15">pnl<pos:position pos:line="109" pos:column="18"/></name> <operator pos:line="109" pos:column="19">-<pos:position pos:line="109" pos:column="20"/></operator> <literal type="number" pos:line="109" pos:column="21">1<pos:position pos:line="109" pos:column="22"/></literal><operator pos:line="109" pos:column="22">)<pos:position pos:line="109" pos:column="23"/></operator> <operator pos:line="109" pos:column="24">==<pos:position pos:line="109" pos:column="26"/></operator> <literal type="char" pos:line="109" pos:column="27">'\r'<pos:position pos:line="109" pos:column="31"/></literal></expr>)<pos:position pos:line="109" pos:column="32"/></condition><then pos:line="109" pos:column="32">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="110" pos:column="11">*<pos:position pos:line="110" pos:column="12"/></operator><operator pos:line="110" pos:column="12">(<pos:position pos:line="110" pos:column="13"/></operator><name pos:line="110" pos:column="13">pnl<pos:position pos:line="110" pos:column="16"/></name> <operator pos:line="110" pos:column="17">-<pos:position pos:line="110" pos:column="18"/></operator> <literal type="number" pos:line="110" pos:column="19">1<pos:position pos:line="110" pos:column="20"/></literal><operator pos:line="110" pos:column="20">)<pos:position pos:line="110" pos:column="21"/></operator> <operator pos:line="110" pos:column="22">=<pos:position pos:line="110" pos:column="23"/></operator> <literal type="char" pos:line="110" pos:column="24">'\0'<pos:position pos:line="110" pos:column="28"/></literal></expr>;<pos:position pos:line="110" pos:column="29"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="112" pos:column="9">ERROR<pos:position pos:line="112" pos:column="14"/></name><argument_list pos:line="112" pos:column="14">(<argument><expr><literal type="string" pos:line="112" pos:column="15">"exec plugin: exec_read_one: error = %s"<pos:position pos:line="112" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="57">pbuffer_err<pos:position pos:line="112" pos:column="68"/></name></expr></argument>)<pos:position pos:line="112" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="70"/></expr_stmt>

        <expr_stmt><expr><name pos:line="114" pos:column="9">pbuffer_err<pos:position pos:line="114" pos:column="20"/></name> <operator pos:line="114" pos:column="21">=<pos:position pos:line="114" pos:column="22"/></operator> <operator pos:line="114" pos:column="23">++<pos:position pos:line="114" pos:column="25"/></operator><name pos:line="114" pos:column="25">pnl<pos:position pos:line="114" pos:column="28"/></name></expr>;<pos:position pos:line="114" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="115" pos:column="8"/></block></while>
      <comment type="block" pos:line="116" pos:column="7">/* not completely read ? */</comment>
      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><name pos:line="117" pos:column="11">pbuffer_err<pos:position pos:line="117" pos:column="22"/></name> <operator pos:line="117" pos:column="23">-<pos:position pos:line="117" pos:column="24"/></operator> <name pos:line="117" pos:column="25">buffer_err<pos:position pos:line="117" pos:column="35"/></name> <operator pos:line="117" pos:column="36">&lt;<pos:position pos:line="117" pos:column="40"/></operator> <name pos:line="117" pos:column="38">len<pos:position pos:line="117" pos:column="41"/></name></expr>)<pos:position pos:line="117" pos:column="42"/></condition><then pos:line="117" pos:column="42"> <block pos:line="117" pos:column="43">{
        <expr_stmt><expr><name pos:line="118" pos:column="9">len<pos:position pos:line="118" pos:column="12"/></name> <operator pos:line="118" pos:column="13">-=<pos:position pos:line="118" pos:column="15"/></operator> <name pos:line="118" pos:column="16">pbuffer_err<pos:position pos:line="118" pos:column="27"/></name> <operator pos:line="118" pos:column="28">-<pos:position pos:line="118" pos:column="29"/></operator> <name pos:line="118" pos:column="30">buffer_err<pos:position pos:line="118" pos:column="40"/></name></expr>;<pos:position pos:line="118" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">memmove<pos:position pos:line="119" pos:column="16"/></name><argument_list pos:line="119" pos:column="16">(<argument><expr><name pos:line="119" pos:column="17">buffer_err<pos:position pos:line="119" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="29">pbuffer_err<pos:position pos:line="119" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="42">len<pos:position pos:line="119" pos:column="45"/></name></expr></argument>)<pos:position pos:line="119" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="120" pos:column="9">pbuffer_err<pos:position pos:line="120" pos:column="20"/></name> <operator pos:line="120" pos:column="21">=<pos:position pos:line="120" pos:column="22"/></operator> <name pos:line="120" pos:column="23">buffer_err<pos:position pos:line="120" pos:column="33"/></name> <operator pos:line="120" pos:column="34">+<pos:position pos:line="120" pos:column="35"/></operator> <name pos:line="120" pos:column="36">len<pos:position pos:line="120" pos:column="39"/></name></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt>
      }<pos:position pos:line="121" pos:column="8"/></block></then> <else pos:line="121" pos:column="9">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="122" pos:column="9">pbuffer_err<pos:position pos:line="122" pos:column="20"/></name> <operator pos:line="122" pos:column="21">=<pos:position pos:line="122" pos:column="22"/></operator> <name pos:line="122" pos:column="23">buffer_err<pos:position pos:line="122" pos:column="33"/></name></expr>;<pos:position pos:line="122" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="124" pos:column="5">/* reset copy */</comment>
    <expr_stmt><expr><name pos:line="125" pos:column="5">copy<pos:position pos:line="125" pos:column="9"/></name> <operator pos:line="125" pos:column="10">=<pos:position pos:line="125" pos:column="11"/></operator> <name pos:line="125" pos:column="12">fdset<pos:position pos:line="125" pos:column="17"/></name></expr>;<pos:position pos:line="125" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="126" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="128" pos:column="3">DEBUG<pos:position pos:line="128" pos:column="8"/></name><argument_list pos:line="128" pos:column="8">(<argument><expr><literal type="string" pos:line="128" pos:column="9">"exec plugin: exec_read_one: Waiting for `%s' to exit."<pos:position pos:line="128" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="66">pl<pos:position pos:line="128" pos:column="68"/></name><operator pos:line="128" pos:column="68">-&gt;<pos:position pos:line="128" pos:column="73"/></operator><name pos:line="128" pos:column="70">exec<pos:position pos:line="128" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="76"/></expr_stmt>
  <if pos:line="129" pos:column="3">if <condition pos:line="129" pos:column="6">(<expr><call><name pos:line="129" pos:column="7">waitpid<pos:position pos:line="129" pos:column="14"/></name><argument_list pos:line="129" pos:column="14">(<argument><expr><name><name pos:line="129" pos:column="15">pl<pos:position pos:line="129" pos:column="17"/></name><operator pos:line="129" pos:column="17">-&gt;<pos:position pos:line="129" pos:column="22"/></operator><name pos:line="129" pos:column="19">pid<pos:position pos:line="129" pos:column="22"/></name></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="24">&amp;<pos:position pos:line="129" pos:column="29"/></operator><name pos:line="129" pos:column="25">status<pos:position pos:line="129" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="129" pos:column="33">0<pos:position pos:line="129" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="35"/></argument_list></call> <operator pos:line="129" pos:column="36">&gt;<pos:position pos:line="129" pos:column="40"/></operator> <literal type="number" pos:line="129" pos:column="38">0<pos:position pos:line="129" pos:column="39"/></literal></expr>)<pos:position pos:line="129" pos:column="40"/></condition><then pos:line="129" pos:column="40">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="130" pos:column="5">pl<pos:position pos:line="130" pos:column="7"/></name><operator pos:line="130" pos:column="7">-&gt;<pos:position pos:line="130" pos:column="12"/></operator><name pos:line="130" pos:column="9">status<pos:position pos:line="130" pos:column="15"/></name></name> <operator pos:line="130" pos:column="16">=<pos:position pos:line="130" pos:column="17"/></operator> <name pos:line="130" pos:column="18">status<pos:position pos:line="130" pos:column="24"/></name></expr>;<pos:position pos:line="130" pos:column="25"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="132" pos:column="3">DEBUG<pos:position pos:line="132" pos:column="8"/></name><argument_list pos:line="132" pos:column="8">(<argument><expr><literal type="string" pos:line="132" pos:column="9">"exec plugin: Child %i exited with status %i."<pos:position pos:line="132" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="132" pos:column="57">(<pos:position pos:line="132" pos:column="58"/></operator><name pos:line="132" pos:column="58">int<pos:position pos:line="132" pos:column="61"/></name><operator pos:line="132" pos:column="61">)<pos:position pos:line="132" pos:column="62"/></operator><name><name pos:line="132" pos:column="62">pl<pos:position pos:line="132" pos:column="64"/></name><operator pos:line="132" pos:column="64">-&gt;<pos:position pos:line="132" pos:column="69"/></operator><name pos:line="132" pos:column="66">pid<pos:position pos:line="132" pos:column="69"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="133" pos:column="9">pl<pos:position pos:line="133" pos:column="11"/></name><operator pos:line="133" pos:column="11">-&gt;<pos:position pos:line="133" pos:column="16"/></operator><name pos:line="133" pos:column="13">status<pos:position pos:line="133" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="135" pos:column="3">pl<pos:position pos:line="135" pos:column="5"/></name><operator pos:line="135" pos:column="5">-&gt;<pos:position pos:line="135" pos:column="10"/></operator><name pos:line="135" pos:column="7">pid<pos:position pos:line="135" pos:column="10"/></name></name> <operator pos:line="135" pos:column="11">=<pos:position pos:line="135" pos:column="12"/></operator> <literal type="number" pos:line="135" pos:column="13">0<pos:position pos:line="135" pos:column="14"/></literal></expr>;<pos:position pos:line="135" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="137" pos:column="3">pthread_mutex_lock<pos:position pos:line="137" pos:column="21"/></name><argument_list pos:line="137" pos:column="21">(<argument><expr><operator pos:line="137" pos:column="22">&amp;<pos:position pos:line="137" pos:column="27"/></operator><name pos:line="137" pos:column="23">pl_lock<pos:position pos:line="137" pos:column="30"/></name></expr></argument>)<pos:position pos:line="137" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="138" pos:column="3">pl<pos:position pos:line="138" pos:column="5"/></name><operator pos:line="138" pos:column="5">-&gt;<pos:position pos:line="138" pos:column="10"/></operator><name pos:line="138" pos:column="7">flags<pos:position pos:line="138" pos:column="12"/></name></name> <operator pos:line="138" pos:column="13">&amp;=<pos:position pos:line="138" pos:column="19"/></operator> <operator pos:line="138" pos:column="16">~<pos:position pos:line="138" pos:column="17"/></operator><name pos:line="138" pos:column="17">PL_RUNNING<pos:position pos:line="138" pos:column="27"/></name></expr>;<pos:position pos:line="138" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="139" pos:column="3">pthread_mutex_unlock<pos:position pos:line="139" pos:column="23"/></name><argument_list pos:line="139" pos:column="23">(<argument><expr><operator pos:line="139" pos:column="24">&amp;<pos:position pos:line="139" pos:column="29"/></operator><name pos:line="139" pos:column="25">pl_lock<pos:position pos:line="139" pos:column="32"/></name></expr></argument>)<pos:position pos:line="139" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="141" pos:column="3">close<pos:position pos:line="141" pos:column="8"/></name><argument_list pos:line="141" pos:column="8">(<argument><expr><name pos:line="141" pos:column="9">fd<pos:position pos:line="141" pos:column="11"/></name></expr></argument>)<pos:position pos:line="141" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="13"/></expr_stmt>
  <if pos:line="142" pos:column="3">if <condition pos:line="142" pos:column="6">(<expr><name pos:line="142" pos:column="7">fd_err<pos:position pos:line="142" pos:column="13"/></name> <operator pos:line="142" pos:column="14">&gt;=<pos:position pos:line="142" pos:column="19"/></operator> <literal type="number" pos:line="142" pos:column="17">0<pos:position pos:line="142" pos:column="18"/></literal></expr>)<pos:position pos:line="142" pos:column="19"/></condition><then pos:line="142" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="5">close<pos:position pos:line="143" pos:column="10"/></name><argument_list pos:line="143" pos:column="10">(<argument><expr><name pos:line="143" pos:column="11">fd_err<pos:position pos:line="143" pos:column="17"/></name></expr></argument>)<pos:position pos:line="143" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="19"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="145" pos:column="3">pthread_exit<pos:position pos:line="145" pos:column="15"/></name><argument_list pos:line="145" pos:column="15">(<argument><expr><operator pos:line="145" pos:column="16">(<pos:position pos:line="145" pos:column="17"/></operator><name pos:line="145" pos:column="17">void<pos:position pos:line="145" pos:column="21"/></name> <operator pos:line="145" pos:column="22">*<pos:position pos:line="145" pos:column="23"/></operator><operator pos:line="145" pos:column="23">)<pos:position pos:line="145" pos:column="24"/></operator><literal type="number" pos:line="145" pos:column="24">0<pos:position pos:line="145" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="27"/></expr_stmt>
  <return pos:line="146" pos:column="3">return <expr><name pos:line="146" pos:column="10">NULL<pos:position pos:line="146" pos:column="14"/></name></expr>;<pos:position pos:line="146" pos:column="15"/></return>
}<pos:position pos:line="147" pos:column="2"/></block></function></unit>
