<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_799_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_ether<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">u_char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">pkt<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">buf<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><name pos:line="2" pos:column="12">PCAP_SNAPLEN<pos:position pos:line="2" pos:column="24"/></name></expr>]<pos:position pos:line="2" pos:column="25"/></index></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ether_header<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">e<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><operator pos:line="3" pos:column="28">(<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">void<pos:position pos:line="3" pos:column="33"/></name> <operator pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></operator><operator pos:line="3" pos:column="35">)<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="36">pkt<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">short<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">etype<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">ntohs<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name><name pos:line="4" pos:column="32">e<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">ether_type<pos:position pos:line="4" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">len<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">&lt;<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="13">ETHER_HDR_LEN<pos:position pos:line="5" pos:column="26"/></name></expr>)<pos:position pos:line="5" pos:column="27"/></condition><then pos:line="5" pos:column="27">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="7" pos:column="3">pkt<pos:position pos:line="7" pos:column="6"/></name> <operator pos:line="7" pos:column="7">+=<pos:position pos:line="7" pos:column="9"/></operator> <name pos:line="7" pos:column="10">ETHER_HDR_LEN<pos:position pos:line="7" pos:column="23"/></name></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">len<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">-=<pos:position pos:line="8" pos:column="9"/></operator> <name pos:line="8" pos:column="10">ETHER_HDR_LEN<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">ETHERTYPE_8021Q<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">==<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">etype<pos:position pos:line="9" pos:column="31"/></name></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <block pos:line="9" pos:column="33">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">etype<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">ntohs<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><operator pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></operator><operator pos:line="10" pos:column="20">(<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">unsigned<pos:position pos:line="10" pos:column="29"/></name> <name pos:line="10" pos:column="30">short<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></operator><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator><operator pos:line="10" pos:column="38">(<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">pkt<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">+<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="45">2<pos:position pos:line="10" pos:column="46"/></literal><operator pos:line="10" pos:column="46">)<pos:position pos:line="10" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">pkt<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">+=<pos:position pos:line="11" pos:column="11"/></operator> <literal type="number" pos:line="11" pos:column="12">4<pos:position pos:line="11" pos:column="13"/></literal></expr>;<pos:position pos:line="11" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">len<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">-=<pos:position pos:line="12" pos:column="11"/></operator> <literal type="number" pos:line="12" pos:column="12">4<pos:position pos:line="12" pos:column="13"/></literal></expr>;<pos:position pos:line="12" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">(<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">ETHERTYPE_IP<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">!=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">etype<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator> <operator pos:line="14" pos:column="31">&amp;&amp;<pos:position pos:line="14" pos:column="41"/></operator> <operator pos:line="14" pos:column="34">(<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">ETHERTYPE_IPV6<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">!=<pos:position pos:line="14" pos:column="52"/></operator> <name pos:line="14" pos:column="53">etype<pos:position pos:line="14" pos:column="58"/></name><operator pos:line="14" pos:column="58">)<pos:position pos:line="14" pos:column="59"/></operator></expr>)<pos:position pos:line="14" pos:column="60"/></condition><then pos:line="14" pos:column="60">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>;<pos:position pos:line="15" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">memcpy<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><name pos:line="16" pos:column="10">buf<pos:position pos:line="16" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="15">pkt<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">len<pos:position pos:line="16" pos:column="23"/></name></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">ETHERTYPE_IPV6<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">==<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">etype<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><call><name pos:line="18" pos:column="13">handle_ipv6<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">(<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">void<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></operator><operator pos:line="18" pos:column="32">)<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">buf<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">len<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator></expr>;<pos:position pos:line="18" pos:column="44"/></return></block></then>
  <else pos:line="19" pos:column="3">else
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><call><name pos:line="20" pos:column="12">handle_ip<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">(<pos:position pos:line="20" pos:column="23"/></operator>struct <name pos:line="20" pos:column="30">ip<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">*<pos:position pos:line="20" pos:column="34"/></operator><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">buf<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">len<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></return></block></else></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
