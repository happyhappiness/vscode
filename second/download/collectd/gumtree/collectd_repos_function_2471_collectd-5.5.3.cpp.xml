<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2471_collectd-5.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_dispatch_multivalue<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">value_list_t<pos:position pos:line="1" pos:column="45"/></name> <specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><parameter><decl><type><specifier pos:line="1" pos:column="53">template<pos:position pos:line="1" pos:column="61"/></specifier></type></decl></parameter></decl></parameter>, <comment type="block" pos:line="1" pos:column="63">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">_Bool<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">store_percentage<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">store_type<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="57">...<pos:position pos:line="2" pos:column="60"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">value_list_t<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">vl<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">failed<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">gauge_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">sum<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0.0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">va_list<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">ap<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<macro><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name> <argument_list pos:line="9" pos:column="16">(<argument pos:line="9" pos:column="17">template-&gt;values_len == <literal type="number" pos:line="9" pos:column="41">1<pos:position pos:line="9" pos:column="42"/></literal></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></macro><empty_stmt pos:line="9" pos:column="43">;<pos:position pos:line="9" pos:column="44"/></empty_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Calculate sum for Gauge to calculate percent if needed */</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">DS_TYPE_GAUGE<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">==<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">store_type<pos:position pos:line="12" pos:column="40"/></name></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">	<block pos:line="12" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">va_start<pos:position pos:line="13" pos:column="25"/></name> <argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">ap<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">store_type<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><literal type="number" pos:line="14" pos:column="24">42<pos:position pos:line="14" pos:column="26"/></literal></expr>)<pos:position pos:line="14" pos:column="27"/></condition>
		<block pos:line="15" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">char<pos:position pos:line="16" pos:column="29"/></name> <specifier pos:line="16" pos:column="30">const<pos:position pos:line="16" pos:column="35"/></specifier> <modifier pos:line="16" pos:column="36">*<pos:position pos:line="16" pos:column="37"/></modifier></type><name pos:line="16" pos:column="37">name<pos:position pos:line="16" pos:column="41"/></name></decl>;<pos:position pos:line="16" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">gauge_t<pos:position pos:line="17" pos:column="32"/></name></type> <name pos:line="17" pos:column="33">value<pos:position pos:line="17" pos:column="38"/></name></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>

			<expr_stmt><expr><name pos:line="19" pos:column="25">name<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <call><name pos:line="19" pos:column="32">va_arg<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">ap<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">char<pos:position pos:line="19" pos:column="48"/></name> <specifier pos:line="19" pos:column="49">const<pos:position pos:line="19" pos:column="54"/></specifier> <operator pos:line="19" pos:column="55">*<pos:position pos:line="19" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">name<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">==<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">NULL<pos:position pos:line="20" pos:column="41"/></name></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42">
				<block type="pseudo"><break pos:line="21" pos:column="33">break;<pos:position pos:line="21" pos:column="39"/></break></block></then></if>

			<expr_stmt><expr><name pos:line="23" pos:column="25">value<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">=<pos:position pos:line="23" pos:column="32"/></operator> <call><name pos:line="23" pos:column="33">va_arg<pos:position pos:line="23" pos:column="39"/></name> <argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">ap<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">gauge_t<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><operator pos:line="24" pos:column="29">!<pos:position pos:line="24" pos:column="30"/></operator><call><name pos:line="24" pos:column="30">isnan<pos:position pos:line="24" pos:column="35"/></name> <argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">value<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="33">sum<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">+=<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">value<pos:position pos:line="25" pos:column="45"/></name></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt></block></then></if>
		}<pos:position pos:line="26" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">va_end<pos:position pos:line="27" pos:column="23"/></name> <argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">ap<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>


	<expr_stmt><expr><name pos:line="31" pos:column="9">vl<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <macro><name pos:line="31" pos:column="14">plugin_value_list_clone<pos:position pos:line="31" pos:column="37"/></name> <argument_list pos:line="31" pos:column="38">(<argument pos:line="31" pos:column="39">template<pos:position pos:line="31" pos:column="47"/></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></macro></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
	<comment type="block" pos:line="32" pos:column="9">/* plugin_value_list_clone makes sure vl-&gt;time is set to non-zero. */</comment>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">store_percentage<pos:position pos:line="33" pos:column="29"/></name></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">sstrncpy<pos:position pos:line="34" pos:column="25"/></name> <argument_list pos:line="34" pos:column="26">(<argument><expr><name><name pos:line="34" pos:column="27">vl<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">-&gt;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="31">type<pos:position pos:line="34" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="37">"percent"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="48">sizeof <argument_list pos:line="34" pos:column="55">(<argument><expr><name><name pos:line="34" pos:column="56">vl<pos:position pos:line="34" pos:column="58"/></name><operator pos:line="34" pos:column="58">-&gt;<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="60">type<pos:position pos:line="34" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">va_start<pos:position pos:line="36" pos:column="17"/></name> <argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">ap<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="23">store_type<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt>
	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><literal type="number" pos:line="37" pos:column="16">42<pos:position pos:line="37" pos:column="18"/></literal></expr>)<pos:position pos:line="37" pos:column="19"/></condition>
	<block pos:line="38" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">char<pos:position pos:line="39" pos:column="21"/></name> <specifier pos:line="39" pos:column="22">const<pos:position pos:line="39" pos:column="27"/></specifier> <modifier pos:line="39" pos:column="28">*<pos:position pos:line="39" pos:column="29"/></modifier></type><name pos:line="39" pos:column="29">name<pos:position pos:line="39" pos:column="33"/></name></decl>;<pos:position pos:line="39" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type> <name pos:line="40" pos:column="21">status<pos:position pos:line="40" pos:column="27"/></name></decl>;<pos:position pos:line="40" pos:column="28"/></decl_stmt>

		<comment type="block" pos:line="42" pos:column="17">/* Set the type instance. */</comment>
		<expr_stmt><expr><name pos:line="43" pos:column="17">name<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <call><name pos:line="43" pos:column="24">va_arg<pos:position pos:line="43" pos:column="30"/></name> <argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">ap<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">char<pos:position pos:line="43" pos:column="40"/></name> <specifier pos:line="43" pos:column="41">const<pos:position pos:line="43" pos:column="46"/></specifier> <operator pos:line="43" pos:column="47">*<pos:position pos:line="43" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">name<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">==<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">NULL<pos:position pos:line="44" pos:column="33"/></name></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34">
			<block type="pseudo"><break pos:line="45" pos:column="25">break;<pos:position pos:line="45" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">sstrncpy<pos:position pos:line="46" pos:column="25"/></name> <argument_list pos:line="46" pos:column="26">(<argument><expr><name><name pos:line="46" pos:column="27">vl<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">type_instance<pos:position pos:line="46" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="46">name<pos:position pos:line="46" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="52">sizeof <argument_list pos:line="46" pos:column="59">(<argument><expr><name><name pos:line="46" pos:column="60">vl<pos:position pos:line="46" pos:column="62"/></name><operator pos:line="46" pos:column="62">-&gt;<pos:position pos:line="46" pos:column="67"/></operator><name pos:line="46" pos:column="64">type_instance<pos:position pos:line="46" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="80"/></expr_stmt>

		<comment type="block" pos:line="48" pos:column="17">/* Set the value. */</comment>
		<switch pos:line="49" pos:column="17">switch <condition pos:line="49" pos:column="24">(<expr><name pos:line="49" pos:column="25">store_type<pos:position pos:line="49" pos:column="35"/></name></expr>)<pos:position pos:line="49" pos:column="36"/></condition>
		<block pos:line="50" pos:column="17">{
		<case pos:line="51" pos:column="17">case <expr><name pos:line="51" pos:column="22">DS_TYPE_GAUGE<pos:position pos:line="51" pos:column="35"/></name></expr>:<pos:position pos:line="51" pos:column="36"/></case>
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">vl<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">values<pos:position pos:line="52" pos:column="35"/></name><index pos:line="52" pos:column="35">[<expr><literal type="number" pos:line="52" pos:column="36">0<pos:position pos:line="52" pos:column="37"/></literal></expr>]<pos:position pos:line="52" pos:column="38"/></index></name><operator pos:line="52" pos:column="38">.<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="39">gauge<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">=<pos:position pos:line="52" pos:column="46"/></operator> <call><name pos:line="52" pos:column="47">va_arg<pos:position pos:line="52" pos:column="53"/></name> <argument_list pos:line="52" pos:column="54">(<argument><expr><name pos:line="52" pos:column="55">ap<pos:position pos:line="52" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="59">gauge_t<pos:position pos:line="52" pos:column="66"/></name></expr></argument>)<pos:position pos:line="52" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="68"/></expr_stmt>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">store_percentage<pos:position pos:line="53" pos:column="45"/></name></expr>)<pos:position pos:line="53" pos:column="46"/></condition><then pos:line="53" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="33">vl<pos:position pos:line="54" pos:column="35"/></name><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">values<pos:position pos:line="54" pos:column="43"/></name><index pos:line="54" pos:column="43">[<expr><literal type="number" pos:line="54" pos:column="44">0<pos:position pos:line="54" pos:column="45"/></literal></expr>]<pos:position pos:line="54" pos:column="46"/></index></name><operator pos:line="54" pos:column="46">.<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="47">gauge<pos:position pos:line="54" pos:column="52"/></name> <operator pos:line="54" pos:column="53">*=<pos:position pos:line="54" pos:column="55"/></operator> <ternary><condition><expr><name pos:line="54" pos:column="56">sum<pos:position pos:line="54" pos:column="59"/></name></expr> ?<pos:position pos:line="54" pos:column="61"/></condition><then pos:line="54" pos:column="61"> <expr><operator pos:line="54" pos:column="62">(<pos:position pos:line="54" pos:column="63"/></operator><literal type="number" pos:line="54" pos:column="63">100.0<pos:position pos:line="54" pos:column="68"/></literal> <operator pos:line="54" pos:column="69">/<pos:position pos:line="54" pos:column="70"/></operator> <name pos:line="54" pos:column="71">sum<pos:position pos:line="54" pos:column="74"/></name><operator pos:line="54" pos:column="74">)<pos:position pos:line="54" pos:column="75"/></operator></expr> <pos:position pos:line="54" pos:column="76"/></then><else pos:line="54" pos:column="76">: <expr><name pos:line="54" pos:column="78">NAN<pos:position pos:line="54" pos:column="81"/></name></expr></else></ternary></expr>;<pos:position pos:line="54" pos:column="82"/></expr_stmt></block></then></if>
			<break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break>
		<case pos:line="56" pos:column="17">case <expr><name pos:line="56" pos:column="22">DS_TYPE_ABSOLUTE<pos:position pos:line="56" pos:column="38"/></name></expr>:<pos:position pos:line="56" pos:column="39"/></case>
			<expr_stmt><expr><name><name pos:line="57" pos:column="25">vl<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">values<pos:position pos:line="57" pos:column="35"/></name><index pos:line="57" pos:column="35">[<expr><literal type="number" pos:line="57" pos:column="36">0<pos:position pos:line="57" pos:column="37"/></literal></expr>]<pos:position pos:line="57" pos:column="38"/></index></name><operator pos:line="57" pos:column="38">.<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="39">absolute<pos:position pos:line="57" pos:column="47"/></name> <operator pos:line="57" pos:column="48">=<pos:position pos:line="57" pos:column="49"/></operator> <call><name pos:line="57" pos:column="50">va_arg<pos:position pos:line="57" pos:column="56"/></name> <argument_list pos:line="57" pos:column="57">(<argument><expr><name pos:line="57" pos:column="58">ap<pos:position pos:line="57" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="62">absolute_t<pos:position pos:line="57" pos:column="72"/></name></expr></argument>)<pos:position pos:line="57" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="74"/></expr_stmt>
			<break pos:line="58" pos:column="25">break;<pos:position pos:line="58" pos:column="31"/></break>
		<case pos:line="59" pos:column="17">case <expr><name pos:line="59" pos:column="22">DS_TYPE_COUNTER<pos:position pos:line="59" pos:column="37"/></name></expr>:<pos:position pos:line="59" pos:column="38"/></case>
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">vl<pos:position pos:line="60" pos:column="27"/></name><operator pos:line="60" pos:column="27">-&gt;<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="29">values<pos:position pos:line="60" pos:column="35"/></name><index pos:line="60" pos:column="35">[<expr><literal type="number" pos:line="60" pos:column="36">0<pos:position pos:line="60" pos:column="37"/></literal></expr>]<pos:position pos:line="60" pos:column="38"/></index></name><operator pos:line="60" pos:column="38">.<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="39">counter<pos:position pos:line="60" pos:column="46"/></name>  <operator pos:line="60" pos:column="48">=<pos:position pos:line="60" pos:column="49"/></operator> <call><name pos:line="60" pos:column="50">va_arg<pos:position pos:line="60" pos:column="56"/></name> <argument_list pos:line="60" pos:column="57">(<argument><expr><name pos:line="60" pos:column="58">ap<pos:position pos:line="60" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="62">counter_t<pos:position pos:line="60" pos:column="71"/></name></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="73"/></expr_stmt>
			<break pos:line="61" pos:column="25">break;<pos:position pos:line="61" pos:column="31"/></break>
		<case pos:line="62" pos:column="17">case <expr><name pos:line="62" pos:column="22">DS_TYPE_DERIVE<pos:position pos:line="62" pos:column="36"/></name></expr>:<pos:position pos:line="62" pos:column="37"/></case>
			<expr_stmt><expr><name><name pos:line="63" pos:column="25">vl<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">values<pos:position pos:line="63" pos:column="35"/></name><index pos:line="63" pos:column="35">[<expr><literal type="number" pos:line="63" pos:column="36">0<pos:position pos:line="63" pos:column="37"/></literal></expr>]<pos:position pos:line="63" pos:column="38"/></index></name><operator pos:line="63" pos:column="38">.<pos:position pos:line="63" pos:column="39"/></operator><name pos:line="63" pos:column="39">derive<pos:position pos:line="63" pos:column="45"/></name>   <operator pos:line="63" pos:column="48">=<pos:position pos:line="63" pos:column="49"/></operator> <call><name pos:line="63" pos:column="50">va_arg<pos:position pos:line="63" pos:column="56"/></name> <argument_list pos:line="63" pos:column="57">(<argument><expr><name pos:line="63" pos:column="58">ap<pos:position pos:line="63" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="62">derive_t<pos:position pos:line="63" pos:column="70"/></name></expr></argument>)<pos:position pos:line="63" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="72"/></expr_stmt>
			<break pos:line="64" pos:column="25">break;<pos:position pos:line="64" pos:column="31"/></break>
		<default pos:line="65" pos:column="17">default:<pos:position pos:line="65" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">ERROR<pos:position pos:line="66" pos:column="30"/></name> <argument_list pos:line="66" pos:column="31">(<argument><expr><literal type="string" pos:line="66" pos:column="32">"plugin_dispatch_multivalue: given store_type is incorrect."<pos:position pos:line="66" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="94"/></expr_stmt>
			<expr_stmt><expr><name pos:line="67" pos:column="25">failed<pos:position pos:line="67" pos:column="31"/></name><operator pos:line="67" pos:column="31">++<pos:position pos:line="67" pos:column="33"/></operator></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="68" pos:column="18"/></block></switch>


		<expr_stmt><expr><name pos:line="71" pos:column="17">status<pos:position pos:line="71" pos:column="23"/></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <call><name pos:line="71" pos:column="26">plugin_write_enqueue<pos:position pos:line="71" pos:column="46"/></name> <argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">vl<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">status<pos:position pos:line="72" pos:column="27"/></name> <operator pos:line="72" pos:column="28">!=<pos:position pos:line="72" pos:column="30"/></operator> <literal type="number" pos:line="72" pos:column="31">0<pos:position pos:line="72" pos:column="32"/></literal></expr>)<pos:position pos:line="72" pos:column="33"/></condition><then pos:line="72" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="25">failed<pos:position pos:line="73" pos:column="31"/></name><operator pos:line="73" pos:column="31">++<pos:position pos:line="73" pos:column="33"/></operator></expr>;<pos:position pos:line="73" pos:column="34"/></expr_stmt></block></then></if>
	}<pos:position pos:line="74" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">va_end<pos:position pos:line="75" pos:column="15"/></name> <argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">ap<pos:position pos:line="75" pos:column="19"/></name></expr></argument>)<pos:position pos:line="75" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="77" pos:column="9">plugin_value_list_free<pos:position pos:line="77" pos:column="31"/></name> <argument_list pos:line="77" pos:column="32">(<argument><expr><name pos:line="77" pos:column="33">vl<pos:position pos:line="77" pos:column="35"/></name></expr></argument>)<pos:position pos:line="77" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="37"/></expr_stmt>
	<return pos:line="78" pos:column="9">return <expr><operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="17">failed<pos:position pos:line="78" pos:column="23"/></name><operator pos:line="78" pos:column="23">)<pos:position pos:line="78" pos:column="24"/></operator></expr>;<pos:position pos:line="78" pos:column="25"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
