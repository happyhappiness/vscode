<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_523_collectd-4.9.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">smalloc<pos:position pos:line="1" pos:column="14"/></name> <parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">size_t<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">size<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">r<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">(<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">r<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <call><name pos:line="5" pos:column="18">malloc<pos:position pos:line="5" pos:column="24"/></name> <argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">size<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call><operator pos:line="5" pos:column="31">)<pos:position pos:line="5" pos:column="32"/></operator> <operator pos:line="5" pos:column="33">==<pos:position pos:line="5" pos:column="35"/></operator> <name pos:line="5" pos:column="36">NULL<pos:position pos:line="5" pos:column="40"/></name></expr>)<pos:position pos:line="5" pos:column="41"/></condition><then pos:line="5" pos:column="41">
	<block pos:line="6" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">ERROR<pos:position pos:line="7" pos:column="22"/></name> <argument_list pos:line="7" pos:column="23">(<argument><expr><literal type="string" pos:line="7" pos:column="24">"Not enough memory."<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">exit<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><literal type="number" pos:line="8" pos:column="23">3<pos:position pos:line="8" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<return pos:line="11" pos:column="9">return <expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">r<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator></expr>;<pos:position pos:line="11" pos:column="20"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
