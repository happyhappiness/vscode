<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1974_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_write_callback<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">data_set_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">ds<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">value_list_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">value_list<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="3" pos:column="31">user_data_t<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">data<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="49"/></parameter_list> <block pos:line="3" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cpy_callback_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">c<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name><name pos:line="4" pos:column="23">data<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">data<pos:position pos:line="4" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">PyObject<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>, <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="19">list<pos:position pos:line="5" pos:column="23"/></name></decl>, <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="26">temp<pos:position pos:line="5" pos:column="30"/></name></decl>, <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="33">dict<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">NULL<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">Values<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">v<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CPY_LOCK_THREADS<pos:position pos:line="8" pos:column="19"/></name></type>
  <name pos:line="9" pos:column="3">list<pos:position pos:line="9" pos:column="7"/></name> <init pos:line="9" pos:column="8">= <expr><call><name pos:line="9" pos:column="10">PyList_New<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name><name pos:line="9" pos:column="21">value_list<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">values_len<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt> <comment type="block" pos:line="9" pos:column="46">/* New reference. */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">list<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">==<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">NULL<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20"> <block pos:line="10" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">cpy_log_exception<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"write callback"<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">CPY_RETURN_FROM_THREADS<pos:position pos:line="12" pos:column="28"/></name> <literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><decl><type><name pos:line="14" pos:column="8">size_t<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">i<pos:position pos:line="14" pos:column="16"/></name> <init pos:line="14" pos:column="17">= <expr><literal type="number" pos:line="14" pos:column="19">0<pos:position pos:line="14" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="21"/></init> <condition><expr><name pos:line="14" pos:column="22">i<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">&lt;<pos:position pos:line="14" pos:column="28"/></operator> <name><name pos:line="14" pos:column="26">value_list<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">values_len<pos:position pos:line="14" pos:column="48"/></name></name></expr>;<pos:position pos:line="14" pos:column="49"/></condition> <incr><expr><operator pos:line="14" pos:column="50">++<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="52">i<pos:position pos:line="14" pos:column="53"/></name></expr></incr>)<pos:position pos:line="14" pos:column="54"/></control> <block pos:line="14" pos:column="55">{
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">ds<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">ds<pos:position pos:line="15" pos:column="15"/></name><index pos:line="15" pos:column="15">[<expr><name pos:line="15" pos:column="16">i<pos:position pos:line="15" pos:column="17"/></name></expr>]<pos:position pos:line="15" pos:column="18"/></index></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">type<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">DS_TYPE_COUNTER<pos:position pos:line="15" pos:column="42"/></name></expr>)<pos:position pos:line="15" pos:column="43"/></condition><then pos:line="15" pos:column="43"> <block pos:line="15" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">PyList_SetItem<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(
          <argument><expr><name pos:line="17" pos:column="11">list<pos:position pos:line="17" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="17">i<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="20">PyLong_FromUnsignedLongLong<pos:position pos:line="17" pos:column="47"/></name><argument_list pos:line="17" pos:column="47">(<argument><expr><name><name pos:line="17" pos:column="48">value_list<pos:position pos:line="17" pos:column="58"/></name><operator pos:line="17" pos:column="58">-&gt;<pos:position pos:line="17" pos:column="63"/></operator><name pos:line="17" pos:column="60">values<pos:position pos:line="17" pos:column="66"/></name><index pos:line="17" pos:column="66">[<expr><name pos:line="17" pos:column="67">i<pos:position pos:line="17" pos:column="68"/></name></expr>]<pos:position pos:line="17" pos:column="69"/></index></name><operator pos:line="17" pos:column="69">.<pos:position pos:line="17" pos:column="70"/></operator><name pos:line="17" pos:column="70">counter<pos:position pos:line="17" pos:column="77"/></name></expr></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <elseif pos:line="18" pos:column="7">else <if pos:line="18" pos:column="12">if <condition pos:line="18" pos:column="15">(<expr><name><name pos:line="18" pos:column="16">ds<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">ds<pos:position pos:line="18" pos:column="22"/></name><index pos:line="18" pos:column="22">[<expr><name pos:line="18" pos:column="23">i<pos:position pos:line="18" pos:column="24"/></name></expr>]<pos:position pos:line="18" pos:column="25"/></index></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">type<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">DS_TYPE_GAUGE<pos:position pos:line="18" pos:column="47"/></name></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48"> <block pos:line="18" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">PyList_SetItem<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">list<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">i<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="31">PyFloat_FromDouble<pos:position pos:line="19" pos:column="49"/></name><argument_list pos:line="19" pos:column="49">(<argument><expr><name><name pos:line="19" pos:column="50">value_list<pos:position pos:line="19" pos:column="60"/></name><operator pos:line="19" pos:column="60">-&gt;<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="62">values<pos:position pos:line="19" pos:column="68"/></name><index pos:line="19" pos:column="68">[<expr><name pos:line="19" pos:column="69">i<pos:position pos:line="19" pos:column="70"/></name></expr>]<pos:position pos:line="19" pos:column="71"/></index></name><operator pos:line="19" pos:column="71">.<pos:position pos:line="19" pos:column="72"/></operator><name pos:line="19" pos:column="72">gauge<pos:position pos:line="19" pos:column="77"/></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if></elseif> <elseif pos:line="20" pos:column="7">else <if pos:line="20" pos:column="12">if <condition pos:line="20" pos:column="15">(<expr><name><name pos:line="20" pos:column="16">ds<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">ds<pos:position pos:line="20" pos:column="22"/></name><index pos:line="20" pos:column="22">[<expr><name pos:line="20" pos:column="23">i<pos:position pos:line="20" pos:column="24"/></name></expr>]<pos:position pos:line="20" pos:column="25"/></index></name><operator pos:line="20" pos:column="25">.<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">type<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">==<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">DS_TYPE_DERIVE<pos:position pos:line="20" pos:column="48"/></name></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49"> <block pos:line="20" pos:column="50">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">PyList_SetItem<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">list<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">i<pos:position pos:line="21" pos:column="29"/></name></expr></argument>,
                     <argument><expr><call><name pos:line="22" pos:column="22">PyLong_FromLongLong<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name><name pos:line="22" pos:column="42">value_list<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">values<pos:position pos:line="22" pos:column="60"/></name><index pos:line="22" pos:column="60">[<expr><name pos:line="22" pos:column="61">i<pos:position pos:line="22" pos:column="62"/></name></expr>]<pos:position pos:line="22" pos:column="63"/></index></name><operator pos:line="22" pos:column="63">.<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="64">derive<pos:position pos:line="22" pos:column="70"/></name></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><name><name pos:line="23" pos:column="16">ds<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">ds<pos:position pos:line="23" pos:column="22"/></name><index pos:line="23" pos:column="22">[<expr><name pos:line="23" pos:column="23">i<pos:position pos:line="23" pos:column="24"/></name></expr>]<pos:position pos:line="23" pos:column="25"/></index></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">type<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">DS_TYPE_ABSOLUTE<pos:position pos:line="23" pos:column="50"/></name></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51"> <block pos:line="23" pos:column="52">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">PyList_SetItem<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(
          <argument><expr><name pos:line="25" pos:column="11">list<pos:position pos:line="25" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="17">i<pos:position pos:line="25" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="20">PyLong_FromUnsignedLongLong<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name><name pos:line="25" pos:column="48">value_list<pos:position pos:line="25" pos:column="58"/></name><operator pos:line="25" pos:column="58">-&gt;<pos:position pos:line="25" pos:column="63"/></operator><name pos:line="25" pos:column="60">values<pos:position pos:line="25" pos:column="66"/></name><index pos:line="25" pos:column="66">[<expr><name pos:line="25" pos:column="67">i<pos:position pos:line="25" pos:column="68"/></name></expr>]<pos:position pos:line="25" pos:column="69"/></index></name><operator pos:line="25" pos:column="69">.<pos:position pos:line="25" pos:column="70"/></operator><name pos:line="25" pos:column="70">absolute<pos:position pos:line="25" pos:column="78"/></name></expr></argument>)<pos:position pos:line="25" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if></elseif> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">Py_BEGIN_ALLOW_THREADS<pos:position pos:line="27" pos:column="29"/></name></type> <name pos:line="27" pos:column="30">ERROR<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><literal type="string" pos:line="27" pos:column="36">"cpy_write_callback: Unknown value type %d."<pos:position pos:line="27" pos:column="80"/></literal></expr></argument>,
                                   <argument><expr><name><name pos:line="28" pos:column="36">ds<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">ds<pos:position pos:line="28" pos:column="42"/></name><index pos:line="28" pos:column="42">[<expr><name pos:line="28" pos:column="43">i<pos:position pos:line="28" pos:column="44"/></name></expr>]<pos:position pos:line="28" pos:column="45"/></index></name><operator pos:line="28" pos:column="45">.<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="46">type<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></decl>;<pos:position pos:line="28" pos:column="52"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="29" pos:column="7">Py_END_ALLOW_THREADS<pos:position pos:line="29" pos:column="27"/></name></type> <name pos:line="29" pos:column="28">Py_DECREF<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">list<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></decl>;<pos:position pos:line="29" pos:column="44"/></decl_stmt>
      <expr_stmt><expr><name pos:line="30" pos:column="7">CPY_RETURN_FROM_THREADS<pos:position pos:line="30" pos:column="30"/></name> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">PyErr_Occurred<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">()<pos:position pos:line="32" pos:column="25"/></argument_list></call> <operator pos:line="32" pos:column="26">!=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">NULL<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <block pos:line="32" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">cpy_log_exception<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><literal type="string" pos:line="33" pos:column="25">"value building for write callback"<pos:position pos:line="33" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">Py_DECREF<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">list<pos:position pos:line="34" pos:column="21"/></name></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="35" pos:column="7">CPY_RETURN_FROM_THREADS<pos:position pos:line="35" pos:column="30"/></name> <literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="38" pos:column="3">dict<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <call><name pos:line="38" pos:column="10">PyDict_New<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">()<pos:position pos:line="38" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt> <comment type="block" pos:line="38" pos:column="24">/* New reference. */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name><name pos:line="39" pos:column="7">value_list<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">-&gt;<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="19">meta<pos:position pos:line="39" pos:column="23"/></name></name></expr>)<pos:position pos:line="39" pos:column="24"/></condition><then pos:line="39" pos:column="24"> <block pos:line="39" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">char<pos:position pos:line="40" pos:column="9"/></name> <modifier pos:line="40" pos:column="10">*<pos:position pos:line="40" pos:column="11"/></modifier><modifier pos:line="40" pos:column="11">*<pos:position pos:line="40" pos:column="12"/></modifier></type><name pos:line="40" pos:column="12">table<pos:position pos:line="40" pos:column="17"/></name></decl>;<pos:position pos:line="40" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">meta_data_t<pos:position pos:line="41" pos:column="16"/></name> <modifier pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></modifier></type><name pos:line="41" pos:column="18">meta<pos:position pos:line="41" pos:column="22"/></name> <init pos:line="41" pos:column="23">= <expr><name><name pos:line="41" pos:column="25">value_list<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">meta<pos:position pos:line="41" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="41" pos:column="42"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="43" pos:column="5">int<pos:position pos:line="43" pos:column="8"/></name></type> <name pos:line="43" pos:column="9">num<pos:position pos:line="43" pos:column="12"/></name> <init pos:line="43" pos:column="13">= <expr><call><name pos:line="43" pos:column="15">meta_data_toc<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">meta<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="35">&amp;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="36">table<pos:position pos:line="43" pos:column="41"/></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="43"/></decl_stmt>
    <for pos:line="44" pos:column="5">for <control pos:line="44" pos:column="9">(<init><decl><type><name pos:line="44" pos:column="10">int<pos:position pos:line="44" pos:column="13"/></name></type> <name pos:line="44" pos:column="14">i<pos:position pos:line="44" pos:column="15"/></name> <init pos:line="44" pos:column="16">= <expr><literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="44" pos:column="20"/></init> <condition><expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="25">num<pos:position pos:line="44" pos:column="28"/></name></expr>;<pos:position pos:line="44" pos:column="29"/></condition> <incr><expr><operator pos:line="44" pos:column="30">++<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="32">i<pos:position pos:line="44" pos:column="33"/></name></expr></incr>)<pos:position pos:line="44" pos:column="34"/></control> <block pos:line="44" pos:column="35">{
      <decl_stmt><decl><type><name pos:line="45" pos:column="7">int<pos:position pos:line="45" pos:column="10"/></name></type> <name pos:line="45" pos:column="11">type<pos:position pos:line="45" pos:column="15"/></name></decl>;<pos:position pos:line="45" pos:column="16"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="46" pos:column="7">char<pos:position pos:line="46" pos:column="11"/></name> <modifier pos:line="46" pos:column="12">*<pos:position pos:line="46" pos:column="13"/></modifier></type><name pos:line="46" pos:column="13">string<pos:position pos:line="46" pos:column="19"/></name></decl>;<pos:position pos:line="46" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="47" pos:column="7">int64_t<pos:position pos:line="47" pos:column="14"/></name></type> <name pos:line="47" pos:column="15">si<pos:position pos:line="47" pos:column="17"/></name></decl>;<pos:position pos:line="47" pos:column="18"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">uint64_t<pos:position pos:line="48" pos:column="15"/></name></type> <name pos:line="48" pos:column="16">ui<pos:position pos:line="48" pos:column="18"/></name></decl>;<pos:position pos:line="48" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">double<pos:position pos:line="49" pos:column="13"/></name></type> <name pos:line="49" pos:column="14">d<pos:position pos:line="49" pos:column="15"/></name></decl>;<pos:position pos:line="49" pos:column="16"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="50" pos:column="7">_Bool<pos:position pos:line="50" pos:column="12"/></name></type> <name pos:line="50" pos:column="13">b<pos:position pos:line="50" pos:column="14"/></name></decl>;<pos:position pos:line="50" pos:column="15"/></decl_stmt>

      <expr_stmt><expr><name pos:line="52" pos:column="7">type<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">meta_data_type<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">meta<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="35">table<pos:position pos:line="52" pos:column="40"/></name><index pos:line="52" pos:column="40">[<expr><name pos:line="52" pos:column="41">i<pos:position pos:line="52" pos:column="42"/></name></expr>]<pos:position pos:line="52" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><name pos:line="53" pos:column="11">type<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">==<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">MD_TYPE_STRING<pos:position pos:line="53" pos:column="33"/></name></expr>)<pos:position pos:line="53" pos:column="34"/></condition><then pos:line="53" pos:column="34"> <block pos:line="53" pos:column="35">{
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">meta_data_get_string<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">meta<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="40">table<pos:position pos:line="54" pos:column="45"/></name><index pos:line="54" pos:column="45">[<expr><name pos:line="54" pos:column="46">i<pos:position pos:line="54" pos:column="47"/></name></expr>]<pos:position pos:line="54" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="50">&amp;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="51">string<pos:position pos:line="54" pos:column="57"/></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59">
          <block type="pseudo"><continue pos:line="55" pos:column="11">continue;<pos:position pos:line="55" pos:column="20"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="56" pos:column="9">temp<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <call><name pos:line="56" pos:column="16">cpy_string_to_unicode_or_bytes<pos:position pos:line="56" pos:column="46"/></name><argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">string<pos:position pos:line="56" pos:column="53"/></name></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt> <comment type="block" pos:line="56" pos:column="56">/* New reference. */</comment>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">free<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">(<argument><expr><name pos:line="57" pos:column="14">string<pos:position pos:line="57" pos:column="20"/></name></expr></argument>)<pos:position pos:line="57" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">PyDict_SetItemString<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">dict<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="36">table<pos:position pos:line="58" pos:column="41"/></name><index pos:line="58" pos:column="41">[<expr><name pos:line="58" pos:column="42">i<pos:position pos:line="58" pos:column="43"/></name></expr>]<pos:position pos:line="58" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">temp<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">Py_XDECREF<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">temp<pos:position pos:line="59" pos:column="24"/></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></then> <elseif pos:line="60" pos:column="9">else <if pos:line="60" pos:column="14">if <condition pos:line="60" pos:column="17">(<expr><name pos:line="60" pos:column="18">type<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">==<pos:position pos:line="60" pos:column="25"/></operator> <name pos:line="60" pos:column="26">MD_TYPE_SIGNED_INT<pos:position pos:line="60" pos:column="44"/></name></expr>)<pos:position pos:line="60" pos:column="45"/></condition><then pos:line="60" pos:column="45"> <block pos:line="60" pos:column="46">{
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">meta_data_get_signed_int<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">meta<pos:position pos:line="61" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="44">table<pos:position pos:line="61" pos:column="49"/></name><index pos:line="61" pos:column="49">[<expr><name pos:line="61" pos:column="50">i<pos:position pos:line="61" pos:column="51"/></name></expr>]<pos:position pos:line="61" pos:column="52"/></index></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="54">&amp;<pos:position pos:line="61" pos:column="59"/></operator><name pos:line="61" pos:column="55">si<pos:position pos:line="61" pos:column="57"/></name></expr></argument>)<pos:position pos:line="61" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="59"/></condition><then pos:line="61" pos:column="59">
          <block type="pseudo"><continue pos:line="62" pos:column="11">continue;<pos:position pos:line="62" pos:column="20"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="63" pos:column="9">temp<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <call><name pos:line="63" pos:column="16">PyObject_CallFunctionObjArgs<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><operator pos:line="63" pos:column="45">(<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="46">void<pos:position pos:line="63" pos:column="50"/></name> <operator pos:line="63" pos:column="51">*<pos:position pos:line="63" pos:column="52"/></operator><operator pos:line="63" pos:column="52">)<pos:position pos:line="63" pos:column="53"/></operator><operator pos:line="63" pos:column="53">&amp;<pos:position pos:line="63" pos:column="58"/></operator><name pos:line="63" pos:column="54">SignedType<pos:position pos:line="63" pos:column="64"/></name></expr></argument>,
                                            <argument><expr><call><name pos:line="64" pos:column="45">PyLong_FromLongLong<pos:position pos:line="64" pos:column="64"/></name><argument_list pos:line="64" pos:column="64">(<argument><expr><name pos:line="64" pos:column="65">si<pos:position pos:line="64" pos:column="67"/></name></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr></argument>,
                                            <argument><expr><operator pos:line="65" pos:column="45">(<pos:position pos:line="65" pos:column="46"/></operator><name pos:line="65" pos:column="46">void<pos:position pos:line="65" pos:column="50"/></name> <operator pos:line="65" pos:column="51">*<pos:position pos:line="65" pos:column="52"/></operator><operator pos:line="65" pos:column="52">)<pos:position pos:line="65" pos:column="53"/></operator><literal type="number" pos:line="65" pos:column="53">0<pos:position pos:line="65" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt> <comment type="block" pos:line="65" pos:column="57">/* New reference. */</comment>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">PyDict_SetItemString<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">dict<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="36">table<pos:position pos:line="66" pos:column="41"/></name><index pos:line="66" pos:column="41">[<expr><name pos:line="66" pos:column="42">i<pos:position pos:line="66" pos:column="43"/></name></expr>]<pos:position pos:line="66" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">temp<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">Py_XDECREF<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><name pos:line="67" pos:column="20">temp<pos:position pos:line="67" pos:column="24"/></name></expr></argument>)<pos:position pos:line="67" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if></elseif> <elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if <condition pos:line="68" pos:column="17">(<expr><name pos:line="68" pos:column="18">type<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">MD_TYPE_UNSIGNED_INT<pos:position pos:line="68" pos:column="46"/></name></expr>)<pos:position pos:line="68" pos:column="47"/></condition><then pos:line="68" pos:column="47"> <block pos:line="68" pos:column="48">{
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><call><name pos:line="69" pos:column="13">meta_data_get_unsigned_int<pos:position pos:line="69" pos:column="39"/></name><argument_list pos:line="69" pos:column="39">(<argument><expr><name pos:line="69" pos:column="40">meta<pos:position pos:line="69" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="46">table<pos:position pos:line="69" pos:column="51"/></name><index pos:line="69" pos:column="51">[<expr><name pos:line="69" pos:column="52">i<pos:position pos:line="69" pos:column="53"/></name></expr>]<pos:position pos:line="69" pos:column="54"/></index></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="56">&amp;<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="57">ui<pos:position pos:line="69" pos:column="59"/></name></expr></argument>)<pos:position pos:line="69" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="61"/></condition><then pos:line="69" pos:column="61">
          <block type="pseudo"><continue pos:line="70" pos:column="11">continue;<pos:position pos:line="70" pos:column="20"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="71" pos:column="9">temp<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">PyObject_CallFunctionObjArgs<pos:position pos:line="71" pos:column="44"/></name><argument_list pos:line="71" pos:column="44">(<argument><expr><operator pos:line="71" pos:column="45">(<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">void<pos:position pos:line="71" pos:column="50"/></name> <operator pos:line="71" pos:column="51">*<pos:position pos:line="71" pos:column="52"/></operator><operator pos:line="71" pos:column="52">)<pos:position pos:line="71" pos:column="53"/></operator><operator pos:line="71" pos:column="53">&amp;<pos:position pos:line="71" pos:column="58"/></operator><name pos:line="71" pos:column="54">UnsignedType<pos:position pos:line="71" pos:column="66"/></name></expr></argument>,
                                            <argument><expr><call><name pos:line="72" pos:column="45">PyLong_FromUnsignedLongLong<pos:position pos:line="72" pos:column="72"/></name><argument_list pos:line="72" pos:column="72">(<argument><expr><name pos:line="72" pos:column="73">ui<pos:position pos:line="72" pos:column="75"/></name></expr></argument>)<pos:position pos:line="72" pos:column="76"/></argument_list></call></expr></argument>,
                                            <argument><expr><operator pos:line="73" pos:column="45">(<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="46">void<pos:position pos:line="73" pos:column="50"/></name> <operator pos:line="73" pos:column="51">*<pos:position pos:line="73" pos:column="52"/></operator><operator pos:line="73" pos:column="52">)<pos:position pos:line="73" pos:column="53"/></operator><literal type="number" pos:line="73" pos:column="53">0<pos:position pos:line="73" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="56"/></expr_stmt> <comment type="block" pos:line="73" pos:column="57">/* New reference. */</comment>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">PyDict_SetItemString<pos:position pos:line="74" pos:column="29"/></name><argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">dict<pos:position pos:line="74" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="36">table<pos:position pos:line="74" pos:column="41"/></name><index pos:line="74" pos:column="41">[<expr><name pos:line="74" pos:column="42">i<pos:position pos:line="74" pos:column="43"/></name></expr>]<pos:position pos:line="74" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="46">temp<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">Py_XDECREF<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><name pos:line="75" pos:column="20">temp<pos:position pos:line="75" pos:column="24"/></name></expr></argument>)<pos:position pos:line="75" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if></elseif> <elseif pos:line="76" pos:column="9">else <if pos:line="76" pos:column="14">if <condition pos:line="76" pos:column="17">(<expr><name pos:line="76" pos:column="18">type<pos:position pos:line="76" pos:column="22"/></name> <operator pos:line="76" pos:column="23">==<pos:position pos:line="76" pos:column="25"/></operator> <name pos:line="76" pos:column="26">MD_TYPE_DOUBLE<pos:position pos:line="76" pos:column="40"/></name></expr>)<pos:position pos:line="76" pos:column="41"/></condition><then pos:line="76" pos:column="41"> <block pos:line="76" pos:column="42">{
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">meta_data_get_double<pos:position pos:line="77" pos:column="33"/></name><argument_list pos:line="77" pos:column="33">(<argument><expr><name pos:line="77" pos:column="34">meta<pos:position pos:line="77" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="40">table<pos:position pos:line="77" pos:column="45"/></name><index pos:line="77" pos:column="45">[<expr><name pos:line="77" pos:column="46">i<pos:position pos:line="77" pos:column="47"/></name></expr>]<pos:position pos:line="77" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="50">&amp;<pos:position pos:line="77" pos:column="55"/></operator><name pos:line="77" pos:column="51">d<pos:position pos:line="77" pos:column="52"/></name></expr></argument>)<pos:position pos:line="77" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="54"/></condition><then pos:line="77" pos:column="54">
          <block type="pseudo"><continue pos:line="78" pos:column="11">continue;<pos:position pos:line="78" pos:column="20"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="79" pos:column="9">temp<pos:position pos:line="79" pos:column="13"/></name> <operator pos:line="79" pos:column="14">=<pos:position pos:line="79" pos:column="15"/></operator> <call><name pos:line="79" pos:column="16">PyFloat_FromDouble<pos:position pos:line="79" pos:column="34"/></name><argument_list pos:line="79" pos:column="34">(<argument><expr><name pos:line="79" pos:column="35">d<pos:position pos:line="79" pos:column="36"/></name></expr></argument>)<pos:position pos:line="79" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="38"/></expr_stmt> <comment type="block" pos:line="79" pos:column="39">/* New reference. */</comment>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">PyDict_SetItemString<pos:position pos:line="80" pos:column="29"/></name><argument_list pos:line="80" pos:column="29">(<argument><expr><name pos:line="80" pos:column="30">dict<pos:position pos:line="80" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="36">table<pos:position pos:line="80" pos:column="41"/></name><index pos:line="80" pos:column="41">[<expr><name pos:line="80" pos:column="42">i<pos:position pos:line="80" pos:column="43"/></name></expr>]<pos:position pos:line="80" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="46">temp<pos:position pos:line="80" pos:column="50"/></name></expr></argument>)<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">Py_XDECREF<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><name pos:line="81" pos:column="20">temp<pos:position pos:line="81" pos:column="24"/></name></expr></argument>)<pos:position pos:line="81" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="82" pos:column="8"/></block></then></if></elseif> <elseif pos:line="82" pos:column="9">else <if pos:line="82" pos:column="14">if <condition pos:line="82" pos:column="17">(<expr><name pos:line="82" pos:column="18">type<pos:position pos:line="82" pos:column="22"/></name> <operator pos:line="82" pos:column="23">==<pos:position pos:line="82" pos:column="25"/></operator> <name pos:line="82" pos:column="26">MD_TYPE_BOOLEAN<pos:position pos:line="82" pos:column="41"/></name></expr>)<pos:position pos:line="82" pos:column="42"/></condition><then pos:line="82" pos:column="42"> <block pos:line="82" pos:column="43">{
        <if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><call><name pos:line="83" pos:column="13">meta_data_get_boolean<pos:position pos:line="83" pos:column="34"/></name><argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">meta<pos:position pos:line="83" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="41">table<pos:position pos:line="83" pos:column="46"/></name><index pos:line="83" pos:column="46">[<expr><name pos:line="83" pos:column="47">i<pos:position pos:line="83" pos:column="48"/></name></expr>]<pos:position pos:line="83" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="51">&amp;<pos:position pos:line="83" pos:column="56"/></operator><name pos:line="83" pos:column="52">b<pos:position pos:line="83" pos:column="53"/></name></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="55"/></condition><then pos:line="83" pos:column="55">
          <block type="pseudo"><continue pos:line="84" pos:column="11">continue;<pos:position pos:line="84" pos:column="20"/></continue></block></then></if>
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">b<pos:position pos:line="85" pos:column="14"/></name></expr>)<pos:position pos:line="85" pos:column="15"/></condition><then pos:line="85" pos:column="15">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="11">PyDict_SetItemString<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name pos:line="86" pos:column="32">dict<pos:position pos:line="86" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="38">table<pos:position pos:line="86" pos:column="43"/></name><index pos:line="86" pos:column="43">[<expr><name pos:line="86" pos:column="44">i<pos:position pos:line="86" pos:column="45"/></name></expr>]<pos:position pos:line="86" pos:column="46"/></index></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="48">Py_True<pos:position pos:line="86" pos:column="55"/></name></expr></argument>)<pos:position pos:line="86" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt></block></then>
        <else pos:line="87" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="11">PyDict_SetItemString<pos:position pos:line="88" pos:column="31"/></name><argument_list pos:line="88" pos:column="31">(<argument><expr><name pos:line="88" pos:column="32">dict<pos:position pos:line="88" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="38">table<pos:position pos:line="88" pos:column="43"/></name><index pos:line="88" pos:column="43">[<expr><name pos:line="88" pos:column="44">i<pos:position pos:line="88" pos:column="45"/></name></expr>]<pos:position pos:line="88" pos:column="46"/></index></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="48">Py_False<pos:position pos:line="88" pos:column="56"/></name></expr></argument>)<pos:position pos:line="88" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="58"/></expr_stmt></block></else></if>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if></elseif></if>
      <expr_stmt><expr><call><name pos:line="90" pos:column="7">free<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><name><name pos:line="90" pos:column="12">table<pos:position pos:line="90" pos:column="17"/></name><index pos:line="90" pos:column="17">[<expr><name pos:line="90" pos:column="18">i<pos:position pos:line="90" pos:column="19"/></name></expr>]<pos:position pos:line="90" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="90" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">free<pos:position pos:line="92" pos:column="9"/></name><argument_list pos:line="92" pos:column="9">(<argument><expr><name pos:line="92" pos:column="10">table<pos:position pos:line="92" pos:column="15"/></name></expr></argument>)<pos:position pos:line="92" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="94" pos:column="3">v<pos:position pos:line="94" pos:column="4"/></name> <operator pos:line="94" pos:column="5">=<pos:position pos:line="94" pos:column="6"/></operator> <operator pos:line="94" pos:column="7">(<pos:position pos:line="94" pos:column="8"/></operator><name pos:line="94" pos:column="8">Values<pos:position pos:line="94" pos:column="14"/></name> <operator pos:line="94" pos:column="15">*<pos:position pos:line="94" pos:column="16"/></operator><operator pos:line="94" pos:column="16">)<pos:position pos:line="94" pos:column="17"/></operator><call><name pos:line="94" pos:column="17">Values_New<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">()<pos:position pos:line="94" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="30"/></expr_stmt> <comment type="block" pos:line="94" pos:column="31">/* New reference. */</comment>
  <expr_stmt><expr><call><name pos:line="95" pos:column="3">sstrncpy<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><name><name pos:line="95" pos:column="12">v<pos:position pos:line="95" pos:column="13"/></name><operator pos:line="95" pos:column="13">-&gt;<pos:position pos:line="95" pos:column="18"/></operator><name pos:line="95" pos:column="15">data<pos:position pos:line="95" pos:column="19"/></name><operator pos:line="95" pos:column="19">.<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="20">host<pos:position pos:line="95" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="26">value_list<pos:position pos:line="95" pos:column="36"/></name><operator pos:line="95" pos:column="36">-&gt;<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="38">host<pos:position pos:line="95" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="95" pos:column="44">sizeof<argument_list pos:line="95" pos:column="50">(<argument><expr><name><name pos:line="95" pos:column="51">v<pos:position pos:line="95" pos:column="52"/></name><operator pos:line="95" pos:column="52">-&gt;<pos:position pos:line="95" pos:column="57"/></operator><name pos:line="95" pos:column="54">data<pos:position pos:line="95" pos:column="58"/></name><operator pos:line="95" pos:column="58">.<pos:position pos:line="95" pos:column="59"/></operator><name pos:line="95" pos:column="59">host<pos:position pos:line="95" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="96" pos:column="3">sstrncpy<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><name><name pos:line="96" pos:column="12">v<pos:position pos:line="96" pos:column="13"/></name><operator pos:line="96" pos:column="13">-&gt;<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="15">data<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">.<pos:position pos:line="96" pos:column="20"/></operator><name pos:line="96" pos:column="20">type<pos:position pos:line="96" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="26">value_list<pos:position pos:line="96" pos:column="36"/></name><operator pos:line="96" pos:column="36">-&gt;<pos:position pos:line="96" pos:column="41"/></operator><name pos:line="96" pos:column="38">type<pos:position pos:line="96" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="44">sizeof<argument_list pos:line="96" pos:column="50">(<argument><expr><name><name pos:line="96" pos:column="51">v<pos:position pos:line="96" pos:column="52"/></name><operator pos:line="96" pos:column="52">-&gt;<pos:position pos:line="96" pos:column="57"/></operator><name pos:line="96" pos:column="54">data<pos:position pos:line="96" pos:column="58"/></name><operator pos:line="96" pos:column="58">.<pos:position pos:line="96" pos:column="59"/></operator><name pos:line="96" pos:column="59">type<pos:position pos:line="96" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="97" pos:column="3">sstrncpy<pos:position pos:line="97" pos:column="11"/></name><argument_list pos:line="97" pos:column="11">(<argument><expr><name><name pos:line="97" pos:column="12">v<pos:position pos:line="97" pos:column="13"/></name><operator pos:line="97" pos:column="13">-&gt;<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="15">data<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">.<pos:position pos:line="97" pos:column="20"/></operator><name pos:line="97" pos:column="20">type_instance<pos:position pos:line="97" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="35">value_list<pos:position pos:line="97" pos:column="45"/></name><operator pos:line="97" pos:column="45">-&gt;<pos:position pos:line="97" pos:column="50"/></operator><name pos:line="97" pos:column="47">type_instance<pos:position pos:line="97" pos:column="60"/></name></name></expr></argument>,
           <argument><expr><sizeof pos:line="98" pos:column="12">sizeof<argument_list pos:line="98" pos:column="18">(<argument><expr><name><name pos:line="98" pos:column="19">v<pos:position pos:line="98" pos:column="20"/></name><operator pos:line="98" pos:column="20">-&gt;<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="22">data<pos:position pos:line="98" pos:column="26"/></name><operator pos:line="98" pos:column="26">.<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="27">type_instance<pos:position pos:line="98" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="98" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="99" pos:column="3">sstrncpy<pos:position pos:line="99" pos:column="11"/></name><argument_list pos:line="99" pos:column="11">(<argument><expr><name><name pos:line="99" pos:column="12">v<pos:position pos:line="99" pos:column="13"/></name><operator pos:line="99" pos:column="13">-&gt;<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="15">data<pos:position pos:line="99" pos:column="19"/></name><operator pos:line="99" pos:column="19">.<pos:position pos:line="99" pos:column="20"/></operator><name pos:line="99" pos:column="20">plugin<pos:position pos:line="99" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="28">value_list<pos:position pos:line="99" pos:column="38"/></name><operator pos:line="99" pos:column="38">-&gt;<pos:position pos:line="99" pos:column="43"/></operator><name pos:line="99" pos:column="40">plugin<pos:position pos:line="99" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="99" pos:column="48">sizeof<argument_list pos:line="99" pos:column="54">(<argument><expr><name><name pos:line="99" pos:column="55">v<pos:position pos:line="99" pos:column="56"/></name><operator pos:line="99" pos:column="56">-&gt;<pos:position pos:line="99" pos:column="61"/></operator><name pos:line="99" pos:column="58">data<pos:position pos:line="99" pos:column="62"/></name><operator pos:line="99" pos:column="62">.<pos:position pos:line="99" pos:column="63"/></operator><name pos:line="99" pos:column="63">plugin<pos:position pos:line="99" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="99" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="100" pos:column="3">sstrncpy<pos:position pos:line="100" pos:column="11"/></name><argument_list pos:line="100" pos:column="11">(<argument><expr><name><name pos:line="100" pos:column="12">v<pos:position pos:line="100" pos:column="13"/></name><operator pos:line="100" pos:column="13">-&gt;<pos:position pos:line="100" pos:column="18"/></operator><name pos:line="100" pos:column="15">data<pos:position pos:line="100" pos:column="19"/></name><operator pos:line="100" pos:column="19">.<pos:position pos:line="100" pos:column="20"/></operator><name pos:line="100" pos:column="20">plugin_instance<pos:position pos:line="100" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="37">value_list<pos:position pos:line="100" pos:column="47"/></name><operator pos:line="100" pos:column="47">-&gt;<pos:position pos:line="100" pos:column="52"/></operator><name pos:line="100" pos:column="49">plugin_instance<pos:position pos:line="100" pos:column="64"/></name></name></expr></argument>,
           <argument><expr><sizeof pos:line="101" pos:column="12">sizeof<argument_list pos:line="101" pos:column="18">(<argument><expr><name><name pos:line="101" pos:column="19">v<pos:position pos:line="101" pos:column="20"/></name><operator pos:line="101" pos:column="20">-&gt;<pos:position pos:line="101" pos:column="25"/></operator><name pos:line="101" pos:column="22">data<pos:position pos:line="101" pos:column="26"/></name><operator pos:line="101" pos:column="26">.<pos:position pos:line="101" pos:column="27"/></operator><name pos:line="101" pos:column="27">plugin_instance<pos:position pos:line="101" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="101" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="102" pos:column="3">v<pos:position pos:line="102" pos:column="4"/></name><operator pos:line="102" pos:column="4">-&gt;<pos:position pos:line="102" pos:column="9"/></operator><name pos:line="102" pos:column="6">data<pos:position pos:line="102" pos:column="10"/></name><operator pos:line="102" pos:column="10">.<pos:position pos:line="102" pos:column="11"/></operator><name pos:line="102" pos:column="11">time<pos:position pos:line="102" pos:column="15"/></name></name> <operator pos:line="102" pos:column="16">=<pos:position pos:line="102" pos:column="17"/></operator> <call><name pos:line="102" pos:column="18">CDTIME_T_TO_DOUBLE<pos:position pos:line="102" pos:column="36"/></name><argument_list pos:line="102" pos:column="36">(<argument><expr><name><name pos:line="102" pos:column="37">value_list<pos:position pos:line="102" pos:column="47"/></name><operator pos:line="102" pos:column="47">-&gt;<pos:position pos:line="102" pos:column="52"/></operator><name pos:line="102" pos:column="49">time<pos:position pos:line="102" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="103" pos:column="3">v<pos:position pos:line="103" pos:column="4"/></name><operator pos:line="103" pos:column="4">-&gt;<pos:position pos:line="103" pos:column="9"/></operator><name pos:line="103" pos:column="6">interval<pos:position pos:line="103" pos:column="14"/></name></name> <operator pos:line="103" pos:column="15">=<pos:position pos:line="103" pos:column="16"/></operator> <call><name pos:line="103" pos:column="17">CDTIME_T_TO_DOUBLE<pos:position pos:line="103" pos:column="35"/></name><argument_list pos:line="103" pos:column="35">(<argument><expr><name><name pos:line="103" pos:column="36">value_list<pos:position pos:line="103" pos:column="46"/></name><operator pos:line="103" pos:column="46">-&gt;<pos:position pos:line="103" pos:column="51"/></operator><name pos:line="103" pos:column="48">interval<pos:position pos:line="103" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="104" pos:column="3">Py_CLEAR<pos:position pos:line="104" pos:column="11"/></name><argument_list pos:line="104" pos:column="11">(<argument><expr><name><name pos:line="104" pos:column="12">v<pos:position pos:line="104" pos:column="13"/></name><operator pos:line="104" pos:column="13">-&gt;<pos:position pos:line="104" pos:column="18"/></operator><name pos:line="104" pos:column="15">values<pos:position pos:line="104" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="105" pos:column="3">v<pos:position pos:line="105" pos:column="4"/></name><operator pos:line="105" pos:column="4">-&gt;<pos:position pos:line="105" pos:column="9"/></operator><name pos:line="105" pos:column="6">values<pos:position pos:line="105" pos:column="12"/></name></name> <operator pos:line="105" pos:column="13">=<pos:position pos:line="105" pos:column="14"/></operator> <name pos:line="105" pos:column="15">list<pos:position pos:line="105" pos:column="19"/></name></expr>;<pos:position pos:line="105" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="106" pos:column="3">Py_CLEAR<pos:position pos:line="106" pos:column="11"/></name><argument_list pos:line="106" pos:column="11">(<argument><expr><name><name pos:line="106" pos:column="12">v<pos:position pos:line="106" pos:column="13"/></name><operator pos:line="106" pos:column="13">-&gt;<pos:position pos:line="106" pos:column="18"/></operator><name pos:line="106" pos:column="15">meta<pos:position pos:line="106" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="107" pos:column="3">v<pos:position pos:line="107" pos:column="4"/></name><operator pos:line="107" pos:column="4">-&gt;<pos:position pos:line="107" pos:column="9"/></operator><name pos:line="107" pos:column="6">meta<pos:position pos:line="107" pos:column="10"/></name></name> <operator pos:line="107" pos:column="11">=<pos:position pos:line="107" pos:column="12"/></operator> <name pos:line="107" pos:column="13">dict<pos:position pos:line="107" pos:column="17"/></name></expr>;<pos:position pos:line="107" pos:column="18"/></expr_stmt> <comment type="block" pos:line="107" pos:column="19">/* Steals a reference. */</comment>
  <expr_stmt><expr><name pos:line="108" pos:column="3">ret<pos:position pos:line="108" pos:column="6"/></name> <operator pos:line="108" pos:column="7">=<pos:position pos:line="108" pos:column="8"/></operator> <call><name pos:line="108" pos:column="9">PyObject_CallFunctionObjArgs<pos:position pos:line="108" pos:column="37"/></name><argument_list pos:line="108" pos:column="37">(<argument><expr><name><name pos:line="108" pos:column="38">c<pos:position pos:line="108" pos:column="39"/></name><operator pos:line="108" pos:column="39">-&gt;<pos:position pos:line="108" pos:column="44"/></operator><name pos:line="108" pos:column="41">callback<pos:position pos:line="108" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="51">v<pos:position pos:line="108" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="54">c<pos:position pos:line="108" pos:column="55"/></name><operator pos:line="108" pos:column="55">-&gt;<pos:position pos:line="108" pos:column="60"/></operator><name pos:line="108" pos:column="57">data<pos:position pos:line="108" pos:column="61"/></name></name></expr></argument>,
                                     <argument><expr><operator pos:line="109" pos:column="38">(<pos:position pos:line="109" pos:column="39"/></operator><name pos:line="109" pos:column="39">void<pos:position pos:line="109" pos:column="43"/></name> <operator pos:line="109" pos:column="44">*<pos:position pos:line="109" pos:column="45"/></operator><operator pos:line="109" pos:column="45">)<pos:position pos:line="109" pos:column="46"/></operator><literal type="number" pos:line="109" pos:column="46">0<pos:position pos:line="109" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="49"/></expr_stmt> <comment type="block" pos:line="109" pos:column="50">/* New reference. */</comment>
  <expr_stmt><expr><call><name pos:line="110" pos:column="3">Py_XDECREF<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><name pos:line="110" pos:column="14">v<pos:position pos:line="110" pos:column="15"/></name></expr></argument>)<pos:position pos:line="110" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="17"/></expr_stmt>
  <if pos:line="111" pos:column="3">if <condition pos:line="111" pos:column="6">(<expr><name pos:line="111" pos:column="7">ret<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">==<pos:position pos:line="111" pos:column="13"/></operator> <name pos:line="111" pos:column="14">NULL<pos:position pos:line="111" pos:column="18"/></name></expr>)<pos:position pos:line="111" pos:column="19"/></condition><then pos:line="111" pos:column="19"> <block pos:line="111" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">cpy_log_exception<pos:position pos:line="112" pos:column="22"/></name><argument_list pos:line="112" pos:column="22">(<argument><expr><literal type="string" pos:line="112" pos:column="23">"write callback"<pos:position pos:line="112" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></then> <else pos:line="113" pos:column="5">else <block pos:line="113" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">Py_DECREF<pos:position pos:line="114" pos:column="14"/></name><argument_list pos:line="114" pos:column="14">(<argument><expr><name pos:line="114" pos:column="15">ret<pos:position pos:line="114" pos:column="18"/></name></expr></argument>)<pos:position pos:line="114" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="115" pos:column="4"/></block></else></if>
  <macro><name pos:line="116" pos:column="3">CPY_RELEASE_THREADS<pos:position pos:line="116" pos:column="22"/></name></macro>
  <return pos:line="117" pos:column="3">return <expr><literal type="number" pos:line="117" pos:column="10">0<pos:position pos:line="117" pos:column="11"/></literal></expr>;<pos:position pos:line="117" pos:column="12"/></return>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
