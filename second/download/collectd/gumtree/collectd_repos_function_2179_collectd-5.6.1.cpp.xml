<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2179_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lu_copy_ident_to_match_part<pos:position pos:line="1" pos:column="39"/></name> <parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">part_match_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">match_part<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="67">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">char<pos:position pos:line="2" pos:column="9"/></name> <specifier pos:line="2" pos:column="10">const<pos:position pos:line="2" pos:column="15"/></specifier> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">ident_part<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><call><name pos:line="4" pos:column="16">strlen<pos:position pos:line="4" pos:column="22"/></name> <argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">ident_part<pos:position pos:line="4" pos:column="34"/></name></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">len<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">&lt;<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="14">3<pos:position pos:line="7" pos:column="15"/></literal><operator pos:line="7" pos:column="15">)<pos:position pos:line="7" pos:column="16"/></operator> <operator pos:line="7" pos:column="17">||<pos:position pos:line="7" pos:column="19"/></operator> <operator pos:line="7" pos:column="20">(<pos:position pos:line="7" pos:column="21"/></operator><name><name pos:line="7" pos:column="21">ident_part<pos:position pos:line="7" pos:column="31"/></name><index pos:line="7" pos:column="31">[<expr><literal type="number" pos:line="7" pos:column="32">0<pos:position pos:line="7" pos:column="33"/></literal></expr>]<pos:position pos:line="7" pos:column="34"/></index></name> <operator pos:line="7" pos:column="35">!=<pos:position pos:line="7" pos:column="37"/></operator> <literal type="char" pos:line="7" pos:column="38">'/'<pos:position pos:line="7" pos:column="41"/></literal><operator pos:line="7" pos:column="41">)<pos:position pos:line="7" pos:column="42"/></operator> <operator pos:line="7" pos:column="43">||<pos:position pos:line="7" pos:column="45"/></operator> <operator pos:line="7" pos:column="46">(<pos:position pos:line="7" pos:column="47"/></operator><name><name pos:line="7" pos:column="47">ident_part<pos:position pos:line="7" pos:column="57"/></name><index pos:line="7" pos:column="57">[<expr><name pos:line="7" pos:column="58">len<pos:position pos:line="7" pos:column="61"/></name> <operator pos:line="7" pos:column="62">-<pos:position pos:line="7" pos:column="63"/></operator> <literal type="number" pos:line="7" pos:column="64">1<pos:position pos:line="7" pos:column="65"/></literal></expr>]<pos:position pos:line="7" pos:column="66"/></index></name> <operator pos:line="7" pos:column="67">!=<pos:position pos:line="7" pos:column="69"/></operator> <literal type="char" pos:line="7" pos:column="70">'/'<pos:position pos:line="7" pos:column="73"/></literal><operator pos:line="7" pos:column="73">)<pos:position pos:line="7" pos:column="74"/></operator></expr>)<pos:position pos:line="7" pos:column="75"/></condition><then pos:line="7" pos:column="75">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">sstrncpy<pos:position pos:line="9" pos:column="13"/></name> <argument_list pos:line="9" pos:column="14">(<argument><expr><name><name pos:line="9" pos:column="15">match_part<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">str<pos:position pos:line="9" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">ident_part<pos:position pos:line="9" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="44">sizeof <argument_list pos:line="9" pos:column="51">(<argument><expr><name><name pos:line="9" pos:column="52">match_part<pos:position pos:line="9" pos:column="62"/></name><operator pos:line="9" pos:column="62">-&gt;<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="64">str<pos:position pos:line="9" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">match_part<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">is_regex<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal><operator pos:line="11" pos:column="14">)<pos:position pos:line="11" pos:column="15"/></operator></expr>;<pos:position pos:line="11" pos:column="16"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* Copy string without the leading slash. */</comment>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">sstrncpy<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name><name pos:line="15" pos:column="13">match_part<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">str<pos:position pos:line="15" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">ident_part<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">+<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="46">sizeof <argument_list pos:line="15" pos:column="53">(<argument><expr><name><name pos:line="15" pos:column="54">match_part<pos:position pos:line="15" pos:column="64"/></name><operator pos:line="15" pos:column="64">-&gt;<pos:position pos:line="15" pos:column="69"/></operator><name pos:line="15" pos:column="66">str<pos:position pos:line="15" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">assert<pos:position pos:line="16" pos:column="9"/></name> <argument_list pos:line="16" pos:column="10">(<argument><expr><sizeof pos:line="16" pos:column="11">sizeof <argument_list pos:line="16" pos:column="18">(<argument><expr><name><name pos:line="16" pos:column="19">match_part<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">str<pos:position pos:line="16" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></sizeof> <operator pos:line="16" pos:column="36">&gt;<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="38">len<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
  <comment type="block" pos:line="17" pos:column="3">/* strip trailing slash */</comment>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">match_part<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">str<pos:position pos:line="18" pos:column="18"/></name><index pos:line="18" pos:column="18">[<expr><name pos:line="18" pos:column="19">len<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">-<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="25">2<pos:position pos:line="18" pos:column="26"/></literal></expr>]<pos:position pos:line="18" pos:column="27"/></index></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">status<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">regcomp<pos:position pos:line="20" pos:column="19"/></name> <argument_list pos:line="20" pos:column="20">(<argument><expr><operator pos:line="20" pos:column="21">&amp;<pos:position pos:line="20" pos:column="26"/></operator><name><name pos:line="20" pos:column="22">match_part<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">-&gt;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="34">regex<pos:position pos:line="20" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="41">match_part<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">str<pos:position pos:line="20" pos:column="56"/></name></name></expr></argument>,
      <comment type="block" pos:line="21" pos:column="7">/* flags = */</comment> <argument><expr><name pos:line="21" pos:column="21">REG_EXTENDED<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">status<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">!=<pos:position pos:line="22" pos:column="16"/></operator> <literal type="number" pos:line="22" pos:column="17">0<pos:position pos:line="22" pos:column="18"/></literal></expr>)<pos:position pos:line="22" pos:column="19"/></condition><then pos:line="22" pos:column="19">
  <block pos:line="23" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">char<pos:position pos:line="24" pos:column="9"/></name></type> <name><name pos:line="24" pos:column="10">errbuf<pos:position pos:line="24" pos:column="16"/></name><index pos:line="24" pos:column="16">[<expr><literal type="number" pos:line="24" pos:column="17">1024<pos:position pos:line="24" pos:column="21"/></literal></expr>]<pos:position pos:line="24" pos:column="22"/></index></name></decl>;<pos:position pos:line="24" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">regerror<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">status<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="23">&amp;<pos:position pos:line="25" pos:column="28"/></operator><name><name pos:line="25" pos:column="24">match_part<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">regex<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">errbuf<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="51">sizeof <argument_list pos:line="25" pos:column="58">(<argument><expr><name pos:line="25" pos:column="59">errbuf<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ERROR<pos:position pos:line="26" pos:column="10"/></name> <argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"utils_vl_lookup: Compiling regular expression \"%s\" failed: %s"<pos:position pos:line="26" pos:column="77"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="27" pos:column="9">match_part<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">str<pos:position pos:line="27" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="26">errbuf<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">EINVAL<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">)<pos:position pos:line="28" pos:column="20"/></operator></expr>;<pos:position pos:line="28" pos:column="21"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="30" pos:column="3">match_part<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">is_regex<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <literal type="number" pos:line="30" pos:column="26">1<pos:position pos:line="30" pos:column="27"/></literal></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>

  <return pos:line="32" pos:column="3">return <expr><operator pos:line="32" pos:column="10">(<pos:position pos:line="32" pos:column="11"/></operator><literal type="number" pos:line="32" pos:column="11">0<pos:position pos:line="32" pos:column="12"/></literal><operator pos:line="32" pos:column="12">)<pos:position pos:line="32" pos:column="13"/></operator></expr>;<pos:position pos:line="32" pos:column="14"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
