<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">sleepingtime<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sigaction<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">sigIntAction<pos:position pos:line="4" pos:column="38"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="40">sigChldAction<pos:position pos:line="4" pos:column="53"/></name></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">pid_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">pid<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">basedir<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="26">'\0'<pos:position pos:line="7" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="32">PATH_MAX<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">openlog<pos:position pos:line="9" pos:column="16"/></name> <argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">PACKAGE<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">LOG_CONS<pos:position pos:line="9" pos:column="35"/></name> <operator pos:line="9" pos:column="36">|<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="38">LOG_PID<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="47">LOG_DAEMON<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition>
	<block pos:line="12" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">c<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="15" pos:column="17">c<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">getopt<pos:position pos:line="15" pos:column="27"/></name> <argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">argc<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">argv<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="41">"d:"<pos:position pos:line="15" pos:column="45"/></literal>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">COLLECT_PING<pos:position pos:line="16" pos:column="17"/></name></expr></cpp:if>
				<literal type="string" pos:line="17" pos:column="33">"p:"<pos:position pos:line="17" pos:column="37"/></literal>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="18" pos:column="8">/* COLLECT_PING */</comment>
				<literal type="string" pos:line="19" pos:column="33">"h"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">c<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">==<pos:position pos:line="21" pos:column="25"/></operator> <operator pos:line="21" pos:column="26">-<pos:position pos:line="21" pos:column="27"/></operator><literal type="number" pos:line="21" pos:column="27">1<pos:position pos:line="21" pos:column="28"/></literal></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29">
			<block type="pseudo"><break pos:line="22" pos:column="25">break;<pos:position pos:line="22" pos:column="31"/></break></block></then></if>

		<switch pos:line="24" pos:column="17">switch <condition pos:line="24" pos:column="24">(<expr><name pos:line="24" pos:column="25">c<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition>
		<block pos:line="25" pos:column="17">{
			<case pos:line="26" pos:column="25">case <expr><literal type="char" pos:line="26" pos:column="30">'d'<pos:position pos:line="26" pos:column="33"/></literal></expr>:<pos:position pos:line="26" pos:column="34"/></case>
				<if pos:line="27" pos:column="33">if <condition pos:line="27" pos:column="36">(<expr><call><name pos:line="27" pos:column="37">change_basedir<pos:position pos:line="27" pos:column="51"/></name> <argument_list pos:line="27" pos:column="52">(<argument><expr><name pos:line="27" pos:column="53">optarg<pos:position pos:line="27" pos:column="59"/></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call> <operator pos:line="27" pos:column="61">!=<pos:position pos:line="27" pos:column="63"/></operator> <literal type="number" pos:line="27" pos:column="64">0<pos:position pos:line="27" pos:column="65"/></literal></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="41">exit<pos:position pos:line="28" pos:column="45"/></name> <argument_list pos:line="28" pos:column="46">(<argument><expr><literal type="number" pos:line="28" pos:column="47">1<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt></block></then></if>
				<break pos:line="29" pos:column="33">break;<pos:position pos:line="29" pos:column="39"/></break>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">COLLECT_PING<pos:position pos:line="30" pos:column="17"/></name></expr></cpp:if>
			<case pos:line="31" pos:column="25">case <expr><literal type="char" pos:line="31" pos:column="30">'p'<pos:position pos:line="31" pos:column="33"/></literal></expr>:<pos:position pos:line="31" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">ping_add_host<pos:position pos:line="32" pos:column="46"/></name> <argument_list pos:line="32" pos:column="47">(<argument><expr><name pos:line="32" pos:column="48">optarg<pos:position pos:line="32" pos:column="54"/></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
				<break pos:line="33" pos:column="33">break;<pos:position pos:line="33" pos:column="39"/></break>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* COLLECT_PING */</comment>
			<case pos:line="35" pos:column="25">case <expr><literal type="char" pos:line="35" pos:column="30">'h'<pos:position pos:line="35" pos:column="33"/></literal></expr>:<pos:position pos:line="35" pos:column="34"/></case>
			<default pos:line="36" pos:column="25">default:<pos:position pos:line="36" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">exit_usage<pos:position pos:line="37" pos:column="43"/></name> <argument_list pos:line="37" pos:column="44">(<argument><expr><name><name pos:line="37" pos:column="45">argv<pos:position pos:line="37" pos:column="49"/></name><index pos:line="37" pos:column="49">[<expr><literal type="number" pos:line="37" pos:column="50">0<pos:position pos:line="37" pos:column="51"/></literal></expr>]<pos:position pos:line="37" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></switch>
				
	}<pos:position pos:line="40" pos:column="10"/></block></while>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">basedir<pos:position pos:line="42" pos:column="20"/></name><index pos:line="42" pos:column="20">[<expr><literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal></expr>]<pos:position pos:line="42" pos:column="23"/></index></name> <operator pos:line="42" pos:column="24">==<pos:position pos:line="42" pos:column="26"/></operator> <literal type="char" pos:line="42" pos:column="27">'\0'<pos:position pos:line="42" pos:column="31"/></literal></expr>)<pos:position pos:line="42" pos:column="32"/></condition><then pos:line="42" pos:column="32">
		<block type="pseudo"><if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">change_basedir<pos:position pos:line="43" pos:column="35"/></name> <argument_list pos:line="43" pos:column="36">(<argument><expr><literal type="string" pos:line="43" pos:column="37">"/var/lib/collectd"<pos:position pos:line="43" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call> <operator pos:line="43" pos:column="58">!=<pos:position pos:line="43" pos:column="60"/></operator> <literal type="number" pos:line="43" pos:column="61">0<pos:position pos:line="43" pos:column="62"/></literal></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">exit<pos:position pos:line="44" pos:column="29"/></name> <argument_list pos:line="44" pos:column="30">(<argument><expr><literal type="number" pos:line="44" pos:column="31">1<pos:position pos:line="44" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt></block></then></if></block></then></if>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">HAVE_LIBKSTAT<pos:position pos:line="46" pos:column="21"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="47" pos:column="9">kc<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <name pos:line="47" pos:column="14">NULL<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">update_kstat<pos:position pos:line="48" pos:column="21"/></name> <argument_list pos:line="48" pos:column="22">()<pos:position pos:line="48" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">ifdef<pos:position pos:line="51" pos:column="7"/></cpp:directive> <name pos:line="51" pos:column="8">HAVE_LIBSTATGRAB<pos:position pos:line="51" pos:column="24"/></name></cpp:ifdef>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">sg_init<pos:position pos:line="52" pos:column="20"/></name> <argument_list pos:line="52" pos:column="21">()<pos:position pos:line="52" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="24"/></condition><then pos:line="52" pos:column="24">
	<block pos:line="53" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">syslog<pos:position pos:line="54" pos:column="23"/></name> <argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">LOG_ERR<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="34">"sg_init: %s"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="49">sg_str_error<pos:position pos:line="54" pos:column="61"/></name> <argument_list pos:line="54" pos:column="62">(<argument><expr><call><name pos:line="54" pos:column="63">sg_get_error<pos:position pos:line="54" pos:column="75"/></name> <argument_list pos:line="54" pos:column="76">()<pos:position pos:line="54" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">exit<pos:position pos:line="55" pos:column="21"/></name> <argument_list pos:line="55" pos:column="22">(<argument><expr><literal type="number" pos:line="55" pos:column="23">2<pos:position pos:line="55" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">sg_drop_privileges<pos:position pos:line="58" pos:column="31"/></name> <argument_list pos:line="58" pos:column="32">()<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="35"/></condition><then pos:line="58" pos:column="35">
	<block pos:line="59" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">syslog<pos:position pos:line="60" pos:column="23"/></name> <argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">LOG_ERR<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="34">"sg_drop_privileges: %s"<pos:position pos:line="60" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="60">sg_str_error<pos:position pos:line="60" pos:column="72"/></name> <argument_list pos:line="60" pos:column="73">(<argument><expr><call><name pos:line="60" pos:column="74">sg_get_error<pos:position pos:line="60" pos:column="86"/></name> <argument_list pos:line="60" pos:column="87">()<pos:position pos:line="60" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="92"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">exit<pos:position pos:line="61" pos:column="21"/></name> <argument_list pos:line="61" pos:column="22">(<argument><expr><literal type="number" pos:line="61" pos:column="23">2<pos:position pos:line="61" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name pos:line="65" pos:column="9">init_all<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">()<pos:position pos:line="65" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="67" pos:column="9">sigIntAction<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">.<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="22">sa_handler<pos:position pos:line="67" pos:column="32"/></name></name> <operator pos:line="67" pos:column="33">=<pos:position pos:line="67" pos:column="34"/></operator> <name pos:line="67" pos:column="35">sigIntHandler<pos:position pos:line="67" pos:column="48"/></name></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">sigaction<pos:position pos:line="68" pos:column="18"/></name> <argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">SIGINT<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="28">&amp;<pos:position pos:line="68" pos:column="33"/></operator><name pos:line="68" pos:column="29">sigIntAction<pos:position pos:line="68" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">NULL<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="70" pos:column="9">sigChldAction<pos:position pos:line="70" pos:column="22"/></name><operator pos:line="70" pos:column="22">.<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="23">sa_handler<pos:position pos:line="70" pos:column="33"/></name></name> <operator pos:line="70" pos:column="34">=<pos:position pos:line="70" pos:column="35"/></operator> <name pos:line="70" pos:column="36">sigChldHandler<pos:position pos:line="70" pos:column="50"/></name></expr>;<pos:position pos:line="70" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">sigaction<pos:position pos:line="71" pos:column="18"/></name> <argument_list pos:line="71" pos:column="19">(<argument><expr><name pos:line="71" pos:column="20">SIGCHLD<pos:position pos:line="71" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="29">&amp;<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="30">sigChldAction<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="45">NULL<pos:position pos:line="71" pos:column="49"/></name></expr></argument>)<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>

<cpp:if pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">if<pos:position pos:line="73" pos:column="4"/></cpp:directive> <expr><name pos:line="73" pos:column="5">DEBUG<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">==<pos:position pos:line="73" pos:column="13"/></operator> <literal type="number" pos:line="73" pos:column="14">0<pos:position pos:line="73" pos:column="15"/></literal></expr></cpp:if>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><operator pos:line="74" pos:column="13">(<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">pid<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <call><name pos:line="74" pos:column="20">fork<pos:position pos:line="74" pos:column="24"/></name> <argument_list pos:line="74" pos:column="25">()<pos:position pos:line="74" pos:column="27"/></argument_list></call><operator pos:line="74" pos:column="27">)<pos:position pos:line="74" pos:column="28"/></operator> <operator pos:line="74" pos:column="29">==<pos:position pos:line="74" pos:column="31"/></operator> <operator pos:line="74" pos:column="32">-<pos:position pos:line="74" pos:column="33"/></operator><literal type="number" pos:line="74" pos:column="33">1<pos:position pos:line="74" pos:column="34"/></literal></expr>)<pos:position pos:line="74" pos:column="35"/></condition><then pos:line="74" pos:column="35">
	<block pos:line="75" pos:column="9">{
		<comment type="block" pos:line="76" pos:column="17">/* error */</comment>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">syslog<pos:position pos:line="77" pos:column="23"/></name> <argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">LOG_ERR<pos:position pos:line="77" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="34">"fork: %s"<pos:position pos:line="77" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="77" pos:column="46">strerror<pos:position pos:line="77" pos:column="54"/></name> <argument_list pos:line="77" pos:column="55">(<argument><expr><name pos:line="77" pos:column="56">errno<pos:position pos:line="77" pos:column="61"/></name></expr></argument>)<pos:position pos:line="77" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="64"/></expr_stmt>
		<return pos:line="78" pos:column="17">return <expr><operator pos:line="78" pos:column="24">(<pos:position pos:line="78" pos:column="25"/></operator><literal type="number" pos:line="78" pos:column="25">1<pos:position pos:line="78" pos:column="26"/></literal><operator pos:line="78" pos:column="26">)<pos:position pos:line="78" pos:column="27"/></operator></expr>;<pos:position pos:line="78" pos:column="28"/></return>
	}<pos:position pos:line="79" pos:column="10"/></block></then>
	<elseif pos:line="80" pos:column="9">else <if pos:line="80" pos:column="14">if <condition pos:line="80" pos:column="17">(<expr><name pos:line="80" pos:column="18">pid<pos:position pos:line="80" pos:column="21"/></name> <operator pos:line="80" pos:column="22">!=<pos:position pos:line="80" pos:column="24"/></operator> <literal type="number" pos:line="80" pos:column="25">0<pos:position pos:line="80" pos:column="26"/></literal></expr>)<pos:position pos:line="80" pos:column="27"/></condition><then pos:line="80" pos:column="27">
	<block pos:line="81" pos:column="9">{
		<comment type="block" pos:line="82" pos:column="17">/* parent */</comment>
		<comment type="block" pos:line="83" pos:column="17">/* printf ("Running (PID %i)\n", pid); */</comment>
		<return pos:line="84" pos:column="17">return <expr><operator pos:line="84" pos:column="24">(<pos:position pos:line="84" pos:column="25"/></operator><literal type="number" pos:line="84" pos:column="25">0<pos:position pos:line="84" pos:column="26"/></literal><operator pos:line="84" pos:column="26">)<pos:position pos:line="84" pos:column="27"/></operator></expr>;<pos:position pos:line="84" pos:column="28"/></return>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if></elseif></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="88" pos:column="9">/* child */</comment>
	<while pos:line="89" pos:column="9">while <condition pos:line="89" pos:column="15">(<expr><name pos:line="89" pos:column="16">loop<pos:position pos:line="89" pos:column="20"/></name> <operator pos:line="89" pos:column="21">==<pos:position pos:line="89" pos:column="23"/></operator> <literal type="number" pos:line="89" pos:column="24">0<pos:position pos:line="89" pos:column="25"/></literal></expr>)<pos:position pos:line="89" pos:column="26"/></condition>
	<block pos:line="90" pos:column="9">{
<cpp:if pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">if<pos:position pos:line="91" pos:column="4"/></cpp:directive> <expr><name pos:line="91" pos:column="5">DEBUG<pos:position pos:line="91" pos:column="10"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">fputs<pos:position pos:line="92" pos:column="22"/></name> <argument_list pos:line="92" pos:column="23">(<argument><expr><literal type="string" pos:line="92" pos:column="24">"Starting update\n"<pos:position pos:line="92" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="45">stdout<pos:position pos:line="92" pos:column="51"/></name></expr></argument>)<pos:position pos:line="92" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">ifdef<pos:position pos:line="95" pos:column="7"/></cpp:directive> <name pos:line="95" pos:column="8">HAVE_LIBKSTAT<pos:position pos:line="95" pos:column="21"/></name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="96" pos:column="17">update_kstat<pos:position pos:line="96" pos:column="29"/></name> <argument_list pos:line="96" pos:column="30">()<pos:position pos:line="96" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif<pos:position pos:line="97" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">if<pos:position pos:line="99" pos:column="4"/></cpp:directive> <expr><name pos:line="99" pos:column="5">COLLECT_CPU<pos:position pos:line="99" pos:column="16"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">cpu_update<pos:position pos:line="100" pos:column="27"/></name> <argument_list pos:line="100" pos:column="28">()<pos:position pos:line="100" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">if<pos:position pos:line="102" pos:column="4"/></cpp:directive> <expr><name pos:line="102" pos:column="5">COLLECT_DISK<pos:position pos:line="102" pos:column="17"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">diskstats_update<pos:position pos:line="103" pos:column="33"/></name> <argument_list pos:line="103" pos:column="34">()<pos:position pos:line="103" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">if<pos:position pos:line="105" pos:column="4"/></cpp:directive> <expr><name pos:line="105" pos:column="5">COLLECT_LOAD<pos:position pos:line="105" pos:column="17"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">load_update<pos:position pos:line="106" pos:column="28"/></name> <argument_list pos:line="106" pos:column="29">()<pos:position pos:line="106" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">if<pos:position pos:line="108" pos:column="4"/></cpp:directive> <expr><name pos:line="108" pos:column="5">COLLECT_MEMORY<pos:position pos:line="108" pos:column="19"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">mem_update<pos:position pos:line="109" pos:column="27"/></name> <argument_list pos:line="109" pos:column="28">()<pos:position pos:line="109" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">endif<pos:position pos:line="110" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">if<pos:position pos:line="111" pos:column="4"/></cpp:directive> <expr><name pos:line="111" pos:column="5">COLLECT_PING<pos:position pos:line="111" pos:column="17"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">ping_update<pos:position pos:line="112" pos:column="28"/></name> <argument_list pos:line="112" pos:column="29">()<pos:position pos:line="112" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">endif<pos:position pos:line="113" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">if<pos:position pos:line="114" pos:column="4"/></cpp:directive> <expr><name pos:line="114" pos:column="5">COLLECT_SENSORS<pos:position pos:line="114" pos:column="20"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">sensors_update<pos:position pos:line="115" pos:column="31"/></name> <argument_list pos:line="115" pos:column="32">()<pos:position pos:line="115" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">if<pos:position pos:line="117" pos:column="4"/></cpp:directive> <expr><name pos:line="117" pos:column="5">COLLECT_SWAP<pos:position pos:line="117" pos:column="17"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="118" pos:column="17">swap_update<pos:position pos:line="118" pos:column="28"/></name> <argument_list pos:line="118" pos:column="29">()<pos:position pos:line="118" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">endif<pos:position pos:line="119" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">if<pos:position pos:line="120" pos:column="4"/></cpp:directive> <expr><name pos:line="120" pos:column="5">COLLECT_TRAFFIC<pos:position pos:line="120" pos:column="20"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="121" pos:column="17">traffic_update<pos:position pos:line="121" pos:column="31"/></name> <argument_list pos:line="121" pos:column="32">()<pos:position pos:line="121" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif<pos:position pos:line="122" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">if<pos:position pos:line="124" pos:column="4"/></cpp:directive> <expr><name pos:line="124" pos:column="5">DEBUG<pos:position pos:line="124" pos:column="10"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="125" pos:column="17">fputs<pos:position pos:line="125" pos:column="22"/></name> <argument_list pos:line="125" pos:column="23">(<argument><expr><literal type="string" pos:line="125" pos:column="24">"Sleeping for 10 seconds\n"<pos:position pos:line="125" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="53">stdout<pos:position pos:line="125" pos:column="59"/></name></expr></argument>)<pos:position pos:line="125" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">endif<pos:position pos:line="126" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="127" pos:column="17">sleepingtime<pos:position pos:line="127" pos:column="29"/></name> <operator pos:line="127" pos:column="30">=<pos:position pos:line="127" pos:column="31"/></operator> <literal type="number" pos:line="127" pos:column="32">10<pos:position pos:line="127" pos:column="34"/></literal></expr>;<pos:position pos:line="127" pos:column="35"/></expr_stmt>
		<while pos:line="128" pos:column="17">while <condition pos:line="128" pos:column="23">(<expr><name pos:line="128" pos:column="24">sleepingtime<pos:position pos:line="128" pos:column="36"/></name> <operator pos:line="128" pos:column="37">!=<pos:position pos:line="128" pos:column="39"/></operator> <literal type="number" pos:line="128" pos:column="40">0<pos:position pos:line="128" pos:column="41"/></literal></expr>)<pos:position pos:line="128" pos:column="42"/></condition>
		<block pos:line="129" pos:column="17">{
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><name pos:line="130" pos:column="29">loop<pos:position pos:line="130" pos:column="33"/></name> <operator pos:line="130" pos:column="34">!=<pos:position pos:line="130" pos:column="36"/></operator> <literal type="number" pos:line="130" pos:column="37">0<pos:position pos:line="130" pos:column="38"/></literal></expr>)<pos:position pos:line="130" pos:column="39"/></condition><then pos:line="130" pos:column="39">
				<block type="pseudo"><break pos:line="131" pos:column="33">break;<pos:position pos:line="131" pos:column="39"/></break></block></then></if>

			<expr_stmt><expr><name pos:line="133" pos:column="25">sleepingtime<pos:position pos:line="133" pos:column="37"/></name> <operator pos:line="133" pos:column="38">=<pos:position pos:line="133" pos:column="39"/></operator> <call><name pos:line="133" pos:column="40">sleep<pos:position pos:line="133" pos:column="45"/></name> <argument_list pos:line="133" pos:column="46">(<argument><expr><name pos:line="133" pos:column="47">sleepingtime<pos:position pos:line="133" pos:column="59"/></name></expr></argument>)<pos:position pos:line="133" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="134" pos:column="18"/></block></while>
	}<pos:position pos:line="135" pos:column="10"/></block></while>

	<comment type="block" pos:line="137" pos:column="9">/* close syslog */</comment>
	<expr_stmt><expr><call><name pos:line="138" pos:column="9">closelog<pos:position pos:line="138" pos:column="17"/></name> <argument_list pos:line="138" pos:column="18">()<pos:position pos:line="138" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="21"/></expr_stmt>

	<return pos:line="140" pos:column="9">return <expr><operator pos:line="140" pos:column="16">(<pos:position pos:line="140" pos:column="17"/></operator><literal type="number" pos:line="140" pos:column="17">0<pos:position pos:line="140" pos:column="18"/></literal><operator pos:line="140" pos:column="18">)<pos:position pos:line="140" pos:column="19"/></operator></expr>;<pos:position pos:line="140" pos:column="20"/></return>
}<pos:position pos:line="141" pos:column="2"/></block></function></unit>
