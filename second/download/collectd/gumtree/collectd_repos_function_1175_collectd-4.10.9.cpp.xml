<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1175_collectd-4.10.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sigaction<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">sig_int_action<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sigaction<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">sig_term_action<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sigaction<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">sig_usr1_action<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">sigaction<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">sig_pipe_action<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">configfile<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">CONFIGFILE<pos:position pos:line="7" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">test_config<pos:position pos:line="8" pos:column="24"/></name>  <init pos:line="8" pos:column="26">= <expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">test_readall<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">basedir<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">COLLECT_DAEMON<pos:position pos:line="11" pos:column="19"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">sigaction<pos:position pos:line="12" pos:column="25"/></name></name></type> <name pos:line="12" pos:column="26">sig_chld_action<pos:position pos:line="12" pos:column="41"/></name></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">pid_t<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">pid<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">daemonize<pos:position pos:line="14" pos:column="22"/></name>    <init pos:line="14" pos:column="26">= <expr><literal type="number" pos:line="14" pos:column="28">1<pos:position pos:line="14" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">exit_status<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* read options */</comment>
	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>)<pos:position pos:line="19" pos:column="18"/></condition>
	<block pos:line="20" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">c<pos:position pos:line="21" pos:column="22"/></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="23" pos:column="17">c<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">getopt<pos:position pos:line="23" pos:column="27"/></name> <argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">argc<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">argv<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="41">"htTC:"<pos:position pos:line="23" pos:column="48"/></literal>
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">COLLECT_DAEMON<pos:position pos:line="24" pos:column="19"/></name></expr></cpp:if>
				<literal type="string" pos:line="25" pos:column="33">"fP:"<pos:position pos:line="25" pos:column="38"/></literal></expr></argument>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
		)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">c<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">==<pos:position pos:line="29" pos:column="25"/></operator> <operator pos:line="29" pos:column="26">-<pos:position pos:line="29" pos:column="27"/></operator><literal type="number" pos:line="29" pos:column="27">1<pos:position pos:line="29" pos:column="28"/></literal></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29">
			<block type="pseudo"><break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break></block></then></if>

		<switch pos:line="32" pos:column="17">switch <condition pos:line="32" pos:column="24">(<expr><name pos:line="32" pos:column="25">c<pos:position pos:line="32" pos:column="26"/></name></expr>)<pos:position pos:line="32" pos:column="27"/></condition>
		<block pos:line="33" pos:column="17">{
			<case pos:line="34" pos:column="25">case <expr><literal type="char" pos:line="34" pos:column="30">'C'<pos:position pos:line="34" pos:column="33"/></literal></expr>:<pos:position pos:line="34" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="35" pos:column="33">configfile<pos:position pos:line="35" pos:column="43"/></name> <operator pos:line="35" pos:column="44">=<pos:position pos:line="35" pos:column="45"/></operator> <name pos:line="35" pos:column="46">optarg<pos:position pos:line="35" pos:column="52"/></name></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt>
				<break pos:line="36" pos:column="33">break;<pos:position pos:line="36" pos:column="39"/></break>
			<case pos:line="37" pos:column="25">case <expr><literal type="char" pos:line="37" pos:column="30">'t'<pos:position pos:line="37" pos:column="33"/></literal></expr>:<pos:position pos:line="37" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="38" pos:column="33">test_config<pos:position pos:line="38" pos:column="44"/></name> <operator pos:line="38" pos:column="45">=<pos:position pos:line="38" pos:column="46"/></operator> <literal type="number" pos:line="38" pos:column="47">1<pos:position pos:line="38" pos:column="48"/></literal></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt>
				<break pos:line="39" pos:column="33">break;<pos:position pos:line="39" pos:column="39"/></break>
			<case pos:line="40" pos:column="25">case <expr><literal type="char" pos:line="40" pos:column="30">'T'<pos:position pos:line="40" pos:column="33"/></literal></expr>:<pos:position pos:line="40" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="41" pos:column="33">test_readall<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">=<pos:position pos:line="41" pos:column="47"/></operator> <literal type="number" pos:line="41" pos:column="48">1<pos:position pos:line="41" pos:column="49"/></literal></expr>;<pos:position pos:line="41" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">global_option_set<pos:position pos:line="42" pos:column="50"/></name> <argument_list pos:line="42" pos:column="51">(<argument><expr><literal type="string" pos:line="42" pos:column="52">"ReadThreads"<pos:position pos:line="42" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="67">"-1"<pos:position pos:line="42" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if<pos:position pos:line="43" pos:column="4"/></cpp:directive> <expr><name pos:line="43" pos:column="5">COLLECT_DAEMON<pos:position pos:line="43" pos:column="19"/></name></expr></cpp:if>
				<expr_stmt><expr><name pos:line="44" pos:column="33">daemonize<pos:position pos:line="44" pos:column="42"/></name> <operator pos:line="44" pos:column="43">=<pos:position pos:line="44" pos:column="44"/></operator> <literal type="number" pos:line="44" pos:column="45">0<pos:position pos:line="44" pos:column="46"/></literal></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="45" pos:column="8">/* COLLECT_DAEMON */</comment>
				<break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break>
<cpp:if pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">if<pos:position pos:line="47" pos:column="4"/></cpp:directive> <expr><name pos:line="47" pos:column="5">COLLECT_DAEMON<pos:position pos:line="47" pos:column="19"/></name></expr></cpp:if>
			<case pos:line="48" pos:column="25">case <expr><literal type="char" pos:line="48" pos:column="30">'P'<pos:position pos:line="48" pos:column="33"/></literal></expr>:<pos:position pos:line="48" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">global_option_set<pos:position pos:line="49" pos:column="50"/></name> <argument_list pos:line="49" pos:column="51">(<argument><expr><literal type="string" pos:line="49" pos:column="52">"PIDFile"<pos:position pos:line="49" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="63">optarg<pos:position pos:line="49" pos:column="69"/></name></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
				<break pos:line="50" pos:column="33">break;<pos:position pos:line="50" pos:column="39"/></break>
			<case pos:line="51" pos:column="25">case <expr><literal type="char" pos:line="51" pos:column="30">'f'<pos:position pos:line="51" pos:column="33"/></literal></expr>:<pos:position pos:line="51" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="52" pos:column="33">daemonize<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">=<pos:position pos:line="52" pos:column="44"/></operator> <literal type="number" pos:line="52" pos:column="45">0<pos:position pos:line="52" pos:column="46"/></literal></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
				<break pos:line="53" pos:column="33">break;<pos:position pos:line="53" pos:column="39"/></break>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="54" pos:column="8">/* COLLECT_DAEMON */</comment>
			<case pos:line="55" pos:column="25">case <expr><literal type="char" pos:line="55" pos:column="30">'h'<pos:position pos:line="55" pos:column="33"/></literal></expr>:<pos:position pos:line="55" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">exit_usage<pos:position pos:line="56" pos:column="43"/></name> <argument_list pos:line="56" pos:column="44">(<argument><expr><literal type="number" pos:line="56" pos:column="45">0<pos:position pos:line="56" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="48"/></expr_stmt>
				<break pos:line="57" pos:column="33">break;<pos:position pos:line="57" pos:column="39"/></break>
			<default pos:line="58" pos:column="25">default:<pos:position pos:line="58" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">exit_usage<pos:position pos:line="59" pos:column="43"/></name> <argument_list pos:line="59" pos:column="44">(<argument><expr><literal type="number" pos:line="59" pos:column="45">1<pos:position pos:line="59" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></switch> <comment type="block" pos:line="60" pos:column="19">/* switch (c) */</comment>
	}<pos:position pos:line="61" pos:column="10"/></block></while> <comment type="block" pos:line="61" pos:column="11">/* while (1) */</comment>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">optind<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">&lt;<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="22">argc<pos:position pos:line="63" pos:column="26"/></name></expr>)<pos:position pos:line="63" pos:column="27"/></condition><then pos:line="63" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">exit_usage<pos:position pos:line="64" pos:column="27"/></name> <argument_list pos:line="64" pos:column="28">(<argument><expr><literal type="number" pos:line="64" pos:column="29">1<pos:position pos:line="64" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="66" pos:column="9">/*
	 * Read options from the config file, the environment and the command
	 * line (in that order, with later options overwriting previous ones in
	 * general).
	 * Also, this will automatically load modules.
	 */</comment>
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">cf_read<pos:position pos:line="72" pos:column="20"/></name> <argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">configfile<pos:position pos:line="72" pos:column="32"/></name></expr></argument>)<pos:position pos:line="72" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="34"/></condition><then pos:line="72" pos:column="34">
	<block pos:line="73" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">fprintf<pos:position pos:line="74" pos:column="24"/></name> <argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">stderr<pos:position pos:line="74" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="34">"Error: Reading the config file failed!\n"<pos:position pos:line="74" pos:column="76"/></literal>
				<literal type="string" pos:line="75" pos:column="33">"Read the syslog for details.\n"<pos:position pos:line="75" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="67"/></expr_stmt>
		<return pos:line="76" pos:column="17">return <expr><operator pos:line="76" pos:column="24">(<pos:position pos:line="76" pos:column="25"/></operator><literal type="number" pos:line="76" pos:column="25">1<pos:position pos:line="76" pos:column="26"/></literal><operator pos:line="76" pos:column="26">)<pos:position pos:line="76" pos:column="27"/></operator></expr>;<pos:position pos:line="76" pos:column="28"/></return>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="79" pos:column="9">/*
	 * Change directory. We do this _after_ reading the config and loading
	 * modules to relative paths work as expected.
	 */</comment>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><operator pos:line="83" pos:column="13">(<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="14">basedir<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <call><name pos:line="83" pos:column="24">global_option_get<pos:position pos:line="83" pos:column="41"/></name> <argument_list pos:line="83" pos:column="42">(<argument><expr><literal type="string" pos:line="83" pos:column="43">"BaseDir"<pos:position pos:line="83" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></call><operator pos:line="83" pos:column="53">)<pos:position pos:line="83" pos:column="54"/></operator> <operator pos:line="83" pos:column="55">==<pos:position pos:line="83" pos:column="57"/></operator> <name pos:line="83" pos:column="58">NULL<pos:position pos:line="83" pos:column="62"/></name></expr>)<pos:position pos:line="83" pos:column="63"/></condition><then pos:line="83" pos:column="63">
	<block pos:line="84" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">fprintf<pos:position pos:line="85" pos:column="24"/></name> <argument_list pos:line="85" pos:column="25">(<argument><expr><name pos:line="85" pos:column="26">stderr<pos:position pos:line="85" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="34">"Don't have a basedir to use. This should not happen. Ever."<pos:position pos:line="85" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="96"/></expr_stmt>
		<return pos:line="86" pos:column="17">return <expr><operator pos:line="86" pos:column="24">(<pos:position pos:line="86" pos:column="25"/></operator><literal type="number" pos:line="86" pos:column="25">1<pos:position pos:line="86" pos:column="26"/></literal><operator pos:line="86" pos:column="26">)<pos:position pos:line="86" pos:column="27"/></operator></expr>;<pos:position pos:line="86" pos:column="28"/></return>
	}<pos:position pos:line="87" pos:column="10"/></block></then>
	<elseif pos:line="88" pos:column="9">else <if pos:line="88" pos:column="14">if <condition pos:line="88" pos:column="17">(<expr><call><name pos:line="88" pos:column="18">change_basedir<pos:position pos:line="88" pos:column="32"/></name> <argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">basedir<pos:position pos:line="88" pos:column="41"/></name></expr></argument>)<pos:position pos:line="88" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="43"/></condition><then pos:line="88" pos:column="43">
	<block pos:line="89" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">fprintf<pos:position pos:line="90" pos:column="24"/></name> <argument_list pos:line="90" pos:column="25">(<argument><expr><name pos:line="90" pos:column="26">stderr<pos:position pos:line="90" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="34">"Error: Unable to change to directory `%s'.\n"<pos:position pos:line="90" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="82">basedir<pos:position pos:line="90" pos:column="89"/></name></expr></argument>)<pos:position pos:line="90" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="91"/></expr_stmt>
		<return pos:line="91" pos:column="17">return <expr><operator pos:line="91" pos:column="24">(<pos:position pos:line="91" pos:column="25"/></operator><literal type="number" pos:line="91" pos:column="25">1<pos:position pos:line="91" pos:column="26"/></literal><operator pos:line="91" pos:column="26">)<pos:position pos:line="91" pos:column="27"/></operator></expr>;<pos:position pos:line="91" pos:column="28"/></return>
	}<pos:position pos:line="92" pos:column="10"/></block></then></if></elseif></if>

	<comment type="block" pos:line="94" pos:column="9">/*
	 * Set global variables or, if that failes, exit. We cannot run with
	 * them being uninitialized. If nothing is configured, then defaults
	 * are being used. So this means that the user has actually done
	 * something wrong.
	 */</comment>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><call><name pos:line="100" pos:column="13">init_global_variables<pos:position pos:line="100" pos:column="34"/></name> <argument_list pos:line="100" pos:column="35">()<pos:position pos:line="100" pos:column="37"/></argument_list></call> <operator pos:line="100" pos:column="38">!=<pos:position pos:line="100" pos:column="40"/></operator> <literal type="number" pos:line="100" pos:column="41">0<pos:position pos:line="100" pos:column="42"/></literal></expr>)<pos:position pos:line="100" pos:column="43"/></condition><then pos:line="100" pos:column="43">
		<block type="pseudo"><return pos:line="101" pos:column="17">return <expr><operator pos:line="101" pos:column="24">(<pos:position pos:line="101" pos:column="25"/></operator><literal type="number" pos:line="101" pos:column="25">1<pos:position pos:line="101" pos:column="26"/></literal><operator pos:line="101" pos:column="26">)<pos:position pos:line="101" pos:column="27"/></operator></expr>;<pos:position pos:line="101" pos:column="28"/></return></block></then></if>

	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">test_config<pos:position pos:line="103" pos:column="24"/></name></expr>)<pos:position pos:line="103" pos:column="25"/></condition><then pos:line="103" pos:column="25">
		<block type="pseudo"><return pos:line="104" pos:column="17">return <expr><operator pos:line="104" pos:column="24">(<pos:position pos:line="104" pos:column="25"/></operator><literal type="number" pos:line="104" pos:column="25">0<pos:position pos:line="104" pos:column="26"/></literal><operator pos:line="104" pos:column="26">)<pos:position pos:line="104" pos:column="27"/></operator></expr>;<pos:position pos:line="104" pos:column="28"/></return></block></then></if>

<cpp:if pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">if<pos:position pos:line="106" pos:column="4"/></cpp:directive> <expr><name pos:line="106" pos:column="5">COLLECT_DAEMON<pos:position pos:line="106" pos:column="19"/></name></expr></cpp:if>
	<comment type="block" pos:line="107" pos:column="9">/*
	 * fork off child
	 */</comment>
	<expr_stmt><expr><call><name pos:line="110" pos:column="9">memset<pos:position pos:line="110" pos:column="15"/></name> <argument_list pos:line="110" pos:column="16">(<argument><expr><operator pos:line="110" pos:column="17">&amp;<pos:position pos:line="110" pos:column="22"/></operator><name pos:line="110" pos:column="18">sig_chld_action<pos:position pos:line="110" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="110" pos:column="35">'\0'<pos:position pos:line="110" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="41">sizeof <argument_list pos:line="110" pos:column="48">(<argument><expr><name pos:line="110" pos:column="49">sig_chld_action<pos:position pos:line="110" pos:column="64"/></name></expr></argument>)<pos:position pos:line="110" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="110" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="111" pos:column="9">sig_chld_action<pos:position pos:line="111" pos:column="24"/></name><operator pos:line="111" pos:column="24">.<pos:position pos:line="111" pos:column="25"/></operator><name pos:line="111" pos:column="25">sa_handler<pos:position pos:line="111" pos:column="35"/></name></name> <operator pos:line="111" pos:column="36">=<pos:position pos:line="111" pos:column="37"/></operator> <name pos:line="111" pos:column="38">SIG_IGN<pos:position pos:line="111" pos:column="45"/></name></expr>;<pos:position pos:line="111" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">sigaction<pos:position pos:line="112" pos:column="18"/></name> <argument_list pos:line="112" pos:column="19">(<argument><expr><name pos:line="112" pos:column="20">SIGCHLD<pos:position pos:line="112" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="29">&amp;<pos:position pos:line="112" pos:column="34"/></operator><name pos:line="112" pos:column="30">sig_chld_action<pos:position pos:line="112" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="47">NULL<pos:position pos:line="112" pos:column="51"/></name></expr></argument>)<pos:position pos:line="112" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="53"/></expr_stmt>

	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">daemonize<pos:position pos:line="114" pos:column="22"/></name></expr>)<pos:position pos:line="114" pos:column="23"/></condition><then pos:line="114" pos:column="23">
	<block pos:line="115" pos:column="9">{
		<if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><operator pos:line="116" pos:column="21">(<pos:position pos:line="116" pos:column="22"/></operator><name pos:line="116" pos:column="22">pid<pos:position pos:line="116" pos:column="25"/></name> <operator pos:line="116" pos:column="26">=<pos:position pos:line="116" pos:column="27"/></operator> <call><name pos:line="116" pos:column="28">fork<pos:position pos:line="116" pos:column="32"/></name> <argument_list pos:line="116" pos:column="33">()<pos:position pos:line="116" pos:column="35"/></argument_list></call><operator pos:line="116" pos:column="35">)<pos:position pos:line="116" pos:column="36"/></operator> <operator pos:line="116" pos:column="37">==<pos:position pos:line="116" pos:column="39"/></operator> <operator pos:line="116" pos:column="40">-<pos:position pos:line="116" pos:column="41"/></operator><literal type="number" pos:line="116" pos:column="41">1<pos:position pos:line="116" pos:column="42"/></literal></expr>)<pos:position pos:line="116" pos:column="43"/></condition><then pos:line="116" pos:column="43">
		<block pos:line="117" pos:column="17">{
			<comment type="block" pos:line="118" pos:column="25">/* error */</comment>
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">char<pos:position pos:line="119" pos:column="29"/></name></type> <name><name pos:line="119" pos:column="30">errbuf<pos:position pos:line="119" pos:column="36"/></name><index pos:line="119" pos:column="36">[<expr><literal type="number" pos:line="119" pos:column="37">1024<pos:position pos:line="119" pos:column="41"/></literal></expr>]<pos:position pos:line="119" pos:column="42"/></index></name></decl>;<pos:position pos:line="119" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">fprintf<pos:position pos:line="120" pos:column="32"/></name> <argument_list pos:line="120" pos:column="33">(<argument><expr><name pos:line="120" pos:column="34">stderr<pos:position pos:line="120" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="42">"fork: %s"<pos:position pos:line="120" pos:column="52"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="121" pos:column="41">sstrerror<pos:position pos:line="121" pos:column="50"/></name> <argument_list pos:line="121" pos:column="51">(<argument><expr><name pos:line="121" pos:column="52">errno<pos:position pos:line="121" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="59">errbuf<pos:position pos:line="121" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="122" pos:column="49">sizeof <argument_list pos:line="122" pos:column="56">(<argument><expr><name pos:line="122" pos:column="57">errbuf<pos:position pos:line="122" pos:column="63"/></name></expr></argument>)<pos:position pos:line="122" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="122" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="122" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="67"/></expr_stmt>
			<return pos:line="123" pos:column="25">return <expr><operator pos:line="123" pos:column="32">(<pos:position pos:line="123" pos:column="33"/></operator><literal type="number" pos:line="123" pos:column="33">1<pos:position pos:line="123" pos:column="34"/></literal><operator pos:line="123" pos:column="34">)<pos:position pos:line="123" pos:column="35"/></operator></expr>;<pos:position pos:line="123" pos:column="36"/></return>
		}<pos:position pos:line="124" pos:column="18"/></block></then>
		<elseif pos:line="125" pos:column="17">else <if pos:line="125" pos:column="22">if <condition pos:line="125" pos:column="25">(<expr><name pos:line="125" pos:column="26">pid<pos:position pos:line="125" pos:column="29"/></name> <operator pos:line="125" pos:column="30">!=<pos:position pos:line="125" pos:column="32"/></operator> <literal type="number" pos:line="125" pos:column="33">0<pos:position pos:line="125" pos:column="34"/></literal></expr>)<pos:position pos:line="125" pos:column="35"/></condition><then pos:line="125" pos:column="35">
		<block pos:line="126" pos:column="17">{
			<comment type="block" pos:line="127" pos:column="25">/* parent */</comment>
			<comment type="block" pos:line="128" pos:column="25">/* printf ("Running (PID %i)\n", pid); */</comment>
			<return pos:line="129" pos:column="25">return <expr><operator pos:line="129" pos:column="32">(<pos:position pos:line="129" pos:column="33"/></operator><literal type="number" pos:line="129" pos:column="33">0<pos:position pos:line="129" pos:column="34"/></literal><operator pos:line="129" pos:column="34">)<pos:position pos:line="129" pos:column="35"/></operator></expr>;<pos:position pos:line="129" pos:column="36"/></return>
		}<pos:position pos:line="130" pos:column="18"/></block></then></if></elseif></if>

		<comment type="block" pos:line="132" pos:column="17">/* Detach from session */</comment>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">setsid<pos:position pos:line="133" pos:column="23"/></name> <argument_list pos:line="133" pos:column="24">()<pos:position pos:line="133" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="27"/></expr_stmt>

		<comment type="block" pos:line="135" pos:column="17">/* Write pidfile */</comment>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><call><name pos:line="136" pos:column="21">pidfile_create<pos:position pos:line="136" pos:column="35"/></name> <argument_list pos:line="136" pos:column="36">()<pos:position pos:line="136" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="39"/></condition><then pos:line="136" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="137" pos:column="25">exit<pos:position pos:line="137" pos:column="29"/></name> <argument_list pos:line="137" pos:column="30">(<argument><expr><literal type="number" pos:line="137" pos:column="31">2<pos:position pos:line="137" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="34"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="139" pos:column="17">/* close standard descriptors */</comment>
		<expr_stmt><expr><call><name pos:line="140" pos:column="17">close<pos:position pos:line="140" pos:column="22"/></name> <argument_list pos:line="140" pos:column="23">(<argument><expr><literal type="number" pos:line="140" pos:column="24">2<pos:position pos:line="140" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="141" pos:column="17">close<pos:position pos:line="141" pos:column="22"/></name> <argument_list pos:line="141" pos:column="23">(<argument><expr><literal type="number" pos:line="141" pos:column="24">1<pos:position pos:line="141" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="142" pos:column="17">close<pos:position pos:line="142" pos:column="22"/></name> <argument_list pos:line="142" pos:column="23">(<argument><expr><literal type="number" pos:line="142" pos:column="24">0<pos:position pos:line="142" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="27"/></expr_stmt>

		<if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><call><name pos:line="144" pos:column="21">open<pos:position pos:line="144" pos:column="25"/></name> <argument_list pos:line="144" pos:column="26">(<argument><expr><literal type="string" pos:line="144" pos:column="27">"/dev/null"<pos:position pos:line="144" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="40">O_RDWR<pos:position pos:line="144" pos:column="46"/></name></expr></argument>)<pos:position pos:line="144" pos:column="47"/></argument_list></call> <operator pos:line="144" pos:column="48">!=<pos:position pos:line="144" pos:column="50"/></operator> <literal type="number" pos:line="144" pos:column="51">0<pos:position pos:line="144" pos:column="52"/></literal></expr>)<pos:position pos:line="144" pos:column="53"/></condition><then pos:line="144" pos:column="53">
		<block pos:line="145" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="146" pos:column="25">ERROR<pos:position pos:line="146" pos:column="30"/></name> <argument_list pos:line="146" pos:column="31">(<argument><expr><literal type="string" pos:line="146" pos:column="32">"Error: Could not connect `STDIN' to `/dev/null'"<pos:position pos:line="146" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="83"/></expr_stmt>
			<return pos:line="147" pos:column="25">return <expr><operator pos:line="147" pos:column="32">(<pos:position pos:line="147" pos:column="33"/></operator><literal type="number" pos:line="147" pos:column="33">1<pos:position pos:line="147" pos:column="34"/></literal><operator pos:line="147" pos:column="34">)<pos:position pos:line="147" pos:column="35"/></operator></expr>;<pos:position pos:line="147" pos:column="36"/></return>
		}<pos:position pos:line="148" pos:column="18"/></block></then></if>
		<if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><call><name pos:line="149" pos:column="21">dup<pos:position pos:line="149" pos:column="24"/></name> <argument_list pos:line="149" pos:column="25">(<argument><expr><literal type="number" pos:line="149" pos:column="26">0<pos:position pos:line="149" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="28"/></argument_list></call> <operator pos:line="149" pos:column="29">!=<pos:position pos:line="149" pos:column="31"/></operator> <literal type="number" pos:line="149" pos:column="32">1<pos:position pos:line="149" pos:column="33"/></literal></expr>)<pos:position pos:line="149" pos:column="34"/></condition><then pos:line="149" pos:column="34">
		<block pos:line="150" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="151" pos:column="25">ERROR<pos:position pos:line="151" pos:column="30"/></name> <argument_list pos:line="151" pos:column="31">(<argument><expr><literal type="string" pos:line="151" pos:column="32">"Error: Could not connect `STDOUT' to `/dev/null'"<pos:position pos:line="151" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="84"/></expr_stmt>
			<return pos:line="152" pos:column="25">return <expr><operator pos:line="152" pos:column="32">(<pos:position pos:line="152" pos:column="33"/></operator><literal type="number" pos:line="152" pos:column="33">1<pos:position pos:line="152" pos:column="34"/></literal><operator pos:line="152" pos:column="34">)<pos:position pos:line="152" pos:column="35"/></operator></expr>;<pos:position pos:line="152" pos:column="36"/></return>
		}<pos:position pos:line="153" pos:column="18"/></block></then></if>
		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><call><name pos:line="154" pos:column="21">dup<pos:position pos:line="154" pos:column="24"/></name> <argument_list pos:line="154" pos:column="25">(<argument><expr><literal type="number" pos:line="154" pos:column="26">0<pos:position pos:line="154" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="28"/></argument_list></call> <operator pos:line="154" pos:column="29">!=<pos:position pos:line="154" pos:column="31"/></operator> <literal type="number" pos:line="154" pos:column="32">2<pos:position pos:line="154" pos:column="33"/></literal></expr>)<pos:position pos:line="154" pos:column="34"/></condition><then pos:line="154" pos:column="34">
		<block pos:line="155" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="156" pos:column="25">ERROR<pos:position pos:line="156" pos:column="30"/></name> <argument_list pos:line="156" pos:column="31">(<argument><expr><literal type="string" pos:line="156" pos:column="32">"Error: Could not connect `STDERR' to `/dev/null'"<pos:position pos:line="156" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="84"/></expr_stmt>
			<return pos:line="157" pos:column="25">return <expr><operator pos:line="157" pos:column="32">(<pos:position pos:line="157" pos:column="33"/></operator><literal type="number" pos:line="157" pos:column="33">1<pos:position pos:line="157" pos:column="34"/></literal><operator pos:line="157" pos:column="34">)<pos:position pos:line="157" pos:column="35"/></operator></expr>;<pos:position pos:line="157" pos:column="36"/></return>
		}<pos:position pos:line="158" pos:column="18"/></block></then></if>
	}<pos:position pos:line="159" pos:column="10"/></block></then></if> <comment type="block" pos:line="159" pos:column="11">/* if (daemonize) */</comment>
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="160" pos:column="8">/* COLLECT_DAEMON */</comment>

	<expr_stmt><expr><call><name pos:line="162" pos:column="9">memset<pos:position pos:line="162" pos:column="15"/></name> <argument_list pos:line="162" pos:column="16">(<argument><expr><operator pos:line="162" pos:column="17">&amp;<pos:position pos:line="162" pos:column="22"/></operator><name pos:line="162" pos:column="18">sig_pipe_action<pos:position pos:line="162" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="162" pos:column="35">'\0'<pos:position pos:line="162" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="162" pos:column="41">sizeof <argument_list pos:line="162" pos:column="48">(<argument><expr><name pos:line="162" pos:column="49">sig_pipe_action<pos:position pos:line="162" pos:column="64"/></name></expr></argument>)<pos:position pos:line="162" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="162" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="163" pos:column="9">sig_pipe_action<pos:position pos:line="163" pos:column="24"/></name><operator pos:line="163" pos:column="24">.<pos:position pos:line="163" pos:column="25"/></operator><name pos:line="163" pos:column="25">sa_handler<pos:position pos:line="163" pos:column="35"/></name></name> <operator pos:line="163" pos:column="36">=<pos:position pos:line="163" pos:column="37"/></operator> <name pos:line="163" pos:column="38">SIG_IGN<pos:position pos:line="163" pos:column="45"/></name></expr>;<pos:position pos:line="163" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="164" pos:column="9">sigaction<pos:position pos:line="164" pos:column="18"/></name> <argument_list pos:line="164" pos:column="19">(<argument><expr><name pos:line="164" pos:column="20">SIGPIPE<pos:position pos:line="164" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="164" pos:column="29">&amp;<pos:position pos:line="164" pos:column="34"/></operator><name pos:line="164" pos:column="30">sig_pipe_action<pos:position pos:line="164" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="47">NULL<pos:position pos:line="164" pos:column="51"/></name></expr></argument>)<pos:position pos:line="164" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="166" pos:column="9">/*
	 * install signal handlers
	 */</comment>
	<expr_stmt><expr><call><name pos:line="169" pos:column="9">memset<pos:position pos:line="169" pos:column="15"/></name> <argument_list pos:line="169" pos:column="16">(<argument><expr><operator pos:line="169" pos:column="17">&amp;<pos:position pos:line="169" pos:column="22"/></operator><name pos:line="169" pos:column="18">sig_int_action<pos:position pos:line="169" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="169" pos:column="34">'\0'<pos:position pos:line="169" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="169" pos:column="40">sizeof <argument_list pos:line="169" pos:column="47">(<argument><expr><name pos:line="169" pos:column="48">sig_int_action<pos:position pos:line="169" pos:column="62"/></name></expr></argument>)<pos:position pos:line="169" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="169" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="170" pos:column="9">sig_int_action<pos:position pos:line="170" pos:column="23"/></name><operator pos:line="170" pos:column="23">.<pos:position pos:line="170" pos:column="24"/></operator><name pos:line="170" pos:column="24">sa_handler<pos:position pos:line="170" pos:column="34"/></name></name> <operator pos:line="170" pos:column="35">=<pos:position pos:line="170" pos:column="36"/></operator> <name pos:line="170" pos:column="37">sig_int_handler<pos:position pos:line="170" pos:column="52"/></name></expr>;<pos:position pos:line="170" pos:column="53"/></expr_stmt>
	<if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><literal type="number" pos:line="171" pos:column="13">0<pos:position pos:line="171" pos:column="14"/></literal> <operator pos:line="171" pos:column="15">!=<pos:position pos:line="171" pos:column="17"/></operator> <call><name pos:line="171" pos:column="18">sigaction<pos:position pos:line="171" pos:column="27"/></name> <argument_list pos:line="171" pos:column="28">(<argument><expr><name pos:line="171" pos:column="29">SIGINT<pos:position pos:line="171" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="37">&amp;<pos:position pos:line="171" pos:column="42"/></operator><name pos:line="171" pos:column="38">sig_int_action<pos:position pos:line="171" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="54">NULL<pos:position pos:line="171" pos:column="58"/></name></expr></argument>)<pos:position pos:line="171" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="171" pos:column="60"/></condition><then pos:line="171" pos:column="60"> <block pos:line="171" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">char<pos:position pos:line="172" pos:column="21"/></name></type> <name><name pos:line="172" pos:column="22">errbuf<pos:position pos:line="172" pos:column="28"/></name><index pos:line="172" pos:column="28">[<expr><literal type="number" pos:line="172" pos:column="29">1024<pos:position pos:line="172" pos:column="33"/></literal></expr>]<pos:position pos:line="172" pos:column="34"/></index></name></decl>;<pos:position pos:line="172" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="173" pos:column="17">ERROR<pos:position pos:line="173" pos:column="22"/></name> <argument_list pos:line="173" pos:column="23">(<argument><expr><literal type="string" pos:line="173" pos:column="24">"Error: Failed to install a signal handler for signal INT: %s"<pos:position pos:line="173" pos:column="86"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="174" pos:column="33">sstrerror<pos:position pos:line="174" pos:column="42"/></name> <argument_list pos:line="174" pos:column="43">(<argument><expr><name pos:line="174" pos:column="44">errno<pos:position pos:line="174" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="51">errbuf<pos:position pos:line="174" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="174" pos:column="59">sizeof <argument_list pos:line="174" pos:column="66">(<argument><expr><name pos:line="174" pos:column="67">errbuf<pos:position pos:line="174" pos:column="73"/></name></expr></argument>)<pos:position pos:line="174" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="174" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="174" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="77"/></expr_stmt>
		<return pos:line="175" pos:column="17">return <expr><operator pos:line="175" pos:column="24">(<pos:position pos:line="175" pos:column="25"/></operator><literal type="number" pos:line="175" pos:column="25">1<pos:position pos:line="175" pos:column="26"/></literal><operator pos:line="175" pos:column="26">)<pos:position pos:line="175" pos:column="27"/></operator></expr>;<pos:position pos:line="175" pos:column="28"/></return>
	}<pos:position pos:line="176" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="178" pos:column="9">memset<pos:position pos:line="178" pos:column="15"/></name> <argument_list pos:line="178" pos:column="16">(<argument><expr><operator pos:line="178" pos:column="17">&amp;<pos:position pos:line="178" pos:column="22"/></operator><name pos:line="178" pos:column="18">sig_term_action<pos:position pos:line="178" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="178" pos:column="35">'\0'<pos:position pos:line="178" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="178" pos:column="41">sizeof <argument_list pos:line="178" pos:column="48">(<argument><expr><name pos:line="178" pos:column="49">sig_term_action<pos:position pos:line="178" pos:column="64"/></name></expr></argument>)<pos:position pos:line="178" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="178" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="179" pos:column="9">sig_term_action<pos:position pos:line="179" pos:column="24"/></name><operator pos:line="179" pos:column="24">.<pos:position pos:line="179" pos:column="25"/></operator><name pos:line="179" pos:column="25">sa_handler<pos:position pos:line="179" pos:column="35"/></name></name> <operator pos:line="179" pos:column="36">=<pos:position pos:line="179" pos:column="37"/></operator> <name pos:line="179" pos:column="38">sig_term_handler<pos:position pos:line="179" pos:column="54"/></name></expr>;<pos:position pos:line="179" pos:column="55"/></expr_stmt>
	<if pos:line="180" pos:column="9">if <condition pos:line="180" pos:column="12">(<expr><literal type="number" pos:line="180" pos:column="13">0<pos:position pos:line="180" pos:column="14"/></literal> <operator pos:line="180" pos:column="15">!=<pos:position pos:line="180" pos:column="17"/></operator> <call><name pos:line="180" pos:column="18">sigaction<pos:position pos:line="180" pos:column="27"/></name> <argument_list pos:line="180" pos:column="28">(<argument><expr><name pos:line="180" pos:column="29">SIGTERM<pos:position pos:line="180" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="38">&amp;<pos:position pos:line="180" pos:column="43"/></operator><name pos:line="180" pos:column="39">sig_term_action<pos:position pos:line="180" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="56">NULL<pos:position pos:line="180" pos:column="60"/></name></expr></argument>)<pos:position pos:line="180" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="180" pos:column="62"/></condition><then pos:line="180" pos:column="62"> <block pos:line="180" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">char<pos:position pos:line="181" pos:column="21"/></name></type> <name><name pos:line="181" pos:column="22">errbuf<pos:position pos:line="181" pos:column="28"/></name><index pos:line="181" pos:column="28">[<expr><literal type="number" pos:line="181" pos:column="29">1024<pos:position pos:line="181" pos:column="33"/></literal></expr>]<pos:position pos:line="181" pos:column="34"/></index></name></decl>;<pos:position pos:line="181" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="182" pos:column="17">ERROR<pos:position pos:line="182" pos:column="22"/></name> <argument_list pos:line="182" pos:column="23">(<argument><expr><literal type="string" pos:line="182" pos:column="24">"Error: Failed to install a signal handler for signal TERM: %s"<pos:position pos:line="182" pos:column="87"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="183" pos:column="33">sstrerror<pos:position pos:line="183" pos:column="42"/></name> <argument_list pos:line="183" pos:column="43">(<argument><expr><name pos:line="183" pos:column="44">errno<pos:position pos:line="183" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="51">errbuf<pos:position pos:line="183" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="183" pos:column="59">sizeof <argument_list pos:line="183" pos:column="66">(<argument><expr><name pos:line="183" pos:column="67">errbuf<pos:position pos:line="183" pos:column="73"/></name></expr></argument>)<pos:position pos:line="183" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="183" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="183" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="77"/></expr_stmt>
		<return pos:line="184" pos:column="17">return <expr><operator pos:line="184" pos:column="24">(<pos:position pos:line="184" pos:column="25"/></operator><literal type="number" pos:line="184" pos:column="25">1<pos:position pos:line="184" pos:column="26"/></literal><operator pos:line="184" pos:column="26">)<pos:position pos:line="184" pos:column="27"/></operator></expr>;<pos:position pos:line="184" pos:column="28"/></return>
	}<pos:position pos:line="185" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="187" pos:column="9">memset<pos:position pos:line="187" pos:column="15"/></name> <argument_list pos:line="187" pos:column="16">(<argument><expr><operator pos:line="187" pos:column="17">&amp;<pos:position pos:line="187" pos:column="22"/></operator><name pos:line="187" pos:column="18">sig_usr1_action<pos:position pos:line="187" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="187" pos:column="35">'\0'<pos:position pos:line="187" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="187" pos:column="41">sizeof <argument_list pos:line="187" pos:column="48">(<argument><expr><name pos:line="187" pos:column="49">sig_usr1_action<pos:position pos:line="187" pos:column="64"/></name></expr></argument>)<pos:position pos:line="187" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="187" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="188" pos:column="9">sig_usr1_action<pos:position pos:line="188" pos:column="24"/></name><operator pos:line="188" pos:column="24">.<pos:position pos:line="188" pos:column="25"/></operator><name pos:line="188" pos:column="25">sa_handler<pos:position pos:line="188" pos:column="35"/></name></name> <operator pos:line="188" pos:column="36">=<pos:position pos:line="188" pos:column="37"/></operator> <name pos:line="188" pos:column="38">sig_usr1_handler<pos:position pos:line="188" pos:column="54"/></name></expr>;<pos:position pos:line="188" pos:column="55"/></expr_stmt>
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><literal type="number" pos:line="189" pos:column="13">0<pos:position pos:line="189" pos:column="14"/></literal> <operator pos:line="189" pos:column="15">!=<pos:position pos:line="189" pos:column="17"/></operator> <call><name pos:line="189" pos:column="18">sigaction<pos:position pos:line="189" pos:column="27"/></name> <argument_list pos:line="189" pos:column="28">(<argument><expr><name pos:line="189" pos:column="29">SIGUSR1<pos:position pos:line="189" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="189" pos:column="38">&amp;<pos:position pos:line="189" pos:column="43"/></operator><name pos:line="189" pos:column="39">sig_usr1_action<pos:position pos:line="189" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="56">NULL<pos:position pos:line="189" pos:column="60"/></name></expr></argument>)<pos:position pos:line="189" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="189" pos:column="62"/></condition><then pos:line="189" pos:column="62"> <block pos:line="189" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="190" pos:column="17">char<pos:position pos:line="190" pos:column="21"/></name></type> <name><name pos:line="190" pos:column="22">errbuf<pos:position pos:line="190" pos:column="28"/></name><index pos:line="190" pos:column="28">[<expr><literal type="number" pos:line="190" pos:column="29">1024<pos:position pos:line="190" pos:column="33"/></literal></expr>]<pos:position pos:line="190" pos:column="34"/></index></name></decl>;<pos:position pos:line="190" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="191" pos:column="17">ERROR<pos:position pos:line="191" pos:column="22"/></name> <argument_list pos:line="191" pos:column="23">(<argument><expr><literal type="string" pos:line="191" pos:column="24">"Error: Failed to install a signal handler for signal USR1: %s"<pos:position pos:line="191" pos:column="87"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="192" pos:column="33">sstrerror<pos:position pos:line="192" pos:column="42"/></name> <argument_list pos:line="192" pos:column="43">(<argument><expr><name pos:line="192" pos:column="44">errno<pos:position pos:line="192" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="51">errbuf<pos:position pos:line="192" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="192" pos:column="59">sizeof <argument_list pos:line="192" pos:column="66">(<argument><expr><name pos:line="192" pos:column="67">errbuf<pos:position pos:line="192" pos:column="73"/></name></expr></argument>)<pos:position pos:line="192" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="192" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="192" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="77"/></expr_stmt>
		<return pos:line="193" pos:column="17">return <expr><operator pos:line="193" pos:column="24">(<pos:position pos:line="193" pos:column="25"/></operator><literal type="number" pos:line="193" pos:column="25">1<pos:position pos:line="193" pos:column="26"/></literal><operator pos:line="193" pos:column="26">)<pos:position pos:line="193" pos:column="27"/></operator></expr>;<pos:position pos:line="193" pos:column="28"/></return>
	}<pos:position pos:line="194" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="196" pos:column="9">/*
	 * run the actual loops
	 */</comment>
	<expr_stmt><expr><call><name pos:line="199" pos:column="9">do_init<pos:position pos:line="199" pos:column="16"/></name> <argument_list pos:line="199" pos:column="17">()<pos:position pos:line="199" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="20"/></expr_stmt>

	<if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name pos:line="201" pos:column="13">test_readall<pos:position pos:line="201" pos:column="25"/></name></expr>)<pos:position pos:line="201" pos:column="26"/></condition><then pos:line="201" pos:column="26">
	<block pos:line="202" pos:column="9">{
		<if pos:line="203" pos:column="17">if <condition pos:line="203" pos:column="20">(<expr><call><name pos:line="203" pos:column="21">plugin_read_all_once<pos:position pos:line="203" pos:column="41"/></name> <argument_list pos:line="203" pos:column="42">()<pos:position pos:line="203" pos:column="44"/></argument_list></call> <operator pos:line="203" pos:column="45">!=<pos:position pos:line="203" pos:column="47"/></operator> <literal type="number" pos:line="203" pos:column="48">0<pos:position pos:line="203" pos:column="49"/></literal></expr>)<pos:position pos:line="203" pos:column="50"/></condition><then pos:line="203" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="204" pos:column="25">exit_status<pos:position pos:line="204" pos:column="36"/></name> <operator pos:line="204" pos:column="37">=<pos:position pos:line="204" pos:column="38"/></operator> <literal type="number" pos:line="204" pos:column="39">1<pos:position pos:line="204" pos:column="40"/></literal></expr>;<pos:position pos:line="204" pos:column="41"/></expr_stmt></block></then></if>
	}<pos:position pos:line="205" pos:column="10"/></block></then>
	<else pos:line="206" pos:column="9">else
	<block pos:line="207" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="208" pos:column="17">INFO<pos:position pos:line="208" pos:column="21"/></name> <argument_list pos:line="208" pos:column="22">(<argument><expr><literal type="string" pos:line="208" pos:column="23">"Initialization complete, entering read-loop."<pos:position pos:line="208" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="209" pos:column="17">do_loop<pos:position pos:line="209" pos:column="24"/></name> <argument_list pos:line="209" pos:column="25">()<pos:position pos:line="209" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="210" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="212" pos:column="9">/* close syslog */</comment>
	<expr_stmt><expr><call><name pos:line="213" pos:column="9">INFO<pos:position pos:line="213" pos:column="13"/></name> <argument_list pos:line="213" pos:column="14">(<argument><expr><literal type="string" pos:line="213" pos:column="15">"Exiting normally."<pos:position pos:line="213" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="213" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="215" pos:column="9">do_shutdown<pos:position pos:line="215" pos:column="20"/></name> <argument_list pos:line="215" pos:column="21">()<pos:position pos:line="215" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="24"/></expr_stmt>

<cpp:if pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">if<pos:position pos:line="217" pos:column="4"/></cpp:directive> <expr><name pos:line="217" pos:column="5">COLLECT_DAEMON<pos:position pos:line="217" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="218" pos:column="9">if <condition pos:line="218" pos:column="12">(<expr><name pos:line="218" pos:column="13">daemonize<pos:position pos:line="218" pos:column="22"/></name></expr>)<pos:position pos:line="218" pos:column="23"/></condition><then pos:line="218" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="219" pos:column="17">pidfile_remove<pos:position pos:line="219" pos:column="31"/></name> <argument_list pos:line="219" pos:column="32">()<pos:position pos:line="219" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="35"/></expr_stmt></block></then></if>
<cpp:endif pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">endif<pos:position pos:line="220" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="220" pos:column="8">/* COLLECT_DAEMON */</comment>

	<return pos:line="222" pos:column="9">return <expr><operator pos:line="222" pos:column="16">(<pos:position pos:line="222" pos:column="17"/></operator><name pos:line="222" pos:column="17">exit_status<pos:position pos:line="222" pos:column="28"/></name><operator pos:line="222" pos:column="28">)<pos:position pos:line="222" pos:column="29"/></operator></expr>;<pos:position pos:line="222" pos:column="30"/></return>
}<pos:position pos:line="223" pos:column="2"/></block></function></unit>
