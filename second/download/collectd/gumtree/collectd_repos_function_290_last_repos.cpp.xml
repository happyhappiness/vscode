<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_290_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_shutdown<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <comment type="block" pos:line="1" pos:column="33">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">DEBUG<pos:position pos:line="3" pos:column="8"/></name><argument_list pos:line="3" pos:column="8">(<argument><expr><literal type="string" pos:line="3" pos:column="9">"amqp plugin: Shutting down %zu subscriber threads."<pos:position pos:line="3" pos:column="61"/></literal></expr></argument>,
        <argument><expr><name pos:line="4" pos:column="9">subscriber_threads_num<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">subscriber_threads_running<pos:position pos:line="6" pos:column="29"/></name> <operator pos:line="6" pos:column="30">=<pos:position pos:line="6" pos:column="31"/></operator> <literal type="number" pos:line="6" pos:column="32">0<pos:position pos:line="6" pos:column="33"/></literal></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>
  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init><decl><type><name pos:line="7" pos:column="8">size_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">i<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></init> <condition><expr><name pos:line="7" pos:column="22">i<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&lt;<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="26">subscriber_threads_num<pos:position pos:line="7" pos:column="48"/></name></expr>;<pos:position pos:line="7" pos:column="49"/></condition> <incr><expr><name pos:line="7" pos:column="50">i<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">++<pos:position pos:line="7" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="54"/></control> <block pos:line="7" pos:column="55">{
    <comment type="block" pos:line="8" pos:column="5">/* FIXME: Sending a signal is not very elegant here. Maybe find out how
     * to use a timeout in the thread and check for the variable in regular
     * intervals. */</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">pthread_kill<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name><name pos:line="11" pos:column="18">subscriber_threads<pos:position pos:line="11" pos:column="36"/></name><index pos:line="11" pos:column="36">[<expr><name pos:line="11" pos:column="37">i<pos:position pos:line="11" pos:column="38"/></name></expr>]<pos:position pos:line="11" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">SIGTERM<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">pthread_join<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name><name pos:line="12" pos:column="18">subscriber_threads<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><name pos:line="12" pos:column="37">i<pos:position pos:line="12" pos:column="38"/></name></expr>]<pos:position pos:line="12" pos:column="39"/></index></name></expr></argument>, <comment type="block" pos:line="12" pos:column="41">/* retval = */</comment> <argument><expr><name pos:line="12" pos:column="56">NULL<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="15" pos:column="3">subscriber_threads_num<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">sfree<pos:position pos:line="16" pos:column="8"/></name><argument_list pos:line="16" pos:column="8">(<argument><expr><name pos:line="16" pos:column="9">subscriber_threads<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">DEBUG<pos:position pos:line="18" pos:column="8"/></name><argument_list pos:line="18" pos:column="8">(<argument><expr><literal type="string" pos:line="18" pos:column="9">"amqp plugin: All subscriber threads exited."<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>

  <return pos:line="20" pos:column="3">return <expr><literal type="number" pos:line="20" pos:column="10">0<pos:position pos:line="20" pos:column="11"/></literal></expr>;<pos:position pos:line="20" pos:column="12"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
