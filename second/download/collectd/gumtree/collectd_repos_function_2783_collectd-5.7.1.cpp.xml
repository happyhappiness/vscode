<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2783_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_submit<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">gauge_t<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">value<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list> <block pos:line="1" pos:column="37">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">value_list_t<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">vl<pos:position pos:line="2" pos:column="18"/></name> <init pos:line="2" pos:column="19">= <expr><name pos:line="2" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="2" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="4" pos:column="3">/* Convert the gauge_t to a value_t and add it to the value_list_t. */</comment>
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">vl<pos:position pos:line="5" pos:column="5"/></name><operator pos:line="5" pos:column="5">.<pos:position pos:line="5" pos:column="6"/></operator><name pos:line="5" pos:column="6">values<pos:position pos:line="5" pos:column="12"/></name></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <operator pos:line="5" pos:column="15">&amp;<pos:position pos:line="5" pos:column="20"/></operator><operator pos:line="5" pos:column="16">(<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">value_t<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">)<pos:position pos:line="5" pos:column="25"/></operator><block pos:line="5" pos:column="25">{<expr><operator pos:line="5" pos:column="26">.<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">gauge<pos:position pos:line="5" pos:column="32"/></name> <operator pos:line="5" pos:column="33">=<pos:position pos:line="5" pos:column="34"/></operator> <name pos:line="5" pos:column="35">value<pos:position pos:line="5" pos:column="40"/></name></expr>}<pos:position pos:line="5" pos:column="41"/></block></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6" pos:column="3">vl<pos:position pos:line="6" pos:column="5"/></name><operator pos:line="6" pos:column="5">.<pos:position pos:line="6" pos:column="6"/></operator><name pos:line="6" pos:column="6">values_len<pos:position pos:line="6" pos:column="16"/></name></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <literal type="number" pos:line="6" pos:column="19">1<pos:position pos:line="6" pos:column="20"/></literal></expr>;<pos:position pos:line="6" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Only set vl.time yourself if you update multiple metrics (i.e. you
   * have multiple calls to plugin_dispatch_values()) and they need to all
   * have the same timestamp. */</comment>
  <comment type="block" pos:line="11" pos:column="3">/* vl.time = cdtime(); */</comment>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">sstrncpy<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name><name pos:line="13" pos:column="12">vl<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">plugin<pos:position pos:line="13" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"myplugin"<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="35">sizeof<argument_list pos:line="13" pos:column="41">(<argument><expr><name><name pos:line="13" pos:column="42">vl<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">.<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">plugin<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* it is strongly recommended to use a type defined in the types.db file
   * instead of a custom type */</comment>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">sstrncpy<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">vl<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">.<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">type<pos:position pos:line="17" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="21">"myplugin"<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="33">sizeof<argument_list pos:line="17" pos:column="39">(<argument><expr><name><name pos:line="17" pos:column="40">vl<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">.<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">type<pos:position pos:line="17" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
  <comment type="block" pos:line="18" pos:column="3">/* optionally set vl.plugin_instance and vl.type_instance to reasonable
   * values (default: "") */</comment>

  <comment type="block" pos:line="21" pos:column="3">/* dispatch the values to collectd which passes them on to all registered
   * write functions */</comment>
  <return pos:line="23" pos:column="3">return <expr><call><name pos:line="23" pos:column="10">plugin_dispatch_values<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><operator pos:line="23" pos:column="33">&amp;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="34">vl<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
