<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1655_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cc_add_daemon_config<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">oconfig_item_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">ci<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">ret<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ceph_daemon<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">nd<pos:position pos:line="3" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="27">cd<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><block pos:line="3" pos:column="32">{<expr><literal type="number" pos:line="3" pos:column="33">0<pos:position pos:line="3" pos:column="34"/></literal></expr>}<pos:position pos:line="3" pos:column="35"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">ceph_daemon<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">tmp<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name><name pos:line="6" pos:column="8">ci<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">values_num<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">!=<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">||<pos:position pos:line="6" pos:column="31"/></operator> <operator pos:line="6" pos:column="32">(<pos:position pos:line="6" pos:column="33"/></operator><name><name pos:line="6" pos:column="33">ci<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">values<pos:position pos:line="6" pos:column="43"/></name><index pos:line="6" pos:column="43">[<expr><literal type="number" pos:line="6" pos:column="44">0<pos:position pos:line="6" pos:column="45"/></literal></expr>]<pos:position pos:line="6" pos:column="46"/></index></name><operator pos:line="6" pos:column="46">.<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="47">type<pos:position pos:line="6" pos:column="51"/></name> <operator pos:line="6" pos:column="52">!=<pos:position pos:line="6" pos:column="54"/></operator> <name pos:line="6" pos:column="55">OCONFIG_TYPE_STRING<pos:position pos:line="6" pos:column="74"/></name><operator pos:line="6" pos:column="74">)<pos:position pos:line="6" pos:column="75"/></operator></expr>)<pos:position pos:line="6" pos:column="76"/></condition><then pos:line="6" pos:column="76"> <block pos:line="6" pos:column="77">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">WARNING<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"ceph plugin: `Daemon' blocks need exactly one string "<pos:position pos:line="7" pos:column="68"/></literal>
            <literal type="string" pos:line="8" pos:column="13">"argument."<pos:position pos:line="8" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><operator pos:line="9" pos:column="13">-<pos:position pos:line="9" pos:column="14"/></operator><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal><operator pos:line="9" pos:column="15">)<pos:position pos:line="9" pos:column="16"/></operator></expr>;<pos:position pos:line="9" pos:column="17"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">ret<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">cc_handle_str<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">ci<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="27">cd<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">name<pos:position pos:line="12" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">DATA_MAX_NAME_LEN<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">ret<pos:position pos:line="13" pos:column="10"/></name></expr>)<pos:position pos:line="13" pos:column="11"/></condition><then pos:line="13" pos:column="11"> <block pos:line="13" pos:column="12">{
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">ret<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <for pos:line="17" pos:column="3">for <control pos:line="17" pos:column="7">(<init><decl><type><name pos:line="17" pos:column="8">int<pos:position pos:line="17" pos:column="11"/></name></type> <name pos:line="17" pos:column="12">i<pos:position pos:line="17" pos:column="13"/></name> <init pos:line="17" pos:column="14">= <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="18"/></init> <condition><expr><name pos:line="17" pos:column="19">i<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">&lt;<pos:position pos:line="17" pos:column="25"/></operator> <name><name pos:line="17" pos:column="23">ci<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">children_num<pos:position pos:line="17" pos:column="39"/></name></name></expr>;<pos:position pos:line="17" pos:column="40"/></condition> <incr><expr><name pos:line="17" pos:column="41">i<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">++<pos:position pos:line="17" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="45"/></control> <block pos:line="17" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">oconfig_item_t<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">child<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><name><name pos:line="18" pos:column="29">ci<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">children<pos:position pos:line="18" pos:column="41"/></name></name> <operator pos:line="18" pos:column="42">+<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">i<pos:position pos:line="18" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="46"/></decl_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">strcasecmp<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="string" pos:line="20" pos:column="20">"SocketPath"<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="34">child<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">key<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call> <operator pos:line="20" pos:column="46">==<pos:position pos:line="20" pos:column="48"/></operator> <literal type="number" pos:line="20" pos:column="49">0<pos:position pos:line="20" pos:column="50"/></literal></expr>)<pos:position pos:line="20" pos:column="51"/></condition><then pos:line="20" pos:column="51"> <block pos:line="20" pos:column="52">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">ret<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">cc_handle_str<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">child<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="34">cd<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">.<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">asok_path<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="48">sizeof<argument_list pos:line="21" pos:column="54">(<argument><expr><name><name pos:line="21" pos:column="55">cd<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">.<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="58">asok_path<pos:position pos:line="21" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name pos:line="22" pos:column="11">ret<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15"> <block pos:line="22" pos:column="16">{
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">ret<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></return>
      }<pos:position pos:line="24" pos:column="8"/></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <else pos:line="25" pos:column="7">else <block pos:line="25" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">WARNING<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><literal type="string" pos:line="26" pos:column="15">"ceph plugin: ignoring unknown option %s"<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="58">child<pos:position pos:line="26" pos:column="63"/></name><operator pos:line="26" pos:column="63">-&gt;<pos:position pos:line="26" pos:column="68"/></operator><name pos:line="26" pos:column="65">key<pos:position pos:line="26" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></for>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name><name pos:line="29" pos:column="7">cd<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">.<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">name<pos:position pos:line="29" pos:column="14"/></name><index pos:line="29" pos:column="14">[<expr><literal type="number" pos:line="29" pos:column="15">0<pos:position pos:line="29" pos:column="16"/></literal></expr>]<pos:position pos:line="29" pos:column="17"/></index></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <literal type="char" pos:line="29" pos:column="21">'\0'<pos:position pos:line="29" pos:column="25"/></literal></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26"> <block pos:line="29" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"ceph plugin: you must configure a daemon name.\n"<pos:position pos:line="30" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">-<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">EINVAL<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then> <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><name><name pos:line="32" pos:column="14">cd<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">asok_path<pos:position pos:line="32" pos:column="26"/></name><index pos:line="32" pos:column="26">[<expr><literal type="number" pos:line="32" pos:column="27">0<pos:position pos:line="32" pos:column="28"/></literal></expr>]<pos:position pos:line="32" pos:column="29"/></index></name> <operator pos:line="32" pos:column="30">==<pos:position pos:line="32" pos:column="32"/></operator> <literal type="char" pos:line="32" pos:column="33">'\0'<pos:position pos:line="32" pos:column="37"/></literal></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ERROR<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><literal type="string" pos:line="33" pos:column="11">"ceph plugin(name=%s): you must configure an administrative "<pos:position pos:line="33" pos:column="72"/></literal>
          <literal type="string" pos:line="34" pos:column="11">"socket path.\n"<pos:position pos:line="34" pos:column="27"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="35" pos:column="11">cd<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">.<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">name<pos:position pos:line="35" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">-<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">EINVAL<pos:position pos:line="36" pos:column="19"/></name></expr>;<pos:position pos:line="36" pos:column="20"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if></elseif> <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><operator pos:line="37" pos:column="14">!<pos:position pos:line="37" pos:column="15"/></operator><operator pos:line="37" pos:column="15">(<pos:position pos:line="37" pos:column="16"/></operator><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name><name pos:line="37" pos:column="17">cd<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">asok_path<pos:position pos:line="37" pos:column="29"/></name><index pos:line="37" pos:column="29">[<expr><literal type="number" pos:line="37" pos:column="30">0<pos:position pos:line="37" pos:column="31"/></literal></expr>]<pos:position pos:line="37" pos:column="32"/></index></name> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <literal type="char" pos:line="37" pos:column="36">'/'<pos:position pos:line="37" pos:column="39"/></literal><operator pos:line="37" pos:column="39">)<pos:position pos:line="37" pos:column="40"/></operator> <operator pos:line="37" pos:column="41">||<pos:position pos:line="37" pos:column="43"/></operator>
               <operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name><name pos:line="38" pos:column="17">cd<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">.<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">asok_path<pos:position pos:line="38" pos:column="29"/></name><index pos:line="38" pos:column="29">[<expr><literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>]<pos:position pos:line="38" pos:column="32"/></index></name> <operator pos:line="38" pos:column="33">==<pos:position pos:line="38" pos:column="35"/></operator> <literal type="char" pos:line="38" pos:column="36">'.'<pos:position pos:line="38" pos:column="39"/></literal> <operator pos:line="38" pos:column="40">&amp;&amp;<pos:position pos:line="38" pos:column="50"/></operator> <name><name pos:line="38" pos:column="43">cd<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">.<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="46">asok_path<pos:position pos:line="38" pos:column="55"/></name><index pos:line="38" pos:column="55">[<expr><literal type="number" pos:line="38" pos:column="56">1<pos:position pos:line="38" pos:column="57"/></literal></expr>]<pos:position pos:line="38" pos:column="58"/></index></name> <operator pos:line="38" pos:column="59">==<pos:position pos:line="38" pos:column="61"/></operator> <literal type="char" pos:line="38" pos:column="62">'/'<pos:position pos:line="38" pos:column="65"/></literal><operator pos:line="38" pos:column="65">)<pos:position pos:line="38" pos:column="66"/></operator><operator pos:line="38" pos:column="66">)<pos:position pos:line="38" pos:column="67"/></operator></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68"> <block pos:line="38" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">ERROR<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><literal type="string" pos:line="39" pos:column="11">"ceph plugin(name=%s): administrative socket paths must begin "<pos:position pos:line="39" pos:column="74"/></literal>
          <literal type="string" pos:line="40" pos:column="11">"with '/' or './' Can't parse: '%s'\n"<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="41" pos:column="11">cd<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">.<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">name<pos:position pos:line="41" pos:column="18"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="20">cd<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">asok_path<pos:position pos:line="41" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><operator pos:line="42" pos:column="12">-<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">EINVAL<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="45" pos:column="3">tmp<pos:position pos:line="45" pos:column="6"/></name> <operator pos:line="45" pos:column="7">=<pos:position pos:line="45" pos:column="8"/></operator> <call><name pos:line="45" pos:column="9">realloc<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">g_daemons<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="28">(<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="29">g_num_daemons<pos:position pos:line="45" pos:column="42"/></name> <operator pos:line="45" pos:column="43">+<pos:position pos:line="45" pos:column="44"/></operator> <literal type="number" pos:line="45" pos:column="45">1<pos:position pos:line="45" pos:column="46"/></literal><operator pos:line="45" pos:column="46">)<pos:position pos:line="45" pos:column="47"/></operator> <operator pos:line="45" pos:column="48">*<pos:position pos:line="45" pos:column="49"/></operator> <sizeof pos:line="45" pos:column="50">sizeof<argument_list pos:line="45" pos:column="56">(<argument><expr><operator pos:line="45" pos:column="57">*<pos:position pos:line="45" pos:column="58"/></operator><name pos:line="45" pos:column="58">g_daemons<pos:position pos:line="45" pos:column="67"/></name></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><name pos:line="46" pos:column="7">tmp<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">==<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">NULL<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19"> <block pos:line="46" pos:column="20">{
    <comment type="block" pos:line="47" pos:column="5">/* The positive return value here indicates that this is a
     * runtime error, not a configuration error.  */</comment>
    <return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">ENOMEM<pos:position pos:line="49" pos:column="18"/></name></expr>;<pos:position pos:line="49" pos:column="19"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="51" pos:column="3">g_daemons<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">tmp<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name pos:line="53" pos:column="3">nd<pos:position pos:line="53" pos:column="5"/></name> <operator pos:line="53" pos:column="6">=<pos:position pos:line="53" pos:column="7"/></operator> <call><name pos:line="53" pos:column="8">malloc<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><sizeof pos:line="53" pos:column="15">sizeof<argument_list pos:line="53" pos:column="21">(<argument><expr><operator pos:line="53" pos:column="22">*<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="23">nd<pos:position pos:line="53" pos:column="25"/></name></expr></argument>)<pos:position pos:line="53" pos:column="26"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><operator pos:line="54" pos:column="7">!<pos:position pos:line="54" pos:column="8"/></operator><name pos:line="54" pos:column="8">nd<pos:position pos:line="54" pos:column="10"/></name></expr>)<pos:position pos:line="54" pos:column="11"/></condition><then pos:line="54" pos:column="11"> <block pos:line="54" pos:column="12">{
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">ENOMEM<pos:position pos:line="55" pos:column="18"/></name></expr>;<pos:position pos:line="55" pos:column="19"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">memcpy<pos:position pos:line="57" pos:column="9"/></name><argument_list pos:line="57" pos:column="9">(<argument><expr><name pos:line="57" pos:column="10">nd<pos:position pos:line="57" pos:column="12"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="14">&amp;<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="15">cd<pos:position pos:line="57" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="19">sizeof<argument_list pos:line="57" pos:column="25">(<argument><expr><operator pos:line="57" pos:column="26">*<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="27">nd<pos:position pos:line="57" pos:column="29"/></name></expr></argument>)<pos:position pos:line="57" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="58" pos:column="3">g_daemons<pos:position pos:line="58" pos:column="12"/></name><index pos:line="58" pos:column="12">[<expr><name pos:line="58" pos:column="13">g_num_daemons<pos:position pos:line="58" pos:column="26"/></name></expr>]<pos:position pos:line="58" pos:column="27"/></index></name> <operator pos:line="58" pos:column="28">=<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="30">nd<pos:position pos:line="58" pos:column="32"/></name></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="59" pos:column="3">g_num_daemons<pos:position pos:line="59" pos:column="16"/></name><operator pos:line="59" pos:column="16">++<pos:position pos:line="59" pos:column="18"/></operator></expr>;<pos:position pos:line="59" pos:column="19"/></expr_stmt>
  <return pos:line="60" pos:column="3">return <expr><literal type="number" pos:line="60" pos:column="10">0<pos:position pos:line="60" pos:column="11"/></literal></expr>;<pos:position pos:line="60" pos:column="12"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
