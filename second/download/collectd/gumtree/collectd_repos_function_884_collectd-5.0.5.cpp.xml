<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_884_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">multi3_read<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">name<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">FILE<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">fh<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><literal type="number" pos:line="3" pos:column="21">1024<pos:position pos:line="3" pos:column="25"/></literal></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name><name pos:line="4" pos:column="15">fields<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">15<pos:position pos:line="4" pos:column="24"/></literal></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">int<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">max_fields<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><call><name pos:line="5" pos:column="32">STATIC_ARRAY_SIZE<pos:position pos:line="5" pos:column="49"/></name> <argument_list pos:line="5" pos:column="50">(<argument><expr><name pos:line="5" pos:column="51">fields<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type>  <name pos:line="6" pos:column="14">fields_num<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">read<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">long<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">long<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">sum_users<pos:position pos:line="7" pos:column="28"/></name>    <init pos:line="7" pos:column="32">= <expr><literal type="number" pos:line="7" pos:column="34">0<pos:position pos:line="7" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><call><name pos:line="9" pos:column="16">fgets<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">buffer<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="31">sizeof <argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">buffer<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="9" pos:column="48">fh<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call> <operator pos:line="9" pos:column="52">!=<pos:position pos:line="9" pos:column="54"/></operator> <name pos:line="9" pos:column="55">NULL<pos:position pos:line="9" pos:column="59"/></name></expr>)<pos:position pos:line="9" pos:column="60"/></condition>
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">fields_num<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">=<pos:position pos:line="11" pos:column="29"/></operator> <call><name pos:line="11" pos:column="30">strsplit<pos:position pos:line="11" pos:column="38"/></name> <argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">buffer<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">fields<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="56">max_fields<pos:position pos:line="11" pos:column="66"/></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>

		<comment type="block" pos:line="13" pos:column="17">/* status file is generated by openvpn/multi.c:multi_print_status()
		 * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/multi.c
		 *
		 * The line we're expecting has 12 fields. We ignore all lines
		 *  with more or less fields.
		 */</comment>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">fields_num<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">!=<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">12<pos:position pos:line="19" pos:column="37"/></literal></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38">
		<block pos:line="20" pos:column="17">{
			<continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue>
		}<pos:position pos:line="22" pos:column="18"/></block></then>
		<else pos:line="23" pos:column="17">else
		<block pos:line="24" pos:column="17">{
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">strcmp<pos:position pos:line="25" pos:column="35"/></name> <argument_list pos:line="25" pos:column="36">(<argument><expr><name><name pos:line="25" pos:column="37">fields<pos:position pos:line="25" pos:column="43"/></name><index pos:line="25" pos:column="43">[<expr><literal type="number" pos:line="25" pos:column="44">0<pos:position pos:line="25" pos:column="45"/></literal></expr>]<pos:position pos:line="25" pos:column="46"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="48">"CLIENT_LIST"<pos:position pos:line="25" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call> <operator pos:line="25" pos:column="63">!=<pos:position pos:line="25" pos:column="65"/></operator> <literal type="number" pos:line="25" pos:column="66">0<pos:position pos:line="25" pos:column="67"/></literal></expr>)<pos:position pos:line="25" pos:column="68"/></condition><then pos:line="25" pos:column="68">
				<block type="pseudo"><continue pos:line="26" pos:column="33">continue;<pos:position pos:line="26" pos:column="42"/></continue></block></then></if>

			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">collect_user_count<pos:position pos:line="28" pos:column="47"/></name></expr>)<pos:position pos:line="28" pos:column="48"/></condition><then pos:line="28" pos:column="48">
				<comment type="block" pos:line="29" pos:column="33">/* If so, sum all users, ignore the individuals*/</comment>
			<block pos:line="30" pos:column="25">{
				<expr_stmt><expr><name pos:line="31" pos:column="33">sum_users<pos:position pos:line="31" pos:column="42"/></name> <operator pos:line="31" pos:column="43">+=<pos:position pos:line="31" pos:column="45"/></operator> <literal type="number" pos:line="31" pos:column="46">1<pos:position pos:line="31" pos:column="47"/></literal></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>

			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">collect_individual_users<pos:position pos:line="34" pos:column="53"/></name></expr>)<pos:position pos:line="34" pos:column="54"/></condition><then pos:line="34" pos:column="54">
			<block pos:line="35" pos:column="25">{
				<if pos:line="36" pos:column="33">if <condition pos:line="36" pos:column="36">(<expr><name pos:line="36" pos:column="37">new_naming_schema<pos:position pos:line="36" pos:column="54"/></name></expr>)<pos:position pos:line="36" pos:column="55"/></condition><then pos:line="36" pos:column="55">
				<block pos:line="37" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="38" pos:column="41">iostats_submit<pos:position pos:line="38" pos:column="55"/></name> <argument_list pos:line="38" pos:column="56">(<argument><expr><name pos:line="38" pos:column="57">name<pos:position pos:line="38" pos:column="61"/></name></expr></argument>,               <comment type="block" pos:line="38" pos:column="77">/* vpn instance */</comment>
							<argument><expr><name><name pos:line="39" pos:column="57">fields<pos:position pos:line="39" pos:column="63"/></name><index pos:line="39" pos:column="63">[<expr><literal type="number" pos:line="39" pos:column="64">1<pos:position pos:line="39" pos:column="65"/></literal></expr>]<pos:position pos:line="39" pos:column="66"/></index></name></expr></argument>,          <comment type="block" pos:line="39" pos:column="77">/* "Common Name" */</comment>
							<argument><expr><call><name pos:line="40" pos:column="57">atoll<pos:position pos:line="40" pos:column="62"/></name> <argument_list pos:line="40" pos:column="63">(<argument><expr><name><name pos:line="40" pos:column="64">fields<pos:position pos:line="40" pos:column="70"/></name><index pos:line="40" pos:column="70">[<expr><literal type="number" pos:line="40" pos:column="71">4<pos:position pos:line="40" pos:column="72"/></literal></expr>]<pos:position pos:line="40" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="40" pos:column="77">/* "Bytes Received" */</comment>
							<argument><expr><call><name pos:line="41" pos:column="57">atoll<pos:position pos:line="41" pos:column="62"/></name> <argument_list pos:line="41" pos:column="63">(<argument><expr><name><name pos:line="41" pos:column="64">fields<pos:position pos:line="41" pos:column="70"/></name><index pos:line="41" pos:column="70">[<expr><literal type="number" pos:line="41" pos:column="71">5<pos:position pos:line="41" pos:column="72"/></literal></expr>]<pos:position pos:line="41" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="76"/></expr_stmt> <comment type="block" pos:line="41" pos:column="77">/* "Bytes Sent" */</comment>
				}<pos:position pos:line="42" pos:column="34"/></block></then>
				<else pos:line="43" pos:column="33">else
				<block pos:line="44" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="45" pos:column="41">iostats_submit<pos:position pos:line="45" pos:column="55"/></name> <argument_list pos:line="45" pos:column="56">(<argument><expr><name><name pos:line="45" pos:column="57">fields<pos:position pos:line="45" pos:column="63"/></name><index pos:line="45" pos:column="63">[<expr><literal type="number" pos:line="45" pos:column="64">1<pos:position pos:line="45" pos:column="65"/></literal></expr>]<pos:position pos:line="45" pos:column="66"/></index></name></expr></argument>,          <comment type="block" pos:line="45" pos:column="77">/* "Common Name" */</comment>
							<argument><expr><name pos:line="46" pos:column="57">NULL<pos:position pos:line="46" pos:column="61"/></name></expr></argument>,               <comment type="block" pos:line="46" pos:column="77">/* unused when in multimode */</comment>
							<argument><expr><call><name pos:line="47" pos:column="57">atoll<pos:position pos:line="47" pos:column="62"/></name> <argument_list pos:line="47" pos:column="63">(<argument><expr><name><name pos:line="47" pos:column="64">fields<pos:position pos:line="47" pos:column="70"/></name><index pos:line="47" pos:column="70">[<expr><literal type="number" pos:line="47" pos:column="71">4<pos:position pos:line="47" pos:column="72"/></literal></expr>]<pos:position pos:line="47" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="47" pos:column="77">/* "Bytes Received" */</comment>
							<argument><expr><call><name pos:line="48" pos:column="57">atoll<pos:position pos:line="48" pos:column="62"/></name> <argument_list pos:line="48" pos:column="63">(<argument><expr><name><name pos:line="48" pos:column="64">fields<pos:position pos:line="48" pos:column="70"/></name><index pos:line="48" pos:column="70">[<expr><literal type="number" pos:line="48" pos:column="71">5<pos:position pos:line="48" pos:column="72"/></literal></expr>]<pos:position pos:line="48" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="76"/></expr_stmt> <comment type="block" pos:line="48" pos:column="77">/* "Bytes Sent" */</comment>
				}<pos:position pos:line="49" pos:column="34"/></block></else></if>
			}<pos:position pos:line="50" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="52" pos:column="25">read<pos:position pos:line="52" pos:column="29"/></name> <operator pos:line="52" pos:column="30">=<pos:position pos:line="52" pos:column="31"/></operator> <literal type="number" pos:line="52" pos:column="32">1<pos:position pos:line="52" pos:column="33"/></literal></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></else></if>
	}<pos:position pos:line="54" pos:column="10"/></block></while>

	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">collect_user_count<pos:position pos:line="56" pos:column="31"/></name></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32">
	<block pos:line="57" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">numusers_submit<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name pos:line="58" pos:column="33">name<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="39">name<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">sum_users<pos:position pos:line="58" pos:column="54"/></name></expr></argument>)<pos:position pos:line="58" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">read<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <literal type="number" pos:line="59" pos:column="24">1<pos:position pos:line="59" pos:column="25"/></literal></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<return pos:line="62" pos:column="9">return <expr><operator pos:line="62" pos:column="16">(<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="17">read<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">)<pos:position pos:line="62" pos:column="22"/></operator></expr>;<pos:position pos:line="62" pos:column="23"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
