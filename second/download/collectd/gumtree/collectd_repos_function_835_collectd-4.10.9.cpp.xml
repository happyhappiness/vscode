<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_835_collectd-4.10.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">single_read<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">name<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">FILE<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">fh<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><literal type="number" pos:line="3" pos:column="21">1024<pos:position pos:line="3" pos:column="25"/></literal></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name><name pos:line="4" pos:column="15">fields<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">4<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">int<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">max_fields<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><call><name pos:line="5" pos:column="32">STATIC_ARRAY_SIZE<pos:position pos:line="5" pos:column="49"/></name> <argument_list pos:line="5" pos:column="50">(<argument><expr><name pos:line="5" pos:column="51">fields<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type>  <name pos:line="6" pos:column="14">fields_num<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">read<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">counter_t<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">link_rx<pos:position pos:line="8" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="28">link_tx<pos:position pos:line="8" pos:column="35"/></name></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">counter_t<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">tun_rx<pos:position pos:line="9" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="27">tun_tx<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">counter_t<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">pre_compress<pos:position pos:line="10" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="33">post_compress<pos:position pos:line="10" pos:column="46"/></name></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">counter_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">pre_decompress<pos:position pos:line="11" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="35">post_decompress<pos:position pos:line="11" pos:column="50"/></name></decl>;<pos:position pos:line="11" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">counter_t<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">overhead_rx<pos:position pos:line="12" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="32">overhead_tx<pos:position pos:line="12" pos:column="43"/></name></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">link_rx<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="19">0<pos:position pos:line="14" pos:column="20"/></literal></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">link_tx<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">tun_rx<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">tun_tx<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">pre_compress<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">post_compress<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <literal type="number" pos:line="19" pos:column="25">0<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">pre_decompress<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">post_decompress<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">overhead_rx<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">overhead_tx<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>

	<while pos:line="25" pos:column="9">while <condition pos:line="25" pos:column="15">(<expr><call><name pos:line="25" pos:column="16">fgets<pos:position pos:line="25" pos:column="21"/></name> <argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">buffer<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="31">sizeof <argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">buffer<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">fh<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call> <operator pos:line="25" pos:column="52">!=<pos:position pos:line="25" pos:column="54"/></operator> <name pos:line="25" pos:column="55">NULL<pos:position pos:line="25" pos:column="59"/></name></expr>)<pos:position pos:line="25" pos:column="60"/></condition>
	<block pos:line="26" pos:column="9">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">fields_num<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">=<pos:position pos:line="27" pos:column="29"/></operator> <call><name pos:line="27" pos:column="30">openvpn_strsplit<pos:position pos:line="27" pos:column="46"/></name> <argument_list pos:line="27" pos:column="47">(<argument><expr><name pos:line="27" pos:column="48">buffer<pos:position pos:line="27" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">fields<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="64">max_fields<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="76"/></expr_stmt>

		<comment type="block" pos:line="29" pos:column="17">/* status file is generated by openvpn/sig.c:print_status()
		 * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/sig.c
		 *
		 * The line we're expecting has 2 fields. We ignore all lines
		 *  with more or less fields.
		 */</comment>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">fields_num<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">!=<pos:position pos:line="35" pos:column="34"/></operator> <literal type="number" pos:line="35" pos:column="35">2<pos:position pos:line="35" pos:column="36"/></literal></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
		<block pos:line="36" pos:column="17">{
			<continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">strcmp<pos:position pos:line="40" pos:column="27"/></name> <argument_list pos:line="40" pos:column="28">(<argument><expr><name><name pos:line="40" pos:column="29">fields<pos:position pos:line="40" pos:column="35"/></name><index pos:line="40" pos:column="35">[<expr><literal type="number" pos:line="40" pos:column="36">0<pos:position pos:line="40" pos:column="37"/></literal></expr>]<pos:position pos:line="40" pos:column="38"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="40">"TUN/TAP read bytes"<pos:position pos:line="40" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call> <operator pos:line="40" pos:column="62">==<pos:position pos:line="40" pos:column="64"/></operator> <literal type="number" pos:line="40" pos:column="65">0<pos:position pos:line="40" pos:column="66"/></literal></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67">
		<block pos:line="41" pos:column="17">{
			<comment type="block" pos:line="42" pos:column="25">/* read from the system and sent over the tunnel */</comment>
			<expr_stmt><expr><name pos:line="43" pos:column="25">tun_tx<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">=<pos:position pos:line="43" pos:column="33"/></operator> <call><name pos:line="43" pos:column="34">atoll<pos:position pos:line="43" pos:column="39"/></name> <argument_list pos:line="43" pos:column="40">(<argument><expr><name><name pos:line="43" pos:column="41">fields<pos:position pos:line="43" pos:column="47"/></name><index pos:line="43" pos:column="47">[<expr><literal type="number" pos:line="43" pos:column="48">1<pos:position pos:line="43" pos:column="49"/></literal></expr>]<pos:position pos:line="43" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then>
		<elseif pos:line="45" pos:column="17">else <if pos:line="45" pos:column="22">if <condition pos:line="45" pos:column="25">(<expr><call><name pos:line="45" pos:column="26">strcmp<pos:position pos:line="45" pos:column="32"/></name> <argument_list pos:line="45" pos:column="33">(<argument><expr><name><name pos:line="45" pos:column="34">fields<pos:position pos:line="45" pos:column="40"/></name><index pos:line="45" pos:column="40">[<expr><literal type="number" pos:line="45" pos:column="41">0<pos:position pos:line="45" pos:column="42"/></literal></expr>]<pos:position pos:line="45" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="45">"TUN/TAP write bytes"<pos:position pos:line="45" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call> <operator pos:line="45" pos:column="68">==<pos:position pos:line="45" pos:column="70"/></operator> <literal type="number" pos:line="45" pos:column="71">0<pos:position pos:line="45" pos:column="72"/></literal></expr>)<pos:position pos:line="45" pos:column="73"/></condition><then pos:line="45" pos:column="73">
		<block pos:line="46" pos:column="17">{
			<comment type="block" pos:line="47" pos:column="25">/* read from the tunnel and written in the system */</comment>
			<expr_stmt><expr><name pos:line="48" pos:column="25">tun_rx<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">=<pos:position pos:line="48" pos:column="33"/></operator> <call><name pos:line="48" pos:column="34">atoll<pos:position pos:line="48" pos:column="39"/></name> <argument_list pos:line="48" pos:column="40">(<argument><expr><name><name pos:line="48" pos:column="41">fields<pos:position pos:line="48" pos:column="47"/></name><index pos:line="48" pos:column="47">[<expr><literal type="number" pos:line="48" pos:column="48">1<pos:position pos:line="48" pos:column="49"/></literal></expr>]<pos:position pos:line="48" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="50" pos:column="17">else <if pos:line="50" pos:column="22">if <condition pos:line="50" pos:column="25">(<expr><call><name pos:line="50" pos:column="26">strcmp<pos:position pos:line="50" pos:column="32"/></name> <argument_list pos:line="50" pos:column="33">(<argument><expr><name><name pos:line="50" pos:column="34">fields<pos:position pos:line="50" pos:column="40"/></name><index pos:line="50" pos:column="40">[<expr><literal type="number" pos:line="50" pos:column="41">0<pos:position pos:line="50" pos:column="42"/></literal></expr>]<pos:position pos:line="50" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="45">"TCP/UDP read bytes"<pos:position pos:line="50" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call> <operator pos:line="50" pos:column="67">==<pos:position pos:line="50" pos:column="69"/></operator> <literal type="number" pos:line="50" pos:column="70">0<pos:position pos:line="50" pos:column="71"/></literal></expr>)<pos:position pos:line="50" pos:column="72"/></condition><then pos:line="50" pos:column="72">
		<block pos:line="51" pos:column="17">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">link_rx<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">=<pos:position pos:line="52" pos:column="34"/></operator> <call><name pos:line="52" pos:column="35">atoll<pos:position pos:line="52" pos:column="40"/></name> <argument_list pos:line="52" pos:column="41">(<argument><expr><name><name pos:line="52" pos:column="42">fields<pos:position pos:line="52" pos:column="48"/></name><index pos:line="52" pos:column="48">[<expr><literal type="number" pos:line="52" pos:column="49">1<pos:position pos:line="52" pos:column="50"/></literal></expr>]<pos:position pos:line="52" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="54" pos:column="17">else <if pos:line="54" pos:column="22">if <condition pos:line="54" pos:column="25">(<expr><call><name pos:line="54" pos:column="26">strcmp<pos:position pos:line="54" pos:column="32"/></name> <argument_list pos:line="54" pos:column="33">(<argument><expr><name><name pos:line="54" pos:column="34">fields<pos:position pos:line="54" pos:column="40"/></name><index pos:line="54" pos:column="40">[<expr><literal type="number" pos:line="54" pos:column="41">0<pos:position pos:line="54" pos:column="42"/></literal></expr>]<pos:position pos:line="54" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="45">"TCP/UDP write bytes"<pos:position pos:line="54" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call> <operator pos:line="54" pos:column="68">==<pos:position pos:line="54" pos:column="70"/></operator> <literal type="number" pos:line="54" pos:column="71">0<pos:position pos:line="54" pos:column="72"/></literal></expr>)<pos:position pos:line="54" pos:column="73"/></condition><then pos:line="54" pos:column="73">
		<block pos:line="55" pos:column="17">{
			<expr_stmt><expr><name pos:line="56" pos:column="25">link_tx<pos:position pos:line="56" pos:column="32"/></name> <operator pos:line="56" pos:column="33">=<pos:position pos:line="56" pos:column="34"/></operator> <call><name pos:line="56" pos:column="35">atoll<pos:position pos:line="56" pos:column="40"/></name> <argument_list pos:line="56" pos:column="41">(<argument><expr><name><name pos:line="56" pos:column="42">fields<pos:position pos:line="56" pos:column="48"/></name><index pos:line="56" pos:column="48">[<expr><literal type="number" pos:line="56" pos:column="49">1<pos:position pos:line="56" pos:column="50"/></literal></expr>]<pos:position pos:line="56" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="58" pos:column="17">else <if pos:line="58" pos:column="22">if <condition pos:line="58" pos:column="25">(<expr><call><name pos:line="58" pos:column="26">strcmp<pos:position pos:line="58" pos:column="32"/></name> <argument_list pos:line="58" pos:column="33">(<argument><expr><name><name pos:line="58" pos:column="34">fields<pos:position pos:line="58" pos:column="40"/></name><index pos:line="58" pos:column="40">[<expr><literal type="number" pos:line="58" pos:column="41">0<pos:position pos:line="58" pos:column="42"/></literal></expr>]<pos:position pos:line="58" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="45">"pre-compress bytes"<pos:position pos:line="58" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call> <operator pos:line="58" pos:column="67">==<pos:position pos:line="58" pos:column="69"/></operator> <literal type="number" pos:line="58" pos:column="70">0<pos:position pos:line="58" pos:column="71"/></literal></expr>)<pos:position pos:line="58" pos:column="72"/></condition><then pos:line="58" pos:column="72">
		<block pos:line="59" pos:column="17">{
			<expr_stmt><expr><name pos:line="60" pos:column="25">pre_compress<pos:position pos:line="60" pos:column="37"/></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <call><name pos:line="60" pos:column="40">atoll<pos:position pos:line="60" pos:column="45"/></name> <argument_list pos:line="60" pos:column="46">(<argument><expr><name><name pos:line="60" pos:column="47">fields<pos:position pos:line="60" pos:column="53"/></name><index pos:line="60" pos:column="53">[<expr><literal type="number" pos:line="60" pos:column="54">1<pos:position pos:line="60" pos:column="55"/></literal></expr>]<pos:position pos:line="60" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="62" pos:column="17">else <if pos:line="62" pos:column="22">if <condition pos:line="62" pos:column="25">(<expr><call><name pos:line="62" pos:column="26">strcmp<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><name><name pos:line="62" pos:column="34">fields<pos:position pos:line="62" pos:column="40"/></name><index pos:line="62" pos:column="40">[<expr><literal type="number" pos:line="62" pos:column="41">0<pos:position pos:line="62" pos:column="42"/></literal></expr>]<pos:position pos:line="62" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="45">"post-compress bytes"<pos:position pos:line="62" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call> <operator pos:line="62" pos:column="68">==<pos:position pos:line="62" pos:column="70"/></operator> <literal type="number" pos:line="62" pos:column="71">0<pos:position pos:line="62" pos:column="72"/></literal></expr>)<pos:position pos:line="62" pos:column="73"/></condition><then pos:line="62" pos:column="73">
		<block pos:line="63" pos:column="17">{
			<expr_stmt><expr><name pos:line="64" pos:column="25">post_compress<pos:position pos:line="64" pos:column="38"/></name> <operator pos:line="64" pos:column="39">=<pos:position pos:line="64" pos:column="40"/></operator> <call><name pos:line="64" pos:column="41">atoll<pos:position pos:line="64" pos:column="46"/></name> <argument_list pos:line="64" pos:column="47">(<argument><expr><name><name pos:line="64" pos:column="48">fields<pos:position pos:line="64" pos:column="54"/></name><index pos:line="64" pos:column="54">[<expr><literal type="number" pos:line="64" pos:column="55">1<pos:position pos:line="64" pos:column="56"/></literal></expr>]<pos:position pos:line="64" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="66" pos:column="17">else <if pos:line="66" pos:column="22">if <condition pos:line="66" pos:column="25">(<expr><call><name pos:line="66" pos:column="26">strcmp<pos:position pos:line="66" pos:column="32"/></name> <argument_list pos:line="66" pos:column="33">(<argument><expr><name><name pos:line="66" pos:column="34">fields<pos:position pos:line="66" pos:column="40"/></name><index pos:line="66" pos:column="40">[<expr><literal type="number" pos:line="66" pos:column="41">0<pos:position pos:line="66" pos:column="42"/></literal></expr>]<pos:position pos:line="66" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="45">"pre-decompress bytes"<pos:position pos:line="66" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="68"/></argument_list></call> <operator pos:line="66" pos:column="69">==<pos:position pos:line="66" pos:column="71"/></operator> <literal type="number" pos:line="66" pos:column="72">0<pos:position pos:line="66" pos:column="73"/></literal></expr>)<pos:position pos:line="66" pos:column="74"/></condition><then pos:line="66" pos:column="74">
		<block pos:line="67" pos:column="17">{
			<expr_stmt><expr><name pos:line="68" pos:column="25">pre_decompress<pos:position pos:line="68" pos:column="39"/></name> <operator pos:line="68" pos:column="40">=<pos:position pos:line="68" pos:column="41"/></operator> <call><name pos:line="68" pos:column="42">atoll<pos:position pos:line="68" pos:column="47"/></name> <argument_list pos:line="68" pos:column="48">(<argument><expr><name><name pos:line="68" pos:column="49">fields<pos:position pos:line="68" pos:column="55"/></name><index pos:line="68" pos:column="55">[<expr><literal type="number" pos:line="68" pos:column="56">1<pos:position pos:line="68" pos:column="57"/></literal></expr>]<pos:position pos:line="68" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="70" pos:column="17">else <if pos:line="70" pos:column="22">if <condition pos:line="70" pos:column="25">(<expr><call><name pos:line="70" pos:column="26">strcmp<pos:position pos:line="70" pos:column="32"/></name> <argument_list pos:line="70" pos:column="33">(<argument><expr><name><name pos:line="70" pos:column="34">fields<pos:position pos:line="70" pos:column="40"/></name><index pos:line="70" pos:column="40">[<expr><literal type="number" pos:line="70" pos:column="41">0<pos:position pos:line="70" pos:column="42"/></literal></expr>]<pos:position pos:line="70" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="45">"post-decompress bytes"<pos:position pos:line="70" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="69"/></argument_list></call> <operator pos:line="70" pos:column="70">==<pos:position pos:line="70" pos:column="72"/></operator> <literal type="number" pos:line="70" pos:column="73">0<pos:position pos:line="70" pos:column="74"/></literal></expr>)<pos:position pos:line="70" pos:column="75"/></condition><then pos:line="70" pos:column="75">
		<block pos:line="71" pos:column="17">{
			<expr_stmt><expr><name pos:line="72" pos:column="25">post_decompress<pos:position pos:line="72" pos:column="40"/></name> <operator pos:line="72" pos:column="41">=<pos:position pos:line="72" pos:column="42"/></operator> <call><name pos:line="72" pos:column="43">atoll<pos:position pos:line="72" pos:column="48"/></name> <argument_list pos:line="72" pos:column="49">(<argument><expr><name><name pos:line="72" pos:column="50">fields<pos:position pos:line="72" pos:column="56"/></name><index pos:line="72" pos:column="56">[<expr><literal type="number" pos:line="72" pos:column="57">1<pos:position pos:line="72" pos:column="58"/></literal></expr>]<pos:position pos:line="72" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="73" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="74" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="76" pos:column="9">iostats_submit<pos:position pos:line="76" pos:column="23"/></name> <argument_list pos:line="76" pos:column="24">(<argument><expr><name pos:line="76" pos:column="25">name<pos:position pos:line="76" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="31">"traffic"<pos:position pos:line="76" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="42">link_rx<pos:position pos:line="76" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="51">link_tx<pos:position pos:line="76" pos:column="58"/></name></expr></argument>)<pos:position pos:line="76" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="60"/></expr_stmt>

	<comment type="block" pos:line="78" pos:column="9">/* we need to force this order to avoid negative values with these unsigned */</comment>
	<expr_stmt><expr><name pos:line="79" pos:column="9">overhead_rx<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">=<pos:position pos:line="79" pos:column="22"/></operator> <operator pos:line="79" pos:column="23">(<pos:position pos:line="79" pos:column="24"/></operator><operator pos:line="79" pos:column="24">(<pos:position pos:line="79" pos:column="25"/></operator><operator pos:line="79" pos:column="25">(<pos:position pos:line="79" pos:column="26"/></operator><name pos:line="79" pos:column="26">link_rx<pos:position pos:line="79" pos:column="33"/></name> <operator pos:line="79" pos:column="34">-<pos:position pos:line="79" pos:column="35"/></operator> <name pos:line="79" pos:column="36">pre_decompress<pos:position pos:line="79" pos:column="50"/></name><operator pos:line="79" pos:column="50">)<pos:position pos:line="79" pos:column="51"/></operator> <operator pos:line="79" pos:column="52">+<pos:position pos:line="79" pos:column="53"/></operator> <name pos:line="79" pos:column="54">post_decompress<pos:position pos:line="79" pos:column="69"/></name><operator pos:line="79" pos:column="69">)<pos:position pos:line="79" pos:column="70"/></operator> <operator pos:line="79" pos:column="71">-<pos:position pos:line="79" pos:column="72"/></operator> <name pos:line="79" pos:column="73">tun_rx<pos:position pos:line="79" pos:column="79"/></name><operator pos:line="79" pos:column="79">)<pos:position pos:line="79" pos:column="80"/></operator></expr>;<pos:position pos:line="79" pos:column="81"/></expr_stmt>
	<expr_stmt><expr><name pos:line="80" pos:column="9">overhead_tx<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <operator pos:line="80" pos:column="23">(<pos:position pos:line="80" pos:column="24"/></operator><operator pos:line="80" pos:column="24">(<pos:position pos:line="80" pos:column="25"/></operator><operator pos:line="80" pos:column="25">(<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="26">link_tx<pos:position pos:line="80" pos:column="33"/></name> <operator pos:line="80" pos:column="34">-<pos:position pos:line="80" pos:column="35"/></operator> <name pos:line="80" pos:column="36">post_compress<pos:position pos:line="80" pos:column="49"/></name><operator pos:line="80" pos:column="49">)<pos:position pos:line="80" pos:column="50"/></operator> <operator pos:line="80" pos:column="51">+<pos:position pos:line="80" pos:column="52"/></operator> <name pos:line="80" pos:column="53">pre_compress<pos:position pos:line="80" pos:column="65"/></name><operator pos:line="80" pos:column="65">)<pos:position pos:line="80" pos:column="66"/></operator> <operator pos:line="80" pos:column="67">-<pos:position pos:line="80" pos:column="68"/></operator> <name pos:line="80" pos:column="69">tun_tx<pos:position pos:line="80" pos:column="75"/></name><operator pos:line="80" pos:column="75">)<pos:position pos:line="80" pos:column="76"/></operator></expr>;<pos:position pos:line="80" pos:column="77"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="82" pos:column="9">iostats_submit<pos:position pos:line="82" pos:column="23"/></name> <argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">name<pos:position pos:line="82" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="31">"overhead"<pos:position pos:line="82" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="43">overhead_rx<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">overhead_tx<pos:position pos:line="82" pos:column="67"/></name></expr></argument>)<pos:position pos:line="82" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="69"/></expr_stmt>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">collect_compression<pos:position pos:line="84" pos:column="32"/></name></expr>)<pos:position pos:line="84" pos:column="33"/></condition><then pos:line="84" pos:column="33">
	<block pos:line="85" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">compression_submit<pos:position pos:line="86" pos:column="35"/></name> <argument_list pos:line="86" pos:column="36">(<argument><expr><name pos:line="86" pos:column="37">name<pos:position pos:line="86" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="43">"data_in"<pos:position pos:line="86" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="54">post_decompress<pos:position pos:line="86" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="71">pre_decompress<pos:position pos:line="86" pos:column="85"/></name></expr></argument>)<pos:position pos:line="86" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">compression_submit<pos:position pos:line="87" pos:column="35"/></name> <argument_list pos:line="87" pos:column="36">(<argument><expr><name pos:line="87" pos:column="37">name<pos:position pos:line="87" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="43">"data_out"<pos:position pos:line="87" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="55">pre_compress<pos:position pos:line="87" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="69">post_compress<pos:position pos:line="87" pos:column="82"/></name></expr></argument>)<pos:position pos:line="87" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="84"/></expr_stmt>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="90" pos:column="9">read<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">=<pos:position pos:line="90" pos:column="15"/></operator> <literal type="number" pos:line="90" pos:column="16">1<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></expr_stmt>

	<return pos:line="92" pos:column="9">return <expr><operator pos:line="92" pos:column="16">(<pos:position pos:line="92" pos:column="17"/></operator><name pos:line="92" pos:column="17">read<pos:position pos:line="92" pos:column="21"/></name><operator pos:line="92" pos:column="21">)<pos:position pos:line="92" pos:column="22"/></operator></expr>;<pos:position pos:line="92" pos:column="23"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
