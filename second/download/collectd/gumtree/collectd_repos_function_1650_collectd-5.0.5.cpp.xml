<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1650_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sensors_config<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">key<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">value<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">sensor_list<pos:position pos:line="3" pos:column="24"/></name> <operator pos:line="3" pos:column="25">==<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="28">NULL<pos:position pos:line="3" pos:column="32"/></name></expr>)<pos:position pos:line="3" pos:column="33"/></condition><then pos:line="3" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">sensor_list<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">=<pos:position pos:line="4" pos:column="30"/></operator> <call><name pos:line="4" pos:column="31">ignorelist_create<pos:position pos:line="4" pos:column="48"/></name> <argument_list pos:line="4" pos:column="49">(<argument><expr><literal type="number" pos:line="4" pos:column="50">1<pos:position pos:line="4" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="53"/></expr_stmt></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strcasecmp<pos:position pos:line="6" pos:column="23"/></name> <argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">key<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="30">"Sensor"<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call> <operator pos:line="6" pos:column="40">==<pos:position pos:line="6" pos:column="42"/></operator> <literal type="number" pos:line="6" pos:column="43">0<pos:position pos:line="6" pos:column="44"/></literal></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45">
	<block pos:line="7" pos:column="9">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">ignorelist_add<pos:position pos:line="8" pos:column="35"/></name> <argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">sensor_list<pos:position pos:line="8" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="50">value<pos:position pos:line="8" pos:column="55"/></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="57"/></condition><then pos:line="8" pos:column="57">
		<block pos:line="9" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">ERROR<pos:position pos:line="10" pos:column="30"/></name> <argument_list pos:line="10" pos:column="31">(<argument><expr><literal type="string" pos:line="10" pos:column="32">"sensors plugin: "<pos:position pos:line="10" pos:column="50"/></literal>
					<literal type="string" pos:line="11" pos:column="41">"Cannot add value to ignorelist."<pos:position pos:line="11" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><operator pos:line="12" pos:column="32">(<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal><operator pos:line="12" pos:column="34">)<pos:position pos:line="12" pos:column="35"/></operator></expr>;<pos:position pos:line="12" pos:column="36"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then>
	<elseif pos:line="15" pos:column="9">else <if pos:line="15" pos:column="14">if <condition pos:line="15" pos:column="17">(<expr><call><name pos:line="15" pos:column="18">strcasecmp<pos:position pos:line="15" pos:column="28"/></name> <argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">key<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="35">"IgnoreSelected"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call> <operator pos:line="15" pos:column="53">==<pos:position pos:line="15" pos:column="55"/></operator> <literal type="number" pos:line="15" pos:column="56">0<pos:position pos:line="15" pos:column="57"/></literal></expr>)<pos:position pos:line="15" pos:column="58"/></condition><then pos:line="15" pos:column="58">
	<block pos:line="16" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">ignorelist_set_invert<pos:position pos:line="17" pos:column="38"/></name> <argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">sensor_list<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="53">1<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">IS_TRUE<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">value<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">ignorelist_set_invert<pos:position pos:line="19" pos:column="46"/></name> <argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">sensor_list<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="61">0<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if></elseif>
	<else pos:line="21" pos:column="9">else
	<block pos:line="22" pos:column="9">{
		<return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><operator pos:line="23" pos:column="25">-<pos:position pos:line="23" pos:column="26"/></operator><literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal><operator pos:line="23" pos:column="27">)<pos:position pos:line="23" pos:column="28"/></operator></expr>;<pos:position pos:line="23" pos:column="29"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></else></if>

	<return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal><operator pos:line="26" pos:column="18">)<pos:position pos:line="26" pos:column="19"/></operator></expr>;<pos:position pos:line="26" pos:column="20"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
