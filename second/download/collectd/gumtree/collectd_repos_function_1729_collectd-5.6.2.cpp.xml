<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1729_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_cb_register_read<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">lua_State<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">L<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list> <comment type="block" pos:line="1" pos:column="47">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">nargs<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><call><name pos:line="3" pos:column="15">lua_gettop<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">L<pos:position pos:line="3" pos:column="27"/></name></expr></argument>)<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">nargs<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">!=<pos:position pos:line="5" pos:column="15"/></operator> <literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><call><name pos:line="6" pos:column="12">luaL_error<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">L<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="26">"Invalid number of arguments (%d != 1)"<pos:position pos:line="6" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="67">nargs<pos:position pos:line="6" pos:column="72"/></name></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="74"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">luaL_checktype<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">L<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="24">LUA_TFUNCTION<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">function_name<pos:position pos:line="10" pos:column="21"/></name><index pos:line="10" pos:column="21">[<expr><name pos:line="10" pos:column="22">DATA_MAX_NAME_LEN<pos:position pos:line="10" pos:column="39"/></name></expr>]<pos:position pos:line="10" pos:column="40"/></index></name></decl>;<pos:position pos:line="10" pos:column="41"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">ssnprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">function_name<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="28">sizeof<argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">function_name<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="51">"lua/%s"<pos:position pos:line="11" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="61">lua_tostring<pos:position pos:line="11" pos:column="73"/></name><argument_list pos:line="11" pos:column="73">(<argument><expr><name pos:line="11" pos:column="74">L<pos:position pos:line="11" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="77">1<pos:position pos:line="11" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="81"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">callback_id<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><call><name pos:line="13" pos:column="21">clua_store_callback<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name pos:line="13" pos:column="41">L<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="44">1<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="47"/></decl_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">callback_id<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><call><name pos:line="15" pos:column="12">luaL_error<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">L<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"%s"<pos:position pos:line="15" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="32">"Storing callback function failed"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">lua_State<pos:position pos:line="17" pos:column="12"/></name> <modifier pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></modifier></type><name pos:line="17" pos:column="14">thread<pos:position pos:line="17" pos:column="20"/></name> <init pos:line="17" pos:column="21">= <expr><call><name pos:line="17" pos:column="23">lua_newthread<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">L<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="40"/></decl_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">thread<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><call><name pos:line="19" pos:column="12">luaL_error<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">L<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="26">"%s"<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="32">"lua_newthread failed"<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">clua_store_thread<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">L<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="24">-<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">1<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">lua_pop<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">L<pos:position pos:line="21" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="23" pos:column="3">clua_callback_data_t<pos:position pos:line="23" pos:column="23"/></name> <modifier pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></modifier></type><name pos:line="23" pos:column="25">cb<pos:position pos:line="23" pos:column="27"/></name> <init pos:line="23" pos:column="28">= <expr><call><name pos:line="23" pos:column="30">calloc<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><literal type="number" pos:line="23" pos:column="37">1<pos:position pos:line="23" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="40">sizeof<argument_list pos:line="23" pos:column="46">(<argument><expr><operator pos:line="23" pos:column="47">*<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="48">cb<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="53"/></decl_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">cb<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">==<pos:position pos:line="24" pos:column="12"/></operator> <name pos:line="24" pos:column="13">NULL<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><call><name pos:line="25" pos:column="12">luaL_error<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">L<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="26">"%s"<pos:position pos:line="25" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="32">"calloc failed"<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="27" pos:column="3">cb<pos:position pos:line="27" pos:column="5"/></name><operator pos:line="27" pos:column="5">-&gt;<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="7">lua_state<pos:position pos:line="27" pos:column="16"/></name></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">thread<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">cb<pos:position pos:line="28" pos:column="5"/></name><operator pos:line="28" pos:column="5">-&gt;<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="7">callback_id<pos:position pos:line="28" pos:column="18"/></name></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">callback_id<pos:position pos:line="28" pos:column="32"/></name></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="29" pos:column="3">cb<pos:position pos:line="29" pos:column="5"/></name><operator pos:line="29" pos:column="5">-&gt;<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="7">lua_function_name<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <call><name pos:line="29" pos:column="27">strdup<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">function_name<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">pthread_mutex_init<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><operator pos:line="30" pos:column="22">&amp;<pos:position pos:line="30" pos:column="27"/></operator><name><name pos:line="30" pos:column="23">cb<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">lock<pos:position pos:line="30" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">NULL<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="32" pos:column="3">user_data_t<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">ud<pos:position pos:line="32" pos:column="17"/></name> <init pos:line="32" pos:column="18">= <expr><block pos:line="32" pos:column="20">{<expr><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">data<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">cb<pos:position pos:line="32" pos:column="31"/></name></expr>}<pos:position pos:line="32" pos:column="32"/></block></expr></init></decl>;<pos:position pos:line="32" pos:column="33"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="34" pos:column="3">int<pos:position pos:line="34" pos:column="6"/></name></type> <name pos:line="34" pos:column="7">status<pos:position pos:line="34" pos:column="13"/></name> <init pos:line="34" pos:column="14">= <expr><call><name pos:line="34" pos:column="16">plugin_register_complex_read<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<comment type="block" pos:line="34" pos:column="45">/* group = */</comment> <argument><expr><literal type="string" pos:line="34" pos:column="59">"lua"<pos:position pos:line="34" pos:column="64"/></literal></expr></argument>,
                                            <comment type="block" pos:line="35" pos:column="45">/* name      = */</comment> <argument><expr><name pos:line="35" pos:column="63">function_name<pos:position pos:line="35" pos:column="76"/></name></expr></argument>,
                                            <comment type="block" pos:line="36" pos:column="45">/* callback  = */</comment> <argument><expr><name pos:line="36" pos:column="63">clua_read<pos:position pos:line="36" pos:column="72"/></name></expr></argument>,
                                            <comment type="block" pos:line="37" pos:column="45">/* interval  = */</comment> <argument><expr><literal type="number" pos:line="37" pos:column="63">0<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>,
                                            <comment type="block" pos:line="38" pos:column="45">/* user_data = */</comment> <argument><expr><operator pos:line="38" pos:column="63">&amp;<pos:position pos:line="38" pos:column="68"/></operator><name pos:line="38" pos:column="64">ud<pos:position pos:line="38" pos:column="66"/></name></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="68"/></decl_stmt>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">!=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal></expr>)<pos:position pos:line="40" pos:column="19"/></condition><then pos:line="40" pos:column="19">
    <block type="pseudo"><return pos:line="41" pos:column="5">return <expr><call><name pos:line="41" pos:column="12">luaL_error<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">L<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="26">"%s"<pos:position pos:line="41" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="32">"plugin_register_complex_read failed"<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="71"/></return></block></then></if>
  <return pos:line="42" pos:column="3">return <expr><literal type="number" pos:line="42" pos:column="10">0<pos:position pos:line="42" pos:column="11"/></literal></expr>;<pos:position pos:line="42" pos:column="12"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
