<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_603_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">MPL3115_init_sensor<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <block pos:line="1" pos:column="38">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">__s32<pos:position pos:line="2" pos:column="8"/></name></type> <name pos:line="2" pos:column="9">res<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">__s8<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">offset<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">errbuf<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">1024<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Reset the sensor. It will reset immediately without ACKing */</comment>
  <comment type="block" pos:line="7" pos:column="3">/* the transaction, so no error handling here. */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">i2c_smbus_write_byte_data<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">i2c_bus_fd<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">MPL3115_REG_CTRL_REG1<pos:position pos:line="8" pos:column="62"/></name></expr></argument>,
                            <argument><expr><name pos:line="9" pos:column="29">MPL3115_CTRL_REG1_RST<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* wait some time for the reset to finish */</comment>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">usleep<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><literal type="number" pos:line="12" pos:column="10">100000<pos:position pos:line="12" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* now it should be in standby already so we can go and configure it */</comment>

  <comment type="block" pos:line="16" pos:column="3">/*  Set temperature offset. */</comment>
  <comment type="block" pos:line="17" pos:column="3">/*  result = ADCtemp + offset [C] */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">offset<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call pos:line="18" pos:column="12">(<name pos:line="18" pos:column="13">__s8<pos:position pos:line="18" pos:column="17"/></name>)<argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">config_temp_offset<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></operator> <literal type="number" pos:line="18" pos:column="40">16.0<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">res<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">i2c_smbus_write_byte_data<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">i2c_bus_fd<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">MPL3115_REG_OFF_T<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="66">offset<pos:position pos:line="19" pos:column="72"/></name></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">res<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">&lt;<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15"> <block pos:line="20" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ERROR<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><literal type="string" pos:line="21" pos:column="11">"barometer: MPL3115_init_sensor - problem setting temp offset: %s"<pos:position pos:line="21" pos:column="77"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="22" pos:column="11">sstrerror<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">errno<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">errbuf<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="36">sizeof<argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">errbuf<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">-<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">1<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/*  Set pressure offset. */</comment>
  <comment type="block" pos:line="27" pos:column="3">/*  result = ADCpress + offset [hPa] */</comment>
  <expr_stmt><expr><name pos:line="28" pos:column="3">offset<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <call pos:line="28" pos:column="12">(<name pos:line="28" pos:column="13">__s8<pos:position pos:line="28" pos:column="17"/></name>)<argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">config_press_offset<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">*<pos:position pos:line="28" pos:column="40"/></operator> <literal type="number" pos:line="28" pos:column="41">100.0<pos:position pos:line="28" pos:column="46"/></literal> <operator pos:line="28" pos:column="47">/<pos:position pos:line="28" pos:column="48"/></operator> <literal type="number" pos:line="28" pos:column="49">4.0<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">res<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">i2c_smbus_write_byte_data<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">i2c_bus_fd<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">MPL3115_REG_OFF_P<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="66">offset<pos:position pos:line="29" pos:column="72"/></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">res<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">&lt;<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="13">0<pos:position pos:line="30" pos:column="14"/></literal></expr>)<pos:position pos:line="30" pos:column="15"/></condition><then pos:line="30" pos:column="15"> <block pos:line="30" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ERROR<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(
        <argument><expr><literal type="string" pos:line="32" pos:column="9">"barometer: MPL3115_init_sensor - problem setting pressure offset: %s"<pos:position pos:line="32" pos:column="79"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="33" pos:column="9">sstrerror<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">errno<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="26">errbuf<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="34">sizeof<argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">errbuf<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">-<pos:position pos:line="34" pos:column="13"/></operator><literal type="number" pos:line="34" pos:column="13">1<pos:position pos:line="34" pos:column="14"/></literal></expr>;<pos:position pos:line="34" pos:column="15"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* Enable Data Flags in PT_DATA_CFG - flags on both pressure and temp */</comment>
  <expr_stmt><expr><name pos:line="38" pos:column="3">res<pos:position pos:line="38" pos:column="6"/></name> <operator pos:line="38" pos:column="7">=<pos:position pos:line="38" pos:column="8"/></operator> <call><name pos:line="38" pos:column="9">i2c_smbus_write_byte_data<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">i2c_bus_fd<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">MPL3115_REG_PT_DATA_CFG<pos:position pos:line="38" pos:column="70"/></name></expr></argument>,
                                  <argument><expr><name pos:line="39" pos:column="35">MPL3115_PT_DATA_DREM<pos:position pos:line="39" pos:column="55"/></name> <operator pos:line="39" pos:column="56">|<pos:position pos:line="39" pos:column="57"/></operator> <name pos:line="39" pos:column="58">MPL3115_PT_DATA_PDEF<pos:position pos:line="39" pos:column="78"/></name> <operator pos:line="39" pos:column="79">|<pos:position pos:line="39" pos:column="80"/></operator>
                                      <name pos:line="40" pos:column="39">MPL3115_PT_DATA_TDEF<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name pos:line="41" pos:column="7">res<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">&lt;<pos:position pos:line="41" pos:column="15"/></operator> <literal type="number" pos:line="41" pos:column="13">0<pos:position pos:line="41" pos:column="14"/></literal></expr>)<pos:position pos:line="41" pos:column="15"/></condition><then pos:line="41" pos:column="15"> <block pos:line="41" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">ERROR<pos:position pos:line="42" pos:column="10"/></name><argument_list pos:line="42" pos:column="10">(<argument><expr><literal type="string" pos:line="42" pos:column="11">"barometer: MPL3115_init_sensor - problem setting PT_DATA_CFG: %s"<pos:position pos:line="42" pos:column="77"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="43" pos:column="11">sstrerror<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">errno<pos:position pos:line="43" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="28">errbuf<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="36">sizeof<argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">errbuf<pos:position pos:line="43" pos:column="49"/></name></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><operator pos:line="44" pos:column="12">-<pos:position pos:line="44" pos:column="13"/></operator><literal type="number" pos:line="44" pos:column="13">1<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* Set to barometer with an OSR */</comment>
  <expr_stmt><expr><name pos:line="48" pos:column="3">res<pos:position pos:line="48" pos:column="6"/></name> <operator pos:line="48" pos:column="7">=<pos:position pos:line="48" pos:column="8"/></operator> <call><name pos:line="48" pos:column="9">i2c_smbus_write_byte_data<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name pos:line="48" pos:column="35">i2c_bus_fd<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">MPL3115_REG_CTRL_REG1<pos:position pos:line="48" pos:column="68"/></name></expr></argument>,
                                  <argument><expr><name pos:line="49" pos:column="35">mpl3115_oversample<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name pos:line="50" pos:column="7">res<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">&lt;<pos:position pos:line="50" pos:column="15"/></operator> <literal type="number" pos:line="50" pos:column="13">0<pos:position pos:line="50" pos:column="14"/></literal></expr>)<pos:position pos:line="50" pos:column="15"/></condition><then pos:line="50" pos:column="15"> <block pos:line="50" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ERROR<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><literal type="string" pos:line="51" pos:column="11">"barometer: MPL3115_init_sensor - problem configuring CTRL_REG1: %s"<pos:position pos:line="51" pos:column="79"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="52" pos:column="11">sstrerror<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">errno<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="28">errbuf<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="36">sizeof<argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">errbuf<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <return pos:line="56" pos:column="3">return <expr><literal type="number" pos:line="56" pos:column="10">0<pos:position pos:line="56" pos:column="11"/></literal></expr>;<pos:position pos:line="56" pos:column="12"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
