<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_669_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_config<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">key<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list> <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">strcasecmp<pos:position pos:line="3" pos:column="23"/></name> <argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">key<pos:position pos:line="3" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="30">"Socket"<pos:position pos:line="3" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="39"/></argument_list></call> <operator pos:line="3" pos:column="40">==<pos:position pos:line="3" pos:column="42"/></operator> <literal type="number" pos:line="3" pos:column="43">0<pos:position pos:line="3" pos:column="44"/></literal></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45"> <block pos:line="3" pos:column="46">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><name pos:line="4" pos:column="21">memcached_socket<pos:position pos:line="4" pos:column="37"/></name> <operator pos:line="4" pos:column="38">!=<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="41">NULL<pos:position pos:line="4" pos:column="45"/></name></expr>)<pos:position pos:line="4" pos:column="46"/></condition><then pos:line="4" pos:column="46"> <block pos:line="4" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="5" pos:column="25">free<pos:position pos:line="5" pos:column="29"/></name> <argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">memcached_socket<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="6" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="7" pos:column="17">memcached_socket<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">=<pos:position pos:line="7" pos:column="35"/></operator> <call><name pos:line="7" pos:column="36">strdup<pos:position pos:line="7" pos:column="42"/></name> <argument_list pos:line="7" pos:column="43">(<argument><expr><name pos:line="7" pos:column="44">value<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then> <elseif pos:line="8" pos:column="11">else <if pos:line="8" pos:column="16">if <condition pos:line="8" pos:column="19">(<expr><call><name pos:line="8" pos:column="20">strcasecmp<pos:position pos:line="8" pos:column="30"/></name> <argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">key<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="37">"Host"<pos:position pos:line="8" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call> <operator pos:line="8" pos:column="45">==<pos:position pos:line="8" pos:column="47"/></operator> <literal type="number" pos:line="8" pos:column="48">0<pos:position pos:line="8" pos:column="49"/></literal></expr>)<pos:position pos:line="8" pos:column="50"/></condition><then pos:line="8" pos:column="50"> <block pos:line="8" pos:column="51">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">memcached_host<pos:position pos:line="9" pos:column="35"/></name> <operator pos:line="9" pos:column="36">!=<pos:position pos:line="9" pos:column="38"/></operator> <name pos:line="9" pos:column="39">NULL<pos:position pos:line="9" pos:column="43"/></name></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">free<pos:position pos:line="10" pos:column="29"/></name> <argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">memcached_host<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">memcached_host<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <call><name pos:line="12" pos:column="34">strdup<pos:position pos:line="12" pos:column="40"/></name> <argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">value<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">strcasecmp<pos:position pos:line="13" pos:column="30"/></name> <argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">key<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"Port"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call> <operator pos:line="13" pos:column="45">==<pos:position pos:line="13" pos:column="47"/></operator> <literal type="number" pos:line="13" pos:column="48">0<pos:position pos:line="13" pos:column="49"/></literal></expr>)<pos:position pos:line="13" pos:column="50"/></condition><then pos:line="13" pos:column="50"> <block pos:line="13" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">port<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><call pos:line="14" pos:column="28">(<name pos:line="14" pos:column="29">int<pos:position pos:line="14" pos:column="32"/></name>) <argument_list pos:line="14" pos:column="34">(<argument><expr><call><name pos:line="14" pos:column="35">atof<pos:position pos:line="14" pos:column="39"/></name> <argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">value<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="49"/></decl_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">(<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">port<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">&gt;<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="29">0<pos:position pos:line="15" pos:column="30"/></literal><operator pos:line="15" pos:column="30">)<pos:position pos:line="15" pos:column="31"/></operator> <operator pos:line="15" pos:column="32">&amp;&amp;<pos:position pos:line="15" pos:column="42"/></operator> <operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">port<pos:position pos:line="15" pos:column="40"/></name> <operator pos:line="15" pos:column="41">&lt;=<pos:position pos:line="15" pos:column="46"/></operator> <literal type="number" pos:line="15" pos:column="44">65535<pos:position pos:line="15" pos:column="49"/></literal><operator pos:line="15" pos:column="49">)<pos:position pos:line="15" pos:column="50"/></operator></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51"> <block pos:line="15" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">ssnprintf<pos:position pos:line="16" pos:column="34"/></name> <argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">memcached_port<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="52">sizeof <argument_list pos:line="16" pos:column="59">(<argument><expr><name pos:line="16" pos:column="60">memcached_port<pos:position pos:line="16" pos:column="74"/></name></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="77">"%i"<pos:position pos:line="16" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="83">port<pos:position pos:line="16" pos:column="87"/></name></expr></argument>)<pos:position pos:line="16" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="89"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then> <else pos:line="17" pos:column="19">else <block pos:line="17" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">sstrncpy<pos:position pos:line="18" pos:column="33"/></name> <argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">memcached_port<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">value<pos:position pos:line="18" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="58">sizeof <argument_list pos:line="18" pos:column="65">(<argument><expr><name pos:line="18" pos:column="66">memcached_port<pos:position pos:line="18" pos:column="80"/></name></expr></argument>)<pos:position pos:line="18" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="83"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></else></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if></elseif> <else pos:line="20" pos:column="11">else <block pos:line="20" pos:column="16">{
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">-<pos:position pos:line="21" pos:column="25"/></operator><literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></else></if>

	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
