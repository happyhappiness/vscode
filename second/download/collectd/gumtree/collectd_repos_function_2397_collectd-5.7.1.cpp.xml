<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2397_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">server_open_socket<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">lcc_server_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">srv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list> <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">ai_list<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">srv<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">==<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">srv<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">fd<pos:position pos:line="9" pos:column="14"/></name></name> <operator pos:line="9" pos:column="15">&gt;=<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="5">server_close_socket<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">srv<pos:position pos:line="10" pos:column="28"/></name></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">addrinfo<pos:position pos:line="12" pos:column="18"/></name></name></type> <name pos:line="12" pos:column="19">ai_hints<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><block pos:line="12" pos:column="30">{<expr><operator pos:line="12" pos:column="31">.<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">ai_family<pos:position pos:line="12" pos:column="41"/></name> <operator pos:line="12" pos:column="42">=<pos:position pos:line="12" pos:column="43"/></operator> <name pos:line="12" pos:column="44">AF_UNSPEC<pos:position pos:line="12" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="13" pos:column="31">.<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">ai_flags<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">=<pos:position pos:line="13" pos:column="42"/></operator> <name pos:line="13" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="13" pos:column="56"/></name></expr>,
                              <expr><operator pos:line="14" pos:column="31">.<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">ai_socktype<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">=<pos:position pos:line="14" pos:column="45"/></operator> <name pos:line="14" pos:column="46">SOCK_DGRAM<pos:position pos:line="14" pos:column="56"/></name></expr>}<pos:position pos:line="14" pos:column="57"/></block></expr></init></decl>;<pos:position pos:line="14" pos:column="58"/></decl_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">status<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">getaddrinfo<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name><name pos:line="16" pos:column="24">srv<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">node<pos:position pos:line="16" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="35">srv<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">service<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="49">&amp;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="50">ai_hints<pos:position pos:line="16" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="60">&amp;<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="61">ai_list<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">status<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator></expr>;<pos:position pos:line="18" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">assert<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">ai_list<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">!=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">NULL<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

  <for pos:line="21" pos:column="3">for <control pos:line="21" pos:column="7">(<init><decl><type><name><name pos:line="21" pos:column="8">struct<pos:position pos:line="21" pos:column="14"/></name> <name pos:line="21" pos:column="15">addrinfo<pos:position pos:line="21" pos:column="23"/></name></name> <modifier pos:line="21" pos:column="24">*<pos:position pos:line="21" pos:column="25"/></modifier><name pos:line="21" pos:column="25">ai_ptr<pos:position pos:line="21" pos:column="31"/></name></type> <init pos:line="21" pos:column="32">= <expr><name pos:line="21" pos:column="34">ai_list<pos:position pos:line="21" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="42"/></init> <condition><expr><name pos:line="21" pos:column="43">ai_ptr<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">!=<pos:position pos:line="21" pos:column="52"/></operator> <name pos:line="21" pos:column="53">NULL<pos:position pos:line="21" pos:column="57"/></name></expr>;<pos:position pos:line="21" pos:column="58"/></condition>
       <incr><expr><name pos:line="22" pos:column="8">ai_ptr<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name><name pos:line="22" pos:column="17">ai_ptr<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">ai_next<pos:position pos:line="22" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="22" pos:column="33"/></control> <block pos:line="22" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">srv<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">-&gt;<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="10">fd<pos:position pos:line="23" pos:column="12"/></name></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator>
        <call><name pos:line="24" pos:column="9">socket<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name><name pos:line="24" pos:column="16">ai_ptr<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">-&gt;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="24">ai_family<pos:position pos:line="24" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="35">ai_ptr<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">-&gt;<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="43">ai_socktype<pos:position pos:line="24" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="56">ai_ptr<pos:position pos:line="24" pos:column="62"/></name><operator pos:line="24" pos:column="62">-&gt;<pos:position pos:line="24" pos:column="67"/></operator><name pos:line="24" pos:column="64">ai_protocol<pos:position pos:line="24" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">srv<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">fd<pos:position pos:line="25" pos:column="16"/></name></name> <operator pos:line="25" pos:column="17">&lt;<pos:position pos:line="25" pos:column="21"/></operator> <literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
      <block type="pseudo"><continue pos:line="26" pos:column="7">continue;<pos:position pos:line="26" pos:column="16"/></continue></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">ai_ptr<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">ai_family<pos:position pos:line="28" pos:column="26"/></name></name> <operator pos:line="28" pos:column="27">==<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="30">AF_INET<pos:position pos:line="28" pos:column="37"/></name></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38"> <block pos:line="28" pos:column="39">{
      <decl_stmt><decl><type><name><name pos:line="29" pos:column="7">struct<pos:position pos:line="29" pos:column="13"/></name> <name pos:line="29" pos:column="14">sockaddr_in<pos:position pos:line="29" pos:column="25"/></name></name> <modifier pos:line="29" pos:column="26">*<pos:position pos:line="29" pos:column="27"/></modifier></type><name pos:line="29" pos:column="27">addr<pos:position pos:line="29" pos:column="31"/></name> <init pos:line="29" pos:column="32">= <expr><operator pos:line="29" pos:column="34">(<pos:position pos:line="29" pos:column="35"/></operator>struct <name pos:line="29" pos:column="42">sockaddr_in<pos:position pos:line="29" pos:column="53"/></name> <operator pos:line="29" pos:column="54">*<pos:position pos:line="29" pos:column="55"/></operator><operator pos:line="29" pos:column="55">)<pos:position pos:line="29" pos:column="56"/></operator><name><name pos:line="29" pos:column="56">ai_ptr<pos:position pos:line="29" pos:column="62"/></name><operator pos:line="29" pos:column="62">-&gt;<pos:position pos:line="29" pos:column="67"/></operator><name pos:line="29" pos:column="64">ai_addr<pos:position pos:line="29" pos:column="71"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="72"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">int<pos:position pos:line="30" pos:column="10"/></name></type> <name pos:line="30" pos:column="11">optname<pos:position pos:line="30" pos:column="18"/></name></decl>;<pos:position pos:line="30" pos:column="19"/></decl_stmt>

      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><call><name pos:line="32" pos:column="11">IN_MULTICAST<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><call><name pos:line="32" pos:column="24">ntohl<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name><name pos:line="32" pos:column="30">addr<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">sin_addr<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">.<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="45">s_addr<pos:position pos:line="32" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="54"/></condition><then pos:line="32" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">optname<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">IP_MULTICAST_TTL<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt></block></then>
      <else pos:line="34" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">optname<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">IP_TTL<pos:position pos:line="35" pos:column="25"/></name></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="37" pos:column="7">status<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator>
          <call><name pos:line="38" pos:column="11">setsockopt<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name><name pos:line="38" pos:column="22">srv<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">-&gt;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="27">fd<pos:position pos:line="38" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="31">IPPROTO_IP<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">optname<pos:position pos:line="38" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="52">&amp;<pos:position pos:line="38" pos:column="57"/></operator><name><name pos:line="38" pos:column="53">srv<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">-&gt;<pos:position pos:line="38" pos:column="61"/></operator><name pos:line="38" pos:column="58">ttl<pos:position pos:line="38" pos:column="61"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="63">sizeof<argument_list pos:line="38" pos:column="69">(<argument><expr><name><name pos:line="38" pos:column="70">srv<pos:position pos:line="38" pos:column="73"/></name><operator pos:line="38" pos:column="73">-&gt;<pos:position pos:line="38" pos:column="78"/></operator><name pos:line="38" pos:column="75">ttl<pos:position pos:line="38" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then> <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if <condition pos:line="39" pos:column="15">(<expr><name><name pos:line="39" pos:column="16">ai_ptr<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">-&gt;<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="24">ai_family<pos:position pos:line="39" pos:column="33"/></name></name> <operator pos:line="39" pos:column="34">==<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">AF_INET6<pos:position pos:line="39" pos:column="45"/></name></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46"> <block pos:line="39" pos:column="47">{
      <comment type="block" pos:line="40" pos:column="7">/* Useful example:
       * http://gsyc.escet.urjc.es/~eva/IPv6-web/examples/mcast.html */</comment>
      <decl_stmt><decl><type><name><name pos:line="42" pos:column="7">struct<pos:position pos:line="42" pos:column="13"/></name> <name pos:line="42" pos:column="14">sockaddr_in6<pos:position pos:line="42" pos:column="26"/></name></name> <modifier pos:line="42" pos:column="27">*<pos:position pos:line="42" pos:column="28"/></modifier></type><name pos:line="42" pos:column="28">addr<pos:position pos:line="42" pos:column="32"/></name> <init pos:line="42" pos:column="33">= <expr><operator pos:line="42" pos:column="35">(<pos:position pos:line="42" pos:column="36"/></operator>struct <name pos:line="42" pos:column="43">sockaddr_in6<pos:position pos:line="42" pos:column="55"/></name> <operator pos:line="42" pos:column="56">*<pos:position pos:line="42" pos:column="57"/></operator><operator pos:line="42" pos:column="57">)<pos:position pos:line="42" pos:column="58"/></operator><name><name pos:line="42" pos:column="58">ai_ptr<pos:position pos:line="42" pos:column="64"/></name><operator pos:line="42" pos:column="64">-&gt;<pos:position pos:line="42" pos:column="69"/></operator><name pos:line="42" pos:column="66">ai_addr<pos:position pos:line="42" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="42" pos:column="74"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">int<pos:position pos:line="43" pos:column="10"/></name></type> <name pos:line="43" pos:column="11">optname<pos:position pos:line="43" pos:column="18"/></name></decl>;<pos:position pos:line="43" pos:column="19"/></decl_stmt>

      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">IN6_IS_ADDR_MULTICAST<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><operator pos:line="45" pos:column="33">&amp;<pos:position pos:line="45" pos:column="38"/></operator><name><name pos:line="45" pos:column="34">addr<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">sin6_addr<pos:position pos:line="45" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="51"/></condition><then pos:line="45" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="9">optname<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">IPV6_MULTICAST_HOPS<pos:position pos:line="46" pos:column="38"/></name></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt></block></then>
      <else pos:line="47" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="9">optname<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">IPV6_UNICAST_HOPS<pos:position pos:line="48" pos:column="36"/></name></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="50" pos:column="7">status<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">setsockopt<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name><name pos:line="50" pos:column="27">srv<pos:position pos:line="50" pos:column="30"/></name><operator pos:line="50" pos:column="30">-&gt;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="32">fd<pos:position pos:line="50" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">IPPROTO_IPV6<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="50">optname<pos:position pos:line="50" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="59">&amp;<pos:position pos:line="50" pos:column="64"/></operator><name><name pos:line="50" pos:column="60">srv<pos:position pos:line="50" pos:column="63"/></name><operator pos:line="50" pos:column="63">-&gt;<pos:position pos:line="50" pos:column="68"/></operator><name pos:line="50" pos:column="65">ttl<pos:position pos:line="50" pos:column="68"/></name></name></expr></argument>,
                          <argument><expr><sizeof pos:line="51" pos:column="27">sizeof<argument_list pos:line="51" pos:column="33">(<argument><expr><name><name pos:line="51" pos:column="34">srv<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">-&gt;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="39">ttl<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">status<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">!=<pos:position pos:line="53" pos:column="18"/></operator> <literal type="number" pos:line="53" pos:column="19">0<pos:position pos:line="53" pos:column="20"/></literal></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21"> <block pos:line="53" pos:column="22">{
      <comment type="block" pos:line="54" pos:column="7">/* setsockopt failed. */</comment>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">close<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name><name pos:line="55" pos:column="13">srv<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">-&gt;<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="18">fd<pos:position pos:line="55" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="56" pos:column="7">srv<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">fd<pos:position pos:line="56" pos:column="14"/></name></name> <operator pos:line="56" pos:column="15">=<pos:position pos:line="56" pos:column="16"/></operator> <operator pos:line="56" pos:column="17">-<pos:position pos:line="56" pos:column="18"/></operator><literal type="number" pos:line="56" pos:column="18">1<pos:position pos:line="56" pos:column="19"/></literal></expr>;<pos:position pos:line="56" pos:column="20"/></expr_stmt>
      <continue pos:line="57" pos:column="7">continue;<pos:position pos:line="57" pos:column="16"/></continue>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="60" pos:column="5">srv<pos:position pos:line="60" pos:column="8"/></name><operator pos:line="60" pos:column="8">-&gt;<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="10">sa<pos:position pos:line="60" pos:column="12"/></name></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name pos:line="60" pos:column="15">malloc<pos:position pos:line="60" pos:column="21"/></name><argument_list pos:line="60" pos:column="21">(<argument><expr><name><name pos:line="60" pos:column="22">ai_ptr<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">ai_addrlen<pos:position pos:line="60" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name><name pos:line="61" pos:column="9">srv<pos:position pos:line="61" pos:column="12"/></name><operator pos:line="61" pos:column="12">-&gt;<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="14">sa<pos:position pos:line="61" pos:column="16"/></name></name> <operator pos:line="61" pos:column="17">==<pos:position pos:line="61" pos:column="19"/></operator> <name pos:line="61" pos:column="20">NULL<pos:position pos:line="61" pos:column="24"/></name></expr>)<pos:position pos:line="61" pos:column="25"/></condition><then pos:line="61" pos:column="25"> <block pos:line="61" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">close<pos:position pos:line="62" pos:column="12"/></name><argument_list pos:line="62" pos:column="12">(<argument><expr><name><name pos:line="62" pos:column="13">srv<pos:position pos:line="62" pos:column="16"/></name><operator pos:line="62" pos:column="16">-&gt;<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="18">fd<pos:position pos:line="62" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="63" pos:column="7">srv<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">-&gt;<pos:position pos:line="63" pos:column="15"/></operator><name pos:line="63" pos:column="12">fd<pos:position pos:line="63" pos:column="14"/></name></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <operator pos:line="63" pos:column="17">-<pos:position pos:line="63" pos:column="18"/></operator><literal type="number" pos:line="63" pos:column="18">1<pos:position pos:line="63" pos:column="19"/></literal></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>
      <continue pos:line="64" pos:column="7">continue;<pos:position pos:line="64" pos:column="16"/></continue>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">memcpy<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name><name pos:line="67" pos:column="12">srv<pos:position pos:line="67" pos:column="15"/></name><operator pos:line="67" pos:column="15">-&gt;<pos:position pos:line="67" pos:column="20"/></operator><name pos:line="67" pos:column="17">sa<pos:position pos:line="67" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="21">ai_ptr<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">ai_addr<pos:position pos:line="67" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="38">ai_ptr<pos:position pos:line="67" pos:column="44"/></name><operator pos:line="67" pos:column="44">-&gt;<pos:position pos:line="67" pos:column="49"/></operator><name pos:line="67" pos:column="46">ai_addrlen<pos:position pos:line="67" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="68" pos:column="5">srv<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">-&gt;<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="10">sa_len<pos:position pos:line="68" pos:column="16"/></name></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <name><name pos:line="68" pos:column="19">ai_ptr<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">-&gt;<pos:position pos:line="68" pos:column="30"/></operator><name pos:line="68" pos:column="27">ai_addrlen<pos:position pos:line="68" pos:column="37"/></name></name></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
    <break pos:line="69" pos:column="5">break;<pos:position pos:line="69" pos:column="11"/></break>
  }<pos:position pos:line="70" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="72" pos:column="3">freeaddrinfo<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><name pos:line="72" pos:column="16">ai_list<pos:position pos:line="72" pos:column="23"/></name></expr></argument>)<pos:position pos:line="72" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt>

  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name><name pos:line="74" pos:column="7">srv<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">fd<pos:position pos:line="74" pos:column="14"/></name></name> <operator pos:line="74" pos:column="15">&lt;<pos:position pos:line="74" pos:column="19"/></operator> <literal type="number" pos:line="74" pos:column="17">0<pos:position pos:line="74" pos:column="18"/></literal></expr>)<pos:position pos:line="74" pos:column="19"/></condition><then pos:line="74" pos:column="19">
    <block type="pseudo"><return pos:line="75" pos:column="5">return <expr><operator pos:line="75" pos:column="12">(<pos:position pos:line="75" pos:column="13"/></operator><operator pos:line="75" pos:column="13">-<pos:position pos:line="75" pos:column="14"/></operator><literal type="number" pos:line="75" pos:column="14">1<pos:position pos:line="75" pos:column="15"/></literal><operator pos:line="75" pos:column="15">)<pos:position pos:line="75" pos:column="16"/></operator></expr>;<pos:position pos:line="75" pos:column="17"/></return></block></then></if>
  <return pos:line="76" pos:column="3">return <expr><operator pos:line="76" pos:column="10">(<pos:position pos:line="76" pos:column="11"/></operator><literal type="number" pos:line="76" pos:column="11">0<pos:position pos:line="76" pos:column="12"/></literal><operator pos:line="76" pos:column="12">)<pos:position pos:line="76" pos:column="13"/></operator></expr>;<pos:position pos:line="76" pos:column="14"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
