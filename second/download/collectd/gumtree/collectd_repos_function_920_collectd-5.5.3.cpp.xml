<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_920_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">zookeeper_query<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">buffer<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">size_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">buffer_size<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">sk<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator><literal type="number" pos:line="3" pos:column="19">1<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">buffer_fill<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">sk<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">zookeeper_connect<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">()<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">sk<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
	<block pos:line="9" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">ERROR<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"zookeeper: Could not connect to daemon"<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><operator pos:line="11" pos:column="25">-<pos:position pos:line="11" pos:column="26"/></operator><literal type="number" pos:line="11" pos:column="26">1<pos:position pos:line="11" pos:column="27"/></literal><operator pos:line="11" pos:column="27">)<pos:position pos:line="11" pos:column="28"/></operator></expr>;<pos:position pos:line="11" pos:column="29"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">int<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">)<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">swrite<pos:position pos:line="14" pos:column="30"/></name> <argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">sk<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="36">"mntr\r\n"<pos:position pos:line="14" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="48">strlen<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">(<argument><expr><literal type="string" pos:line="14" pos:column="55">"mntr\r\n"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="68"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">!=<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
	<block pos:line="16" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">char<pos:position pos:line="17" pos:column="21"/></name></type> <name><name pos:line="17" pos:column="22">errbuf<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><literal type="number" pos:line="17" pos:column="29">1024<pos:position pos:line="17" pos:column="33"/></literal></expr>]<pos:position pos:line="17" pos:column="34"/></index></name></decl>;<pos:position pos:line="17" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">ERROR<pos:position pos:line="18" pos:column="22"/></name> <argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="string" pos:line="18" pos:column="24">"zookeeper: write(2) failed: %s"<pos:position pos:line="18" pos:column="56"/></literal></expr></argument>,
			   <argument><expr><call><name pos:line="19" pos:column="28">sstrerror<pos:position pos:line="19" pos:column="37"/></name> <argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">errno<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">errbuf<pos:position pos:line="19" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="54">sizeof <argument_list pos:line="19" pos:column="61">(<argument><expr><name pos:line="19" pos:column="62">errbuf<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">close<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">sk<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">-<pos:position pos:line="21" pos:column="26"/></operator><literal type="number" pos:line="21" pos:column="26">1<pos:position pos:line="21" pos:column="27"/></literal><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator></expr>;<pos:position pos:line="21" pos:column="29"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">memset<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">buffer<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">buffer_size<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">buffer_fill<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>

	<while pos:line="27" pos:column="9">while <condition pos:line="27" pos:column="15">(<expr><operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">status<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">(<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">int<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator> <call><name pos:line="27" pos:column="32">recv<pos:position pos:line="27" pos:column="36"/></name> <argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">sk<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">buffer<pos:position pos:line="27" pos:column="48"/></name> <operator pos:line="27" pos:column="49">+<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="51">buffer_fill<pos:position pos:line="27" pos:column="62"/></name></expr></argument>,
          <argument><expr><name pos:line="28" pos:column="11">buffer_size<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">-<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">buffer_fill<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <comment type="block" pos:line="28" pos:column="38">/* flags = */</comment> <argument><expr><literal type="number" pos:line="28" pos:column="52">0<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call><operator pos:line="28" pos:column="54">)<pos:position pos:line="28" pos:column="55"/></operator> <operator pos:line="28" pos:column="56">!=<pos:position pos:line="28" pos:column="58"/></operator> <literal type="number" pos:line="28" pos:column="59">0<pos:position pos:line="28" pos:column="60"/></literal></expr>)<pos:position pos:line="28" pos:column="61"/></condition>
	<block pos:line="29" pos:column="9">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">status<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&lt;<pos:position pos:line="30" pos:column="32"/></operator> <literal type="number" pos:line="30" pos:column="30">0<pos:position pos:line="30" pos:column="31"/></literal></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32">
		<block pos:line="31" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">char<pos:position pos:line="32" pos:column="29"/></name></type> <name><name pos:line="32" pos:column="30">errbuf<pos:position pos:line="32" pos:column="36"/></name><index pos:line="32" pos:column="36">[<expr><literal type="number" pos:line="32" pos:column="37">1024<pos:position pos:line="32" pos:column="41"/></literal></expr>]<pos:position pos:line="32" pos:column="42"/></index></name></decl>;<pos:position pos:line="32" pos:column="43"/></decl_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><operator pos:line="33" pos:column="29">(<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">errno<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">==<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">EAGAIN<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator> <operator pos:line="33" pos:column="47">||<pos:position pos:line="33" pos:column="49"/></operator> <operator pos:line="33" pos:column="50">(<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="51">errno<pos:position pos:line="33" pos:column="56"/></name> <operator pos:line="33" pos:column="57">==<pos:position pos:line="33" pos:column="59"/></operator> <name pos:line="33" pos:column="60">EINTR<pos:position pos:line="33" pos:column="65"/></name><operator pos:line="33" pos:column="65">)<pos:position pos:line="33" pos:column="66"/></operator></expr>)<pos:position pos:line="33" pos:column="67"/></condition><then pos:line="33" pos:column="67">
				<block type="pseudo"><continue pos:line="34" pos:column="33">continue;<pos:position pos:line="34" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">ERROR<pos:position pos:line="35" pos:column="30"/></name> <argument_list pos:line="35" pos:column="31">(<argument><expr><literal type="string" pos:line="35" pos:column="32">"zookeeper: Error reading from socket: %s"<pos:position pos:line="35" pos:column="74"/></literal></expr></argument>,
				   <argument><expr><call><name pos:line="36" pos:column="36">sstrerror<pos:position pos:line="36" pos:column="45"/></name> <argument_list pos:line="36" pos:column="46">(<argument><expr><name pos:line="36" pos:column="47">errno<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">errbuf<pos:position pos:line="36" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="62">sizeof <argument_list pos:line="36" pos:column="69">(<argument><expr><name pos:line="36" pos:column="70">errbuf<pos:position pos:line="36" pos:column="76"/></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">close<pos:position pos:line="37" pos:column="30"/></name> <argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">sk<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
			<return pos:line="38" pos:column="25">return <expr><operator pos:line="38" pos:column="32">(<pos:position pos:line="38" pos:column="33"/></operator><operator pos:line="38" pos:column="33">-<pos:position pos:line="38" pos:column="34"/></operator><literal type="number" pos:line="38" pos:column="34">1<pos:position pos:line="38" pos:column="35"/></literal><operator pos:line="38" pos:column="35">)<pos:position pos:line="38" pos:column="36"/></operator></expr>;<pos:position pos:line="38" pos:column="37"/></return>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="41" pos:column="17">buffer_fill<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">+=<pos:position pos:line="41" pos:column="31"/></operator> <operator pos:line="41" pos:column="32">(<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="33">size_t<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">)<pos:position pos:line="41" pos:column="40"/></operator> <name pos:line="41" pos:column="41">status<pos:position pos:line="41" pos:column="47"/></name></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></while> <comment type="block" pos:line="42" pos:column="11">/* while (recv) */</comment>

	<expr_stmt><expr><name pos:line="44" pos:column="9">status<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">buffer_fill<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">==<pos:position pos:line="45" pos:column="27"/></operator> <literal type="number" pos:line="45" pos:column="28">0<pos:position pos:line="45" pos:column="29"/></literal></expr>)<pos:position pos:line="45" pos:column="30"/></condition><then pos:line="45" pos:column="30">
	<block pos:line="46" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">WARNING<pos:position pos:line="47" pos:column="24"/></name> <argument_list pos:line="47" pos:column="25">(<argument><expr><literal type="string" pos:line="47" pos:column="26">"zookeeper: No data returned by MNTR command."<pos:position pos:line="47" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">status<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <operator pos:line="48" pos:column="26">-<pos:position pos:line="48" pos:column="27"/></operator><literal type="number" pos:line="48" pos:column="27">1<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="51" pos:column="9">close<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">sk<pos:position pos:line="51" pos:column="17"/></name></expr></argument>)<pos:position pos:line="51" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><operator pos:line="52" pos:column="16">(<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">status<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">)<pos:position pos:line="52" pos:column="24"/></operator></expr>;<pos:position pos:line="52" pos:column="25"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
