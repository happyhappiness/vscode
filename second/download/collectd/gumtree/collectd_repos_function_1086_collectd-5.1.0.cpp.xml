<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1086_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">swap_read<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list> <comment type="block" pos:line="1" pos:column="29">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">swapent<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">swap_entries<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">swap_num<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">derive_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">used<pos:position pos:line="8" pos:column="22"/></name>  <init pos:line="8" pos:column="24">= <expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">derive_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">total<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">swap_num<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <call><name pos:line="11" pos:column="20">swapctl<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">SWAP_NSWAP<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">NULL<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="47">0<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">swap_num<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">&lt;<pos:position pos:line="12" pos:column="26"/></operator> <literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"swap plugin: swapctl (SWAP_NSWAP) failed with status %i."<pos:position pos:line="14" pos:column="82"/></literal></expr></argument>,
				<argument><expr><name pos:line="15" pos:column="33">swap_num<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal><operator pos:line="16" pos:column="27">)<pos:position pos:line="16" pos:column="28"/></operator></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then>
	<elseif pos:line="18" pos:column="9">else <if pos:line="18" pos:column="14">if <condition pos:line="18" pos:column="17">(<expr><name pos:line="18" pos:column="18">swap_num<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">==<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><literal type="number" pos:line="19" pos:column="25">0<pos:position pos:line="19" pos:column="26"/></literal><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator></expr>;<pos:position pos:line="19" pos:column="28"/></return></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="21" pos:column="9">swap_entries<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <call><name pos:line="21" pos:column="24">calloc<pos:position pos:line="21" pos:column="30"/></name> <argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">swap_num<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="42">sizeof <argument_list pos:line="21" pos:column="49">(<argument><expr><operator pos:line="21" pos:column="50">*<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">swap_entries<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">swap_entries<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">==<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">NULL<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34">
	<block pos:line="23" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">ERROR<pos:position pos:line="24" pos:column="22"/></name> <argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">"swap plugin: calloc failed."<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><operator pos:line="25" pos:column="25">-<pos:position pos:line="25" pos:column="26"/></operator><literal type="number" pos:line="25" pos:column="26">1<pos:position pos:line="25" pos:column="27"/></literal><operator pos:line="25" pos:column="27">)<pos:position pos:line="25" pos:column="28"/></operator></expr>;<pos:position pos:line="25" pos:column="29"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">swapctl<pos:position pos:line="28" pos:column="25"/></name> <argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">SWAP_STATS<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">swap_entries<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">swap_num<pos:position pos:line="28" pos:column="61"/></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">status<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">!=<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">swap_num<pos:position pos:line="29" pos:column="31"/></name></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32">
	<block pos:line="30" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">ERROR<pos:position pos:line="31" pos:column="22"/></name> <argument_list pos:line="31" pos:column="23">(<argument><expr><literal type="string" pos:line="31" pos:column="24">"swap plugin: swapctl (SWAP_STATS) failed with status %i."<pos:position pos:line="31" pos:column="82"/></literal></expr></argument>,
				<argument><expr><name pos:line="32" pos:column="33">status<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">sfree<pos:position pos:line="33" pos:column="22"/></name> <argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">swap_entries<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><operator pos:line="34" pos:column="25">-<pos:position pos:line="34" pos:column="26"/></operator><literal type="number" pos:line="34" pos:column="26">1<pos:position pos:line="34" pos:column="27"/></literal><operator pos:line="34" pos:column="27">)<pos:position pos:line="34" pos:column="28"/></operator></expr>;<pos:position pos:line="34" pos:column="29"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><call><name pos:line="37" pos:column="5">defined<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">DEV_BSIZE<pos:position pos:line="37" pos:column="22"/></name></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call> <operator pos:line="37" pos:column="24">&amp;&amp;<pos:position pos:line="37" pos:column="34"/></operator> <operator pos:line="37" pos:column="27">(<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">DEV_BSIZE<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">&gt;<pos:position pos:line="37" pos:column="42"/></operator> <literal type="number" pos:line="37" pos:column="40">0<pos:position pos:line="37" pos:column="41"/></literal><operator pos:line="37" pos:column="41">)<pos:position pos:line="37" pos:column="42"/></operator></expr></cpp:if>
<cpp:define pos:line="38" pos:column="1"># <cpp:directive pos:line="38" pos:column="3">define<pos:position pos:line="38" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="38" pos:column="10">C_SWAP_BLOCK_SIZE<pos:position pos:line="38" pos:column="27"/></name></cpp:macro> <cpp:value pos:line="38" pos:column="28">((derive_t) DEV_BSIZE)<pos:position pos:line="38" pos:column="50"/></cpp:value></cpp:define>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="40" pos:column="1"># <cpp:directive pos:line="40" pos:column="3">define<pos:position pos:line="40" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="40" pos:column="10">C_SWAP_BLOCK_SIZE<pos:position pos:line="40" pos:column="27"/></name></cpp:macro> <cpp:value pos:line="40" pos:column="28">((derive_t) 512)<pos:position pos:line="40" pos:column="44"/></cpp:value></cpp:define>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>

	<for pos:line="43" pos:column="9">for <control pos:line="43" pos:column="13">(<init><expr><name pos:line="43" pos:column="14">i<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></init> <condition><expr><name pos:line="43" pos:column="21">i<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&lt;<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="25">swap_num<pos:position pos:line="43" pos:column="33"/></name></expr>;<pos:position pos:line="43" pos:column="34"/></condition> <incr><expr><name pos:line="43" pos:column="35">i<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">++<pos:position pos:line="43" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="39"/></control>
	<block pos:line="44" pos:column="9">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">(<pos:position pos:line="45" pos:column="22"/></operator><name><name pos:line="45" pos:column="22">swap_entries<pos:position pos:line="45" pos:column="34"/></name><index pos:line="45" pos:column="34">[<expr><name pos:line="45" pos:column="35">i<pos:position pos:line="45" pos:column="36"/></name></expr>]<pos:position pos:line="45" pos:column="37"/></index></name><operator pos:line="45" pos:column="37">.<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">se_flags<pos:position pos:line="45" pos:column="46"/></name> <operator pos:line="45" pos:column="47">&amp;<pos:position pos:line="45" pos:column="52"/></operator> <name pos:line="45" pos:column="49">SWF_ENABLE<pos:position pos:line="45" pos:column="59"/></name><operator pos:line="45" pos:column="59">)<pos:position pos:line="45" pos:column="60"/></operator> <operator pos:line="45" pos:column="61">==<pos:position pos:line="45" pos:column="63"/></operator> <literal type="number" pos:line="45" pos:column="64">0<pos:position pos:line="45" pos:column="65"/></literal></expr>)<pos:position pos:line="45" pos:column="66"/></condition><then pos:line="45" pos:column="66">
			<block type="pseudo"><continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">used<pos:position pos:line="48" pos:column="21"/></name>  <operator pos:line="48" pos:column="23">+=<pos:position pos:line="48" pos:column="25"/></operator> <operator pos:line="48" pos:column="26">(<pos:position pos:line="48" pos:column="27"/></operator><operator pos:line="48" pos:column="27">(<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="28">derive_t<pos:position pos:line="48" pos:column="36"/></name><operator pos:line="48" pos:column="36">)<pos:position pos:line="48" pos:column="37"/></operator> <name><name pos:line="48" pos:column="38">swap_entries<pos:position pos:line="48" pos:column="50"/></name><index pos:line="48" pos:column="50">[<expr><name pos:line="48" pos:column="51">i<pos:position pos:line="48" pos:column="52"/></name></expr>]<pos:position pos:line="48" pos:column="53"/></index></name><operator pos:line="48" pos:column="53">.<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="54">se_inuse<pos:position pos:line="48" pos:column="62"/></name><operator pos:line="48" pos:column="62">)<pos:position pos:line="48" pos:column="63"/></operator>
			<operator pos:line="49" pos:column="25">*<pos:position pos:line="49" pos:column="26"/></operator> <name pos:line="49" pos:column="27">C_SWAP_BLOCK_SIZE<pos:position pos:line="49" pos:column="44"/></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">total<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">+=<pos:position pos:line="50" pos:column="25"/></operator> <operator pos:line="50" pos:column="26">(<pos:position pos:line="50" pos:column="27"/></operator><operator pos:line="50" pos:column="27">(<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="28">derive_t<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">)<pos:position pos:line="50" pos:column="37"/></operator> <name><name pos:line="50" pos:column="38">swap_entries<pos:position pos:line="50" pos:column="50"/></name><index pos:line="50" pos:column="50">[<expr><name pos:line="50" pos:column="51">i<pos:position pos:line="50" pos:column="52"/></name></expr>]<pos:position pos:line="50" pos:column="53"/></index></name><operator pos:line="50" pos:column="53">.<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="54">se_nblks<pos:position pos:line="50" pos:column="62"/></name><operator pos:line="50" pos:column="62">)<pos:position pos:line="50" pos:column="63"/></operator>
			<operator pos:line="51" pos:column="25">*<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">C_SWAP_BLOCK_SIZE<pos:position pos:line="51" pos:column="44"/></name></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></for>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">total<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">&lt;<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="21">used<pos:position pos:line="54" pos:column="25"/></name></expr>)<pos:position pos:line="54" pos:column="26"/></condition><then pos:line="54" pos:column="26">
	<block pos:line="55" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">ERROR<pos:position pos:line="56" pos:column="22"/></name> <argument_list pos:line="56" pos:column="23">(<argument><expr><literal type="string" pos:line="56" pos:column="24">"swap plugin: Total swap space (%"<pos:position pos:line="56" pos:column="58"/></literal><name pos:line="56" pos:column="58">PRIu64<pos:position pos:line="56" pos:column="64"/></name><literal type="string" pos:line="56" pos:column="64">") "<pos:position pos:line="56" pos:column="68"/></literal>
				<literal type="string" pos:line="57" pos:column="33">"is less than used swap space (%"<pos:position pos:line="57" pos:column="66"/></literal><name pos:line="57" pos:column="66">PRIu64<pos:position pos:line="57" pos:column="72"/></name><literal type="string" pos:line="57" pos:column="72">")."<pos:position pos:line="57" pos:column="76"/></literal></expr></argument>,
				<argument><expr><name pos:line="58" pos:column="33">total<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="40">used<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="46"/></expr_stmt>
		<return pos:line="59" pos:column="17">return <expr><operator pos:line="59" pos:column="24">(<pos:position pos:line="59" pos:column="25"/></operator><operator pos:line="59" pos:column="25">-<pos:position pos:line="59" pos:column="26"/></operator><literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal><operator pos:line="59" pos:column="27">)<pos:position pos:line="59" pos:column="28"/></operator></expr>;<pos:position pos:line="59" pos:column="29"/></return>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="62" pos:column="9">swap_submit_gauge<pos:position pos:line="62" pos:column="26"/></name> <argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">NULL<pos:position pos:line="62" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="34">"used"<pos:position pos:line="62" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="42">(<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="43">gauge_t<pos:position pos:line="62" pos:column="50"/></name><operator pos:line="62" pos:column="50">)<pos:position pos:line="62" pos:column="51"/></operator> <name pos:line="62" pos:column="52">used<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">swap_submit_gauge<pos:position pos:line="63" pos:column="26"/></name> <argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">NULL<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="34">"free"<pos:position pos:line="63" pos:column="40"/></literal></expr></argument>, <argument><expr><call pos:line="63" pos:column="42">(<name pos:line="63" pos:column="43">gauge_t<pos:position pos:line="63" pos:column="50"/></name>) <argument_list pos:line="63" pos:column="52">(<argument><expr><name pos:line="63" pos:column="53">total<pos:position pos:line="63" pos:column="58"/></name> <operator pos:line="63" pos:column="59">-<pos:position pos:line="63" pos:column="60"/></operator> <name pos:line="63" pos:column="61">used<pos:position pos:line="63" pos:column="65"/></name></expr></argument>)<pos:position pos:line="63" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="68"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="65" pos:column="9">sfree<pos:position pos:line="65" pos:column="14"/></name> <argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">swap_entries<pos:position pos:line="65" pos:column="28"/></name></expr></argument>)<pos:position pos:line="65" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>

	<return pos:line="67" pos:column="9">return <expr><operator pos:line="67" pos:column="16">(<pos:position pos:line="67" pos:column="17"/></operator><literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal><operator pos:line="67" pos:column="18">)<pos:position pos:line="67" pos:column="19"/></operator></expr>;<pos:position pos:line="67" pos:column="20"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
