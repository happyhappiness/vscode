<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2397_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cj_append_key<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">cj_t<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">db<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">cj_key_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">key<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <block pos:line="1" pos:column="51">{ <comment type="block" pos:line="1" pos:column="53">/* {{{ */</comment>
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name><name pos:line="2" pos:column="7">db<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">-&gt;<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="11">tree<pos:position pos:line="2" pos:column="15"/></name></name> <operator pos:line="2" pos:column="16">==<pos:position pos:line="2" pos:column="18"/></operator> <name pos:line="2" pos:column="19">NULL<pos:position pos:line="2" pos:column="23"/></name></expr>)<pos:position pos:line="2" pos:column="24"/></condition><then pos:line="2" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="3" pos:column="5">db<pos:position pos:line="3" pos:column="7"/></name><operator pos:line="3" pos:column="7">-&gt;<pos:position pos:line="3" pos:column="12"/></operator><name pos:line="3" pos:column="9">tree<pos:position pos:line="3" pos:column="13"/></name></name> <operator pos:line="3" pos:column="14">=<pos:position pos:line="3" pos:column="15"/></operator> <call><name pos:line="3" pos:column="16">cj_avl_create<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">()<pos:position pos:line="3" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="32"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">c_avl_tree_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">tree<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name><name pos:line="5" pos:column="24">db<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">-&gt;<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="28">tree<pos:position pos:line="5" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <specifier pos:line="7" pos:column="8">const<pos:position pos:line="7" pos:column="13"/></specifier> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">start<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name><name pos:line="7" pos:column="23">key<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">path<pos:position pos:line="7" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">*<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">start<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <literal type="char" pos:line="8" pos:column="17">'/'<pos:position pos:line="8" pos:column="20"/></literal></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="5">++<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">start<pos:position pos:line="9" pos:column="12"/></name></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <specifier pos:line="11" pos:column="8">const<pos:position pos:line="11" pos:column="13"/></specifier> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">end<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <while pos:line="12" pos:column="3">while <condition pos:line="12" pos:column="9">(<expr><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">end<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <call><name pos:line="12" pos:column="17">strchr<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">start<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="31">'/'<pos:position pos:line="12" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call><operator pos:line="12" pos:column="35">)<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">!=<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="40">NULL<pos:position pos:line="12" pos:column="44"/></name></expr>)<pos:position pos:line="12" pos:column="45"/></condition> <block pos:line="12" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name></type> <name><name pos:line="13" pos:column="10">name<pos:position pos:line="13" pos:column="14"/></name><index pos:line="13" pos:column="14">[<expr><name pos:line="13" pos:column="15">PATH_MAX<pos:position pos:line="13" pos:column="23"/></name></expr>]<pos:position pos:line="13" pos:column="24"/></index></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">size_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">len<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><name pos:line="15" pos:column="18">end<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">-<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">start<pos:position pos:line="15" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">len<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">==<pos:position pos:line="16" pos:column="15"/></operator> <literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18">
      <block type="pseudo"><break pos:line="17" pos:column="7">break;<pos:position pos:line="17" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="19" pos:column="5">len<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <call><name pos:line="19" pos:column="11">COUCH_MIN<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">len<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="26">sizeof<argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">name<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></sizeof> <operator pos:line="19" pos:column="39">-<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">1<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">sstrncpy<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">name<pos:position pos:line="20" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">start<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="27">len<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">+<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="22" pos:column="5">cj_tree_entry_t<pos:position pos:line="22" pos:column="20"/></name> <modifier pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></modifier></type><name pos:line="22" pos:column="22">e<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">c_avl_get<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">tree<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="25">name<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="31">(<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">void<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">*<pos:position pos:line="23" pos:column="38"/></operator><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator><operator pos:line="23" pos:column="39">&amp;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="40">e<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call> <operator pos:line="23" pos:column="43">!=<pos:position pos:line="23" pos:column="45"/></operator> <literal type="number" pos:line="23" pos:column="46">0<pos:position pos:line="23" pos:column="47"/></literal></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <block pos:line="23" pos:column="49">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">e<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">calloc<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="number" pos:line="24" pos:column="18">1<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="21">sizeof<argument_list pos:line="24" pos:column="27">(<argument><expr><operator pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">e<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">e<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">NULL<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">ENOMEM<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">e<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">-&gt;<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="10">type<pos:position pos:line="27" pos:column="14"/></name></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">TREE<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">e<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">-&gt;<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="10">tree<pos:position pos:line="28" pos:column="14"/></name></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name pos:line="28" pos:column="17">cj_avl_create<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">()<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="30" pos:column="7">c_avl_insert<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">tree<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="26">strdup<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">name<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">e<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name><name pos:line="33" pos:column="9">e<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">type<pos:position pos:line="33" pos:column="16"/></name></name> <operator pos:line="33" pos:column="17">!=<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="20">TREE<pos:position pos:line="33" pos:column="24"/></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25">
      <block type="pseudo"><return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">EINVAL<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="36" pos:column="5">tree<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <name><name pos:line="36" pos:column="12">e<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">-&gt;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="15">tree<pos:position pos:line="36" pos:column="19"/></name></name></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">start<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">end<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">+<pos:position pos:line="37" pos:column="18"/></operator> <literal type="number" pos:line="37" pos:column="19">1<pos:position pos:line="37" pos:column="20"/></literal></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></while>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">strlen<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">start<pos:position pos:line="40" pos:column="19"/></name></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call> <operator pos:line="40" pos:column="21">==<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ERROR<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><literal type="string" pos:line="41" pos:column="11">"curl_json plugin: invalid key: %s"<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="48">key<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">-&gt;<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="53">path<pos:position pos:line="41" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><operator pos:line="42" pos:column="12">-<pos:position pos:line="42" pos:column="13"/></operator><literal type="number" pos:line="42" pos:column="13">1<pos:position pos:line="42" pos:column="14"/></literal></expr>;<pos:position pos:line="42" pos:column="15"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="45" pos:column="3">cj_tree_entry_t<pos:position pos:line="45" pos:column="18"/></name> <modifier pos:line="45" pos:column="19">*<pos:position pos:line="45" pos:column="20"/></modifier></type><name pos:line="45" pos:column="20">e<pos:position pos:line="45" pos:column="21"/></name> <init pos:line="45" pos:column="22">= <expr><call><name pos:line="45" pos:column="24">calloc<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="number" pos:line="45" pos:column="31">1<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="34">sizeof<argument_list pos:line="45" pos:column="40">(<argument><expr><operator pos:line="45" pos:column="41">*<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="42">e<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="46"/></decl_stmt>
  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><name pos:line="46" pos:column="7">e<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">==<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">NULL<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17">
    <block type="pseudo"><return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">ENOMEM<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">e<pos:position pos:line="48" pos:column="4"/></name><operator pos:line="48" pos:column="4">-&gt;<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="6">type<pos:position pos:line="48" pos:column="10"/></name></name> <operator pos:line="48" pos:column="11">=<pos:position pos:line="48" pos:column="12"/></operator> <name pos:line="48" pos:column="13">KEY<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">e<pos:position pos:line="49" pos:column="4"/></name><operator pos:line="49" pos:column="4">-&gt;<pos:position pos:line="49" pos:column="9"/></operator><name pos:line="49" pos:column="6">key<pos:position pos:line="49" pos:column="9"/></name></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <name pos:line="49" pos:column="12">key<pos:position pos:line="49" pos:column="15"/></name></expr>;<pos:position pos:line="49" pos:column="16"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">c_avl_insert<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">tree<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="22">strdup<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">start<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">e<pos:position pos:line="51" pos:column="38"/></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
  <return pos:line="52" pos:column="3">return <expr><literal type="number" pos:line="52" pos:column="10">0<pos:position pos:line="52" pos:column="11"/></literal></expr>;<pos:position pos:line="52" pos:column="12"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
