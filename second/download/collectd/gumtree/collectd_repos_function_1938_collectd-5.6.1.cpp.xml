<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1938_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_send_buffer_plain<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">sockent_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">se<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">buffer<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">buffer_size<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><literal type="number" pos:line="6" pos:column="16">42<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition>
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">status<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <call><name pos:line="8" pos:column="26">sockent_client_connect<pos:position pos:line="8" pos:column="48"/></name> <argument_list pos:line="8" pos:column="49">(<argument><expr><name pos:line="8" pos:column="50">se<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">status<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">!=<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="31">0<pos:position pos:line="9" pos:column="32"/></literal></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33">
			<block type="pseudo"><return pos:line="10" pos:column="25">return;<pos:position pos:line="10" pos:column="32"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="12" pos:column="17">status<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <call><name pos:line="12" pos:column="26">sendto<pos:position pos:line="12" pos:column="32"/></name> <argument_list pos:line="12" pos:column="33">(<argument><expr><name><name pos:line="12" pos:column="34">se<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">data<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">.<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">client<pos:position pos:line="12" pos:column="49"/></name><operator pos:line="12" pos:column="49">.<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">fd<pos:position pos:line="12" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="54">buffer<pos:position pos:line="12" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="62">buffer_size<pos:position pos:line="12" pos:column="73"/></name></expr></argument>,
				<comment type="block" pos:line="13" pos:column="33">/* flags = */</comment> <argument><expr><literal type="number" pos:line="13" pos:column="47">0<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>,
				<argument><expr><operator pos:line="14" pos:column="33">(<pos:position pos:line="14" pos:column="34"/></operator>struct <name pos:line="14" pos:column="41">sockaddr<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">*<pos:position pos:line="14" pos:column="51"/></operator><operator pos:line="14" pos:column="51">)<pos:position pos:line="14" pos:column="52"/></operator> <name><name pos:line="14" pos:column="53">se<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">data<pos:position pos:line="14" pos:column="61"/></name><operator pos:line="14" pos:column="61">.<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="62">client<pos:position pos:line="14" pos:column="68"/></name><operator pos:line="14" pos:column="68">.<pos:position pos:line="14" pos:column="69"/></operator><name pos:line="14" pos:column="69">addr<pos:position pos:line="14" pos:column="73"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="15" pos:column="33">se<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">data<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">client<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">.<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">addrlen<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">status<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&lt;<pos:position pos:line="16" pos:column="32"/></operator> <literal type="number" pos:line="16" pos:column="30">0<pos:position pos:line="16" pos:column="31"/></literal></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
		<block pos:line="17" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name></type> <name><name pos:line="18" pos:column="30">errbuf<pos:position pos:line="18" pos:column="36"/></name><index pos:line="18" pos:column="36">[<expr><literal type="number" pos:line="18" pos:column="37">1024<pos:position pos:line="18" pos:column="41"/></literal></expr>]<pos:position pos:line="18" pos:column="42"/></index></name></decl>;<pos:position pos:line="18" pos:column="43"/></decl_stmt>

			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">(<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">errno<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">==<pos:position pos:line="20" pos:column="38"/></operator> <name pos:line="20" pos:column="39">EINTR<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">)<pos:position pos:line="20" pos:column="45"/></operator> <operator pos:line="20" pos:column="46">||<pos:position pos:line="20" pos:column="48"/></operator> <operator pos:line="20" pos:column="49">(<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="50">errno<pos:position pos:line="20" pos:column="55"/></name> <operator pos:line="20" pos:column="56">==<pos:position pos:line="20" pos:column="58"/></operator> <name pos:line="20" pos:column="59">EAGAIN<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">)<pos:position pos:line="20" pos:column="66"/></operator></expr>)<pos:position pos:line="20" pos:column="67"/></condition><then pos:line="20" pos:column="67">
				<block type="pseudo"><continue pos:line="21" pos:column="33">continue;<pos:position pos:line="21" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="23" pos:column="25">ERROR<pos:position pos:line="23" pos:column="30"/></name> <argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"network plugin: sendto failed: %s. Closing sending socket."<pos:position pos:line="23" pos:column="92"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="24" pos:column="41">sstrerror<pos:position pos:line="24" pos:column="50"/></name> <argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">errno<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">errbuf<pos:position pos:line="24" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="67">sizeof <argument_list pos:line="24" pos:column="74">(<argument><expr><name pos:line="24" pos:column="75">errbuf<pos:position pos:line="24" pos:column="81"/></name></expr></argument>)<pos:position pos:line="24" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">sockent_client_disconnect<pos:position pos:line="25" pos:column="50"/></name> <argument_list pos:line="25" pos:column="51">(<argument><expr><name pos:line="25" pos:column="52">se<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt>
			<return pos:line="26" pos:column="25">return;<pos:position pos:line="26" pos:column="32"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break>
	}<pos:position pos:line="30" pos:column="10"/></block></while> <comment type="block" pos:line="30" pos:column="11">/* while (42) */</comment>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
