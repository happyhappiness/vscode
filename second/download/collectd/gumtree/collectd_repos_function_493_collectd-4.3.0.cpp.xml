<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_493_collectd-4.3.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">dns_child_loop<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">dummy<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">pcap_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">pcap_obj<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type>    <name><name pos:line="4" pos:column="17">pcap_error<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><name pos:line="4" pos:column="28">PCAP_ERRBUF_SIZE<pos:position pos:line="4" pos:column="44"/></name></expr>]<pos:position pos:line="4" pos:column="45"/></index></name></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name>  <name pos:line="5" pos:column="17">bpf_program<pos:position pos:line="5" pos:column="28"/></name></name></type> <name pos:line="5" pos:column="29">fp<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* Don't block any signals */</comment>
	<block pos:line="10" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">sigset_t<pos:position pos:line="11" pos:column="25"/></name></type> <name pos:line="11" pos:column="26">sigmask<pos:position pos:line="11" pos:column="33"/></name></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">sigemptyset<pos:position pos:line="12" pos:column="28"/></name> <argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">&amp;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="31">sigmask<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">pthread_sigmask<pos:position pos:line="13" pos:column="32"/></name> <argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">SIG_SETMASK<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="47">&amp;<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="48">sigmask<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">NULL<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block>

	<comment type="block" pos:line="16" pos:column="9">/* Passing `pcap_device == NULL' is okay and the same as passign "any" */</comment>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">DEBUG<pos:position pos:line="17" pos:column="14"/></name> <argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="string" pos:line="17" pos:column="16">"Creating PCAP object.."<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">pcap_obj<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">pcap_open_live<pos:position pos:line="18" pos:column="34"/></name> <argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">pcap_device<pos:position pos:line="18" pos:column="47"/></name></expr></argument>,
			<argument><expr><name pos:line="19" pos:column="25">PCAP_SNAPLEN<pos:position pos:line="19" pos:column="37"/></name></expr></argument>,
			<argument><expr><literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr></argument> <comment type="block" pos:line="20" pos:column="27">/* Not promiscuous */</comment>,
			<argument><expr><name pos:line="21" pos:column="25">interval_g<pos:position pos:line="21" pos:column="35"/></name></expr></argument>,
			<argument><expr><name pos:line="22" pos:column="25">pcap_error<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">pcap_obj<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">==<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">NULL<pos:position pos:line="23" pos:column="29"/></name></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30">
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">ERROR<pos:position pos:line="25" pos:column="22"/></name> <argument_list pos:line="25" pos:column="23">(<argument><expr><literal type="string" pos:line="25" pos:column="24">"dns plugin: Opening interface `%s' "<pos:position pos:line="25" pos:column="61"/></literal>
				<literal type="string" pos:line="26" pos:column="33">"failed: %s"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">pcap_device<pos:position pos:line="27" pos:column="45"/></name> <operator pos:line="27" pos:column="46">!=<pos:position pos:line="27" pos:column="48"/></operator> <name pos:line="27" pos:column="49">NULL<pos:position pos:line="27" pos:column="53"/></name><operator pos:line="27" pos:column="53">)<pos:position pos:line="27" pos:column="54"/></operator></expr> ?<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56"> <expr><name pos:line="27" pos:column="57">pcap_device<pos:position pos:line="27" pos:column="68"/></name></expr> <pos:position pos:line="27" pos:column="69"/></then><else pos:line="27" pos:column="69">: <expr><literal type="string" pos:line="27" pos:column="71">"any"<pos:position pos:line="27" pos:column="76"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><name pos:line="28" pos:column="33">pcap_error<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
		<return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">NULL<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">)<pos:position pos:line="29" pos:column="30"/></operator></expr>;<pos:position pos:line="29" pos:column="31"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">memset<pos:position pos:line="32" pos:column="15"/></name> <argument_list pos:line="32" pos:column="16">(<argument><expr><operator pos:line="32" pos:column="17">&amp;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="18">fp<pos:position pos:line="32" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="22">0<pos:position pos:line="32" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="25">sizeof <argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">fp<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">pcap_compile<pos:position pos:line="33" pos:column="25"/></name> <argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">pcap_obj<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="37">&amp;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="38">fp<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="42">"udp port 53"<pos:position pos:line="33" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="57">1<pos:position pos:line="33" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="60">0<pos:position pos:line="33" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call> <operator pos:line="33" pos:column="63">&lt;<pos:position pos:line="33" pos:column="67"/></operator> <literal type="number" pos:line="33" pos:column="65">0<pos:position pos:line="33" pos:column="66"/></literal></expr>)<pos:position pos:line="33" pos:column="67"/></condition><then pos:line="33" pos:column="67">
	<block pos:line="34" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">ERROR<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><literal type="string" pos:line="35" pos:column="24">"dns plugin: pcap_compile failed"<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><operator pos:line="36" pos:column="24">(<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="25">NULL<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">)<pos:position pos:line="36" pos:column="30"/></operator></expr>;<pos:position pos:line="36" pos:column="31"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">pcap_setfilter<pos:position pos:line="38" pos:column="27"/></name> <argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">pcap_obj<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="39">&amp;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="40">fp<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call> <operator pos:line="38" pos:column="44">&lt;<pos:position pos:line="38" pos:column="48"/></operator> <literal type="number" pos:line="38" pos:column="46">0<pos:position pos:line="38" pos:column="47"/></literal></expr>)<pos:position pos:line="38" pos:column="48"/></condition><then pos:line="38" pos:column="48">
	<block pos:line="39" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">ERROR<pos:position pos:line="40" pos:column="22"/></name> <argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="string" pos:line="40" pos:column="24">"dns plugin: pcap_setfilter failed"<pos:position pos:line="40" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">NULL<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">)<pos:position pos:line="41" pos:column="30"/></operator></expr>;<pos:position pos:line="41" pos:column="31"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="44" pos:column="9">DEBUG<pos:position pos:line="44" pos:column="14"/></name> <argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"PCAP object created."<pos:position pos:line="44" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">dnstop_set_pcap_obj<pos:position pos:line="46" pos:column="28"/></name> <argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">pcap_obj<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">dnstop_set_callback<pos:position pos:line="47" pos:column="28"/></name> <argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">dns_child_callback<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><name pos:line="49" pos:column="9">status<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">pcap_loop<pos:position pos:line="49" pos:column="27"/></name> <argument_list pos:line="49" pos:column="28">(<argument><expr><name pos:line="49" pos:column="29">pcap_obj<pos:position pos:line="49" pos:column="37"/></name></expr></argument>,
			<argument><expr><operator pos:line="50" pos:column="25">-<pos:position pos:line="50" pos:column="26"/></operator><literal type="number" pos:line="50" pos:column="26">1<pos:position pos:line="50" pos:column="27"/></literal></expr></argument> <comment type="block" pos:line="50" pos:column="28">/* loop forever */</comment>,
			<argument><expr><name pos:line="51" pos:column="25">handle_pcap<pos:position pos:line="51" pos:column="36"/></name></expr></argument> <comment type="block" pos:line="51" pos:column="37">/* callback */</comment>,
			<argument><expr><name pos:line="52" pos:column="25">NULL<pos:position pos:line="52" pos:column="29"/></name></expr></argument> <comment type="block" pos:line="52" pos:column="30">/* Whatever this means.. */</comment>)<pos:position pos:line="52" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="59"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">status<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">&lt;<pos:position pos:line="53" pos:column="24"/></operator> <literal type="number" pos:line="53" pos:column="22">0<pos:position pos:line="53" pos:column="23"/></literal></expr>)<pos:position pos:line="53" pos:column="24"/></condition><then pos:line="53" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="17">ERROR<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><literal type="string" pos:line="54" pos:column="24">"dns plugin: Listener thread is exiting "<pos:position pos:line="54" pos:column="65"/></literal>
				<literal type="string" pos:line="55" pos:column="33">"abnormally: %s"<pos:position pos:line="55" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="51">pcap_geterr<pos:position pos:line="55" pos:column="62"/></name> <argument_list pos:line="55" pos:column="63">(<argument><expr><name pos:line="55" pos:column="64">pcap_obj<pos:position pos:line="55" pos:column="72"/></name></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="57" pos:column="9">DEBUG<pos:position pos:line="57" pos:column="14"/></name> <argument_list pos:line="57" pos:column="15">(<argument><expr><literal type="string" pos:line="57" pos:column="16">"child is exiting"<pos:position pos:line="57" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="59" pos:column="9">pcap_close<pos:position pos:line="59" pos:column="19"/></name> <argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">pcap_obj<pos:position pos:line="59" pos:column="29"/></name></expr></argument>)<pos:position pos:line="59" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="60" pos:column="9">listen_thread_init<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">=<pos:position pos:line="60" pos:column="29"/></operator> <literal type="number" pos:line="60" pos:column="30">0<pos:position pos:line="60" pos:column="31"/></literal></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">pthread_exit<pos:position pos:line="61" pos:column="21"/></name> <argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">NULL<pos:position pos:line="61" pos:column="27"/></name></expr></argument>)<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>

	<return pos:line="63" pos:column="9">return <expr><operator pos:line="63" pos:column="16">(<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">NULL<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">)<pos:position pos:line="63" pos:column="22"/></operator></expr>;<pos:position pos:line="63" pos:column="23"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
