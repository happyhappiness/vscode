<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1903_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">xencpu_read<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">cdtime_t<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">now<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">cdtime<pos:position pos:line="3" pos:column="26"/></name> <argument_list pos:line="3" pos:column="27">()<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">rc<pos:position pos:line="5" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="13">nr_cpus<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">rc<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <call><name pos:line="7" pos:column="10">xc_getcpuinfo<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">xc_handle<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">num_cpus<pos:position pos:line="7" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">cpu_info<pos:position pos:line="7" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="55">&amp;<pos:position pos:line="7" pos:column="60"/></operator><name pos:line="7" pos:column="56">nr_cpus<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">rc<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">&lt;<pos:position pos:line="8" pos:column="16"/></operator> <literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16"> <block pos:line="8" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">ERROR<pos:position pos:line="9" pos:column="14"/></name> <argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="string" pos:line="9" pos:column="16">"xencpu: xc_getcpuinfo() Failed: %d %s\n"<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="59">rc<pos:position pos:line="9" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="63">xc_strerror<pos:position pos:line="9" pos:column="74"/></name><argument_list pos:line="9" pos:column="74">(<argument><expr><name pos:line="9" pos:column="75">xc_handle<pos:position pos:line="9" pos:column="84"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="85">errno<pos:position pos:line="9" pos:column="90"/></name></expr></argument>)<pos:position pos:line="9" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="93"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><operator pos:line="10" pos:column="17">-<pos:position pos:line="10" pos:column="18"/></operator><literal type="number" pos:line="10" pos:column="18">1<pos:position pos:line="10" pos:column="19"/></literal><operator pos:line="10" pos:column="19">)<pos:position pos:line="10" pos:column="20"/></operator></expr>;<pos:position pos:line="10" pos:column="21"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">status<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><decl><type><name pos:line="14" pos:column="10">int<pos:position pos:line="14" pos:column="13"/></name></type> <name pos:line="14" pos:column="14">cpu<pos:position pos:line="14" pos:column="17"/></name> <init pos:line="14" pos:column="18">= <expr><literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="22"/></init> <condition><expr><name pos:line="14" pos:column="23">cpu<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">&lt;<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="29">nr_cpus<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></condition> <incr><expr><name pos:line="14" pos:column="38">cpu<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">++<pos:position pos:line="14" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="44"/></control> <block pos:line="14" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">gauge_t<pos:position pos:line="15" pos:column="16"/></name></type> <name pos:line="15" pos:column="17">rate<pos:position pos:line="15" pos:column="21"/></name> <init pos:line="15" pos:column="22">= <expr><name pos:line="15" pos:column="24">NAN<pos:position pos:line="15" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">value_t<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">value<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><block pos:line="16" pos:column="25">{<expr><operator pos:line="16" pos:column="26">.<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">derive<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <name><name pos:line="16" pos:column="36">cpu_info<pos:position pos:line="16" pos:column="44"/></name><index pos:line="16" pos:column="44">[<expr><name pos:line="16" pos:column="45">cpu<pos:position pos:line="16" pos:column="48"/></name></expr>]<pos:position pos:line="16" pos:column="49"/></index></name><operator pos:line="16" pos:column="49">.<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">idletime<pos:position pos:line="16" pos:column="58"/></name></expr>}<pos:position pos:line="16" pos:column="59"/></block></expr></init></decl>;<pos:position pos:line="16" pos:column="60"/></decl_stmt>

        <expr_stmt><expr><name pos:line="18" pos:column="9">status<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">value_to_rate<pos:position pos:line="18" pos:column="31"/></name> <argument_list pos:line="18" pos:column="32">(<argument><expr><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="34">rate<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">value<pos:position pos:line="18" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">DS_TYPE_DERIVE<pos:position pos:line="18" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="63">now<pos:position pos:line="18" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="68">&amp;<pos:position pos:line="18" pos:column="73"/></operator><name><name pos:line="18" pos:column="69">cpu_states<pos:position pos:line="18" pos:column="79"/></name><index pos:line="18" pos:column="79">[<expr><name pos:line="18" pos:column="80">cpu<pos:position pos:line="18" pos:column="83"/></name></expr>]<pos:position pos:line="18" pos:column="84"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="86"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">==<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="23">0<pos:position pos:line="19" pos:column="24"/></literal></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">submit_value<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">cpu<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="31">100<pos:position pos:line="20" pos:column="34"/></literal> <operator pos:line="20" pos:column="35">-<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">rate<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">/<pos:position pos:line="20" pos:column="42"/></operator><literal type="number" pos:line="20" pos:column="42">10000000<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></for>

    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><literal type="number" pos:line="24" pos:column="13">0<pos:position pos:line="24" pos:column="14"/></literal><operator pos:line="24" pos:column="14">)<pos:position pos:line="24" pos:column="15"/></operator></expr>;<pos:position pos:line="24" pos:column="16"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
