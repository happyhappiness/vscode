<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_314_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wireless_read<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">KERNEL_LINUX<pos:position pos:line="3" pos:column="20"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">fh<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">buffer<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">1024<pos:position pos:line="5" pos:column="25"/></literal></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name>   <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">device<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">double<pos:position pos:line="8" pos:column="15"/></name></type>  <name pos:line="8" pos:column="17">quality<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">double<pos:position pos:line="9" pos:column="15"/></name></type>  <name pos:line="9" pos:column="17">power<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">double<pos:position pos:line="10" pos:column="15"/></name></type>  <name pos:line="10" pos:column="17">noise<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name><name pos:line="12" pos:column="15">fields<pos:position pos:line="12" pos:column="21"/></name><index pos:line="12" pos:column="21">[<expr><literal type="number" pos:line="12" pos:column="22">8<pos:position pos:line="12" pos:column="23"/></literal></expr>]<pos:position pos:line="12" pos:column="24"/></index></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type>   <name pos:line="13" pos:column="15">numfields<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">devices_found<pos:position pos:line="15" pos:column="26"/></name></decl>;<pos:position pos:line="15" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">len<pos:position pos:line="16" pos:column="16"/></name></decl>;<pos:position pos:line="16" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* there are a variety of names for the wireless device */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">fh<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">fopen<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">WIRELESS_PROC_FILE<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="46">"r"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call><operator pos:line="19" pos:column="50">)<pos:position pos:line="19" pos:column="51"/></operator> <operator pos:line="19" pos:column="52">==<pos:position pos:line="19" pos:column="54"/></operator> <name pos:line="19" pos:column="55">NULL<pos:position pos:line="19" pos:column="59"/></name></expr>)<pos:position pos:line="19" pos:column="60"/></condition><then pos:line="19" pos:column="60">
	<block pos:line="20" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name></type> <name><name pos:line="21" pos:column="22">errbuf<pos:position pos:line="21" pos:column="28"/></name><index pos:line="21" pos:column="28">[<expr><literal type="number" pos:line="21" pos:column="29">1024<pos:position pos:line="21" pos:column="33"/></literal></expr>]<pos:position pos:line="21" pos:column="34"/></index></name></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">WARNING<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><literal type="string" pos:line="22" pos:column="26">"wireless: fopen: %s"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="23" pos:column="33">sstrerror<pos:position pos:line="23" pos:column="42"/></name> <argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">errno<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">errbuf<pos:position pos:line="23" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="59">sizeof <argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">errbuf<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><operator pos:line="24" pos:column="25">-<pos:position pos:line="24" pos:column="26"/></operator><literal type="number" pos:line="24" pos:column="26">1<pos:position pos:line="24" pos:column="27"/></literal><operator pos:line="24" pos:column="27">)<pos:position pos:line="24" pos:column="28"/></operator></expr>;<pos:position pos:line="24" pos:column="29"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">devices_found<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <literal type="number" pos:line="27" pos:column="25">0<pos:position pos:line="27" pos:column="26"/></literal></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><call><name pos:line="28" pos:column="16">fgets<pos:position pos:line="28" pos:column="21"/></name> <argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">buffer<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="31">sizeof <argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">buffer<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">fh<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call> <operator pos:line="28" pos:column="52">!=<pos:position pos:line="28" pos:column="54"/></operator> <name pos:line="28" pos:column="55">NULL<pos:position pos:line="28" pos:column="59"/></name></expr>)<pos:position pos:line="28" pos:column="60"/></condition>
	<block pos:line="29" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">char<pos:position pos:line="30" pos:column="21"/></name> <modifier pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></modifier></type><name pos:line="30" pos:column="23">endptr<pos:position pos:line="30" pos:column="29"/></name></decl>;<pos:position pos:line="30" pos:column="30"/></decl_stmt>

		<expr_stmt><expr><name pos:line="32" pos:column="17">numfields<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <call><name pos:line="32" pos:column="29">strsplit<pos:position pos:line="32" pos:column="37"/></name> <argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">buffer<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="47">fields<pos:position pos:line="32" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="55">8<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">numfields<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">&lt;<pos:position pos:line="34" pos:column="35"/></operator> <literal type="number" pos:line="34" pos:column="33">5<pos:position pos:line="34" pos:column="34"/></literal></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35">
			<block type="pseudo"><continue pos:line="35" pos:column="25">continue;<pos:position pos:line="35" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="37" pos:column="17">len<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="23">strlen<pos:position pos:line="37" pos:column="29"/></name> <argument_list pos:line="37" pos:column="30">(<argument><expr><name><name pos:line="37" pos:column="31">fields<pos:position pos:line="37" pos:column="37"/></name><index pos:line="37" pos:column="37">[<expr><literal type="number" pos:line="37" pos:column="38">0<pos:position pos:line="37" pos:column="39"/></literal></expr>]<pos:position pos:line="37" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call> <operator pos:line="37" pos:column="42">-<pos:position pos:line="37" pos:column="43"/></operator> <literal type="number" pos:line="37" pos:column="44">1<pos:position pos:line="37" pos:column="45"/></literal></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">len<pos:position pos:line="38" pos:column="24"/></name> <operator pos:line="38" pos:column="25">&lt;<pos:position pos:line="38" pos:column="29"/></operator> <literal type="number" pos:line="38" pos:column="27">1<pos:position pos:line="38" pos:column="28"/></literal></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
			<block type="pseudo"><continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name><name pos:line="40" pos:column="21">fields<pos:position pos:line="40" pos:column="27"/></name><index pos:line="40" pos:column="27">[<expr><literal type="number" pos:line="40" pos:column="28">0<pos:position pos:line="40" pos:column="29"/></literal></expr>]<pos:position pos:line="40" pos:column="30"/></index><index pos:line="40" pos:column="30">[<expr><name pos:line="40" pos:column="31">len<pos:position pos:line="40" pos:column="34"/></name></expr>]<pos:position pos:line="40" pos:column="35"/></index></name> <operator pos:line="40" pos:column="36">!=<pos:position pos:line="40" pos:column="38"/></operator> <literal type="char" pos:line="40" pos:column="39">':'<pos:position pos:line="40" pos:column="42"/></literal></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43">
			<block type="pseudo"><continue pos:line="41" pos:column="25">continue;<pos:position pos:line="41" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">fields<pos:position pos:line="42" pos:column="23"/></name><index pos:line="42" pos:column="23">[<expr><literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>]<pos:position pos:line="42" pos:column="26"/></index><index pos:line="42" pos:column="26">[<expr><name pos:line="42" pos:column="27">len<pos:position pos:line="42" pos:column="30"/></name></expr>]<pos:position pos:line="42" pos:column="31"/></index></name> <operator pos:line="42" pos:column="32">=<pos:position pos:line="42" pos:column="33"/></operator> <literal type="char" pos:line="42" pos:column="34">'\0'<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><name pos:line="44" pos:column="17">device<pos:position pos:line="44" pos:column="23"/></name>  <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <name><name pos:line="44" pos:column="27">fields<pos:position pos:line="44" pos:column="33"/></name><index pos:line="44" pos:column="33">[<expr><literal type="number" pos:line="44" pos:column="34">0<pos:position pos:line="44" pos:column="35"/></literal></expr>]<pos:position pos:line="44" pos:column="36"/></index></name></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><name pos:line="46" pos:column="17">quality<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <call><name pos:line="46" pos:column="27">strtod<pos:position pos:line="46" pos:column="33"/></name> <argument_list pos:line="46" pos:column="34">(<argument><expr><name><name pos:line="46" pos:column="35">fields<pos:position pos:line="46" pos:column="41"/></name><index pos:line="46" pos:column="41">[<expr><literal type="number" pos:line="46" pos:column="42">2<pos:position pos:line="46" pos:column="43"/></literal></expr>]<pos:position pos:line="46" pos:column="44"/></index></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="46">&amp;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="47">endptr<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name><name pos:line="47" pos:column="21">fields<pos:position pos:line="47" pos:column="27"/></name><index pos:line="47" pos:column="27">[<expr><literal type="number" pos:line="47" pos:column="28">2<pos:position pos:line="47" pos:column="29"/></literal></expr>]<pos:position pos:line="47" pos:column="30"/></index></name> <operator pos:line="47" pos:column="31">==<pos:position pos:line="47" pos:column="33"/></operator> <name pos:line="47" pos:column="34">endptr<pos:position pos:line="47" pos:column="40"/></name></expr>)<pos:position pos:line="47" pos:column="41"/></condition><then pos:line="47" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="25">quality<pos:position pos:line="48" pos:column="32"/></name> <operator pos:line="48" pos:column="33">=<pos:position pos:line="48" pos:column="34"/></operator> <operator pos:line="48" pos:column="35">-<pos:position pos:line="48" pos:column="36"/></operator><literal type="number" pos:line="48" pos:column="36">1.0<pos:position pos:line="48" pos:column="39"/></literal></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt></block></then></if> <comment type="block" pos:line="48" pos:column="41">/* invalid */</comment>

		<comment type="block" pos:line="50" pos:column="17">/* power [dBm] &lt; 0.0 */</comment>
		<expr_stmt><expr><name pos:line="51" pos:column="17">power<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <call><name pos:line="51" pos:column="25">strtod<pos:position pos:line="51" pos:column="31"/></name> <argument_list pos:line="51" pos:column="32">(<argument><expr><name><name pos:line="51" pos:column="33">fields<pos:position pos:line="51" pos:column="39"/></name><index pos:line="51" pos:column="39">[<expr><literal type="number" pos:line="51" pos:column="40">3<pos:position pos:line="51" pos:column="41"/></literal></expr>]<pos:position pos:line="51" pos:column="42"/></index></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="44">&amp;<pos:position pos:line="51" pos:column="49"/></operator><name pos:line="51" pos:column="45">endptr<pos:position pos:line="51" pos:column="51"/></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">fields<pos:position pos:line="52" pos:column="27"/></name><index pos:line="52" pos:column="27">[<expr><literal type="number" pos:line="52" pos:column="28">3<pos:position pos:line="52" pos:column="29"/></literal></expr>]<pos:position pos:line="52" pos:column="30"/></index></name> <operator pos:line="52" pos:column="31">==<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">endptr<pos:position pos:line="52" pos:column="40"/></name></expr>)<pos:position pos:line="52" pos:column="41"/></condition><then pos:line="52" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">power<pos:position pos:line="53" pos:column="30"/></name> <operator pos:line="53" pos:column="31">=<pos:position pos:line="53" pos:column="32"/></operator> <literal type="number" pos:line="53" pos:column="33">1.0<pos:position pos:line="53" pos:column="36"/></literal></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt></block></then> <comment type="block" pos:line="53" pos:column="38">/* invalid */</comment>
		<elseif pos:line="54" pos:column="17">else <if pos:line="54" pos:column="22">if <condition pos:line="54" pos:column="25">(<expr><operator pos:line="54" pos:column="26">(<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">power<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">&gt;=<pos:position pos:line="54" pos:column="38"/></operator> <literal type="number" pos:line="54" pos:column="36">0.0<pos:position pos:line="54" pos:column="39"/></literal><operator pos:line="54" pos:column="39">)<pos:position pos:line="54" pos:column="40"/></operator> <operator pos:line="54" pos:column="41">&amp;&amp;<pos:position pos:line="54" pos:column="51"/></operator> <operator pos:line="54" pos:column="44">(<pos:position pos:line="54" pos:column="45"/></operator><name pos:line="54" pos:column="45">power<pos:position pos:line="54" pos:column="50"/></name> <operator pos:line="54" pos:column="51">&lt;=<pos:position pos:line="54" pos:column="56"/></operator> <literal type="number" pos:line="54" pos:column="54">100.0<pos:position pos:line="54" pos:column="59"/></literal><operator pos:line="54" pos:column="59">)<pos:position pos:line="54" pos:column="60"/></operator></expr>)<pos:position pos:line="54" pos:column="61"/></condition><then pos:line="54" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="25">power<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">=<pos:position pos:line="55" pos:column="32"/></operator> <call><name pos:line="55" pos:column="33">wireless_percent_to_power<pos:position pos:line="55" pos:column="58"/></name> <argument_list pos:line="55" pos:column="59">(<argument><expr><name pos:line="55" pos:column="60">power<pos:position pos:line="55" pos:column="65"/></name></expr></argument>)<pos:position pos:line="55" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="67"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="56" pos:column="17">else <if pos:line="56" pos:column="22">if <condition pos:line="56" pos:column="25">(<expr><operator pos:line="56" pos:column="26">(<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">power<pos:position pos:line="56" pos:column="32"/></name> <operator pos:line="56" pos:column="33">&gt;<pos:position pos:line="56" pos:column="37"/></operator> <literal type="number" pos:line="56" pos:column="35">100.0<pos:position pos:line="56" pos:column="40"/></literal><operator pos:line="56" pos:column="40">)<pos:position pos:line="56" pos:column="41"/></operator> <operator pos:line="56" pos:column="42">&amp;&amp;<pos:position pos:line="56" pos:column="52"/></operator> <operator pos:line="56" pos:column="45">(<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="46">power<pos:position pos:line="56" pos:column="51"/></name> <operator pos:line="56" pos:column="52">&lt;=<pos:position pos:line="56" pos:column="57"/></operator> <literal type="number" pos:line="56" pos:column="55">256.0<pos:position pos:line="56" pos:column="60"/></literal><operator pos:line="56" pos:column="60">)<pos:position pos:line="56" pos:column="61"/></operator></expr>)<pos:position pos:line="56" pos:column="62"/></condition><then pos:line="56" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="25">power<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">=<pos:position pos:line="57" pos:column="32"/></operator> <name pos:line="57" pos:column="33">power<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">-<pos:position pos:line="57" pos:column="40"/></operator> <literal type="number" pos:line="57" pos:column="41">256.0<pos:position pos:line="57" pos:column="46"/></literal></expr>;<pos:position pos:line="57" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="58" pos:column="17">else <if pos:line="58" pos:column="22">if <condition pos:line="58" pos:column="25">(<expr><name pos:line="58" pos:column="26">power<pos:position pos:line="58" pos:column="31"/></name> <operator pos:line="58" pos:column="32">&gt;<pos:position pos:line="58" pos:column="36"/></operator> <literal type="number" pos:line="58" pos:column="34">0.0<pos:position pos:line="58" pos:column="37"/></literal></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="25">power<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">=<pos:position pos:line="59" pos:column="32"/></operator> <literal type="number" pos:line="59" pos:column="33">1.0<pos:position pos:line="59" pos:column="36"/></literal></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt></block></then></if></elseif></if> <comment type="block" pos:line="59" pos:column="38">/* invalid */</comment>

		<comment type="block" pos:line="61" pos:column="17">/* noise [dBm] &lt; 0.0 */</comment>
		<expr_stmt><expr><name pos:line="62" pos:column="17">noise<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <call><name pos:line="62" pos:column="25">strtod<pos:position pos:line="62" pos:column="31"/></name> <argument_list pos:line="62" pos:column="32">(<argument><expr><name><name pos:line="62" pos:column="33">fields<pos:position pos:line="62" pos:column="39"/></name><index pos:line="62" pos:column="39">[<expr><literal type="number" pos:line="62" pos:column="40">4<pos:position pos:line="62" pos:column="41"/></literal></expr>]<pos:position pos:line="62" pos:column="42"/></index></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="44">&amp;<pos:position pos:line="62" pos:column="49"/></operator><name pos:line="62" pos:column="45">endptr<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">fields<pos:position pos:line="63" pos:column="27"/></name><index pos:line="63" pos:column="27">[<expr><literal type="number" pos:line="63" pos:column="28">4<pos:position pos:line="63" pos:column="29"/></literal></expr>]<pos:position pos:line="63" pos:column="30"/></index></name> <operator pos:line="63" pos:column="31">==<pos:position pos:line="63" pos:column="33"/></operator> <name pos:line="63" pos:column="34">endptr<pos:position pos:line="63" pos:column="40"/></name></expr>)<pos:position pos:line="63" pos:column="41"/></condition><then pos:line="63" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="25">noise<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <literal type="number" pos:line="64" pos:column="33">1.0<pos:position pos:line="64" pos:column="36"/></literal></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt></block></then> <comment type="block" pos:line="64" pos:column="38">/* invalid */</comment>
		<elseif pos:line="65" pos:column="17">else <if pos:line="65" pos:column="22">if <condition pos:line="65" pos:column="25">(<expr><operator pos:line="65" pos:column="26">(<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">noise<pos:position pos:line="65" pos:column="32"/></name> <operator pos:line="65" pos:column="33">&gt;=<pos:position pos:line="65" pos:column="38"/></operator> <literal type="number" pos:line="65" pos:column="36">0.0<pos:position pos:line="65" pos:column="39"/></literal><operator pos:line="65" pos:column="39">)<pos:position pos:line="65" pos:column="40"/></operator> <operator pos:line="65" pos:column="41">&amp;&amp;<pos:position pos:line="65" pos:column="51"/></operator> <operator pos:line="65" pos:column="44">(<pos:position pos:line="65" pos:column="45"/></operator><name pos:line="65" pos:column="45">noise<pos:position pos:line="65" pos:column="50"/></name> <operator pos:line="65" pos:column="51">&lt;=<pos:position pos:line="65" pos:column="56"/></operator> <literal type="number" pos:line="65" pos:column="54">100.0<pos:position pos:line="65" pos:column="59"/></literal><operator pos:line="65" pos:column="59">)<pos:position pos:line="65" pos:column="60"/></operator></expr>)<pos:position pos:line="65" pos:column="61"/></condition><then pos:line="65" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="25">noise<pos:position pos:line="66" pos:column="30"/></name> <operator pos:line="66" pos:column="31">=<pos:position pos:line="66" pos:column="32"/></operator> <call><name pos:line="66" pos:column="33">wireless_percent_to_power<pos:position pos:line="66" pos:column="58"/></name> <argument_list pos:line="66" pos:column="59">(<argument><expr><name pos:line="66" pos:column="60">noise<pos:position pos:line="66" pos:column="65"/></name></expr></argument>)<pos:position pos:line="66" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="67"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="67" pos:column="17">else <if pos:line="67" pos:column="22">if <condition pos:line="67" pos:column="25">(<expr><operator pos:line="67" pos:column="26">(<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="27">noise<pos:position pos:line="67" pos:column="32"/></name> <operator pos:line="67" pos:column="33">&gt;<pos:position pos:line="67" pos:column="37"/></operator> <literal type="number" pos:line="67" pos:column="35">100.0<pos:position pos:line="67" pos:column="40"/></literal><operator pos:line="67" pos:column="40">)<pos:position pos:line="67" pos:column="41"/></operator> <operator pos:line="67" pos:column="42">&amp;&amp;<pos:position pos:line="67" pos:column="52"/></operator> <operator pos:line="67" pos:column="45">(<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">noise<pos:position pos:line="67" pos:column="51"/></name> <operator pos:line="67" pos:column="52">&lt;=<pos:position pos:line="67" pos:column="57"/></operator> <literal type="number" pos:line="67" pos:column="55">256.0<pos:position pos:line="67" pos:column="60"/></literal><operator pos:line="67" pos:column="60">)<pos:position pos:line="67" pos:column="61"/></operator></expr>)<pos:position pos:line="67" pos:column="62"/></condition><then pos:line="67" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="25">noise<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">=<pos:position pos:line="68" pos:column="32"/></operator> <name pos:line="68" pos:column="33">noise<pos:position pos:line="68" pos:column="38"/></name> <operator pos:line="68" pos:column="39">-<pos:position pos:line="68" pos:column="40"/></operator> <literal type="number" pos:line="68" pos:column="41">256.0<pos:position pos:line="68" pos:column="46"/></literal></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="69" pos:column="17">else <if pos:line="69" pos:column="22">if <condition pos:line="69" pos:column="25">(<expr><name pos:line="69" pos:column="26">noise<pos:position pos:line="69" pos:column="31"/></name> <operator pos:line="69" pos:column="32">&gt;<pos:position pos:line="69" pos:column="36"/></operator> <literal type="number" pos:line="69" pos:column="34">0.0<pos:position pos:line="69" pos:column="37"/></literal></expr>)<pos:position pos:line="69" pos:column="38"/></condition><then pos:line="69" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="25">noise<pos:position pos:line="70" pos:column="30"/></name> <operator pos:line="70" pos:column="31">=<pos:position pos:line="70" pos:column="32"/></operator> <literal type="number" pos:line="70" pos:column="33">1.0<pos:position pos:line="70" pos:column="36"/></literal></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt></block></then></if></elseif></if> <comment type="block" pos:line="70" pos:column="38">/* invalid */</comment>

		<expr_stmt><expr><call><name pos:line="72" pos:column="17">wireless_submit<pos:position pos:line="72" pos:column="32"/></name> <argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">device<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="42">"signal_quality"<pos:position pos:line="72" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="60">quality<pos:position pos:line="72" pos:column="67"/></name></expr></argument>)<pos:position pos:line="72" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">wireless_submit<pos:position pos:line="73" pos:column="32"/></name> <argument_list pos:line="73" pos:column="33">(<argument><expr><name pos:line="73" pos:column="34">device<pos:position pos:line="73" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="42">"signal_power"<pos:position pos:line="73" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="58">power<pos:position pos:line="73" pos:column="63"/></name></expr></argument>)<pos:position pos:line="73" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">wireless_submit<pos:position pos:line="74" pos:column="32"/></name> <argument_list pos:line="74" pos:column="33">(<argument><expr><name pos:line="74" pos:column="34">device<pos:position pos:line="74" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="42">"signal_noise"<pos:position pos:line="74" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="58">noise<pos:position pos:line="74" pos:column="63"/></name></expr></argument>)<pos:position pos:line="74" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="65"/></expr_stmt>

		<expr_stmt><expr><name pos:line="76" pos:column="17">devices_found<pos:position pos:line="76" pos:column="30"/></name><operator pos:line="76" pos:column="30">++<pos:position pos:line="76" pos:column="32"/></operator></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="79" pos:column="9">fclose<pos:position pos:line="79" pos:column="15"/></name> <argument_list pos:line="79" pos:column="16">(<argument><expr><name pos:line="79" pos:column="17">fh<pos:position pos:line="79" pos:column="19"/></name></expr></argument>)<pos:position pos:line="79" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="81" pos:column="9">/* If no wireless devices are present return an error, so the plugin
	 * code delays our read function. */</comment>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">devices_found<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">==<pos:position pos:line="83" pos:column="29"/></operator> <literal type="number" pos:line="83" pos:column="30">0<pos:position pos:line="83" pos:column="31"/></literal></expr>)<pos:position pos:line="83" pos:column="32"/></condition><then pos:line="83" pos:column="32">
		<block type="pseudo"><return pos:line="84" pos:column="17">return <expr><operator pos:line="84" pos:column="24">(<pos:position pos:line="84" pos:column="25"/></operator><operator pos:line="84" pos:column="25">-<pos:position pos:line="84" pos:column="26"/></operator><literal type="number" pos:line="84" pos:column="26">1<pos:position pos:line="84" pos:column="27"/></literal><operator pos:line="84" pos:column="27">)<pos:position pos:line="84" pos:column="28"/></operator></expr>;<pos:position pos:line="84" pos:column="29"/></return></block></then></if>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="85" pos:column="8">/* KERNEL_LINUX */</comment>

	<return pos:line="87" pos:column="9">return <expr><operator pos:line="87" pos:column="16">(<pos:position pos:line="87" pos:column="17"/></operator><literal type="number" pos:line="87" pos:column="17">0<pos:position pos:line="87" pos:column="18"/></literal><operator pos:line="87" pos:column="18">)<pos:position pos:line="87" pos:column="19"/></operator></expr>;<pos:position pos:line="87" pos:column="20"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
