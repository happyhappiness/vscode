<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1785_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dpdk_helper_worker<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">dpdk_helper_ctx_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">phc<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <block pos:line="1" pos:column="55">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">DPDK_CHILD_TRACE<pos:position pos:line="2" pos:column="19"/></name><argument_list pos:line="2" pos:column="19">(<argument><expr><name><name pos:line="2" pos:column="20">phc<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">-&gt;<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="25">shm_name<pos:position pos:line="2" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="2" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="35"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">pid_t<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">ppid<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><call><name pos:line="4" pos:column="16">getppid<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">()<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><literal type="number" pos:line="6" pos:column="10">1<pos:position pos:line="6" pos:column="11"/></literal></expr>)<pos:position pos:line="6" pos:column="12"/></condition> <block pos:line="6" pos:column="13">{
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">dpdk_helper_cmd_wait<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">phc<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">ppid<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call> <operator pos:line="7" pos:column="41">==<pos:position pos:line="7" pos:column="43"/></operator> <literal type="number" pos:line="7" pos:column="44">0<pos:position pos:line="7" pos:column="45"/></literal></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46"> <block pos:line="7" pos:column="47">{
      <expr_stmt><expr><call><name pos:line="8" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><literal type="string" pos:line="8" pos:column="22">"%s:%s:%d DPDK command handle (cmd=%d, pid=%lu)\n"<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="9" pos:column="22">phc<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">shm_name<pos:position pos:line="9" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">__FUNCTION__<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">__LINE__<pos:position pos:line="9" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="61">phc<pos:position pos:line="9" pos:column="64"/></name><operator pos:line="9" pos:column="64">-&gt;<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="66">cmd<pos:position pos:line="9" pos:column="69"/></name></name></expr></argument>,
                     <argument><expr><operator pos:line="10" pos:column="22">(<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="23">long<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator><call><name pos:line="10" pos:column="28">getpid<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">()<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">phc<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">cmd_result<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <call><name pos:line="11" pos:column="25">dpdk_helper_command_handler<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">phc<pos:position pos:line="11" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="58">phc<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">-&gt;<pos:position pos:line="11" pos:column="66"/></operator><name pos:line="11" pos:column="63">cmd<pos:position pos:line="11" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
      <expr_stmt><expr><name><name pos:line="13" pos:column="7">phc<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">cmd_result<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="25">-<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="16" pos:column="5">/* now kick collectd to get results */</comment>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">err<pos:position pos:line="17" pos:column="12"/></name> <init pos:line="17" pos:column="13">= <expr><call><name pos:line="17" pos:column="15">sem_post<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name><name pos:line="17" pos:column="25">phc<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">sema_cmd_complete<pos:position pos:line="17" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="49"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="string" pos:line="18" pos:column="20">"%s:%s:%d post sema_cmd_complete (pid=%lu)\n"<pos:position pos:line="18" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="67">phc<pos:position pos:line="18" pos:column="70"/></name><operator pos:line="18" pos:column="70">-&gt;<pos:position pos:line="18" pos:column="75"/></operator><name pos:line="18" pos:column="72">shm_name<pos:position pos:line="18" pos:column="80"/></name></name></expr></argument>,
                   <argument><expr><name pos:line="19" pos:column="20">__FUNCTION__<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">__LINE__<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="44">(<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">long<pos:position pos:line="19" pos:column="49"/></name><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator><call><name pos:line="19" pos:column="50">getpid<pos:position pos:line="19" pos:column="56"/></name><argument_list pos:line="19" pos:column="56">()<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">err<pos:position pos:line="20" pos:column="12"/></name></expr>)<pos:position pos:line="20" pos:column="13"/></condition><then pos:line="20" pos:column="13"> <block pos:line="20" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">char<pos:position pos:line="21" pos:column="11"/></name></type> <name><name pos:line="21" pos:column="12">errbuf<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><name pos:line="21" pos:column="19">ERR_BUF_SIZE<pos:position pos:line="21" pos:column="31"/></name></expr>]<pos:position pos:line="21" pos:column="32"/></index></name></decl>;<pos:position pos:line="21" pos:column="33"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><literal type="string" pos:line="22" pos:column="22">"dpdk_helper_worker: error posting sema_cmd_complete "<pos:position pos:line="22" pos:column="76"/></literal>
                     <literal type="string" pos:line="23" pos:column="22">"semaphore (%s)\n"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>,
                     <argument><expr><call><name pos:line="24" pos:column="22">sstrerror<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">errno<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">errbuf<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="47">sizeof<argument_list pos:line="24" pos:column="53">(<argument><expr><name pos:line="24" pos:column="54">errbuf<pos:position pos:line="24" pos:column="60"/></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">COLLECT_DEBUG<pos:position pos:line="27" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">int<pos:position pos:line="28" pos:column="8"/></name></type> <name pos:line="28" pos:column="9">val<pos:position pos:line="28" pos:column="12"/></name> <init pos:line="28" pos:column="13">= <expr><literal type="number" pos:line="28" pos:column="15">0<pos:position pos:line="28" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="17"/></decl_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">sem_getvalue<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><operator pos:line="29" pos:column="22">&amp;<pos:position pos:line="29" pos:column="27"/></operator><name><name pos:line="29" pos:column="23">phc<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">-&gt;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">sema_cmd_complete<pos:position pos:line="29" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="47">&amp;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="48">val<pos:position pos:line="29" pos:column="51"/></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call> <operator pos:line="29" pos:column="53">==<pos:position pos:line="29" pos:column="55"/></operator> <literal type="number" pos:line="29" pos:column="56">0<pos:position pos:line="29" pos:column="57"/></literal></expr>)<pos:position pos:line="29" pos:column="58"/></condition><then pos:line="29" pos:column="58">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><literal type="string" pos:line="30" pos:column="22">"%s:%s:%d pid=%lu sema_cmd_complete (value=%d)\n"<pos:position pos:line="30" pos:column="71"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="31" pos:column="22">phc<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">shm_name<pos:position pos:line="31" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">__FUNCTION__<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="51">__LINE__<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="61">(<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="62">long<pos:position pos:line="31" pos:column="66"/></name><operator pos:line="31" pos:column="66">)<pos:position pos:line="31" pos:column="67"/></operator><call><name pos:line="31" pos:column="67">getpid<pos:position pos:line="31" pos:column="73"/></name><argument_list pos:line="31" pos:column="73">()<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr></argument>,
                     <argument><expr><name pos:line="32" pos:column="22">val<pos:position pos:line="32" pos:column="25"/></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt></block></then></if>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

  }<pos:position pos:line="35" pos:column="4"/></block></while> <comment type="block" pos:line="35" pos:column="5">/* while(1) */</comment>

  <return pos:line="37" pos:column="3">return <expr><literal type="number" pos:line="37" pos:column="10">0<pos:position pos:line="37" pos:column="11"/></literal></expr>;<pos:position pos:line="37" pos:column="12"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
