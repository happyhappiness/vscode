<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_630_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bind_xml_read_counter<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">xmlDoc<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">doc<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">xmlNode<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">node<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="63">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">counter_t<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">ret_value<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">str_ptr<pos:position pos:line="4" pos:column="16"/></name></decl>, <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="19">end_ptr<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name> <name pos:line="5" pos:column="8">long<pos:position pos:line="5" pos:column="12"/></name> <name pos:line="5" pos:column="13">int<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">value<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">str_ptr<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">char<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></operator><operator pos:line="7" pos:column="20">)<pos:position pos:line="7" pos:column="21"/></operator> <call><name pos:line="7" pos:column="22">xmlNodeListGetString<pos:position pos:line="7" pos:column="42"/></name> <argument_list pos:line="7" pos:column="43">(<argument><expr><name pos:line="7" pos:column="44">doc<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="49">node<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">-&gt;<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="55">xmlChildrenNode<pos:position pos:line="7" pos:column="70"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="72">1<pos:position pos:line="7" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="75"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">str_ptr<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">NULL<pos:position pos:line="8" pos:column="22"/></name></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ERROR<pos:position pos:line="10" pos:column="10"/></name> <argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="string" pos:line="10" pos:column="12">"bind plugin: bind_xml_read_counter: xmlNodeListGetString failed."<pos:position pos:line="10" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="80"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">errno<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <literal type="number" pos:line="14" pos:column="11">0<pos:position pos:line="14" pos:column="12"/></literal></expr>;<pos:position pos:line="14" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">value<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">strtoll<pos:position pos:line="15" pos:column="18"/></name> <argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">str_ptr<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="29">&amp;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="30">end_ptr<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="39">10<pos:position pos:line="15" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">xmlFree<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">str_ptr<pos:position pos:line="16" pos:column="18"/></name></expr></argument>)<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">str_ptr<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">==<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">end_ptr<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">||<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">errno<pos:position pos:line="17" pos:column="34"/></name></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35">
  <block pos:line="18" pos:column="3">{
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">errno<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">&amp;&amp;<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">value<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">&lt;<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal><operator pos:line="19" pos:column="28">)<pos:position pos:line="19" pos:column="29"/></operator></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="7">ERROR<pos:position pos:line="20" pos:column="12"/></name> <argument_list pos:line="20" pos:column="13">(<argument><expr><literal type="string" pos:line="20" pos:column="14">"bind plugin: bind_xml_read_counter: strtoll failed with underflow."<pos:position pos:line="20" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="84"/></expr_stmt></block></then>
    <elseif pos:line="21" pos:column="5">else <if pos:line="21" pos:column="10">if <condition pos:line="21" pos:column="13">(<expr><name pos:line="21" pos:column="14">errno<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">&amp;&amp;<pos:position pos:line="21" pos:column="30"/></operator> <operator pos:line="21" pos:column="23">(<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">value<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">&gt;<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal><operator pos:line="21" pos:column="33">)<pos:position pos:line="21" pos:column="34"/></operator></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="7">ERROR<pos:position pos:line="22" pos:column="12"/></name> <argument_list pos:line="22" pos:column="13">(<argument><expr><literal type="string" pos:line="22" pos:column="14">"bind plugin: bind_xml_read_counter: strtoll failed with overflow."<pos:position pos:line="22" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="83"/></expr_stmt></block></then></if></elseif>
    <else pos:line="23" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="7">ERROR<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><literal type="string" pos:line="24" pos:column="14">"bind plugin: bind_xml_read_counter: strtoll failed."<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt></block></else></if>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="28" pos:column="3">*<pos:position pos:line="28" pos:column="4"/></operator><name pos:line="28" pos:column="4">ret_value<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">value<pos:position pos:line="28" pos:column="21"/></name></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><literal type="number" pos:line="29" pos:column="11">0<pos:position pos:line="29" pos:column="12"/></literal><operator pos:line="29" pos:column="12">)<pos:position pos:line="29" pos:column="13"/></operator></expr>;<pos:position pos:line="29" pos:column="14"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
