<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_454_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">signed<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">long<pos:position pos:line="1" pos:column="19"/></name> <name pos:line="1" pos:column="20">long<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">dict_get_value<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">CFDictionaryRef<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">dict<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="62">const<pos:position pos:line="1" pos:column="67"/></specifier> <name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">key<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list> <block pos:line="1" pos:column="79">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">signed<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">long<pos:position pos:line="2" pos:column="14"/></name> <name pos:line="2" pos:column="15">long<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">val_int<pos:position pos:line="2" pos:column="27"/></name></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CFNumberRef<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">val_obj<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CFStringRef<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">key_obj<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* `key_obj' needs to be released. */</comment>
  <expr_stmt><expr><name pos:line="7" pos:column="3">key_obj<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">CFStringCreateWithCString<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">(<argument><expr><name pos:line="7" pos:column="39">kCFAllocatorDefault<pos:position pos:line="7" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="60">key<pos:position pos:line="7" pos:column="63"/></name></expr></argument>,
                                      <argument><expr><name pos:line="8" pos:column="39">kCFStringEncodingASCII<pos:position pos:line="8" pos:column="61"/></name></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="63"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">key_obj<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">NULL<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">DEBUG<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><literal type="string" pos:line="10" pos:column="11">"CFStringCreateWithCString (%s) failed."<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">key<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1LL<pos:position pos:line="11" pos:column="17"/></literal><operator pos:line="11" pos:column="17">)<pos:position pos:line="11" pos:column="18"/></operator></expr>;<pos:position pos:line="11" pos:column="19"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* get =&gt; we don't need to release (== free) the object */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">val_obj<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">CFNumberRef<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator><call><name pos:line="15" pos:column="26">CFDictionaryGetValue<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">dict<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">key_obj<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">CFRelease<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">key_obj<pos:position pos:line="17" pos:column="20"/></name></expr></argument>)<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">val_obj<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">==<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"CFDictionaryGetValue (%s) failed."<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">key<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><operator pos:line="21" pos:column="13">-<pos:position pos:line="21" pos:column="14"/></operator><literal type="number" pos:line="21" pos:column="14">1LL<pos:position pos:line="21" pos:column="17"/></literal><operator pos:line="21" pos:column="17">)<pos:position pos:line="21" pos:column="18"/></operator></expr>;<pos:position pos:line="21" pos:column="19"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><operator pos:line="24" pos:column="7">!<pos:position pos:line="24" pos:column="8"/></operator><call><name pos:line="24" pos:column="8">CFNumberGetValue<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">val_obj<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">kCFNumberSInt64Type<pos:position pos:line="24" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="55">&amp;<pos:position pos:line="24" pos:column="60"/></operator><name pos:line="24" pos:column="56">val_int<pos:position pos:line="24" pos:column="63"/></name></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="65"/></condition><then pos:line="24" pos:column="65"> <block pos:line="24" pos:column="66">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">DEBUG<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><literal type="string" pos:line="25" pos:column="11">"CFNumberGetValue (%s) failed."<pos:position pos:line="25" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">key<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><operator pos:line="26" pos:column="13">-<pos:position pos:line="26" pos:column="14"/></operator><literal type="number" pos:line="26" pos:column="14">1LL<pos:position pos:line="26" pos:column="17"/></literal><operator pos:line="26" pos:column="17">)<pos:position pos:line="26" pos:column="18"/></operator></expr>;<pos:position pos:line="26" pos:column="19"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <return pos:line="29" pos:column="3">return <expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">val_int<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">)<pos:position pos:line="29" pos:column="19"/></operator></expr>;<pos:position pos:line="29" pos:column="20"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
