<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2171_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wg_callback_init<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">wg_callback<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">cb<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">addrinfo<pos:position pos:line="2" pos:column="18"/></name></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">ai_list<pos:position pos:line="2" pos:column="27"/></name></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cdtime_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">now<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">connerr<pos:position pos:line="6" pos:column="15"/></name><index pos:line="6" pos:column="15">[<expr><literal type="number" pos:line="6" pos:column="16">1024<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name> <init pos:line="6" pos:column="22">= <expr><literal type="string" pos:line="6" pos:column="24">""<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">cb<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">-&gt;<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="11">sock_fd<pos:position pos:line="8" pos:column="18"/></name></name> <operator pos:line="8" pos:column="19">&gt;<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">0<pos:position pos:line="9" pos:column="14"/></literal><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator></expr>;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="11" pos:column="3">/* Don't try to reconnect too often. By default, one reconnection attempt
   * is made per second. */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">now<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">cdtime<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">()<pos:position pos:line="13" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">(<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">now<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">cb<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">last_connect_time<pos:position pos:line="14" pos:column="35"/></name></name><operator pos:line="14" pos:column="35">)<pos:position pos:line="14" pos:column="36"/></operator> <operator pos:line="14" pos:column="37">&lt;<pos:position pos:line="14" pos:column="41"/></operator> <name pos:line="14" pos:column="39">WG_MIN_RECONNECT_INTERVAL<pos:position pos:line="14" pos:column="64"/></name></expr>)<pos:position pos:line="14" pos:column="65"/></condition><then pos:line="14" pos:column="65">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">EAGAIN<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">cb<pos:position pos:line="16" pos:column="5"/></name><operator pos:line="16" pos:column="5">-&gt;<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="7">last_connect_time<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">now<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>

  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">addrinfo<pos:position pos:line="18" pos:column="18"/></name></name></type> <name pos:line="18" pos:column="19">ai_hints<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><block pos:line="18" pos:column="30">{<expr><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">ai_family<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">=<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">AF_UNSPEC<pos:position pos:line="18" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="19" pos:column="31">.<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">ai_flags<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">=<pos:position pos:line="19" pos:column="42"/></operator> <name pos:line="19" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="19" pos:column="56"/></name></expr>}<pos:position pos:line="19" pos:column="57"/></block></expr></init></decl>;<pos:position pos:line="19" pos:column="58"/></decl_stmt>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><literal type="number" pos:line="21" pos:column="7">0<pos:position pos:line="21" pos:column="8"/></literal> <operator pos:line="21" pos:column="9">==<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">strcasecmp<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="string" pos:line="21" pos:column="23">"tcp"<pos:position pos:line="21" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="30">cb<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">protocol<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="5">ai_hints<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">.<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">ai_socktype<pos:position pos:line="22" pos:column="25"/></name></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">SOCK_STREAM<pos:position pos:line="22" pos:column="39"/></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt></block></then>
  <else pos:line="23" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="5">ai_hints<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">.<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">ai_socktype<pos:position pos:line="24" pos:column="25"/></name></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">SOCK_DGRAM<pos:position pos:line="24" pos:column="38"/></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">status<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">getaddrinfo<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name><name pos:line="26" pos:column="24">cb<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">-&gt;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="28">node<pos:position pos:line="26" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="34">cb<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">service<pos:position pos:line="26" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="47">&amp;<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="48">ai_hints<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="58">&amp;<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="59">ai_list<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="68"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">status<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">!=<pos:position pos:line="27" pos:column="16"/></operator> <literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ERROR<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><literal type="string" pos:line="28" pos:column="11">"write_graphite plugin: getaddrinfo (%s, %s, %s) failed: %s"<pos:position pos:line="28" pos:column="71"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="29" pos:column="11">cb<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">-&gt;<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="15">node<pos:position pos:line="29" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="21">cb<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">service<pos:position pos:line="29" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="34">cb<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">-&gt;<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="38">protocol<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="48">gai_strerror<pos:position pos:line="29" pos:column="60"/></name><argument_list pos:line="29" pos:column="60">(<argument><expr><name pos:line="29" pos:column="61">status<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="70"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">assert<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name pos:line="33" pos:column="10">ai_list<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">!=<pos:position pos:line="33" pos:column="20"/></operator> <name pos:line="33" pos:column="21">NULL<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
  <for pos:line="34" pos:column="3">for <control pos:line="34" pos:column="7">(<init><decl><type><name><name pos:line="34" pos:column="8">struct<pos:position pos:line="34" pos:column="14"/></name> <name pos:line="34" pos:column="15">addrinfo<pos:position pos:line="34" pos:column="23"/></name></name> <modifier pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></modifier><name pos:line="34" pos:column="25">ai_ptr<pos:position pos:line="34" pos:column="31"/></name></type> <init pos:line="34" pos:column="32">= <expr><name pos:line="34" pos:column="34">ai_list<pos:position pos:line="34" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="42"/></init> <condition><expr><name pos:line="34" pos:column="43">ai_ptr<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">!=<pos:position pos:line="34" pos:column="52"/></operator> <name pos:line="34" pos:column="53">NULL<pos:position pos:line="34" pos:column="57"/></name></expr>;<pos:position pos:line="34" pos:column="58"/></condition>
       <incr><expr><name pos:line="35" pos:column="8">ai_ptr<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name><name pos:line="35" pos:column="17">ai_ptr<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">ai_next<pos:position pos:line="35" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="35" pos:column="33"/></control> <block pos:line="35" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">cb<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">sock_fd<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator>
        <call><name pos:line="37" pos:column="9">socket<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">ai_ptr<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">ai_family<pos:position pos:line="37" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="35">ai_ptr<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">-&gt;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="43">ai_socktype<pos:position pos:line="37" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="56">ai_ptr<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">-&gt;<pos:position pos:line="37" pos:column="67"/></operator><name pos:line="37" pos:column="64">ai_protocol<pos:position pos:line="37" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="77"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">cb<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">sock_fd<pos:position pos:line="38" pos:column="20"/></name></name> <operator pos:line="38" pos:column="21">&lt;<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25"> <block pos:line="38" pos:column="26">{
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">char<pos:position pos:line="39" pos:column="11"/></name></type> <name><name pos:line="39" pos:column="12">errbuf<pos:position pos:line="39" pos:column="18"/></name><index pos:line="39" pos:column="18">[<expr><literal type="number" pos:line="39" pos:column="19">1024<pos:position pos:line="39" pos:column="23"/></literal></expr>]<pos:position pos:line="39" pos:column="24"/></index></name></decl>;<pos:position pos:line="39" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">snprintf<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">connerr<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="25">sizeof<argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">connerr<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="42">"failed to open socket: %s"<pos:position pos:line="40" pos:column="69"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="41" pos:column="16">sstrerror<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">errno<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="33">errbuf<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="41">sizeof<argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">errbuf<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
      <continue pos:line="42" pos:column="7">continue;<pos:position pos:line="42" pos:column="16"/></continue>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">set_sock_opts<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name><name pos:line="45" pos:column="19">cb<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">-&gt;<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="23">sock_fd<pos:position pos:line="45" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name pos:line="47" pos:column="5">status<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">connect<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><name><name pos:line="47" pos:column="22">cb<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">-&gt;<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="26">sock_fd<pos:position pos:line="47" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="35">ai_ptr<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">-&gt;<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="43">ai_addr<pos:position pos:line="47" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="52">ai_ptr<pos:position pos:line="47" pos:column="58"/></name><operator pos:line="47" pos:column="58">-&gt;<pos:position pos:line="47" pos:column="63"/></operator><name pos:line="47" pos:column="60">ai_addrlen<pos:position pos:line="47" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="72"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">status<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">!=<pos:position pos:line="48" pos:column="18"/></operator> <literal type="number" pos:line="48" pos:column="19">0<pos:position pos:line="48" pos:column="20"/></literal></expr>)<pos:position pos:line="48" pos:column="21"/></condition><then pos:line="48" pos:column="21"> <block pos:line="48" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">char<pos:position pos:line="49" pos:column="11"/></name></type> <name><name pos:line="49" pos:column="12">errbuf<pos:position pos:line="49" pos:column="18"/></name><index pos:line="49" pos:column="18">[<expr><literal type="number" pos:line="49" pos:column="19">1024<pos:position pos:line="49" pos:column="23"/></literal></expr>]<pos:position pos:line="49" pos:column="24"/></index></name></decl>;<pos:position pos:line="49" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">snprintf<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">connerr<pos:position pos:line="50" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="25">sizeof<argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">connerr<pos:position pos:line="50" pos:column="39"/></name></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="42">"failed to connect to remote "<pos:position pos:line="50" pos:column="72"/></literal>
                                         <literal type="string" pos:line="51" pos:column="42">"host: %s"<pos:position pos:line="51" pos:column="52"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="52" pos:column="16">sstrerror<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">errno<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">errbuf<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="41">sizeof<argument_list pos:line="52" pos:column="47">(<argument><expr><name pos:line="52" pos:column="48">errbuf<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">close<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><name><name pos:line="53" pos:column="13">cb<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">sock_fd<pos:position pos:line="53" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">cb<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">sock_fd<pos:position pos:line="54" pos:column="18"/></name></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <operator pos:line="54" pos:column="21">-<pos:position pos:line="54" pos:column="22"/></operator><literal type="number" pos:line="54" pos:column="22">1<pos:position pos:line="54" pos:column="23"/></literal></expr>;<pos:position pos:line="54" pos:column="24"/></expr_stmt>
      <continue pos:line="55" pos:column="7">continue;<pos:position pos:line="55" pos:column="16"/></continue>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <break pos:line="58" pos:column="5">break;<pos:position pos:line="58" pos:column="11"/></break>
  }<pos:position pos:line="59" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">freeaddrinfo<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">ai_list<pos:position pos:line="61" pos:column="23"/></name></expr></argument>)<pos:position pos:line="61" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>

  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><name><name pos:line="63" pos:column="7">cb<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">sock_fd<pos:position pos:line="63" pos:column="18"/></name></name> <operator pos:line="63" pos:column="19">&lt;<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="21">0<pos:position pos:line="63" pos:column="22"/></literal></expr>)<pos:position pos:line="63" pos:column="23"/></condition><then pos:line="63" pos:column="23"> <block pos:line="63" pos:column="24">{
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name><name pos:line="64" pos:column="9">connerr<pos:position pos:line="64" pos:column="16"/></name><index pos:line="64" pos:column="16">[<expr><literal type="number" pos:line="64" pos:column="17">0<pos:position pos:line="64" pos:column="18"/></literal></expr>]<pos:position pos:line="64" pos:column="19"/></index></name> <operator pos:line="64" pos:column="20">==<pos:position pos:line="64" pos:column="22"/></operator> <literal type="char" pos:line="64" pos:column="23">'\0'<pos:position pos:line="64" pos:column="27"/></literal></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28">
      <comment type="block" pos:line="65" pos:column="7">/* this should not happen but try to get a message anyway */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="7">sstrerror<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">errno<pos:position pos:line="66" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="24">connerr<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="33">sizeof<argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">connerr<pos:position pos:line="66" pos:column="47"/></name></expr></argument>)<pos:position pos:line="66" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">c_complain<pos:position pos:line="67" pos:column="15"/></name><argument_list pos:line="67" pos:column="15">(<argument><expr><name pos:line="67" pos:column="16">LOG_ERR<pos:position pos:line="67" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="25">&amp;<pos:position pos:line="67" pos:column="30"/></operator><name><name pos:line="67" pos:column="26">cb<pos:position pos:line="67" pos:column="28"/></name><operator pos:line="67" pos:column="28">-&gt;<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="30">init_complaint<pos:position pos:line="67" pos:column="44"/></name></name></expr></argument>,
               <argument><expr><literal type="string" pos:line="68" pos:column="16">"write_graphite plugin: Connecting to %s:%s via %s failed. "<pos:position pos:line="68" pos:column="76"/></literal>
               <literal type="string" pos:line="69" pos:column="16">"The last error was: %s"<pos:position pos:line="69" pos:column="40"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="70" pos:column="16">cb<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="20">node<pos:position pos:line="70" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="26">cb<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">-&gt;<pos:position pos:line="70" pos:column="33"/></operator><name pos:line="70" pos:column="30">service<pos:position pos:line="70" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="39">cb<pos:position pos:line="70" pos:column="41"/></name><operator pos:line="70" pos:column="41">-&gt;<pos:position pos:line="70" pos:column="46"/></operator><name pos:line="70" pos:column="43">protocol<pos:position pos:line="70" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="53">connerr<pos:position pos:line="70" pos:column="60"/></name></expr></argument>)<pos:position pos:line="70" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="62"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><operator pos:line="71" pos:column="12">(<pos:position pos:line="71" pos:column="13"/></operator><operator pos:line="71" pos:column="13">-<pos:position pos:line="71" pos:column="14"/></operator><literal type="number" pos:line="71" pos:column="14">1<pos:position pos:line="71" pos:column="15"/></literal><operator pos:line="71" pos:column="15">)<pos:position pos:line="71" pos:column="16"/></operator></expr>;<pos:position pos:line="71" pos:column="17"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then> <else pos:line="72" pos:column="5">else <block pos:line="72" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">c_release<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><name pos:line="73" pos:column="15">LOG_INFO<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="25">&amp;<pos:position pos:line="73" pos:column="30"/></operator><name><name pos:line="73" pos:column="26">cb<pos:position pos:line="73" pos:column="28"/></name><operator pos:line="73" pos:column="28">-&gt;<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="30">init_complaint<pos:position pos:line="73" pos:column="44"/></name></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="74" pos:column="15">"write_graphite plugin: Successfully connected to %s:%s via %s."<pos:position pos:line="74" pos:column="79"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="75" pos:column="15">cb<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">-&gt;<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="19">node<pos:position pos:line="75" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="25">cb<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">-&gt;<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="29">service<pos:position pos:line="75" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="38">cb<pos:position pos:line="75" pos:column="40"/></name><operator pos:line="75" pos:column="40">-&gt;<pos:position pos:line="75" pos:column="45"/></operator><name pos:line="75" pos:column="42">protocol<pos:position pos:line="75" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="52"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="78" pos:column="3">/* wg_force_reconnect_check does not flush the buffer before closing a
   * sending socket, so only call wg_reset_buffer() if the socket was closed
   * for a different reason (tracked in cb-&gt;reconnect_interval_reached). */</comment>
  <if pos:line="81" pos:column="3">if <condition pos:line="81" pos:column="6">(<expr><operator pos:line="81" pos:column="7">!<pos:position pos:line="81" pos:column="8"/></operator><name><name pos:line="81" pos:column="8">cb<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">reconnect_interval_reached<pos:position pos:line="81" pos:column="38"/></name></name> <operator pos:line="81" pos:column="39">||<pos:position pos:line="81" pos:column="41"/></operator> <operator pos:line="81" pos:column="42">(<pos:position pos:line="81" pos:column="43"/></operator><name><name pos:line="81" pos:column="43">cb<pos:position pos:line="81" pos:column="45"/></name><operator pos:line="81" pos:column="45">-&gt;<pos:position pos:line="81" pos:column="50"/></operator><name pos:line="81" pos:column="47">send_buf_free<pos:position pos:line="81" pos:column="60"/></name></name> <operator pos:line="81" pos:column="61">==<pos:position pos:line="81" pos:column="63"/></operator> <literal type="number" pos:line="81" pos:column="64">0<pos:position pos:line="81" pos:column="65"/></literal><operator pos:line="81" pos:column="65">)<pos:position pos:line="81" pos:column="66"/></operator></expr>)<pos:position pos:line="81" pos:column="67"/></condition><then pos:line="81" pos:column="67">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="5">wg_reset_buffer<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">cb<pos:position pos:line="82" pos:column="23"/></name></expr></argument>)<pos:position pos:line="82" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt></block></then>
  <else pos:line="83" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="84" pos:column="5">cb<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">-&gt;<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="9">reconnect_interval_reached<pos:position pos:line="84" pos:column="35"/></name></name> <operator pos:line="84" pos:column="36">=<pos:position pos:line="84" pos:column="37"/></operator> <literal type="number" pos:line="84" pos:column="38">0<pos:position pos:line="84" pos:column="39"/></literal></expr>;<pos:position pos:line="84" pos:column="40"/></expr_stmt></block></else></if>

  <return pos:line="86" pos:column="3">return <expr><operator pos:line="86" pos:column="10">(<pos:position pos:line="86" pos:column="11"/></operator><literal type="number" pos:line="86" pos:column="11">0<pos:position pos:line="86" pos:column="12"/></literal><operator pos:line="86" pos:column="12">)<pos:position pos:line="86" pos:column="13"/></operator></expr>;<pos:position pos:line="86" pos:column="14"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
