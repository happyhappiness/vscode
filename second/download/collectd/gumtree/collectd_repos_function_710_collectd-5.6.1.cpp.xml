<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_710_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mic_read<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">U32<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">error<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">error<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">=<pos:position pos:line="6" pos:column="15"/></operator><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr>;<pos:position pos:line="6" pos:column="17"/></expr_stmt>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><decl><type><name pos:line="7" pos:column="14">int<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">i<pos:position pos:line="7" pos:column="19"/></name><init pos:line="7" pos:column="19">=<expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></init><condition><expr><name pos:line="7" pos:column="22">i<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">num_mics<pos:position pos:line="7" pos:column="32"/></name></expr>;<pos:position pos:line="7" pos:column="33"/></condition><incr><expr><name pos:line="7" pos:column="33">i<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">++<pos:position pos:line="7" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="37"/></control> <block pos:line="7" pos:column="38">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">ret<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <call><name pos:line="8" pos:column="23">MicInitAdapter<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">mic_handle<pos:position pos:line="8" pos:column="49"/></name></expr></argument>,<argument><expr><operator pos:line="8" pos:column="50">&amp;<pos:position pos:line="8" pos:column="55"/></operator><name><name pos:line="8" pos:column="51">mics<pos:position pos:line="8" pos:column="55"/></name><index pos:line="8" pos:column="55">[<expr><name pos:line="8" pos:column="56">i<pos:position pos:line="8" pos:column="57"/></name></expr>]<pos:position pos:line="8" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">ret<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">!=<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="28">MIC_ACCESS_API_SUCCESS<pos:position pos:line="9" pos:column="50"/></name></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">ERROR<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"mic plugin: Problem initializing MicAdapter: %s"<pos:position pos:line="10" pos:column="80"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="11" pos:column="41">MicGetErrorString<pos:position pos:line="11" pos:column="58"/></name><argument_list pos:line="11" pos:column="58">(<argument><expr><name pos:line="11" pos:column="59">ret<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="12" pos:column="25">error<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator><literal type="number" pos:line="12" pos:column="31">1<pos:position pos:line="12" pos:column="32"/></literal></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">error<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">==<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal> <operator pos:line="15" pos:column="32">&amp;&amp;<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="35">show_memory<pos:position pos:line="15" pos:column="46"/></name></expr>)<pos:position pos:line="15" pos:column="47"/></condition><then pos:line="15" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">error<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <call><name pos:line="16" pos:column="33">mic_read_memory<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">i<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt></block></then></if>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">error<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">==<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal> <operator pos:line="18" pos:column="32">&amp;&amp;<pos:position pos:line="18" pos:column="42"/></operator> <name pos:line="18" pos:column="35">show_temps<pos:position pos:line="18" pos:column="45"/></name></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">error<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <call><name pos:line="19" pos:column="33">mic_read_temps<pos:position pos:line="19" pos:column="47"/></name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">i<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt></block></then></if>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">error<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">==<pos:position pos:line="21" pos:column="29"/></operator> <literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal> <operator pos:line="21" pos:column="32">&amp;&amp;<pos:position pos:line="21" pos:column="42"/></operator> <operator pos:line="21" pos:column="35">(<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">show_cpu<pos:position pos:line="21" pos:column="44"/></name> <operator pos:line="21" pos:column="45">||<pos:position pos:line="21" pos:column="47"/></operator> <name pos:line="21" pos:column="48">show_cpu_cores<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator></expr>)<pos:position pos:line="21" pos:column="64"/></condition><then pos:line="21" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">error<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <call><name pos:line="22" pos:column="33">mic_read_cpu<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">i<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt></block></then></if>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">error<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">==<pos:position pos:line="24" pos:column="29"/></operator> <literal type="number" pos:line="24" pos:column="30">0<pos:position pos:line="24" pos:column="31"/></literal> <operator pos:line="24" pos:column="32">&amp;&amp;<pos:position pos:line="24" pos:column="42"/></operator> <operator pos:line="24" pos:column="35">(<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="36">show_power<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">)<pos:position pos:line="24" pos:column="47"/></operator></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="25">error<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <call><name pos:line="25" pos:column="33">mic_read_power<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name pos:line="25" pos:column="48">i<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="51"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="27" pos:column="17">ret<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">MicCloseAdapter<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name pos:line="27" pos:column="39">mic_handle<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">ret<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">!=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">MIC_ACCESS_API_SUCCESS<pos:position pos:line="28" pos:column="50"/></name></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51"> <block pos:line="28" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">ERROR<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><literal type="string" pos:line="29" pos:column="31">"mic plugin: Problem closing MicAdapter: %s"<pos:position pos:line="29" pos:column="75"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="30" pos:column="41">MicGetErrorString<pos:position pos:line="30" pos:column="58"/></name><argument_list pos:line="30" pos:column="58">(<argument><expr><name pos:line="30" pos:column="59">ret<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">error<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator><literal type="number" pos:line="31" pos:column="31">2<pos:position pos:line="31" pos:column="32"/></literal></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
			<break pos:line="32" pos:column="25">break;<pos:position pos:line="32" pos:column="31"/></break>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></for>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">num_mics<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator><literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">error<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator><literal type="number" pos:line="36" pos:column="23">3<pos:position pos:line="36" pos:column="24"/></literal></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt></block></then></if>
	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">error<pos:position pos:line="37" pos:column="21"/></name></expr>;<pos:position pos:line="37" pos:column="22"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
