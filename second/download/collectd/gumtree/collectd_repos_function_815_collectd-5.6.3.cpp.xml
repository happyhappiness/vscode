<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_815_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">log_logstash_print<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">yajl_gen<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">g<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">severity<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">cdtime_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">timestamp_time<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <block pos:line="2" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">fh<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">_Bool<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">do_close<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">tm<pos:position pos:line="5" pos:column="12"/></name></name></type> <name pos:line="5" pos:column="13">timestamp_tm<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">timestamp_str<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">64<pos:position pos:line="6" pos:column="24"/></literal></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">buf<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">time_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">tt<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="9" pos:column="17"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">len<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">int<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">len<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">yajl_gen_string<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">g<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="26">(<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">u_char<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">*<pos:position pos:line="15" pos:column="35"/></operator><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator><literal type="string" pos:line="15" pos:column="36">"level"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="45">strlen<pos:position pos:line="15" pos:column="51"/></name><argument_list pos:line="15" pos:column="51">(<argument><expr><literal type="string" pos:line="15" pos:column="52">"level"<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call> <operator pos:line="15" pos:column="62">!=<pos:position pos:line="15" pos:column="64"/></operator>
      <name pos:line="16" pos:column="7">yajl_gen_status_ok<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
    <block type="pseudo"><goto pos:line="17" pos:column="5">goto <name pos:line="17" pos:column="10">err<pos:position pos:line="17" pos:column="13"/></name>;<pos:position pos:line="17" pos:column="14"/></goto></block></then></if>

  <switch pos:line="19" pos:column="3">switch <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">severity<pos:position pos:line="19" pos:column="19"/></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition> <block pos:line="19" pos:column="21">{
  <case pos:line="20" pos:column="3">case <expr><name pos:line="20" pos:column="8">LOG_ERR<pos:position pos:line="20" pos:column="15"/></name></expr>:<pos:position pos:line="20" pos:column="16"/></case>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">yajl_gen_string<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">g<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="28">(<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">u_char<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">*<pos:position pos:line="21" pos:column="37"/></operator><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator><literal type="string" pos:line="21" pos:column="38">"error"<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="47">strlen<pos:position pos:line="21" pos:column="53"/></name><argument_list pos:line="21" pos:column="53">(<argument><expr><literal type="string" pos:line="21" pos:column="54">"error"<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call> <operator pos:line="21" pos:column="64">!=<pos:position pos:line="21" pos:column="66"/></operator>
        <name pos:line="22" pos:column="9">yajl_gen_status_ok<pos:position pos:line="22" pos:column="27"/></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28">
      <block type="pseudo"><goto pos:line="23" pos:column="7">goto <name pos:line="23" pos:column="12">err<pos:position pos:line="23" pos:column="15"/></name>;<pos:position pos:line="23" pos:column="16"/></goto></block></then></if>
    <break pos:line="24" pos:column="5">break;<pos:position pos:line="24" pos:column="11"/></break>
  <case pos:line="25" pos:column="3">case <expr><name pos:line="25" pos:column="8">LOG_WARNING<pos:position pos:line="25" pos:column="19"/></name></expr>:<pos:position pos:line="25" pos:column="20"/></case>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">yajl_gen_string<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">g<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="28">(<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">u_char<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">*<pos:position pos:line="26" pos:column="37"/></operator><operator pos:line="26" pos:column="37">)<pos:position pos:line="26" pos:column="38"/></operator><literal type="string" pos:line="26" pos:column="38">"warning"<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="49">strlen<pos:position pos:line="26" pos:column="55"/></name><argument_list pos:line="26" pos:column="55">(<argument><expr><literal type="string" pos:line="26" pos:column="56">"warning"<pos:position pos:line="26" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call> <operator pos:line="26" pos:column="68">!=<pos:position pos:line="26" pos:column="70"/></operator>
        <name pos:line="27" pos:column="9">yajl_gen_status_ok<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28">
      <block type="pseudo"><goto pos:line="28" pos:column="7">goto <name pos:line="28" pos:column="12">err<pos:position pos:line="28" pos:column="15"/></name>;<pos:position pos:line="28" pos:column="16"/></goto></block></then></if>
    <break pos:line="29" pos:column="5">break;<pos:position pos:line="29" pos:column="11"/></break>
  <case pos:line="30" pos:column="3">case <expr><name pos:line="30" pos:column="8">LOG_NOTICE<pos:position pos:line="30" pos:column="18"/></name></expr>:<pos:position pos:line="30" pos:column="19"/></case>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name pos:line="31" pos:column="9">yajl_gen_string<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">g<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="28">(<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">u_char<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">*<pos:position pos:line="31" pos:column="37"/></operator><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator><literal type="string" pos:line="31" pos:column="38">"notice"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="48">strlen<pos:position pos:line="31" pos:column="54"/></name><argument_list pos:line="31" pos:column="54">(<argument><expr><literal type="string" pos:line="31" pos:column="55">"notice"<pos:position pos:line="31" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call> <operator pos:line="31" pos:column="66">!=<pos:position pos:line="31" pos:column="68"/></operator>
        <name pos:line="32" pos:column="9">yajl_gen_status_ok<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
      <block type="pseudo"><goto pos:line="33" pos:column="7">goto <name pos:line="33" pos:column="12">err<pos:position pos:line="33" pos:column="15"/></name>;<pos:position pos:line="33" pos:column="16"/></goto></block></then></if>
    <break pos:line="34" pos:column="5">break;<pos:position pos:line="34" pos:column="11"/></break>
  <case pos:line="35" pos:column="3">case <expr><name pos:line="35" pos:column="8">LOG_INFO<pos:position pos:line="35" pos:column="16"/></name></expr>:<pos:position pos:line="35" pos:column="17"/></case>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">yajl_gen_string<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">g<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="28">(<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="29">u_char<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">*<pos:position pos:line="36" pos:column="37"/></operator><operator pos:line="36" pos:column="37">)<pos:position pos:line="36" pos:column="38"/></operator><literal type="string" pos:line="36" pos:column="38">"info"<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="46">strlen<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><literal type="string" pos:line="36" pos:column="53">"info"<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call> <operator pos:line="36" pos:column="62">!=<pos:position pos:line="36" pos:column="64"/></operator>
        <name pos:line="37" pos:column="9">yajl_gen_status_ok<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
      <block type="pseudo"><goto pos:line="38" pos:column="7">goto <name pos:line="38" pos:column="12">err<pos:position pos:line="38" pos:column="15"/></name>;<pos:position pos:line="38" pos:column="16"/></goto></block></then></if>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">LOG_DEBUG<pos:position pos:line="40" pos:column="17"/></name></expr>:<pos:position pos:line="40" pos:column="18"/></case>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">yajl_gen_string<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">g<pos:position pos:line="41" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="28">(<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="29">u_char<pos:position pos:line="41" pos:column="35"/></name> <operator pos:line="41" pos:column="36">*<pos:position pos:line="41" pos:column="37"/></operator><operator pos:line="41" pos:column="37">)<pos:position pos:line="41" pos:column="38"/></operator><literal type="string" pos:line="41" pos:column="38">"debug"<pos:position pos:line="41" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="47">strlen<pos:position pos:line="41" pos:column="53"/></name><argument_list pos:line="41" pos:column="53">(<argument><expr><literal type="string" pos:line="41" pos:column="54">"debug"<pos:position pos:line="41" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call> <operator pos:line="41" pos:column="64">!=<pos:position pos:line="41" pos:column="66"/></operator>
        <name pos:line="42" pos:column="9">yajl_gen_status_ok<pos:position pos:line="42" pos:column="27"/></name></expr>)<pos:position pos:line="42" pos:column="28"/></condition><then pos:line="42" pos:column="28">
      <block type="pseudo"><goto pos:line="43" pos:column="7">goto <name pos:line="43" pos:column="12">err<pos:position pos:line="43" pos:column="15"/></name>;<pos:position pos:line="43" pos:column="16"/></goto></block></then></if>
    <break pos:line="44" pos:column="5">break;<pos:position pos:line="44" pos:column="11"/></break>
  <default pos:line="45" pos:column="3">default:<pos:position pos:line="45" pos:column="11"/></default>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">yajl_gen_string<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">g<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="28">(<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">u_char<pos:position pos:line="46" pos:column="35"/></name> <operator pos:line="46" pos:column="36">*<pos:position pos:line="46" pos:column="37"/></operator><operator pos:line="46" pos:column="37">)<pos:position pos:line="46" pos:column="38"/></operator><literal type="string" pos:line="46" pos:column="38">"unknown"<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="49">strlen<pos:position pos:line="46" pos:column="55"/></name><argument_list pos:line="46" pos:column="55">(<argument><expr><literal type="string" pos:line="46" pos:column="56">"unknown"<pos:position pos:line="46" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call> <operator pos:line="46" pos:column="68">!=<pos:position pos:line="46" pos:column="70"/></operator>
        <name pos:line="47" pos:column="9">yajl_gen_status_ok<pos:position pos:line="47" pos:column="27"/></name></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28">
      <block type="pseudo"><goto pos:line="48" pos:column="7">goto <name pos:line="48" pos:column="12">err<pos:position pos:line="48" pos:column="15"/></name>;<pos:position pos:line="48" pos:column="16"/></goto></block></then></if>
    <break pos:line="49" pos:column="5">break;<pos:position pos:line="49" pos:column="11"/></break>
  }<pos:position pos:line="50" pos:column="4"/></block></switch>

  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><call><name pos:line="52" pos:column="7">yajl_gen_string<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">g<pos:position pos:line="52" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="26">(<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">u_char<pos:position pos:line="52" pos:column="33"/></name> <operator pos:line="52" pos:column="34">*<pos:position pos:line="52" pos:column="35"/></operator><operator pos:line="52" pos:column="35">)<pos:position pos:line="52" pos:column="36"/></operator><literal type="string" pos:line="52" pos:column="36">"@timestamp"<pos:position pos:line="52" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="50">strlen<pos:position pos:line="52" pos:column="56"/></name><argument_list pos:line="52" pos:column="56">(<argument><expr><literal type="string" pos:line="52" pos:column="57">"@timestamp"<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="71"/></argument_list></call> <operator pos:line="52" pos:column="72">!=<pos:position pos:line="52" pos:column="74"/></operator>
      <name pos:line="53" pos:column="7">yajl_gen_status_ok<pos:position pos:line="53" pos:column="25"/></name></expr>)<pos:position pos:line="53" pos:column="26"/></condition><then pos:line="53" pos:column="26">
    <block type="pseudo"><goto pos:line="54" pos:column="5">goto <name pos:line="54" pos:column="10">err<pos:position pos:line="54" pos:column="13"/></name>;<pos:position pos:line="54" pos:column="14"/></goto></block></then></if>

  <expr_stmt><expr><name pos:line="56" pos:column="3">tt<pos:position pos:line="56" pos:column="5"/></name> <operator pos:line="56" pos:column="6">=<pos:position pos:line="56" pos:column="7"/></operator> <call><name pos:line="56" pos:column="8">CDTIME_T_TO_TIME_T<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">timestamp_time<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">gmtime_r<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><operator pos:line="57" pos:column="12">&amp;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="13">tt<pos:position pos:line="57" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="17">&amp;<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="18">timestamp_tm<pos:position pos:line="57" pos:column="30"/></name></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="59" pos:column="3">/*
   * format time as a UTC ISO 8601 compliant string
   */</comment>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">strftime<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><name pos:line="62" pos:column="12">timestamp_str<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="27">sizeof<argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">timestamp_str<pos:position pos:line="62" pos:column="47"/></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="50">"%Y-%m-%dT%H:%M:%SZ"<pos:position pos:line="62" pos:column="70"/></literal></expr></argument>,
           <argument><expr><operator pos:line="63" pos:column="12">&amp;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="13">timestamp_tm<pos:position pos:line="63" pos:column="25"/></name></expr></argument>)<pos:position pos:line="63" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="64" pos:column="3">timestamp_str<pos:position pos:line="64" pos:column="16"/></name><index pos:line="64" pos:column="16">[<expr><sizeof pos:line="64" pos:column="17">sizeof<argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">timestamp_str<pos:position pos:line="64" pos:column="37"/></name></expr></argument>)<pos:position pos:line="64" pos:column="38"/></argument_list></sizeof> <operator pos:line="64" pos:column="39">-<pos:position pos:line="64" pos:column="40"/></operator> <literal type="number" pos:line="64" pos:column="41">1<pos:position pos:line="64" pos:column="42"/></literal></expr>]<pos:position pos:line="64" pos:column="43"/></index></name> <operator pos:line="64" pos:column="44">=<pos:position pos:line="64" pos:column="45"/></operator> <literal type="char" pos:line="64" pos:column="46">'\0'<pos:position pos:line="64" pos:column="50"/></literal></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>

  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><call><name pos:line="66" pos:column="7">yajl_gen_string<pos:position pos:line="66" pos:column="22"/></name><argument_list pos:line="66" pos:column="22">(<argument><expr><name pos:line="66" pos:column="23">g<pos:position pos:line="66" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="26">(<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="27">u_char<pos:position pos:line="66" pos:column="33"/></name> <operator pos:line="66" pos:column="34">*<pos:position pos:line="66" pos:column="35"/></operator><operator pos:line="66" pos:column="35">)<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="36">timestamp_str<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="51">strlen<pos:position pos:line="66" pos:column="57"/></name><argument_list pos:line="66" pos:column="57">(<argument><expr><name pos:line="66" pos:column="58">timestamp_str<pos:position pos:line="66" pos:column="71"/></name></expr></argument>)<pos:position pos:line="66" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call> <operator pos:line="66" pos:column="74">!=<pos:position pos:line="66" pos:column="76"/></operator>
      <name pos:line="67" pos:column="7">yajl_gen_status_ok<pos:position pos:line="67" pos:column="25"/></name></expr>)<pos:position pos:line="67" pos:column="26"/></condition><then pos:line="67" pos:column="26">
    <block type="pseudo"><goto pos:line="68" pos:column="5">goto <name pos:line="68" pos:column="10">err<pos:position pos:line="68" pos:column="13"/></name>;<pos:position pos:line="68" pos:column="14"/></goto></block></then></if>

  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><call><name pos:line="70" pos:column="7">yajl_gen_map_close<pos:position pos:line="70" pos:column="25"/></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">g<pos:position pos:line="70" pos:column="27"/></name></expr></argument>)<pos:position pos:line="70" pos:column="28"/></argument_list></call> <operator pos:line="70" pos:column="29">!=<pos:position pos:line="70" pos:column="31"/></operator> <name pos:line="70" pos:column="32">yajl_gen_status_ok<pos:position pos:line="70" pos:column="50"/></name></expr>)<pos:position pos:line="70" pos:column="51"/></condition><then pos:line="70" pos:column="51">
    <block type="pseudo"><goto pos:line="71" pos:column="5">goto <name pos:line="71" pos:column="10">err<pos:position pos:line="71" pos:column="13"/></name>;<pos:position pos:line="71" pos:column="14"/></goto></block></then></if>

  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><call><name pos:line="73" pos:column="7">yajl_gen_get_buf<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><name pos:line="73" pos:column="24">g<pos:position pos:line="73" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="27">&amp;<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="28">buf<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="33">&amp;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="34">len<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call> <operator pos:line="73" pos:column="39">!=<pos:position pos:line="73" pos:column="41"/></operator> <name pos:line="73" pos:column="42">yajl_gen_status_ok<pos:position pos:line="73" pos:column="60"/></name></expr>)<pos:position pos:line="73" pos:column="61"/></condition><then pos:line="73" pos:column="61">
    <block type="pseudo"><goto pos:line="74" pos:column="5">goto <name pos:line="74" pos:column="10">err<pos:position pos:line="74" pos:column="13"/></name>;<pos:position pos:line="74" pos:column="14"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="75" pos:column="3">pthread_mutex_lock<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><operator pos:line="75" pos:column="22">&amp;<pos:position pos:line="75" pos:column="27"/></operator><name pos:line="75" pos:column="23">file_lock<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>

  <if pos:line="77" pos:column="3">if <condition pos:line="77" pos:column="6">(<expr><name pos:line="77" pos:column="7">log_file<pos:position pos:line="77" pos:column="15"/></name> <operator pos:line="77" pos:column="16">==<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">NULL<pos:position pos:line="77" pos:column="23"/></name></expr>)<pos:position pos:line="77" pos:column="24"/></condition><then pos:line="77" pos:column="24"> <block pos:line="77" pos:column="25">{
    <expr_stmt><expr><name pos:line="78" pos:column="5">fh<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <name pos:line="78" pos:column="10">stderr<pos:position pos:line="78" pos:column="16"/></name></expr>;<pos:position pos:line="78" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="79" pos:column="4"/></block></then> <elseif pos:line="79" pos:column="5">else <if pos:line="79" pos:column="10">if <condition pos:line="79" pos:column="13">(<expr><call><name pos:line="79" pos:column="14">strcasecmp<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name pos:line="79" pos:column="25">log_file<pos:position pos:line="79" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="35">"stdout"<pos:position pos:line="79" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="44"/></argument_list></call> <operator pos:line="79" pos:column="45">==<pos:position pos:line="79" pos:column="47"/></operator> <literal type="number" pos:line="79" pos:column="48">0<pos:position pos:line="79" pos:column="49"/></literal></expr>)<pos:position pos:line="79" pos:column="50"/></condition><then pos:line="79" pos:column="50"> <block pos:line="79" pos:column="51">{
    <expr_stmt><expr><name pos:line="80" pos:column="5">fh<pos:position pos:line="80" pos:column="7"/></name> <operator pos:line="80" pos:column="8">=<pos:position pos:line="80" pos:column="9"/></operator> <name pos:line="80" pos:column="10">stdout<pos:position pos:line="80" pos:column="16"/></name></expr>;<pos:position pos:line="80" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="81" pos:column="5">do_close<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">=<pos:position pos:line="81" pos:column="15"/></operator> <literal type="number" pos:line="81" pos:column="16">0<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="82" pos:column="4"/></block></then></if></elseif> <elseif pos:line="82" pos:column="5">else <if pos:line="82" pos:column="10">if <condition pos:line="82" pos:column="13">(<expr><call><name pos:line="82" pos:column="14">strcasecmp<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">log_file<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="35">"stderr"<pos:position pos:line="82" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call> <operator pos:line="82" pos:column="45">==<pos:position pos:line="82" pos:column="47"/></operator> <literal type="number" pos:line="82" pos:column="48">0<pos:position pos:line="82" pos:column="49"/></literal></expr>)<pos:position pos:line="82" pos:column="50"/></condition><then pos:line="82" pos:column="50"> <block pos:line="82" pos:column="51">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">fh<pos:position pos:line="83" pos:column="7"/></name> <operator pos:line="83" pos:column="8">=<pos:position pos:line="83" pos:column="9"/></operator> <name pos:line="83" pos:column="10">stderr<pos:position pos:line="83" pos:column="16"/></name></expr>;<pos:position pos:line="83" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="84" pos:column="5">do_close<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <literal type="number" pos:line="84" pos:column="16">0<pos:position pos:line="84" pos:column="17"/></literal></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if></elseif> <else pos:line="85" pos:column="5">else <block pos:line="85" pos:column="10">{
    <expr_stmt><expr><name pos:line="86" pos:column="5">fh<pos:position pos:line="86" pos:column="7"/></name> <operator pos:line="86" pos:column="8">=<pos:position pos:line="86" pos:column="9"/></operator> <call><name pos:line="86" pos:column="10">fopen<pos:position pos:line="86" pos:column="15"/></name><argument_list pos:line="86" pos:column="15">(<argument><expr><name pos:line="86" pos:column="16">log_file<pos:position pos:line="86" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="26">"a"<pos:position pos:line="86" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">do_close<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">=<pos:position pos:line="87" pos:column="15"/></operator> <literal type="number" pos:line="87" pos:column="16">1<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></else></if>

  <if pos:line="90" pos:column="3">if <condition pos:line="90" pos:column="6">(<expr><name pos:line="90" pos:column="7">fh<pos:position pos:line="90" pos:column="9"/></name> <operator pos:line="90" pos:column="10">==<pos:position pos:line="90" pos:column="12"/></operator> <name pos:line="90" pos:column="13">NULL<pos:position pos:line="90" pos:column="17"/></name></expr>)<pos:position pos:line="90" pos:column="18"/></condition><then pos:line="90" pos:column="18"> <block pos:line="90" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="91" pos:column="5">char<pos:position pos:line="91" pos:column="9"/></name></type> <name><name pos:line="91" pos:column="10">errbuf<pos:position pos:line="91" pos:column="16"/></name><index pos:line="91" pos:column="16">[<expr><literal type="number" pos:line="91" pos:column="17">1024<pos:position pos:line="91" pos:column="21"/></literal></expr>]<pos:position pos:line="91" pos:column="22"/></index></name></decl>;<pos:position pos:line="91" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">fprintf<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">stderr<pos:position pos:line="92" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="21">"log_logstash plugin: fopen (%s) failed: %s\n"<pos:position pos:line="92" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="69">log_file<pos:position pos:line="92" pos:column="77"/></name></expr></argument>,
            <argument><expr><call><name pos:line="93" pos:column="13">sstrerror<pos:position pos:line="93" pos:column="22"/></name><argument_list pos:line="93" pos:column="22">(<argument><expr><name pos:line="93" pos:column="23">errno<pos:position pos:line="93" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="30">errbuf<pos:position pos:line="93" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="38">sizeof<argument_list pos:line="93" pos:column="44">(<argument><expr><name pos:line="93" pos:column="45">errbuf<pos:position pos:line="93" pos:column="51"/></name></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="93" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></then> <else pos:line="94" pos:column="5">else <block pos:line="94" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">fprintf<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><name pos:line="95" pos:column="13">fh<pos:position pos:line="95" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="17">"%s\n"<pos:position pos:line="95" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="25">buf<pos:position pos:line="95" pos:column="28"/></name></expr></argument>)<pos:position pos:line="95" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="30"/></expr_stmt>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><name pos:line="96" pos:column="9">do_close<pos:position pos:line="96" pos:column="17"/></name></expr>)<pos:position pos:line="96" pos:column="18"/></condition><then pos:line="96" pos:column="18"> <block pos:line="96" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">fclose<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><name pos:line="97" pos:column="14">fh<pos:position pos:line="97" pos:column="16"/></name></expr></argument>)<pos:position pos:line="97" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then> <else pos:line="98" pos:column="7">else <block pos:line="98" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="99" pos:column="7">fflush<pos:position pos:line="99" pos:column="13"/></name><argument_list pos:line="99" pos:column="13">(<argument><expr><name pos:line="99" pos:column="14">fh<pos:position pos:line="99" pos:column="16"/></name></expr></argument>)<pos:position pos:line="99" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="100" pos:column="6"/></block></else></if>
  }<pos:position pos:line="101" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="102" pos:column="3">pthread_mutex_unlock<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><operator pos:line="102" pos:column="24">&amp;<pos:position pos:line="102" pos:column="29"/></operator><name pos:line="102" pos:column="25">file_lock<pos:position pos:line="102" pos:column="34"/></name></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="103" pos:column="3">yajl_gen_free<pos:position pos:line="103" pos:column="16"/></name><argument_list pos:line="103" pos:column="16">(<argument><expr><name pos:line="103" pos:column="17">g<pos:position pos:line="103" pos:column="18"/></name></expr></argument>)<pos:position pos:line="103" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="20"/></expr_stmt>
  <return pos:line="104" pos:column="3">return;<pos:position pos:line="104" pos:column="10"/></return>

<label><name pos:line="106" pos:column="1">err<pos:position pos:line="106" pos:column="4"/></name>:<pos:position pos:line="106" pos:column="5"/></label>
  <expr_stmt><expr><call><name pos:line="107" pos:column="3">yajl_gen_free<pos:position pos:line="107" pos:column="16"/></name><argument_list pos:line="107" pos:column="16">(<argument><expr><name pos:line="107" pos:column="17">g<pos:position pos:line="107" pos:column="18"/></name></expr></argument>)<pos:position pos:line="107" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="108" pos:column="3">fprintf<pos:position pos:line="108" pos:column="10"/></name><argument_list pos:line="108" pos:column="10">(<argument><expr><name pos:line="108" pos:column="11">stderr<pos:position pos:line="108" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="19">"Could not correctly generate JSON message\n"<pos:position pos:line="108" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="66"/></expr_stmt>
  <return pos:line="109" pos:column="3">return;<pos:position pos:line="109" pos:column="10"/></return>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
