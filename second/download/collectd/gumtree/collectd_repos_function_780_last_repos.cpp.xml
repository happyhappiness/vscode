<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_780_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">value_list_t<pos:position pos:line="1" pos:column="13"/></name> <modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">luaC_tovaluelist<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">lua_State<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">L<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">idx<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">COLLECT_DEBUG<pos:position pos:line="3" pos:column="18"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">stack_top_before<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">lua_gettop<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">(<argument><expr><name pos:line="4" pos:column="37">L<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="7" pos:column="3">/* Convert relative indexes to absolute indexes, so it doesn't change when we
   * push / pop stuff. */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">idx<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">&lt;<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="5">idx<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">+=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">lua_gettop<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">L<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call> <operator pos:line="10" pos:column="26">+<pos:position pos:line="10" pos:column="27"/></operator> <literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* Check that idx is in the valid range */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">idx<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator> <operator pos:line="13" pos:column="17">||<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">idx<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&gt;<pos:position pos:line="13" pos:column="29"/></operator> <call><name pos:line="13" pos:column="27">lua_gettop<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">L<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42"> <block pos:line="13" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">DEBUG<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"luaC_tovaluelist: idx(%d), top(%d)"<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">idx<pos:position pos:line="14" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="54">stack_top_before<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="72"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">NULL<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">value_list_t<pos:position pos:line="18" pos:column="15"/></name> <modifier pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></modifier></type><name pos:line="18" pos:column="17">vl<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><call><name pos:line="18" pos:column="22">calloc<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><literal type="number" pos:line="18" pos:column="29">1<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="32">sizeof<argument_list pos:line="18" pos:column="38">(<argument><expr><operator pos:line="18" pos:column="39">*<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">vl<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="45"/></decl_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">vl<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">==<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">NULL<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18"> <block pos:line="19" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"luaC_tovaluelist: calloc failed"<pos:position pos:line="20" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* Push initial key */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">lua_pushnil<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">L<pos:position pos:line="25" pos:column="16"/></name></expr></argument>)<pos:position pos:line="25" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
  <while pos:line="26" pos:column="3">while <condition pos:line="26" pos:column="9">(<expr><call><name pos:line="26" pos:column="10">lua_next<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">L<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">idx<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call> <operator pos:line="26" pos:column="27">!=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr>)<pos:position pos:line="26" pos:column="32"/></condition> <block pos:line="26" pos:column="33">{
    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">char<pos:position pos:line="27" pos:column="15"/></name> <modifier pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></modifier></type><name pos:line="27" pos:column="17">key<pos:position pos:line="27" pos:column="20"/></name> <init pos:line="27" pos:column="21">= <expr><call><name pos:line="27" pos:column="23">lua_tostring<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">L<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="39">-<pos:position pos:line="27" pos:column="40"/></operator><literal type="number" pos:line="27" pos:column="40">2<pos:position pos:line="27" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="43"/></decl_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">key<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">==<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21"> <block pos:line="29" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">DEBUG<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"luaC_tovaluelist: Ignoring non-string key."<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">strcasecmp<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><literal type="string" pos:line="31" pos:column="27">"host"<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="35">key<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call> <operator pos:line="31" pos:column="40">==<pos:position pos:line="31" pos:column="42"/></operator> <literal type="number" pos:line="31" pos:column="43">0<pos:position pos:line="31" pos:column="44"/></literal></expr>)<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="7">luaC_tostringbuffer<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">L<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="30">-<pos:position pos:line="32" pos:column="31"/></operator><literal type="number" pos:line="32" pos:column="31">1<pos:position pos:line="32" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="34">vl<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">-&gt;<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="38">host<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="44">sizeof<argument_list pos:line="32" pos:column="50">(<argument><expr><name><name pos:line="32" pos:column="51">vl<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">-&gt;<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="55">host<pos:position pos:line="32" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="33" pos:column="5">else <if pos:line="33" pos:column="10">if <condition pos:line="33" pos:column="13">(<expr><call><name pos:line="33" pos:column="14">strcasecmp<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><literal type="string" pos:line="33" pos:column="25">"plugin"<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="35">key<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call> <operator pos:line="33" pos:column="40">==<pos:position pos:line="33" pos:column="42"/></operator> <literal type="number" pos:line="33" pos:column="43">0<pos:position pos:line="33" pos:column="44"/></literal></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">luaC_tostringbuffer<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">L<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="30">-<pos:position pos:line="34" pos:column="31"/></operator><literal type="number" pos:line="34" pos:column="31">1<pos:position pos:line="34" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="34">vl<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">plugin<pos:position pos:line="34" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="46">sizeof<argument_list pos:line="34" pos:column="52">(<argument><expr><name><name pos:line="34" pos:column="53">vl<pos:position pos:line="34" pos:column="55"/></name><operator pos:line="34" pos:column="55">-&gt;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="57">plugin<pos:position pos:line="34" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if <condition pos:line="35" pos:column="13">(<expr><call><name pos:line="35" pos:column="14">strcasecmp<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><literal type="string" pos:line="35" pos:column="25">"plugin_instance"<pos:position pos:line="35" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">key<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call> <operator pos:line="35" pos:column="49">==<pos:position pos:line="35" pos:column="51"/></operator> <literal type="number" pos:line="35" pos:column="52">0<pos:position pos:line="35" pos:column="53"/></literal></expr>)<pos:position pos:line="35" pos:column="54"/></condition><then pos:line="35" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="7">luaC_tostringbuffer<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">L<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="30">-<pos:position pos:line="36" pos:column="31"/></operator><literal type="number" pos:line="36" pos:column="31">1<pos:position pos:line="36" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="34">vl<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">plugin_instance<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>,
                          <argument><expr><sizeof pos:line="37" pos:column="27">sizeof<argument_list pos:line="37" pos:column="33">(<argument><expr><name><name pos:line="37" pos:column="34">vl<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">plugin_instance<pos:position pos:line="37" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="38" pos:column="5">else <if pos:line="38" pos:column="10">if <condition pos:line="38" pos:column="13">(<expr><call><name pos:line="38" pos:column="14">strcasecmp<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><literal type="string" pos:line="38" pos:column="25">"type"<pos:position pos:line="38" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">key<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call> <operator pos:line="38" pos:column="38">==<pos:position pos:line="38" pos:column="40"/></operator> <literal type="number" pos:line="38" pos:column="41">0<pos:position pos:line="38" pos:column="42"/></literal></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="7">luaC_tostringbuffer<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><name pos:line="39" pos:column="27">L<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="30">-<pos:position pos:line="39" pos:column="31"/></operator><literal type="number" pos:line="39" pos:column="31">1<pos:position pos:line="39" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="34">vl<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">type<pos:position pos:line="39" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="44">sizeof<argument_list pos:line="39" pos:column="50">(<argument><expr><name><name pos:line="39" pos:column="51">vl<pos:position pos:line="39" pos:column="53"/></name><operator pos:line="39" pos:column="53">-&gt;<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="55">type<pos:position pos:line="39" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="62"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><call><name pos:line="40" pos:column="14">strcasecmp<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><literal type="string" pos:line="40" pos:column="25">"type_instance"<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">key<pos:position pos:line="40" pos:column="45"/></name></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call> <operator pos:line="40" pos:column="47">==<pos:position pos:line="40" pos:column="49"/></operator> <literal type="number" pos:line="40" pos:column="50">0<pos:position pos:line="40" pos:column="51"/></literal></expr>)<pos:position pos:line="40" pos:column="52"/></condition><then pos:line="40" pos:column="52">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">luaC_tostringbuffer<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">L<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="30">-<pos:position pos:line="41" pos:column="31"/></operator><literal type="number" pos:line="41" pos:column="31">1<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="34">vl<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">type_instance<pos:position pos:line="41" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="53">sizeof<argument_list pos:line="41" pos:column="59">(<argument><expr><name><name pos:line="41" pos:column="60">vl<pos:position pos:line="41" pos:column="62"/></name><operator pos:line="41" pos:column="62">-&gt;<pos:position pos:line="41" pos:column="67"/></operator><name pos:line="41" pos:column="64">type_instance<pos:position pos:line="41" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><call><name pos:line="42" pos:column="14">strcasecmp<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><literal type="string" pos:line="42" pos:column="25">"time"<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="33">key<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call> <operator pos:line="42" pos:column="38">==<pos:position pos:line="42" pos:column="40"/></operator> <literal type="number" pos:line="42" pos:column="41">0<pos:position pos:line="42" pos:column="42"/></literal></expr>)<pos:position pos:line="42" pos:column="43"/></condition><then pos:line="42" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="43" pos:column="7">vl<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">-&gt;<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="11">time<pos:position pos:line="43" pos:column="15"/></name></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">luaC_tocdtime<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">L<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="35">-<pos:position pos:line="43" pos:column="36"/></operator><literal type="number" pos:line="43" pos:column="36">1<pos:position pos:line="43" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><call><name pos:line="44" pos:column="14">strcasecmp<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><literal type="string" pos:line="44" pos:column="25">"interval"<pos:position pos:line="44" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">key<pos:position pos:line="44" pos:column="40"/></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call> <operator pos:line="44" pos:column="42">==<pos:position pos:line="44" pos:column="44"/></operator> <literal type="number" pos:line="44" pos:column="45">0<pos:position pos:line="44" pos:column="46"/></literal></expr>)<pos:position pos:line="44" pos:column="47"/></condition><then pos:line="44" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="7">vl<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">interval<pos:position pos:line="45" pos:column="19"/></name></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <call><name pos:line="45" pos:column="22">luaC_tocdtime<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">L<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="39">-<pos:position pos:line="45" pos:column="40"/></operator><literal type="number" pos:line="45" pos:column="40">1<pos:position pos:line="45" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">(<expr><call><name pos:line="46" pos:column="14">strcasecmp<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><literal type="string" pos:line="46" pos:column="25">"values"<pos:position pos:line="46" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">key<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call> <operator pos:line="46" pos:column="40">==<pos:position pos:line="46" pos:column="42"/></operator> <literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr>)<pos:position pos:line="46" pos:column="45"/></condition><then pos:line="46" pos:column="45"> <block pos:line="46" pos:column="46">{
      <comment type="block" pos:line="47" pos:column="7">/* This key is not handled here, because we have to assure "type" is read
       * first. */</comment>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif> <else pos:line="49" pos:column="7">else <block pos:line="49" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">DEBUG<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="string" pos:line="50" pos:column="13">"luaC_tovaluelist: Ignoring unknown key \"%s\"."<pos:position pos:line="50" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="63">key<pos:position pos:line="50" pos:column="66"/></name></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="53" pos:column="5">/* Pop the value */</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">lua_pop<pos:position pos:line="54" pos:column="12"/></name><argument_list pos:line="54" pos:column="12">(<argument><expr><name pos:line="54" pos:column="13">L<pos:position pos:line="54" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="16">1<pos:position pos:line="54" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></while>

  <decl_stmt><decl><type><specifier pos:line="57" pos:column="3">const<pos:position pos:line="57" pos:column="8"/></specifier> <name pos:line="57" pos:column="9">data_set_t<pos:position pos:line="57" pos:column="19"/></name> <modifier pos:line="57" pos:column="20">*<pos:position pos:line="57" pos:column="21"/></modifier></type><name pos:line="57" pos:column="21">ds<pos:position pos:line="57" pos:column="23"/></name> <init pos:line="57" pos:column="24">= <expr><call><name pos:line="57" pos:column="26">plugin_get_ds<pos:position pos:line="57" pos:column="39"/></name><argument_list pos:line="57" pos:column="39">(<argument><expr><name><name pos:line="57" pos:column="40">vl<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">type<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="50"/></decl_stmt>
  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><name pos:line="58" pos:column="7">ds<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">==<pos:position pos:line="58" pos:column="12"/></operator> <name pos:line="58" pos:column="13">NULL<pos:position pos:line="58" pos:column="17"/></name></expr>)<pos:position pos:line="58" pos:column="18"/></condition><then pos:line="58" pos:column="18"> <block pos:line="58" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">INFO<pos:position pos:line="59" pos:column="9"/></name><argument_list pos:line="59" pos:column="9">(<argument><expr><literal type="string" pos:line="59" pos:column="10">"utils_lua: Unable to lookup type \"%s\"."<pos:position pos:line="59" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="54">vl<pos:position pos:line="59" pos:column="56"/></name><operator pos:line="59" pos:column="56">-&gt;<pos:position pos:line="59" pos:column="61"/></operator><name pos:line="59" pos:column="58">type<pos:position pos:line="59" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">sfree<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">vl<pos:position pos:line="60" pos:column="13"/></name></expr></argument>)<pos:position pos:line="60" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt>
    <return pos:line="61" pos:column="5">return <expr><name pos:line="61" pos:column="12">NULL<pos:position pos:line="61" pos:column="16"/></name></expr>;<pos:position pos:line="61" pos:column="17"/></return>
  }<pos:position pos:line="62" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="64" pos:column="3">int<pos:position pos:line="64" pos:column="6"/></name></type> <name pos:line="64" pos:column="7">status<pos:position pos:line="64" pos:column="13"/></name> <init pos:line="64" pos:column="14">= <expr><call><name pos:line="64" pos:column="16">ltoc_table_values<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">L<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="37">idx<pos:position pos:line="64" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="42">ds<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">vl<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="50"/></decl_stmt>
  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name pos:line="65" pos:column="7">status<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">!=<pos:position pos:line="65" pos:column="16"/></operator> <literal type="number" pos:line="65" pos:column="17">0<pos:position pos:line="65" pos:column="18"/></literal></expr>)<pos:position pos:line="65" pos:column="19"/></condition><then pos:line="65" pos:column="19"> <block pos:line="65" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">WARNING<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><literal type="string" pos:line="66" pos:column="13">"utils_lua: ltoc_table_values failed."<pos:position pos:line="66" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">sfree<pos:position pos:line="67" pos:column="10"/></name><argument_list pos:line="67" pos:column="10">(<argument><expr><name pos:line="67" pos:column="11">vl<pos:position pos:line="67" pos:column="13"/></name></expr></argument>)<pos:position pos:line="67" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="15"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">NULL<pos:position pos:line="68" pos:column="16"/></name></expr>;<pos:position pos:line="68" pos:column="17"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

<cpp:if pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">if<pos:position pos:line="71" pos:column="4"/></cpp:directive> <expr><name pos:line="71" pos:column="5">COLLECT_DEBUG<pos:position pos:line="71" pos:column="18"/></name></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">assert<pos:position pos:line="72" pos:column="9"/></name><argument_list pos:line="72" pos:column="9">(<argument><expr><name pos:line="72" pos:column="10">stack_top_before<pos:position pos:line="72" pos:column="26"/></name> <operator pos:line="72" pos:column="27">==<pos:position pos:line="72" pos:column="29"/></operator> <call><name pos:line="72" pos:column="30">lua_gettop<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name pos:line="72" pos:column="41">L<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="74" pos:column="3">return <expr><name pos:line="74" pos:column="10">vl<pos:position pos:line="74" pos:column="12"/></name></expr>;<pos:position pos:line="74" pos:column="13"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
