<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_468_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">cu_mount_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">cu_mount_getfsstat<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">void<pos:position pos:line="1" pos:column="44"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">HAVE_GETVFSSTAT<pos:position pos:line="3" pos:column="20"/></name></expr></cpp:if>
<cpp:define pos:line="4" pos:column="1">#  <cpp:directive pos:line="4" pos:column="4">define<pos:position pos:line="4" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="11">STRUCT_STATFS<pos:position pos:line="4" pos:column="24"/></name></cpp:macro> <cpp:value pos:line="4" pos:column="25">struct statvfs<pos:position pos:line="4" pos:column="39"/></cpp:value></cpp:define>
<cpp:define pos:line="5" pos:column="1">#  <cpp:directive pos:line="5" pos:column="4">define<pos:position pos:line="5" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="5" pos:column="11">CMD_STATFS<pos:position pos:line="5" pos:column="21"/></name></cpp:macro>    <cpp:value pos:line="5" pos:column="25">getvfsstat<pos:position pos:line="5" pos:column="35"/></cpp:value></cpp:define>
<cpp:define pos:line="6" pos:column="1">#  <cpp:directive pos:line="6" pos:column="4">define<pos:position pos:line="6" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="6" pos:column="11">FLAGS_STATFS<pos:position pos:line="6" pos:column="23"/></name></cpp:macro>  <cpp:value pos:line="6" pos:column="25">ST_NOWAIT<pos:position pos:line="6" pos:column="34"/></cpp:value></cpp:define>
<comment type="block" pos:line="7" pos:column="1">/* #endif HAVE_GETVFSSTAT */</comment>
<cpp:elif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">elif<pos:position pos:line="8" pos:column="6"/></cpp:directive> <expr><name pos:line="8" pos:column="7">HAVE_GETFSSTAT<pos:position pos:line="8" pos:column="21"/></name></expr></cpp:elif>
<cpp:define pos:line="9" pos:column="1">#  <cpp:directive pos:line="9" pos:column="4">define<pos:position pos:line="9" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="11">STRUCT_STATFS<pos:position pos:line="9" pos:column="24"/></name></cpp:macro> <cpp:value pos:line="9" pos:column="25">struct statfs<pos:position pos:line="9" pos:column="38"/></cpp:value></cpp:define>
<cpp:define pos:line="10" pos:column="1">#  <cpp:directive pos:line="10" pos:column="4">define<pos:position pos:line="10" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="11">CMD_STATFS<pos:position pos:line="10" pos:column="21"/></name></cpp:macro>    <cpp:value pos:line="10" pos:column="25">getfsstat<pos:position pos:line="10" pos:column="34"/></cpp:value></cpp:define>
<cpp:define pos:line="11" pos:column="1">#  <cpp:directive pos:line="11" pos:column="4">define<pos:position pos:line="11" pos:column="10"/></cpp:directive> <cpp:macro><name pos:line="11" pos:column="11">FLAGS_STATFS<pos:position pos:line="11" pos:column="23"/></name></cpp:macro>  <cpp:value pos:line="11" pos:column="25">MNT_NOWAIT<pos:position pos:line="11" pos:column="35"/></cpp:value></cpp:define>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="12" pos:column="8">/* HAVE_GETFSSTAT */</comment>

	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">bufsize<pos:position pos:line="14" pos:column="20"/></name></decl>;<pos:position pos:line="14" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">STRUCT_STATFS<pos:position pos:line="15" pos:column="22"/></name> <modifier pos:line="15" pos:column="23">*<pos:position pos:line="15" pos:column="24"/></modifier></type><name pos:line="15" pos:column="24">buf<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">num<pos:position pos:line="17" pos:column="16"/></name></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">i<pos:position pos:line="18" pos:column="14"/></name></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="20" pos:column="9">cu_mount_t<pos:position pos:line="20" pos:column="19"/></name> <modifier pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></modifier></type><name pos:line="20" pos:column="21">first<pos:position pos:line="20" pos:column="26"/></name> <init pos:line="20" pos:column="27">= <expr><name pos:line="20" pos:column="29">NULL<pos:position pos:line="20" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">cu_mount_t<pos:position pos:line="21" pos:column="19"/></name> <modifier pos:line="21" pos:column="20">*<pos:position pos:line="21" pos:column="21"/></modifier></type><name pos:line="21" pos:column="21">last<pos:position pos:line="21" pos:column="25"/></name>  <init pos:line="21" pos:column="27">= <expr><name pos:line="21" pos:column="29">NULL<pos:position pos:line="21" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="34"/></decl_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">cu_mount_t<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><operator pos:line="22" pos:column="21">new<pos:position pos:line="22" pos:column="24"/></operator>   <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">NULL<pos:position pos:line="22" pos:column="33"/></name></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/* Get the number of mounted file systems */</comment>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">bufsize<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">CMD_STATFS<pos:position pos:line="25" pos:column="34"/></name> <argument_list pos:line="25" pos:column="35">(<argument><expr><name pos:line="25" pos:column="36">NULL<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="42">0<pos:position pos:line="25" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">FLAGS_STATFS<pos:position pos:line="25" pos:column="57"/></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call><operator pos:line="25" pos:column="58">)<pos:position pos:line="25" pos:column="59"/></operator> <operator pos:line="25" pos:column="60">&lt;<pos:position pos:line="25" pos:column="64"/></operator> <literal type="number" pos:line="25" pos:column="62">1<pos:position pos:line="25" pos:column="63"/></literal></expr>)<pos:position pos:line="25" pos:column="64"/></condition><then pos:line="25" pos:column="64">
	<block pos:line="26" pos:column="9">{
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">COLLECT_DEBUG<pos:position pos:line="27" pos:column="18"/></name></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name></type> <name><name pos:line="28" pos:column="22">errbuf<pos:position pos:line="28" pos:column="28"/></name><index pos:line="28" pos:column="28">[<expr><literal type="number" pos:line="28" pos:column="29">1024<pos:position pos:line="28" pos:column="33"/></literal></expr>]<pos:position pos:line="28" pos:column="34"/></index></name></decl>;<pos:position pos:line="28" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">DEBUG<pos:position pos:line="29" pos:column="22"/></name> <argument_list pos:line="29" pos:column="23">(<argument><expr><literal type="string" pos:line="29" pos:column="24">"utils_mount: getv?fsstat failed: %s"<pos:position pos:line="29" pos:column="61"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="30" pos:column="33">sstrerror<pos:position pos:line="30" pos:column="42"/></name> <argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">errno<pos:position pos:line="30" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">errbuf<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="59">sizeof <argument_list pos:line="30" pos:column="66">(<argument><expr><name pos:line="30" pos:column="67">errbuf<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="31" pos:column="8">/* COLLECT_DEBUG */</comment>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">(<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">NULL<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">)<pos:position pos:line="32" pos:column="30"/></operator></expr>;<pos:position pos:line="32" pos:column="31"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">buf<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <operator pos:line="35" pos:column="20">(<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">STRUCT_STATFS<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">*<pos:position pos:line="35" pos:column="36"/></operator><operator pos:line="35" pos:column="36">)<pos:position pos:line="35" pos:column="37"/></operator> <call><name pos:line="35" pos:column="38">malloc<pos:position pos:line="35" pos:column="44"/></name> <argument_list pos:line="35" pos:column="45">(<argument><expr><name pos:line="35" pos:column="46">bufsize<pos:position pos:line="35" pos:column="53"/></name> <operator pos:line="35" pos:column="54">*<pos:position pos:line="35" pos:column="55"/></operator> <sizeof pos:line="35" pos:column="56">sizeof <argument_list pos:line="35" pos:column="63">(<argument><expr><name pos:line="35" pos:column="64">STRUCT_STATFS<pos:position pos:line="35" pos:column="77"/></name></expr></argument>)<pos:position pos:line="35" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="79"/></argument_list></call><operator pos:line="35" pos:column="79">)<pos:position pos:line="35" pos:column="80"/></operator>
			<operator pos:line="36" pos:column="25">==<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="28">NULL<pos:position pos:line="36" pos:column="32"/></name></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33">
		<block type="pseudo"><return pos:line="37" pos:column="17">return <expr><operator pos:line="37" pos:column="24">(<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">NULL<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">)<pos:position pos:line="37" pos:column="30"/></operator></expr>;<pos:position pos:line="37" pos:column="31"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">memset<pos:position pos:line="38" pos:column="15"/></name> <argument_list pos:line="38" pos:column="16">(<argument><expr><name pos:line="38" pos:column="17">buf<pos:position pos:line="38" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="22">'\0'<pos:position pos:line="38" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">bufsize<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></operator> <sizeof pos:line="38" pos:column="38">sizeof <argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">STRUCT_STATFS<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>

	<comment type="block" pos:line="40" pos:column="9">/* The bufsize needs to be passed in bytes. Really. This is not in the
	 * manpage.. -octo */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">(<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">num<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <call><name pos:line="42" pos:column="20">CMD_STATFS<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">buf<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">bufsize<pos:position pos:line="42" pos:column="44"/></name> <operator pos:line="42" pos:column="45">*<pos:position pos:line="42" pos:column="46"/></operator> <sizeof pos:line="42" pos:column="47">sizeof <argument_list pos:line="42" pos:column="54">(<argument><expr><name pos:line="42" pos:column="55">STRUCT_STATFS<pos:position pos:line="42" pos:column="68"/></name></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="42" pos:column="71">FLAGS_STATFS<pos:position pos:line="42" pos:column="83"/></name></expr></argument>)<pos:position pos:line="42" pos:column="84"/></argument_list></call><operator pos:line="42" pos:column="84">)<pos:position pos:line="42" pos:column="85"/></operator> <operator pos:line="42" pos:column="86">&lt;<pos:position pos:line="42" pos:column="90"/></operator> <literal type="number" pos:line="42" pos:column="88">1<pos:position pos:line="42" pos:column="89"/></literal></expr>)<pos:position pos:line="42" pos:column="90"/></condition><then pos:line="42" pos:column="90">
	<block pos:line="43" pos:column="9">{
<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">COLLECT_DEBUG<pos:position pos:line="44" pos:column="18"/></name></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">char<pos:position pos:line="45" pos:column="21"/></name></type> <name><name pos:line="45" pos:column="22">errbuf<pos:position pos:line="45" pos:column="28"/></name><index pos:line="45" pos:column="28">[<expr><literal type="number" pos:line="45" pos:column="29">1024<pos:position pos:line="45" pos:column="33"/></literal></expr>]<pos:position pos:line="45" pos:column="34"/></index></name></decl>;<pos:position pos:line="45" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">DEBUG<pos:position pos:line="46" pos:column="22"/></name> <argument_list pos:line="46" pos:column="23">(<argument><expr><literal type="string" pos:line="46" pos:column="24">"utils_mount: getv?fsstat failed: %s"<pos:position pos:line="46" pos:column="61"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="47" pos:column="33">sstrerror<pos:position pos:line="47" pos:column="42"/></name> <argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">errno<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">errbuf<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="59">sizeof <argument_list pos:line="47" pos:column="66">(<argument><expr><name pos:line="47" pos:column="67">errbuf<pos:position pos:line="47" pos:column="73"/></name></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="48" pos:column="8">/* COLLECT_DEBUG */</comment>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">free<pos:position pos:line="49" pos:column="21"/></name> <argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">buf<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
		<return pos:line="50" pos:column="17">return <expr><operator pos:line="50" pos:column="24">(<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">NULL<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator></expr>;<pos:position pos:line="50" pos:column="31"/></return>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">i<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr>;<pos:position pos:line="53" pos:column="20"/></init> <condition><expr><name pos:line="53" pos:column="21">i<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">&lt;<pos:position pos:line="53" pos:column="27"/></operator> <name pos:line="53" pos:column="25">num<pos:position pos:line="53" pos:column="28"/></name></expr>;<pos:position pos:line="53" pos:column="29"/></condition> <incr><expr><name pos:line="53" pos:column="30">i<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">++<pos:position pos:line="53" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="34"/></control>
	<block pos:line="54" pos:column="9">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><operator pos:line="55" pos:column="21">(<pos:position pos:line="55" pos:column="22"/></operator><operator pos:line="55" pos:column="22">new<pos:position pos:line="55" pos:column="25"/></operator> <operator pos:line="55" pos:column="26">=<pos:position pos:line="55" pos:column="27"/></operator> <call><name pos:line="55" pos:column="28">malloc<pos:position pos:line="55" pos:column="34"/></name> <argument_list pos:line="55" pos:column="35">(<argument><expr><sizeof pos:line="55" pos:column="36">sizeof <argument_list pos:line="55" pos:column="43">(<argument><expr><name pos:line="55" pos:column="44">cu_mount_t<pos:position pos:line="55" pos:column="54"/></name></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call><operator pos:line="55" pos:column="56">)<pos:position pos:line="55" pos:column="57"/></operator> <operator pos:line="55" pos:column="58">==<pos:position pos:line="55" pos:column="60"/></operator> <name pos:line="55" pos:column="61">NULL<pos:position pos:line="55" pos:column="65"/></name></expr>)<pos:position pos:line="55" pos:column="66"/></condition><then pos:line="55" pos:column="66">
			<block type="pseudo"><break pos:line="56" pos:column="25">break;<pos:position pos:line="56" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">memset<pos:position pos:line="57" pos:column="23"/></name> <argument_list pos:line="57" pos:column="24">(<argument><expr><operator pos:line="57" pos:column="25">new<pos:position pos:line="57" pos:column="28"/></operator></expr></argument>, <argument><expr><literal type="char" pos:line="57" pos:column="30">'\0'<pos:position pos:line="57" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="36">sizeof <argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">cu_mount_t<pos:position pos:line="57" pos:column="54"/></name></expr></argument>)<pos:position pos:line="57" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="57"/></expr_stmt>
		
		<comment type="block" pos:line="59" pos:column="17">/* Copy values from `struct mnttab' */</comment>
		<expr_stmt><expr><operator pos:line="60" pos:column="17">new<pos:position pos:line="60" pos:column="20"/></operator><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">dir<pos:position pos:line="60" pos:column="25"/></name>         <operator pos:line="60" pos:column="34">=<pos:position pos:line="60" pos:column="35"/></operator> <call><name pos:line="60" pos:column="36">sstrdup<pos:position pos:line="60" pos:column="43"/></name> <argument_list pos:line="60" pos:column="44">(<argument><expr><name><name pos:line="60" pos:column="45">buf<pos:position pos:line="60" pos:column="48"/></name><index pos:line="60" pos:column="48">[<expr><name pos:line="60" pos:column="49">i<pos:position pos:line="60" pos:column="50"/></name></expr>]<pos:position pos:line="60" pos:column="51"/></index></name><operator pos:line="60" pos:column="51">.<pos:position pos:line="60" pos:column="52"/></operator><name pos:line="60" pos:column="52">f_mntonname<pos:position pos:line="60" pos:column="63"/></name></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="61" pos:column="17">new<pos:position pos:line="61" pos:column="20"/></operator><operator pos:line="61" pos:column="20">-&gt;<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="22">spec_device<pos:position pos:line="61" pos:column="33"/></name> <operator pos:line="61" pos:column="34">=<pos:position pos:line="61" pos:column="35"/></operator> <call><name pos:line="61" pos:column="36">sstrdup<pos:position pos:line="61" pos:column="43"/></name> <argument_list pos:line="61" pos:column="44">(<argument><expr><name><name pos:line="61" pos:column="45">buf<pos:position pos:line="61" pos:column="48"/></name><index pos:line="61" pos:column="48">[<expr><name pos:line="61" pos:column="49">i<pos:position pos:line="61" pos:column="50"/></name></expr>]<pos:position pos:line="61" pos:column="51"/></index></name><operator pos:line="61" pos:column="51">.<pos:position pos:line="61" pos:column="52"/></operator><name pos:line="61" pos:column="52">f_mntfromname<pos:position pos:line="61" pos:column="65"/></name></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="62" pos:column="17">new<pos:position pos:line="62" pos:column="20"/></operator><operator pos:line="62" pos:column="20">-&gt;<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="22">type<pos:position pos:line="62" pos:column="26"/></name>        <operator pos:line="62" pos:column="34">=<pos:position pos:line="62" pos:column="35"/></operator> <call><name pos:line="62" pos:column="36">sstrdup<pos:position pos:line="62" pos:column="43"/></name> <argument_list pos:line="62" pos:column="44">(<argument><expr><name><name pos:line="62" pos:column="45">buf<pos:position pos:line="62" pos:column="48"/></name><index pos:line="62" pos:column="48">[<expr><name pos:line="62" pos:column="49">i<pos:position pos:line="62" pos:column="50"/></name></expr>]<pos:position pos:line="62" pos:column="51"/></index></name><operator pos:line="62" pos:column="51">.<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="52">f_fstypename<pos:position pos:line="62" pos:column="64"/></name></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="63" pos:column="17">new<pos:position pos:line="63" pos:column="20"/></operator><operator pos:line="63" pos:column="20">-&gt;<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="22">options<pos:position pos:line="63" pos:column="29"/></name>     <operator pos:line="63" pos:column="34">=<pos:position pos:line="63" pos:column="35"/></operator> <name pos:line="63" pos:column="36">NULL<pos:position pos:line="63" pos:column="40"/></name></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="64" pos:column="17">new<pos:position pos:line="64" pos:column="20"/></operator><operator pos:line="64" pos:column="20">-&gt;<pos:position pos:line="64" pos:column="25"/></operator><name pos:line="64" pos:column="22">device<pos:position pos:line="64" pos:column="28"/></name>      <operator pos:line="64" pos:column="34">=<pos:position pos:line="64" pos:column="35"/></operator> <call><name pos:line="64" pos:column="36">get_device_name<pos:position pos:line="64" pos:column="51"/></name> <argument_list pos:line="64" pos:column="52">(<argument><expr><operator pos:line="64" pos:column="53">new<pos:position pos:line="64" pos:column="56"/></operator><operator pos:line="64" pos:column="56">-&gt;<pos:position pos:line="64" pos:column="61"/></operator><name pos:line="64" pos:column="58">options<pos:position pos:line="64" pos:column="65"/></name></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="65" pos:column="17">new<pos:position pos:line="65" pos:column="20"/></operator><operator pos:line="65" pos:column="20">-&gt;<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="22">next<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">=<pos:position pos:line="65" pos:column="28"/></operator> <name pos:line="65" pos:column="29">NULL<pos:position pos:line="65" pos:column="33"/></name></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>

		<comment type="block" pos:line="67" pos:column="17">/* Append to list */</comment>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">first<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">==<pos:position pos:line="68" pos:column="29"/></operator> <name pos:line="68" pos:column="30">NULL<pos:position pos:line="68" pos:column="34"/></name></expr>)<pos:position pos:line="68" pos:column="35"/></condition><then pos:line="68" pos:column="35">
		<block pos:line="69" pos:column="17">{
			<expr_stmt><expr><name pos:line="70" pos:column="25">first<pos:position pos:line="70" pos:column="30"/></name> <operator pos:line="70" pos:column="31">=<pos:position pos:line="70" pos:column="32"/></operator> <operator pos:line="70" pos:column="33">new<pos:position pos:line="70" pos:column="36"/></operator></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="71" pos:column="25">last<pos:position pos:line="71" pos:column="29"/></name>  <operator pos:line="71" pos:column="31">=<pos:position pos:line="71" pos:column="32"/></operator> <operator pos:line="71" pos:column="33">new<pos:position pos:line="71" pos:column="36"/></operator></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="72" pos:column="18"/></block></then>
		<else pos:line="73" pos:column="17">else
		<block pos:line="74" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="75" pos:column="25">last<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">next<pos:position pos:line="75" pos:column="35"/></name></name> <operator pos:line="75" pos:column="36">=<pos:position pos:line="75" pos:column="37"/></operator> <operator pos:line="75" pos:column="38">new<pos:position pos:line="75" pos:column="41"/></operator></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="76" pos:column="25">last<pos:position pos:line="76" pos:column="29"/></name>       <operator pos:line="76" pos:column="36">=<pos:position pos:line="76" pos:column="37"/></operator> <operator pos:line="76" pos:column="38">new<pos:position pos:line="76" pos:column="41"/></operator></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></else></if>
	}<pos:position pos:line="78" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">free<pos:position pos:line="80" pos:column="13"/></name> <argument_list pos:line="80" pos:column="14">(<argument><expr><name pos:line="80" pos:column="15">buf<pos:position pos:line="80" pos:column="18"/></name></expr></argument>)<pos:position pos:line="80" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="20"/></expr_stmt>

	<return pos:line="82" pos:column="9">return <expr><operator pos:line="82" pos:column="16">(<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="17">first<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">)<pos:position pos:line="82" pos:column="23"/></operator></expr>;<pos:position pos:line="82" pos:column="24"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
