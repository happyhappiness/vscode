<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1531_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">ceph_cb_number<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">void<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">ctx<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">number_val<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">yajl_len_t<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">number_len<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">yajl_struct<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">state<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">(<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">yajl_struct<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></operator><operator pos:line="4" pos:column="39">)<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="41">ctx<pos:position pos:line="4" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">buffer<pos:position pos:line="5" pos:column="16"/></name><index pos:line="5" pos:column="16">[<expr><name pos:line="5" pos:column="17">number_len<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">+<pos:position pos:line="5" pos:column="28"/></operator><literal type="number" pos:line="5" pos:column="28">1<pos:position pos:line="5" pos:column="29"/></literal></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">key<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">2<pos:position pos:line="6" pos:column="15"/></literal> <operator pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">DATA_MAX_NAME_LEN<pos:position pos:line="6" pos:column="35"/></name></expr>]<pos:position pos:line="6" pos:column="36"/></index></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">_Bool<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">latency_type<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">i<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memcpy<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">buffer<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">number_val<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">number_len<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">buffer<pos:position pos:line="12" pos:column="11"/></name><index pos:line="12" pos:column="11">[<expr><sizeof pos:line="12" pos:column="12">sizeof<argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">buffer<pos:position pos:line="12" pos:column="25"/></name></expr></argument>)<pos:position pos:line="12" pos:column="26"/></argument_list></sizeof> <operator pos:line="12" pos:column="27">-<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="29">1<pos:position pos:line="12" pos:column="30"/></literal></expr>]<pos:position pos:line="12" pos:column="31"/></index></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="34">0<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">memset<pos:position pos:line="14" pos:column="11"/></name> <argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">key<pos:position pos:line="14" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="21">sizeof <argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">key<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><expr><name pos:line="15" pos:column="10">i<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr>;<pos:position pos:line="15" pos:column="16"/></init> <condition><expr><name pos:line="15" pos:column="17">i<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">&lt;<pos:position pos:line="15" pos:column="23"/></operator> <name><name pos:line="15" pos:column="21">state<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">depth<pos:position pos:line="15" pos:column="33"/></name></name></expr>;<pos:position pos:line="15" pos:column="34"/></condition> <incr><expr><name pos:line="15" pos:column="35">i<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">++<pos:position pos:line="15" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="39"/></control>
    <block pos:line="16" pos:column="5">{
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">state<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">stack<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><name pos:line="17" pos:column="26">i<pos:position pos:line="17" pos:column="27"/></name></expr>]<pos:position pos:line="17" pos:column="28"/></index></name> <operator pos:line="17" pos:column="29">==<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">NULL<pos:position pos:line="17" pos:column="36"/></name></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37">
            <block type="pseudo"><continue pos:line="18" pos:column="13">continue;<pos:position pos:line="18" pos:column="22"/></continue></block></then></if>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">strlen<pos:position pos:line="20" pos:column="19"/></name> <argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">key<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call> <operator pos:line="20" pos:column="26">!=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr>)<pos:position pos:line="20" pos:column="31"/></condition><then pos:line="20" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="13">BUFFER_ADD<pos:position pos:line="21" pos:column="23"/></name> <argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">key<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="30">"."<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">BUFFER_ADD<pos:position pos:line="22" pos:column="19"/></name> <argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">key<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="26">state<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">-&gt;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="33">stack<pos:position pos:line="22" pos:column="38"/></name><index pos:line="22" pos:column="38">[<expr><name pos:line="22" pos:column="39">i<pos:position pos:line="22" pos:column="40"/></name></expr>]<pos:position pos:line="22" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></for>

    <comment type="block" pos:line="25" pos:column="5">/* Special case for latency metrics. */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><call><name pos:line="26" pos:column="10">strcmp<pos:position pos:line="26" pos:column="16"/></name> <argument_list pos:line="26" pos:column="17">(<argument><expr><literal type="string" pos:line="26" pos:column="18">"avgcount"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="30">state<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">key<pos:position pos:line="26" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call> <operator pos:line="26" pos:column="42">==<pos:position pos:line="26" pos:column="44"/></operator> <literal type="number" pos:line="26" pos:column="45">0<pos:position pos:line="26" pos:column="46"/></literal><operator pos:line="26" pos:column="46">)<pos:position pos:line="26" pos:column="47"/></operator>
        <operator pos:line="27" pos:column="9">||<pos:position pos:line="27" pos:column="11"/></operator> <operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><call><name pos:line="27" pos:column="13">strcmp<pos:position pos:line="27" pos:column="19"/></name> <argument_list pos:line="27" pos:column="20">(<argument><expr><literal type="string" pos:line="27" pos:column="21">"sum"<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="28">state<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">key<pos:position pos:line="27" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call> <operator pos:line="27" pos:column="40">==<pos:position pos:line="27" pos:column="42"/></operator> <literal type="number" pos:line="27" pos:column="43">0<pos:position pos:line="27" pos:column="44"/></literal><operator pos:line="27" pos:column="44">)<pos:position pos:line="27" pos:column="45"/></operator></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46">
    <block pos:line="28" pos:column="5">{
        <expr_stmt><expr><name pos:line="29" pos:column="9">latency_type<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <literal type="number" pos:line="29" pos:column="24">1<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

        <comment type="block" pos:line="31" pos:column="9">/* Super-special case for filestore.journal_wr_bytes.avgcount: For
         * some reason, Ceph schema encodes this as a count/sum pair while all
         * other "Bytes" data (excluding used/capacity bytes for OSD space) uses
         * a single "Derive" type. To spare further confusion, keep this KPI as
         * the same type of other "Bytes". Instead of keeping an "average" or
         * "rate", use the "sum" in the pair and assign that to the derive
         * value. */</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">convert_special_metrics<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">&amp;&amp;<pos:position pos:line="38" pos:column="47"/></operator> <operator pos:line="38" pos:column="40">(<pos:position pos:line="38" pos:column="41"/></operator><name><name pos:line="38" pos:column="41">state<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">-&gt;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="48">depth<pos:position pos:line="38" pos:column="53"/></name></name> <operator pos:line="38" pos:column="54">&gt;=<pos:position pos:line="38" pos:column="59"/></operator> <literal type="number" pos:line="38" pos:column="57">2<pos:position pos:line="38" pos:column="58"/></literal><operator pos:line="38" pos:column="58">)<pos:position pos:line="38" pos:column="59"/></operator>
            <operator pos:line="39" pos:column="13">&amp;&amp;<pos:position pos:line="39" pos:column="23"/></operator> <operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><call><name pos:line="39" pos:column="17">strcmp<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><literal type="string" pos:line="39" pos:column="24">"filestore"<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="37">state<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">stack<pos:position pos:line="39" pos:column="49"/></name><index pos:line="39" pos:column="49">[<expr><name><name pos:line="39" pos:column="50">state<pos:position pos:line="39" pos:column="55"/></name><operator pos:line="39" pos:column="55">-&gt;<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="57">depth<pos:position pos:line="39" pos:column="62"/></name></name> <operator pos:line="39" pos:column="63">-<pos:position pos:line="39" pos:column="64"/></operator> <literal type="number" pos:line="39" pos:column="65">2<pos:position pos:line="39" pos:column="66"/></literal></expr>]<pos:position pos:line="39" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call> <operator pos:line="39" pos:column="69">==<pos:position pos:line="39" pos:column="71"/></operator> <literal type="number" pos:line="39" pos:column="72">0<pos:position pos:line="39" pos:column="73"/></literal><operator pos:line="39" pos:column="73">)<pos:position pos:line="39" pos:column="74"/></operator>
            <operator pos:line="40" pos:column="13">&amp;&amp;<pos:position pos:line="40" pos:column="23"/></operator> <operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><call><name pos:line="40" pos:column="17">strcmp<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="string" pos:line="40" pos:column="24">"journal_wr_bytes"<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="44">state<pos:position pos:line="40" pos:column="49"/></name><operator pos:line="40" pos:column="49">-&gt;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="51">stack<pos:position pos:line="40" pos:column="56"/></name><index pos:line="40" pos:column="56">[<expr><name><name pos:line="40" pos:column="57">state<pos:position pos:line="40" pos:column="62"/></name><operator pos:line="40" pos:column="62">-&gt;<pos:position pos:line="40" pos:column="67"/></operator><name pos:line="40" pos:column="64">depth<pos:position pos:line="40" pos:column="69"/></name></name> <operator pos:line="40" pos:column="70">-<pos:position pos:line="40" pos:column="71"/></operator> <literal type="number" pos:line="40" pos:column="72">1<pos:position pos:line="40" pos:column="73"/></literal></expr>]<pos:position pos:line="40" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="75"/></argument_list></call> <operator pos:line="40" pos:column="76">==<pos:position pos:line="40" pos:column="78"/></operator> <literal type="number" pos:line="40" pos:column="79">0<pos:position pos:line="40" pos:column="80"/></literal><operator pos:line="40" pos:column="80">)<pos:position pos:line="40" pos:column="81"/></operator>
            <operator pos:line="41" pos:column="13">&amp;&amp;<pos:position pos:line="41" pos:column="23"/></operator> <operator pos:line="41" pos:column="16">(<pos:position pos:line="41" pos:column="17"/></operator><call><name pos:line="41" pos:column="17">strcmp<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><literal type="string" pos:line="41" pos:column="24">"avgcount"<pos:position pos:line="41" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="36">state<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">key<pos:position pos:line="41" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call> <operator pos:line="41" pos:column="48">==<pos:position pos:line="41" pos:column="50"/></operator> <literal type="number" pos:line="41" pos:column="51">0<pos:position pos:line="41" pos:column="52"/></literal><operator pos:line="41" pos:column="52">)<pos:position pos:line="41" pos:column="53"/></operator></expr>)<pos:position pos:line="41" pos:column="54"/></condition><then pos:line="41" pos:column="54">
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">DEBUG<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><literal type="string" pos:line="43" pos:column="19">"ceph plugin: Skipping avgcount for filestore.JournalWrBytes"<pos:position pos:line="43" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="82"/></expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">CEPH_CB_CONTINUE<pos:position pos:line="44" pos:column="36"/></name></expr>;<pos:position pos:line="44" pos:column="37"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <else pos:line="47" pos:column="5">else <comment type="block" pos:line="47" pos:column="10">/* not a latency type */</comment>
    <block pos:line="48" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">BUFFER_ADD<pos:position pos:line="49" pos:column="19"/></name> <argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">key<pos:position pos:line="49" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="26">"."<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">BUFFER_ADD<pos:position pos:line="50" pos:column="19"/></name> <argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">key<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="26">state<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">-&gt;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="33">key<pos:position pos:line="50" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="53" pos:column="5">status<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator> <call><name><name pos:line="53" pos:column="14">state<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">handler<pos:position pos:line="53" pos:column="28"/></name></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name><name pos:line="53" pos:column="29">state<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">handler_arg<pos:position pos:line="53" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="49">buffer<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">key<pos:position pos:line="53" pos:column="60"/></name></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="62"/></expr_stmt>
    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><operator pos:line="54" pos:column="8">(<pos:position pos:line="54" pos:column="9"/></operator><name pos:line="54" pos:column="9">status<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">==<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">RETRY_AVGCOUNT<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">)<pos:position pos:line="54" pos:column="34"/></operator> <operator pos:line="54" pos:column="35">&amp;&amp;<pos:position pos:line="54" pos:column="45"/></operator> <name pos:line="54" pos:column="38">latency_type<pos:position pos:line="54" pos:column="50"/></name></expr>)<pos:position pos:line="54" pos:column="51"/></condition><then pos:line="54" pos:column="51">
    <block pos:line="55" pos:column="5">{
        <comment type="block" pos:line="56" pos:column="9">/* Add previously skipped part of the key, either "avgcount" or "sum",
         * and try again. */</comment>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">BUFFER_ADD<pos:position pos:line="58" pos:column="19"/></name> <argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">key<pos:position pos:line="58" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="26">"."<pos:position pos:line="58" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">BUFFER_ADD<pos:position pos:line="59" pos:column="19"/></name> <argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">key<pos:position pos:line="59" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="26">state<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">-&gt;<pos:position pos:line="59" pos:column="36"/></operator><name pos:line="59" pos:column="33">key<pos:position pos:line="59" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><name pos:line="61" pos:column="9">status<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <call><name><name pos:line="61" pos:column="18">state<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">-&gt;<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="25">handler<pos:position pos:line="61" pos:column="32"/></name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name><name pos:line="61" pos:column="33">state<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">-&gt;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="40">handler_arg<pos:position pos:line="61" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">buffer<pos:position pos:line="61" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="61">key<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">status<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">!=<pos:position pos:line="64" pos:column="18"/></operator> <literal type="number" pos:line="64" pos:column="19">0<pos:position pos:line="64" pos:column="20"/></literal></expr>)<pos:position pos:line="64" pos:column="21"/></condition><then pos:line="64" pos:column="21">
    <block pos:line="65" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">ERROR<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><literal type="string" pos:line="66" pos:column="15">"ceph plugin: JSON handler failed with status %d."<pos:position pos:line="66" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="67">status<pos:position pos:line="66" pos:column="73"/></name></expr></argument>)<pos:position pos:line="66" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="75"/></expr_stmt>
        <return pos:line="67" pos:column="9">return <expr><name pos:line="67" pos:column="16">CEPH_CB_ABORT<pos:position pos:line="67" pos:column="29"/></name></expr>;<pos:position pos:line="67" pos:column="30"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <return pos:line="70" pos:column="5">return <expr><name pos:line="70" pos:column="12">CEPH_CB_CONTINUE<pos:position pos:line="70" pos:column="28"/></name></expr>;<pos:position pos:line="70" pos:column="29"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
