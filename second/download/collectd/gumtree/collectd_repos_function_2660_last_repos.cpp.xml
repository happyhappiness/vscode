<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2660_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">swrite<pos:position pos:line="1" pos:column="11"/></name><parameter_list pos:line="1" pos:column="11">(<parameter><decl><type><name pos:line="1" pos:column="12">int<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">fd<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">buf<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">size_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">count<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <block pos:line="1" pos:column="51">{
  <decl_stmt><decl><type><specifier pos:line="2" pos:column="3">const<pos:position pos:line="2" pos:column="8"/></specifier> <name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">ptr<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">nleft<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">status<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">pollfd<pos:position pos:line="5" pos:column="16"/></name></name></type> <name pos:line="5" pos:column="17">pfd<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">ptr<pos:position pos:line="7" pos:column="6"/></name> <operator pos:line="7" pos:column="7">=<pos:position pos:line="7" pos:column="8"/></operator> <operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><specifier pos:line="7" pos:column="10">const<pos:position pos:line="7" pos:column="15"/></specifier> <name pos:line="7" pos:column="16">char<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><operator pos:line="7" pos:column="22">)<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">nleft<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <name pos:line="8" pos:column="11">count<pos:position pos:line="8" pos:column="16"/></name></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">fd<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">&lt;<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block pos:line="10" pos:column="15">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">errno<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">EINVAL<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">errno<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* checking for closed peer connection */</comment>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">pfd<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">.<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">fd<pos:position pos:line="16" pos:column="9"/></name></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">fd<pos:position pos:line="16" pos:column="14"/></name></expr>;<pos:position pos:line="16" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">pfd<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">.<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">events<pos:position pos:line="17" pos:column="13"/></name></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">POLLIN<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">|<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">POLLHUP<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">pfd<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">.<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">revents<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">poll<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><operator pos:line="19" pos:column="12">&amp;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="13">pfd<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call> <operator pos:line="19" pos:column="24">&gt;<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28"> <block pos:line="19" pos:column="29">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name></type> <name><name pos:line="20" pos:column="10">buffer<pos:position pos:line="20" pos:column="16"/></name><index pos:line="20" pos:column="16">[<expr><literal type="number" pos:line="20" pos:column="17">32<pos:position pos:line="20" pos:column="19"/></literal></expr>]<pos:position pos:line="20" pos:column="20"/></index></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">recv<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">fd<pos:position pos:line="21" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="18">buffer<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="26">sizeof<argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">buffer<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">MSG_PEEK<pos:position pos:line="21" pos:column="50"/></name> <operator pos:line="21" pos:column="51">|<pos:position pos:line="21" pos:column="52"/></operator> <name pos:line="21" pos:column="53">MSG_DONTWAIT<pos:position pos:line="21" pos:column="65"/></name></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call> <operator pos:line="21" pos:column="67">==<pos:position pos:line="21" pos:column="69"/></operator> <literal type="number" pos:line="21" pos:column="70">0<pos:position pos:line="21" pos:column="71"/></literal></expr>)<pos:position pos:line="21" pos:column="72"/></condition><then pos:line="21" pos:column="72"> <block pos:line="21" pos:column="73">{
      <comment type="block" pos:line="22" pos:column="7">/* if recv returns zero (even though poll() said there is data to be
       * read), that means the connection has been closed */</comment>
      <expr_stmt><expr><name pos:line="24" pos:column="7">errno<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">ECONNRESET<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><operator pos:line="25" pos:column="14">-<pos:position pos:line="25" pos:column="15"/></operator><literal type="number" pos:line="25" pos:column="15">1<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <while pos:line="29" pos:column="3">while <condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">nleft<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">&gt;<pos:position pos:line="29" pos:column="20"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>)<pos:position pos:line="29" pos:column="20"/></condition> <block pos:line="29" pos:column="21">{
    <expr_stmt><expr><name pos:line="30" pos:column="5">status<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">write<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">fd<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator><specifier pos:line="30" pos:column="25">const<pos:position pos:line="30" pos:column="30"/></specifier> <name pos:line="30" pos:column="31">void<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">*<pos:position pos:line="30" pos:column="37"/></operator><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">ptr<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">nleft<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">(<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">status<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">&lt;<pos:position pos:line="32" pos:column="21"/></operator> <literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal><operator pos:line="32" pos:column="20">)<pos:position pos:line="32" pos:column="21"/></operator> <operator pos:line="32" pos:column="22">&amp;&amp;<pos:position pos:line="32" pos:column="32"/></operator> <operator pos:line="32" pos:column="25">(<pos:position pos:line="32" pos:column="26"/></operator><operator pos:line="32" pos:column="26">(<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">errno<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">==<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">EAGAIN<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">)<pos:position pos:line="32" pos:column="43"/></operator> <operator pos:line="32" pos:column="44">||<pos:position pos:line="32" pos:column="46"/></operator> <operator pos:line="32" pos:column="47">(<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">errno<pos:position pos:line="32" pos:column="53"/></name> <operator pos:line="32" pos:column="54">==<pos:position pos:line="32" pos:column="56"/></operator> <name pos:line="32" pos:column="57">EINTR<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">)<pos:position pos:line="32" pos:column="63"/></operator><operator pos:line="32" pos:column="63">)<pos:position pos:line="32" pos:column="64"/></operator></expr>)<pos:position pos:line="32" pos:column="65"/></condition><then pos:line="32" pos:column="65">
      <block type="pseudo"><continue pos:line="33" pos:column="7">continue;<pos:position pos:line="33" pos:column="16"/></continue></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">status<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">&lt;<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="18">0<pos:position pos:line="35" pos:column="19"/></literal></expr>)<pos:position pos:line="35" pos:column="20"/></condition><then pos:line="35" pos:column="20">
      <block type="pseudo"><return pos:line="36" pos:column="7">return <expr><ternary><condition><expr><name pos:line="36" pos:column="14">errno<pos:position pos:line="36" pos:column="19"/></name></expr> ?<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <expr><name pos:line="36" pos:column="22">errno<pos:position pos:line="36" pos:column="27"/></name></expr> <pos:position pos:line="36" pos:column="28"/></then><else pos:line="36" pos:column="28">: <expr><name pos:line="36" pos:column="30">status<pos:position pos:line="36" pos:column="36"/></name></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="37"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="38" pos:column="5">nleft<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">=<pos:position pos:line="38" pos:column="12"/></operator> <name pos:line="38" pos:column="13">nleft<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">-<pos:position pos:line="38" pos:column="20"/></operator> <operator pos:line="38" pos:column="21">(<pos:position pos:line="38" pos:column="22"/></operator><operator pos:line="38" pos:column="22">(<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">size_t<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">)<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">status<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">)<pos:position pos:line="38" pos:column="37"/></operator></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">ptr<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <name pos:line="39" pos:column="11">ptr<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">+<pos:position pos:line="39" pos:column="16"/></operator> <operator pos:line="39" pos:column="17">(<pos:position pos:line="39" pos:column="18"/></operator><operator pos:line="39" pos:column="18">(<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">size_t<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">)<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">status<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">)<pos:position pos:line="39" pos:column="33"/></operator></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></while>

  <return pos:line="42" pos:column="3">return <expr><literal type="number" pos:line="42" pos:column="10">0<pos:position pos:line="42" pos:column="11"/></literal></expr>;<pos:position pos:line="42" pos:column="12"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
