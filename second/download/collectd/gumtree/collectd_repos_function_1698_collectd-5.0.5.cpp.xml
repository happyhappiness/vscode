<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1698_collectd-5.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_register_complex_read<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">group<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">name<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">plugin_read_cb<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">callback<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name><name pos:line="3" pos:column="23">struct<pos:position pos:line="3" pos:column="29"/></name> <name pos:line="3" pos:column="30">timespec<pos:position pos:line="3" pos:column="38"/></name></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">interval<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">user_data_t<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">user_data<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">read_func_t<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">rf<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">rf<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">malloc<pos:position pos:line="9" pos:column="20"/></name> <argument_list pos:line="9" pos:column="21">(<argument><expr><sizeof pos:line="9" pos:column="22">sizeof <argument_list pos:line="9" pos:column="29">(<argument><expr><operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">rf<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">rf<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
	<block pos:line="11" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">ERROR<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"plugin_register_complex_read: malloc failed."<pos:position pos:line="12" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">ENOMEM<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">)<pos:position pos:line="13" pos:column="32"/></operator></expr>;<pos:position pos:line="13" pos:column="33"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memset<pos:position pos:line="16" pos:column="15"/></name> <argument_list pos:line="16" pos:column="16">(<argument><expr><name pos:line="16" pos:column="17">rf<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="24">sizeof <argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">read_func_t<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">rf<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">rf_callback<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="27">(<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="28">void<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">*<pos:position pos:line="17" pos:column="34"/></operator><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="36">callback<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">group<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">!=<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">NULL<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">sstrncpy<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">rf<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">-&gt;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="31">rf_group<pos:position pos:line="19" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">group<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="48">sizeof <argument_list pos:line="19" pos:column="55">(<argument><expr><name><name pos:line="19" pos:column="56">rf<pos:position pos:line="19" pos:column="58"/></name><operator pos:line="19" pos:column="58">-&gt;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="60">rf_group<pos:position pos:line="19" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt></block></then>
	<else pos:line="20" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="17">rf<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">rf_group<pos:position pos:line="21" pos:column="29"/></name><index pos:line="21" pos:column="29">[<expr><literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal></expr>]<pos:position pos:line="21" pos:column="32"/></index></name> <operator pos:line="21" pos:column="33">=<pos:position pos:line="21" pos:column="34"/></operator> <literal type="char" pos:line="21" pos:column="35">'\0'<pos:position pos:line="21" pos:column="39"/></literal></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">sstrncpy<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><name><name pos:line="22" pos:column="19">rf<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">-&gt;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="23">rf_name<pos:position pos:line="22" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">name<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="38">sizeof <argument_list pos:line="22" pos:column="45">(<argument><expr><name><name pos:line="22" pos:column="46">rf<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">rf_name<pos:position pos:line="22" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">rf<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">rf_type<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">RF_COMPLEX<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">interval<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">!=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">NULL<pos:position pos:line="24" pos:column="29"/></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30">
	<block pos:line="25" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">rf<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">rf_interval<pos:position pos:line="26" pos:column="32"/></name></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <operator pos:line="26" pos:column="35">*<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">interval<pos:position pos:line="26" pos:column="44"/></name></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">rf<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">rf_effective_interval<pos:position pos:line="28" pos:column="34"/></name></name> <operator pos:line="28" pos:column="35">=<pos:position pos:line="28" pos:column="36"/></operator> <name><name pos:line="28" pos:column="37">rf<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">rf_interval<pos:position pos:line="28" pos:column="52"/></name></name></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/* Set user data */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">user_data<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">NULL<pos:position pos:line="31" pos:column="30"/></name></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31">
	<block pos:line="32" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">rf<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">rf_udata<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">.<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">data<pos:position pos:line="33" pos:column="34"/></name></name> <operator pos:line="33" pos:column="35">=<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">NULL<pos:position pos:line="33" pos:column="41"/></name></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">rf<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">rf_udata<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">.<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">free_func<pos:position pos:line="34" pos:column="39"/></name></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">NULL<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then>
	<else pos:line="36" pos:column="9">else
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">rf<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">rf_udata<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <operator pos:line="38" pos:column="32">*<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">user_data<pos:position pos:line="38" pos:column="42"/></name></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="41" pos:column="9">status<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">plugin_insert_read<pos:position pos:line="41" pos:column="36"/></name> <argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">rf<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">status<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">!=<pos:position pos:line="42" pos:column="22"/></operator> <literal type="number" pos:line="42" pos:column="23">0<pos:position pos:line="42" pos:column="24"/></literal></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">sfree<pos:position pos:line="43" pos:column="22"/></name> <argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">rf<pos:position pos:line="43" pos:column="26"/></name></expr></argument>)<pos:position pos:line="43" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt></block></then></if>

	<return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">status<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">)<pos:position pos:line="45" pos:column="24"/></operator></expr>;<pos:position pos:line="45" pos:column="25"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
