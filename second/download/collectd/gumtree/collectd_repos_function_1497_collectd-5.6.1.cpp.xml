<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1497_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">meta_data_keys_to_json<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">buffer_size<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="70">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">meta_data_t<pos:position pos:line="2" pos:column="16"/></name> <modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type><name pos:line="2" pos:column="18">meta<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier><modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">keys<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">keys_num<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">offset<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">buffer<pos:position pos:line="7" pos:column="9"/></name><index pos:line="7" pos:column="9">[<expr><literal type="number" pos:line="7" pos:column="10">0<pos:position pos:line="7" pos:column="11"/></literal></expr>]<pos:position pos:line="7" pos:column="12"/></index></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr>;<pos:position pos:line="7" pos:column="17"/></expr_stmt>

<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define<pos:position pos:line="9" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">BUFFER_ADD<pos:position pos:line="9" pos:column="19"/></name><parameter_list pos:line="9" pos:column="19">(<parameter><type><modifier pos:line="9" pos:column="20">...<pos:position pos:line="9" pos:column="23"/></modifier></type></parameter>)<pos:position pos:line="9" pos:column="24"/></parameter_list></cpp:macro> <cpp:value pos:line="9" pos:column="25">do { \
  status = ssnprintf (buffer + offset, buffer_size - offset, \
      __VA_ARGS__); \
  if (status &lt; 1) \
    return (-1); \
  else if (((size_t) status) &gt;= (buffer_size - offset)) \
    return (-ENOMEM); \
  else \
    offset += ((size_t) status); \
} while (0)<pos:position pos:line="18" pos:column="12"/></cpp:value></cpp:define>

  <for pos:line="20" pos:column="3">for <control pos:line="20" pos:column="7">(<init><decl><type><name pos:line="20" pos:column="8">size_t<pos:position pos:line="20" pos:column="14"/></name></type> <name pos:line="20" pos:column="15">i<pos:position pos:line="20" pos:column="16"/></name> <init pos:line="20" pos:column="17">= <expr><literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="21"/></init> <condition><expr><name pos:line="20" pos:column="22">i<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">&lt;<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="26">keys_num<pos:position pos:line="20" pos:column="34"/></name></expr>;<pos:position pos:line="20" pos:column="35"/></condition> <incr><expr><operator pos:line="20" pos:column="36">++<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">i<pos:position pos:line="20" pos:column="39"/></name></expr></incr>)<pos:position pos:line="20" pos:column="40"/></control>
  <block pos:line="21" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">type<pos:position pos:line="22" pos:column="13"/></name></decl>;<pos:position pos:line="22" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name> <modifier pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></modifier></type><name pos:line="23" pos:column="11">key<pos:position pos:line="23" pos:column="14"/></name> <init pos:line="23" pos:column="15">= <expr><name><name pos:line="23" pos:column="17">keys<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">i<pos:position pos:line="23" pos:column="23"/></name></expr>]<pos:position pos:line="23" pos:column="24"/></index></name></expr></init></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><name pos:line="25" pos:column="5">type<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">meta_data_type<pos:position pos:line="25" pos:column="26"/></name> <argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">meta<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">key<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">type<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">==<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">MD_TYPE_STRING<pos:position pos:line="26" pos:column="31"/></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32">
    <block pos:line="27" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="28" pos:column="7">char<pos:position pos:line="28" pos:column="11"/></name> <modifier pos:line="28" pos:column="12">*<pos:position pos:line="28" pos:column="13"/></modifier></type><name pos:line="28" pos:column="13">value<pos:position pos:line="28" pos:column="18"/></name> <init pos:line="28" pos:column="19">= <expr><name pos:line="28" pos:column="21">NULL<pos:position pos:line="28" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="26"/></decl_stmt>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><call><name pos:line="29" pos:column="11">meta_data_get_string<pos:position pos:line="29" pos:column="31"/></name> <argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">meta<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">key<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="44">&amp;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="45">value<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call> <operator pos:line="29" pos:column="52">==<pos:position pos:line="29" pos:column="54"/></operator> <literal type="number" pos:line="29" pos:column="55">0<pos:position pos:line="29" pos:column="56"/></literal></expr>)<pos:position pos:line="29" pos:column="57"/></condition><then pos:line="29" pos:column="57">
      <block pos:line="30" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">char<pos:position pos:line="31" pos:column="13"/></name></type> <name><name pos:line="31" pos:column="14">temp<pos:position pos:line="31" pos:column="18"/></name><index pos:line="31" pos:column="18">[<expr><literal type="number" pos:line="31" pos:column="19">512<pos:position pos:line="31" pos:column="22"/></literal></expr>]<pos:position pos:line="31" pos:column="23"/></index></name> <init pos:line="31" pos:column="24">= <expr><literal type="string" pos:line="31" pos:column="26">""<pos:position pos:line="31" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="29"/></decl_stmt>

        <expr_stmt><expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">json_escape_string<pos:position pos:line="33" pos:column="36"/></name> <argument_list pos:line="33" pos:column="37">(<argument><expr><name pos:line="33" pos:column="38">temp<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="44">sizeof <argument_list pos:line="33" pos:column="51">(<argument><expr><name pos:line="33" pos:column="52">temp<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="33" pos:column="59">value<pos:position pos:line="33" pos:column="64"/></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">sfree<pos:position pos:line="34" pos:column="14"/></name> <argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">value<pos:position pos:line="34" pos:column="21"/></name></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">status<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
          <block type="pseudo"><return pos:line="36" pos:column="11">return <expr><name pos:line="36" pos:column="18">status<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></return></block></then></if>

        <expr_stmt><expr><call><name pos:line="38" pos:column="9">BUFFER_ADD<pos:position pos:line="38" pos:column="19"/></name> <argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">",\"%s\":%s"<pos:position pos:line="38" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="35">key<pos:position pos:line="38" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="40">temp<pos:position pos:line="38" pos:column="44"/></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if <condition pos:line="41" pos:column="13">(<expr><name pos:line="41" pos:column="14">type<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">==<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">MD_TYPE_SIGNED_INT<pos:position pos:line="41" pos:column="40"/></name></expr>)<pos:position pos:line="41" pos:column="41"/></condition><then pos:line="41" pos:column="41">
    <block pos:line="42" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">int64_t<pos:position pos:line="43" pos:column="14"/></name></type> <name pos:line="43" pos:column="15">value<pos:position pos:line="43" pos:column="20"/></name> <init pos:line="43" pos:column="21">= <expr><literal type="number" pos:line="43" pos:column="23">0<pos:position pos:line="43" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="43" pos:column="25"/></decl_stmt>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><call><name pos:line="44" pos:column="11">meta_data_get_signed_int<pos:position pos:line="44" pos:column="35"/></name> <argument_list pos:line="44" pos:column="36">(<argument><expr><name pos:line="44" pos:column="37">meta<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="43">key<pos:position pos:line="44" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="48">&amp;<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="49">value<pos:position pos:line="44" pos:column="54"/></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call> <operator pos:line="44" pos:column="56">==<pos:position pos:line="44" pos:column="58"/></operator> <literal type="number" pos:line="44" pos:column="59">0<pos:position pos:line="44" pos:column="60"/></literal></expr>)<pos:position pos:line="44" pos:column="61"/></condition><then pos:line="44" pos:column="61">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">BUFFER_ADD<pos:position pos:line="45" pos:column="19"/></name> <argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">",\"%s\":%"<pos:position pos:line="45" pos:column="32"/></literal><name pos:line="45" pos:column="32">PRIi64<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="40">key<pos:position pos:line="45" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">value<pos:position pos:line="45" pos:column="50"/></name></expr></argument>)<pos:position pos:line="45" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="52"/></expr_stmt></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><name pos:line="47" pos:column="14">type<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">==<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">MD_TYPE_UNSIGNED_INT<pos:position pos:line="47" pos:column="42"/></name></expr>)<pos:position pos:line="47" pos:column="43"/></condition><then pos:line="47" pos:column="43">
    <block pos:line="48" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">uint64_t<pos:position pos:line="49" pos:column="15"/></name></type> <name pos:line="49" pos:column="16">value<pos:position pos:line="49" pos:column="21"/></name> <init pos:line="49" pos:column="22">= <expr><literal type="number" pos:line="49" pos:column="24">0<pos:position pos:line="49" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="49" pos:column="26"/></decl_stmt>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><call><name pos:line="50" pos:column="11">meta_data_get_unsigned_int<pos:position pos:line="50" pos:column="37"/></name> <argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">meta<pos:position pos:line="50" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="45">key<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="50">&amp;<pos:position pos:line="50" pos:column="55"/></operator><name pos:line="50" pos:column="51">value<pos:position pos:line="50" pos:column="56"/></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call> <operator pos:line="50" pos:column="58">==<pos:position pos:line="50" pos:column="60"/></operator> <literal type="number" pos:line="50" pos:column="61">0<pos:position pos:line="50" pos:column="62"/></literal></expr>)<pos:position pos:line="50" pos:column="63"/></condition><then pos:line="50" pos:column="63">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">BUFFER_ADD<pos:position pos:line="51" pos:column="19"/></name> <argument_list pos:line="51" pos:column="20">(<argument><expr><literal type="string" pos:line="51" pos:column="21">",\"%s\":%"<pos:position pos:line="51" pos:column="32"/></literal><name pos:line="51" pos:column="32">PRIu64<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">key<pos:position pos:line="51" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="45">value<pos:position pos:line="51" pos:column="50"/></name></expr></argument>)<pos:position pos:line="51" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="53" pos:column="5">else <if pos:line="53" pos:column="10">if <condition pos:line="53" pos:column="13">(<expr><name pos:line="53" pos:column="14">type<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">==<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">MD_TYPE_DOUBLE<pos:position pos:line="53" pos:column="36"/></name></expr>)<pos:position pos:line="53" pos:column="37"/></condition><then pos:line="53" pos:column="37">
    <block pos:line="54" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="55" pos:column="7">double<pos:position pos:line="55" pos:column="13"/></name></type> <name pos:line="55" pos:column="14">value<pos:position pos:line="55" pos:column="19"/></name> <init pos:line="55" pos:column="20">= <expr><literal type="number" pos:line="55" pos:column="22">0.0<pos:position pos:line="55" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="55" pos:column="26"/></decl_stmt>
      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><call><name pos:line="56" pos:column="11">meta_data_get_double<pos:position pos:line="56" pos:column="31"/></name> <argument_list pos:line="56" pos:column="32">(<argument><expr><name pos:line="56" pos:column="33">meta<pos:position pos:line="56" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">key<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="44">&amp;<pos:position pos:line="56" pos:column="49"/></operator><name pos:line="56" pos:column="45">value<pos:position pos:line="56" pos:column="50"/></name></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call> <operator pos:line="56" pos:column="52">==<pos:position pos:line="56" pos:column="54"/></operator> <literal type="number" pos:line="56" pos:column="55">0<pos:position pos:line="56" pos:column="56"/></literal></expr>)<pos:position pos:line="56" pos:column="57"/></condition><then pos:line="56" pos:column="57">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="9">BUFFER_ADD<pos:position pos:line="57" pos:column="19"/></name> <argument_list pos:line="57" pos:column="20">(<argument><expr><literal type="string" pos:line="57" pos:column="21">",\"%s\":%f"<pos:position pos:line="57" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="35">key<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="40">value<pos:position pos:line="57" pos:column="45"/></name></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="59" pos:column="5">else <if pos:line="59" pos:column="10">if <condition pos:line="59" pos:column="13">(<expr><name pos:line="59" pos:column="14">type<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">==<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">MD_TYPE_BOOLEAN<pos:position pos:line="59" pos:column="37"/></name></expr>)<pos:position pos:line="59" pos:column="38"/></condition><then pos:line="59" pos:column="38">
    <block pos:line="60" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="61" pos:column="7">_Bool<pos:position pos:line="61" pos:column="12"/></name></type> <name pos:line="61" pos:column="13">value<pos:position pos:line="61" pos:column="18"/></name> <init pos:line="61" pos:column="19">= <expr><literal type="number" pos:line="61" pos:column="21">0<pos:position pos:line="61" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="23"/></decl_stmt>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><call><name pos:line="62" pos:column="11">meta_data_get_boolean<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">meta<pos:position pos:line="62" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="40">key<pos:position pos:line="62" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="45">&amp;<pos:position pos:line="62" pos:column="50"/></operator><name pos:line="62" pos:column="46">value<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call> <operator pos:line="62" pos:column="53">==<pos:position pos:line="62" pos:column="55"/></operator> <literal type="number" pos:line="62" pos:column="56">0<pos:position pos:line="62" pos:column="57"/></literal></expr>)<pos:position pos:line="62" pos:column="58"/></condition><then pos:line="62" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="9">BUFFER_ADD<pos:position pos:line="63" pos:column="19"/></name> <argument_list pos:line="63" pos:column="20">(<argument><expr><literal type="string" pos:line="63" pos:column="21">",\"%s\":%s"<pos:position pos:line="63" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="35">key<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="63" pos:column="40">value<pos:position pos:line="63" pos:column="45"/></name></expr> ?<pos:position pos:line="63" pos:column="47"/></condition><then pos:line="63" pos:column="47"> <expr><literal type="string" pos:line="63" pos:column="48">"true"<pos:position pos:line="63" pos:column="54"/></literal></expr> <pos:position pos:line="63" pos:column="55"/></then><else pos:line="63" pos:column="55">: <expr><literal type="string" pos:line="63" pos:column="57">"false"<pos:position pos:line="63" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="63" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="66"/></expr_stmt></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="65" pos:column="4"/></block></for> <comment type="block" pos:line="65" pos:column="5">/* for (keys) */</comment>

  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><name pos:line="67" pos:column="7">offset<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">==<pos:position pos:line="67" pos:column="16"/></operator> <literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal></expr>)<pos:position pos:line="67" pos:column="19"/></condition><then pos:line="67" pos:column="19">
    <block type="pseudo"><return pos:line="68" pos:column="5">return <expr><operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">ENOENT<pos:position pos:line="68" pos:column="19"/></name><operator pos:line="68" pos:column="19">)<pos:position pos:line="68" pos:column="20"/></operator></expr>;<pos:position pos:line="68" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="70" pos:column="3">buffer<pos:position pos:line="70" pos:column="9"/></name><index pos:line="70" pos:column="9">[<expr><literal type="number" pos:line="70" pos:column="10">0<pos:position pos:line="70" pos:column="11"/></literal></expr>]<pos:position pos:line="70" pos:column="12"/></index></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <literal type="char" pos:line="70" pos:column="15">'{'<pos:position pos:line="70" pos:column="18"/></literal></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt> <comment type="block" pos:line="70" pos:column="20">/* replace leading ',' */</comment>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">BUFFER_ADD<pos:position pos:line="71" pos:column="13"/></name> <argument_list pos:line="71" pos:column="14">(<argument><expr><literal type="string" pos:line="71" pos:column="15">"}"<pos:position pos:line="71" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="20"/></expr_stmt>

<cpp:undef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">undef<pos:position pos:line="73" pos:column="7"/></cpp:directive> <name pos:line="73" pos:column="8">BUFFER_ADD<pos:position pos:line="73" pos:column="18"/></name></cpp:undef>

  <return pos:line="75" pos:column="3">return <expr><operator pos:line="75" pos:column="10">(<pos:position pos:line="75" pos:column="11"/></operator><literal type="number" pos:line="75" pos:column="11">0<pos:position pos:line="75" pos:column="12"/></literal><operator pos:line="75" pos:column="12">)<pos:position pos:line="75" pos:column="13"/></operator></expr>;<pos:position pos:line="75" pos:column="14"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
