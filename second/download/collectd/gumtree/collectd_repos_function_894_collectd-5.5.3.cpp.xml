<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_894_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">conn_read_netlink<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">HAVE_STRUCT_LINUX_INET_DIAG_REQ<pos:position pos:line="3" pos:column="36"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">fd<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_nl<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">nladdr<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">nlreq<pos:position pos:line="6" pos:column="15"/></name></name></type> <name pos:line="6" pos:column="16">req<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">msghdr<pos:position pos:line="7" pos:column="16"/></name></name></type> <name pos:line="7" pos:column="17">msg<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">iovec<pos:position pos:line="8" pos:column="15"/></name></name></type> <name pos:line="8" pos:column="16">iov<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">inet_diag_msg<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">r<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">buf<pos:position pos:line="10" pos:column="11"/></name><index pos:line="10" pos:column="11">[<expr><literal type="number" pos:line="10" pos:column="12">8192<pos:position pos:line="10" pos:column="16"/></literal></expr>]<pos:position pos:line="10" pos:column="17"/></index></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* If this fails, it's likely a permission problem. We'll fall back to
   * reading this information from files below. */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">fd<pos:position pos:line="14" pos:column="5"/></name> <operator pos:line="14" pos:column="6">=<pos:position pos:line="14" pos:column="7"/></operator> <call><name pos:line="14" pos:column="8">socket<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">AF_NETLINK<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">SOCK_RAW<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">NETLINK_INET_DIAG<pos:position pos:line="14" pos:column="54"/></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">fd<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">&lt;<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name> <argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="string" pos:line="17" pos:column="12">"tcpconns plugin: conn_read_netlink: socket(AF_NETLINK, SOCK_RAW, "<pos:position pos:line="17" pos:column="79"/></literal>
	<literal type="string" pos:line="18" pos:column="9">"NETLINK_INET_DIAG) failed: %s"<pos:position pos:line="18" pos:column="40"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="19" pos:column="9">sstrerror<pos:position pos:line="19" pos:column="18"/></name> <argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">errno<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">buf<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="32">sizeof <argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">buf<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">memset<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><operator pos:line="23" pos:column="10">&amp;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="11">nladdr<pos:position pos:line="23" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="19">0<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="22">sizeof<argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">nladdr<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">nladdr<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">.<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">nl_family<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">AF_NETLINK<pos:position pos:line="24" pos:column="32"/></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">memset<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><operator pos:line="26" pos:column="10">&amp;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="11">req<pos:position pos:line="26" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="19">sizeof<argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">req<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">req<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">.<pos:position pos:line="27" pos:column="7"/></operator><name pos:line="27" pos:column="7">nlh<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">.<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">nlmsg_len<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <sizeof pos:line="27" pos:column="23">sizeof<argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">req<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">req<pos:position pos:line="28" pos:column="6"/></name><operator pos:line="28" pos:column="6">.<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">nlh<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">.<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">nlmsg_type<pos:position pos:line="28" pos:column="21"/></name></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">TCPDIAG_GETSOCK<pos:position pos:line="28" pos:column="39"/></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
  <comment type="block" pos:line="29" pos:column="3">/* NLM_F_ROOT: return the complete table instead of a single entry.
   * NLM_F_MATCH: return all entries matching criteria (not implemented)
   * NLM_F_REQUEST: must be set on all request messages */</comment>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">req<pos:position pos:line="32" pos:column="6"/></name><operator pos:line="32" pos:column="6">.<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">nlh<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">.<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">nlmsg_flags<pos:position pos:line="32" pos:column="22"/></name></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <name pos:line="32" pos:column="25">NLM_F_ROOT<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">|<pos:position pos:line="32" pos:column="37"/></operator> <name pos:line="32" pos:column="38">NLM_F_MATCH<pos:position pos:line="32" pos:column="49"/></name> <operator pos:line="32" pos:column="50">|<pos:position pos:line="32" pos:column="51"/></operator> <name pos:line="32" pos:column="52">NLM_F_REQUEST<pos:position pos:line="32" pos:column="65"/></name></expr>;<pos:position pos:line="32" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">req<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">.<pos:position pos:line="33" pos:column="7"/></operator><name pos:line="33" pos:column="7">nlh<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">.<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="11">nlmsg_pid<pos:position pos:line="33" pos:column="20"/></name></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
  <comment type="block" pos:line="34" pos:column="3">/* The sequence_number is used to track our messages. Since netlink is not
   * reliable, we don't want to end up with a corrupt or incomplete old
   * message in case the system is/was out of memory. */</comment>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">req<pos:position pos:line="37" pos:column="6"/></name><operator pos:line="37" pos:column="6">.<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">nlh<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">.<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">nlmsg_seq<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <operator pos:line="37" pos:column="23">++<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">sequence_number<pos:position pos:line="37" pos:column="40"/></name></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">req<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">.<pos:position pos:line="38" pos:column="7"/></operator><name pos:line="38" pos:column="7">r<pos:position pos:line="38" pos:column="8"/></name><operator pos:line="38" pos:column="8">.<pos:position pos:line="38" pos:column="9"/></operator><name pos:line="38" pos:column="9">idiag_family<pos:position pos:line="38" pos:column="21"/></name></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">AF_INET<pos:position pos:line="38" pos:column="31"/></name></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="39" pos:column="3">req<pos:position pos:line="39" pos:column="6"/></name><operator pos:line="39" pos:column="6">.<pos:position pos:line="39" pos:column="7"/></operator><name pos:line="39" pos:column="7">r<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">.<pos:position pos:line="39" pos:column="9"/></operator><name pos:line="39" pos:column="9">idiag_states<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <literal type="number" pos:line="39" pos:column="24">0xfff<pos:position pos:line="39" pos:column="29"/></literal></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">req<pos:position pos:line="40" pos:column="6"/></name><operator pos:line="40" pos:column="6">.<pos:position pos:line="40" pos:column="7"/></operator><name pos:line="40" pos:column="7">r<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">.<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="9">idiag_ext<pos:position pos:line="40" pos:column="18"/></name></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">memset<pos:position pos:line="42" pos:column="9"/></name><argument_list pos:line="42" pos:column="9">(<argument><expr><operator pos:line="42" pos:column="10">&amp;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="11">iov<pos:position pos:line="42" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="19">sizeof<argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">iov<pos:position pos:line="42" pos:column="29"/></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">iov<pos:position pos:line="43" pos:column="6"/></name><operator pos:line="43" pos:column="6">.<pos:position pos:line="43" pos:column="7"/></operator><name pos:line="43" pos:column="7">iov_base<pos:position pos:line="43" pos:column="15"/></name></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <operator pos:line="43" pos:column="18">&amp;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="19">req<pos:position pos:line="43" pos:column="22"/></name></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">iov<pos:position pos:line="44" pos:column="6"/></name><operator pos:line="44" pos:column="6">.<pos:position pos:line="44" pos:column="7"/></operator><name pos:line="44" pos:column="7">iov_len<pos:position pos:line="44" pos:column="14"/></name></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <sizeof pos:line="44" pos:column="17">sizeof<argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">req<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">memset<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><operator pos:line="46" pos:column="10">&amp;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="11">msg<pos:position pos:line="46" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="19">sizeof<argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">msg<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="47" pos:column="3">msg<pos:position pos:line="47" pos:column="6"/></name><operator pos:line="47" pos:column="6">.<pos:position pos:line="47" pos:column="7"/></operator><name pos:line="47" pos:column="7">msg_name<pos:position pos:line="47" pos:column="15"/></name></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <operator pos:line="47" pos:column="18">(<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">void<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">*<pos:position pos:line="47" pos:column="24"/></operator><operator pos:line="47" pos:column="24">)<pos:position pos:line="47" pos:column="25"/></operator><operator pos:line="47" pos:column="25">&amp;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="26">nladdr<pos:position pos:line="47" pos:column="32"/></name></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">msg<pos:position pos:line="48" pos:column="6"/></name><operator pos:line="48" pos:column="6">.<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">msg_namelen<pos:position pos:line="48" pos:column="18"/></name></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <sizeof pos:line="48" pos:column="21">sizeof<argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">nladdr<pos:position pos:line="48" pos:column="34"/></name></expr></argument>)<pos:position pos:line="48" pos:column="35"/></argument_list></sizeof></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">msg<pos:position pos:line="49" pos:column="6"/></name><operator pos:line="49" pos:column="6">.<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">msg_iov<pos:position pos:line="49" pos:column="14"/></name></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">&amp;<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="18">iov<pos:position pos:line="49" pos:column="21"/></name></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">msg<pos:position pos:line="50" pos:column="6"/></name><operator pos:line="50" pos:column="6">.<pos:position pos:line="50" pos:column="7"/></operator><name pos:line="50" pos:column="7">msg_iovlen<pos:position pos:line="50" pos:column="17"/></name></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <literal type="number" pos:line="50" pos:column="20">1<pos:position pos:line="50" pos:column="21"/></literal></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>

  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><call><name pos:line="52" pos:column="7">sendmsg<pos:position pos:line="52" pos:column="14"/></name> <argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">fd<pos:position pos:line="52" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="20">&amp;<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="21">msg<pos:position pos:line="52" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="26">0<pos:position pos:line="52" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="28"/></argument_list></call> <operator pos:line="52" pos:column="29">&lt;<pos:position pos:line="52" pos:column="33"/></operator> <literal type="number" pos:line="52" pos:column="31">0<pos:position pos:line="52" pos:column="32"/></literal></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33">
  <block pos:line="53" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">ERROR<pos:position pos:line="54" pos:column="10"/></name> <argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="string" pos:line="54" pos:column="12">"tcpconns plugin: conn_read_netlink: sendmsg(2) failed: %s"<pos:position pos:line="54" pos:column="71"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="55" pos:column="9">sstrerror<pos:position pos:line="55" pos:column="18"/></name> <argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">errno<pos:position pos:line="55" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="27">buf<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="32">sizeof <argument_list pos:line="55" pos:column="39">(<argument><expr><name pos:line="55" pos:column="40">buf<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">close<pos:position pos:line="56" pos:column="10"/></name> <argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">fd<pos:position pos:line="56" pos:column="14"/></name></expr></argument>)<pos:position pos:line="56" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="16"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><operator pos:line="57" pos:column="12">(<pos:position pos:line="57" pos:column="13"/></operator><operator pos:line="57" pos:column="13">-<pos:position pos:line="57" pos:column="14"/></operator><literal type="number" pos:line="57" pos:column="14">1<pos:position pos:line="57" pos:column="15"/></literal><operator pos:line="57" pos:column="15">)<pos:position pos:line="57" pos:column="16"/></operator></expr>;<pos:position pos:line="57" pos:column="17"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="60" pos:column="3">iov<pos:position pos:line="60" pos:column="6"/></name><operator pos:line="60" pos:column="6">.<pos:position pos:line="60" pos:column="7"/></operator><name pos:line="60" pos:column="7">iov_base<pos:position pos:line="60" pos:column="15"/></name></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <name pos:line="60" pos:column="18">buf<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="61" pos:column="3">iov<pos:position pos:line="61" pos:column="6"/></name><operator pos:line="61" pos:column="6">.<pos:position pos:line="61" pos:column="7"/></operator><name pos:line="61" pos:column="7">iov_len<pos:position pos:line="61" pos:column="14"/></name></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <sizeof pos:line="61" pos:column="17">sizeof<argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">buf<pos:position pos:line="61" pos:column="27"/></name></expr></argument>)<pos:position pos:line="61" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>

  <while pos:line="63" pos:column="3">while <condition pos:line="63" pos:column="9">(<expr><literal type="number" pos:line="63" pos:column="10">1<pos:position pos:line="63" pos:column="11"/></literal></expr>)<pos:position pos:line="63" pos:column="12"/></condition>
  <block pos:line="64" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">int<pos:position pos:line="65" pos:column="8"/></name></type> <name pos:line="65" pos:column="9">status<pos:position pos:line="65" pos:column="15"/></name></decl>;<pos:position pos:line="65" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="66" pos:column="5">struct<pos:position pos:line="66" pos:column="11"/></name> <name pos:line="66" pos:column="12">nlmsghdr<pos:position pos:line="66" pos:column="20"/></name></name> <modifier pos:line="66" pos:column="21">*<pos:position pos:line="66" pos:column="22"/></modifier></type><name pos:line="66" pos:column="22">h<pos:position pos:line="66" pos:column="23"/></name></decl>;<pos:position pos:line="66" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">memset<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><operator pos:line="68" pos:column="12">&amp;<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="13">msg<pos:position pos:line="68" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="18">0<pos:position pos:line="68" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="21">sizeof<argument_list pos:line="68" pos:column="27">(<argument><expr><name pos:line="68" pos:column="28">msg<pos:position pos:line="68" pos:column="31"/></name></expr></argument>)<pos:position pos:line="68" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">msg<pos:position pos:line="69" pos:column="8"/></name><operator pos:line="69" pos:column="8">.<pos:position pos:line="69" pos:column="9"/></operator><name pos:line="69" pos:column="9">msg_name<pos:position pos:line="69" pos:column="17"/></name></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <operator pos:line="69" pos:column="20">(<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="21">void<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">*<pos:position pos:line="69" pos:column="26"/></operator><operator pos:line="69" pos:column="26">)<pos:position pos:line="69" pos:column="27"/></operator><operator pos:line="69" pos:column="27">&amp;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="28">nladdr<pos:position pos:line="69" pos:column="34"/></name></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">msg<pos:position pos:line="70" pos:column="8"/></name><operator pos:line="70" pos:column="8">.<pos:position pos:line="70" pos:column="9"/></operator><name pos:line="70" pos:column="9">msg_namelen<pos:position pos:line="70" pos:column="20"/></name></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <sizeof pos:line="70" pos:column="23">sizeof<argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">nladdr<pos:position pos:line="70" pos:column="36"/></name></expr></argument>)<pos:position pos:line="70" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">msg<pos:position pos:line="71" pos:column="8"/></name><operator pos:line="71" pos:column="8">.<pos:position pos:line="71" pos:column="9"/></operator><name pos:line="71" pos:column="9">msg_iov<pos:position pos:line="71" pos:column="16"/></name></name> <operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator> <operator pos:line="71" pos:column="19">&amp;<pos:position pos:line="71" pos:column="24"/></operator><name pos:line="71" pos:column="20">iov<pos:position pos:line="71" pos:column="23"/></name></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">msg<pos:position pos:line="72" pos:column="8"/></name><operator pos:line="72" pos:column="8">.<pos:position pos:line="72" pos:column="9"/></operator><name pos:line="72" pos:column="9">msg_iovlen<pos:position pos:line="72" pos:column="19"/></name></name> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <literal type="number" pos:line="72" pos:column="22">1<pos:position pos:line="72" pos:column="23"/></literal></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="74" pos:column="5">status<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <call><name pos:line="74" pos:column="14">recvmsg<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">fd<pos:position pos:line="74" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="26">(<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="27">void<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">*<pos:position pos:line="74" pos:column="33"/></operator><operator pos:line="74" pos:column="33">)<pos:position pos:line="74" pos:column="34"/></operator> <operator pos:line="74" pos:column="35">&amp;<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="36">msg<pos:position pos:line="74" pos:column="39"/></name></expr></argument>, <comment type="block" pos:line="74" pos:column="41">/* flags = */</comment> <argument><expr><literal type="number" pos:line="74" pos:column="55">0<pos:position pos:line="74" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="58"/></expr_stmt>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">status<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">&lt;<pos:position pos:line="75" pos:column="20"/></operator> <literal type="number" pos:line="75" pos:column="18">0<pos:position pos:line="75" pos:column="19"/></literal></expr>)<pos:position pos:line="75" pos:column="20"/></condition><then pos:line="75" pos:column="20">
    <block pos:line="76" pos:column="5">{
      <if pos:line="77" pos:column="7">if <condition pos:line="77" pos:column="10">(<expr><operator pos:line="77" pos:column="11">(<pos:position pos:line="77" pos:column="12"/></operator><name pos:line="77" pos:column="12">errno<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">==<pos:position pos:line="77" pos:column="20"/></operator> <name pos:line="77" pos:column="21">EINTR<pos:position pos:line="77" pos:column="26"/></name><operator pos:line="77" pos:column="26">)<pos:position pos:line="77" pos:column="27"/></operator> <operator pos:line="77" pos:column="28">||<pos:position pos:line="77" pos:column="30"/></operator> <operator pos:line="77" pos:column="31">(<pos:position pos:line="77" pos:column="32"/></operator><name pos:line="77" pos:column="32">errno<pos:position pos:line="77" pos:column="37"/></name> <operator pos:line="77" pos:column="38">==<pos:position pos:line="77" pos:column="40"/></operator> <name pos:line="77" pos:column="41">EAGAIN<pos:position pos:line="77" pos:column="47"/></name><operator pos:line="77" pos:column="47">)<pos:position pos:line="77" pos:column="48"/></operator></expr>)<pos:position pos:line="77" pos:column="49"/></condition><then pos:line="77" pos:column="49">
        <block type="pseudo"><continue pos:line="78" pos:column="9">continue;<pos:position pos:line="78" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="80" pos:column="7">ERROR<pos:position pos:line="80" pos:column="12"/></name> <argument_list pos:line="80" pos:column="13">(<argument><expr><literal type="string" pos:line="80" pos:column="14">"tcpconns plugin: conn_read_netlink: recvmsg(2) failed: %s"<pos:position pos:line="80" pos:column="73"/></literal></expr></argument>,
	  <argument><expr><call><name pos:line="81" pos:column="11">sstrerror<pos:position pos:line="81" pos:column="20"/></name> <argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">errno<pos:position pos:line="81" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="29">buf<pos:position pos:line="81" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="34">sizeof <argument_list pos:line="81" pos:column="41">(<argument><expr><name pos:line="81" pos:column="42">buf<pos:position pos:line="81" pos:column="45"/></name></expr></argument>)<pos:position pos:line="81" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">close<pos:position pos:line="82" pos:column="12"/></name> <argument_list pos:line="82" pos:column="13">(<argument><expr><name pos:line="82" pos:column="14">fd<pos:position pos:line="82" pos:column="16"/></name></expr></argument>)<pos:position pos:line="82" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="18"/></expr_stmt>
      <return pos:line="83" pos:column="7">return <expr><operator pos:line="83" pos:column="14">(<pos:position pos:line="83" pos:column="15"/></operator><operator pos:line="83" pos:column="15">-<pos:position pos:line="83" pos:column="16"/></operator><literal type="number" pos:line="83" pos:column="16">1<pos:position pos:line="83" pos:column="17"/></literal><operator pos:line="83" pos:column="17">)<pos:position pos:line="83" pos:column="18"/></operator></expr>;<pos:position pos:line="83" pos:column="19"/></return>
    }<pos:position pos:line="84" pos:column="6"/></block></then>
    <elseif pos:line="85" pos:column="5">else <if pos:line="85" pos:column="10">if <condition pos:line="85" pos:column="13">(<expr><name pos:line="85" pos:column="14">status<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">==<pos:position pos:line="85" pos:column="23"/></operator> <literal type="number" pos:line="85" pos:column="24">0<pos:position pos:line="85" pos:column="25"/></literal></expr>)<pos:position pos:line="85" pos:column="26"/></condition><then pos:line="85" pos:column="26">
    <block pos:line="86" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">close<pos:position pos:line="87" pos:column="12"/></name> <argument_list pos:line="87" pos:column="13">(<argument><expr><name pos:line="87" pos:column="14">fd<pos:position pos:line="87" pos:column="16"/></name></expr></argument>)<pos:position pos:line="87" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="88" pos:column="7">DEBUG<pos:position pos:line="88" pos:column="12"/></name> <argument_list pos:line="88" pos:column="13">(<argument><expr><literal type="string" pos:line="88" pos:column="14">"tcpconns plugin: conn_read_netlink: Unexpected zero-sized "<pos:position pos:line="88" pos:column="74"/></literal>
	  <literal type="string" pos:line="89" pos:column="11">"reply from netlink socket."<pos:position pos:line="89" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
      <return pos:line="90" pos:column="7">return <expr><operator pos:line="90" pos:column="14">(<pos:position pos:line="90" pos:column="15"/></operator><literal type="number" pos:line="90" pos:column="15">0<pos:position pos:line="90" pos:column="16"/></literal><operator pos:line="90" pos:column="16">)<pos:position pos:line="90" pos:column="17"/></operator></expr>;<pos:position pos:line="90" pos:column="18"/></return>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="93" pos:column="5">h<pos:position pos:line="93" pos:column="6"/></name> <operator pos:line="93" pos:column="7">=<pos:position pos:line="93" pos:column="8"/></operator> <operator pos:line="93" pos:column="9">(<pos:position pos:line="93" pos:column="10"/></operator>struct <name pos:line="93" pos:column="17">nlmsghdr<pos:position pos:line="93" pos:column="25"/></name><operator pos:line="93" pos:column="25">*<pos:position pos:line="93" pos:column="26"/></operator><operator pos:line="93" pos:column="26">)<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="27">buf<pos:position pos:line="93" pos:column="30"/></name></expr>;<pos:position pos:line="93" pos:column="31"/></expr_stmt>
    <while pos:line="94" pos:column="5">while <condition pos:line="94" pos:column="11">(<expr><call><name pos:line="94" pos:column="12">NLMSG_OK<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><name pos:line="94" pos:column="21">h<pos:position pos:line="94" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="24">status<pos:position pos:line="94" pos:column="30"/></name></expr></argument>)<pos:position pos:line="94" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="32"/></condition>
    <block pos:line="95" pos:column="5">{
      <if pos:line="96" pos:column="7">if <condition pos:line="96" pos:column="10">(<expr><name><name pos:line="96" pos:column="11">h<pos:position pos:line="96" pos:column="12"/></name><operator pos:line="96" pos:column="12">-&gt;<pos:position pos:line="96" pos:column="17"/></operator><name pos:line="96" pos:column="14">nlmsg_seq<pos:position pos:line="96" pos:column="23"/></name></name> <operator pos:line="96" pos:column="24">!=<pos:position pos:line="96" pos:column="26"/></operator> <name pos:line="96" pos:column="27">sequence_number<pos:position pos:line="96" pos:column="42"/></name></expr>)<pos:position pos:line="96" pos:column="43"/></condition><then pos:line="96" pos:column="43">
      <block pos:line="97" pos:column="7">{
	<expr_stmt><expr><name pos:line="98" pos:column="9">h<pos:position pos:line="98" pos:column="10"/></name> <operator pos:line="98" pos:column="11">=<pos:position pos:line="98" pos:column="12"/></operator> <call><name pos:line="98" pos:column="13">NLMSG_NEXT<pos:position pos:line="98" pos:column="23"/></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name pos:line="98" pos:column="24">h<pos:position pos:line="98" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="27">status<pos:position pos:line="98" pos:column="33"/></name></expr></argument>)<pos:position pos:line="98" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt>
	<continue pos:line="99" pos:column="9">continue;<pos:position pos:line="99" pos:column="18"/></continue>
      }<pos:position pos:line="100" pos:column="8"/></block></then></if>

      <if pos:line="102" pos:column="7">if <condition pos:line="102" pos:column="10">(<expr><name><name pos:line="102" pos:column="11">h<pos:position pos:line="102" pos:column="12"/></name><operator pos:line="102" pos:column="12">-&gt;<pos:position pos:line="102" pos:column="17"/></operator><name pos:line="102" pos:column="14">nlmsg_type<pos:position pos:line="102" pos:column="24"/></name></name> <operator pos:line="102" pos:column="25">==<pos:position pos:line="102" pos:column="27"/></operator> <name pos:line="102" pos:column="28">NLMSG_DONE<pos:position pos:line="102" pos:column="38"/></name></expr>)<pos:position pos:line="102" pos:column="39"/></condition><then pos:line="102" pos:column="39">
      <block pos:line="103" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">close<pos:position pos:line="104" pos:column="14"/></name> <argument_list pos:line="104" pos:column="15">(<argument><expr><name pos:line="104" pos:column="16">fd<pos:position pos:line="104" pos:column="18"/></name></expr></argument>)<pos:position pos:line="104" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="20"/></expr_stmt>
	<return pos:line="105" pos:column="9">return <expr><operator pos:line="105" pos:column="16">(<pos:position pos:line="105" pos:column="17"/></operator><literal type="number" pos:line="105" pos:column="17">0<pos:position pos:line="105" pos:column="18"/></literal><operator pos:line="105" pos:column="18">)<pos:position pos:line="105" pos:column="19"/></operator></expr>;<pos:position pos:line="105" pos:column="20"/></return>
      }<pos:position pos:line="106" pos:column="8"/></block></then>
      <elseif pos:line="107" pos:column="7">else <if pos:line="107" pos:column="12">if <condition pos:line="107" pos:column="15">(<expr><name><name pos:line="107" pos:column="16">h<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">-&gt;<pos:position pos:line="107" pos:column="22"/></operator><name pos:line="107" pos:column="19">nlmsg_type<pos:position pos:line="107" pos:column="29"/></name></name> <operator pos:line="107" pos:column="30">==<pos:position pos:line="107" pos:column="32"/></operator> <name pos:line="107" pos:column="33">NLMSG_ERROR<pos:position pos:line="107" pos:column="44"/></name></expr>)<pos:position pos:line="107" pos:column="45"/></condition><then pos:line="107" pos:column="45">
      <block pos:line="108" pos:column="7">{
	<decl_stmt><decl><type><name><name pos:line="109" pos:column="9">struct<pos:position pos:line="109" pos:column="15"/></name> <name pos:line="109" pos:column="16">nlmsgerr<pos:position pos:line="109" pos:column="24"/></name></name> <modifier pos:line="109" pos:column="25">*<pos:position pos:line="109" pos:column="26"/></modifier></type><name pos:line="109" pos:column="26">msg_error<pos:position pos:line="109" pos:column="35"/></name></decl>;<pos:position pos:line="109" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="111" pos:column="9">msg_error<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">=<pos:position pos:line="111" pos:column="20"/></operator> <call><name pos:line="111" pos:column="21">NLMSG_DATA<pos:position pos:line="111" pos:column="31"/></name><argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">h<pos:position pos:line="111" pos:column="33"/></name></expr></argument>)<pos:position pos:line="111" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">WARNING<pos:position pos:line="112" pos:column="16"/></name> <argument_list pos:line="112" pos:column="17">(<argument><expr><literal type="string" pos:line="112" pos:column="18">"tcpconns plugin: conn_read_netlink: Received error %i."<pos:position pos:line="112" pos:column="74"/></literal></expr></argument>,
	    <argument><expr><name><name pos:line="113" pos:column="13">msg_error<pos:position pos:line="113" pos:column="22"/></name><operator pos:line="113" pos:column="22">-&gt;<pos:position pos:line="113" pos:column="27"/></operator><name pos:line="113" pos:column="24">error<pos:position pos:line="113" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="115" pos:column="9">close<pos:position pos:line="115" pos:column="14"/></name> <argument_list pos:line="115" pos:column="15">(<argument><expr><name pos:line="115" pos:column="16">fd<pos:position pos:line="115" pos:column="18"/></name></expr></argument>)<pos:position pos:line="115" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="20"/></expr_stmt>
	<return pos:line="116" pos:column="9">return <expr><operator pos:line="116" pos:column="16">(<pos:position pos:line="116" pos:column="17"/></operator><literal type="number" pos:line="116" pos:column="17">1<pos:position pos:line="116" pos:column="18"/></literal><operator pos:line="116" pos:column="18">)<pos:position pos:line="116" pos:column="19"/></operator></expr>;<pos:position pos:line="116" pos:column="20"/></return>
      }<pos:position pos:line="117" pos:column="8"/></block></then></if></elseif></if>

      <expr_stmt><expr><name pos:line="119" pos:column="7">r<pos:position pos:line="119" pos:column="8"/></name> <operator pos:line="119" pos:column="9">=<pos:position pos:line="119" pos:column="10"/></operator> <call><name pos:line="119" pos:column="11">NLMSG_DATA<pos:position pos:line="119" pos:column="21"/></name><argument_list pos:line="119" pos:column="21">(<argument><expr><name pos:line="119" pos:column="22">h<pos:position pos:line="119" pos:column="23"/></name></expr></argument>)<pos:position pos:line="119" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="25"/></expr_stmt>

      <comment type="block" pos:line="121" pos:column="7">/* This code does not (need to) distinguish between IPv4 and IPv6. */</comment>
      <expr_stmt><expr><call><name pos:line="122" pos:column="7">conn_handle_ports<pos:position pos:line="122" pos:column="24"/></name> <argument_list pos:line="122" pos:column="25">(<argument><expr><call><name pos:line="122" pos:column="26">ntohs<pos:position pos:line="122" pos:column="31"/></name><argument_list pos:line="122" pos:column="31">(<argument><expr><name><name pos:line="122" pos:column="32">r<pos:position pos:line="122" pos:column="33"/></name><operator pos:line="122" pos:column="33">-&gt;<pos:position pos:line="122" pos:column="38"/></operator><name pos:line="122" pos:column="35">id<pos:position pos:line="122" pos:column="37"/></name><operator pos:line="122" pos:column="37">.<pos:position pos:line="122" pos:column="38"/></operator><name pos:line="122" pos:column="38">idiag_sport<pos:position pos:line="122" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="50"/></argument_list></call></expr></argument>,
	  <argument><expr><call><name pos:line="123" pos:column="11">ntohs<pos:position pos:line="123" pos:column="16"/></name><argument_list pos:line="123" pos:column="16">(<argument><expr><name><name pos:line="123" pos:column="17">r<pos:position pos:line="123" pos:column="18"/></name><operator pos:line="123" pos:column="18">-&gt;<pos:position pos:line="123" pos:column="23"/></operator><name pos:line="123" pos:column="20">id<pos:position pos:line="123" pos:column="22"/></name><operator pos:line="123" pos:column="22">.<pos:position pos:line="123" pos:column="23"/></operator><name pos:line="123" pos:column="23">idiag_dport<pos:position pos:line="123" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="35"/></argument_list></call></expr></argument>,
	  <argument><expr><name><name pos:line="124" pos:column="11">r<pos:position pos:line="124" pos:column="12"/></name><operator pos:line="124" pos:column="12">-&gt;<pos:position pos:line="124" pos:column="17"/></operator><name pos:line="124" pos:column="14">idiag_state<pos:position pos:line="124" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt>

      <expr_stmt><expr><name pos:line="126" pos:column="7">h<pos:position pos:line="126" pos:column="8"/></name> <operator pos:line="126" pos:column="9">=<pos:position pos:line="126" pos:column="10"/></operator> <call><name pos:line="126" pos:column="11">NLMSG_NEXT<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">h<pos:position pos:line="126" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="25">status<pos:position pos:line="126" pos:column="31"/></name></expr></argument>)<pos:position pos:line="126" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="127" pos:column="6"/></block></while> <comment type="block" pos:line="127" pos:column="7">/* while (NLMSG_OK) */</comment>
  }<pos:position pos:line="128" pos:column="4"/></block></while> <comment type="block" pos:line="128" pos:column="5">/* while (1) */</comment>

  <comment type="block" pos:line="130" pos:column="3">/* Not reached because the while() loop above handles the exit condition. */</comment>
  <return pos:line="131" pos:column="3">return <expr><operator pos:line="131" pos:column="10">(<pos:position pos:line="131" pos:column="11"/></operator><literal type="number" pos:line="131" pos:column="11">0<pos:position pos:line="131" pos:column="12"/></literal><operator pos:line="131" pos:column="12">)<pos:position pos:line="131" pos:column="13"/></operator></expr>;<pos:position pos:line="131" pos:column="14"/></return>
<cpp:else pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">else<pos:position pos:line="132" pos:column="6"/></cpp:directive></cpp:else>
  <return pos:line="133" pos:column="3">return <expr><operator pos:line="133" pos:column="10">(<pos:position pos:line="133" pos:column="11"/></operator><literal type="number" pos:line="133" pos:column="11">1<pos:position pos:line="133" pos:column="12"/></literal><operator pos:line="133" pos:column="12">)<pos:position pos:line="133" pos:column="13"/></operator></expr>;<pos:position pos:line="133" pos:column="14"/></return>
<cpp:endif pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">endif<pos:position pos:line="134" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="134" pos:column="8">/* HAVE_STRUCT_LINUX_INET_DIAG_REQ */</comment>
}<pos:position pos:line="135" pos:column="2"/></block></function></unit>
