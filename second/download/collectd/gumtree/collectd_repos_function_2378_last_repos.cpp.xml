<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2378_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">cj_curl_callback<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="43">/* {{{ */</comment>
                               <parameter><decl><type><name pos:line="2" pos:column="32">size_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">size<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">nmemb<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">void<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">user_data<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list> <block pos:line="2" pos:column="76">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cj_t<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">db<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">len<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">yajl_status<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">status<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">len<pos:position pos:line="7" pos:column="6"/></name> <operator pos:line="7" pos:column="7">=<pos:position pos:line="7" pos:column="8"/></operator> <name pos:line="7" pos:column="9">size<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">nmemb<pos:position pos:line="7" pos:column="21"/></name></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">len<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">len<pos:position pos:line="10" pos:column="15"/></name></expr>;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">db<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <name pos:line="12" pos:column="8">user_data<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">db<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">==<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">status<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">yajl_parse<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name><name pos:line="16" pos:column="23">db<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">yajl<pos:position pos:line="16" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">unsigned<pos:position pos:line="16" pos:column="42"/></name> <name pos:line="16" pos:column="43">char<pos:position pos:line="16" pos:column="47"/></name> <operator pos:line="16" pos:column="48">*<pos:position pos:line="16" pos:column="49"/></operator><operator pos:line="16" pos:column="49">)<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">buf<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">len<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">==<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">yajl_status_ok<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">len<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></return></block></then>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><operator pos:line="19" pos:column="5">!<pos:position pos:line="19" pos:column="6"/></operator><name pos:line="19" pos:column="6">HAVE_YAJL_V2<pos:position pos:line="19" pos:column="18"/></name></expr></cpp:if>
  <elseif pos:line="20" pos:column="3">else <if pos:line="20" pos:column="8">if <condition pos:line="20" pos:column="11">(<expr><name pos:line="20" pos:column="12">status<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">==<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">yajl_status_insufficient_data<pos:position pos:line="20" pos:column="51"/></name></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">len<pos:position pos:line="21" pos:column="15"/></name></expr>;<pos:position pos:line="21" pos:column="16"/></return></block></then></if></elseif></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="24" pos:column="3">unsigned<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">char<pos:position pos:line="24" pos:column="16"/></name> <modifier pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></modifier></type><name pos:line="24" pos:column="18">msg<pos:position pos:line="24" pos:column="21"/></name> <init pos:line="24" pos:column="22">=
      <expr><call><name pos:line="25" pos:column="7">yajl_get_error<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name><name pos:line="25" pos:column="22">db<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">yajl<pos:position pos:line="25" pos:column="30"/></name></name></expr></argument>, <comment type="block" pos:line="25" pos:column="32">/* verbose = */</comment> <argument><expr><literal type="number" pos:line="25" pos:column="48">1<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>,
                     <comment type="block" pos:line="26" pos:column="22">/* jsonText = */</comment> <argument><expr><operator pos:line="26" pos:column="39">(<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">unsigned<pos:position pos:line="26" pos:column="48"/></name> <name pos:line="26" pos:column="49">char<pos:position pos:line="26" pos:column="53"/></name> <operator pos:line="26" pos:column="54">*<pos:position pos:line="26" pos:column="55"/></operator><operator pos:line="26" pos:column="55">)<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="56">buf<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="61">(<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="62">unsigned<pos:position pos:line="26" pos:column="70"/></name> <name pos:line="26" pos:column="71">int<pos:position pos:line="26" pos:column="74"/></name><operator pos:line="26" pos:column="74">)<pos:position pos:line="26" pos:column="75"/></operator><name pos:line="26" pos:column="75">len<pos:position pos:line="26" pos:column="78"/></name></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="80"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">ERROR<pos:position pos:line="27" pos:column="8"/></name><argument_list pos:line="27" pos:column="8">(<argument><expr><literal type="string" pos:line="27" pos:column="9">"curl_json plugin: yajl_parse failed: %s"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">msg<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">yajl_free_error<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name><name pos:line="28" pos:column="19">db<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">yajl<pos:position pos:line="28" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">msg<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">0<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return> <comment type="block" pos:line="29" pos:column="13">/* abort write callback */</comment>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
