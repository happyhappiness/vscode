<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2162_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_values<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">ret_buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">ret_buffer_len<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">value_t<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier><modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">ret_values<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">size_t<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">ret_num_values<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list> <block pos:line="2" pos:column="76">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buffer<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">ret_buffer<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_len<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">ret_buffer_len<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uint16_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">tmp16<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">exp_size<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">uint16_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">pkg_length<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uint16_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">pkg_type<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">size_t<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">pkg_numval<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">uint8_t<pos:position pos:line="13" pos:column="10"/></name> <modifier pos:line="13" pos:column="11">*<pos:position pos:line="13" pos:column="12"/></modifier></type><name pos:line="13" pos:column="12">pkg_types<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">value_t<pos:position pos:line="14" pos:column="10"/></name> <modifier pos:line="14" pos:column="11">*<pos:position pos:line="14" pos:column="12"/></modifier></type><name pos:line="14" pos:column="12">pkg_values<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">buffer_len<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&lt;<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="20">15<pos:position pos:line="16" pos:column="22"/></literal></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23"> <block pos:line="16" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">NOTICE<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="string" pos:line="17" pos:column="12">"network plugin: packet is too short: "<pos:position pos:line="17" pos:column="51"/></literal>
           <literal type="string" pos:line="18" pos:column="12">"buffer_len = %zu"<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>,
           <argument><expr><name pos:line="19" pos:column="12">buffer_len<pos:position pos:line="19" pos:column="22"/></name></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">memcpy<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">void<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></operator><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator><operator pos:line="23" pos:column="18">&amp;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="19">tmp16<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">buffer<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="34">sizeof<argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">tmp16<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">buffer<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">+=<pos:position pos:line="24" pos:column="12"/></operator> <sizeof pos:line="24" pos:column="13">sizeof<argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">tmp16<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">pkg_type<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <call><name pos:line="25" pos:column="14">ntohs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">tmp16<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">memcpy<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><operator pos:line="27" pos:column="10">(<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">void<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></operator><operator pos:line="27" pos:column="17">)<pos:position pos:line="27" pos:column="18"/></operator><operator pos:line="27" pos:column="18">&amp;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="19">tmp16<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="26">buffer<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="34">sizeof<argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">tmp16<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="28" pos:column="3">buffer<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">+=<pos:position pos:line="28" pos:column="12"/></operator> <sizeof pos:line="28" pos:column="13">sizeof<argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">tmp16<pos:position pos:line="28" pos:column="25"/></name></expr></argument>)<pos:position pos:line="28" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">pkg_length<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">ntohs<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">tmp16<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">memcpy<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><operator pos:line="31" pos:column="10">(<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">void<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">*<pos:position pos:line="31" pos:column="17"/></operator><operator pos:line="31" pos:column="17">)<pos:position pos:line="31" pos:column="18"/></operator><operator pos:line="31" pos:column="18">&amp;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="19">tmp16<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="26">buffer<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="34">sizeof<argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">tmp16<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="32" pos:column="3">buffer<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">+=<pos:position pos:line="32" pos:column="12"/></operator> <sizeof pos:line="32" pos:column="13">sizeof<argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">tmp16<pos:position pos:line="32" pos:column="25"/></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">pkg_numval<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">size_t<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">)<pos:position pos:line="33" pos:column="24"/></operator><call><name pos:line="33" pos:column="24">ntohs<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">tmp16<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">assert<pos:position pos:line="35" pos:column="9"/></name><argument_list pos:line="35" pos:column="9">(<argument><expr><name pos:line="35" pos:column="10">pkg_type<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">==<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">TYPE_VALUES<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><name pos:line="37" pos:column="3">exp_size<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator>
      <literal type="number" pos:line="38" pos:column="7">3<pos:position pos:line="38" pos:column="8"/></literal> <operator pos:line="38" pos:column="9">*<pos:position pos:line="38" pos:column="10"/></operator> <sizeof pos:line="38" pos:column="11">sizeof<argument_list pos:line="38" pos:column="17">(<argument><expr><name pos:line="38" pos:column="18">uint16_t<pos:position pos:line="38" pos:column="26"/></name></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></sizeof> <operator pos:line="38" pos:column="28">+<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="30">pkg_numval<pos:position pos:line="38" pos:column="40"/></name> <operator pos:line="38" pos:column="41">*<pos:position pos:line="38" pos:column="42"/></operator> <operator pos:line="38" pos:column="43">(<pos:position pos:line="38" pos:column="44"/></operator><sizeof pos:line="38" pos:column="44">sizeof<argument_list pos:line="38" pos:column="50">(<argument><expr><name pos:line="38" pos:column="51">uint8_t<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></sizeof> <operator pos:line="38" pos:column="60">+<pos:position pos:line="38" pos:column="61"/></operator> <sizeof pos:line="38" pos:column="62">sizeof<argument_list pos:line="38" pos:column="68">(<argument><expr><name pos:line="38" pos:column="69">value_t<pos:position pos:line="38" pos:column="76"/></name></expr></argument>)<pos:position pos:line="38" pos:column="77"/></argument_list></sizeof><operator pos:line="38" pos:column="77">)<pos:position pos:line="38" pos:column="78"/></operator></expr>;<pos:position pos:line="38" pos:column="79"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">buffer_len<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">&lt;<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="20">exp_size<pos:position pos:line="39" pos:column="28"/></name></expr>)<pos:position pos:line="39" pos:column="29"/></condition><then pos:line="39" pos:column="29"> <block pos:line="39" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">WARNING<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><literal type="string" pos:line="40" pos:column="13">"network plugin: parse_part_values: "<pos:position pos:line="40" pos:column="50"/></literal>
            <literal type="string" pos:line="41" pos:column="13">"Packet too short: "<pos:position pos:line="41" pos:column="33"/></literal>
            <literal type="string" pos:line="42" pos:column="13">"Chunk of size %zu expected, "<pos:position pos:line="42" pos:column="43"/></literal>
            <literal type="string" pos:line="43" pos:column="13">"but buffer has only %zu bytes left."<pos:position pos:line="43" pos:column="50"/></literal></expr></argument>,
            <argument><expr><name pos:line="44" pos:column="13">exp_size<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="23">buffer_len<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">-<pos:position pos:line="45" pos:column="13"/></operator><literal type="number" pos:line="45" pos:column="13">1<pos:position pos:line="45" pos:column="14"/></literal></expr>;<pos:position pos:line="45" pos:column="15"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">assert<pos:position pos:line="47" pos:column="9"/></name><argument_list pos:line="47" pos:column="9">(<argument><expr><name pos:line="47" pos:column="10">pkg_numval<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">&lt;=<pos:position pos:line="47" pos:column="26"/></operator> <operator pos:line="47" pos:column="24">(<pos:position pos:line="47" pos:column="25"/></operator><operator pos:line="47" pos:column="25">(<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="26">buffer_len<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">-<pos:position pos:line="47" pos:column="38"/></operator> <literal type="number" pos:line="47" pos:column="39">6<pos:position pos:line="47" pos:column="40"/></literal><operator pos:line="47" pos:column="40">)<pos:position pos:line="47" pos:column="41"/></operator> <operator pos:line="47" pos:column="42">/<pos:position pos:line="47" pos:column="43"/></operator> <literal type="number" pos:line="47" pos:column="44">9<pos:position pos:line="47" pos:column="45"/></literal><operator pos:line="47" pos:column="45">)<pos:position pos:line="47" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name pos:line="49" pos:column="7">pkg_length<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">!=<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="21">exp_size<pos:position pos:line="49" pos:column="29"/></name></expr>)<pos:position pos:line="49" pos:column="30"/></condition><then pos:line="49" pos:column="30"> <block pos:line="49" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">WARNING<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="string" pos:line="50" pos:column="13">"network plugin: parse_part_values: "<pos:position pos:line="50" pos:column="50"/></literal>
            <literal type="string" pos:line="51" pos:column="13">"Length and number of values "<pos:position pos:line="51" pos:column="43"/></literal>
            <literal type="string" pos:line="52" pos:column="13">"in the packet don't match."<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="56" pos:column="3">pkg_types<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <call><name pos:line="56" pos:column="15">calloc<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">pkg_numval<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="34">sizeof<argument_list pos:line="56" pos:column="40">(<argument><expr><operator pos:line="56" pos:column="41">*<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="42">pkg_types<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="57" pos:column="3">pkg_values<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">calloc<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">pkg_numval<pos:position pos:line="57" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="35">sizeof<argument_list pos:line="57" pos:column="41">(<argument><expr><operator pos:line="57" pos:column="42">*<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="43">pkg_values<pos:position pos:line="57" pos:column="53"/></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="56"/></expr_stmt>
  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><operator pos:line="58" pos:column="7">(<pos:position pos:line="58" pos:column="8"/></operator><name pos:line="58" pos:column="8">pkg_types<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">==<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">NULL<pos:position pos:line="58" pos:column="25"/></name><operator pos:line="58" pos:column="25">)<pos:position pos:line="58" pos:column="26"/></operator> <operator pos:line="58" pos:column="27">||<pos:position pos:line="58" pos:column="29"/></operator> <operator pos:line="58" pos:column="30">(<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="31">pkg_values<pos:position pos:line="58" pos:column="41"/></name> <operator pos:line="58" pos:column="42">==<pos:position pos:line="58" pos:column="44"/></operator> <name pos:line="58" pos:column="45">NULL<pos:position pos:line="58" pos:column="49"/></name><operator pos:line="58" pos:column="49">)<pos:position pos:line="58" pos:column="50"/></operator></expr>)<pos:position pos:line="58" pos:column="51"/></condition><then pos:line="58" pos:column="51"> <block pos:line="58" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">sfree<pos:position pos:line="59" pos:column="10"/></name><argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">pkg_types<pos:position pos:line="59" pos:column="20"/></name></expr></argument>)<pos:position pos:line="59" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">sfree<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">pkg_values<pos:position pos:line="60" pos:column="21"/></name></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">ERROR<pos:position pos:line="61" pos:column="10"/></name><argument_list pos:line="61" pos:column="10">(<argument><expr><literal type="string" pos:line="61" pos:column="11">"network plugin: parse_part_values: calloc failed."<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="64"/></expr_stmt>
    <return pos:line="62" pos:column="5">return <expr><operator pos:line="62" pos:column="12">-<pos:position pos:line="62" pos:column="13"/></operator><literal type="number" pos:line="62" pos:column="13">1<pos:position pos:line="62" pos:column="14"/></literal></expr>;<pos:position pos:line="62" pos:column="15"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="65" pos:column="3">memcpy<pos:position pos:line="65" pos:column="9"/></name><argument_list pos:line="65" pos:column="9">(<argument><expr><name pos:line="65" pos:column="10">pkg_types<pos:position pos:line="65" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="21">buffer<pos:position pos:line="65" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="29">pkg_numval<pos:position pos:line="65" pos:column="39"/></name> <operator pos:line="65" pos:column="40">*<pos:position pos:line="65" pos:column="41"/></operator> <sizeof pos:line="65" pos:column="42">sizeof<argument_list pos:line="65" pos:column="48">(<argument><expr><operator pos:line="65" pos:column="49">*<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="50">pkg_types<pos:position pos:line="65" pos:column="59"/></name></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><name pos:line="66" pos:column="3">buffer<pos:position pos:line="66" pos:column="9"/></name> <operator pos:line="66" pos:column="10">+=<pos:position pos:line="66" pos:column="12"/></operator> <name pos:line="66" pos:column="13">pkg_numval<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">*<pos:position pos:line="66" pos:column="25"/></operator> <sizeof pos:line="66" pos:column="26">sizeof<argument_list pos:line="66" pos:column="32">(<argument><expr><operator pos:line="66" pos:column="33">*<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="34">pkg_types<pos:position pos:line="66" pos:column="43"/></name></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="66" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">memcpy<pos:position pos:line="67" pos:column="9"/></name><argument_list pos:line="67" pos:column="9">(<argument><expr><name pos:line="67" pos:column="10">pkg_values<pos:position pos:line="67" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="22">buffer<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="30">pkg_numval<pos:position pos:line="67" pos:column="40"/></name> <operator pos:line="67" pos:column="41">*<pos:position pos:line="67" pos:column="42"/></operator> <sizeof pos:line="67" pos:column="43">sizeof<argument_list pos:line="67" pos:column="49">(<argument><expr><operator pos:line="67" pos:column="50">*<pos:position pos:line="67" pos:column="51"/></operator><name pos:line="67" pos:column="51">pkg_values<pos:position pos:line="67" pos:column="61"/></name></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name pos:line="68" pos:column="3">buffer<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">+=<pos:position pos:line="68" pos:column="12"/></operator> <name pos:line="68" pos:column="13">pkg_numval<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">*<pos:position pos:line="68" pos:column="25"/></operator> <sizeof pos:line="68" pos:column="26">sizeof<argument_list pos:line="68" pos:column="32">(<argument><expr><operator pos:line="68" pos:column="33">*<pos:position pos:line="68" pos:column="34"/></operator><name pos:line="68" pos:column="34">pkg_values<pos:position pos:line="68" pos:column="44"/></name></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></sizeof></expr>;<pos:position pos:line="68" pos:column="46"/></expr_stmt>

  <for pos:line="70" pos:column="3">for <control pos:line="70" pos:column="7">(<init><decl><type><name pos:line="70" pos:column="8">size_t<pos:position pos:line="70" pos:column="14"/></name></type> <name pos:line="70" pos:column="15">i<pos:position pos:line="70" pos:column="16"/></name> <init pos:line="70" pos:column="17">= <expr><literal type="number" pos:line="70" pos:column="19">0<pos:position pos:line="70" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="70" pos:column="21"/></init> <condition><expr><name pos:line="70" pos:column="22">i<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">&lt;<pos:position pos:line="70" pos:column="28"/></operator> <name pos:line="70" pos:column="26">pkg_numval<pos:position pos:line="70" pos:column="36"/></name></expr>;<pos:position pos:line="70" pos:column="37"/></condition> <incr><expr><name pos:line="70" pos:column="38">i<pos:position pos:line="70" pos:column="39"/></name><operator pos:line="70" pos:column="39">++<pos:position pos:line="70" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="42"/></control> <block pos:line="70" pos:column="43">{
    <switch pos:line="71" pos:column="5">switch <condition pos:line="71" pos:column="12">(<expr><name><name pos:line="71" pos:column="13">pkg_types<pos:position pos:line="71" pos:column="22"/></name><index pos:line="71" pos:column="22">[<expr><name pos:line="71" pos:column="23">i<pos:position pos:line="71" pos:column="24"/></name></expr>]<pos:position pos:line="71" pos:column="25"/></index></name></expr>)<pos:position pos:line="71" pos:column="26"/></condition> <block pos:line="71" pos:column="27">{
    <case pos:line="72" pos:column="5">case <expr><name pos:line="72" pos:column="10">DS_TYPE_COUNTER<pos:position pos:line="72" pos:column="25"/></name></expr>:<pos:position pos:line="72" pos:column="26"/></case>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">pkg_values<pos:position pos:line="73" pos:column="17"/></name><index pos:line="73" pos:column="17">[<expr><name pos:line="73" pos:column="18">i<pos:position pos:line="73" pos:column="19"/></name></expr>]<pos:position pos:line="73" pos:column="20"/></index></name><operator pos:line="73" pos:column="20">.<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">counter<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">=<pos:position pos:line="73" pos:column="30"/></operator> <operator pos:line="73" pos:column="31">(<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">counter_t<pos:position pos:line="73" pos:column="41"/></name><operator pos:line="73" pos:column="41">)<pos:position pos:line="73" pos:column="42"/></operator><call><name pos:line="73" pos:column="42">ntohll<pos:position pos:line="73" pos:column="48"/></name><argument_list pos:line="73" pos:column="48">(<argument><expr><name><name pos:line="73" pos:column="49">pkg_values<pos:position pos:line="73" pos:column="59"/></name><index pos:line="73" pos:column="59">[<expr><name pos:line="73" pos:column="60">i<pos:position pos:line="73" pos:column="61"/></name></expr>]<pos:position pos:line="73" pos:column="62"/></index></name><operator pos:line="73" pos:column="62">.<pos:position pos:line="73" pos:column="63"/></operator><name pos:line="73" pos:column="63">counter<pos:position pos:line="73" pos:column="70"/></name></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="72"/></expr_stmt>
      <break pos:line="74" pos:column="7">break;<pos:position pos:line="74" pos:column="13"/></break>

    <case pos:line="76" pos:column="5">case <expr><name pos:line="76" pos:column="10">DS_TYPE_GAUGE<pos:position pos:line="76" pos:column="23"/></name></expr>:<pos:position pos:line="76" pos:column="24"/></case>
      <expr_stmt><expr><name><name pos:line="77" pos:column="7">pkg_values<pos:position pos:line="77" pos:column="17"/></name><index pos:line="77" pos:column="17">[<expr><name pos:line="77" pos:column="18">i<pos:position pos:line="77" pos:column="19"/></name></expr>]<pos:position pos:line="77" pos:column="20"/></index></name><operator pos:line="77" pos:column="20">.<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">gauge<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">=<pos:position pos:line="77" pos:column="28"/></operator> <operator pos:line="77" pos:column="29">(<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">gauge_t<pos:position pos:line="77" pos:column="37"/></name><operator pos:line="77" pos:column="37">)<pos:position pos:line="77" pos:column="38"/></operator><call><name pos:line="77" pos:column="38">ntohd<pos:position pos:line="77" pos:column="43"/></name><argument_list pos:line="77" pos:column="43">(<argument><expr><name><name pos:line="77" pos:column="44">pkg_values<pos:position pos:line="77" pos:column="54"/></name><index pos:line="77" pos:column="54">[<expr><name pos:line="77" pos:column="55">i<pos:position pos:line="77" pos:column="56"/></name></expr>]<pos:position pos:line="77" pos:column="57"/></index></name><operator pos:line="77" pos:column="57">.<pos:position pos:line="77" pos:column="58"/></operator><name pos:line="77" pos:column="58">gauge<pos:position pos:line="77" pos:column="63"/></name></expr></argument>)<pos:position pos:line="77" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="65"/></expr_stmt>
      <break pos:line="78" pos:column="7">break;<pos:position pos:line="78" pos:column="13"/></break>

    <case pos:line="80" pos:column="5">case <expr><name pos:line="80" pos:column="10">DS_TYPE_DERIVE<pos:position pos:line="80" pos:column="24"/></name></expr>:<pos:position pos:line="80" pos:column="25"/></case>
      <expr_stmt><expr><name><name pos:line="81" pos:column="7">pkg_values<pos:position pos:line="81" pos:column="17"/></name><index pos:line="81" pos:column="17">[<expr><name pos:line="81" pos:column="18">i<pos:position pos:line="81" pos:column="19"/></name></expr>]<pos:position pos:line="81" pos:column="20"/></index></name><operator pos:line="81" pos:column="20">.<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="21">derive<pos:position pos:line="81" pos:column="27"/></name> <operator pos:line="81" pos:column="28">=<pos:position pos:line="81" pos:column="29"/></operator> <operator pos:line="81" pos:column="30">(<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="31">derive_t<pos:position pos:line="81" pos:column="39"/></name><operator pos:line="81" pos:column="39">)<pos:position pos:line="81" pos:column="40"/></operator><call><name pos:line="81" pos:column="40">ntohll<pos:position pos:line="81" pos:column="46"/></name><argument_list pos:line="81" pos:column="46">(<argument><expr><name><name pos:line="81" pos:column="47">pkg_values<pos:position pos:line="81" pos:column="57"/></name><index pos:line="81" pos:column="57">[<expr><name pos:line="81" pos:column="58">i<pos:position pos:line="81" pos:column="59"/></name></expr>]<pos:position pos:line="81" pos:column="60"/></index></name><operator pos:line="81" pos:column="60">.<pos:position pos:line="81" pos:column="61"/></operator><name pos:line="81" pos:column="61">derive<pos:position pos:line="81" pos:column="67"/></name></expr></argument>)<pos:position pos:line="81" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="69"/></expr_stmt>
      <break pos:line="82" pos:column="7">break;<pos:position pos:line="82" pos:column="13"/></break>

    <case pos:line="84" pos:column="5">case <expr><name pos:line="84" pos:column="10">DS_TYPE_ABSOLUTE<pos:position pos:line="84" pos:column="26"/></name></expr>:<pos:position pos:line="84" pos:column="27"/></case>
      <expr_stmt><expr><name><name pos:line="85" pos:column="7">pkg_values<pos:position pos:line="85" pos:column="17"/></name><index pos:line="85" pos:column="17">[<expr><name pos:line="85" pos:column="18">i<pos:position pos:line="85" pos:column="19"/></name></expr>]<pos:position pos:line="85" pos:column="20"/></index></name><operator pos:line="85" pos:column="20">.<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="21">absolute<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <operator pos:line="85" pos:column="32">(<pos:position pos:line="85" pos:column="33"/></operator><name pos:line="85" pos:column="33">absolute_t<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">)<pos:position pos:line="85" pos:column="44"/></operator><call><name pos:line="85" pos:column="44">ntohll<pos:position pos:line="85" pos:column="50"/></name><argument_list pos:line="85" pos:column="50">(<argument><expr><name><name pos:line="85" pos:column="51">pkg_values<pos:position pos:line="85" pos:column="61"/></name><index pos:line="85" pos:column="61">[<expr><name pos:line="85" pos:column="62">i<pos:position pos:line="85" pos:column="63"/></name></expr>]<pos:position pos:line="85" pos:column="64"/></index></name><operator pos:line="85" pos:column="64">.<pos:position pos:line="85" pos:column="65"/></operator><name pos:line="85" pos:column="65">absolute<pos:position pos:line="85" pos:column="73"/></name></expr></argument>)<pos:position pos:line="85" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="75"/></expr_stmt>
      <break pos:line="86" pos:column="7">break;<pos:position pos:line="86" pos:column="13"/></break>

    <default pos:line="88" pos:column="5">default:<pos:position pos:line="88" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">NOTICE<pos:position pos:line="89" pos:column="13"/></name><argument_list pos:line="89" pos:column="13">(<argument><expr><literal type="string" pos:line="89" pos:column="14">"network plugin: parse_part_values: "<pos:position pos:line="89" pos:column="51"/></literal>
             <literal type="string" pos:line="90" pos:column="14">"Don't know how to handle data source type %"<pos:position pos:line="90" pos:column="59"/></literal> <name pos:line="90" pos:column="60">PRIu8<pos:position pos:line="90" pos:column="65"/></name></expr></argument>,
             <argument><expr><name><name pos:line="91" pos:column="14">pkg_types<pos:position pos:line="91" pos:column="23"/></name><index pos:line="91" pos:column="23">[<expr><name pos:line="91" pos:column="24">i<pos:position pos:line="91" pos:column="25"/></name></expr>]<pos:position pos:line="91" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="91" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">sfree<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">pkg_types<pos:position pos:line="92" pos:column="22"/></name></expr></argument>)<pos:position pos:line="92" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">sfree<pos:position pos:line="93" pos:column="12"/></name><argument_list pos:line="93" pos:column="12">(<argument><expr><name pos:line="93" pos:column="13">pkg_values<pos:position pos:line="93" pos:column="23"/></name></expr></argument>)<pos:position pos:line="93" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
      <return pos:line="94" pos:column="7">return <expr><operator pos:line="94" pos:column="14">-<pos:position pos:line="94" pos:column="15"/></operator><literal type="number" pos:line="94" pos:column="15">1<pos:position pos:line="94" pos:column="16"/></literal></expr>;<pos:position pos:line="94" pos:column="17"/></return>
    }<pos:position pos:line="95" pos:column="6"/></block></switch> <comment type="block" pos:line="95" pos:column="7">/* switch (pkg_types[i]) */</comment>
  }<pos:position pos:line="96" pos:column="4"/></block></for>

  <expr_stmt><expr><operator pos:line="98" pos:column="3">*<pos:position pos:line="98" pos:column="4"/></operator><name pos:line="98" pos:column="4">ret_buffer<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name pos:line="98" pos:column="17">buffer<pos:position pos:line="98" pos:column="23"/></name></expr>;<pos:position pos:line="98" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="99" pos:column="3">*<pos:position pos:line="99" pos:column="4"/></operator><name pos:line="99" pos:column="4">ret_buffer_len<pos:position pos:line="99" pos:column="18"/></name> <operator pos:line="99" pos:column="19">=<pos:position pos:line="99" pos:column="20"/></operator> <name pos:line="99" pos:column="21">buffer_len<pos:position pos:line="99" pos:column="31"/></name> <operator pos:line="99" pos:column="32">-<pos:position pos:line="99" pos:column="33"/></operator> <name pos:line="99" pos:column="34">pkg_length<pos:position pos:line="99" pos:column="44"/></name></expr>;<pos:position pos:line="99" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="100" pos:column="3">*<pos:position pos:line="100" pos:column="4"/></operator><name pos:line="100" pos:column="4">ret_num_values<pos:position pos:line="100" pos:column="18"/></name> <operator pos:line="100" pos:column="19">=<pos:position pos:line="100" pos:column="20"/></operator> <name pos:line="100" pos:column="21">pkg_numval<pos:position pos:line="100" pos:column="31"/></name></expr>;<pos:position pos:line="100" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="101" pos:column="3">*<pos:position pos:line="101" pos:column="4"/></operator><name pos:line="101" pos:column="4">ret_values<pos:position pos:line="101" pos:column="14"/></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <name pos:line="101" pos:column="17">pkg_values<pos:position pos:line="101" pos:column="27"/></name></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="103" pos:column="3">sfree<pos:position pos:line="103" pos:column="8"/></name><argument_list pos:line="103" pos:column="8">(<argument><expr><name pos:line="103" pos:column="9">pkg_types<pos:position pos:line="103" pos:column="18"/></name></expr></argument>)<pos:position pos:line="103" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="20"/></expr_stmt>

  <return pos:line="105" pos:column="3">return <expr><literal type="number" pos:line="105" pos:column="10">0<pos:position pos:line="105" pos:column="11"/></literal></expr>;<pos:position pos:line="105" pos:column="12"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
