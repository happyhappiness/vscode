<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1657_collectd-4.10.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_dispatch_values_secure<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">value_list_t<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">vl<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">value_list_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">vl_copy<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">vl<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">EINVAL<pos:position pos:line="7" pos:column="18"/></name></expr>;<pos:position pos:line="7" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memcpy<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><operator pos:line="9" pos:column="11">&amp;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="12">vl_copy<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">vl<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="25">sizeof <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">vl_copy<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Write callbacks must not change the values and meta pointers, so we can
   * savely skip copying those and make this more efficient. */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">pre_cache_chain<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">==<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">NULL<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">)<pos:position pos:line="13" pos:column="32"/></operator> <operator pos:line="13" pos:column="33">&amp;&amp;<pos:position pos:line="13" pos:column="43"/></operator> <operator pos:line="13" pos:column="36">(<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">post_cache_chain<pos:position pos:line="13" pos:column="53"/></name> <operator pos:line="13" pos:column="54">==<pos:position pos:line="13" pos:column="56"/></operator> <name pos:line="13" pos:column="57">NULL<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator></expr>)<pos:position pos:line="13" pos:column="63"/></condition><then pos:line="13" pos:column="63">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><call><name pos:line="14" pos:column="13">plugin_dispatch_values<pos:position pos:line="14" pos:column="35"/></name> <argument_list pos:line="14" pos:column="36">(<argument><expr><operator pos:line="14" pos:column="37">&amp;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="38">vl_copy<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call><operator pos:line="14" pos:column="46">)<pos:position pos:line="14" pos:column="47"/></operator></expr>;<pos:position pos:line="14" pos:column="48"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* Set pointers to NULL, just to be on the save side. */</comment>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">vl_copy<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">values<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">vl_copy<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">.<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">meta<pos:position pos:line="18" pos:column="15"/></name></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">NULL<pos:position pos:line="18" pos:column="22"/></name></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">vl_copy<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">values<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">malloc<pos:position pos:line="20" pos:column="26"/></name> <argument_list pos:line="20" pos:column="27">(<argument><expr><sizeof pos:line="20" pos:column="28">sizeof <argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator><name><name pos:line="20" pos:column="37">vl_copy<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">.<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">values<pos:position pos:line="20" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></sizeof> <operator pos:line="20" pos:column="53">*<pos:position pos:line="20" pos:column="54"/></operator> <name><name pos:line="20" pos:column="55">vl<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">-&gt;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="59">values_len<pos:position pos:line="20" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name><name pos:line="21" pos:column="7">vl_copy<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">values<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">==<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">NULL<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ERROR<pos:position pos:line="23" pos:column="10"/></name> <argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="string" pos:line="23" pos:column="12">"plugin_dispatch_values_secure: malloc failed."<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">ENOMEM<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator></expr>;<pos:position pos:line="24" pos:column="21"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">memcpy<pos:position pos:line="26" pos:column="9"/></name> <argument_list pos:line="26" pos:column="10">(<argument><expr><name><name pos:line="26" pos:column="11">vl_copy<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">values<pos:position pos:line="26" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="27">vl<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">values<pos:position pos:line="26" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="39">sizeof <argument_list pos:line="26" pos:column="46">(<argument><expr><operator pos:line="26" pos:column="47">*<pos:position pos:line="26" pos:column="48"/></operator><name><name pos:line="26" pos:column="48">vl_copy<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">.<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="56">values<pos:position pos:line="26" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></sizeof> <operator pos:line="26" pos:column="64">*<pos:position pos:line="26" pos:column="65"/></operator> <name><name pos:line="26" pos:column="66">vl<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">-&gt;<pos:position pos:line="26" pos:column="73"/></operator><name pos:line="26" pos:column="70">values_len<pos:position pos:line="26" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="82"/></expr_stmt>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name><name pos:line="28" pos:column="7">vl<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">-&gt;<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="11">meta<pos:position pos:line="28" pos:column="15"/></name></name> <operator pos:line="28" pos:column="16">!=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">NULL<pos:position pos:line="28" pos:column="23"/></name></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24">
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">vl_copy<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">.<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">meta<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <call><name pos:line="30" pos:column="20">meta_data_clone<pos:position pos:line="30" pos:column="35"/></name> <argument_list pos:line="30" pos:column="36">(<argument><expr><name><name pos:line="30" pos:column="37">vl<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">-&gt;<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="41">meta<pos:position pos:line="30" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">vl_copy<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">meta<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">==<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">NULL<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30">
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">ERROR<pos:position pos:line="33" pos:column="12"/></name> <argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="string" pos:line="33" pos:column="14">"plugin_dispatch_values_secure: meta_data_clone failed."<pos:position pos:line="33" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">free<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><name><name pos:line="34" pos:column="13">vl_copy<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">.<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">values<pos:position pos:line="34" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
      <return pos:line="35" pos:column="7">return <expr><operator pos:line="35" pos:column="14">(<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">ENOMEM<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">)<pos:position pos:line="35" pos:column="22"/></operator></expr>;<pos:position pos:line="35" pos:column="23"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if> <comment type="block" pos:line="37" pos:column="5">/* if (vl-&gt;meta) */</comment>

  <expr_stmt><expr><name pos:line="39" pos:column="3">status<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <call><name pos:line="39" pos:column="12">plugin_dispatch_values<pos:position pos:line="39" pos:column="34"/></name> <argument_list pos:line="39" pos:column="35">(<argument><expr><operator pos:line="39" pos:column="36">&amp;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="37">vl_copy<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">meta_data_destroy<pos:position pos:line="41" pos:column="20"/></name> <argument_list pos:line="41" pos:column="21">(<argument><expr><name><name pos:line="41" pos:column="22">vl_copy<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">.<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">meta<pos:position pos:line="41" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">free<pos:position pos:line="42" pos:column="7"/></name> <argument_list pos:line="42" pos:column="8">(<argument><expr><name><name pos:line="42" pos:column="9">vl_copy<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">.<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">values<pos:position pos:line="42" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>

  <return pos:line="44" pos:column="3">return <expr><operator pos:line="44" pos:column="10">(<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="11">status<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">)<pos:position pos:line="44" pos:column="18"/></operator></expr>;<pos:position pos:line="44" pos:column="19"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
