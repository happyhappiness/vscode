<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1210_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">rrd_cache_flush<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">cdtime_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">timeout<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">rrd_cache_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">rc<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">cdtime_t<pos:position pos:line="4" pos:column="17"/></name></type>     <name pos:line="4" pos:column="22">now<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier><modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">keys<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type>    <name pos:line="7" pos:column="16">keys_num<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">key<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">c_avl_iterator_t<pos:position pos:line="10" pos:column="25"/></name> <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier></type><name pos:line="10" pos:column="27">iter<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">DEBUG<pos:position pos:line="13" pos:column="14"/></name> <argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"rrdtool plugin: Flushing cache, timeout = %.3f"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="14" pos:column="25">CDTIME_T_TO_DOUBLE<pos:position pos:line="14" pos:column="43"/></name> <argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">timeout<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">now<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">cdtime<pos:position pos:line="16" pos:column="21"/></name> <argument_list pos:line="16" pos:column="22">()<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">timeout<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <call><name pos:line="17" pos:column="19">TIME_T_TO_CDTIME_T<pos:position pos:line="17" pos:column="37"/></name> <argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">timeout<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* Build a list of entries to be flushed */</comment>
	<expr_stmt><expr><name pos:line="20" pos:column="9">iter<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">c_avl_get_iterator<pos:position pos:line="20" pos:column="34"/></name> <argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">cache<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">c_avl_iterator_next<pos:position pos:line="21" pos:column="35"/></name> <argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">iter<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="43">(<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">void<pos:position pos:line="21" pos:column="48"/></name> <operator pos:line="21" pos:column="49">*<pos:position pos:line="21" pos:column="50"/></operator><operator pos:line="21" pos:column="50">)<pos:position pos:line="21" pos:column="51"/></operator> <operator pos:line="21" pos:column="52">&amp;<pos:position pos:line="21" pos:column="57"/></operator><name pos:line="21" pos:column="53">key<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">(<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">void<pos:position pos:line="21" pos:column="63"/></name> <operator pos:line="21" pos:column="64">*<pos:position pos:line="21" pos:column="65"/></operator><operator pos:line="21" pos:column="65">)<pos:position pos:line="21" pos:column="66"/></operator> <operator pos:line="21" pos:column="67">&amp;<pos:position pos:line="21" pos:column="72"/></operator><name pos:line="21" pos:column="68">rc<pos:position pos:line="21" pos:column="70"/></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call> <operator pos:line="21" pos:column="72">==<pos:position pos:line="21" pos:column="74"/></operator> <literal type="number" pos:line="21" pos:column="75">0<pos:position pos:line="21" pos:column="76"/></literal></expr>)<pos:position pos:line="21" pos:column="77"/></condition>
	<block pos:line="22" pos:column="9">{
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">rc<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">flags<pos:position pos:line="23" pos:column="30"/></name></name> <operator pos:line="23" pos:column="31">!=<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">FLAG_NONE<pos:position pos:line="23" pos:column="43"/></name></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44">
			<block type="pseudo"><continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue></block></then>
		<comment type="block" pos:line="25" pos:column="17">/* timeout == 0  =&gt;  flush everything */</comment>
		<elseif pos:line="26" pos:column="17">else <if pos:line="26" pos:column="22">if <condition pos:line="26" pos:column="25">(<expr><operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">timeout<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">!=<pos:position pos:line="26" pos:column="37"/></operator> <literal type="number" pos:line="26" pos:column="38">0<pos:position pos:line="26" pos:column="39"/></literal><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator>
				<operator pos:line="27" pos:column="33">&amp;&amp;<pos:position pos:line="27" pos:column="43"/></operator> <operator pos:line="27" pos:column="36">(<pos:position pos:line="27" pos:column="37"/></operator><operator pos:line="27" pos:column="37">(<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">now<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">-<pos:position pos:line="27" pos:column="43"/></operator> <name><name pos:line="27" pos:column="44">rc<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">-&gt;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="48">first_value<pos:position pos:line="27" pos:column="59"/></name></name><operator pos:line="27" pos:column="59">)<pos:position pos:line="27" pos:column="60"/></operator> <operator pos:line="27" pos:column="61">&lt;<pos:position pos:line="27" pos:column="65"/></operator> <name pos:line="27" pos:column="63">timeout<pos:position pos:line="27" pos:column="70"/></name><operator pos:line="27" pos:column="70">)<pos:position pos:line="27" pos:column="71"/></operator></expr>)<pos:position pos:line="27" pos:column="72"/></condition><then pos:line="27" pos:column="72">
			<block type="pseudo"><continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue></block></then></if></elseif>
		<elseif pos:line="29" pos:column="17">else <if pos:line="29" pos:column="22">if <condition pos:line="29" pos:column="25">(<expr><name><name pos:line="29" pos:column="26">rc<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">values_num<pos:position pos:line="29" pos:column="40"/></name></name> <operator pos:line="29" pos:column="41">&gt;<pos:position pos:line="29" pos:column="45"/></operator> <literal type="number" pos:line="29" pos:column="43">0<pos:position pos:line="29" pos:column="44"/></literal></expr>)<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45">
		<block pos:line="30" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">int<pos:position pos:line="31" pos:column="28"/></name></type> <name pos:line="31" pos:column="29">status<pos:position pos:line="31" pos:column="35"/></name></decl>;<pos:position pos:line="31" pos:column="36"/></decl_stmt>

			<expr_stmt><expr><name pos:line="33" pos:column="25">status<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <call><name pos:line="33" pos:column="34">rrd_queue_enqueue<pos:position pos:line="33" pos:column="51"/></name> <argument_list pos:line="33" pos:column="52">(<argument><expr><name pos:line="33" pos:column="53">key<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="58">&amp;<pos:position pos:line="33" pos:column="63"/></operator><name pos:line="33" pos:column="59">queue_head<pos:position pos:line="33" pos:column="69"/></name></expr></argument>,  <argument><expr><operator pos:line="33" pos:column="72">&amp;<pos:position pos:line="33" pos:column="77"/></operator><name pos:line="33" pos:column="73">queue_tail<pos:position pos:line="33" pos:column="83"/></name></expr></argument>)<pos:position pos:line="33" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="85"/></expr_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">status<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">==<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="33">rc<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">-&gt;<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="37">flags<pos:position pos:line="35" pos:column="42"/></name></name> <operator pos:line="35" pos:column="43">=<pos:position pos:line="35" pos:column="44"/></operator> <name pos:line="35" pos:column="45">FLAG_QUEUED<pos:position pos:line="35" pos:column="56"/></name></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if></elseif>
		<else pos:line="37" pos:column="17">else <comment type="block" pos:line="37" pos:column="22">/* ancient and no values -&gt; waste of memory */</comment>
		<block pos:line="38" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">char<pos:position pos:line="39" pos:column="29"/></name> <modifier pos:line="39" pos:column="30">*<pos:position pos:line="39" pos:column="31"/></modifier><modifier pos:line="39" pos:column="31">*<pos:position pos:line="39" pos:column="32"/></modifier></type><name pos:line="39" pos:column="32">tmp<pos:position pos:line="39" pos:column="35"/></name> <init pos:line="39" pos:column="36">= <expr><operator pos:line="39" pos:column="38">(<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="39">char<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">*<pos:position pos:line="39" pos:column="45"/></operator><operator pos:line="39" pos:column="45">*<pos:position pos:line="39" pos:column="46"/></operator><operator pos:line="39" pos:column="46">)<pos:position pos:line="39" pos:column="47"/></operator> <call><name pos:line="39" pos:column="48">realloc<pos:position pos:line="39" pos:column="55"/></name> <argument_list pos:line="39" pos:column="56">(<argument><expr><operator pos:line="39" pos:column="57">(<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="58">void<pos:position pos:line="39" pos:column="62"/></name> <operator pos:line="39" pos:column="63">*<pos:position pos:line="39" pos:column="64"/></operator><operator pos:line="39" pos:column="64">)<pos:position pos:line="39" pos:column="65"/></operator> <name pos:line="39" pos:column="66">keys<pos:position pos:line="39" pos:column="70"/></name></expr></argument>,
					<argument><expr><operator pos:line="40" pos:column="41">(<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="42">keys_num<pos:position pos:line="40" pos:column="50"/></name> <operator pos:line="40" pos:column="51">+<pos:position pos:line="40" pos:column="52"/></operator> <literal type="number" pos:line="40" pos:column="53">1<pos:position pos:line="40" pos:column="54"/></literal><operator pos:line="40" pos:column="54">)<pos:position pos:line="40" pos:column="55"/></operator> <operator pos:line="40" pos:column="56">*<pos:position pos:line="40" pos:column="57"/></operator> <sizeof pos:line="40" pos:column="58">sizeof <argument_list pos:line="40" pos:column="65">(<argument><expr><name pos:line="40" pos:column="66">char<pos:position pos:line="40" pos:column="70"/></name> <operator pos:line="40" pos:column="71">*<pos:position pos:line="40" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="75"/></decl_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">tmp<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">==<pos:position pos:line="41" pos:column="35"/></operator> <name pos:line="41" pos:column="36">NULL<pos:position pos:line="41" pos:column="40"/></name></expr>)<pos:position pos:line="41" pos:column="41"/></condition><then pos:line="41" pos:column="41">
			<block pos:line="42" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="43" pos:column="33">char<pos:position pos:line="43" pos:column="37"/></name></type> <name><name pos:line="43" pos:column="38">errbuf<pos:position pos:line="43" pos:column="44"/></name><index pos:line="43" pos:column="44">[<expr><literal type="number" pos:line="43" pos:column="45">1024<pos:position pos:line="43" pos:column="49"/></literal></expr>]<pos:position pos:line="43" pos:column="50"/></index></name></decl>;<pos:position pos:line="43" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">ERROR<pos:position pos:line="44" pos:column="38"/></name> <argument_list pos:line="44" pos:column="39">(<argument><expr><literal type="string" pos:line="44" pos:column="40">"rrdtool plugin: "<pos:position pos:line="44" pos:column="58"/></literal>
						<literal type="string" pos:line="45" pos:column="49">"realloc failed: %s"<pos:position pos:line="45" pos:column="69"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="46" pos:column="49">sstrerror<pos:position pos:line="46" pos:column="58"/></name> <argument_list pos:line="46" pos:column="59">(<argument><expr><name pos:line="46" pos:column="60">errno<pos:position pos:line="46" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="67">errbuf<pos:position pos:line="46" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="47" pos:column="57">sizeof <argument_list pos:line="47" pos:column="64">(<argument><expr><name pos:line="47" pos:column="65">errbuf<pos:position pos:line="47" pos:column="71"/></name></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="48" pos:column="33">c_avl_iterator_destroy<pos:position pos:line="48" pos:column="55"/></name> <argument_list pos:line="48" pos:column="56">(<argument><expr><name pos:line="48" pos:column="57">iter<pos:position pos:line="48" pos:column="61"/></name></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">sfree<pos:position pos:line="49" pos:column="38"/></name> <argument_list pos:line="49" pos:column="39">(<argument><expr><name pos:line="49" pos:column="40">keys<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
				<return pos:line="50" pos:column="33">return;<pos:position pos:line="50" pos:column="40"/></return>
			}<pos:position pos:line="51" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="52" pos:column="25">keys<pos:position pos:line="52" pos:column="29"/></name> <operator pos:line="52" pos:column="30">=<pos:position pos:line="52" pos:column="31"/></operator> <name pos:line="52" pos:column="32">tmp<pos:position pos:line="52" pos:column="35"/></name></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">keys<pos:position pos:line="53" pos:column="29"/></name><index pos:line="53" pos:column="29">[<expr><name pos:line="53" pos:column="30">keys_num<pos:position pos:line="53" pos:column="38"/></name></expr>]<pos:position pos:line="53" pos:column="39"/></index></name> <operator pos:line="53" pos:column="40">=<pos:position pos:line="53" pos:column="41"/></operator> <name pos:line="53" pos:column="42">key<pos:position pos:line="53" pos:column="45"/></name></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">keys_num<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">++<pos:position pos:line="54" pos:column="35"/></operator></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></else></if>
	}<pos:position pos:line="56" pos:column="10"/></block></while> <comment type="block" pos:line="56" pos:column="11">/* while (c_avl_iterator_next) */</comment>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">c_avl_iterator_destroy<pos:position pos:line="57" pos:column="31"/></name> <argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">iter<pos:position pos:line="57" pos:column="37"/></name></expr></argument>)<pos:position pos:line="57" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="39"/></expr_stmt>
	
	<for pos:line="59" pos:column="9">for <control pos:line="59" pos:column="13">(<init><expr><name pos:line="59" pos:column="14">i<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <literal type="number" pos:line="59" pos:column="18">0<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></init> <condition><expr><name pos:line="59" pos:column="21">i<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">&lt;<pos:position pos:line="59" pos:column="27"/></operator> <name pos:line="59" pos:column="25">keys_num<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></condition> <incr><expr><name pos:line="59" pos:column="35">i<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">++<pos:position pos:line="59" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="39"/></control>
	<block pos:line="60" pos:column="9">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">c_avl_remove<pos:position pos:line="61" pos:column="33"/></name> <argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">cache<pos:position pos:line="61" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="42">keys<pos:position pos:line="61" pos:column="46"/></name><index pos:line="61" pos:column="46">[<expr><name pos:line="61" pos:column="47">i<pos:position pos:line="61" pos:column="48"/></name></expr>]<pos:position pos:line="61" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="51">(<pos:position pos:line="61" pos:column="52"/></operator><name pos:line="61" pos:column="52">void<pos:position pos:line="61" pos:column="56"/></name> <operator pos:line="61" pos:column="57">*<pos:position pos:line="61" pos:column="58"/></operator><operator pos:line="61" pos:column="58">)<pos:position pos:line="61" pos:column="59"/></operator> <operator pos:line="61" pos:column="60">&amp;<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="61">key<pos:position pos:line="61" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="66">(<pos:position pos:line="61" pos:column="67"/></operator><name pos:line="61" pos:column="67">void<pos:position pos:line="61" pos:column="71"/></name> <operator pos:line="61" pos:column="72">*<pos:position pos:line="61" pos:column="73"/></operator><operator pos:line="61" pos:column="73">)<pos:position pos:line="61" pos:column="74"/></operator> <operator pos:line="61" pos:column="75">&amp;<pos:position pos:line="61" pos:column="80"/></operator><name pos:line="61" pos:column="76">rc<pos:position pos:line="61" pos:column="78"/></name></expr></argument>)<pos:position pos:line="61" pos:column="79"/></argument_list></call> <operator pos:line="61" pos:column="80">!=<pos:position pos:line="61" pos:column="82"/></operator> <literal type="number" pos:line="61" pos:column="83">0<pos:position pos:line="61" pos:column="84"/></literal></expr>)<pos:position pos:line="61" pos:column="85"/></condition><then pos:line="61" pos:column="85">
		<block pos:line="62" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">DEBUG<pos:position pos:line="63" pos:column="30"/></name> <argument_list pos:line="63" pos:column="31">(<argument><expr><literal type="string" pos:line="63" pos:column="32">"rrdtool plugin: c_avl_remove (%s) failed."<pos:position pos:line="63" pos:column="75"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="77">keys<pos:position pos:line="63" pos:column="81"/></name><index pos:line="63" pos:column="81">[<expr><name pos:line="63" pos:column="82">i<pos:position pos:line="63" pos:column="83"/></name></expr>]<pos:position pos:line="63" pos:column="84"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="86"/></expr_stmt>
			<continue pos:line="64" pos:column="25">continue;<pos:position pos:line="64" pos:column="34"/></continue>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="67" pos:column="17">assert<pos:position pos:line="67" pos:column="23"/></name> <argument_list pos:line="67" pos:column="24">(<argument><expr><name><name pos:line="67" pos:column="25">rc<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">values<pos:position pos:line="67" pos:column="35"/></name></name> <operator pos:line="67" pos:column="36">==<pos:position pos:line="67" pos:column="38"/></operator> <name pos:line="67" pos:column="39">NULL<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">assert<pos:position pos:line="68" pos:column="23"/></name> <argument_list pos:line="68" pos:column="24">(<argument><expr><name><name pos:line="68" pos:column="25">rc<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">-&gt;<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="29">values_num<pos:position pos:line="68" pos:column="39"/></name></name> <operator pos:line="68" pos:column="40">==<pos:position pos:line="68" pos:column="42"/></operator> <literal type="number" pos:line="68" pos:column="43">0<pos:position pos:line="68" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="46"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="70" pos:column="17">sfree<pos:position pos:line="70" pos:column="22"/></name> <argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">rc<pos:position pos:line="70" pos:column="26"/></name></expr></argument>)<pos:position pos:line="70" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">sfree<pos:position pos:line="71" pos:column="22"/></name> <argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">key<pos:position pos:line="71" pos:column="27"/></name></expr></argument>)<pos:position pos:line="71" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">keys<pos:position pos:line="72" pos:column="21"/></name><index pos:line="72" pos:column="21">[<expr><name pos:line="72" pos:column="22">i<pos:position pos:line="72" pos:column="23"/></name></expr>]<pos:position pos:line="72" pos:column="24"/></index></name> <operator pos:line="72" pos:column="25">=<pos:position pos:line="72" pos:column="26"/></operator> <name pos:line="72" pos:column="27">NULL<pos:position pos:line="72" pos:column="31"/></name></expr>;<pos:position pos:line="72" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="73" pos:column="10"/></block></for> <comment type="block" pos:line="73" pos:column="11">/* for (i = 0..keys_num) */</comment>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">sfree<pos:position pos:line="75" pos:column="14"/></name> <argument_list pos:line="75" pos:column="15">(<argument><expr><name pos:line="75" pos:column="16">keys<pos:position pos:line="75" pos:column="20"/></name></expr></argument>)<pos:position pos:line="75" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="77" pos:column="9">cache_flush_last<pos:position pos:line="77" pos:column="25"/></name> <operator pos:line="77" pos:column="26">=<pos:position pos:line="77" pos:column="27"/></operator> <name pos:line="77" pos:column="28">now<pos:position pos:line="77" pos:column="31"/></name></expr>;<pos:position pos:line="77" pos:column="32"/></expr_stmt>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
