<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_583_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">cmd_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">cmd_split<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buffer<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">ret_len<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier><modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">ret_fields<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">cmd_error_handler_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">err<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <block pos:line="2" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">field<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">bool<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">in_field<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">in_quotes<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">estimate<pos:position pos:line="6" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">len<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier><modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type><name pos:line="7" pos:column="10">fields<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">estimate<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">in_field<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <literal type="boolean" pos:line="10" pos:column="14">false<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init><decl><type><name pos:line="11" pos:column="8">char<pos:position pos:line="11" pos:column="12"/></name> <modifier pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></modifier></type><name pos:line="11" pos:column="14">string<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><name pos:line="11" pos:column="23">buffer<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></init> <condition><expr><operator pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">string<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">!=<pos:position pos:line="11" pos:column="41"/></operator> <literal type="char" pos:line="11" pos:column="42">'\0'<pos:position pos:line="11" pos:column="46"/></literal></expr>;<pos:position pos:line="11" pos:column="47"/></condition> <incr><expr><operator pos:line="11" pos:column="48">++<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">string<pos:position pos:line="11" pos:column="56"/></name></expr></incr>)<pos:position pos:line="11" pos:column="57"/></control> <block pos:line="11" pos:column="58">{
    <comment type="block" pos:line="12" pos:column="5">/* Make a quick worst-case estimate of the number of fields by
     * counting spaces and ignoring quotation marks. */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">isspace<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">int<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">)<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">string<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32"> <block pos:line="14" pos:column="33">{
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><operator pos:line="15" pos:column="11">!<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">in_field<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">estimate<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">++<pos:position pos:line="16" pos:column="19"/></operator></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">in_field<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <literal type="boolean" pos:line="17" pos:column="20">true<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="18" pos:column="8"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
      <expr_stmt><expr><name pos:line="20" pos:column="7">in_field<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="boolean" pos:line="20" pos:column="18">false<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>
  }<pos:position pos:line="22" pos:column="4"/></block></for>

  <comment type="block" pos:line="24" pos:column="3">/* fields will be NULL-terminated */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">fields<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">malloc<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><operator pos:line="25" pos:column="19">(<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">estimate<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">+<pos:position pos:line="25" pos:column="30"/></operator> <literal type="number" pos:line="25" pos:column="31">1<pos:position pos:line="25" pos:column="32"/></literal><operator pos:line="25" pos:column="32">)<pos:position pos:line="25" pos:column="33"/></operator> <operator pos:line="25" pos:column="34">*<pos:position pos:line="25" pos:column="35"/></operator> <sizeof pos:line="25" pos:column="36">sizeof<argument_list pos:line="25" pos:column="42">(<argument><expr><operator pos:line="25" pos:column="43">*<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="44">fields<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">fields<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">==<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">NULL<pos:position pos:line="26" pos:column="21"/></name></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block pos:line="26" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">cmd_error<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">CMD_ERROR<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="26">err<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="31">"malloc failed."<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">CMD_ERROR<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">)<pos:position pos:line="28" pos:column="23"/></operator></expr>;<pos:position pos:line="28" pos:column="24"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define<pos:position pos:line="31" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">END_FIELD<pos:position pos:line="31" pos:column="18"/></name><parameter_list pos:line="31" pos:column="18">()<pos:position pos:line="31" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="32" pos:column="3">do {                                                                         \
    *field = '\0';                                                             \
    field = NULL;                                                              \
    in_field = false;                                                          \
  } while (0)<pos:position pos:line="36" pos:column="14"/></cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define<pos:position pos:line="37" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">NEW_FIELD<pos:position pos:line="37" pos:column="18"/></name><parameter_list pos:line="37" pos:column="18">()<pos:position pos:line="37" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="38" pos:column="3">do {                                                                         \
    field = string;                                                            \
    in_field = true;                                                           \
    assert(len &lt; estimate);                                                    \
    fields[len] = field;                                                       \
    field++;                                                                   \
    len++;                                                                     \
  } while (0)<pos:position pos:line="45" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="47" pos:column="3">len<pos:position pos:line="47" pos:column="6"/></name> <operator pos:line="47" pos:column="7">=<pos:position pos:line="47" pos:column="8"/></operator> <literal type="number" pos:line="47" pos:column="9">0<pos:position pos:line="47" pos:column="10"/></literal></expr>;<pos:position pos:line="47" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="48" pos:column="3">field<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <name pos:line="48" pos:column="11">NULL<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="49" pos:column="3">in_field<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <literal type="boolean" pos:line="49" pos:column="14">false<pos:position pos:line="49" pos:column="19"/></literal></expr>;<pos:position pos:line="49" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="50" pos:column="3">in_quotes<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <literal type="boolean" pos:line="50" pos:column="15">false<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
  <for pos:line="51" pos:column="3">for <control pos:line="51" pos:column="7">(<init><decl><type><name pos:line="51" pos:column="8">char<pos:position pos:line="51" pos:column="12"/></name> <modifier pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></modifier></type><name pos:line="51" pos:column="14">string<pos:position pos:line="51" pos:column="20"/></name> <init pos:line="51" pos:column="21">= <expr><name pos:line="51" pos:column="23">buffer<pos:position pos:line="51" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="30"/></init> <condition><expr><operator pos:line="51" pos:column="31">*<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="32">string<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">!=<pos:position pos:line="51" pos:column="41"/></operator> <literal type="char" pos:line="51" pos:column="42">'\0'<pos:position pos:line="51" pos:column="46"/></literal></expr>;<pos:position pos:line="51" pos:column="47"/></condition> <incr><expr><name pos:line="51" pos:column="48">string<pos:position pos:line="51" pos:column="54"/></name><operator pos:line="51" pos:column="54">++<pos:position pos:line="51" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="57"/></control> <block pos:line="51" pos:column="58">{
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><call><name pos:line="52" pos:column="9">isspace<pos:position pos:line="52" pos:column="16"/></name><argument_list pos:line="52" pos:column="16">(<argument><expr><operator pos:line="52" pos:column="17">(<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="18">int<pos:position pos:line="52" pos:column="21"/></name><operator pos:line="52" pos:column="21">)<pos:position pos:line="52" pos:column="22"/></operator><name><name pos:line="52" pos:column="22">string<pos:position pos:line="52" pos:column="28"/></name><index pos:line="52" pos:column="28">[<expr><literal type="number" pos:line="52" pos:column="29">0<pos:position pos:line="52" pos:column="30"/></literal></expr>]<pos:position pos:line="52" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33"> <block pos:line="52" pos:column="34">{
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><operator pos:line="53" pos:column="11">!<pos:position pos:line="53" pos:column="12"/></operator><name pos:line="53" pos:column="12">in_quotes<pos:position pos:line="53" pos:column="21"/></name></expr>)<pos:position pos:line="53" pos:column="22"/></condition><then pos:line="53" pos:column="22"> <block pos:line="53" pos:column="23">{
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">in_field<pos:position pos:line="54" pos:column="21"/></name></expr>)<pos:position pos:line="54" pos:column="22"/></condition><then pos:line="54" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="11">END_FIELD<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">()<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="57" pos:column="9">/* skip space */</comment>
        <continue pos:line="58" pos:column="9">continue;<pos:position pos:line="58" pos:column="18"/></continue>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then> <elseif pos:line="60" pos:column="7">else <if pos:line="60" pos:column="12">if <condition pos:line="60" pos:column="15">(<expr><name><name pos:line="60" pos:column="16">string<pos:position pos:line="60" pos:column="22"/></name><index pos:line="60" pos:column="22">[<expr><literal type="number" pos:line="60" pos:column="23">0<pos:position pos:line="60" pos:column="24"/></literal></expr>]<pos:position pos:line="60" pos:column="25"/></index></name> <operator pos:line="60" pos:column="26">==<pos:position pos:line="60" pos:column="28"/></operator> <literal type="char" pos:line="60" pos:column="29">'"'<pos:position pos:line="60" pos:column="32"/></literal></expr>)<pos:position pos:line="60" pos:column="33"/></condition><then pos:line="60" pos:column="33"> <block pos:line="60" pos:column="34">{
      <comment type="block" pos:line="61" pos:column="7">/* Note: Two consecutive quoted fields not separated by space are
       * treated as different fields. This is the collectd 5.x behavior
       * around splitting fields. */</comment>

      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><name pos:line="65" pos:column="11">in_quotes<pos:position pos:line="65" pos:column="20"/></name></expr>)<pos:position pos:line="65" pos:column="21"/></condition><then pos:line="65" pos:column="21"> <block pos:line="65" pos:column="22">{
        <comment type="block" pos:line="66" pos:column="9">/* end of quoted field */</comment>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">in_field<pos:position pos:line="67" pos:column="22"/></name></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23"> <comment type="block" pos:line="67" pos:column="24">/* empty quoted string */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="11">NEW_FIELD<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">()<pos:position pos:line="68" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="23"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">END_FIELD<pos:position pos:line="69" pos:column="18"/></name><argument_list pos:line="69" pos:column="18">()<pos:position pos:line="69" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">in_quotes<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <literal type="boolean" pos:line="70" pos:column="21">false<pos:position pos:line="70" pos:column="26"/></literal></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>
        <continue pos:line="71" pos:column="9">continue;<pos:position pos:line="71" pos:column="18"/></continue>
      }<pos:position pos:line="72" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="74" pos:column="7">in_quotes<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <literal type="boolean" pos:line="74" pos:column="19">true<pos:position pos:line="74" pos:column="23"/></literal></expr>;<pos:position pos:line="74" pos:column="24"/></expr_stmt>
      <comment type="block" pos:line="75" pos:column="7">/* if (! in_field): add new field on next iteration
       * else: quoted string following an unquoted string (one field)
       * in either case: skip quotation mark */</comment>
      <continue pos:line="78" pos:column="7">continue;<pos:position pos:line="78" pos:column="16"/></continue>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if></elseif> <elseif pos:line="79" pos:column="7">else <if pos:line="79" pos:column="12">if <condition pos:line="79" pos:column="15">(<expr><operator pos:line="79" pos:column="16">(<pos:position pos:line="79" pos:column="17"/></operator><name><name pos:line="79" pos:column="17">string<pos:position pos:line="79" pos:column="23"/></name><index pos:line="79" pos:column="23">[<expr><literal type="number" pos:line="79" pos:column="24">0<pos:position pos:line="79" pos:column="25"/></literal></expr>]<pos:position pos:line="79" pos:column="26"/></index></name> <operator pos:line="79" pos:column="27">==<pos:position pos:line="79" pos:column="29"/></operator> <literal type="char" pos:line="79" pos:column="30">'\\'<pos:position pos:line="79" pos:column="34"/></literal><operator pos:line="79" pos:column="34">)<pos:position pos:line="79" pos:column="35"/></operator> <operator pos:line="79" pos:column="36">&amp;&amp;<pos:position pos:line="79" pos:column="46"/></operator> <name pos:line="79" pos:column="39">in_quotes<pos:position pos:line="79" pos:column="48"/></name></expr>)<pos:position pos:line="79" pos:column="49"/></condition><then pos:line="79" pos:column="49"> <block pos:line="79" pos:column="50">{
      <comment type="block" pos:line="80" pos:column="7">/* Outside of quotes, a backslash is a regular character (mostly
       * for backward compatibility). */</comment>

      <if pos:line="83" pos:column="7">if <condition pos:line="83" pos:column="10">(<expr><name><name pos:line="83" pos:column="11">string<pos:position pos:line="83" pos:column="17"/></name><index pos:line="83" pos:column="17">[<expr><literal type="number" pos:line="83" pos:column="18">1<pos:position pos:line="83" pos:column="19"/></literal></expr>]<pos:position pos:line="83" pos:column="20"/></index></name> <operator pos:line="83" pos:column="21">==<pos:position pos:line="83" pos:column="23"/></operator> <literal type="char" pos:line="83" pos:column="24">'\0'<pos:position pos:line="83" pos:column="28"/></literal></expr>)<pos:position pos:line="83" pos:column="29"/></condition><then pos:line="83" pos:column="29"> <block pos:line="83" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">free<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><name pos:line="84" pos:column="14">fields<pos:position pos:line="84" pos:column="20"/></name></expr></argument>)<pos:position pos:line="84" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">cmd_error<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><name pos:line="85" pos:column="19">CMD_PARSE_ERROR<pos:position pos:line="85" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="36">err<pos:position pos:line="85" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="41">"Backslash at end of string."<pos:position pos:line="85" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="72"/></expr_stmt>
        <return pos:line="86" pos:column="9">return <expr><operator pos:line="86" pos:column="16">(<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="17">CMD_PARSE_ERROR<pos:position pos:line="86" pos:column="32"/></name><operator pos:line="86" pos:column="32">)<pos:position pos:line="86" pos:column="33"/></operator></expr>;<pos:position pos:line="86" pos:column="34"/></return>
      }<pos:position pos:line="87" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="89" pos:column="7">/* un-escape the next character; skip backslash */</comment>
      <expr_stmt><expr><name pos:line="90" pos:column="7">string<pos:position pos:line="90" pos:column="13"/></name><operator pos:line="90" pos:column="13">++<pos:position pos:line="90" pos:column="15"/></operator></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><operator pos:line="93" pos:column="9">!<pos:position pos:line="93" pos:column="10"/></operator><name pos:line="93" pos:column="10">in_field<pos:position pos:line="93" pos:column="18"/></name></expr>)<pos:position pos:line="93" pos:column="19"/></condition><then pos:line="93" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="7">NEW_FIELD<pos:position pos:line="94" pos:column="16"/></name><argument_list pos:line="94" pos:column="16">()<pos:position pos:line="94" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="19"/></expr_stmt></block></then>
    <else pos:line="95" pos:column="5">else <block pos:line="95" pos:column="10">{
      <expr_stmt><expr><operator pos:line="96" pos:column="7">*<pos:position pos:line="96" pos:column="8"/></operator><name pos:line="96" pos:column="8">field<pos:position pos:line="96" pos:column="13"/></name> <operator pos:line="96" pos:column="14">=<pos:position pos:line="96" pos:column="15"/></operator> <name><name pos:line="96" pos:column="16">string<pos:position pos:line="96" pos:column="22"/></name><index pos:line="96" pos:column="22">[<expr><literal type="number" pos:line="96" pos:column="23">0<pos:position pos:line="96" pos:column="24"/></literal></expr>]<pos:position pos:line="96" pos:column="25"/></index></name></expr>;<pos:position pos:line="96" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="97" pos:column="7">field<pos:position pos:line="97" pos:column="12"/></name><operator pos:line="97" pos:column="12">++<pos:position pos:line="97" pos:column="14"/></operator></expr>;<pos:position pos:line="97" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></else></if>
  }<pos:position pos:line="99" pos:column="4"/></block></for>

  <if pos:line="101" pos:column="3">if <condition pos:line="101" pos:column="6">(<expr><name pos:line="101" pos:column="7">in_quotes<pos:position pos:line="101" pos:column="16"/></name></expr>)<pos:position pos:line="101" pos:column="17"/></condition><then pos:line="101" pos:column="17"> <block pos:line="101" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">free<pos:position pos:line="102" pos:column="9"/></name><argument_list pos:line="102" pos:column="9">(<argument><expr><name pos:line="102" pos:column="10">fields<pos:position pos:line="102" pos:column="16"/></name></expr></argument>)<pos:position pos:line="102" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">cmd_error<pos:position pos:line="103" pos:column="14"/></name><argument_list pos:line="103" pos:column="14">(<argument><expr><name pos:line="103" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="103" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="32">err<pos:position pos:line="103" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="37">"Unterminated quoted string."<pos:position pos:line="103" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="68"/></expr_stmt>
    <return pos:line="104" pos:column="5">return <expr><operator pos:line="104" pos:column="12">(<pos:position pos:line="104" pos:column="13"/></operator><name pos:line="104" pos:column="13">CMD_PARSE_ERROR<pos:position pos:line="104" pos:column="28"/></name><operator pos:line="104" pos:column="28">)<pos:position pos:line="104" pos:column="29"/></operator></expr>;<pos:position pos:line="104" pos:column="30"/></return>
  }<pos:position pos:line="105" pos:column="4"/></block></then></if>

<cpp:undef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">undef<pos:position pos:line="107" pos:column="7"/></cpp:directive> <name pos:line="107" pos:column="8">NEW_FIELD<pos:position pos:line="107" pos:column="17"/></name></cpp:undef>
<cpp:undef pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">undef<pos:position pos:line="108" pos:column="7"/></cpp:directive> <name pos:line="108" pos:column="8">END_FIELD<pos:position pos:line="108" pos:column="17"/></name></cpp:undef>

  <expr_stmt><expr><name><name pos:line="110" pos:column="3">fields<pos:position pos:line="110" pos:column="9"/></name><index pos:line="110" pos:column="9">[<expr><name pos:line="110" pos:column="10">len<pos:position pos:line="110" pos:column="13"/></name></expr>]<pos:position pos:line="110" pos:column="14"/></index></name> <operator pos:line="110" pos:column="15">=<pos:position pos:line="110" pos:column="16"/></operator> <name pos:line="110" pos:column="17">NULL<pos:position pos:line="110" pos:column="21"/></name></expr>;<pos:position pos:line="110" pos:column="22"/></expr_stmt>
  <if pos:line="111" pos:column="3">if <condition pos:line="111" pos:column="6">(<expr><name pos:line="111" pos:column="7">ret_len<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">!=<pos:position pos:line="111" pos:column="17"/></operator> <name pos:line="111" pos:column="18">NULL<pos:position pos:line="111" pos:column="22"/></name></expr>)<pos:position pos:line="111" pos:column="23"/></condition><then pos:line="111" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="112" pos:column="5">*<pos:position pos:line="112" pos:column="6"/></operator><name pos:line="112" pos:column="6">ret_len<pos:position pos:line="112" pos:column="13"/></name> <operator pos:line="112" pos:column="14">=<pos:position pos:line="112" pos:column="15"/></operator> <name pos:line="112" pos:column="16">len<pos:position pos:line="112" pos:column="19"/></name></expr>;<pos:position pos:line="112" pos:column="20"/></expr_stmt></block></then></if>
  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><name pos:line="113" pos:column="7">ret_fields<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">!=<pos:position pos:line="113" pos:column="20"/></operator> <name pos:line="113" pos:column="21">NULL<pos:position pos:line="113" pos:column="25"/></name></expr>)<pos:position pos:line="113" pos:column="26"/></condition><then pos:line="113" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="114" pos:column="5">*<pos:position pos:line="114" pos:column="6"/></operator><name pos:line="114" pos:column="6">ret_fields<pos:position pos:line="114" pos:column="16"/></name> <operator pos:line="114" pos:column="17">=<pos:position pos:line="114" pos:column="18"/></operator> <name pos:line="114" pos:column="19">fields<pos:position pos:line="114" pos:column="25"/></name></expr>;<pos:position pos:line="114" pos:column="26"/></expr_stmt></block></then>
  <else pos:line="115" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="5">free<pos:position pos:line="116" pos:column="9"/></name><argument_list pos:line="116" pos:column="9">(<argument><expr><name pos:line="116" pos:column="10">fields<pos:position pos:line="116" pos:column="16"/></name></expr></argument>)<pos:position pos:line="116" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="18"/></expr_stmt></block></else></if>
  <return pos:line="117" pos:column="3">return <expr><operator pos:line="117" pos:column="10">(<pos:position pos:line="117" pos:column="11"/></operator><name pos:line="117" pos:column="11">CMD_OK<pos:position pos:line="117" pos:column="17"/></name><operator pos:line="117" pos:column="17">)<pos:position pos:line="117" pos:column="18"/></operator></expr>;<pos:position pos:line="117" pos:column="19"/></return>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
