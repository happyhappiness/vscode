<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2111_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mb_config_add_data<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">oconfig_item_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ci<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mb_data_t<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">data<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><block pos:line="3" pos:column="20">{<expr><literal type="number" pos:line="3" pos:column="21">0<pos:position pos:line="3" pos:column="22"/></literal></expr>}<pos:position pos:line="3" pos:column="23"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="6" pos:column="3">data<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">.<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">name<pos:position pos:line="6" pos:column="12"/></name></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">data<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">.<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">register_type<pos:position pos:line="7" pos:column="21"/></name></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">REG_TYPE_UINT16<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">data<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">next<pos:position pos:line="8" pos:column="12"/></name></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">status<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">cf_util_get_string<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">ci<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name><name pos:line="10" pos:column="36">data<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">name<pos:position pos:line="10" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">!=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">status<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return></block></then></if>

  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><decl><type><name pos:line="14" pos:column="8">int<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">i<pos:position pos:line="14" pos:column="13"/></name> <init pos:line="14" pos:column="14">= <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="18"/></init> <condition><expr><name pos:line="14" pos:column="19">i<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&lt;<pos:position pos:line="14" pos:column="25"/></operator> <name><name pos:line="14" pos:column="23">ci<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">children_num<pos:position pos:line="14" pos:column="39"/></name></name></expr>;<pos:position pos:line="14" pos:column="40"/></condition> <incr><expr><name pos:line="14" pos:column="41">i<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">++<pos:position pos:line="14" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="45"/></control> <block pos:line="14" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">oconfig_item_t<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">child<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><name><name pos:line="15" pos:column="29">ci<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">children<pos:position pos:line="15" pos:column="41"/></name></name> <operator pos:line="15" pos:column="42">+<pos:position pos:line="15" pos:column="43"/></operator> <name pos:line="15" pos:column="44">i<pos:position pos:line="15" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="46"/></decl_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">strcasecmp<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="string" pos:line="17" pos:column="20">"Type"<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="28">child<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">key<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call> <operator pos:line="17" pos:column="40">==<pos:position pos:line="17" pos:column="42"/></operator> <literal type="number" pos:line="17" pos:column="43">0<pos:position pos:line="17" pos:column="44"/></literal></expr>)<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">cf_util_get_string_buffer<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">child<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="49">data<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">.<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="54">type<pos:position pos:line="18" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="60">sizeof<argument_list pos:line="18" pos:column="66">(<argument><expr><name><name pos:line="18" pos:column="67">data<pos:position pos:line="18" pos:column="71"/></name><operator pos:line="18" pos:column="71">.<pos:position pos:line="18" pos:column="72"/></operator><name pos:line="18" pos:column="72">type<pos:position pos:line="18" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="79"/></expr_stmt></block></then>
    <elseif pos:line="19" pos:column="5">else <if pos:line="19" pos:column="10">if <condition pos:line="19" pos:column="13">(<expr><call><name pos:line="19" pos:column="14">strcasecmp<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><literal type="string" pos:line="19" pos:column="25">"Instance"<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="37">child<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">key<pos:position pos:line="19" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call> <operator pos:line="19" pos:column="49">==<pos:position pos:line="19" pos:column="51"/></operator> <literal type="number" pos:line="19" pos:column="52">0<pos:position pos:line="19" pos:column="53"/></literal></expr>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="7">status<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">cf_util_get_string_buffer<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">child<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="49">data<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">.<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="54">instance<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>,
                                         <argument><expr><sizeof pos:line="21" pos:column="42">sizeof<argument_list pos:line="21" pos:column="48">(<argument><expr><name><name pos:line="21" pos:column="49">data<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">.<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="54">instance<pos:position pos:line="21" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if <condition pos:line="22" pos:column="13">(<expr><call><name pos:line="22" pos:column="14">strcasecmp<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><literal type="string" pos:line="22" pos:column="25">"RegisterBase"<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="41">child<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">-&gt;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="48">key<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call> <operator pos:line="22" pos:column="53">==<pos:position pos:line="22" pos:column="55"/></operator> <literal type="number" pos:line="22" pos:column="56">0<pos:position pos:line="22" pos:column="57"/></literal></expr>)<pos:position pos:line="22" pos:column="58"/></condition><then pos:line="22" pos:column="58">
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <call><name pos:line="23" pos:column="16">cf_util_get_int<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">child<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="39">&amp;<pos:position pos:line="23" pos:column="44"/></operator><name><name pos:line="23" pos:column="40">data<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">.<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">register_base<pos:position pos:line="23" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if <condition pos:line="24" pos:column="13">(<expr><call><name pos:line="24" pos:column="14">strcasecmp<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><literal type="string" pos:line="24" pos:column="25">"RegisterType"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="41">child<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">-&gt;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="48">key<pos:position pos:line="24" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call> <operator pos:line="24" pos:column="53">==<pos:position pos:line="24" pos:column="55"/></operator> <literal type="number" pos:line="24" pos:column="56">0<pos:position pos:line="24" pos:column="57"/></literal></expr>)<pos:position pos:line="24" pos:column="58"/></condition><then pos:line="24" pos:column="58"> <block pos:line="24" pos:column="59">{
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">char<pos:position pos:line="25" pos:column="11"/></name></type> <name><name pos:line="25" pos:column="12">tmp<pos:position pos:line="25" pos:column="15"/></name><index pos:line="25" pos:column="15">[<expr><literal type="number" pos:line="25" pos:column="16">16<pos:position pos:line="25" pos:column="18"/></literal></expr>]<pos:position pos:line="25" pos:column="19"/></index></name></decl>;<pos:position pos:line="25" pos:column="20"/></decl_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">cf_util_get_string_buffer<pos:position pos:line="26" pos:column="41"/></name><argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">child<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">tmp<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="54">sizeof<argument_list pos:line="26" pos:column="60">(<argument><expr><name pos:line="26" pos:column="61">tmp<pos:position pos:line="26" pos:column="64"/></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="67"/></expr_stmt>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">status<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">!=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23">
        <comment type="block" pos:line="28" pos:column="9">/* do nothing */</comment><block type="pseudo"><empty_stmt pos:line="28" pos:column="25">;<pos:position pos:line="28" pos:column="26"/></empty_stmt></block></then>
      <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><call><name pos:line="29" pos:column="16">strcasecmp<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><literal type="string" pos:line="29" pos:column="27">"Int16"<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="36">tmp<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call> <operator pos:line="29" pos:column="41">==<pos:position pos:line="29" pos:column="43"/></operator> <literal type="number" pos:line="29" pos:column="44">0<pos:position pos:line="29" pos:column="45"/></literal></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="9">data<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">register_type<pos:position pos:line="30" pos:column="27"/></name></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <name pos:line="30" pos:column="30">REG_TYPE_INT16<pos:position pos:line="30" pos:column="44"/></name></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">strcasecmp<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><literal type="string" pos:line="31" pos:column="27">"Int32"<pos:position pos:line="31" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">tmp<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call> <operator pos:line="31" pos:column="41">==<pos:position pos:line="31" pos:column="43"/></operator> <literal type="number" pos:line="31" pos:column="44">0<pos:position pos:line="31" pos:column="45"/></literal></expr>)<pos:position pos:line="31" pos:column="46"/></condition><then pos:line="31" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="9">data<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">.<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">register_type<pos:position pos:line="32" pos:column="27"/></name></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="30">REG_TYPE_INT32<pos:position pos:line="32" pos:column="44"/></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="33" pos:column="7">else <if pos:line="33" pos:column="12">if <condition pos:line="33" pos:column="15">(<expr><call><name pos:line="33" pos:column="16">strcasecmp<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><literal type="string" pos:line="33" pos:column="27">"Uint16"<pos:position pos:line="33" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">tmp<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call> <operator pos:line="33" pos:column="42">==<pos:position pos:line="33" pos:column="44"/></operator> <literal type="number" pos:line="33" pos:column="45">0<pos:position pos:line="33" pos:column="46"/></literal></expr>)<pos:position pos:line="33" pos:column="47"/></condition><then pos:line="33" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="9">data<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">.<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">register_type<pos:position pos:line="34" pos:column="27"/></name></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">REG_TYPE_UINT16<pos:position pos:line="34" pos:column="45"/></name></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><call><name pos:line="35" pos:column="16">strcasecmp<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><literal type="string" pos:line="35" pos:column="27">"Uint32"<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="37">tmp<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call> <operator pos:line="35" pos:column="42">==<pos:position pos:line="35" pos:column="44"/></operator> <literal type="number" pos:line="35" pos:column="45">0<pos:position pos:line="35" pos:column="46"/></literal></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="9">data<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">register_type<pos:position pos:line="36" pos:column="27"/></name></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">REG_TYPE_UINT32<pos:position pos:line="36" pos:column="45"/></name></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><call><name pos:line="37" pos:column="16">strcasecmp<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><literal type="string" pos:line="37" pos:column="27">"Float"<pos:position pos:line="37" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">tmp<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call> <operator pos:line="37" pos:column="41">==<pos:position pos:line="37" pos:column="43"/></operator> <literal type="number" pos:line="37" pos:column="44">0<pos:position pos:line="37" pos:column="45"/></literal></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="9">data<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">.<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">register_type<pos:position pos:line="38" pos:column="27"/></name></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="30">REG_TYPE_FLOAT<pos:position pos:line="38" pos:column="44"/></name></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt></block></then></if></elseif>
      <else pos:line="39" pos:column="7">else <block pos:line="39" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">ERROR<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="string" pos:line="40" pos:column="15">"Modbus plugin: The register type \"%s\" is unknown."<pos:position pos:line="40" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="70">tmp<pos:position pos:line="40" pos:column="73"/></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">status<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <operator pos:line="41" pos:column="18">-<pos:position pos:line="41" pos:column="19"/></operator><literal type="number" pos:line="41" pos:column="19">1<pos:position pos:line="41" pos:column="20"/></literal></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="42" pos:column="8"/></block></else></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif> <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><call><name pos:line="43" pos:column="16">strcasecmp<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><literal type="string" pos:line="43" pos:column="27">"RegisterCmd"<pos:position pos:line="43" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="42">child<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">-&gt;<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="49">key<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call> <operator pos:line="43" pos:column="54">==<pos:position pos:line="43" pos:column="56"/></operator> <literal type="number" pos:line="43" pos:column="57">0<pos:position pos:line="43" pos:column="58"/></literal></expr>)<pos:position pos:line="43" pos:column="59"/></condition><then pos:line="43" pos:column="59"> <block pos:line="43" pos:column="60">{
<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">LEGACY_LIBMODBUS<pos:position pos:line="44" pos:column="21"/></name></expr></cpp:if>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">ERROR<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="string" pos:line="45" pos:column="13">"Modbus plugin: RegisterCmd parameter can not be used "<pos:position pos:line="45" pos:column="68"/></literal>
            <literal type="string" pos:line="46" pos:column="13">"with your libmodbus version"<pos:position pos:line="46" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">char<pos:position pos:line="48" pos:column="11"/></name></type> <name><name pos:line="48" pos:column="12">tmp<pos:position pos:line="48" pos:column="15"/></name><index pos:line="48" pos:column="15">[<expr><literal type="number" pos:line="48" pos:column="16">16<pos:position pos:line="48" pos:column="18"/></literal></expr>]<pos:position pos:line="48" pos:column="19"/></index></name></decl>;<pos:position pos:line="48" pos:column="20"/></decl_stmt>
      <expr_stmt><expr><name pos:line="49" pos:column="7">status<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">cf_util_get_string_buffer<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">child<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">tmp<pos:position pos:line="49" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="54">sizeof<argument_list pos:line="49" pos:column="60">(<argument><expr><name pos:line="49" pos:column="61">tmp<pos:position pos:line="49" pos:column="64"/></name></expr></argument>)<pos:position pos:line="49" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="67"/></expr_stmt>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">status<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">!=<pos:position pos:line="50" pos:column="20"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23">
        <comment type="block" pos:line="51" pos:column="9">/* do nothing */</comment><block type="pseudo"><empty_stmt pos:line="51" pos:column="25">;<pos:position pos:line="51" pos:column="26"/></empty_stmt></block></then>
      <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if <condition pos:line="52" pos:column="15">(<expr><call><name pos:line="52" pos:column="16">strcasecmp<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><literal type="string" pos:line="52" pos:column="27">"ReadHolding"<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="42">tmp<pos:position pos:line="52" pos:column="45"/></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call> <operator pos:line="52" pos:column="47">==<pos:position pos:line="52" pos:column="49"/></operator> <literal type="number" pos:line="52" pos:column="50">0<pos:position pos:line="52" pos:column="51"/></literal></expr>)<pos:position pos:line="52" pos:column="52"/></condition><then pos:line="52" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="53" pos:column="9">data<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">.<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">modbus_register_type<pos:position pos:line="53" pos:column="34"/></name></name> <operator pos:line="53" pos:column="35">=<pos:position pos:line="53" pos:column="36"/></operator> <name pos:line="53" pos:column="37">MREG_HOLDING<pos:position pos:line="53" pos:column="49"/></name></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if <condition pos:line="54" pos:column="15">(<expr><call><name pos:line="54" pos:column="16">strcasecmp<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><literal type="string" pos:line="54" pos:column="27">"ReadInput"<pos:position pos:line="54" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="40">tmp<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call> <operator pos:line="54" pos:column="45">==<pos:position pos:line="54" pos:column="47"/></operator> <literal type="number" pos:line="54" pos:column="48">0<pos:position pos:line="54" pos:column="49"/></literal></expr>)<pos:position pos:line="54" pos:column="50"/></condition><then pos:line="54" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="9">data<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">.<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">modbus_register_type<pos:position pos:line="55" pos:column="34"/></name></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <name pos:line="55" pos:column="37">MREG_INPUT<pos:position pos:line="55" pos:column="47"/></name></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt></block></then></if></elseif>
      <else pos:line="56" pos:column="7">else <block pos:line="56" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">ERROR<pos:position pos:line="57" pos:column="14"/></name><argument_list pos:line="57" pos:column="14">(<argument><expr><literal type="string" pos:line="57" pos:column="15">"Modbus plugin: The modbus_register_type \"%s\" is unknown."<pos:position pos:line="57" pos:column="75"/></literal></expr></argument>,
              <argument><expr><name pos:line="58" pos:column="15">tmp<pos:position pos:line="58" pos:column="18"/></name></expr></argument>)<pos:position pos:line="58" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="59" pos:column="9">status<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <operator pos:line="59" pos:column="18">-<pos:position pos:line="59" pos:column="19"/></operator><literal type="number" pos:line="59" pos:column="19">1<pos:position pos:line="59" pos:column="20"/></literal></expr>;<pos:position pos:line="59" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></else></if>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif> <else pos:line="62" pos:column="7">else <block pos:line="62" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">ERROR<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><literal type="string" pos:line="63" pos:column="13">"Modbus plugin: Unknown configuration option: %s"<pos:position pos:line="63" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="64">child<pos:position pos:line="63" pos:column="69"/></name><operator pos:line="63" pos:column="69">-&gt;<pos:position pos:line="63" pos:column="74"/></operator><name pos:line="63" pos:column="71">key<pos:position pos:line="63" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="76"/></expr_stmt>
      <expr_stmt><expr><name pos:line="64" pos:column="7">status<pos:position pos:line="64" pos:column="13"/></name> <operator pos:line="64" pos:column="14">=<pos:position pos:line="64" pos:column="15"/></operator> <operator pos:line="64" pos:column="16">-<pos:position pos:line="64" pos:column="17"/></operator><literal type="number" pos:line="64" pos:column="17">1<pos:position pos:line="64" pos:column="18"/></literal></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">status<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">!=<pos:position pos:line="67" pos:column="18"/></operator> <literal type="number" pos:line="67" pos:column="19">0<pos:position pos:line="67" pos:column="20"/></literal></expr>)<pos:position pos:line="67" pos:column="21"/></condition><then pos:line="67" pos:column="21">
      <block type="pseudo"><break pos:line="68" pos:column="7">break;<pos:position pos:line="68" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="69" pos:column="4"/></block></for> <comment type="block" pos:line="69" pos:column="5">/* for (i = 0; i &lt; ci-&gt;children_num; i++) */</comment>

  <expr_stmt><expr><call><name pos:line="71" pos:column="3">assert<pos:position pos:line="71" pos:column="9"/></name><argument_list pos:line="71" pos:column="9">(<argument><expr><name><name pos:line="71" pos:column="10">data<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">.<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="15">name<pos:position pos:line="71" pos:column="19"/></name></name> <operator pos:line="71" pos:column="20">!=<pos:position pos:line="71" pos:column="22"/></operator> <name pos:line="71" pos:column="23">NULL<pos:position pos:line="71" pos:column="27"/></name></expr></argument>)<pos:position pos:line="71" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="29"/></expr_stmt>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name><name pos:line="72" pos:column="7">data<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">.<pos:position pos:line="72" pos:column="12"/></operator><name pos:line="72" pos:column="12">type<pos:position pos:line="72" pos:column="16"/></name><index pos:line="72" pos:column="16">[<expr><literal type="number" pos:line="72" pos:column="17">0<pos:position pos:line="72" pos:column="18"/></literal></expr>]<pos:position pos:line="72" pos:column="19"/></index></name> <operator pos:line="72" pos:column="20">==<pos:position pos:line="72" pos:column="22"/></operator> <literal type="number" pos:line="72" pos:column="23">0<pos:position pos:line="72" pos:column="24"/></literal></expr>)<pos:position pos:line="72" pos:column="25"/></condition><then pos:line="72" pos:column="25"> <block pos:line="72" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">ERROR<pos:position pos:line="73" pos:column="10"/></name><argument_list pos:line="73" pos:column="10">(<argument><expr><literal type="string" pos:line="73" pos:column="11">"Modbus plugin: Data block \"%s\": No type has been specified."<pos:position pos:line="73" pos:column="74"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="74" pos:column="11">data<pos:position pos:line="74" pos:column="15"/></name><operator pos:line="74" pos:column="15">.<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="16">name<pos:position pos:line="74" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="75" pos:column="5">status<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <operator pos:line="75" pos:column="14">-<pos:position pos:line="75" pos:column="15"/></operator><literal type="number" pos:line="75" pos:column="15">1<pos:position pos:line="75" pos:column="16"/></literal></expr>;<pos:position pos:line="75" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><name pos:line="78" pos:column="7">status<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">==<pos:position pos:line="78" pos:column="16"/></operator> <literal type="number" pos:line="78" pos:column="17">0<pos:position pos:line="78" pos:column="18"/></literal></expr>)<pos:position pos:line="78" pos:column="19"/></condition><then pos:line="78" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="5">data_copy<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><operator pos:line="79" pos:column="15">&amp;<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="16">data_definitions<pos:position pos:line="79" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="34">&amp;<pos:position pos:line="79" pos:column="39"/></operator><name pos:line="79" pos:column="35">data<pos:position pos:line="79" pos:column="39"/></name></expr></argument>)<pos:position pos:line="79" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="81" pos:column="3">sfree<pos:position pos:line="81" pos:column="8"/></name><argument_list pos:line="81" pos:column="8">(<argument><expr><name><name pos:line="81" pos:column="9">data<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">.<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">name<pos:position pos:line="81" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>

  <return pos:line="83" pos:column="3">return <expr><name pos:line="83" pos:column="10">status<pos:position pos:line="83" pos:column="16"/></name></expr>;<pos:position pos:line="83" pos:column="17"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
