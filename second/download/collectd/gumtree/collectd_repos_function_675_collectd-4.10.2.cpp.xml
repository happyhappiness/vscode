<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_675_collectd-4.10.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_query_daemon<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">buffer_size<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <comment type="block" pos:line="1" pos:column="67">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">ssize_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">status<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">buffer_fill<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">memcached_socket<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">!=<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">NULL<pos:position pos:line="8" pos:column="37"/></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
		<decl_stmt><decl><type><name><name pos:line="9" pos:column="17">struct<pos:position pos:line="9" pos:column="23"/></name> <name pos:line="9" pos:column="24">sockaddr_un<pos:position pos:line="9" pos:column="35"/></name></name></type> <name pos:line="9" pos:column="36">serv_addr<pos:position pos:line="9" pos:column="45"/></name></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="11" pos:column="17">memset<pos:position pos:line="11" pos:column="23"/></name> <argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">serv_addr<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="37">0<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="40">sizeof <argument_list pos:line="11" pos:column="47">(<argument><expr><name pos:line="11" pos:column="48">serv_addr<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">serv_addr<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">.<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">sun_family<pos:position pos:line="12" pos:column="37"/></name></name> <operator pos:line="12" pos:column="38">=<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="40">AF_UNIX<pos:position pos:line="12" pos:column="47"/></name></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">sstrncpy<pos:position pos:line="13" pos:column="25"/></name> <argument_list pos:line="13" pos:column="26">(<argument><expr><name><name pos:line="13" pos:column="27">serv_addr<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">.<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">sun_path<pos:position pos:line="13" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">memcached_socket<pos:position pos:line="13" pos:column="63"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="14" pos:column="33">sizeof <argument_list pos:line="14" pos:column="40">(<argument><expr><name><name pos:line="14" pos:column="41">serv_addr<pos:position pos:line="14" pos:column="50"/></name><operator pos:line="14" pos:column="50">.<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">sun_path<pos:position pos:line="14" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/* create our socket descriptor */</comment>
		<expr_stmt><expr><name pos:line="17" pos:column="17">fd<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">socket<pos:position pos:line="17" pos:column="28"/></name> <argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">AF_UNIX<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">SOCK_STREAM<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="52">0<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">fd<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">&lt;<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">char<pos:position pos:line="19" pos:column="29"/></name></type> <name><name pos:line="19" pos:column="30">errbuf<pos:position pos:line="19" pos:column="36"/></name><index pos:line="19" pos:column="36">[<expr><literal type="number" pos:line="19" pos:column="37">1024<pos:position pos:line="19" pos:column="41"/></literal></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">ERROR<pos:position pos:line="20" pos:column="30"/></name> <argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"memcached: unix socket: %s"<pos:position pos:line="20" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="62">sstrerror<pos:position pos:line="20" pos:column="71"/></name> <argument_list pos:line="20" pos:column="72">(<argument><expr><name pos:line="20" pos:column="73">errno<pos:position pos:line="20" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="80">errbuf<pos:position pos:line="20" pos:column="86"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="21" pos:column="49">sizeof <argument_list pos:line="21" pos:column="56">(<argument><expr><name pos:line="21" pos:column="57">errbuf<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><operator pos:line="22" pos:column="32">-<pos:position pos:line="22" pos:column="33"/></operator><literal type="number" pos:line="22" pos:column="33">1<pos:position pos:line="22" pos:column="34"/></literal></expr>;<pos:position pos:line="22" pos:column="35"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="25" pos:column="17">/* connect to the memcached daemon */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">status<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">ssize_t<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">)<pos:position pos:line="26" pos:column="35"/></operator> <call><name pos:line="26" pos:column="36">connect<pos:position pos:line="26" pos:column="43"/></name> <argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">fd<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="49">(<pos:position pos:line="26" pos:column="50"/></operator>struct <name pos:line="26" pos:column="57">sockaddr<pos:position pos:line="26" pos:column="65"/></name> <operator pos:line="26" pos:column="66">*<pos:position pos:line="26" pos:column="67"/></operator><operator pos:line="26" pos:column="67">)<pos:position pos:line="26" pos:column="68"/></operator> <operator pos:line="26" pos:column="69">&amp;<pos:position pos:line="26" pos:column="74"/></operator><name pos:line="26" pos:column="70">serv_addr<pos:position pos:line="26" pos:column="79"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="27" pos:column="33">sizeof <argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">serv_addr<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">status<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">!=<pos:position pos:line="28" pos:column="30"/></operator> <literal type="number" pos:line="28" pos:column="31">0<pos:position pos:line="28" pos:column="32"/></literal></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">shutdown<pos:position pos:line="29" pos:column="33"/></name> <argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">fd<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">SHUT_RDWR<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">close<pos:position pos:line="30" pos:column="30"/></name> <argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">fd<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">fd<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <operator pos:line="31" pos:column="30">-<pos:position pos:line="31" pos:column="31"/></operator><literal type="number" pos:line="31" pos:column="31">1<pos:position pos:line="31" pos:column="32"/></literal></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then>
	<else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{ <comment type="block" pos:line="34" pos:column="16">/* if (memcached_socket == NULL) */</comment>
		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">const<pos:position pos:line="35" pos:column="22"/></specifier> <name pos:line="35" pos:column="23">char<pos:position pos:line="35" pos:column="27"/></name> <modifier pos:line="35" pos:column="28">*<pos:position pos:line="35" pos:column="29"/></modifier></type><name pos:line="35" pos:column="29">host<pos:position pos:line="35" pos:column="33"/></name></decl>;<pos:position pos:line="35" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">const<pos:position pos:line="36" pos:column="22"/></specifier> <name pos:line="36" pos:column="23">char<pos:position pos:line="36" pos:column="27"/></name> <modifier pos:line="36" pos:column="28">*<pos:position pos:line="36" pos:column="29"/></modifier></type><name pos:line="36" pos:column="29">port<pos:position pos:line="36" pos:column="33"/></name></decl>;<pos:position pos:line="36" pos:column="34"/></decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">addrinfo<pos:position pos:line="38" pos:column="32"/></name></name></type>  <name pos:line="38" pos:column="34">ai_hints<pos:position pos:line="38" pos:column="42"/></name></decl>;<pos:position pos:line="38" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">addrinfo<pos:position pos:line="39" pos:column="32"/></name></name> <modifier pos:line="39" pos:column="33">*<pos:position pos:line="39" pos:column="34"/></modifier></type><name pos:line="39" pos:column="34">ai_list<pos:position pos:line="39" pos:column="41"/></name></decl>, <modifier pos:line="39" pos:column="43">*<pos:position pos:line="39" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="39" pos:column="44">ai_ptr<pos:position pos:line="39" pos:column="50"/></name></decl>;<pos:position pos:line="39" pos:column="51"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type>              <name pos:line="40" pos:column="34">ai_return<pos:position pos:line="40" pos:column="43"/></name> <init pos:line="40" pos:column="44">= <expr><literal type="number" pos:line="40" pos:column="46">0<pos:position pos:line="40" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="48"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="42" pos:column="17">memset<pos:position pos:line="42" pos:column="23"/></name> <argument_list pos:line="42" pos:column="24">(<argument><expr><operator pos:line="42" pos:column="25">&amp;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="26">ai_hints<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="42" pos:column="36">'\0'<pos:position pos:line="42" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="42">sizeof <argument_list pos:line="42" pos:column="49">(<argument><expr><name pos:line="42" pos:column="50">ai_hints<pos:position pos:line="42" pos:column="58"/></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">ai_hints<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">.<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="26">ai_flags<pos:position pos:line="43" pos:column="34"/></name></name>    <operator pos:line="43" pos:column="38">=<pos:position pos:line="43" pos:column="39"/></operator> <literal type="number" pos:line="43" pos:column="40">0<pos:position pos:line="43" pos:column="41"/></literal></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="44" pos:column="21"/></name></cpp:ifdef>
		<comment type="block" pos:line="45" pos:column="17">/*	ai_hints.ai_flags   |= AI_ADDRCONFIG; */</comment>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">ai_hints<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">.<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="26">ai_family<pos:position pos:line="47" pos:column="35"/></name></name>   <operator pos:line="47" pos:column="38">=<pos:position pos:line="47" pos:column="39"/></operator> <name pos:line="47" pos:column="40">AF_INET<pos:position pos:line="47" pos:column="47"/></name></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">ai_hints<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">.<pos:position pos:line="48" pos:column="26"/></operator><name pos:line="48" pos:column="26">ai_socktype<pos:position pos:line="48" pos:column="37"/></name></name> <operator pos:line="48" pos:column="38">=<pos:position pos:line="48" pos:column="39"/></operator> <name pos:line="48" pos:column="40">SOCK_STREAM<pos:position pos:line="48" pos:column="51"/></name></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="49" pos:column="17">ai_hints<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">.<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">ai_protocol<pos:position pos:line="49" pos:column="37"/></name></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <literal type="number" pos:line="49" pos:column="40">0<pos:position pos:line="49" pos:column="41"/></literal></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>

		<expr_stmt><expr><name pos:line="51" pos:column="17">host<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">memcached_host<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">host<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">==<pos:position pos:line="52" pos:column="28"/></operator> <name pos:line="52" pos:column="29">NULL<pos:position pos:line="52" pos:column="33"/></name></expr>)<pos:position pos:line="52" pos:column="34"/></condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{
			<expr_stmt><expr><name pos:line="53" pos:column="25">host<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <name pos:line="53" pos:column="32">MEMCACHED_DEF_HOST<pos:position pos:line="53" pos:column="50"/></name></expr>;<pos:position pos:line="53" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="56" pos:column="17">port<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <name pos:line="56" pos:column="24">memcached_port<pos:position pos:line="56" pos:column="38"/></name></expr>;<pos:position pos:line="56" pos:column="39"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><call><name pos:line="57" pos:column="21">strlen<pos:position pos:line="57" pos:column="27"/></name> <argument_list pos:line="57" pos:column="28">(<argument><expr><name pos:line="57" pos:column="29">port<pos:position pos:line="57" pos:column="33"/></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call> <operator pos:line="57" pos:column="35">==<pos:position pos:line="57" pos:column="37"/></operator> <literal type="number" pos:line="57" pos:column="38">0<pos:position pos:line="57" pos:column="39"/></literal></expr>)<pos:position pos:line="57" pos:column="40"/></condition><then pos:line="57" pos:column="40"> <block pos:line="57" pos:column="41">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">port<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">=<pos:position pos:line="58" pos:column="31"/></operator> <name pos:line="58" pos:column="32">MEMCACHED_DEF_PORT<pos:position pos:line="58" pos:column="50"/></name></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><operator pos:line="61" pos:column="21">(<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">ai_return<pos:position pos:line="61" pos:column="31"/></name> <operator pos:line="61" pos:column="32">=<pos:position pos:line="61" pos:column="33"/></operator> <call><name pos:line="61" pos:column="34">getaddrinfo<pos:position pos:line="61" pos:column="45"/></name> <argument_list pos:line="61" pos:column="46">(<argument><expr><name pos:line="61" pos:column="47">host<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">port<pos:position pos:line="61" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="59">&amp;<pos:position pos:line="61" pos:column="64"/></operator><name pos:line="61" pos:column="60">ai_hints<pos:position pos:line="61" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="70">&amp;<pos:position pos:line="61" pos:column="75"/></operator><name pos:line="61" pos:column="71">ai_list<pos:position pos:line="61" pos:column="78"/></name></expr></argument>)<pos:position pos:line="61" pos:column="79"/></argument_list></call><operator pos:line="61" pos:column="79">)<pos:position pos:line="61" pos:column="80"/></operator> <operator pos:line="61" pos:column="81">!=<pos:position pos:line="61" pos:column="83"/></operator> <literal type="number" pos:line="61" pos:column="84">0<pos:position pos:line="61" pos:column="85"/></literal></expr>)<pos:position pos:line="61" pos:column="86"/></condition><then pos:line="61" pos:column="86"> <block pos:line="61" pos:column="87">{
			<decl_stmt><decl><type><name pos:line="62" pos:column="25">char<pos:position pos:line="62" pos:column="29"/></name></type> <name><name pos:line="62" pos:column="30">errbuf<pos:position pos:line="62" pos:column="36"/></name><index pos:line="62" pos:column="36">[<expr><literal type="number" pos:line="62" pos:column="37">1024<pos:position pos:line="62" pos:column="41"/></literal></expr>]<pos:position pos:line="62" pos:column="42"/></index></name></decl>;<pos:position pos:line="62" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">ERROR<pos:position pos:line="63" pos:column="30"/></name> <argument_list pos:line="63" pos:column="31">(<argument><expr><literal type="string" pos:line="63" pos:column="32">"memcached: getaddrinfo (%s, %s): %s"<pos:position pos:line="63" pos:column="69"/></literal></expr></argument>,
					<argument><expr><name pos:line="64" pos:column="41">host<pos:position pos:line="64" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">port<pos:position pos:line="64" pos:column="51"/></name></expr></argument>,
					<argument><expr><ternary><condition><expr><operator pos:line="65" pos:column="41">(<pos:position pos:line="65" pos:column="42"/></operator><name pos:line="65" pos:column="42">ai_return<pos:position pos:line="65" pos:column="51"/></name> <operator pos:line="65" pos:column="52">==<pos:position pos:line="65" pos:column="54"/></operator> <name pos:line="65" pos:column="55">EAI_SYSTEM<pos:position pos:line="65" pos:column="65"/></name><operator pos:line="65" pos:column="65">)<pos:position pos:line="65" pos:column="66"/></operator></expr>
					?<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42"> <expr><call><name pos:line="66" pos:column="43">sstrerror<pos:position pos:line="66" pos:column="52"/></name> <argument_list pos:line="66" pos:column="53">(<argument><expr><name pos:line="66" pos:column="54">errno<pos:position pos:line="66" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="61">errbuf<pos:position pos:line="66" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="69">sizeof <argument_list pos:line="66" pos:column="76">(<argument><expr><name pos:line="66" pos:column="77">errbuf<pos:position pos:line="66" pos:column="83"/></name></expr></argument>)<pos:position pos:line="66" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="85"/></argument_list></call></expr>
					<pos:position pos:line="67" pos:column="6"/></then><else pos:line="67" pos:column="41">: <expr><call><name pos:line="67" pos:column="43">gai_strerror<pos:position pos:line="67" pos:column="55"/></name> <argument_list pos:line="67" pos:column="56">(<argument><expr><name pos:line="67" pos:column="57">ai_return<pos:position pos:line="67" pos:column="66"/></name></expr></argument>)<pos:position pos:line="67" pos:column="67"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="69"/></expr_stmt>
			<return pos:line="68" pos:column="25">return <expr><operator pos:line="68" pos:column="32">-<pos:position pos:line="68" pos:column="33"/></operator><literal type="number" pos:line="68" pos:column="33">1<pos:position pos:line="68" pos:column="34"/></literal></expr>;<pos:position pos:line="68" pos:column="35"/></return>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="71" pos:column="17">fd<pos:position pos:line="71" pos:column="19"/></name> <operator pos:line="71" pos:column="20">=<pos:position pos:line="71" pos:column="21"/></operator> <operator pos:line="71" pos:column="22">-<pos:position pos:line="71" pos:column="23"/></operator><literal type="number" pos:line="71" pos:column="23">1<pos:position pos:line="71" pos:column="24"/></literal></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
		<for pos:line="72" pos:column="17">for <control pos:line="72" pos:column="21">(<init><expr><name pos:line="72" pos:column="22">ai_ptr<pos:position pos:line="72" pos:column="28"/></name> <operator pos:line="72" pos:column="29">=<pos:position pos:line="72" pos:column="30"/></operator> <name pos:line="72" pos:column="31">ai_list<pos:position pos:line="72" pos:column="38"/></name></expr>;<pos:position pos:line="72" pos:column="39"/></init> <condition><expr><name pos:line="72" pos:column="40">ai_ptr<pos:position pos:line="72" pos:column="46"/></name> <operator pos:line="72" pos:column="47">!=<pos:position pos:line="72" pos:column="49"/></operator> <name pos:line="72" pos:column="50">NULL<pos:position pos:line="72" pos:column="54"/></name></expr>;<pos:position pos:line="72" pos:column="55"/></condition> <incr><expr><name pos:line="72" pos:column="56">ai_ptr<pos:position pos:line="72" pos:column="62"/></name> <operator pos:line="72" pos:column="63">=<pos:position pos:line="72" pos:column="64"/></operator> <name><name pos:line="72" pos:column="65">ai_ptr<pos:position pos:line="72" pos:column="71"/></name><operator pos:line="72" pos:column="71">-&gt;<pos:position pos:line="72" pos:column="76"/></operator><name pos:line="72" pos:column="73">ai_next<pos:position pos:line="72" pos:column="80"/></name></name></expr></incr>)<pos:position pos:line="72" pos:column="81"/></control> <block pos:line="72" pos:column="82">{
			<comment type="block" pos:line="73" pos:column="25">/* create our socket descriptor */</comment>
			<expr_stmt><expr><name pos:line="74" pos:column="25">fd<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">=<pos:position pos:line="74" pos:column="29"/></operator> <call><name pos:line="74" pos:column="30">socket<pos:position pos:line="74" pos:column="36"/></name> <argument_list pos:line="74" pos:column="37">(<argument><expr><name><name pos:line="74" pos:column="38">ai_ptr<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">-&gt;<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="46">ai_family<pos:position pos:line="74" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="57">ai_ptr<pos:position pos:line="74" pos:column="63"/></name><operator pos:line="74" pos:column="63">-&gt;<pos:position pos:line="74" pos:column="68"/></operator><name pos:line="74" pos:column="65">ai_socktype<pos:position pos:line="74" pos:column="76"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="78">ai_ptr<pos:position pos:line="74" pos:column="84"/></name><operator pos:line="74" pos:column="84">-&gt;<pos:position pos:line="74" pos:column="89"/></operator><name pos:line="74" pos:column="86">ai_protocol<pos:position pos:line="74" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="99"/></expr_stmt>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name pos:line="75" pos:column="29">fd<pos:position pos:line="75" pos:column="31"/></name> <operator pos:line="75" pos:column="32">&lt;<pos:position pos:line="75" pos:column="36"/></operator> <literal type="number" pos:line="75" pos:column="34">0<pos:position pos:line="75" pos:column="35"/></literal></expr>)<pos:position pos:line="75" pos:column="36"/></condition><then pos:line="75" pos:column="36"> <block pos:line="75" pos:column="37">{
				<decl_stmt><decl><type><name pos:line="76" pos:column="33">char<pos:position pos:line="76" pos:column="37"/></name></type> <name><name pos:line="76" pos:column="38">errbuf<pos:position pos:line="76" pos:column="44"/></name><index pos:line="76" pos:column="44">[<expr><literal type="number" pos:line="76" pos:column="45">1024<pos:position pos:line="76" pos:column="49"/></literal></expr>]<pos:position pos:line="76" pos:column="50"/></index></name></decl>;<pos:position pos:line="76" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="77" pos:column="33">ERROR<pos:position pos:line="77" pos:column="38"/></name> <argument_list pos:line="77" pos:column="39">(<argument><expr><literal type="string" pos:line="77" pos:column="40">"memcached: socket: %s"<pos:position pos:line="77" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="77" pos:column="65">sstrerror<pos:position pos:line="77" pos:column="74"/></name> <argument_list pos:line="77" pos:column="75">(<argument><expr><name pos:line="77" pos:column="76">errno<pos:position pos:line="77" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="83">errbuf<pos:position pos:line="77" pos:column="89"/></name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="91">sizeof <argument_list pos:line="77" pos:column="98">(<argument><expr><name pos:line="77" pos:column="99">errbuf<pos:position pos:line="77" pos:column="105"/></name></expr></argument>)<pos:position pos:line="77" pos:column="106"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="107"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="109"/></expr_stmt>
				<continue pos:line="78" pos:column="33">continue;<pos:position pos:line="78" pos:column="42"/></continue>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="81" pos:column="25">/* connect to the memcached daemon */</comment>
			<expr_stmt><expr><name pos:line="82" pos:column="25">status<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">=<pos:position pos:line="82" pos:column="33"/></operator> <operator pos:line="82" pos:column="34">(<pos:position pos:line="82" pos:column="35"/></operator><name pos:line="82" pos:column="35">ssize_t<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">)<pos:position pos:line="82" pos:column="43"/></operator> <call><name pos:line="82" pos:column="44">connect<pos:position pos:line="82" pos:column="51"/></name> <argument_list pos:line="82" pos:column="52">(<argument><expr><name pos:line="82" pos:column="53">fd<pos:position pos:line="82" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="57">(<pos:position pos:line="82" pos:column="58"/></operator>struct <name pos:line="82" pos:column="65">sockaddr<pos:position pos:line="82" pos:column="73"/></name> <operator pos:line="82" pos:column="74">*<pos:position pos:line="82" pos:column="75"/></operator><operator pos:line="82" pos:column="75">)<pos:position pos:line="82" pos:column="76"/></operator> <name><name pos:line="82" pos:column="77">ai_ptr<pos:position pos:line="82" pos:column="83"/></name><operator pos:line="82" pos:column="83">-&gt;<pos:position pos:line="82" pos:column="88"/></operator><name pos:line="82" pos:column="85">ai_addr<pos:position pos:line="82" pos:column="92"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="94">ai_ptr<pos:position pos:line="82" pos:column="100"/></name><operator pos:line="82" pos:column="100">-&gt;<pos:position pos:line="82" pos:column="105"/></operator><name pos:line="82" pos:column="102">ai_addrlen<pos:position pos:line="82" pos:column="112"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="114"/></expr_stmt>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><name pos:line="83" pos:column="29">status<pos:position pos:line="83" pos:column="35"/></name> <operator pos:line="83" pos:column="36">!=<pos:position pos:line="83" pos:column="38"/></operator> <literal type="number" pos:line="83" pos:column="39">0<pos:position pos:line="83" pos:column="40"/></literal></expr>)<pos:position pos:line="83" pos:column="41"/></condition><then pos:line="83" pos:column="41"> <block pos:line="83" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="84" pos:column="33">shutdown<pos:position pos:line="84" pos:column="41"/></name> <argument_list pos:line="84" pos:column="42">(<argument><expr><name pos:line="84" pos:column="43">fd<pos:position pos:line="84" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="47">SHUT_RDWR<pos:position pos:line="84" pos:column="56"/></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">close<pos:position pos:line="85" pos:column="38"/></name> <argument_list pos:line="85" pos:column="39">(<argument><expr><name pos:line="85" pos:column="40">fd<pos:position pos:line="85" pos:column="42"/></name></expr></argument>)<pos:position pos:line="85" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="86" pos:column="33">fd<pos:position pos:line="86" pos:column="35"/></name> <operator pos:line="86" pos:column="36">=<pos:position pos:line="86" pos:column="37"/></operator> <operator pos:line="86" pos:column="38">-<pos:position pos:line="86" pos:column="39"/></operator><literal type="number" pos:line="86" pos:column="39">1<pos:position pos:line="86" pos:column="40"/></literal></expr>;<pos:position pos:line="86" pos:column="41"/></expr_stmt>
				<continue pos:line="87" pos:column="33">continue;<pos:position pos:line="87" pos:column="42"/></continue>
			}<pos:position pos:line="88" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="90" pos:column="25">/* A socket could be opened and connecting succeeded. We're
			 * done. */</comment>
			<break pos:line="92" pos:column="25">break;<pos:position pos:line="92" pos:column="31"/></break>
		}<pos:position pos:line="93" pos:column="18"/></block></for>

		<expr_stmt><expr><call><name pos:line="95" pos:column="17">freeaddrinfo<pos:position pos:line="95" pos:column="29"/></name> <argument_list pos:line="95" pos:column="30">(<argument><expr><name pos:line="95" pos:column="31">ai_list<pos:position pos:line="95" pos:column="38"/></name></expr></argument>)<pos:position pos:line="95" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="96" pos:column="10"/></block></else></if>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">fd<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">&lt;<pos:position pos:line="98" pos:column="20"/></operator> <literal type="number" pos:line="98" pos:column="18">0<pos:position pos:line="98" pos:column="19"/></literal></expr>)<pos:position pos:line="98" pos:column="20"/></condition><then pos:line="98" pos:column="20"> <block pos:line="98" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">ERROR<pos:position pos:line="99" pos:column="22"/></name> <argument_list pos:line="99" pos:column="23">(<argument><expr><literal type="string" pos:line="99" pos:column="24">"memcached: Could not connect to daemon."<pos:position pos:line="99" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="67"/></expr_stmt>
		<return pos:line="100" pos:column="17">return <expr><operator pos:line="100" pos:column="24">-<pos:position pos:line="100" pos:column="25"/></operator><literal type="number" pos:line="100" pos:column="25">1<pos:position pos:line="100" pos:column="26"/></literal></expr>;<pos:position pos:line="100" pos:column="27"/></return>
	}<pos:position pos:line="101" pos:column="10"/></block></then></if>

	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><call><name pos:line="103" pos:column="13">send<pos:position pos:line="103" pos:column="17"/></name><argument_list pos:line="103" pos:column="17">(<argument><expr><name pos:line="103" pos:column="18">fd<pos:position pos:line="103" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="22">"stats\r\n"<pos:position pos:line="103" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="103" pos:column="35">sizeof<argument_list pos:line="103" pos:column="41">(<argument><expr><literal type="string" pos:line="103" pos:column="42">"stats\r\n"<pos:position pos:line="103" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></sizeof> <operator pos:line="103" pos:column="55">-<pos:position pos:line="103" pos:column="56"/></operator> <literal type="number" pos:line="103" pos:column="57">1<pos:position pos:line="103" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="60">MSG_DONTWAIT<pos:position pos:line="103" pos:column="72"/></name></expr></argument>)<pos:position pos:line="103" pos:column="73"/></argument_list></call> <operator pos:line="103" pos:column="74">!=<pos:position pos:line="103" pos:column="76"/></operator> <operator pos:line="103" pos:column="77">(<pos:position pos:line="103" pos:column="78"/></operator><sizeof pos:line="103" pos:column="78">sizeof<argument_list pos:line="103" pos:column="84">(<argument><expr><literal type="string" pos:line="103" pos:column="85">"stats\r\n"<pos:position pos:line="103" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="97"/></argument_list></sizeof> <operator pos:line="103" pos:column="98">-<pos:position pos:line="103" pos:column="99"/></operator> <literal type="number" pos:line="103" pos:column="100">1<pos:position pos:line="103" pos:column="101"/></literal><operator pos:line="103" pos:column="101">)<pos:position pos:line="103" pos:column="102"/></operator></expr>)<pos:position pos:line="103" pos:column="103"/></condition><then pos:line="103" pos:column="103"> <block pos:line="103" pos:column="104">{
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">ERROR<pos:position pos:line="104" pos:column="22"/></name> <argument_list pos:line="104" pos:column="23">(<argument><expr><literal type="string" pos:line="104" pos:column="24">"memcached: Could not send command to the memcached daemon."<pos:position pos:line="104" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="86"/></expr_stmt>
		<return pos:line="105" pos:column="17">return <expr><operator pos:line="105" pos:column="24">-<pos:position pos:line="105" pos:column="25"/></operator><literal type="number" pos:line="105" pos:column="25">1<pos:position pos:line="105" pos:column="26"/></literal></expr>;<pos:position pos:line="105" pos:column="27"/></return>
	}<pos:position pos:line="106" pos:column="10"/></block></then></if>

	<block pos:line="108" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="109" pos:column="17">struct<pos:position pos:line="109" pos:column="23"/></name> <name pos:line="109" pos:column="24">pollfd<pos:position pos:line="109" pos:column="30"/></name></name></type> <name pos:line="109" pos:column="31">p<pos:position pos:line="109" pos:column="32"/></name></decl>;<pos:position pos:line="109" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="110" pos:column="17">int<pos:position pos:line="110" pos:column="20"/></name></type> <name pos:line="110" pos:column="21">status<pos:position pos:line="110" pos:column="27"/></name></decl>;<pos:position pos:line="110" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="112" pos:column="17">memset<pos:position pos:line="112" pos:column="23"/></name> <argument_list pos:line="112" pos:column="24">(<argument><expr><operator pos:line="112" pos:column="25">&amp;<pos:position pos:line="112" pos:column="30"/></operator><name pos:line="112" pos:column="26">p<pos:position pos:line="112" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="29">0<pos:position pos:line="112" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="112" pos:column="32">sizeof <argument_list pos:line="112" pos:column="39">(<argument><expr><name pos:line="112" pos:column="40">p<pos:position pos:line="112" pos:column="41"/></name></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="112" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="113" pos:column="17">p<pos:position pos:line="113" pos:column="18"/></name><operator pos:line="113" pos:column="18">.<pos:position pos:line="113" pos:column="19"/></operator><name pos:line="113" pos:column="19">fd<pos:position pos:line="113" pos:column="21"/></name></name> <operator pos:line="113" pos:column="22">=<pos:position pos:line="113" pos:column="23"/></operator> <name pos:line="113" pos:column="24">fd<pos:position pos:line="113" pos:column="26"/></name></expr>;<pos:position pos:line="113" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="114" pos:column="17">p<pos:position pos:line="114" pos:column="18"/></name><operator pos:line="114" pos:column="18">.<pos:position pos:line="114" pos:column="19"/></operator><name pos:line="114" pos:column="19">events<pos:position pos:line="114" pos:column="25"/></name></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <name pos:line="114" pos:column="28">POLLIN<pos:position pos:line="114" pos:column="34"/></name> <operator pos:line="114" pos:column="35">|<pos:position pos:line="114" pos:column="36"/></operator> <name pos:line="114" pos:column="37">POLLERR<pos:position pos:line="114" pos:column="44"/></name> <operator pos:line="114" pos:column="45">|<pos:position pos:line="114" pos:column="46"/></operator> <name pos:line="114" pos:column="47">POLLHUP<pos:position pos:line="114" pos:column="54"/></name></expr>;<pos:position pos:line="114" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="115" pos:column="17">p<pos:position pos:line="115" pos:column="18"/></name><operator pos:line="115" pos:column="18">.<pos:position pos:line="115" pos:column="19"/></operator><name pos:line="115" pos:column="19">revents<pos:position pos:line="115" pos:column="26"/></name></name> <operator pos:line="115" pos:column="27">=<pos:position pos:line="115" pos:column="28"/></operator> <literal type="number" pos:line="115" pos:column="29">0<pos:position pos:line="115" pos:column="30"/></literal></expr>;<pos:position pos:line="115" pos:column="31"/></expr_stmt>

		<expr_stmt><expr><name pos:line="117" pos:column="17">status<pos:position pos:line="117" pos:column="23"/></name> <operator pos:line="117" pos:column="24">=<pos:position pos:line="117" pos:column="25"/></operator> <call><name pos:line="117" pos:column="26">poll<pos:position pos:line="117" pos:column="30"/></name> <argument_list pos:line="117" pos:column="31">(<argument><expr><operator pos:line="117" pos:column="32">&amp;<pos:position pos:line="117" pos:column="37"/></operator><name pos:line="117" pos:column="33">p<pos:position pos:line="117" pos:column="34"/></name></expr></argument>, <comment type="block" pos:line="117" pos:column="36">/* nfds = */</comment> <argument><expr><literal type="number" pos:line="117" pos:column="49">1<pos:position pos:line="117" pos:column="50"/></literal></expr></argument>, <comment type="block" pos:line="117" pos:column="52">/* timeout = */</comment> <argument><expr><literal type="number" pos:line="117" pos:column="68">1000<pos:position pos:line="117" pos:column="72"/></literal> <operator pos:line="117" pos:column="73">*<pos:position pos:line="117" pos:column="74"/></operator> <name pos:line="117" pos:column="75">interval_g<pos:position pos:line="117" pos:column="85"/></name></expr></argument>)<pos:position pos:line="117" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="87"/></expr_stmt>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name pos:line="118" pos:column="21">status<pos:position pos:line="118" pos:column="27"/></name> <operator pos:line="118" pos:column="28">&lt;=<pos:position pos:line="118" pos:column="33"/></operator> <literal type="number" pos:line="118" pos:column="31">0<pos:position pos:line="118" pos:column="32"/></literal></expr>)<pos:position pos:line="118" pos:column="33"/></condition><then pos:line="118" pos:column="33">
		<block pos:line="119" pos:column="17">{
			<if pos:line="120" pos:column="25">if <condition pos:line="120" pos:column="28">(<expr><name pos:line="120" pos:column="29">status<pos:position pos:line="120" pos:column="35"/></name> <operator pos:line="120" pos:column="36">==<pos:position pos:line="120" pos:column="38"/></operator> <literal type="number" pos:line="120" pos:column="39">0<pos:position pos:line="120" pos:column="40"/></literal></expr>)<pos:position pos:line="120" pos:column="41"/></condition><then pos:line="120" pos:column="41">
			<block pos:line="121" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="122" pos:column="33">ERROR<pos:position pos:line="122" pos:column="38"/></name> <argument_list pos:line="122" pos:column="39">(<argument><expr><literal type="string" pos:line="122" pos:column="40">"memcached: poll(2) timed out after %i seconds."<pos:position pos:line="122" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="90">interval_g<pos:position pos:line="122" pos:column="100"/></name></expr></argument>)<pos:position pos:line="122" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="102"/></expr_stmt>
			}<pos:position pos:line="123" pos:column="26"/></block></then>
			<else pos:line="124" pos:column="25">else
			<block pos:line="125" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="126" pos:column="33">char<pos:position pos:line="126" pos:column="37"/></name></type> <name><name pos:line="126" pos:column="38">errbuf<pos:position pos:line="126" pos:column="44"/></name><index pos:line="126" pos:column="44">[<expr><literal type="number" pos:line="126" pos:column="45">1024<pos:position pos:line="126" pos:column="49"/></literal></expr>]<pos:position pos:line="126" pos:column="50"/></index></name></decl>;<pos:position pos:line="126" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="127" pos:column="33">ERROR<pos:position pos:line="127" pos:column="38"/></name> <argument_list pos:line="127" pos:column="39">(<argument><expr><literal type="string" pos:line="127" pos:column="40">"memcached: poll(2) failed: %s"<pos:position pos:line="127" pos:column="71"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="128" pos:column="49">sstrerror<pos:position pos:line="128" pos:column="58"/></name> <argument_list pos:line="128" pos:column="59">(<argument><expr><name pos:line="128" pos:column="60">errno<pos:position pos:line="128" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="67">errbuf<pos:position pos:line="128" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="128" pos:column="75">sizeof <argument_list pos:line="128" pos:column="82">(<argument><expr><name pos:line="128" pos:column="83">errbuf<pos:position pos:line="128" pos:column="89"/></name></expr></argument>)<pos:position pos:line="128" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="128" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="93"/></expr_stmt>
			}<pos:position pos:line="129" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="130" pos:column="25">shutdown<pos:position pos:line="130" pos:column="33"/></name> <argument_list pos:line="130" pos:column="34">(<argument><expr><name pos:line="130" pos:column="35">fd<pos:position pos:line="130" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="39">SHUT_RDWR<pos:position pos:line="130" pos:column="48"/></name></expr></argument>)<pos:position pos:line="130" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="131" pos:column="25">close<pos:position pos:line="131" pos:column="30"/></name> <argument_list pos:line="131" pos:column="31">(<argument><expr><name pos:line="131" pos:column="32">fd<pos:position pos:line="131" pos:column="34"/></name></expr></argument>)<pos:position pos:line="131" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="36"/></expr_stmt>
			<return pos:line="132" pos:column="25">return <expr><operator pos:line="132" pos:column="32">(<pos:position pos:line="132" pos:column="33"/></operator><operator pos:line="132" pos:column="33">-<pos:position pos:line="132" pos:column="34"/></operator><literal type="number" pos:line="132" pos:column="34">1<pos:position pos:line="132" pos:column="35"/></literal><operator pos:line="132" pos:column="35">)<pos:position pos:line="132" pos:column="36"/></operator></expr>;<pos:position pos:line="132" pos:column="37"/></return>
		}<pos:position pos:line="133" pos:column="18"/></block></then></if>
	}<pos:position pos:line="134" pos:column="10"/></block>

	<comment type="block" pos:line="136" pos:column="9">/* receive data from the memcached daemon */</comment>
	<expr_stmt><expr><call><name pos:line="137" pos:column="9">memset<pos:position pos:line="137" pos:column="15"/></name> <argument_list pos:line="137" pos:column="16">(<argument><expr><name pos:line="137" pos:column="17">buffer<pos:position pos:line="137" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="137" pos:column="25">'\0'<pos:position pos:line="137" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="31">buffer_size<pos:position pos:line="137" pos:column="42"/></name></expr></argument>)<pos:position pos:line="137" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="139" pos:column="9">buffer_fill<pos:position pos:line="139" pos:column="20"/></name> <operator pos:line="139" pos:column="21">=<pos:position pos:line="139" pos:column="22"/></operator> <literal type="number" pos:line="139" pos:column="23">0<pos:position pos:line="139" pos:column="24"/></literal></expr>;<pos:position pos:line="139" pos:column="25"/></expr_stmt>
	<while pos:line="140" pos:column="9">while <condition pos:line="140" pos:column="15">(<expr><operator pos:line="140" pos:column="16">(<pos:position pos:line="140" pos:column="17"/></operator><name pos:line="140" pos:column="17">status<pos:position pos:line="140" pos:column="23"/></name> <operator pos:line="140" pos:column="24">=<pos:position pos:line="140" pos:column="25"/></operator> <call><name pos:line="140" pos:column="26">recv<pos:position pos:line="140" pos:column="30"/></name> <argument_list pos:line="140" pos:column="31">(<argument><expr><name pos:line="140" pos:column="32">fd<pos:position pos:line="140" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="36">buffer<pos:position pos:line="140" pos:column="42"/></name> <operator pos:line="140" pos:column="43">+<pos:position pos:line="140" pos:column="44"/></operator> <name pos:line="140" pos:column="45">buffer_fill<pos:position pos:line="140" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="58">buffer_size<pos:position pos:line="140" pos:column="69"/></name> <operator pos:line="140" pos:column="70">-<pos:position pos:line="140" pos:column="71"/></operator> <name pos:line="140" pos:column="72">buffer_fill<pos:position pos:line="140" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="85">MSG_DONTWAIT<pos:position pos:line="140" pos:column="97"/></name></expr></argument>)<pos:position pos:line="140" pos:column="98"/></argument_list></call><operator pos:line="140" pos:column="98">)<pos:position pos:line="140" pos:column="99"/></operator> <operator pos:line="140" pos:column="100">!=<pos:position pos:line="140" pos:column="102"/></operator> <literal type="number" pos:line="140" pos:column="103">0<pos:position pos:line="140" pos:column="104"/></literal></expr>)<pos:position pos:line="140" pos:column="105"/></condition> <block pos:line="140" pos:column="106">{
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">i<pos:position pos:line="141" pos:column="22"/></name> <operator pos:line="141" pos:column="23">&gt;<pos:position pos:line="141" pos:column="27"/></operator> <name pos:line="141" pos:column="25">MEMCACHED_RETRY_COUNT<pos:position pos:line="141" pos:column="46"/></name></expr>)<pos:position pos:line="141" pos:column="47"/></condition><then pos:line="141" pos:column="47"> <block pos:line="141" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="142" pos:column="25">ERROR<pos:position pos:line="142" pos:column="30"/></name><argument_list pos:line="142" pos:column="30">(<argument><expr><literal type="string" pos:line="142" pos:column="31">"recv() timed out"<pos:position pos:line="142" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="51"/></expr_stmt>
			<break pos:line="143" pos:column="25">break;<pos:position pos:line="143" pos:column="31"/></break>
		}<pos:position pos:line="144" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="145" pos:column="17">i<pos:position pos:line="145" pos:column="18"/></name><operator pos:line="145" pos:column="18">++<pos:position pos:line="145" pos:column="20"/></operator></expr>;<pos:position pos:line="145" pos:column="21"/></expr_stmt>

		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><name pos:line="147" pos:column="21">status<pos:position pos:line="147" pos:column="27"/></name> <operator pos:line="147" pos:column="28">==<pos:position pos:line="147" pos:column="30"/></operator> <operator pos:line="147" pos:column="31">-<pos:position pos:line="147" pos:column="32"/></operator><literal type="number" pos:line="147" pos:column="32">1<pos:position pos:line="147" pos:column="33"/></literal></expr>)<pos:position pos:line="147" pos:column="34"/></condition><then pos:line="147" pos:column="34"> <block pos:line="147" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="148" pos:column="25">char<pos:position pos:line="148" pos:column="29"/></name></type> <name><name pos:line="148" pos:column="30">errbuf<pos:position pos:line="148" pos:column="36"/></name><index pos:line="148" pos:column="36">[<expr><literal type="number" pos:line="148" pos:column="37">1024<pos:position pos:line="148" pos:column="41"/></literal></expr>]<pos:position pos:line="148" pos:column="42"/></index></name></decl>;<pos:position pos:line="148" pos:column="43"/></decl_stmt>

			<if pos:line="150" pos:column="25">if <condition pos:line="150" pos:column="28">(<expr><name pos:line="150" pos:column="29">errno<pos:position pos:line="150" pos:column="34"/></name> <operator pos:line="150" pos:column="35">==<pos:position pos:line="150" pos:column="37"/></operator> <name pos:line="150" pos:column="38">EAGAIN<pos:position pos:line="150" pos:column="44"/></name></expr>)<pos:position pos:line="150" pos:column="45"/></condition><then pos:line="150" pos:column="45"> <block pos:line="150" pos:column="46">{
				<continue pos:line="151" pos:column="33">continue;<pos:position pos:line="151" pos:column="42"/></continue>
			}<pos:position pos:line="152" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="154" pos:column="25">ERROR<pos:position pos:line="154" pos:column="30"/></name> <argument_list pos:line="154" pos:column="31">(<argument><expr><literal type="string" pos:line="154" pos:column="32">"memcached: Error reading from socket: %s"<pos:position pos:line="154" pos:column="74"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="155" pos:column="41">sstrerror<pos:position pos:line="155" pos:column="50"/></name> <argument_list pos:line="155" pos:column="51">(<argument><expr><name pos:line="155" pos:column="52">errno<pos:position pos:line="155" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="59">errbuf<pos:position pos:line="155" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="67">sizeof <argument_list pos:line="155" pos:column="74">(<argument><expr><name pos:line="155" pos:column="75">errbuf<pos:position pos:line="155" pos:column="81"/></name></expr></argument>)<pos:position pos:line="155" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="155" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="155" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="156" pos:column="25">shutdown<pos:position pos:line="156" pos:column="33"/></name><argument_list pos:line="156" pos:column="33">(<argument><expr><name pos:line="156" pos:column="34">fd<pos:position pos:line="156" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="38">SHUT_RDWR<pos:position pos:line="156" pos:column="47"/></name></expr></argument>)<pos:position pos:line="156" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="157" pos:column="25">close<pos:position pos:line="157" pos:column="30"/></name> <argument_list pos:line="157" pos:column="31">(<argument><expr><name pos:line="157" pos:column="32">fd<pos:position pos:line="157" pos:column="34"/></name></expr></argument>)<pos:position pos:line="157" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="36"/></expr_stmt>
			<return pos:line="158" pos:column="25">return <expr><operator pos:line="158" pos:column="32">-<pos:position pos:line="158" pos:column="33"/></operator><literal type="number" pos:line="158" pos:column="33">1<pos:position pos:line="158" pos:column="34"/></literal></expr>;<pos:position pos:line="158" pos:column="35"/></return>
		}<pos:position pos:line="159" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="160" pos:column="17">buffer_fill<pos:position pos:line="160" pos:column="28"/></name> <operator pos:line="160" pos:column="29">+=<pos:position pos:line="160" pos:column="31"/></operator> <name pos:line="160" pos:column="32">status<pos:position pos:line="160" pos:column="38"/></name></expr>;<pos:position pos:line="160" pos:column="39"/></expr_stmt>

		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><name pos:line="162" pos:column="21">buffer_fill<pos:position pos:line="162" pos:column="32"/></name> <operator pos:line="162" pos:column="33">&gt;<pos:position pos:line="162" pos:column="37"/></operator> <literal type="number" pos:line="162" pos:column="35">3<pos:position pos:line="162" pos:column="36"/></literal> <operator pos:line="162" pos:column="37">&amp;&amp;<pos:position pos:line="162" pos:column="47"/></operator> <name><name pos:line="162" pos:column="40">buffer<pos:position pos:line="162" pos:column="46"/></name><index pos:line="162" pos:column="46">[<expr><name pos:line="162" pos:column="47">buffer_fill<pos:position pos:line="162" pos:column="58"/></name><operator pos:line="162" pos:column="58">-<pos:position pos:line="162" pos:column="59"/></operator><literal type="number" pos:line="162" pos:column="59">5<pos:position pos:line="162" pos:column="60"/></literal></expr>]<pos:position pos:line="162" pos:column="61"/></index></name> <operator pos:line="162" pos:column="62">==<pos:position pos:line="162" pos:column="64"/></operator> <literal type="char" pos:line="162" pos:column="65">'E'<pos:position pos:line="162" pos:column="68"/></literal> <operator pos:line="162" pos:column="69">&amp;&amp;<pos:position pos:line="162" pos:column="79"/></operator> <name><name pos:line="162" pos:column="72">buffer<pos:position pos:line="162" pos:column="78"/></name><index pos:line="162" pos:column="78">[<expr><name pos:line="162" pos:column="79">buffer_fill<pos:position pos:line="162" pos:column="90"/></name><operator pos:line="162" pos:column="90">-<pos:position pos:line="162" pos:column="91"/></operator><literal type="number" pos:line="162" pos:column="91">4<pos:position pos:line="162" pos:column="92"/></literal></expr>]<pos:position pos:line="162" pos:column="93"/></index></name> <operator pos:line="162" pos:column="94">==<pos:position pos:line="162" pos:column="96"/></operator> <literal type="char" pos:line="162" pos:column="97">'N'<pos:position pos:line="162" pos:column="100"/></literal> <operator pos:line="162" pos:column="101">&amp;&amp;<pos:position pos:line="162" pos:column="111"/></operator> <name><name pos:line="162" pos:column="104">buffer<pos:position pos:line="162" pos:column="110"/></name><index pos:line="162" pos:column="110">[<expr><name pos:line="162" pos:column="111">buffer_fill<pos:position pos:line="162" pos:column="122"/></name><operator pos:line="162" pos:column="122">-<pos:position pos:line="162" pos:column="123"/></operator><literal type="number" pos:line="162" pos:column="123">3<pos:position pos:line="162" pos:column="124"/></literal></expr>]<pos:position pos:line="162" pos:column="125"/></index></name> <operator pos:line="162" pos:column="126">==<pos:position pos:line="162" pos:column="128"/></operator> <literal type="char" pos:line="162" pos:column="129">'D'<pos:position pos:line="162" pos:column="132"/></literal></expr>)<pos:position pos:line="162" pos:column="133"/></condition><then pos:line="162" pos:column="133"> <block pos:line="162" pos:column="134">{
			<comment type="block" pos:line="163" pos:column="25">/* we got all the data */</comment>
			<break pos:line="164" pos:column="25">break;<pos:position pos:line="164" pos:column="31"/></break>
		}<pos:position pos:line="165" pos:column="18"/></block></then></if>
	}<pos:position pos:line="166" pos:column="10"/></block></while>

	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">buffer_fill<pos:position pos:line="168" pos:column="24"/></name> <operator pos:line="168" pos:column="25">&gt;=<pos:position pos:line="168" pos:column="30"/></operator> <name pos:line="168" pos:column="28">buffer_size<pos:position pos:line="168" pos:column="39"/></name></expr>)<pos:position pos:line="168" pos:column="40"/></condition><then pos:line="168" pos:column="40"> <block pos:line="168" pos:column="41">{
		<expr_stmt><expr><name><name pos:line="169" pos:column="17">buffer<pos:position pos:line="169" pos:column="23"/></name><index pos:line="169" pos:column="23">[<expr><name pos:line="169" pos:column="24">buffer_size<pos:position pos:line="169" pos:column="35"/></name> <operator pos:line="169" pos:column="36">-<pos:position pos:line="169" pos:column="37"/></operator> <literal type="number" pos:line="169" pos:column="38">1<pos:position pos:line="169" pos:column="39"/></literal></expr>]<pos:position pos:line="169" pos:column="40"/></index></name> <operator pos:line="169" pos:column="41">=<pos:position pos:line="169" pos:column="42"/></operator> <literal type="char" pos:line="169" pos:column="43">'\0'<pos:position pos:line="169" pos:column="47"/></literal></expr>;<pos:position pos:line="169" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="170" pos:column="17">WARNING<pos:position pos:line="170" pos:column="24"/></name> <argument_list pos:line="170" pos:column="25">(<argument><expr><literal type="string" pos:line="170" pos:column="26">"memcached: Message from memcached has been truncated."<pos:position pos:line="170" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="83"/></expr_stmt>
	}<pos:position pos:line="171" pos:column="10"/></block></then> <elseif pos:line="171" pos:column="11">else <if pos:line="171" pos:column="16">if <condition pos:line="171" pos:column="19">(<expr><name pos:line="171" pos:column="20">buffer_fill<pos:position pos:line="171" pos:column="31"/></name> <operator pos:line="171" pos:column="32">==<pos:position pos:line="171" pos:column="34"/></operator> <literal type="number" pos:line="171" pos:column="35">0<pos:position pos:line="171" pos:column="36"/></literal></expr>)<pos:position pos:line="171" pos:column="37"/></condition><then pos:line="171" pos:column="37"> <block pos:line="171" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="172" pos:column="17">WARNING<pos:position pos:line="172" pos:column="24"/></name> <argument_list pos:line="172" pos:column="25">(<argument><expr><literal type="string" pos:line="172" pos:column="26">"memcached: Peer has unexpectedly shut down the socket. "<pos:position pos:line="172" pos:column="83"/></literal>
				<literal type="string" pos:line="173" pos:column="33">"Buffer: `%s'"<pos:position pos:line="173" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="49">buffer<pos:position pos:line="173" pos:column="55"/></name></expr></argument>)<pos:position pos:line="173" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="174" pos:column="17">shutdown<pos:position pos:line="174" pos:column="25"/></name><argument_list pos:line="174" pos:column="25">(<argument><expr><name pos:line="174" pos:column="26">fd<pos:position pos:line="174" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="30">SHUT_RDWR<pos:position pos:line="174" pos:column="39"/></name></expr></argument>)<pos:position pos:line="174" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">close<pos:position pos:line="175" pos:column="22"/></name><argument_list pos:line="175" pos:column="22">(<argument><expr><name pos:line="175" pos:column="23">fd<pos:position pos:line="175" pos:column="25"/></name></expr></argument>)<pos:position pos:line="175" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="27"/></expr_stmt>
		<return pos:line="176" pos:column="17">return <expr><operator pos:line="176" pos:column="24">-<pos:position pos:line="176" pos:column="25"/></operator><literal type="number" pos:line="176" pos:column="25">1<pos:position pos:line="176" pos:column="26"/></literal></expr>;<pos:position pos:line="176" pos:column="27"/></return>
	}<pos:position pos:line="177" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="179" pos:column="9">shutdown<pos:position pos:line="179" pos:column="17"/></name><argument_list pos:line="179" pos:column="17">(<argument><expr><name pos:line="179" pos:column="18">fd<pos:position pos:line="179" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="22">SHUT_RDWR<pos:position pos:line="179" pos:column="31"/></name></expr></argument>)<pos:position pos:line="179" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="180" pos:column="9">close<pos:position pos:line="180" pos:column="14"/></name><argument_list pos:line="180" pos:column="14">(<argument><expr><name pos:line="180" pos:column="15">fd<pos:position pos:line="180" pos:column="17"/></name></expr></argument>)<pos:position pos:line="180" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="19"/></expr_stmt>
	<return pos:line="181" pos:column="9">return <expr><literal type="number" pos:line="181" pos:column="16">0<pos:position pos:line="181" pos:column="17"/></literal></expr>;<pos:position pos:line="181" pos:column="18"/></return>
}<pos:position pos:line="182" pos:column="2"/></block></function></unit>
