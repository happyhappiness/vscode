<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1473_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">process_stations<pos:position pos:line="2" pos:column="17"/></name> <parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">sk<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">dev<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uint8_t<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">buf<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">24<pos:position pos:line="4" pos:column="23"/></literal><operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><literal type="number" pos:line="4" pos:column="24">1024<pos:position pos:line="4" pos:column="28"/></literal></expr>]<pos:position pos:line="4" pos:column="29"/></index></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">iwreq<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">iwr<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uint8_t<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">cp<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">nodes<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">status<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><operator pos:line="10" pos:column="17">&amp;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="18">iwr<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="26">sizeof <argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">iwr<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">sstrncpy<pos:position pos:line="11" pos:column="17"/></name> <argument_list pos:line="11" pos:column="18">(<argument><expr><name><name pos:line="11" pos:column="19">iwr<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">ifr_name<pos:position pos:line="11" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">dev<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="38">sizeof <argument_list pos:line="11" pos:column="45">(<argument><expr><name><name pos:line="11" pos:column="46">iwr<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">.<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">ifr_name<pos:position pos:line="11" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">iwr<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">.<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">u<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">data<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">pointer<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <operator pos:line="12" pos:column="30">(<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">void<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></operator><operator pos:line="12" pos:column="37">)<pos:position pos:line="12" pos:column="38"/></operator> <name pos:line="12" pos:column="39">buf<pos:position pos:line="12" pos:column="42"/></name></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">iwr<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">.<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">u<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">data<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">length<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <sizeof pos:line="13" pos:column="29">sizeof <argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">buf<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></sizeof></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">ioctl<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">sk<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">IEEE80211_IOCTL_STA_INFO<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="55">&amp;<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="56">iwr<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">&lt;<pos:position pos:line="16" pos:column="24"/></operator> <literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
	<block pos:line="17" pos:column="9">{
		<comment type="block" pos:line="18" pos:column="17">/* Silent, because not all interfaces support all ioctls. */</comment>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">DEBUG<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"madwifi plugin: Sending IO-control "<pos:position pos:line="19" pos:column="61"/></literal>
				<literal type="string" pos:line="20" pos:column="33">"IEEE80211_IOCTL_STA_INFO to device %s "<pos:position pos:line="20" pos:column="73"/></literal>
				<literal type="string" pos:line="21" pos:column="33">"failed with status %i."<pos:position pos:line="21" pos:column="57"/></literal></expr></argument>,
				<argument><expr><name pos:line="22" pos:column="33">dev<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">status<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
		<return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">status<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator></expr>;<pos:position pos:line="23" pos:column="33"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="26" pos:column="9">len<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <name><name pos:line="26" pos:column="15">iwr<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">u<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">data<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">.<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">length<pos:position pos:line="26" pos:column="32"/></name></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">cp<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">buf<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">nodes<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="17">0<pos:position pos:line="29" pos:column="18"/></literal></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
	<while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">len<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">&gt;=<pos:position pos:line="30" pos:column="25"/></operator> <sizeof pos:line="30" pos:column="23">sizeof <argument_list pos:line="30" pos:column="30">(<argument><expr pos:line="30" pos:column="31">struct <name pos:line="30" pos:column="38">ieee80211req_sta_info<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></sizeof></expr>)<pos:position pos:line="30" pos:column="61"/></condition>
	<block pos:line="31" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">ieee80211req_sta_info<pos:position pos:line="32" pos:column="45"/></name></name> <modifier pos:line="32" pos:column="46">*<pos:position pos:line="32" pos:column="47"/></modifier></type><name pos:line="32" pos:column="47">si<pos:position pos:line="32" pos:column="49"/></name> <init pos:line="32" pos:column="50">= <expr><operator pos:line="32" pos:column="52">(<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="53">void<pos:position pos:line="32" pos:column="57"/></name> <operator pos:line="32" pos:column="58">*<pos:position pos:line="32" pos:column="59"/></operator><operator pos:line="32" pos:column="59">)<pos:position pos:line="32" pos:column="60"/></operator> <name pos:line="32" pos:column="61">cp<pos:position pos:line="32" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="64"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">process_station<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">sk<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">dev<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">si<pos:position pos:line="33" pos:column="44"/></name></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">cp<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">+=<pos:position pos:line="34" pos:column="22"/></operator> <name><name pos:line="34" pos:column="23">si<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">isi_len<pos:position pos:line="34" pos:column="34"/></name></name></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">len<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">-=<pos:position pos:line="35" pos:column="23"/></operator> <name><name pos:line="35" pos:column="24">si<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">isi_len<pos:position pos:line="35" pos:column="35"/></name></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">nodes<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">++<pos:position pos:line="36" pos:column="24"/></operator></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></while>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">item_watched<pos:position pos:line="39" pos:column="25"/></name> <argument_list pos:line="39" pos:column="26">(<argument><expr><name pos:line="39" pos:column="27">STAT_ATH_NODES<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="43"/></condition><then pos:line="39" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">submit_gauge<pos:position pos:line="40" pos:column="29"/></name> <argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">dev<pos:position pos:line="40" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="36">"ath_nodes"<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="49">NULL<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="55">NULL<pos:position pos:line="40" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="61">nodes<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="68"/></expr_stmt></block></then></if>
	<return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">(<pos:position pos:line="41" pos:column="17"/></operator><literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal><operator pos:line="41" pos:column="18">)<pos:position pos:line="41" pos:column="19"/></operator></expr>;<pos:position pos:line="41" pos:column="20"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
