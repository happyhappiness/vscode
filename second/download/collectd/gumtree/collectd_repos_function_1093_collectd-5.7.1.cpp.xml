<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1093_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">address<pos:position pos:line="2" pos:column="15"/></name><index pos:line="2" pos:column="15">[<expr><literal type="number" pos:line="2" pos:column="16">1024<pos:position pos:line="2" pos:column="20"/></literal></expr>]<pos:position pos:line="2" pos:column="21"/></index></name></decl>;<pos:position pos:line="2" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">lcc_connection_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">connection<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">range_critical_g<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">.<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">min<pos:position pos:line="7" pos:column="23"/></name></name> <operator pos:line="7" pos:column="24">=<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">NAN<pos:position pos:line="7" pos:column="29"/></name></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">range_critical_g<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">max<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">NAN<pos:position pos:line="8" pos:column="29"/></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">range_critical_g<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">invert<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="11" pos:column="3">range_warning_g<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">min<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NAN<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">range_warning_g<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">max<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">NAN<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">range_warning_g<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">invert<pos:position pos:line="13" pos:column="25"/></name></name> <operator pos:line="13" pos:column="26">=<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

  <while pos:line="15" pos:column="3">while <condition pos:line="15" pos:column="9">(<expr><literal type="number" pos:line="15" pos:column="10">42<pos:position pos:line="15" pos:column="12"/></literal></expr>)<pos:position pos:line="15" pos:column="13"/></condition> <block pos:line="15" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">c<pos:position pos:line="16" pos:column="10"/></name></decl>;<pos:position pos:line="16" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">c<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <call><name pos:line="18" pos:column="9">getopt<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">argc<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="22">argv<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="28">"w:c:s:n:H:g:d:hm"<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">c<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&lt;<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15">
      <block type="pseudo"><break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break></block></then></if>

    <switch pos:line="22" pos:column="5">switch <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">c<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition> <block pos:line="22" pos:column="16">{
    <case pos:line="23" pos:column="5">case <expr><literal type="char" pos:line="23" pos:column="10">'c'<pos:position pos:line="23" pos:column="13"/></literal></expr>:<pos:position pos:line="23" pos:column="14"/></case>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">parse_range<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">optarg<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="27">&amp;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="28">range_critical_g<pos:position pos:line="24" pos:column="44"/></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>
      <break pos:line="25" pos:column="7">break;<pos:position pos:line="25" pos:column="13"/></break>
    <case pos:line="26" pos:column="5">case <expr><literal type="char" pos:line="26" pos:column="10">'w'<pos:position pos:line="26" pos:column="13"/></literal></expr>:<pos:position pos:line="26" pos:column="14"/></case>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">parse_range<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">optarg<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="27">&amp;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="28">range_warning_g<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
      <break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break>
    <case pos:line="29" pos:column="5">case <expr><literal type="char" pos:line="29" pos:column="10">'s'<pos:position pos:line="29" pos:column="13"/></literal></expr>:<pos:position pos:line="29" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="30" pos:column="7">socket_file_g<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">optarg<pos:position pos:line="30" pos:column="29"/></name></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
      <break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break>
    <case pos:line="32" pos:column="5">case <expr><literal type="char" pos:line="32" pos:column="10">'n'<pos:position pos:line="32" pos:column="13"/></literal></expr>:<pos:position pos:line="32" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="33" pos:column="7">value_string_g<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">optarg<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>
    <case pos:line="35" pos:column="5">case <expr><literal type="char" pos:line="35" pos:column="10">'H'<pos:position pos:line="35" pos:column="13"/></literal></expr>:<pos:position pos:line="35" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="36" pos:column="7">hostname_g<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <name pos:line="36" pos:column="20">optarg<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
      <break pos:line="37" pos:column="7">break;<pos:position pos:line="37" pos:column="13"/></break>
    <case pos:line="38" pos:column="5">case <expr><literal type="char" pos:line="38" pos:column="10">'g'<pos:position pos:line="38" pos:column="13"/></literal></expr>:<pos:position pos:line="38" pos:column="14"/></case>
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><call><name pos:line="39" pos:column="11">strcasecmp<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">optarg<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="30">"none"<pos:position pos:line="39" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call> <operator pos:line="39" pos:column="38">==<pos:position pos:line="39" pos:column="40"/></operator> <literal type="number" pos:line="39" pos:column="41">0<pos:position pos:line="39" pos:column="42"/></literal></expr>)<pos:position pos:line="39" pos:column="43"/></condition><then pos:line="39" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">consolitation_g<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">CON_NONE<pos:position pos:line="40" pos:column="35"/></name></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt></block></then>
      <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<expr><call><name pos:line="41" pos:column="16">strcasecmp<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">optarg<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="35">"average"<pos:position pos:line="41" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call> <operator pos:line="41" pos:column="46">==<pos:position pos:line="41" pos:column="48"/></operator> <literal type="number" pos:line="41" pos:column="49">0<pos:position pos:line="41" pos:column="50"/></literal></expr>)<pos:position pos:line="41" pos:column="51"/></condition><then pos:line="41" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="9">consolitation_g<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></operator> <name pos:line="42" pos:column="27">CON_AVERAGE<pos:position pos:line="42" pos:column="38"/></name></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><call><name pos:line="43" pos:column="16">strcasecmp<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">optarg<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="35">"sum"<pos:position pos:line="43" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call> <operator pos:line="43" pos:column="42">==<pos:position pos:line="43" pos:column="44"/></operator> <literal type="number" pos:line="43" pos:column="45">0<pos:position pos:line="43" pos:column="46"/></literal></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="9">consolitation_g<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <name pos:line="44" pos:column="27">CON_SUM<pos:position pos:line="44" pos:column="34"/></name></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if <condition pos:line="45" pos:column="15">(<expr><call><name pos:line="45" pos:column="16">strcasecmp<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">optarg<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="35">"percentage"<pos:position pos:line="45" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call> <operator pos:line="45" pos:column="49">==<pos:position pos:line="45" pos:column="51"/></operator> <literal type="number" pos:line="45" pos:column="52">0<pos:position pos:line="45" pos:column="53"/></literal></expr>)<pos:position pos:line="45" pos:column="54"/></condition><then pos:line="45" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="9">consolitation_g<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <name pos:line="46" pos:column="27">CON_PERCENTAGE<pos:position pos:line="46" pos:column="41"/></name></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt></block></then></if></elseif>
      <else pos:line="47" pos:column="7">else <block pos:line="47" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">fprintf<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">stderr<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="25">"Unknown consolidation function `%s'.\n"<pos:position pos:line="48" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="67">optarg<pos:position pos:line="48" pos:column="73"/></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">usage<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name><name pos:line="49" pos:column="15">argv<pos:position pos:line="49" pos:column="19"/></name><index pos:line="49" pos:column="19">[<expr><literal type="number" pos:line="49" pos:column="20">0<pos:position pos:line="49" pos:column="21"/></literal></expr>]<pos:position pos:line="49" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></else></if>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    <case pos:line="52" pos:column="5">case <expr><literal type="char" pos:line="52" pos:column="10">'d'<pos:position pos:line="52" pos:column="13"/></literal></expr>:<pos:position pos:line="52" pos:column="14"/></case> <block pos:line="52" pos:column="15">{
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">char<pos:position pos:line="53" pos:column="11"/></name> <modifier pos:line="53" pos:column="12">*<pos:position pos:line="53" pos:column="13"/></modifier><modifier pos:line="53" pos:column="13">*<pos:position pos:line="53" pos:column="14"/></modifier></type><name pos:line="53" pos:column="14">tmp<pos:position pos:line="53" pos:column="17"/></name></decl>;<pos:position pos:line="53" pos:column="18"/></decl_stmt>
      <expr_stmt><expr><name pos:line="54" pos:column="7">tmp<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <call><name pos:line="54" pos:column="13">realloc<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><name pos:line="54" pos:column="21">match_ds_g<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="33">(<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="34">match_ds_num_g<pos:position pos:line="54" pos:column="48"/></name> <operator pos:line="54" pos:column="49">+<pos:position pos:line="54" pos:column="50"/></operator> <literal type="number" pos:line="54" pos:column="51">1<pos:position pos:line="54" pos:column="52"/></literal><operator pos:line="54" pos:column="52">)<pos:position pos:line="54" pos:column="53"/></operator> <operator pos:line="54" pos:column="54">*<pos:position pos:line="54" pos:column="55"/></operator> <sizeof pos:line="54" pos:column="56">sizeof<argument_list pos:line="54" pos:column="62">(<argument><expr><name pos:line="54" pos:column="63">char<pos:position pos:line="54" pos:column="67"/></name> <operator pos:line="54" pos:column="68">*<pos:position pos:line="54" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="72"/></expr_stmt>
      <if pos:line="55" pos:column="7">if <condition pos:line="55" pos:column="10">(<expr><name pos:line="55" pos:column="11">tmp<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">==<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">NULL<pos:position pos:line="55" pos:column="22"/></name></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23"> <block pos:line="55" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">fprintf<pos:position pos:line="56" pos:column="16"/></name><argument_list pos:line="56" pos:column="16">(<argument><expr><name pos:line="56" pos:column="17">stderr<pos:position pos:line="56" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="25">"realloc failed: %s\n"<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="49">strerror<pos:position pos:line="56" pos:column="57"/></name><argument_list pos:line="56" pos:column="57">(<argument><expr><name pos:line="56" pos:column="58">errno<pos:position pos:line="56" pos:column="63"/></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="66"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">RET_UNKNOWN<pos:position pos:line="57" pos:column="28"/></name><operator pos:line="57" pos:column="28">)<pos:position pos:line="57" pos:column="29"/></operator></expr>;<pos:position pos:line="57" pos:column="30"/></return>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="59" pos:column="7">match_ds_g<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">=<pos:position pos:line="59" pos:column="19"/></operator> <name pos:line="59" pos:column="20">tmp<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="60" pos:column="7">match_ds_g<pos:position pos:line="60" pos:column="17"/></name><index pos:line="60" pos:column="17">[<expr><name pos:line="60" pos:column="18">match_ds_num_g<pos:position pos:line="60" pos:column="32"/></name></expr>]<pos:position pos:line="60" pos:column="33"/></index></name> <operator pos:line="60" pos:column="34">=<pos:position pos:line="60" pos:column="35"/></operator> <call><name pos:line="60" pos:column="36">cn_strdup<pos:position pos:line="60" pos:column="45"/></name><argument_list pos:line="60" pos:column="45">(<argument><expr><name pos:line="60" pos:column="46">optarg<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></expr_stmt>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><name><name pos:line="61" pos:column="11">match_ds_g<pos:position pos:line="61" pos:column="21"/></name><index pos:line="61" pos:column="21">[<expr><name pos:line="61" pos:column="22">match_ds_num_g<pos:position pos:line="61" pos:column="36"/></name></expr>]<pos:position pos:line="61" pos:column="37"/></index></name> <operator pos:line="61" pos:column="38">==<pos:position pos:line="61" pos:column="40"/></operator> <name pos:line="61" pos:column="41">NULL<pos:position pos:line="61" pos:column="45"/></name></expr>)<pos:position pos:line="61" pos:column="46"/></condition><then pos:line="61" pos:column="46"> <block pos:line="61" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">fprintf<pos:position pos:line="62" pos:column="16"/></name><argument_list pos:line="62" pos:column="16">(<argument><expr><name pos:line="62" pos:column="17">stderr<pos:position pos:line="62" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="25">"cn_strdup failed: %s\n"<pos:position pos:line="62" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="51">strerror<pos:position pos:line="62" pos:column="59"/></name><argument_list pos:line="62" pos:column="59">(<argument><expr><name pos:line="62" pos:column="60">errno<pos:position pos:line="62" pos:column="65"/></name></expr></argument>)<pos:position pos:line="62" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
        <return pos:line="63" pos:column="9">return <expr><operator pos:line="63" pos:column="16">(<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">RET_UNKNOWN<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">)<pos:position pos:line="63" pos:column="29"/></operator></expr>;<pos:position pos:line="63" pos:column="30"/></return>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="65" pos:column="7">match_ds_num_g<pos:position pos:line="65" pos:column="21"/></name><operator pos:line="65" pos:column="21">++<pos:position pos:line="65" pos:column="23"/></operator></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt>
      <break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break>
    }<pos:position pos:line="67" pos:column="6"/></block>
    <case pos:line="68" pos:column="5">case <expr><literal type="char" pos:line="68" pos:column="10">'m'<pos:position pos:line="68" pos:column="13"/></literal></expr>:<pos:position pos:line="68" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="69" pos:column="7">nan_is_error_g<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">=<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="24">1<pos:position pos:line="69" pos:column="25"/></literal></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
      <break pos:line="70" pos:column="7">break;<pos:position pos:line="70" pos:column="13"/></break>
    <default pos:line="71" pos:column="5">default:<pos:position pos:line="71" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">usage<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><name><name pos:line="72" pos:column="13">argv<pos:position pos:line="72" pos:column="17"/></name><index pos:line="72" pos:column="17">[<expr><literal type="number" pos:line="72" pos:column="18">0<pos:position pos:line="72" pos:column="19"/></literal></expr>]<pos:position pos:line="72" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></switch> <comment type="block" pos:line="73" pos:column="7">/* switch (c) */</comment>
  }<pos:position pos:line="74" pos:column="4"/></block></while>

  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><operator pos:line="76" pos:column="7">(<pos:position pos:line="76" pos:column="8"/></operator><name pos:line="76" pos:column="8">socket_file_g<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">==<pos:position pos:line="76" pos:column="24"/></operator> <name pos:line="76" pos:column="25">NULL<pos:position pos:line="76" pos:column="29"/></name><operator pos:line="76" pos:column="29">)<pos:position pos:line="76" pos:column="30"/></operator> <operator pos:line="76" pos:column="31">||<pos:position pos:line="76" pos:column="33"/></operator> <operator pos:line="76" pos:column="34">(<pos:position pos:line="76" pos:column="35"/></operator><name pos:line="76" pos:column="35">value_string_g<pos:position pos:line="76" pos:column="49"/></name> <operator pos:line="76" pos:column="50">==<pos:position pos:line="76" pos:column="52"/></operator> <name pos:line="76" pos:column="53">NULL<pos:position pos:line="76" pos:column="57"/></name><operator pos:line="76" pos:column="57">)<pos:position pos:line="76" pos:column="58"/></operator> <operator pos:line="76" pos:column="59">||<pos:position pos:line="76" pos:column="61"/></operator>
      <operator pos:line="77" pos:column="7">(<pos:position pos:line="77" pos:column="8"/></operator><operator pos:line="77" pos:column="8">(<pos:position pos:line="77" pos:column="9"/></operator><name pos:line="77" pos:column="9">hostname_g<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">==<pos:position pos:line="77" pos:column="22"/></operator> <name pos:line="77" pos:column="23">NULL<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">)<pos:position pos:line="77" pos:column="28"/></operator> <operator pos:line="77" pos:column="29">&amp;&amp;<pos:position pos:line="77" pos:column="39"/></operator> <operator pos:line="77" pos:column="32">(<pos:position pos:line="77" pos:column="33"/></operator><call><name pos:line="77" pos:column="33">strcasecmp<pos:position pos:line="77" pos:column="43"/></name><argument_list pos:line="77" pos:column="43">(<argument><expr><name pos:line="77" pos:column="44">value_string_g<pos:position pos:line="77" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="60">"LIST"<pos:position pos:line="77" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="67"/></argument_list></call><operator pos:line="77" pos:column="67">)<pos:position pos:line="77" pos:column="68"/></operator><operator pos:line="77" pos:column="68">)<pos:position pos:line="77" pos:column="69"/></operator></expr>)<pos:position pos:line="77" pos:column="70"/></condition><then pos:line="77" pos:column="70"> <block pos:line="77" pos:column="71">{
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">fprintf<pos:position pos:line="78" pos:column="12"/></name><argument_list pos:line="78" pos:column="12">(<argument><expr><name pos:line="78" pos:column="13">stderr<pos:position pos:line="78" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="21">"Missing required arguments.\n"<pos:position pos:line="78" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">usage<pos:position pos:line="79" pos:column="10"/></name><argument_list pos:line="79" pos:column="10">(<argument><expr><name><name pos:line="79" pos:column="11">argv<pos:position pos:line="79" pos:column="15"/></name><index pos:line="79" pos:column="15">[<expr><literal type="number" pos:line="79" pos:column="16">0<pos:position pos:line="79" pos:column="17"/></literal></expr>]<pos:position pos:line="79" pos:column="18"/></index></name></expr></argument>)<pos:position pos:line="79" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="80" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="82" pos:column="3">snprintf<pos:position pos:line="82" pos:column="11"/></name><argument_list pos:line="82" pos:column="11">(<argument><expr><name pos:line="82" pos:column="12">address<pos:position pos:line="82" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="82" pos:column="21">sizeof<argument_list pos:line="82" pos:column="27">(<argument><expr><name pos:line="82" pos:column="28">address<pos:position pos:line="82" pos:column="35"/></name></expr></argument>)<pos:position pos:line="82" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="38">"unix:%s"<pos:position pos:line="82" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">socket_file_g<pos:position pos:line="82" pos:column="62"/></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="83" pos:column="3">address<pos:position pos:line="83" pos:column="10"/></name><index pos:line="83" pos:column="10">[<expr><sizeof pos:line="83" pos:column="11">sizeof<argument_list pos:line="83" pos:column="17">(<argument><expr><name pos:line="83" pos:column="18">address<pos:position pos:line="83" pos:column="25"/></name></expr></argument>)<pos:position pos:line="83" pos:column="26"/></argument_list></sizeof> <operator pos:line="83" pos:column="27">-<pos:position pos:line="83" pos:column="28"/></operator> <literal type="number" pos:line="83" pos:column="29">1<pos:position pos:line="83" pos:column="30"/></literal></expr>]<pos:position pos:line="83" pos:column="31"/></index></name> <operator pos:line="83" pos:column="32">=<pos:position pos:line="83" pos:column="33"/></operator> <literal type="number" pos:line="83" pos:column="34">0<pos:position pos:line="83" pos:column="35"/></literal></expr>;<pos:position pos:line="83" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name pos:line="85" pos:column="3">connection<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <name pos:line="85" pos:column="16">NULL<pos:position pos:line="85" pos:column="20"/></name></expr>;<pos:position pos:line="85" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="86" pos:column="3">status<pos:position pos:line="86" pos:column="9"/></name> <operator pos:line="86" pos:column="10">=<pos:position pos:line="86" pos:column="11"/></operator> <call><name pos:line="86" pos:column="12">lcc_connect<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><name pos:line="86" pos:column="24">address<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="33">&amp;<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="34">connection<pos:position pos:line="86" pos:column="44"/></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="46"/></expr_stmt>
  <if pos:line="87" pos:column="3">if <condition pos:line="87" pos:column="6">(<expr><name pos:line="87" pos:column="7">status<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">!=<pos:position pos:line="87" pos:column="16"/></operator> <literal type="number" pos:line="87" pos:column="17">0<pos:position pos:line="87" pos:column="18"/></literal></expr>)<pos:position pos:line="87" pos:column="19"/></condition><then pos:line="87" pos:column="19"> <block pos:line="87" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">printf<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><literal type="string" pos:line="88" pos:column="12">"ERROR: Connecting to daemon at %s failed.\n"<pos:position pos:line="88" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="59">socket_file_g<pos:position pos:line="88" pos:column="72"/></name></expr></argument>)<pos:position pos:line="88" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="74"/></expr_stmt>
    <return pos:line="89" pos:column="5">return <expr><operator pos:line="89" pos:column="12">(<pos:position pos:line="89" pos:column="13"/></operator><name pos:line="89" pos:column="13">RET_CRITICAL<pos:position pos:line="89" pos:column="25"/></name><operator pos:line="89" pos:column="25">)<pos:position pos:line="89" pos:column="26"/></operator></expr>;<pos:position pos:line="89" pos:column="27"/></return>
  }<pos:position pos:line="90" pos:column="4"/></block></then></if>

  <if pos:line="92" pos:column="3">if <condition pos:line="92" pos:column="6">(<expr><literal type="number" pos:line="92" pos:column="7">0<pos:position pos:line="92" pos:column="8"/></literal> <operator pos:line="92" pos:column="9">==<pos:position pos:line="92" pos:column="11"/></operator> <call><name pos:line="92" pos:column="12">strcasecmp<pos:position pos:line="92" pos:column="22"/></name><argument_list pos:line="92" pos:column="22">(<argument><expr><name pos:line="92" pos:column="23">value_string_g<pos:position pos:line="92" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="39">"LIST"<pos:position pos:line="92" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="47"/></condition><then pos:line="92" pos:column="47">
    <block type="pseudo"><return pos:line="93" pos:column="5">return <expr><operator pos:line="93" pos:column="12">(<pos:position pos:line="93" pos:column="13"/></operator><call><name pos:line="93" pos:column="13">do_listval<pos:position pos:line="93" pos:column="23"/></name><argument_list pos:line="93" pos:column="23">(<argument><expr><name pos:line="93" pos:column="24">connection<pos:position pos:line="93" pos:column="34"/></name></expr></argument>)<pos:position pos:line="93" pos:column="35"/></argument_list></call><operator pos:line="93" pos:column="35">)<pos:position pos:line="93" pos:column="36"/></operator></expr>;<pos:position pos:line="93" pos:column="37"/></return></block></then></if>

  <return pos:line="95" pos:column="3">return <expr><operator pos:line="95" pos:column="10">(<pos:position pos:line="95" pos:column="11"/></operator><call><name pos:line="95" pos:column="11">do_check<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><name pos:line="95" pos:column="20">connection<pos:position pos:line="95" pos:column="30"/></name></expr></argument>)<pos:position pos:line="95" pos:column="31"/></argument_list></call><operator pos:line="95" pos:column="31">)<pos:position pos:line="95" pos:column="32"/></operator></expr>;<pos:position pos:line="95" pos:column="33"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
