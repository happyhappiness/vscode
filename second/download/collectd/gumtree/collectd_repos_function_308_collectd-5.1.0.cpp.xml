<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_308_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_read_header<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">camqp_config_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conf<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <comment type="block" pos:line="1" pos:column="53">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">status<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">amqp_frame_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">frame<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">amqp_basic_properties_t<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">properties<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">content_type<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">status<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">amqp_simple_wait_frame<pos:position pos:line="8" pos:column="36"/></name> <argument_list pos:line="8" pos:column="37">(<argument><expr><name><name pos:line="8" pos:column="38">conf<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">connection<pos:position pos:line="8" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="56">&amp;<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="57">frame<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">&lt;<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name></type> <name><name pos:line="11" pos:column="14">errbuf<pos:position pos:line="11" pos:column="20"/></name><index pos:line="11" pos:column="20">[<expr><literal type="number" pos:line="11" pos:column="21">1024<pos:position pos:line="11" pos:column="25"/></literal></expr>]<pos:position pos:line="11" pos:column="26"/></index></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">status<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <operator pos:line="12" pos:column="18">(<pos:position pos:line="12" pos:column="19"/></operator><operator pos:line="12" pos:column="19">-<pos:position pos:line="12" pos:column="20"/></operator><literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="23">*<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">status<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">ERROR<pos:position pos:line="13" pos:column="14"/></name> <argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"amqp plugin: amqp_simple_wait_frame failed: %s"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>,
                    <argument><expr><call><name pos:line="14" pos:column="21">sstrerror<pos:position pos:line="14" pos:column="30"/></name> <argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">status<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">errbuf<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="48">sizeof <argument_list pos:line="14" pos:column="55">(<argument><expr><name pos:line="14" pos:column="56">errbuf<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">camqp_close_connection<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">conf<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">status<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">)<pos:position pos:line="16" pos:column="24"/></operator></expr>;<pos:position pos:line="16" pos:column="25"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">frame<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">frame_type<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">!=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">AMQP_FRAME_HEADER<pos:position pos:line="19" pos:column="46"/></name></expr>)<pos:position pos:line="19" pos:column="47"/></condition><then pos:line="19" pos:column="47">
    <block pos:line="20" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">NOTICE<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><literal type="string" pos:line="21" pos:column="17">"amqp plugin: Unexpected frame type: %#"<pos:position pos:line="21" pos:column="57"/></literal><name pos:line="21" pos:column="57">PRIx8<pos:position pos:line="21" pos:column="62"/></name></expr></argument>,
                <argument><expr><name><name pos:line="22" pos:column="17">frame<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">frame_type<pos:position pos:line="22" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><operator pos:line="23" pos:column="17">-<pos:position pos:line="23" pos:column="18"/></operator><literal type="number" pos:line="23" pos:column="18">1<pos:position pos:line="23" pos:column="19"/></literal><operator pos:line="23" pos:column="19">)<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="26" pos:column="5">properties<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name><name pos:line="26" pos:column="18">frame<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">.<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">payload<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">properties<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">.<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="43">decoded<pos:position pos:line="26" pos:column="50"/></name></name></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">content_type<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <call><name pos:line="27" pos:column="20">camqp_bytes_cstring<pos:position pos:line="27" pos:column="39"/></name> <argument_list pos:line="27" pos:column="40">(<argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name><name pos:line="27" pos:column="42">properties<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">content_type<pos:position pos:line="27" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">content_type<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">==<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name></expr>)<pos:position pos:line="28" pos:column="30"/></condition><then pos:line="28" pos:column="30">
    <block pos:line="29" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">ERROR<pos:position pos:line="30" pos:column="14"/></name> <argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"amqp plugin: Unable to determine content type."<pos:position pos:line="30" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><operator pos:line="31" pos:column="17">-<pos:position pos:line="31" pos:column="18"/></operator><literal type="number" pos:line="31" pos:column="18">1<pos:position pos:line="31" pos:column="19"/></literal><operator pos:line="31" pos:column="19">)<pos:position pos:line="31" pos:column="20"/></operator></expr>;<pos:position pos:line="31" pos:column="21"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="34" pos:column="5">status<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">camqp_read_body<pos:position pos:line="34" pos:column="29"/></name> <argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">conf<pos:position pos:line="34" pos:column="35"/></name></expr></argument>,
            <argument><expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">size_t<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">)<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="22">frame<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">.<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="28">payload<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">.<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">properties<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">.<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="47">body_size<pos:position pos:line="35" pos:column="56"/></name></name></expr></argument>,
            <argument><expr><name pos:line="36" pos:column="13">content_type<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">sfree<pos:position pos:line="38" pos:column="10"/></name> <argument_list pos:line="38" pos:column="11">(<argument><expr><name pos:line="38" pos:column="12">content_type<pos:position pos:line="38" pos:column="24"/></name></expr></argument>)<pos:position pos:line="38" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">(<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">status<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">)<pos:position pos:line="39" pos:column="20"/></operator></expr>;<pos:position pos:line="39" pos:column="21"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
