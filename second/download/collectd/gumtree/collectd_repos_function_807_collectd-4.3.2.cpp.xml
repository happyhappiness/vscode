<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_807_collectd-4.3.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">yylex_destroy<pos:position pos:line="1" pos:column="18"/></name>  <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
    
    <comment type="block" pos:line="4" pos:column="5">/* Pop the buffer stack, destroying each element. */</comment>
	<while pos:line="5" pos:column="9">while<condition pos:line="5" pos:column="14">(<expr><name pos:line="5" pos:column="15">YY_CURRENT_BUFFER<pos:position pos:line="5" pos:column="32"/></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><block pos:line="5" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">yy_delete_buffer<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">YY_CURRENT_BUFFER<pos:position pos:line="6" pos:column="51"/></name></expr></argument>  )<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name pos:line="7" pos:column="17">YY_CURRENT_BUFFER_LVALUE<pos:position pos:line="7" pos:column="41"/></name> <operator pos:line="7" pos:column="42">=<pos:position pos:line="7" pos:column="43"/></operator> <name pos:line="7" pos:column="44">NULL<pos:position pos:line="7" pos:column="48"/></name></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">yypop_buffer_state<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">()<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></while>

	<comment type="block" pos:line="11" pos:column="9">/* Destroy the stack itself. */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">yyfree<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">(<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">yy_buffer_stack<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">)<pos:position pos:line="12" pos:column="33"/></operator></expr></argument> )<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">yy_buffer_stack<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">)<pos:position pos:line="13" pos:column="26"/></operator> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">NULL<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">yy_init_globals<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">( )<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>

    <return pos:line="19" pos:column="5">return <expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
