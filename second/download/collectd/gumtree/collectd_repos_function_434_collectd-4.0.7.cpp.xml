<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_434_collectd-4.0.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_init<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">HAVE_LIBKSTAT<pos:position pos:line="3" pos:column="18"/></name></expr></cpp:if>
	<expr_stmt><expr><name pos:line="4" pos:column="9">kc<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">update_kstat<pos:position pos:line="5" pos:column="21"/></name> <argument_list pos:line="5" pos:column="22">()<pos:position pos:line="5" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">HAVE_LIBSTATGRAB<pos:position pos:line="8" pos:column="21"/></name></expr></cpp:if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">sg_init<pos:position pos:line="9" pos:column="20"/></name> <argument_list pos:line="9" pos:column="21">()<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">ERROR<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"sg_init: %s"<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="39">sg_str_error<pos:position pos:line="11" pos:column="51"/></name> <argument_list pos:line="11" pos:column="52">(<argument><expr><call><name pos:line="11" pos:column="53">sg_get_error<pos:position pos:line="11" pos:column="65"/></name> <argument_list pos:line="11" pos:column="66">()<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">-<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">sg_drop_privileges<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">()<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
	<block pos:line="16" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">ERROR<pos:position pos:line="17" pos:column="22"/></name> <argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="string" pos:line="17" pos:column="24">"sg_drop_privileges: %s"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="50">sg_str_error<pos:position pos:line="17" pos:column="62"/></name> <argument_list pos:line="17" pos:column="63">(<argument><expr><call><name pos:line="17" pos:column="64">sg_get_error<pos:position pos:line="17" pos:column="76"/></name> <argument_list pos:line="17" pos:column="77">()<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="82"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">-<pos:position pos:line="18" pos:column="26"/></operator><literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator></expr>;<pos:position pos:line="18" pos:column="29"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">read_types_list<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">()<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">plugin_init_all<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">()<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>

	<return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal><operator pos:line="25" pos:column="18">)<pos:position pos:line="25" pos:column="19"/></operator></expr>;<pos:position pos:line="25" pos:column="20"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
