<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_637_collectd-4.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>    <name pos:line="3" pos:column="16">collectd_argc<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><literal type="number" pos:line="3" pos:column="32">0<pos:position pos:line="3" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name>  <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">collectd<pos:position pos:line="4" pos:column="24"/></name>      <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">NULL<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier><modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">collectd_argv<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">NULL<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">sigaction<pos:position pos:line="7" pos:column="25"/></name></name></type> <name pos:line="7" pos:column="26">sa<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* parse command line options */</comment>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><literal type="number" pos:line="12" pos:column="16">42<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition> <block pos:line="12" pos:column="20">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">c<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name pos:line="13" pos:column="25">getopt<pos:position pos:line="13" pos:column="31"/></name> <argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">argc<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">argv<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="45">"hc:P:"<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="54"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">-<pos:position pos:line="15" pos:column="22"/></operator><literal type="number" pos:line="15" pos:column="22">1<pos:position pos:line="15" pos:column="23"/></literal> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">c<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then></if>

		<switch pos:line="18" pos:column="17">switch <condition pos:line="18" pos:column="24">(<expr><name pos:line="18" pos:column="25">c<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition> <block pos:line="18" pos:column="28">{
			<case pos:line="19" pos:column="25">case <expr><literal type="char" pos:line="19" pos:column="30">'c'<pos:position pos:line="19" pos:column="33"/></literal></expr>:<pos:position pos:line="19" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="20" pos:column="33">collectd<pos:position pos:line="20" pos:column="41"/></name> <operator pos:line="20" pos:column="42">=<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">optarg<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
				<break pos:line="21" pos:column="33">break;<pos:position pos:line="21" pos:column="39"/></break>
			<case pos:line="22" pos:column="25">case <expr><literal type="char" pos:line="22" pos:column="30">'P'<pos:position pos:line="22" pos:column="33"/></literal></expr>:<pos:position pos:line="22" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="23" pos:column="33">pidfile<pos:position pos:line="23" pos:column="40"/></name> <operator pos:line="23" pos:column="41">=<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="43">optarg<pos:position pos:line="23" pos:column="49"/></name></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
				<break pos:line="24" pos:column="33">break;<pos:position pos:line="24" pos:column="39"/></break>
			<case pos:line="25" pos:column="25">case <expr><literal type="char" pos:line="25" pos:column="30">'h'<pos:position pos:line="25" pos:column="33"/></literal></expr>:<pos:position pos:line="25" pos:column="34"/></case>
			<default pos:line="26" pos:column="25">default:<pos:position pos:line="26" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="27" pos:column="33">exit_usage<pos:position pos:line="27" pos:column="43"/></name> <argument_list pos:line="27" pos:column="44">(<argument><expr><name><name pos:line="27" pos:column="45">argv<pos:position pos:line="27" pos:column="49"/></name><index pos:line="27" pos:column="49">[<expr><literal type="number" pos:line="27" pos:column="50">0<pos:position pos:line="27" pos:column="51"/></literal></expr>]<pos:position pos:line="27" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></switch>
	}<pos:position pos:line="29" pos:column="10"/></block></while>

	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">i<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">optind<pos:position pos:line="31" pos:column="24"/></name></expr>;<pos:position pos:line="31" pos:column="25"/></init> <condition><expr><name pos:line="31" pos:column="26">i<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">&lt;<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="30">argc<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></condition> <incr><expr><operator pos:line="31" pos:column="36">++<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="38">i<pos:position pos:line="31" pos:column="39"/></name></expr></incr>)<pos:position pos:line="31" pos:column="40"/></control>
		<block type="pseudo"><if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><literal type="number" pos:line="32" pos:column="21">0<pos:position pos:line="32" pos:column="22"/></literal> <operator pos:line="32" pos:column="23">==<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">strcmp<pos:position pos:line="32" pos:column="32"/></name> <argument_list pos:line="32" pos:column="33">(<argument><expr><name><name pos:line="32" pos:column="34">argv<pos:position pos:line="32" pos:column="38"/></name><index pos:line="32" pos:column="38">[<expr><name pos:line="32" pos:column="39">i<pos:position pos:line="32" pos:column="40"/></name></expr>]<pos:position pos:line="32" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="43">"-f"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49">
			<block type="pseudo"><break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break></block></then></if></block></for>

	<comment type="block" pos:line="35" pos:column="9">/* i &lt; argc =&gt; -f already present */</comment>
	<expr_stmt><expr><name pos:line="36" pos:column="9">collectd_argc<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <literal type="number" pos:line="36" pos:column="25">1<pos:position pos:line="36" pos:column="26"/></literal> <operator pos:line="36" pos:column="27">+<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="29">argc<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">-<pos:position pos:line="36" pos:column="35"/></operator> <name pos:line="36" pos:column="36">optind<pos:position pos:line="36" pos:column="42"/></name> <operator pos:line="36" pos:column="43">+<pos:position pos:line="36" pos:column="44"/></operator> <operator pos:line="36" pos:column="45">(<pos:position pos:line="36" pos:column="46"/></operator><ternary><condition><expr><operator pos:line="36" pos:column="46">(<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">i<pos:position pos:line="36" pos:column="48"/></name> <operator pos:line="36" pos:column="49">&lt;<pos:position pos:line="36" pos:column="53"/></operator> <name pos:line="36" pos:column="51">argc<pos:position pos:line="36" pos:column="55"/></name><operator pos:line="36" pos:column="55">)<pos:position pos:line="36" pos:column="56"/></operator></expr> ?<pos:position pos:line="36" pos:column="58"/></condition><then pos:line="36" pos:column="58"> <expr><literal type="number" pos:line="36" pos:column="59">0<pos:position pos:line="36" pos:column="60"/></literal></expr> <pos:position pos:line="36" pos:column="61"/></then><else pos:line="36" pos:column="61">: <expr><literal type="number" pos:line="36" pos:column="63">1<pos:position pos:line="36" pos:column="64"/></literal></expr></else></ternary><operator pos:line="36" pos:column="64">)<pos:position pos:line="36" pos:column="65"/></operator></expr>;<pos:position pos:line="36" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">collectd_argv<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <operator pos:line="37" pos:column="25">(<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">char<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">*<pos:position pos:line="37" pos:column="32"/></operator><operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><operator pos:line="37" pos:column="33">)<pos:position pos:line="37" pos:column="34"/></operator><call><name pos:line="37" pos:column="34">calloc<pos:position pos:line="37" pos:column="40"/></name> <argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">collectd_argc<pos:position pos:line="37" pos:column="55"/></name> <operator pos:line="37" pos:column="56">+<pos:position pos:line="37" pos:column="57"/></operator> <literal type="number" pos:line="37" pos:column="58">1<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="61">sizeof <argument_list pos:line="37" pos:column="68">(<argument><expr><name pos:line="37" pos:column="69">char<pos:position pos:line="37" pos:column="73"/></name> <operator pos:line="37" pos:column="74">*<pos:position pos:line="37" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="78"/></expr_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">NULL<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">==<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">collectd_argv<pos:position pos:line="39" pos:column="34"/></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">fprintf<pos:position pos:line="40" pos:column="24"/></name> <argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">stderr<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="34">"Out of memory."<pos:position pos:line="40" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><literal type="number" pos:line="41" pos:column="24">3<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="44" pos:column="9">collectd_argv<pos:position pos:line="44" pos:column="22"/></name><index pos:line="44" pos:column="22">[<expr><literal type="number" pos:line="44" pos:column="23">0<pos:position pos:line="44" pos:column="24"/></literal></expr>]<pos:position pos:line="44" pos:column="25"/></index></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <ternary><condition><expr><operator pos:line="44" pos:column="28">(<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="29">NULL<pos:position pos:line="44" pos:column="33"/></name> <operator pos:line="44" pos:column="34">==<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="37">collectd<pos:position pos:line="44" pos:column="45"/></name><operator pos:line="44" pos:column="45">)<pos:position pos:line="44" pos:column="46"/></operator></expr> ?<pos:position pos:line="44" pos:column="48"/></condition><then pos:line="44" pos:column="48"> <expr><literal type="string" pos:line="44" pos:column="49">"collectd"<pos:position pos:line="44" pos:column="59"/></literal></expr> <pos:position pos:line="44" pos:column="60"/></then><else pos:line="44" pos:column="60">: <expr><name pos:line="44" pos:column="62">collectd<pos:position pos:line="44" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="71"/></expr_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">i<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <name pos:line="46" pos:column="18">argc<pos:position pos:line="46" pos:column="22"/></name></expr>)<pos:position pos:line="46" pos:column="23"/></condition><then pos:line="46" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="17">collectd_argv<pos:position pos:line="47" pos:column="30"/></name><index pos:line="47" pos:column="30">[<expr><name pos:line="47" pos:column="31">collectd_argc<pos:position pos:line="47" pos:column="44"/></name> <operator pos:line="47" pos:column="45">-<pos:position pos:line="47" pos:column="46"/></operator> <literal type="number" pos:line="47" pos:column="47">1<pos:position pos:line="47" pos:column="48"/></literal></expr>]<pos:position pos:line="47" pos:column="49"/></index></name> <operator pos:line="47" pos:column="50">=<pos:position pos:line="47" pos:column="51"/></operator> <literal type="string" pos:line="47" pos:column="52">"-f"<pos:position pos:line="47" pos:column="56"/></literal></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt></block></then></if>

	<for pos:line="49" pos:column="9">for <control pos:line="49" pos:column="13">(<init><expr><name pos:line="49" pos:column="14">i<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">optind<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></init> <condition><expr><name pos:line="49" pos:column="26">i<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">&lt;<pos:position pos:line="49" pos:column="32"/></operator> <name pos:line="49" pos:column="30">argc<pos:position pos:line="49" pos:column="34"/></name></expr>;<pos:position pos:line="49" pos:column="35"/></condition> <incr><expr><operator pos:line="49" pos:column="36">++<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">i<pos:position pos:line="49" pos:column="39"/></name></expr></incr>)<pos:position pos:line="49" pos:column="40"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="17">collectd_argv<pos:position pos:line="50" pos:column="30"/></name><index pos:line="50" pos:column="30">[<expr><name pos:line="50" pos:column="31">i<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">-<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">optind<pos:position pos:line="50" pos:column="41"/></name> <operator pos:line="50" pos:column="42">+<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="44">1<pos:position pos:line="50" pos:column="45"/></literal></expr>]<pos:position pos:line="50" pos:column="46"/></index></name> <operator pos:line="50" pos:column="47">=<pos:position pos:line="50" pos:column="48"/></operator> <name><name pos:line="50" pos:column="49">argv<pos:position pos:line="50" pos:column="53"/></name><index pos:line="50" pos:column="53">[<expr><name pos:line="50" pos:column="54">i<pos:position pos:line="50" pos:column="55"/></name></expr>]<pos:position pos:line="50" pos:column="56"/></index></name></expr>;<pos:position pos:line="50" pos:column="57"/></expr_stmt></block></for>

	<expr_stmt><expr><name><name pos:line="52" pos:column="9">collectd_argv<pos:position pos:line="52" pos:column="22"/></name><index pos:line="52" pos:column="22">[<expr><name pos:line="52" pos:column="23">collectd_argc<pos:position pos:line="52" pos:column="36"/></name></expr>]<pos:position pos:line="52" pos:column="37"/></index></name> <operator pos:line="52" pos:column="38">=<pos:position pos:line="52" pos:column="39"/></operator> <name pos:line="52" pos:column="40">NULL<pos:position pos:line="52" pos:column="44"/></name></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="54" pos:column="9">openlog<pos:position pos:line="54" pos:column="16"/></name> <argument_list pos:line="54" pos:column="17">(<argument><expr><literal type="string" pos:line="54" pos:column="18">"collectdmon"<pos:position pos:line="54" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">LOG_CONS<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">|<pos:position pos:line="54" pos:column="43"/></operator> <name pos:line="54" pos:column="44">LOG_PID<pos:position pos:line="54" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">LOG_DAEMON<pos:position pos:line="54" pos:column="63"/></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>

	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">-<pos:position pos:line="56" pos:column="14"/></operator><literal type="number" pos:line="56" pos:column="14">1<pos:position pos:line="56" pos:column="15"/></literal> <operator pos:line="56" pos:column="16">==<pos:position pos:line="56" pos:column="18"/></operator> <call><name pos:line="56" pos:column="19">daemonize<pos:position pos:line="56" pos:column="28"/></name> <argument_list pos:line="56" pos:column="29">()<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32">
		<block type="pseudo"><return pos:line="57" pos:column="17">return <expr><literal type="number" pos:line="57" pos:column="24">1<pos:position pos:line="57" pos:column="25"/></literal></expr>;<pos:position pos:line="57" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="59" pos:column="9">sa<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">.<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">sa_handler<pos:position pos:line="59" pos:column="22"/></name></name> <operator pos:line="59" pos:column="23">=<pos:position pos:line="59" pos:column="24"/></operator> <name pos:line="59" pos:column="25">sig_int_term_handler<pos:position pos:line="59" pos:column="45"/></name></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="60" pos:column="9">sa<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">.<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="12">sa_flags<pos:position pos:line="60" pos:column="20"/></name></name>   <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <literal type="number" pos:line="60" pos:column="25">0<pos:position pos:line="60" pos:column="26"/></literal></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">sigemptyset<pos:position pos:line="61" pos:column="20"/></name> <argument_list pos:line="61" pos:column="21">(<argument><expr><operator pos:line="61" pos:column="22">&amp;<pos:position pos:line="61" pos:column="27"/></operator><name><name pos:line="61" pos:column="23">sa<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">.<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">sa_mask<pos:position pos:line="61" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><literal type="number" pos:line="63" pos:column="13">0<pos:position pos:line="63" pos:column="14"/></literal> <operator pos:line="63" pos:column="15">!=<pos:position pos:line="63" pos:column="17"/></operator> <call><name pos:line="63" pos:column="18">sigaction<pos:position pos:line="63" pos:column="27"/></name> <argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">SIGINT<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="37">&amp;<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="38">sa<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">NULL<pos:position pos:line="63" pos:column="46"/></name></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="48"/></condition><then pos:line="63" pos:column="48"> <block pos:line="63" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">syslog<pos:position pos:line="64" pos:column="23"/></name> <argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">LOG_ERR<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="34">"Error: sigaction() failed: %s"<pos:position pos:line="64" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="67">strerror<pos:position pos:line="64" pos:column="75"/></name> <argument_list pos:line="64" pos:column="76">(<argument><expr><name pos:line="64" pos:column="77">errno<pos:position pos:line="64" pos:column="82"/></name></expr></argument>)<pos:position pos:line="64" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="85"/></expr_stmt>
		<return pos:line="65" pos:column="17">return <expr><literal type="number" pos:line="65" pos:column="24">1<pos:position pos:line="65" pos:column="25"/></literal></expr>;<pos:position pos:line="65" pos:column="26"/></return>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><literal type="number" pos:line="68" pos:column="13">0<pos:position pos:line="68" pos:column="14"/></literal> <operator pos:line="68" pos:column="15">!=<pos:position pos:line="68" pos:column="17"/></operator> <call><name pos:line="68" pos:column="18">sigaction<pos:position pos:line="68" pos:column="27"/></name> <argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">SIGTERM<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="38">&amp;<pos:position pos:line="68" pos:column="43"/></operator><name pos:line="68" pos:column="39">sa<pos:position pos:line="68" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">NULL<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="49"/></condition><then pos:line="68" pos:column="49"> <block pos:line="68" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">syslog<pos:position pos:line="69" pos:column="23"/></name> <argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">LOG_ERR<pos:position pos:line="69" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="34">"Error: sigaction() failed: %s"<pos:position pos:line="69" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="69" pos:column="67">strerror<pos:position pos:line="69" pos:column="75"/></name> <argument_list pos:line="69" pos:column="76">(<argument><expr><name pos:line="69" pos:column="77">errno<pos:position pos:line="69" pos:column="82"/></name></expr></argument>)<pos:position pos:line="69" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="85"/></expr_stmt>
		<return pos:line="70" pos:column="17">return <expr><literal type="number" pos:line="70" pos:column="24">1<pos:position pos:line="70" pos:column="25"/></literal></expr>;<pos:position pos:line="70" pos:column="26"/></return>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="73" pos:column="9">sa<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">.<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">sa_handler<pos:position pos:line="73" pos:column="22"/></name></name> <operator pos:line="73" pos:column="23">=<pos:position pos:line="73" pos:column="24"/></operator> <name pos:line="73" pos:column="25">sig_hup_handler<pos:position pos:line="73" pos:column="40"/></name></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><literal type="number" pos:line="75" pos:column="13">0<pos:position pos:line="75" pos:column="14"/></literal> <operator pos:line="75" pos:column="15">!=<pos:position pos:line="75" pos:column="17"/></operator> <call><name pos:line="75" pos:column="18">sigaction<pos:position pos:line="75" pos:column="27"/></name> <argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">SIGHUP<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="37">&amp;<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="38">sa<pos:position pos:line="75" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="42">NULL<pos:position pos:line="75" pos:column="46"/></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="48"/></condition><then pos:line="75" pos:column="48"> <block pos:line="75" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">syslog<pos:position pos:line="76" pos:column="23"/></name> <argument_list pos:line="76" pos:column="24">(<argument><expr><name pos:line="76" pos:column="25">LOG_ERR<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="34">"Error: sigaction() failed: %s"<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="67">strerror<pos:position pos:line="76" pos:column="75"/></name> <argument_list pos:line="76" pos:column="76">(<argument><expr><name pos:line="76" pos:column="77">errno<pos:position pos:line="76" pos:column="82"/></name></expr></argument>)<pos:position pos:line="76" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="85"/></expr_stmt>
		<return pos:line="77" pos:column="17">return <expr><literal type="number" pos:line="77" pos:column="24">1<pos:position pos:line="77" pos:column="25"/></literal></expr>;<pos:position pos:line="77" pos:column="26"/></return>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">sigaddset<pos:position pos:line="80" pos:column="18"/></name> <argument_list pos:line="80" pos:column="19">(<argument><expr><operator pos:line="80" pos:column="20">&amp;<pos:position pos:line="80" pos:column="25"/></operator><name><name pos:line="80" pos:column="21">sa<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">.<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="24">sa_mask<pos:position pos:line="80" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="33">SIGCHLD<pos:position pos:line="80" pos:column="40"/></name></expr></argument>)<pos:position pos:line="80" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="42"/></expr_stmt>
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><literal type="number" pos:line="81" pos:column="13">0<pos:position pos:line="81" pos:column="14"/></literal> <operator pos:line="81" pos:column="15">!=<pos:position pos:line="81" pos:column="17"/></operator> <call><name pos:line="81" pos:column="18">sigprocmask<pos:position pos:line="81" pos:column="29"/></name> <argument_list pos:line="81" pos:column="30">(<argument><expr><name pos:line="81" pos:column="31">SIG_BLOCK<pos:position pos:line="81" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="42">&amp;<pos:position pos:line="81" pos:column="47"/></operator><name><name pos:line="81" pos:column="43">sa<pos:position pos:line="81" pos:column="45"/></name><operator pos:line="81" pos:column="45">.<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="46">sa_mask<pos:position pos:line="81" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="55">NULL<pos:position pos:line="81" pos:column="59"/></name></expr></argument>)<pos:position pos:line="81" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="61"/></condition><then pos:line="81" pos:column="61"> <block pos:line="81" pos:column="62">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">syslog<pos:position pos:line="82" pos:column="23"/></name> <argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">LOG_ERR<pos:position pos:line="82" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="34">"Error: sigprocmask() failed: %s"<pos:position pos:line="82" pos:column="67"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="69">strerror<pos:position pos:line="82" pos:column="77"/></name> <argument_list pos:line="82" pos:column="78">(<argument><expr><name pos:line="82" pos:column="79">errno<pos:position pos:line="82" pos:column="84"/></name></expr></argument>)<pos:position pos:line="82" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="82" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="87"/></expr_stmt>
		<return pos:line="83" pos:column="17">return <expr><literal type="number" pos:line="83" pos:column="24">1<pos:position pos:line="83" pos:column="25"/></literal></expr>;<pos:position pos:line="83" pos:column="26"/></return>
	}<pos:position pos:line="84" pos:column="10"/></block></then></if>

	<while pos:line="86" pos:column="9">while <condition pos:line="86" pos:column="15">(<expr><literal type="number" pos:line="86" pos:column="16">0<pos:position pos:line="86" pos:column="17"/></literal> <operator pos:line="86" pos:column="18">==<pos:position pos:line="86" pos:column="20"/></operator> <name pos:line="86" pos:column="21">loop<pos:position pos:line="86" pos:column="25"/></name></expr>)<pos:position pos:line="86" pos:column="26"/></condition> <block pos:line="86" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">int<pos:position pos:line="87" pos:column="20"/></name></type> <name pos:line="87" pos:column="21">status<pos:position pos:line="87" pos:column="27"/></name> <init pos:line="87" pos:column="28">= <expr><literal type="number" pos:line="87" pos:column="30">0<pos:position pos:line="87" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="32"/></decl_stmt>

		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><literal type="number" pos:line="89" pos:column="21">0<pos:position pos:line="89" pos:column="22"/></literal> <operator pos:line="89" pos:column="23">!=<pos:position pos:line="89" pos:column="25"/></operator> <call><name pos:line="89" pos:column="26">collectd_start<pos:position pos:line="89" pos:column="40"/></name> <argument_list pos:line="89" pos:column="41">(<argument><expr><name pos:line="89" pos:column="42">collectd_argv<pos:position pos:line="89" pos:column="55"/></name></expr></argument>)<pos:position pos:line="89" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="57"/></condition><then pos:line="89" pos:column="57"> <block pos:line="89" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="90" pos:column="25">syslog<pos:position pos:line="90" pos:column="31"/></name> <argument_list pos:line="90" pos:column="32">(<argument><expr><name pos:line="90" pos:column="33">LOG_ERR<pos:position pos:line="90" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="42">"Error: failed to start collectd."<pos:position pos:line="90" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="78"/></expr_stmt>
			<break pos:line="91" pos:column="25">break;<pos:position pos:line="91" pos:column="31"/></break>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="94" pos:column="17">assert<pos:position pos:line="94" pos:column="23"/></name> <argument_list pos:line="94" pos:column="24">(<argument><expr><literal type="number" pos:line="94" pos:column="25">0<pos:position pos:line="94" pos:column="26"/></literal> <operator pos:line="94" pos:column="27">&lt;<pos:position pos:line="94" pos:column="31"/></operator> <name pos:line="94" pos:column="29">collectd_pid<pos:position pos:line="94" pos:column="41"/></name></expr></argument>)<pos:position pos:line="94" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
		<while pos:line="95" pos:column="17">while <condition pos:line="95" pos:column="23">(<expr><operator pos:line="95" pos:column="24">(<pos:position pos:line="95" pos:column="25"/></operator><name pos:line="95" pos:column="25">collectd_pid<pos:position pos:line="95" pos:column="37"/></name> <operator pos:line="95" pos:column="38">!=<pos:position pos:line="95" pos:column="40"/></operator> <call><name pos:line="95" pos:column="41">waitpid<pos:position pos:line="95" pos:column="48"/></name> <argument_list pos:line="95" pos:column="49">(<argument><expr><name pos:line="95" pos:column="50">collectd_pid<pos:position pos:line="95" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="64">&amp;<pos:position pos:line="95" pos:column="69"/></operator><name pos:line="95" pos:column="65">status<pos:position pos:line="95" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="73">0<pos:position pos:line="95" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="75"/></argument_list></call><operator pos:line="95" pos:column="75">)<pos:position pos:line="95" pos:column="76"/></operator>
				<operator pos:line="96" pos:column="33">&amp;&amp;<pos:position pos:line="96" pos:column="43"/></operator> <operator pos:line="96" pos:column="36">(<pos:position pos:line="96" pos:column="37"/></operator><name pos:line="96" pos:column="37">EINTR<pos:position pos:line="96" pos:column="42"/></name> <operator pos:line="96" pos:column="43">==<pos:position pos:line="96" pos:column="45"/></operator> <name pos:line="96" pos:column="46">errno<pos:position pos:line="96" pos:column="51"/></name><operator pos:line="96" pos:column="51">)<pos:position pos:line="96" pos:column="52"/></operator></expr>)<pos:position pos:line="96" pos:column="53"/></condition>
			<block type="pseudo"><if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><operator pos:line="97" pos:column="29">(<pos:position pos:line="97" pos:column="30"/></operator><literal type="number" pos:line="97" pos:column="30">0<pos:position pos:line="97" pos:column="31"/></literal> <operator pos:line="97" pos:column="32">!=<pos:position pos:line="97" pos:column="34"/></operator> <name pos:line="97" pos:column="35">loop<pos:position pos:line="97" pos:column="39"/></name><operator pos:line="97" pos:column="39">)<pos:position pos:line="97" pos:column="40"/></operator> <operator pos:line="97" pos:column="41">||<pos:position pos:line="97" pos:column="43"/></operator> <operator pos:line="97" pos:column="44">(<pos:position pos:line="97" pos:column="45"/></operator><literal type="number" pos:line="97" pos:column="45">0<pos:position pos:line="97" pos:column="46"/></literal> <operator pos:line="97" pos:column="47">!=<pos:position pos:line="97" pos:column="49"/></operator> <name pos:line="97" pos:column="50">restart<pos:position pos:line="97" pos:column="57"/></name><operator pos:line="97" pos:column="57">)<pos:position pos:line="97" pos:column="58"/></operator></expr>)<pos:position pos:line="97" pos:column="59"/></condition><then pos:line="97" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="33">collectd_stop<pos:position pos:line="98" pos:column="46"/></name> <argument_list pos:line="98" pos:column="47">()<pos:position pos:line="98" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="50"/></expr_stmt></block></then></if></block></while>

		<expr_stmt><expr><name pos:line="100" pos:column="17">collectd_pid<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">=<pos:position pos:line="100" pos:column="31"/></operator> <literal type="number" pos:line="100" pos:column="32">0<pos:position pos:line="100" pos:column="33"/></literal></expr>;<pos:position pos:line="100" pos:column="34"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="102" pos:column="17">log_status<pos:position pos:line="102" pos:column="27"/></name> <argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">status<pos:position pos:line="102" pos:column="35"/></name></expr></argument>)<pos:position pos:line="102" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">check_respawn<pos:position pos:line="103" pos:column="30"/></name> <argument_list pos:line="103" pos:column="31">()<pos:position pos:line="103" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="34"/></expr_stmt>

		<if pos:line="105" pos:column="17">if <condition pos:line="105" pos:column="20">(<expr><literal type="number" pos:line="105" pos:column="21">0<pos:position pos:line="105" pos:column="22"/></literal> <operator pos:line="105" pos:column="23">!=<pos:position pos:line="105" pos:column="25"/></operator> <name pos:line="105" pos:column="26">restart<pos:position pos:line="105" pos:column="33"/></name></expr>)<pos:position pos:line="105" pos:column="34"/></condition><then pos:line="105" pos:column="34"> <block pos:line="105" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">syslog<pos:position pos:line="106" pos:column="31"/></name> <argument_list pos:line="106" pos:column="32">(<argument><expr><name pos:line="106" pos:column="33">LOG_INFO<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="43">"Info: restarting collectd"<pos:position pos:line="106" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">restart<pos:position pos:line="107" pos:column="32"/></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <literal type="number" pos:line="107" pos:column="35">0<pos:position pos:line="107" pos:column="36"/></literal></expr>;<pos:position pos:line="107" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="108" pos:column="18"/></block></then>
		<elseif pos:line="109" pos:column="17">else <if pos:line="109" pos:column="22">if <condition pos:line="109" pos:column="25">(<expr><literal type="number" pos:line="109" pos:column="26">0<pos:position pos:line="109" pos:column="27"/></literal> <operator pos:line="109" pos:column="28">==<pos:position pos:line="109" pos:column="30"/></operator> <name pos:line="109" pos:column="31">loop<pos:position pos:line="109" pos:column="35"/></name></expr>)<pos:position pos:line="109" pos:column="36"/></condition><then pos:line="109" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="25">syslog<pos:position pos:line="110" pos:column="31"/></name> <argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">LOG_WARNING<pos:position pos:line="110" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="46">"Warning: restarting collectd"<pos:position pos:line="110" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="78"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="111" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="113" pos:column="9">syslog<pos:position pos:line="113" pos:column="15"/></name> <argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">LOG_INFO<pos:position pos:line="113" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="27">"Info: shutting down collectdmon"<pos:position pos:line="113" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="62"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="115" pos:column="9">pidfile_delete<pos:position pos:line="115" pos:column="23"/></name> <argument_list pos:line="115" pos:column="24">()<pos:position pos:line="115" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">closelog<pos:position pos:line="116" pos:column="17"/></name> <argument_list pos:line="116" pos:column="18">()<pos:position pos:line="116" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="118" pos:column="9">free<pos:position pos:line="118" pos:column="13"/></name> <argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">collectd_argv<pos:position pos:line="118" pos:column="28"/></name></expr></argument>)<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>
	<return pos:line="119" pos:column="9">return <expr><literal type="number" pos:line="119" pos:column="16">0<pos:position pos:line="119" pos:column="17"/></literal></expr>;<pos:position pos:line="119" pos:column="18"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
