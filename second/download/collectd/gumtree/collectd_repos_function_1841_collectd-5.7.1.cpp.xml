<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1841_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_cb_dispatch_values<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">lua_State<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">L<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">nargs<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><call><name pos:line="3" pos:column="15">lua_gettop<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">L<pos:position pos:line="3" pos:column="27"/></name></expr></argument>)<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">nargs<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">!=<pos:position pos:line="5" pos:column="15"/></operator> <literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><call><name pos:line="6" pos:column="12">luaL_error<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">L<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="26">"Invalid number of arguments (%d != 1)"<pos:position pos:line="6" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="67">nargs<pos:position pos:line="6" pos:column="72"/></name></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="74"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">luaL_checktype<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">L<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="24">LUA_TTABLE<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">value_list_t<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">vl<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><call><name pos:line="10" pos:column="22">luaC_tovaluelist<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><name pos:line="10" pos:column="39">L<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="42">-<pos:position pos:line="10" pos:column="43"/></operator><literal type="number" pos:line="10" pos:column="43">1<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">vl<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">==<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">NULL<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><call><name pos:line="12" pos:column="12">luaL_error<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">L<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="26">"%s"<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"luaC_tovaluelist failed"<pos:position pos:line="12" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="59"/></return></block></then></if>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">COLLECT_DEBUG<pos:position pos:line="14" pos:column="18"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name></type> <name><name pos:line="15" pos:column="8">identifier<pos:position pos:line="15" pos:column="18"/></name><index pos:line="15" pos:column="18">[<expr><literal type="number" pos:line="15" pos:column="19">6<pos:position pos:line="15" pos:column="20"/></literal> <operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">DATA_MAX_NAME_LEN<pos:position pos:line="15" pos:column="40"/></name></expr>]<pos:position pos:line="15" pos:column="41"/></index></name></decl>;<pos:position pos:line="15" pos:column="42"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">FORMAT_VL<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">identifier<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="25">sizeof<argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">identifier<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">vl<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">DEBUG<pos:position pos:line="18" pos:column="8"/></name><argument_list pos:line="18" pos:column="8">(<argument><expr><literal type="string" pos:line="18" pos:column="9">"Lua plugin: collectd.dispatch_values(): Received value list \"%s\", "<pos:position pos:line="18" pos:column="79"/></literal>
        <literal type="string" pos:line="19" pos:column="9">"time %.3f, interval %.3f."<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>,
        <argument><expr><name pos:line="20" pos:column="9">identifier<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="21">CDTIME_T_TO_DOUBLE<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name><name pos:line="20" pos:column="40">vl<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">time<pos:position pos:line="20" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr></argument>,
        <argument><expr><call><name pos:line="21" pos:column="9">CDTIME_T_TO_DOUBLE<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name><name pos:line="21" pos:column="28">vl<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">interval<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">plugin_dispatch_values<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">vl<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">sfree<pos:position pos:line="26" pos:column="8"/></name><argument_list pos:line="26" pos:column="8">(<argument><expr><name><name pos:line="26" pos:column="9">vl<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">values<pos:position pos:line="26" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">sfree<pos:position pos:line="27" pos:column="8"/></name><argument_list pos:line="27" pos:column="8">(<argument><expr><name pos:line="27" pos:column="9">vl<pos:position pos:line="27" pos:column="11"/></name></expr></argument>)<pos:position pos:line="27" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="13"/></expr_stmt>
  <return pos:line="28" pos:column="3">return <expr><literal type="number" pos:line="28" pos:column="10">0<pos:position pos:line="28" pos:column="11"/></literal></expr>;<pos:position pos:line="28" pos:column="12"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
