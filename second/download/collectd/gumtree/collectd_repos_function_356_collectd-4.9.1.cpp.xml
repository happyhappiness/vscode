<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_356_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fscache_read<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list><block pos:line="1" pos:column="31">{
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">FILE<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier></type><name pos:line="2" pos:column="11">fh<pos:position pos:line="2" pos:column="13"/></name></decl>;<pos:position pos:line="2" pos:column="14"/></decl_stmt>
    <expr_stmt><expr><name pos:line="3" pos:column="5">fh<pos:position pos:line="3" pos:column="7"/></name> <operator pos:line="3" pos:column="8">=<pos:position pos:line="3" pos:column="9"/></operator> <call><name pos:line="3" pos:column="10">fopen<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><literal type="string" pos:line="3" pos:column="16">"/proc/fs/fscache/stats"<pos:position pos:line="3" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="42">"r"<pos:position pos:line="3" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="47"/></expr_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">fh<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">!=<pos:position pos:line="4" pos:column="14"/></operator> <name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then><block pos:line="4" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">fscache_read_stats_file<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">fh<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">fclose<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">fh<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>

    }<pos:position pos:line="8" pos:column="6"/></block></then><else pos:line="8" pos:column="6">else<block pos:line="8" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">printf<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="string" pos:line="9" pos:column="16">"cant open file\n"<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><operator pos:line="10" pos:column="17">-<pos:position pos:line="10" pos:column="18"/></operator><literal type="number" pos:line="10" pos:column="18">1<pos:position pos:line="10" pos:column="19"/></literal><operator pos:line="10" pos:column="19">)<pos:position pos:line="10" pos:column="20"/></operator></expr>;<pos:position pos:line="10" pos:column="21"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></else></if>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal><operator pos:line="12" pos:column="14">)<pos:position pos:line="12" pos:column="15"/></operator></expr>;<pos:position pos:line="12" pos:column="16"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
