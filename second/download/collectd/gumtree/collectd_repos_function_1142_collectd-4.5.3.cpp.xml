<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1142_collectd-4.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ping_host_add<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">pingobj_t<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">obj<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">host<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">pinghost_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ph<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sockaddr_storage<pos:position pos:line="5" pos:column="32"/></name></name></type> <name pos:line="5" pos:column="33">sockaddr<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">socklen_t<pos:position pos:line="6" pos:column="18"/></name></type>               <name pos:line="6" pos:column="33">sockaddr_len<pos:position pos:line="6" pos:column="45"/></name></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">addrinfo<pos:position pos:line="8" pos:column="24"/></name></name></type>  <name pos:line="8" pos:column="26">ai_hints<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">addrinfo<pos:position pos:line="9" pos:column="24"/></name></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">ai_list<pos:position pos:line="9" pos:column="33"/></name></decl>, <modifier pos:line="9" pos:column="35">*<pos:position pos:line="9" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="36">ai_ptr<pos:position pos:line="9" pos:column="42"/></name></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type>              <name pos:line="10" pos:column="26">ai_return<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">dprintf<pos:position pos:line="12" pos:column="16"/></name> <argument_list pos:line="12" pos:column="17">(<argument><expr><literal type="string" pos:line="12" pos:column="18">"host = %s\n"<pos:position pos:line="12" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">host<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">ping_host_search<pos:position pos:line="14" pos:column="29"/></name> <argument_list pos:line="14" pos:column="30">(<argument><expr><name><name pos:line="14" pos:column="31">obj<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">head<pos:position pos:line="14" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">host<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call> <operator pos:line="14" pos:column="48">!=<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="51">NULL<pos:position pos:line="14" pos:column="55"/></name></expr>)<pos:position pos:line="14" pos:column="56"/></condition><then pos:line="14" pos:column="56">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">0<pos:position pos:line="15" pos:column="26"/></literal><operator pos:line="15" pos:column="26">)<pos:position pos:line="15" pos:column="27"/></operator></expr>;<pos:position pos:line="15" pos:column="28"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">memset<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="18">ai_hints<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="28">'\0'<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="34">sizeof <argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">ai_hints<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">ai_hints<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">ai_flags<pos:position pos:line="18" pos:column="26"/></name></name>     <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="33">0<pos:position pos:line="18" pos:column="34"/></literal></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="19" pos:column="21"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">ai_hints<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">ai_flags<pos:position pos:line="20" pos:column="26"/></name></name>    <operator pos:line="20" pos:column="30">|=<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">AI_ADDRCONFIG<pos:position pos:line="20" pos:column="46"/></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">ai_hints<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">.<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">ai_family<pos:position pos:line="22" pos:column="27"/></name></name>    <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name><name pos:line="22" pos:column="33">obj<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">-&gt;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="38">addrfamily<pos:position pos:line="22" pos:column="48"/></name></name></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">ai_hints<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">ai_socktype<pos:position pos:line="23" pos:column="29"/></name></name>  <operator pos:line="23" pos:column="31">=<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">SOCK_RAW<pos:position pos:line="23" pos:column="41"/></name></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">ph<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">ping_alloc<pos:position pos:line="25" pos:column="29"/></name> <argument_list pos:line="25" pos:column="30">()<pos:position pos:line="25" pos:column="32"/></argument_list></call><operator pos:line="25" pos:column="32">)<pos:position pos:line="25" pos:column="33"/></operator> <operator pos:line="25" pos:column="34">==<pos:position pos:line="25" pos:column="36"/></operator> <name pos:line="25" pos:column="37">NULL<pos:position pos:line="25" pos:column="41"/></name></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42">
	<block pos:line="26" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">dprintf<pos:position pos:line="27" pos:column="24"/></name> <argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"Out of memory!\n"<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><operator pos:line="28" pos:column="25">-<pos:position pos:line="28" pos:column="26"/></operator><literal type="number" pos:line="28" pos:column="26">1<pos:position pos:line="28" pos:column="27"/></literal><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator></expr>;<pos:position pos:line="28" pos:column="29"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name><name pos:line="31" pos:column="14">ph<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">hostname<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <call><name pos:line="31" pos:column="29">strdup<pos:position pos:line="31" pos:column="35"/></name> <argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">host<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call><operator pos:line="31" pos:column="42">)<pos:position pos:line="31" pos:column="43"/></operator> <operator pos:line="31" pos:column="44">==<pos:position pos:line="31" pos:column="46"/></operator> <name pos:line="31" pos:column="47">NULL<pos:position pos:line="31" pos:column="51"/></name></expr>)<pos:position pos:line="31" pos:column="52"/></condition><then pos:line="31" pos:column="52">
	<block pos:line="32" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">dprintf<pos:position pos:line="33" pos:column="24"/></name> <argument_list pos:line="33" pos:column="25">(<argument><expr><literal type="string" pos:line="33" pos:column="26">"Out of memory!\n"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">ping_set_error<pos:position pos:line="34" pos:column="31"/></name> <argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">obj<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="38">"strdup"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="48">strerror<pos:position pos:line="34" pos:column="56"/></name> <argument_list pos:line="34" pos:column="57">(<argument><expr><name pos:line="34" pos:column="58">errno<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">ping_free<pos:position pos:line="35" pos:column="26"/></name> <argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">ph<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><operator pos:line="36" pos:column="24">(<pos:position pos:line="36" pos:column="25"/></operator><operator pos:line="36" pos:column="25">-<pos:position pos:line="36" pos:column="26"/></operator><literal type="number" pos:line="36" pos:column="26">1<pos:position pos:line="36" pos:column="27"/></literal><operator pos:line="36" pos:column="27">)<pos:position pos:line="36" pos:column="28"/></operator></expr>;<pos:position pos:line="36" pos:column="29"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="39" pos:column="9">/* obj-&gt;data is not garuanteed to be != NULL */</comment>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">(<pos:position pos:line="40" pos:column="14"/></operator><name><name pos:line="40" pos:column="14">ph<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">data<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <call><name pos:line="40" pos:column="25">strdup<pos:position pos:line="40" pos:column="31"/></name> <argument_list pos:line="40" pos:column="32">(<argument><expr><ternary><condition><expr><name><name pos:line="40" pos:column="33">obj<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">data<pos:position pos:line="40" pos:column="42"/></name></name> <operator pos:line="40" pos:column="43">==<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="46">NULL<pos:position pos:line="40" pos:column="50"/></name></expr> ?<pos:position pos:line="40" pos:column="52"/></condition><then pos:line="40" pos:column="52"> <expr><name pos:line="40" pos:column="53">PING_DEF_DATA<pos:position pos:line="40" pos:column="66"/></name></expr> <pos:position pos:line="40" pos:column="67"/></then><else pos:line="40" pos:column="67">: <expr><name><name pos:line="40" pos:column="69">obj<pos:position pos:line="40" pos:column="72"/></name><operator pos:line="40" pos:column="72">-&gt;<pos:position pos:line="40" pos:column="77"/></operator><name pos:line="40" pos:column="74">data<pos:position pos:line="40" pos:column="78"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="40" pos:column="79"/></argument_list></call><operator pos:line="40" pos:column="79">)<pos:position pos:line="40" pos:column="80"/></operator> <operator pos:line="40" pos:column="81">==<pos:position pos:line="40" pos:column="83"/></operator> <name pos:line="40" pos:column="84">NULL<pos:position pos:line="40" pos:column="88"/></name></expr>)<pos:position pos:line="40" pos:column="89"/></condition><then pos:line="40" pos:column="89">
	<block pos:line="41" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">dprintf<pos:position pos:line="42" pos:column="24"/></name> <argument_list pos:line="42" pos:column="25">(<argument><expr><literal type="string" pos:line="42" pos:column="26">"Out of memory!\n"<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">ping_set_error<pos:position pos:line="43" pos:column="31"/></name> <argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">obj<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="38">"strdup"<pos:position pos:line="43" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="48">strerror<pos:position pos:line="43" pos:column="56"/></name> <argument_list pos:line="43" pos:column="57">(<argument><expr><name pos:line="43" pos:column="58">errno<pos:position pos:line="43" pos:column="63"/></name></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">ping_free<pos:position pos:line="44" pos:column="26"/></name> <argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">ph<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
		<return pos:line="45" pos:column="17">return <expr><operator pos:line="45" pos:column="24">(<pos:position pos:line="45" pos:column="25"/></operator><operator pos:line="45" pos:column="25">-<pos:position pos:line="45" pos:column="26"/></operator><literal type="number" pos:line="45" pos:column="26">1<pos:position pos:line="45" pos:column="27"/></literal><operator pos:line="45" pos:column="27">)<pos:position pos:line="45" pos:column="28"/></operator></expr>;<pos:position pos:line="45" pos:column="29"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">(<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">ai_return<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <call><name pos:line="48" pos:column="26">getaddrinfo<pos:position pos:line="48" pos:column="37"/></name> <argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">host<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">NULL<pos:position pos:line="48" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="51">&amp;<pos:position pos:line="48" pos:column="56"/></operator><name pos:line="48" pos:column="52">ai_hints<pos:position pos:line="48" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="62">&amp;<pos:position pos:line="48" pos:column="67"/></operator><name pos:line="48" pos:column="63">ai_list<pos:position pos:line="48" pos:column="70"/></name></expr></argument>)<pos:position pos:line="48" pos:column="71"/></argument_list></call><operator pos:line="48" pos:column="71">)<pos:position pos:line="48" pos:column="72"/></operator> <operator pos:line="48" pos:column="73">!=<pos:position pos:line="48" pos:column="75"/></operator> <literal type="number" pos:line="48" pos:column="76">0<pos:position pos:line="48" pos:column="77"/></literal></expr>)<pos:position pos:line="48" pos:column="78"/></condition><then pos:line="48" pos:column="78">
	<block pos:line="49" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">dprintf<pos:position pos:line="50" pos:column="24"/></name> <argument_list pos:line="50" pos:column="25">(<argument><expr><literal type="string" pos:line="50" pos:column="26">"getaddrinfo failed\n"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">ping_set_error<pos:position pos:line="51" pos:column="31"/></name> <argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">obj<pos:position pos:line="51" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="38">"getaddrinfo"<pos:position pos:line="51" pos:column="51"/></literal></expr></argument>,
			       	<argument><expr><ternary><condition><expr><operator pos:line="52" pos:column="33">(<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="34">ai_return<pos:position pos:line="52" pos:column="43"/></name> <operator pos:line="52" pos:column="44">==<pos:position pos:line="52" pos:column="46"/></operator> <name pos:line="52" pos:column="47">EAI_SYSTEM<pos:position pos:line="52" pos:column="57"/></name><operator pos:line="52" pos:column="57">)<pos:position pos:line="52" pos:column="58"/></operator></expr>
				?<pos:position pos:line="53" pos:column="34"/></condition><then pos:line="53" pos:column="34"> <expr><call><name pos:line="53" pos:column="35">strerror<pos:position pos:line="53" pos:column="43"/></name> <argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">errno<pos:position pos:line="53" pos:column="50"/></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>
				<pos:position pos:line="54" pos:column="5"/></then><else pos:line="54" pos:column="33">: <expr><call><name pos:line="54" pos:column="35">gai_strerror<pos:position pos:line="54" pos:column="47"/></name> <argument_list pos:line="54" pos:column="48">(<argument><expr><name pos:line="54" pos:column="49">ai_return<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">ping_free<pos:position pos:line="55" pos:column="26"/></name> <argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">ph<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
		<return pos:line="56" pos:column="17">return <expr><operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">-<pos:position pos:line="56" pos:column="26"/></operator><literal type="number" pos:line="56" pos:column="26">1<pos:position pos:line="56" pos:column="27"/></literal><operator pos:line="56" pos:column="27">)<pos:position pos:line="56" pos:column="28"/></operator></expr>;<pos:position pos:line="56" pos:column="29"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">ai_list<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">==<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">NULL<pos:position pos:line="59" pos:column="28"/></name></expr>)<pos:position pos:line="59" pos:column="29"/></condition><then pos:line="59" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="17">ping_set_error<pos:position pos:line="60" pos:column="31"/></name> <argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">obj<pos:position pos:line="60" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="38">"getaddrinfo"<pos:position pos:line="60" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="53">"No hosts returned"<pos:position pos:line="60" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="74"/></expr_stmt></block></then></if>

	<for pos:line="62" pos:column="9">for <control pos:line="62" pos:column="13">(<init><expr><name pos:line="62" pos:column="14">ai_ptr<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">ai_list<pos:position pos:line="62" pos:column="30"/></name></expr>;<pos:position pos:line="62" pos:column="31"/></init> <condition><expr><name pos:line="62" pos:column="32">ai_ptr<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">!=<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="42">NULL<pos:position pos:line="62" pos:column="46"/></name></expr>;<pos:position pos:line="62" pos:column="47"/></condition> <incr><expr><name pos:line="62" pos:column="48">ai_ptr<pos:position pos:line="62" pos:column="54"/></name> <operator pos:line="62" pos:column="55">=<pos:position pos:line="62" pos:column="56"/></operator> <name><name pos:line="62" pos:column="57">ai_ptr<pos:position pos:line="62" pos:column="63"/></name><operator pos:line="62" pos:column="63">-&gt;<pos:position pos:line="62" pos:column="68"/></operator><name pos:line="62" pos:column="65">ai_next<pos:position pos:line="62" pos:column="72"/></name></name></expr></incr>)<pos:position pos:line="62" pos:column="73"/></control>
	<block pos:line="63" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">ph<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">fd<pos:position pos:line="64" pos:column="23"/></name></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <operator pos:line="64" pos:column="26">-<pos:position pos:line="64" pos:column="27"/></operator><literal type="number" pos:line="64" pos:column="27">1<pos:position pos:line="64" pos:column="28"/></literal></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>

		<expr_stmt><expr><name pos:line="66" pos:column="17">sockaddr_len<pos:position pos:line="66" pos:column="29"/></name> <operator pos:line="66" pos:column="30">=<pos:position pos:line="66" pos:column="31"/></operator> <sizeof pos:line="66" pos:column="32">sizeof <argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">sockaddr<pos:position pos:line="66" pos:column="48"/></name></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></sizeof></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">memset<pos:position pos:line="67" pos:column="23"/></name> <argument_list pos:line="67" pos:column="24">(<argument><expr><operator pos:line="67" pos:column="25">&amp;<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="26">sockaddr<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="36">'\0'<pos:position pos:line="67" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="42">sockaddr_len<pos:position pos:line="67" pos:column="54"/></name></expr></argument>)<pos:position pos:line="67" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="56"/></expr_stmt>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name><name pos:line="69" pos:column="21">ai_ptr<pos:position pos:line="69" pos:column="27"/></name><operator pos:line="69" pos:column="27">-&gt;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="29">ai_family<pos:position pos:line="69" pos:column="38"/></name></name> <operator pos:line="69" pos:column="39">==<pos:position pos:line="69" pos:column="41"/></operator> <name pos:line="69" pos:column="42">AF_INET<pos:position pos:line="69" pos:column="49"/></name></expr>)<pos:position pos:line="69" pos:column="50"/></condition><then pos:line="69" pos:column="50">
		<block pos:line="70" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="71" pos:column="25">struct<pos:position pos:line="71" pos:column="31"/></name> <name pos:line="71" pos:column="32">sockaddr_in<pos:position pos:line="71" pos:column="43"/></name></name> <modifier pos:line="71" pos:column="44">*<pos:position pos:line="71" pos:column="45"/></modifier></type><name pos:line="71" pos:column="45">si<pos:position pos:line="71" pos:column="47"/></name></decl>;<pos:position pos:line="71" pos:column="48"/></decl_stmt>

			<expr_stmt><expr><name pos:line="73" pos:column="25">si<pos:position pos:line="73" pos:column="27"/></name> <operator pos:line="73" pos:column="28">=<pos:position pos:line="73" pos:column="29"/></operator> <operator pos:line="73" pos:column="30">(<pos:position pos:line="73" pos:column="31"/></operator>struct <name pos:line="73" pos:column="38">sockaddr_in<pos:position pos:line="73" pos:column="49"/></name> <operator pos:line="73" pos:column="50">*<pos:position pos:line="73" pos:column="51"/></operator><operator pos:line="73" pos:column="51">)<pos:position pos:line="73" pos:column="52"/></operator> <operator pos:line="73" pos:column="53">&amp;<pos:position pos:line="73" pos:column="58"/></operator><name pos:line="73" pos:column="54">sockaddr<pos:position pos:line="73" pos:column="62"/></name></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="74" pos:column="25">si<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">-&gt;<pos:position pos:line="74" pos:column="32"/></operator><name pos:line="74" pos:column="29">sin_family<pos:position pos:line="74" pos:column="39"/></name></name> <operator pos:line="74" pos:column="40">=<pos:position pos:line="74" pos:column="41"/></operator> <name pos:line="74" pos:column="42">AF_INET<pos:position pos:line="74" pos:column="49"/></name></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="75" pos:column="25">si<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">-&gt;<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="29">sin_port<pos:position pos:line="75" pos:column="37"/></name></name>   <operator pos:line="75" pos:column="40">=<pos:position pos:line="75" pos:column="41"/></operator> <call><name pos:line="75" pos:column="42">htons<pos:position pos:line="75" pos:column="47"/></name> <argument_list pos:line="75" pos:column="48">(<argument><expr><name><name pos:line="75" pos:column="49">ph<pos:position pos:line="75" pos:column="51"/></name><operator pos:line="75" pos:column="51">-&gt;<pos:position pos:line="75" pos:column="56"/></operator><name pos:line="75" pos:column="53">ident<pos:position pos:line="75" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="76" pos:column="25">si<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">sin_addr<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">.<pos:position pos:line="76" pos:column="38"/></operator><name pos:line="76" pos:column="38">s_addr<pos:position pos:line="76" pos:column="44"/></name></name> <operator pos:line="76" pos:column="45">=<pos:position pos:line="76" pos:column="46"/></operator> <call><name pos:line="76" pos:column="47">htonl<pos:position pos:line="76" pos:column="52"/></name> <argument_list pos:line="76" pos:column="53">(<argument><expr><name pos:line="76" pos:column="54">INADDR_ANY<pos:position pos:line="76" pos:column="64"/></name></expr></argument>)<pos:position pos:line="76" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="66"/></expr_stmt>

			<expr_stmt><expr><name><name pos:line="78" pos:column="25">ai_ptr<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">-&gt;<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="33">ai_socktype<pos:position pos:line="78" pos:column="44"/></name></name> <operator pos:line="78" pos:column="45">=<pos:position pos:line="78" pos:column="46"/></operator> <name pos:line="78" pos:column="47">SOCK_RAW<pos:position pos:line="78" pos:column="55"/></name></expr>;<pos:position pos:line="78" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="79" pos:column="25">ai_ptr<pos:position pos:line="79" pos:column="31"/></name><operator pos:line="79" pos:column="31">-&gt;<pos:position pos:line="79" pos:column="36"/></operator><name pos:line="79" pos:column="33">ai_protocol<pos:position pos:line="79" pos:column="44"/></name></name> <operator pos:line="79" pos:column="45">=<pos:position pos:line="79" pos:column="46"/></operator> <name pos:line="79" pos:column="47">IPPROTO_ICMP<pos:position pos:line="79" pos:column="59"/></name></expr>;<pos:position pos:line="79" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></then>
		<elseif pos:line="81" pos:column="17">else <if pos:line="81" pos:column="22">if <condition pos:line="81" pos:column="25">(<expr><name><name pos:line="81" pos:column="26">ai_ptr<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">-&gt;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="34">ai_family<pos:position pos:line="81" pos:column="43"/></name></name> <operator pos:line="81" pos:column="44">==<pos:position pos:line="81" pos:column="46"/></operator> <name pos:line="81" pos:column="47">AF_INET6<pos:position pos:line="81" pos:column="55"/></name></expr>)<pos:position pos:line="81" pos:column="56"/></condition><then pos:line="81" pos:column="56">
		<block pos:line="82" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="83" pos:column="25">struct<pos:position pos:line="83" pos:column="31"/></name> <name pos:line="83" pos:column="32">sockaddr_in6<pos:position pos:line="83" pos:column="44"/></name></name> <modifier pos:line="83" pos:column="45">*<pos:position pos:line="83" pos:column="46"/></modifier></type><name pos:line="83" pos:column="46">si<pos:position pos:line="83" pos:column="48"/></name></decl>;<pos:position pos:line="83" pos:column="49"/></decl_stmt>

			<expr_stmt><expr><name pos:line="85" pos:column="25">si<pos:position pos:line="85" pos:column="27"/></name> <operator pos:line="85" pos:column="28">=<pos:position pos:line="85" pos:column="29"/></operator> <operator pos:line="85" pos:column="30">(<pos:position pos:line="85" pos:column="31"/></operator>struct <name pos:line="85" pos:column="38">sockaddr_in6<pos:position pos:line="85" pos:column="50"/></name> <operator pos:line="85" pos:column="51">*<pos:position pos:line="85" pos:column="52"/></operator><operator pos:line="85" pos:column="52">)<pos:position pos:line="85" pos:column="53"/></operator> <operator pos:line="85" pos:column="54">&amp;<pos:position pos:line="85" pos:column="59"/></operator><name pos:line="85" pos:column="55">sockaddr<pos:position pos:line="85" pos:column="63"/></name></expr>;<pos:position pos:line="85" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="86" pos:column="25">si<pos:position pos:line="86" pos:column="27"/></name><operator pos:line="86" pos:column="27">-&gt;<pos:position pos:line="86" pos:column="32"/></operator><name pos:line="86" pos:column="29">sin6_family<pos:position pos:line="86" pos:column="40"/></name></name> <operator pos:line="86" pos:column="41">=<pos:position pos:line="86" pos:column="42"/></operator> <name pos:line="86" pos:column="43">AF_INET6<pos:position pos:line="86" pos:column="51"/></name></expr>;<pos:position pos:line="86" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="87" pos:column="25">si<pos:position pos:line="87" pos:column="27"/></name><operator pos:line="87" pos:column="27">-&gt;<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="29">sin6_port<pos:position pos:line="87" pos:column="38"/></name></name>   <operator pos:line="87" pos:column="41">=<pos:position pos:line="87" pos:column="42"/></operator> <call><name pos:line="87" pos:column="43">htons<pos:position pos:line="87" pos:column="48"/></name> <argument_list pos:line="87" pos:column="49">(<argument><expr><name><name pos:line="87" pos:column="50">ph<pos:position pos:line="87" pos:column="52"/></name><operator pos:line="87" pos:column="52">-&gt;<pos:position pos:line="87" pos:column="57"/></operator><name pos:line="87" pos:column="54">ident<pos:position pos:line="87" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="88" pos:column="25">si<pos:position pos:line="88" pos:column="27"/></name><operator pos:line="88" pos:column="27">-&gt;<pos:position pos:line="88" pos:column="32"/></operator><name pos:line="88" pos:column="29">sin6_addr<pos:position pos:line="88" pos:column="38"/></name></name>   <operator pos:line="88" pos:column="41">=<pos:position pos:line="88" pos:column="42"/></operator> <name pos:line="88" pos:column="43">in6addr_any<pos:position pos:line="88" pos:column="54"/></name></expr>;<pos:position pos:line="88" pos:column="55"/></expr_stmt>

			<expr_stmt><expr><name><name pos:line="90" pos:column="25">ai_ptr<pos:position pos:line="90" pos:column="31"/></name><operator pos:line="90" pos:column="31">-&gt;<pos:position pos:line="90" pos:column="36"/></operator><name pos:line="90" pos:column="33">ai_socktype<pos:position pos:line="90" pos:column="44"/></name></name> <operator pos:line="90" pos:column="45">=<pos:position pos:line="90" pos:column="46"/></operator> <name pos:line="90" pos:column="47">SOCK_RAW<pos:position pos:line="90" pos:column="55"/></name></expr>;<pos:position pos:line="90" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="91" pos:column="25">ai_ptr<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">-&gt;<pos:position pos:line="91" pos:column="36"/></operator><name pos:line="91" pos:column="33">ai_protocol<pos:position pos:line="91" pos:column="44"/></name></name> <operator pos:line="91" pos:column="45">=<pos:position pos:line="91" pos:column="46"/></operator> <name pos:line="91" pos:column="47">IPPROTO_ICMPV6<pos:position pos:line="91" pos:column="61"/></name></expr>;<pos:position pos:line="91" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if></elseif>
		<else pos:line="93" pos:column="17">else
		<block pos:line="94" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="95" pos:column="25">char<pos:position pos:line="95" pos:column="29"/></name></type> <name><name pos:line="95" pos:column="30">errmsg<pos:position pos:line="95" pos:column="36"/></name><index pos:line="95" pos:column="36">[<expr><name pos:line="95" pos:column="37">PING_ERRMSG_LEN<pos:position pos:line="95" pos:column="52"/></name></expr>]<pos:position pos:line="95" pos:column="53"/></index></name></decl>;<pos:position pos:line="95" pos:column="54"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="97" pos:column="25">snprintf<pos:position pos:line="97" pos:column="33"/></name> <argument_list pos:line="97" pos:column="34">(<argument><expr><name pos:line="97" pos:column="35">errmsg<pos:position pos:line="97" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="43">PING_ERRMSG_LEN<pos:position pos:line="97" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="60">"Unknown `ai_family': %i"<pos:position pos:line="97" pos:column="85"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="87">ai_ptr<pos:position pos:line="97" pos:column="93"/></name><operator pos:line="97" pos:column="93">-&gt;<pos:position pos:line="97" pos:column="98"/></operator><name pos:line="97" pos:column="95">ai_family<pos:position pos:line="97" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="106"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="98" pos:column="25">errmsg<pos:position pos:line="98" pos:column="31"/></name><index pos:line="98" pos:column="31">[<expr><name pos:line="98" pos:column="32">PING_ERRMSG_LEN<pos:position pos:line="98" pos:column="47"/></name> <operator pos:line="98" pos:column="48">-<pos:position pos:line="98" pos:column="49"/></operator> <literal type="number" pos:line="98" pos:column="50">1<pos:position pos:line="98" pos:column="51"/></literal></expr>]<pos:position pos:line="98" pos:column="52"/></index></name> <operator pos:line="98" pos:column="53">=<pos:position pos:line="98" pos:column="54"/></operator> <literal type="char" pos:line="98" pos:column="55">'\0'<pos:position pos:line="98" pos:column="59"/></literal></expr>;<pos:position pos:line="98" pos:column="60"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="100" pos:column="25">dprintf<pos:position pos:line="100" pos:column="32"/></name> <argument_list pos:line="100" pos:column="33">(<argument><expr><name pos:line="100" pos:column="34">errmsg<pos:position pos:line="100" pos:column="40"/></name></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="101" pos:column="25">ping_set_error<pos:position pos:line="101" pos:column="39"/></name> <argument_list pos:line="101" pos:column="40">(<argument><expr><name pos:line="101" pos:column="41">obj<pos:position pos:line="101" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="46">"getaddrinfo"<pos:position pos:line="101" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="61">errmsg<pos:position pos:line="101" pos:column="67"/></name></expr></argument>)<pos:position pos:line="101" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="69"/></expr_stmt>
			<continue pos:line="102" pos:column="25">continue;<pos:position pos:line="102" pos:column="34"/></continue>
		}<pos:position pos:line="103" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="105" pos:column="17">/* TODO: Move this to a static function `ping_open_socket' and
		 * call it whenever the socket dies. */</comment>
		<expr_stmt><expr><name><name pos:line="107" pos:column="17">ph<pos:position pos:line="107" pos:column="19"/></name><operator pos:line="107" pos:column="19">-&gt;<pos:position pos:line="107" pos:column="24"/></operator><name pos:line="107" pos:column="21">fd<pos:position pos:line="107" pos:column="23"/></name></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <call><name pos:line="107" pos:column="26">socket<pos:position pos:line="107" pos:column="32"/></name> <argument_list pos:line="107" pos:column="33">(<argument><expr><name><name pos:line="107" pos:column="34">ai_ptr<pos:position pos:line="107" pos:column="40"/></name><operator pos:line="107" pos:column="40">-&gt;<pos:position pos:line="107" pos:column="45"/></operator><name pos:line="107" pos:column="42">ai_family<pos:position pos:line="107" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="53">ai_ptr<pos:position pos:line="107" pos:column="59"/></name><operator pos:line="107" pos:column="59">-&gt;<pos:position pos:line="107" pos:column="64"/></operator><name pos:line="107" pos:column="61">ai_socktype<pos:position pos:line="107" pos:column="72"/></name></name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="74">ai_ptr<pos:position pos:line="107" pos:column="80"/></name><operator pos:line="107" pos:column="80">-&gt;<pos:position pos:line="107" pos:column="85"/></operator><name pos:line="107" pos:column="82">ai_protocol<pos:position pos:line="107" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="95"/></expr_stmt>
		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><name><name pos:line="108" pos:column="21">ph<pos:position pos:line="108" pos:column="23"/></name><operator pos:line="108" pos:column="23">-&gt;<pos:position pos:line="108" pos:column="28"/></operator><name pos:line="108" pos:column="25">fd<pos:position pos:line="108" pos:column="27"/></name></name> <operator pos:line="108" pos:column="28">==<pos:position pos:line="108" pos:column="30"/></operator> <operator pos:line="108" pos:column="31">-<pos:position pos:line="108" pos:column="32"/></operator><literal type="number" pos:line="108" pos:column="32">1<pos:position pos:line="108" pos:column="33"/></literal></expr>)<pos:position pos:line="108" pos:column="34"/></condition><then pos:line="108" pos:column="34">
		<block pos:line="109" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">dprintf<pos:position pos:line="110" pos:column="32"/></name> <argument_list pos:line="110" pos:column="33">(<argument><expr><literal type="string" pos:line="110" pos:column="34">"socket: %s\n"<pos:position pos:line="110" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="110" pos:column="50">strerror<pos:position pos:line="110" pos:column="58"/></name> <argument_list pos:line="110" pos:column="59">(<argument><expr><name pos:line="110" pos:column="60">errno<pos:position pos:line="110" pos:column="65"/></name></expr></argument>)<pos:position pos:line="110" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">ping_set_error<pos:position pos:line="111" pos:column="39"/></name> <argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">obj<pos:position pos:line="111" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="46">"socket"<pos:position pos:line="111" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="111" pos:column="56">strerror<pos:position pos:line="111" pos:column="64"/></name> <argument_list pos:line="111" pos:column="65">(<argument><expr><name pos:line="111" pos:column="66">errno<pos:position pos:line="111" pos:column="71"/></name></expr></argument>)<pos:position pos:line="111" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="74"/></expr_stmt>
			<continue pos:line="112" pos:column="25">continue;<pos:position pos:line="112" pos:column="34"/></continue>
		}<pos:position pos:line="113" pos:column="18"/></block></then></if>

<comment type="block" pos:line="115" pos:column="1">/*
 * The majority vote of operating systems has decided that you don't need to
 * bind here. This code should be reactivated to bind to a specific address,
 * though. See the `-I' option of `ping(1)' (GNU).  -octo
 */</comment>
<cpp:if pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">if<pos:position pos:line="120" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="120" pos:column="5">0<pos:position pos:line="120" pos:column="6"/></literal></expr></cpp:if>
		if (bind (ph-&gt;fd, (struct sockaddr *) &amp;sockaddr, sockaddr_len) == -1)
		{
			dprintf ("bind: %s\n", strerror (errno));
			ping_set_error (obj, "bind", strerror (errno));
			close (ph-&gt;fd);
			ph-&gt;fd = -1;
			continue;
		}
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name pos:line="131" pos:column="17">assert<pos:position pos:line="131" pos:column="23"/></name> <argument_list pos:line="131" pos:column="24">(<argument><expr><sizeof pos:line="131" pos:column="25">sizeof <argument_list pos:line="131" pos:column="32">(<argument><expr pos:line="131" pos:column="33">struct <name pos:line="131" pos:column="40">sockaddr_storage<pos:position pos:line="131" pos:column="56"/></name></expr></argument>)<pos:position pos:line="131" pos:column="57"/></argument_list></sizeof> <operator pos:line="131" pos:column="58">&gt;=<pos:position pos:line="131" pos:column="63"/></operator> <name><name pos:line="131" pos:column="61">ai_ptr<pos:position pos:line="131" pos:column="67"/></name><operator pos:line="131" pos:column="67">-&gt;<pos:position pos:line="131" pos:column="72"/></operator><name pos:line="131" pos:column="69">ai_addrlen<pos:position pos:line="131" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">memset<pos:position pos:line="132" pos:column="23"/></name> <argument_list pos:line="132" pos:column="24">(<argument><expr><name><name pos:line="132" pos:column="25">ph<pos:position pos:line="132" pos:column="27"/></name><operator pos:line="132" pos:column="27">-&gt;<pos:position pos:line="132" pos:column="32"/></operator><name pos:line="132" pos:column="29">addr<pos:position pos:line="132" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="132" pos:column="35">'\0'<pos:position pos:line="132" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="132" pos:column="41">sizeof <argument_list pos:line="132" pos:column="48">(<argument><expr pos:line="132" pos:column="49">struct <name pos:line="132" pos:column="56">sockaddr_storage<pos:position pos:line="132" pos:column="72"/></name></expr></argument>)<pos:position pos:line="132" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="132" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">memcpy<pos:position pos:line="133" pos:column="23"/></name> <argument_list pos:line="133" pos:column="24">(<argument><expr><name><name pos:line="133" pos:column="25">ph<pos:position pos:line="133" pos:column="27"/></name><operator pos:line="133" pos:column="27">-&gt;<pos:position pos:line="133" pos:column="32"/></operator><name pos:line="133" pos:column="29">addr<pos:position pos:line="133" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="35">ai_ptr<pos:position pos:line="133" pos:column="41"/></name><operator pos:line="133" pos:column="41">-&gt;<pos:position pos:line="133" pos:column="46"/></operator><name pos:line="133" pos:column="43">ai_addr<pos:position pos:line="133" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="52">ai_ptr<pos:position pos:line="133" pos:column="58"/></name><operator pos:line="133" pos:column="58">-&gt;<pos:position pos:line="133" pos:column="63"/></operator><name pos:line="133" pos:column="60">ai_addrlen<pos:position pos:line="133" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="134" pos:column="17">ph<pos:position pos:line="134" pos:column="19"/></name><operator pos:line="134" pos:column="19">-&gt;<pos:position pos:line="134" pos:column="24"/></operator><name pos:line="134" pos:column="21">addrlen<pos:position pos:line="134" pos:column="28"/></name></name> <operator pos:line="134" pos:column="29">=<pos:position pos:line="134" pos:column="30"/></operator> <name><name pos:line="134" pos:column="31">ai_ptr<pos:position pos:line="134" pos:column="37"/></name><operator pos:line="134" pos:column="37">-&gt;<pos:position pos:line="134" pos:column="42"/></operator><name pos:line="134" pos:column="39">ai_addrlen<pos:position pos:line="134" pos:column="49"/></name></name></expr>;<pos:position pos:line="134" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="135" pos:column="17">ph<pos:position pos:line="135" pos:column="19"/></name><operator pos:line="135" pos:column="19">-&gt;<pos:position pos:line="135" pos:column="24"/></operator><name pos:line="135" pos:column="21">addrfamily<pos:position pos:line="135" pos:column="31"/></name></name> <operator pos:line="135" pos:column="32">=<pos:position pos:line="135" pos:column="33"/></operator> <name><name pos:line="135" pos:column="34">ai_ptr<pos:position pos:line="135" pos:column="40"/></name><operator pos:line="135" pos:column="40">-&gt;<pos:position pos:line="135" pos:column="45"/></operator><name pos:line="135" pos:column="42">ai_family<pos:position pos:line="135" pos:column="51"/></name></name></expr>;<pos:position pos:line="135" pos:column="52"/></expr_stmt>

		<break pos:line="137" pos:column="17">break;<pos:position pos:line="137" pos:column="23"/></break>
	}<pos:position pos:line="138" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="140" pos:column="9">freeaddrinfo<pos:position pos:line="140" pos:column="21"/></name> <argument_list pos:line="140" pos:column="22">(<argument><expr><name pos:line="140" pos:column="23">ai_list<pos:position pos:line="140" pos:column="30"/></name></expr></argument>)<pos:position pos:line="140" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="32"/></expr_stmt>

	<if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name><name pos:line="142" pos:column="13">ph<pos:position pos:line="142" pos:column="15"/></name><operator pos:line="142" pos:column="15">-&gt;<pos:position pos:line="142" pos:column="20"/></operator><name pos:line="142" pos:column="17">fd<pos:position pos:line="142" pos:column="19"/></name></name> <operator pos:line="142" pos:column="20">&lt;<pos:position pos:line="142" pos:column="24"/></operator> <literal type="number" pos:line="142" pos:column="22">0<pos:position pos:line="142" pos:column="23"/></literal></expr>)<pos:position pos:line="142" pos:column="24"/></condition><then pos:line="142" pos:column="24">
	<block pos:line="143" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="144" pos:column="17">free<pos:position pos:line="144" pos:column="21"/></name> <argument_list pos:line="144" pos:column="22">(<argument><expr><name><name pos:line="144" pos:column="23">ph<pos:position pos:line="144" pos:column="25"/></name><operator pos:line="144" pos:column="25">-&gt;<pos:position pos:line="144" pos:column="30"/></operator><name pos:line="144" pos:column="27">hostname<pos:position pos:line="144" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="145" pos:column="17">free<pos:position pos:line="145" pos:column="21"/></name> <argument_list pos:line="145" pos:column="22">(<argument><expr><name pos:line="145" pos:column="23">ph<pos:position pos:line="145" pos:column="25"/></name></expr></argument>)<pos:position pos:line="145" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="27"/></expr_stmt>
		<return pos:line="146" pos:column="17">return <expr><operator pos:line="146" pos:column="24">(<pos:position pos:line="146" pos:column="25"/></operator><operator pos:line="146" pos:column="25">-<pos:position pos:line="146" pos:column="26"/></operator><literal type="number" pos:line="146" pos:column="26">1<pos:position pos:line="146" pos:column="27"/></literal><operator pos:line="146" pos:column="27">)<pos:position pos:line="146" pos:column="28"/></operator></expr>;<pos:position pos:line="146" pos:column="29"/></return>
	}<pos:position pos:line="147" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="149" pos:column="9">/*
	 * Adding in the front is much easier, but then the iterator will
	 * return the host that was added last as first host. That's just not
	 * nice. -octo
	 */</comment>
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name><name pos:line="154" pos:column="13">obj<pos:position pos:line="154" pos:column="16"/></name><operator pos:line="154" pos:column="16">-&gt;<pos:position pos:line="154" pos:column="21"/></operator><name pos:line="154" pos:column="18">head<pos:position pos:line="154" pos:column="22"/></name></name> <operator pos:line="154" pos:column="23">==<pos:position pos:line="154" pos:column="25"/></operator> <name pos:line="154" pos:column="26">NULL<pos:position pos:line="154" pos:column="30"/></name></expr>)<pos:position pos:line="154" pos:column="31"/></condition><then pos:line="154" pos:column="31">
	<block pos:line="155" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="156" pos:column="17">obj<pos:position pos:line="156" pos:column="20"/></name><operator pos:line="156" pos:column="20">-&gt;<pos:position pos:line="156" pos:column="25"/></operator><name pos:line="156" pos:column="22">head<pos:position pos:line="156" pos:column="26"/></name></name> <operator pos:line="156" pos:column="27">=<pos:position pos:line="156" pos:column="28"/></operator> <name pos:line="156" pos:column="29">ph<pos:position pos:line="156" pos:column="31"/></name></expr>;<pos:position pos:line="156" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="157" pos:column="10"/></block></then>
	<else pos:line="158" pos:column="9">else
	<block pos:line="159" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="160" pos:column="17">pinghost_t<pos:position pos:line="160" pos:column="27"/></name> <modifier pos:line="160" pos:column="28">*<pos:position pos:line="160" pos:column="29"/></modifier></type><name pos:line="160" pos:column="29">hptr<pos:position pos:line="160" pos:column="33"/></name></decl>;<pos:position pos:line="160" pos:column="34"/></decl_stmt>

		<expr_stmt><expr><name pos:line="162" pos:column="17">hptr<pos:position pos:line="162" pos:column="21"/></name> <operator pos:line="162" pos:column="22">=<pos:position pos:line="162" pos:column="23"/></operator> <name><name pos:line="162" pos:column="24">obj<pos:position pos:line="162" pos:column="27"/></name><operator pos:line="162" pos:column="27">-&gt;<pos:position pos:line="162" pos:column="32"/></operator><name pos:line="162" pos:column="29">head<pos:position pos:line="162" pos:column="33"/></name></name></expr>;<pos:position pos:line="162" pos:column="34"/></expr_stmt>
		<while pos:line="163" pos:column="17">while <condition pos:line="163" pos:column="23">(<expr><name><name pos:line="163" pos:column="24">hptr<pos:position pos:line="163" pos:column="28"/></name><operator pos:line="163" pos:column="28">-&gt;<pos:position pos:line="163" pos:column="33"/></operator><name pos:line="163" pos:column="30">next<pos:position pos:line="163" pos:column="34"/></name></name> <operator pos:line="163" pos:column="35">!=<pos:position pos:line="163" pos:column="37"/></operator> <name pos:line="163" pos:column="38">NULL<pos:position pos:line="163" pos:column="42"/></name></expr>)<pos:position pos:line="163" pos:column="43"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="164" pos:column="25">hptr<pos:position pos:line="164" pos:column="29"/></name> <operator pos:line="164" pos:column="30">=<pos:position pos:line="164" pos:column="31"/></operator> <name><name pos:line="164" pos:column="32">hptr<pos:position pos:line="164" pos:column="36"/></name><operator pos:line="164" pos:column="36">-&gt;<pos:position pos:line="164" pos:column="41"/></operator><name pos:line="164" pos:column="38">next<pos:position pos:line="164" pos:column="42"/></name></name></expr>;<pos:position pos:line="164" pos:column="43"/></expr_stmt></block></while>

		<expr_stmt><expr><call><name pos:line="166" pos:column="17">assert<pos:position pos:line="166" pos:column="23"/></name> <argument_list pos:line="166" pos:column="24">(<argument><expr><operator pos:line="166" pos:column="25">(<pos:position pos:line="166" pos:column="26"/></operator><name pos:line="166" pos:column="26">hptr<pos:position pos:line="166" pos:column="30"/></name> <operator pos:line="166" pos:column="31">!=<pos:position pos:line="166" pos:column="33"/></operator> <name pos:line="166" pos:column="34">NULL<pos:position pos:line="166" pos:column="38"/></name><operator pos:line="166" pos:column="38">)<pos:position pos:line="166" pos:column="39"/></operator> <operator pos:line="166" pos:column="40">&amp;&amp;<pos:position pos:line="166" pos:column="50"/></operator> <operator pos:line="166" pos:column="43">(<pos:position pos:line="166" pos:column="44"/></operator><name><name pos:line="166" pos:column="44">hptr<pos:position pos:line="166" pos:column="48"/></name><operator pos:line="166" pos:column="48">-&gt;<pos:position pos:line="166" pos:column="53"/></operator><name pos:line="166" pos:column="50">next<pos:position pos:line="166" pos:column="54"/></name></name> <operator pos:line="166" pos:column="55">==<pos:position pos:line="166" pos:column="57"/></operator> <name pos:line="166" pos:column="58">NULL<pos:position pos:line="166" pos:column="62"/></name><operator pos:line="166" pos:column="62">)<pos:position pos:line="166" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="166" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="167" pos:column="17">hptr<pos:position pos:line="167" pos:column="21"/></name><operator pos:line="167" pos:column="21">-&gt;<pos:position pos:line="167" pos:column="26"/></operator><name pos:line="167" pos:column="23">next<pos:position pos:line="167" pos:column="27"/></name></name> <operator pos:line="167" pos:column="28">=<pos:position pos:line="167" pos:column="29"/></operator> <name pos:line="167" pos:column="30">ph<pos:position pos:line="167" pos:column="32"/></name></expr>;<pos:position pos:line="167" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="168" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="170" pos:column="9">ping_set_ttl<pos:position pos:line="170" pos:column="21"/></name> <argument_list pos:line="170" pos:column="22">(<argument><expr><name pos:line="170" pos:column="23">ph<pos:position pos:line="170" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="27">obj<pos:position pos:line="170" pos:column="30"/></name><operator pos:line="170" pos:column="30">-&gt;<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="32">ttl<pos:position pos:line="170" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="37"/></expr_stmt>

	<return pos:line="172" pos:column="9">return <expr><operator pos:line="172" pos:column="16">(<pos:position pos:line="172" pos:column="17"/></operator><literal type="number" pos:line="172" pos:column="17">0<pos:position pos:line="172" pos:column="18"/></literal><operator pos:line="172" pos:column="18">)<pos:position pos:line="172" pos:column="19"/></operator></expr>;<pos:position pos:line="172" pos:column="20"/></return>
}<pos:position pos:line="173" pos:column="2"/></block></function></unit>
