<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2014_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_init_python<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <block pos:line="1" pos:column="34">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">PyOS_sighandler_t<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">cur_sig<pos:position pos:line="2" pos:column="28"/></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">PyObject<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">sys<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">PyObject<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">module<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">IS_PY3K<pos:position pos:line="6" pos:column="15"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">wchar_t<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">argv<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="string" pos:line="7" pos:column="19">L""<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <comment type="block" pos:line="8" pos:column="3">/* Add a builtin module, before Py_Initialize */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">PyImport_AppendInittab<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><literal type="string" pos:line="9" pos:column="26">"collectd"<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="38">PyInit_collectd<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">argv<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><literal type="string" pos:line="11" pos:column="16">""<pos:position pos:line="11" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="14" pos:column="3">/* Chances are the current signal handler is already SIG_DFL, but let's make
   * sure. */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">cur_sig<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <call><name pos:line="16" pos:column="13">PyOS_setsig<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">SIGINT<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">SIG_DFL<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">Py_Initialize<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">()<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">python_sigint_handler<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <call><name pos:line="18" pos:column="27">PyOS_setsig<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">SIGINT<pos:position pos:line="18" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">cur_sig<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="20" pos:column="3">PyType_Ready<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="17">ConfigType<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">PyType_Ready<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="17">PluginDataType<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">ValuesType<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">.<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">tp_base<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">PluginDataType<pos:position pos:line="22" pos:column="39"/></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">PyType_Ready<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">&amp;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="17">ValuesType<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">NotificationType<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">tp_base<pos:position pos:line="24" pos:column="27"/></name></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <operator pos:line="24" pos:column="30">&amp;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="31">PluginDataType<pos:position pos:line="24" pos:column="45"/></name></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">PyType_Ready<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><operator pos:line="25" pos:column="16">&amp;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="17">NotificationType<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">SignedType<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">tp_base<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <operator pos:line="26" pos:column="24">&amp;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="25">PyLong_Type<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">PyType_Ready<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><operator pos:line="27" pos:column="16">&amp;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="17">SignedType<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">UnsignedType<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">tp_base<pos:position pos:line="28" pos:column="23"/></name></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <operator pos:line="28" pos:column="26">&amp;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="27">PyLong_Type<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">PyType_Ready<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><operator pos:line="29" pos:column="16">&amp;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="17">UnsignedType<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">sys<pos:position pos:line="30" pos:column="6"/></name> <operator pos:line="30" pos:column="7">=<pos:position pos:line="30" pos:column="8"/></operator> <call><name pos:line="30" pos:column="9">PyImport_ImportModule<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><literal type="string" pos:line="30" pos:column="31">"sys"<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt> <comment type="block" pos:line="30" pos:column="39">/* New reference. */</comment>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">sys<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">==<pos:position pos:line="31" pos:column="13"/></operator> <name pos:line="31" pos:column="14">NULL<pos:position pos:line="31" pos:column="18"/></name></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19"> <block pos:line="31" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">cpy_log_exception<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><literal type="string" pos:line="32" pos:column="23">"python initialization"<pos:position pos:line="32" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><literal type="number" pos:line="33" pos:column="12">1<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="35" pos:column="3">sys_path<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">PyObject_GetAttrString<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">sys<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="42">"path"<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt> <comment type="block" pos:line="35" pos:column="51">/* New reference. */</comment>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">Py_DECREF<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">sys<pos:position pos:line="36" pos:column="16"/></name></expr></argument>)<pos:position pos:line="36" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">sys_path<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">==<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">NULL<pos:position pos:line="37" pos:column="23"/></name></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24"> <block pos:line="37" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">cpy_log_exception<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><literal type="string" pos:line="38" pos:column="23">"python initialization"<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><literal type="number" pos:line="39" pos:column="12">1<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">PySys_SetArgv<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><literal type="number" pos:line="41" pos:column="17">1<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="20">&amp;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="21">argv<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">PyList_SetSlice<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">sys_path<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="29">0<pos:position pos:line="42" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="32">1<pos:position pos:line="42" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="35">NULL<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>

<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">IS_PY3K<pos:position pos:line="44" pos:column="15"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="45" pos:column="3">module<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <call><name pos:line="45" pos:column="12">PyImport_ImportModule<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><literal type="string" pos:line="45" pos:column="34">"collectd"<pos:position pos:line="45" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>
<cpp:else pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">else<pos:position pos:line="46" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="47" pos:column="3">module<pos:position pos:line="47" pos:column="9"/></name> <operator pos:line="47" pos:column="10">=<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">Py_InitModule<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><literal type="string" pos:line="47" pos:column="26">"collectd"<pos:position pos:line="47" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="38">cpy_methods<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt> <comment type="block" pos:line="47" pos:column="52">/* Borrowed reference. */</comment>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">PyModule_AddObject<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">module<pos:position pos:line="49" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="30">"Config"<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="50" pos:column="22">(<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">void<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">*<pos:position pos:line="50" pos:column="29"/></operator><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator><operator pos:line="50" pos:column="30">&amp;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="31">ConfigType<pos:position pos:line="50" pos:column="41"/></name></expr></argument>)<pos:position pos:line="50" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt> <comment type="block" pos:line="50" pos:column="44">/* Steals a reference. */</comment>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">PyModule_AddObject<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">module<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="30">"Values"<pos:position pos:line="51" pos:column="38"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="52" pos:column="22">(<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">void<pos:position pos:line="52" pos:column="27"/></name> <operator pos:line="52" pos:column="28">*<pos:position pos:line="52" pos:column="29"/></operator><operator pos:line="52" pos:column="29">)<pos:position pos:line="52" pos:column="30"/></operator><operator pos:line="52" pos:column="30">&amp;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="31">ValuesType<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt> <comment type="block" pos:line="52" pos:column="44">/* Steals a reference. */</comment>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">PyModule_AddObject<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">module<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="30">"Notification"<pos:position pos:line="53" pos:column="44"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="54" pos:column="22">(<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">void<pos:position pos:line="54" pos:column="27"/></name> <operator pos:line="54" pos:column="28">*<pos:position pos:line="54" pos:column="29"/></operator><operator pos:line="54" pos:column="29">)<pos:position pos:line="54" pos:column="30"/></operator><operator pos:line="54" pos:column="30">&amp;<pos:position pos:line="54" pos:column="35"/></operator><name pos:line="54" pos:column="31">NotificationType<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt> <comment type="block" pos:line="54" pos:column="50">/* Steals a reference. */</comment>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">PyModule_AddObject<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">module<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="30">"Signed"<pos:position pos:line="55" pos:column="38"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="56" pos:column="22">(<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">void<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">*<pos:position pos:line="56" pos:column="29"/></operator><operator pos:line="56" pos:column="29">)<pos:position pos:line="56" pos:column="30"/></operator><operator pos:line="56" pos:column="30">&amp;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="31">SignedType<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt> <comment type="block" pos:line="56" pos:column="44">/* Steals a reference. */</comment>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">PyModule_AddObject<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">module<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="30">"Unsigned"<pos:position pos:line="57" pos:column="40"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="58" pos:column="22">(<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">void<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">*<pos:position pos:line="58" pos:column="29"/></operator><operator pos:line="58" pos:column="29">)<pos:position pos:line="58" pos:column="30"/></operator><operator pos:line="58" pos:column="30">&amp;<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="31">UnsignedType<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt> <comment type="block" pos:line="58" pos:column="46">/* Steals a reference. */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">module<pos:position pos:line="59" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="35">"LOG_DEBUG"<pos:position pos:line="59" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="48">LOG_DEBUG<pos:position pos:line="59" pos:column="57"/></name></expr></argument>)<pos:position pos:line="59" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">module<pos:position pos:line="60" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="35">"LOG_INFO"<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">LOG_INFO<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">module<pos:position pos:line="61" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="35">"LOG_NOTICE"<pos:position pos:line="61" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="49">LOG_NOTICE<pos:position pos:line="61" pos:column="59"/></name></expr></argument>)<pos:position pos:line="61" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">module<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="35">"LOG_WARNING"<pos:position pos:line="62" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="50">LOG_WARNING<pos:position pos:line="62" pos:column="61"/></name></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">module<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="35">"LOG_ERROR"<pos:position pos:line="63" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="48">LOG_ERR<pos:position pos:line="63" pos:column="55"/></name></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">module<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="35">"NOTIF_FAILURE"<pos:position pos:line="64" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">NOTIF_FAILURE<pos:position pos:line="64" pos:column="65"/></name></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="65" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><name pos:line="65" pos:column="27">module<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="35">"NOTIF_WARNING"<pos:position pos:line="65" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="52">NOTIF_WARNING<pos:position pos:line="65" pos:column="65"/></name></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">PyModule_AddIntConstant<pos:position pos:line="66" pos:column="26"/></name><argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">module<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="35">"NOTIF_OKAY"<pos:position pos:line="66" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="49">NOTIF_OKAY<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">PyModule_AddStringConstant<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">module<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="38">"DS_TYPE_COUNTER"<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>,
                             <argument><expr><call><name pos:line="68" pos:column="30">DS_TYPE_TO_STRING<pos:position pos:line="68" pos:column="47"/></name><argument_list pos:line="68" pos:column="47">(<argument><expr><name pos:line="68" pos:column="48">DS_TYPE_COUNTER<pos:position pos:line="68" pos:column="63"/></name></expr></argument>)<pos:position pos:line="68" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="69" pos:column="3">PyModule_AddStringConstant<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">module<pos:position pos:line="69" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="38">"DS_TYPE_GAUGE"<pos:position pos:line="69" pos:column="53"/></literal></expr></argument>,
                             <argument><expr><call><name pos:line="70" pos:column="30">DS_TYPE_TO_STRING<pos:position pos:line="70" pos:column="47"/></name><argument_list pos:line="70" pos:column="47">(<argument><expr><name pos:line="70" pos:column="48">DS_TYPE_GAUGE<pos:position pos:line="70" pos:column="61"/></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">PyModule_AddStringConstant<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><name pos:line="71" pos:column="30">module<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="38">"DS_TYPE_DERIVE"<pos:position pos:line="71" pos:column="54"/></literal></expr></argument>,
                             <argument><expr><call><name pos:line="72" pos:column="30">DS_TYPE_TO_STRING<pos:position pos:line="72" pos:column="47"/></name><argument_list pos:line="72" pos:column="47">(<argument><expr><name pos:line="72" pos:column="48">DS_TYPE_DERIVE<pos:position pos:line="72" pos:column="62"/></name></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="73" pos:column="3">PyModule_AddStringConstant<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">module<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="38">"DS_TYPE_ABSOLUTE"<pos:position pos:line="73" pos:column="56"/></literal></expr></argument>,
                             <argument><expr><call><name pos:line="74" pos:column="30">DS_TYPE_TO_STRING<pos:position pos:line="74" pos:column="47"/></name><argument_list pos:line="74" pos:column="47">(<argument><expr><name pos:line="74" pos:column="48">DS_TYPE_ABSOLUTE<pos:position pos:line="74" pos:column="64"/></name></expr></argument>)<pos:position pos:line="74" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="67"/></expr_stmt>
  <return pos:line="75" pos:column="3">return <expr><literal type="number" pos:line="75" pos:column="10">0<pos:position pos:line="75" pos:column="11"/></literal></expr>;<pos:position pos:line="75" pos:column="12"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
