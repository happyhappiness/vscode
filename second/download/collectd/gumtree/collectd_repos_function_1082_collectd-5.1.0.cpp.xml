<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1082_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">swap_read_io<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <comment type="block" pos:line="1" pos:column="32">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fh<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buffer<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">1024<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">_Bool<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">old_kernel<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint8_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">have_data<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">derive_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">swap_in<pos:position pos:line="9" pos:column="25"/></name>  <init pos:line="9" pos:column="27">= <expr><literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">derive_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">swap_out<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">fh<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">fopen<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"/proc/vmstat"<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="37">"r"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">fh<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">NULL<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24">
	<block pos:line="14" pos:column="9">{
		<comment type="block" pos:line="15" pos:column="17">/* /proc/vmstat does not exist in kernels &lt;2.6 */</comment>
		<expr_stmt><expr><name pos:line="16" pos:column="17">fh<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">fopen<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"/proc/stat"<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="43">"r"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">fh<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">NULL<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
		<block pos:line="18" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">char<pos:position pos:line="19" pos:column="29"/></name></type> <name><name pos:line="19" pos:column="30">errbuf<pos:position pos:line="19" pos:column="36"/></name><index pos:line="19" pos:column="36">[<expr><literal type="number" pos:line="19" pos:column="37">1024<pos:position pos:line="19" pos:column="41"/></literal></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">WARNING<pos:position pos:line="20" pos:column="32"/></name> <argument_list pos:line="20" pos:column="33">(<argument><expr><literal type="string" pos:line="20" pos:column="34">"swap: fopen: %s"<pos:position pos:line="20" pos:column="51"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="21" pos:column="41">sstrerror<pos:position pos:line="21" pos:column="50"/></name> <argument_list pos:line="21" pos:column="51">(<argument><expr><name pos:line="21" pos:column="52">errno<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="59">errbuf<pos:position pos:line="21" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="67">sizeof <argument_list pos:line="21" pos:column="74">(<argument><expr><name pos:line="21" pos:column="75">errbuf<pos:position pos:line="21" pos:column="81"/></name></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="85"/></expr_stmt>
			<return pos:line="22" pos:column="25">return <expr><operator pos:line="22" pos:column="32">(<pos:position pos:line="22" pos:column="33"/></operator><operator pos:line="22" pos:column="33">-<pos:position pos:line="22" pos:column="34"/></operator><literal type="number" pos:line="22" pos:column="34">1<pos:position pos:line="22" pos:column="35"/></literal><operator pos:line="22" pos:column="35">)<pos:position pos:line="22" pos:column="36"/></operator></expr>;<pos:position pos:line="22" pos:column="37"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="25">old_kernel<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <literal type="number" pos:line="25" pos:column="38">1<pos:position pos:line="25" pos:column="39"/></literal></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><call><name pos:line="28" pos:column="16">fgets<pos:position pos:line="28" pos:column="21"/></name> <argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">buffer<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="31">sizeof <argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">buffer<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">fh<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call> <operator pos:line="28" pos:column="52">!=<pos:position pos:line="28" pos:column="54"/></operator> <name pos:line="28" pos:column="55">NULL<pos:position pos:line="28" pos:column="59"/></name></expr>)<pos:position pos:line="28" pos:column="60"/></condition>
	<block pos:line="29" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">char<pos:position pos:line="30" pos:column="21"/></name> <modifier pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></modifier></type><name><name pos:line="30" pos:column="23">fields<pos:position pos:line="30" pos:column="29"/></name><index pos:line="30" pos:column="29">[<expr><literal type="number" pos:line="30" pos:column="30">8<pos:position pos:line="30" pos:column="31"/></literal></expr>]<pos:position pos:line="30" pos:column="32"/></index></name></decl>;<pos:position pos:line="30" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">int<pos:position pos:line="31" pos:column="20"/></name></type> <name pos:line="31" pos:column="21">numfields<pos:position pos:line="31" pos:column="30"/></name></decl>;<pos:position pos:line="31" pos:column="31"/></decl_stmt>

		<expr_stmt><expr><name pos:line="33" pos:column="17">numfields<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="29">strsplit<pos:position pos:line="33" pos:column="37"/></name> <argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">buffer<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="47">fields<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="55">STATIC_ARRAY_SIZE<pos:position pos:line="33" pos:column="72"/></name> <argument_list pos:line="33" pos:column="73">(<argument><expr><name pos:line="33" pos:column="74">fields<pos:position pos:line="33" pos:column="80"/></name></expr></argument>)<pos:position pos:line="33" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="83"/></expr_stmt>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">old_kernel<pos:position pos:line="35" pos:column="32"/></name></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33">
		<block pos:line="36" pos:column="17">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">numfields<pos:position pos:line="37" pos:column="38"/></name> <operator pos:line="37" pos:column="39">!=<pos:position pos:line="37" pos:column="41"/></operator> <literal type="number" pos:line="37" pos:column="42">2<pos:position pos:line="37" pos:column="43"/></literal></expr>)<pos:position pos:line="37" pos:column="44"/></condition><then pos:line="37" pos:column="44">
				<block type="pseudo"><continue pos:line="38" pos:column="33">continue;<pos:position pos:line="38" pos:column="42"/></continue></block></then></if>

			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><call><name pos:line="40" pos:column="29">strcasecmp<pos:position pos:line="40" pos:column="39"/></name> <argument_list pos:line="40" pos:column="40">(<argument><expr><literal type="string" pos:line="40" pos:column="41">"pswpin"<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="51">fields<pos:position pos:line="40" pos:column="57"/></name><index pos:line="40" pos:column="57">[<expr><literal type="number" pos:line="40" pos:column="58">0<pos:position pos:line="40" pos:column="59"/></literal></expr>]<pos:position pos:line="40" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call> <operator pos:line="40" pos:column="62">==<pos:position pos:line="40" pos:column="64"/></operator> <literal type="number" pos:line="40" pos:column="65">0<pos:position pos:line="40" pos:column="66"/></literal></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67">
			<block pos:line="41" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">strtoderive<pos:position pos:line="42" pos:column="44"/></name> <argument_list pos:line="42" pos:column="45">(<argument><expr><name><name pos:line="42" pos:column="46">fields<pos:position pos:line="42" pos:column="52"/></name><index pos:line="42" pos:column="52">[<expr><literal type="number" pos:line="42" pos:column="53">1<pos:position pos:line="42" pos:column="54"/></literal></expr>]<pos:position pos:line="42" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="57">&amp;<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="58">swap_in<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><name pos:line="43" pos:column="33">have_data<pos:position pos:line="43" pos:column="42"/></name> <operator pos:line="43" pos:column="43">|=<pos:position pos:line="43" pos:column="45"/></operator> <literal type="number" pos:line="43" pos:column="46">0x01<pos:position pos:line="43" pos:column="50"/></literal></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="44" pos:column="26"/></block></then>
			<elseif pos:line="45" pos:column="25">else <if pos:line="45" pos:column="30">if <condition pos:line="45" pos:column="33">(<expr><call><name pos:line="45" pos:column="34">strcasecmp<pos:position pos:line="45" pos:column="44"/></name> <argument_list pos:line="45" pos:column="45">(<argument><expr><literal type="string" pos:line="45" pos:column="46">"pswpout"<pos:position pos:line="45" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="57">fields<pos:position pos:line="45" pos:column="63"/></name><index pos:line="45" pos:column="63">[<expr><literal type="number" pos:line="45" pos:column="64">0<pos:position pos:line="45" pos:column="65"/></literal></expr>]<pos:position pos:line="45" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call> <operator pos:line="45" pos:column="68">==<pos:position pos:line="45" pos:column="70"/></operator> <literal type="number" pos:line="45" pos:column="71">0<pos:position pos:line="45" pos:column="72"/></literal></expr>)<pos:position pos:line="45" pos:column="73"/></condition><then pos:line="45" pos:column="73">
			<block pos:line="46" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="47" pos:column="33">strtoderive<pos:position pos:line="47" pos:column="44"/></name> <argument_list pos:line="47" pos:column="45">(<argument><expr><name><name pos:line="47" pos:column="46">fields<pos:position pos:line="47" pos:column="52"/></name><index pos:line="47" pos:column="52">[<expr><literal type="number" pos:line="47" pos:column="53">1<pos:position pos:line="47" pos:column="54"/></literal></expr>]<pos:position pos:line="47" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="57">&amp;<pos:position pos:line="47" pos:column="62"/></operator><name pos:line="47" pos:column="58">swap_out<pos:position pos:line="47" pos:column="66"/></name></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name pos:line="48" pos:column="33">have_data<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">|=<pos:position pos:line="48" pos:column="45"/></operator> <literal type="number" pos:line="48" pos:column="46">0x02<pos:position pos:line="48" pos:column="50"/></literal></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="50" pos:column="18"/></block></then>
		<else pos:line="51" pos:column="17">else <comment type="block" pos:line="51" pos:column="22">/* if (old_kernel) */</comment>
		<block pos:line="52" pos:column="17">{
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">numfields<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">!=<pos:position pos:line="53" pos:column="41"/></operator> <literal type="number" pos:line="53" pos:column="42">3<pos:position pos:line="53" pos:column="43"/></literal></expr>)<pos:position pos:line="53" pos:column="44"/></condition><then pos:line="53" pos:column="44">
				<block type="pseudo"><continue pos:line="54" pos:column="33">continue;<pos:position pos:line="54" pos:column="42"/></continue></block></then></if>

			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><call><name pos:line="56" pos:column="29">strcasecmp<pos:position pos:line="56" pos:column="39"/></name> <argument_list pos:line="56" pos:column="40">(<argument><expr><literal type="string" pos:line="56" pos:column="41">"page"<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="49">fields<pos:position pos:line="56" pos:column="55"/></name><index pos:line="56" pos:column="55">[<expr><literal type="number" pos:line="56" pos:column="56">0<pos:position pos:line="56" pos:column="57"/></literal></expr>]<pos:position pos:line="56" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="59"/></argument_list></call> <operator pos:line="56" pos:column="60">==<pos:position pos:line="56" pos:column="62"/></operator> <literal type="number" pos:line="56" pos:column="63">0<pos:position pos:line="56" pos:column="64"/></literal></expr>)<pos:position pos:line="56" pos:column="65"/></condition><then pos:line="56" pos:column="65">
			<block pos:line="57" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">strtoderive<pos:position pos:line="58" pos:column="44"/></name> <argument_list pos:line="58" pos:column="45">(<argument><expr><name><name pos:line="58" pos:column="46">fields<pos:position pos:line="58" pos:column="52"/></name><index pos:line="58" pos:column="52">[<expr><literal type="number" pos:line="58" pos:column="53">1<pos:position pos:line="58" pos:column="54"/></literal></expr>]<pos:position pos:line="58" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="57">&amp;<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="58">swap_in<pos:position pos:line="58" pos:column="65"/></name></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">strtoderive<pos:position pos:line="59" pos:column="44"/></name> <argument_list pos:line="59" pos:column="45">(<argument><expr><name><name pos:line="59" pos:column="46">fields<pos:position pos:line="59" pos:column="52"/></name><index pos:line="59" pos:column="52">[<expr><literal type="number" pos:line="59" pos:column="53">2<pos:position pos:line="59" pos:column="54"/></literal></expr>]<pos:position pos:line="59" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="57">&amp;<pos:position pos:line="59" pos:column="62"/></operator><name pos:line="59" pos:column="58">swap_out<pos:position pos:line="59" pos:column="66"/></name></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="60" pos:column="26"/></block></then></if>
		}<pos:position pos:line="61" pos:column="18"/></block></else></if>
	}<pos:position pos:line="62" pos:column="10"/></block></while> <comment type="block" pos:line="62" pos:column="11">/* while (fgets) */</comment>

	<expr_stmt><expr><call><name pos:line="64" pos:column="9">fclose<pos:position pos:line="64" pos:column="15"/></name> <argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">fh<pos:position pos:line="64" pos:column="19"/></name></expr></argument>)<pos:position pos:line="64" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">have_data<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">!=<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="26">0x03<pos:position pos:line="66" pos:column="30"/></literal></expr>)<pos:position pos:line="66" pos:column="31"/></condition><then pos:line="66" pos:column="31">
		<block type="pseudo"><return pos:line="67" pos:column="17">return <expr><operator pos:line="67" pos:column="24">(<pos:position pos:line="67" pos:column="25"/></operator><name pos:line="67" pos:column="25">ENOENT<pos:position pos:line="67" pos:column="31"/></name><operator pos:line="67" pos:column="31">)<pos:position pos:line="67" pos:column="32"/></operator></expr>;<pos:position pos:line="67" pos:column="33"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">swap_submit_derive<pos:position pos:line="69" pos:column="27"/></name> <argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">NULL<pos:position pos:line="69" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="35">"in"<pos:position pos:line="69" pos:column="39"/></literal></expr></argument>,  <argument><expr><name pos:line="69" pos:column="42">swap_in<pos:position pos:line="69" pos:column="49"/></name></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">swap_submit_derive<pos:position pos:line="70" pos:column="27"/></name> <argument_list pos:line="70" pos:column="28">(<argument><expr><name pos:line="70" pos:column="29">NULL<pos:position pos:line="70" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="35">"out"<pos:position pos:line="70" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="42">swap_out<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>

	<return pos:line="72" pos:column="9">return <expr><operator pos:line="72" pos:column="16">(<pos:position pos:line="72" pos:column="17"/></operator><literal type="number" pos:line="72" pos:column="17">0<pos:position pos:line="72" pos:column="18"/></literal><operator pos:line="72" pos:column="18">)<pos:position pos:line="72" pos:column="19"/></operator></expr>;<pos:position pos:line="72" pos:column="20"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
