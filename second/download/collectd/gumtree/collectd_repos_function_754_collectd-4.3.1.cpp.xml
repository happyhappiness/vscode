<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_754_collectd-4.3.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_pi<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">ip_vs_service_entry<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">se<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">pi<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">size<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">in_addr<pos:position pos:line="3" pos:column="23"/></name></name></type> <name pos:line="3" pos:column="24">addr<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">(<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">==<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">se<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">)<pos:position pos:line="6" pos:column="25"/></operator> <operator pos:line="6" pos:column="26">||<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">(<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">==<pos:position pos:line="6" pos:column="37"/></operator> <name pos:line="6" pos:column="38">pi<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">)<pos:position pos:line="6" pos:column="41"/></operator></expr>)<pos:position pos:line="6" pos:column="42"/></condition><then pos:line="6" pos:column="42">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="9" pos:column="9">addr<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">.<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">s_addr<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <name><name pos:line="9" pos:column="23">se<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">addr<pos:position pos:line="9" pos:column="31"/></name></name></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* inet_ntoa() returns a pointer to a statically allocated buffer
	 * I hope non-glibc systems behave the same */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">snprintf<pos:position pos:line="13" pos:column="23"/></name> <argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">pi<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">size<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="35">"%s_%s%u"<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="46">inet_ntoa<pos:position pos:line="13" pos:column="55"/></name> <argument_list pos:line="13" pos:column="56">(<argument><expr><name pos:line="13" pos:column="57">addr<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr></argument>,
			<argument><expr><ternary><condition><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><name><name pos:line="14" pos:column="26">se<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">protocol<pos:position pos:line="14" pos:column="38"/></name></name> <operator pos:line="14" pos:column="39">==<pos:position pos:line="14" pos:column="41"/></operator> <name pos:line="14" pos:column="42">IPPROTO_TCP<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">)<pos:position pos:line="14" pos:column="54"/></operator></expr> ?<pos:position pos:line="14" pos:column="56"/></condition><then pos:line="14" pos:column="56"> <expr><literal type="string" pos:line="14" pos:column="57">"TCP"<pos:position pos:line="14" pos:column="62"/></literal></expr> <pos:position pos:line="14" pos:column="63"/></then><else pos:line="14" pos:column="63">: <expr><literal type="string" pos:line="14" pos:column="65">"UDP"<pos:position pos:line="14" pos:column="70"/></literal></expr></else></ternary></expr></argument>,
			<argument><expr><call><name pos:line="15" pos:column="25">ntohs<pos:position pos:line="15" pos:column="30"/></name> <argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">se<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">-&gt;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="36">port<pos:position pos:line="15" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><literal type="number" pos:line="17" pos:column="14">0<pos:position pos:line="17" pos:column="15"/></literal> <operator pos:line="17" pos:column="16">&gt;<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="18">len<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">)<pos:position pos:line="17" pos:column="22"/></operator> <operator pos:line="17" pos:column="23">||<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">(<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">size<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">&lt;=<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="35">len<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">)<pos:position pos:line="17" pos:column="39"/></operator></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40"> <block pos:line="17" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">log_err<pos:position pos:line="18" pos:column="24"/></name> <argument_list pos:line="18" pos:column="25">(<argument><expr><literal type="string" pos:line="18" pos:column="26">"plugin instance truncated: %s"<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="59">pi<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">-<pos:position pos:line="19" pos:column="25"/></operator><literal type="number" pos:line="19" pos:column="25">1<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
