<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1457_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_send<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">riemann_host<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">host<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">Msg<pos:position pos:line="1" pos:column="55"/></name> <specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">msg<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <comment type="block" pos:line="1" pos:column="68">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">pthread_mutex_lock<pos:position pos:line="4" pos:column="27"/></name> <argument_list pos:line="4" pos:column="28">(<argument><expr><operator pos:line="4" pos:column="29">&amp;<pos:position pos:line="4" pos:column="34"/></operator><name><name pos:line="4" pos:column="30">host<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">-&gt;<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="36">lock<pos:position pos:line="4" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">status<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <call><name pos:line="6" pos:column="18">riemann_send_msg<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">host<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">msg<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">!=<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">riemann_disconnect<pos:position pos:line="8" pos:column="35"/></name> <argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">host<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">pthread_mutex_unlock<pos:position pos:line="9" pos:column="37"/></name> <argument_list pos:line="9" pos:column="38">(<argument><expr><operator pos:line="9" pos:column="39">&amp;<pos:position pos:line="9" pos:column="44"/></operator><name><name pos:line="9" pos:column="40">host<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">-&gt;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="46">lock<pos:position pos:line="9" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">status<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * For TCP we need to receive message acknowledgemenent.
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">host<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">use_tcp<pos:position pos:line="16" pos:column="26"/></name></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27">
	<block pos:line="17" pos:column="9">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">status<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">riemann_recv_ack<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">host<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">status<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">!=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
		<block pos:line="21" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">riemann_disconnect<pos:position pos:line="22" pos:column="43"/></name> <argument_list pos:line="22" pos:column="44">(<argument><expr><name pos:line="22" pos:column="45">host<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">pthread_mutex_unlock<pos:position pos:line="23" pos:column="45"/></name> <argument_list pos:line="23" pos:column="46">(<argument><expr><operator pos:line="23" pos:column="47">&amp;<pos:position pos:line="23" pos:column="52"/></operator><name><name pos:line="23" pos:column="48">host<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">-&gt;<pos:position pos:line="23" pos:column="57"/></operator><name pos:line="23" pos:column="54">lock<pos:position pos:line="23" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><name pos:line="24" pos:column="32">status<pos:position pos:line="24" pos:column="38"/></name></expr>;<pos:position pos:line="24" pos:column="39"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">pthread_mutex_unlock<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name><name pos:line="28" pos:column="32">host<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">lock<pos:position pos:line="28" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
	<return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
