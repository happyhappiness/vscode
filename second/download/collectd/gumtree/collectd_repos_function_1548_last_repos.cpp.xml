<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1548_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">prom_open_socket<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">addrfamily<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <comment type="block" pos:line="2" pos:column="3">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">service<pos:position pos:line="3" pos:column="15"/></name><index pos:line="3" pos:column="15">[<expr><name pos:line="3" pos:column="16">NI_MAXSERV<pos:position pos:line="3" pos:column="26"/></name></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">snprintf<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">service<pos:position pos:line="4" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="21">sizeof<argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">service<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="38">"%hu"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="45">httpd_port<pos:position pos:line="4" pos:column="55"/></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">res<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><call><name pos:line="7" pos:column="16">getaddrinfo<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">service<pos:position pos:line="7" pos:column="41"/></name></expr></argument>,
                           <argument><expr><operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="29">(<pos:position pos:line="8" pos:column="30"/></operator>struct <name pos:line="8" pos:column="37">addrinfo<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">)<pos:position pos:line="8" pos:column="46"/></operator><block pos:line="8" pos:column="46">{
                               <expr><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">ai_flags<pos:position pos:line="9" pos:column="41"/></name> <operator pos:line="9" pos:column="42">=<pos:position pos:line="9" pos:column="43"/></operator> <name pos:line="9" pos:column="44">AI_PASSIVE<pos:position pos:line="9" pos:column="54"/></name> <operator pos:line="9" pos:column="55">|<pos:position pos:line="9" pos:column="56"/></operator> <name pos:line="9" pos:column="57">AI_ADDRCONFIG<pos:position pos:line="9" pos:column="70"/></name></expr>,
                               <expr><operator pos:line="10" pos:column="32">.<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">ai_family<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">=<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="45">addrfamily<pos:position pos:line="10" pos:column="55"/></name></expr>,
                               <expr><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">ai_socktype<pos:position pos:line="11" pos:column="44"/></name> <operator pos:line="11" pos:column="45">=<pos:position pos:line="11" pos:column="46"/></operator> <name pos:line="11" pos:column="47">SOCK_STREAM<pos:position pos:line="11" pos:column="58"/></name></expr>,
                           }<pos:position pos:line="12" pos:column="29"/></block></expr></argument>,
                           <argument><expr><operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="29">res<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">fd<pos:position pos:line="18" pos:column="9"/></name> <init pos:line="18" pos:column="10">= <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>
  <for pos:line="19" pos:column="3">for <control pos:line="19" pos:column="7">(<init><decl><type><name><name pos:line="19" pos:column="8">struct<pos:position pos:line="19" pos:column="14"/></name> <name pos:line="19" pos:column="15">addrinfo<pos:position pos:line="19" pos:column="23"/></name></name> <modifier pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></modifier><name pos:line="19" pos:column="25">ai<pos:position pos:line="19" pos:column="27"/></name></type> <init pos:line="19" pos:column="28">= <expr><name pos:line="19" pos:column="30">res<pos:position pos:line="19" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="34"/></init> <condition><expr><name pos:line="19" pos:column="35">ai<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">!=<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="41">NULL<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></condition> <incr><expr><name pos:line="19" pos:column="47">ai<pos:position pos:line="19" pos:column="49"/></name> <operator pos:line="19" pos:column="50">=<pos:position pos:line="19" pos:column="51"/></operator> <name><name pos:line="19" pos:column="52">ai<pos:position pos:line="19" pos:column="54"/></name><operator pos:line="19" pos:column="54">-&gt;<pos:position pos:line="19" pos:column="59"/></operator><name pos:line="19" pos:column="56">ai_next<pos:position pos:line="19" pos:column="63"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="64"/></control> <block pos:line="19" pos:column="65">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">fd<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <call><name pos:line="20" pos:column="10">socket<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name><name pos:line="20" pos:column="17">ai<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">ai_family<pos:position pos:line="20" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="32">ai<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">ai_socktype<pos:position pos:line="20" pos:column="47"/></name></name> <operator pos:line="20" pos:column="48">|<pos:position pos:line="20" pos:column="49"/></operator> <name pos:line="20" pos:column="50">SOCK_CLOEXEC<pos:position pos:line="20" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="64">0<pos:position pos:line="20" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">fd<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">==<pos:position pos:line="21" pos:column="14"/></operator> <operator pos:line="21" pos:column="15">-<pos:position pos:line="21" pos:column="16"/></operator><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18">
      <block type="pseudo"><continue pos:line="22" pos:column="7">continue;<pos:position pos:line="22" pos:column="16"/></continue></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name pos:line="24" pos:column="9">bind<pos:position pos:line="24" pos:column="13"/></name><argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">fd<pos:position pos:line="24" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="18">ai<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">ai_addr<pos:position pos:line="24" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="31">ai<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">ai_addrlen<pos:position pos:line="24" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call> <operator pos:line="24" pos:column="47">!=<pos:position pos:line="24" pos:column="49"/></operator> <literal type="number" pos:line="24" pos:column="50">0<pos:position pos:line="24" pos:column="51"/></literal></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52"> <block pos:line="24" pos:column="53">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">close<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">fd<pos:position pos:line="25" pos:column="15"/></name></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">fd<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <operator pos:line="26" pos:column="12">-<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">1<pos:position pos:line="26" pos:column="14"/></literal></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt>
      <continue pos:line="27" pos:column="7">continue;<pos:position pos:line="27" pos:column="16"/></continue>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">listen<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">fd<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <comment type="block" pos:line="30" pos:column="20">/* backlog = */</comment> <argument><expr><literal type="number" pos:line="30" pos:column="36">16<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call> <operator pos:line="30" pos:column="40">!=<pos:position pos:line="30" pos:column="42"/></operator> <literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45"> <block pos:line="30" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">close<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">fd<pos:position pos:line="31" pos:column="15"/></name></expr></argument>)<pos:position pos:line="31" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="32" pos:column="7">fd<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">=<pos:position pos:line="32" pos:column="11"/></operator> <operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
      <continue pos:line="33" pos:column="7">continue;<pos:position pos:line="33" pos:column="16"/></continue>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <break pos:line="36" pos:column="5">break;<pos:position pos:line="36" pos:column="11"/></break>
  }<pos:position pos:line="37" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="39" pos:column="3">freeaddrinfo<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">res<pos:position pos:line="39" pos:column="19"/></name></expr></argument>)<pos:position pos:line="39" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>

  <return pos:line="41" pos:column="3">return <expr><name pos:line="41" pos:column="10">fd<pos:position pos:line="41" pos:column="12"/></name></expr>;<pos:position pos:line="41" pos:column="13"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
