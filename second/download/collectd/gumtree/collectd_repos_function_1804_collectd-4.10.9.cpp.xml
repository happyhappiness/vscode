<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1804_collectd-4.10.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lcc_sendreceive<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">lcc_connection_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">c<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">command<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">lcc_response_t<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">ret_res<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">lcc_response_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">res<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">c<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">-&gt;<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="10">fh<pos:position pos:line="7" pos:column="12"/></name></name> <operator pos:line="7" pos:column="13">==<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>)<pos:position pos:line="7" pos:column="21"/></condition><then pos:line="7" pos:column="21">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">lcc_set_errno<pos:position pos:line="9" pos:column="18"/></name> <argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">c<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">EBADF<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator></expr>;<pos:position pos:line="10" pos:column="17"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">status<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">lcc_send<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">c<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">command<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">memset<pos:position pos:line="17" pos:column="9"/></name> <argument_list pos:line="17" pos:column="10">(<argument><expr><operator pos:line="17" pos:column="11">&amp;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="12">res<pos:position pos:line="17" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="20">sizeof <argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">res<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">status<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">lcc_receive<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">c<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="28">&amp;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="29">res<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">status<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">==<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">memcpy<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">ret_res<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">res<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="28">sizeof <argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">ret_res<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt></block></then></if>

  <return pos:line="22" pos:column="3">return <expr><operator pos:line="22" pos:column="10">(<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">status<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">)<pos:position pos:line="22" pos:column="18"/></operator></expr>;<pos:position pos:line="22" pos:column="19"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
