<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_422_collectd-4.0.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">rrd_cache_flush<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">timeout<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">rrd_cache_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">rc<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">time_t<pos:position pos:line="4" pos:column="15"/></name></type>       <name pos:line="4" pos:column="22">now<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier><modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">keys<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type>    <name pos:line="7" pos:column="16">keys_num<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">key<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">avl_iterator_t<pos:position pos:line="10" pos:column="23"/></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">iter<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">cache<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">==<pos:position pos:line="13" pos:column="21"/></operator> <name pos:line="13" pos:column="22">NULL<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
		<block type="pseudo"><return pos:line="14" pos:column="17">return;<pos:position pos:line="14" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">DEBUG<pos:position pos:line="16" pos:column="14"/></name> <argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"Flushing cache, timeout = %i"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="48">timeout<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">now<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">time<pos:position pos:line="18" pos:column="19"/></name> <argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">NULL<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="20" pos:column="9">/* Build a list of entries to be flushed */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">iter<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">avl_get_iterator<pos:position pos:line="21" pos:column="32"/></name> <argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">cache<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><call><name pos:line="22" pos:column="16">avl_iterator_next<pos:position pos:line="22" pos:column="33"/></name> <argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">iter<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="41">(<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="42">void<pos:position pos:line="22" pos:column="46"/></name> <operator pos:line="22" pos:column="47">*<pos:position pos:line="22" pos:column="48"/></operator><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator> <operator pos:line="22" pos:column="50">&amp;<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="51">key<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="56">(<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="57">void<pos:position pos:line="22" pos:column="61"/></name> <operator pos:line="22" pos:column="62">*<pos:position pos:line="22" pos:column="63"/></operator><operator pos:line="22" pos:column="63">)<pos:position pos:line="22" pos:column="64"/></operator> <operator pos:line="22" pos:column="65">&amp;<pos:position pos:line="22" pos:column="70"/></operator><name pos:line="22" pos:column="66">rc<pos:position pos:line="22" pos:column="68"/></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call> <operator pos:line="22" pos:column="70">==<pos:position pos:line="22" pos:column="72"/></operator> <literal type="number" pos:line="22" pos:column="73">0<pos:position pos:line="22" pos:column="74"/></literal></expr>)<pos:position pos:line="22" pos:column="75"/></condition>
	<block pos:line="23" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">DEBUG<pos:position pos:line="24" pos:column="22"/></name> <argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">"key = %s; age = %i;"<pos:position pos:line="24" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">key<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">now<pos:position pos:line="24" pos:column="55"/></name> <operator pos:line="24" pos:column="56">-<pos:position pos:line="24" pos:column="57"/></operator> <name><name pos:line="24" pos:column="58">rc<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">-&gt;<pos:position pos:line="24" pos:column="65"/></operator><name pos:line="24" pos:column="62">first_value<pos:position pos:line="24" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="75"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">(<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">now<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">-<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="28">rc<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">first_value<pos:position pos:line="25" pos:column="43"/></name></name><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator> <operator pos:line="25" pos:column="45">&gt;=<pos:position pos:line="25" pos:column="50"/></operator> <name pos:line="25" pos:column="48">timeout<pos:position pos:line="25" pos:column="55"/></name></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56">
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">keys<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <operator pos:line="27" pos:column="32">(<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">char<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">*<pos:position pos:line="27" pos:column="39"/></operator><operator pos:line="27" pos:column="39">*<pos:position pos:line="27" pos:column="40"/></operator><operator pos:line="27" pos:column="40">)<pos:position pos:line="27" pos:column="41"/></operator> <call><name pos:line="27" pos:column="42">realloc<pos:position pos:line="27" pos:column="49"/></name> <argument_list pos:line="27" pos:column="50">(<argument><expr><operator pos:line="27" pos:column="51">(<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="52">void<pos:position pos:line="27" pos:column="56"/></name> <operator pos:line="27" pos:column="57">*<pos:position pos:line="27" pos:column="58"/></operator><operator pos:line="27" pos:column="58">)<pos:position pos:line="27" pos:column="59"/></operator> <name pos:line="27" pos:column="60">keys<pos:position pos:line="27" pos:column="64"/></name></expr></argument>,
					<argument><expr><operator pos:line="28" pos:column="41">(<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">keys_num<pos:position pos:line="28" pos:column="50"/></name> <operator pos:line="28" pos:column="51">+<pos:position pos:line="28" pos:column="52"/></operator> <literal type="number" pos:line="28" pos:column="53">1<pos:position pos:line="28" pos:column="54"/></literal><operator pos:line="28" pos:column="54">)<pos:position pos:line="28" pos:column="55"/></operator> <operator pos:line="28" pos:column="56">*<pos:position pos:line="28" pos:column="57"/></operator> <sizeof pos:line="28" pos:column="58">sizeof <argument_list pos:line="28" pos:column="65">(<argument><expr><name pos:line="28" pos:column="66">char<pos:position pos:line="28" pos:column="70"/></name> <operator pos:line="28" pos:column="71">*<pos:position pos:line="28" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="75"/></expr_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">keys<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">==<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">NULL<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42">
			<block pos:line="30" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="31" pos:column="33">char<pos:position pos:line="31" pos:column="37"/></name></type> <name><name pos:line="31" pos:column="38">errbuf<pos:position pos:line="31" pos:column="44"/></name><index pos:line="31" pos:column="44">[<expr><literal type="number" pos:line="31" pos:column="45">1024<pos:position pos:line="31" pos:column="49"/></literal></expr>]<pos:position pos:line="31" pos:column="50"/></index></name></decl>;<pos:position pos:line="31" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">ERROR<pos:position pos:line="32" pos:column="38"/></name> <argument_list pos:line="32" pos:column="39">(<argument><expr><literal type="string" pos:line="32" pos:column="40">"rrdtool plugin: "<pos:position pos:line="32" pos:column="58"/></literal>
						<literal type="string" pos:line="33" pos:column="49">"realloc failed: %s"<pos:position pos:line="33" pos:column="69"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="34" pos:column="49">sstrerror<pos:position pos:line="34" pos:column="58"/></name> <argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">errno<pos:position pos:line="34" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="67">errbuf<pos:position pos:line="34" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="35" pos:column="57">sizeof <argument_list pos:line="35" pos:column="64">(<argument><expr><name pos:line="35" pos:column="65">errbuf<pos:position pos:line="35" pos:column="71"/></name></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">avl_iterator_destroy<pos:position pos:line="36" pos:column="53"/></name> <argument_list pos:line="36" pos:column="54">(<argument><expr><name pos:line="36" pos:column="55">iter<pos:position pos:line="36" pos:column="59"/></name></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt>
				<return pos:line="37" pos:column="33">return;<pos:position pos:line="37" pos:column="40"/></return>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="39" pos:column="25">keys<pos:position pos:line="39" pos:column="29"/></name><index pos:line="39" pos:column="29">[<expr><name pos:line="39" pos:column="30">keys_num<pos:position pos:line="39" pos:column="38"/></name></expr>]<pos:position pos:line="39" pos:column="39"/></index></name> <operator pos:line="39" pos:column="40">=<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="42">key<pos:position pos:line="39" pos:column="45"/></name></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">keys_num<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">++<pos:position pos:line="40" pos:column="35"/></operator></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></while> <comment type="block" pos:line="42" pos:column="11">/* while (avl_iterator_next) */</comment>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">avl_iterator_destroy<pos:position pos:line="43" pos:column="29"/></name> <argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">iter<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
	
	<for pos:line="45" pos:column="9">for <control pos:line="45" pos:column="13">(<init><expr><name pos:line="45" pos:column="14">i<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <literal type="number" pos:line="45" pos:column="18">0<pos:position pos:line="45" pos:column="19"/></literal></expr>;<pos:position pos:line="45" pos:column="20"/></init> <condition><expr><name pos:line="45" pos:column="21">i<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">&lt;<pos:position pos:line="45" pos:column="27"/></operator> <name pos:line="45" pos:column="25">keys_num<pos:position pos:line="45" pos:column="33"/></name></expr>;<pos:position pos:line="45" pos:column="34"/></condition> <incr><expr><name pos:line="45" pos:column="35">i<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">++<pos:position pos:line="45" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="45" pos:column="39"/></control>
	<block pos:line="46" pos:column="9">{
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">avl_remove<pos:position pos:line="47" pos:column="31"/></name> <argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">cache<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="40">keys<pos:position pos:line="47" pos:column="44"/></name><index pos:line="47" pos:column="44">[<expr><name pos:line="47" pos:column="45">i<pos:position pos:line="47" pos:column="46"/></name></expr>]<pos:position pos:line="47" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="49">(<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="50">void<pos:position pos:line="47" pos:column="54"/></name> <operator pos:line="47" pos:column="55">*<pos:position pos:line="47" pos:column="56"/></operator><operator pos:line="47" pos:column="56">)<pos:position pos:line="47" pos:column="57"/></operator> <operator pos:line="47" pos:column="58">&amp;<pos:position pos:line="47" pos:column="63"/></operator><name pos:line="47" pos:column="59">key<pos:position pos:line="47" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="64">(<pos:position pos:line="47" pos:column="65"/></operator><name pos:line="47" pos:column="65">void<pos:position pos:line="47" pos:column="69"/></name> <operator pos:line="47" pos:column="70">*<pos:position pos:line="47" pos:column="71"/></operator><operator pos:line="47" pos:column="71">)<pos:position pos:line="47" pos:column="72"/></operator> <operator pos:line="47" pos:column="73">&amp;<pos:position pos:line="47" pos:column="78"/></operator><name pos:line="47" pos:column="74">rc<pos:position pos:line="47" pos:column="76"/></name></expr></argument>)<pos:position pos:line="47" pos:column="77"/></argument_list></call> <operator pos:line="47" pos:column="78">!=<pos:position pos:line="47" pos:column="80"/></operator> <literal type="number" pos:line="47" pos:column="81">0<pos:position pos:line="47" pos:column="82"/></literal></expr>)<pos:position pos:line="47" pos:column="83"/></condition><then pos:line="47" pos:column="83">
		<block pos:line="48" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">DEBUG<pos:position pos:line="49" pos:column="30"/></name> <argument_list pos:line="49" pos:column="31">(<argument><expr><literal type="string" pos:line="49" pos:column="32">"avl_remove (%s) failed."<pos:position pos:line="49" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="59">keys<pos:position pos:line="49" pos:column="63"/></name><index pos:line="49" pos:column="63">[<expr><name pos:line="49" pos:column="64">i<pos:position pos:line="49" pos:column="65"/></name></expr>]<pos:position pos:line="49" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="68"/></expr_stmt>
			<continue pos:line="50" pos:column="25">continue;<pos:position pos:line="50" pos:column="34"/></continue>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="53" pos:column="17">rrd_write_cache_entry<pos:position pos:line="53" pos:column="38"/></name> <argument_list pos:line="53" pos:column="39">(<argument><expr><name><name pos:line="53" pos:column="40">keys<pos:position pos:line="53" pos:column="44"/></name><index pos:line="53" pos:column="44">[<expr><name pos:line="53" pos:column="45">i<pos:position pos:line="53" pos:column="46"/></name></expr>]<pos:position pos:line="53" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="49">rc<pos:position pos:line="53" pos:column="51"/></name></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="53"/></expr_stmt>
		<comment type="block" pos:line="54" pos:column="17">/* rc's value-list is free's by `rrd_write_cache_entry' */</comment>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">sfree<pos:position pos:line="55" pos:column="22"/></name> <argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">rc<pos:position pos:line="55" pos:column="26"/></name></expr></argument>)<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">sfree<pos:position pos:line="56" pos:column="22"/></name> <argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">key<pos:position pos:line="56" pos:column="27"/></name></expr></argument>)<pos:position pos:line="56" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">keys<pos:position pos:line="57" pos:column="21"/></name><index pos:line="57" pos:column="21">[<expr><name pos:line="57" pos:column="22">i<pos:position pos:line="57" pos:column="23"/></name></expr>]<pos:position pos:line="57" pos:column="24"/></index></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <name pos:line="57" pos:column="27">NULL<pos:position pos:line="57" pos:column="31"/></name></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></for> <comment type="block" pos:line="58" pos:column="11">/* for (i = 0..keys_num) */</comment>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">free<pos:position pos:line="60" pos:column="13"/></name> <argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">keys<pos:position pos:line="60" pos:column="19"/></name></expr></argument>)<pos:position pos:line="60" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">DEBUG<pos:position pos:line="61" pos:column="14"/></name> <argument_list pos:line="61" pos:column="15">(<argument><expr><literal type="string" pos:line="61" pos:column="16">"Flushed %i value(s)"<pos:position pos:line="61" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="39">keys_num<pos:position pos:line="61" pos:column="47"/></name></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name pos:line="63" pos:column="9">cache_flush_last<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">now<pos:position pos:line="63" pos:column="31"/></name></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
