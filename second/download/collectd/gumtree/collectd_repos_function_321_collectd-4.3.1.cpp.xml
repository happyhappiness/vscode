<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_321_collectd-4.3.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">in6_addr_from_buffer<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">in6_addr<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">ia<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
	<parameter><decl><type><specifier pos:line="2" pos:column="9">const<pos:position pos:line="2" pos:column="14"/></specifier> <name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">buf<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">buf_len<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">family<pos:position pos:line="3" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="20"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">memset<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">ia<pos:position pos:line="5" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="20">sizeof <argument_list pos:line="5" pos:column="27">(<argument><expr pos:line="5" pos:column="28">struct <name pos:line="5" pos:column="35">in6_addr<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">AF_INET<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">family<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">&amp;&amp;<pos:position pos:line="6" pos:column="39"/></operator> <operator pos:line="6" pos:column="32">(<pos:position pos:line="6" pos:column="33"/></operator><sizeof pos:line="6" pos:column="33">sizeof <argument_list pos:line="6" pos:column="40">(<argument><expr><name pos:line="6" pos:column="41">uint32_t<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></sizeof> <operator pos:line="6" pos:column="51">==<pos:position pos:line="6" pos:column="53"/></operator> <name pos:line="6" pos:column="54">buf_len<pos:position pos:line="6" pos:column="61"/></name><operator pos:line="6" pos:column="61">)<pos:position pos:line="6" pos:column="62"/></operator></expr>)<pos:position pos:line="6" pos:column="63"/></condition><then pos:line="6" pos:column="63">
    <block pos:line="7" pos:column="5">{
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">ia<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">s6_addr<pos:position pos:line="8" pos:column="20"/></name><index pos:line="8" pos:column="20">[<expr><literal type="number" pos:line="8" pos:column="21">10<pos:position pos:line="8" pos:column="23"/></literal></expr>]<pos:position pos:line="8" pos:column="24"/></index></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="27">0xFF<pos:position pos:line="8" pos:column="31"/></literal></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">ia<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">s6_addr<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">11<pos:position pos:line="9" pos:column="23"/></literal></expr>]<pos:position pos:line="9" pos:column="24"/></index></name> <operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <literal type="number" pos:line="9" pos:column="27">0xFF<pos:position pos:line="9" pos:column="31"/></literal></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memcpy<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name><name pos:line="10" pos:column="17">ia<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">s6_addr<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">+<pos:position pos:line="10" pos:column="30"/></operator> <literal type="number" pos:line="10" pos:column="31">12<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">buf<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">buf_len<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then>
    <elseif pos:line="12" pos:column="5">else <if pos:line="12" pos:column="10">if <condition pos:line="12" pos:column="13">(<expr><operator pos:line="12" pos:column="14">(<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">AF_INET6<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">==<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">family<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator> <operator pos:line="12" pos:column="35">&amp;&amp;<pos:position pos:line="12" pos:column="45"/></operator> <operator pos:line="12" pos:column="38">(<pos:position pos:line="12" pos:column="39"/></operator><sizeof pos:line="12" pos:column="39">sizeof <argument_list pos:line="12" pos:column="46">(<argument><expr pos:line="12" pos:column="47">struct <name pos:line="12" pos:column="54">in6_addr<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></sizeof> <operator pos:line="12" pos:column="64">==<pos:position pos:line="12" pos:column="66"/></operator> <name pos:line="12" pos:column="67">buf_len<pos:position pos:line="12" pos:column="74"/></name><operator pos:line="12" pos:column="74">)<pos:position pos:line="12" pos:column="75"/></operator></expr>)<pos:position pos:line="12" pos:column="76"/></condition><then pos:line="12" pos:column="76">
    <block pos:line="13" pos:column="5">{
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memcpy<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">ia<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">buf<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="26">buf_len<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
