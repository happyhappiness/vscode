<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_870_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ethstat_submit_value<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">device<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">type_instance<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">derive_t<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">value<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <block pos:line="2" pos:column="50">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">c_complain_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">complain_no_map<pos:position pos:line="3" pos:column="38"/></name> <init pos:line="3" pos:column="39">= <expr><name pos:line="3" pos:column="41">C_COMPLAIN_INIT_STATIC<pos:position pos:line="3" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="64"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">value_t<pos:position pos:line="5" pos:column="10"/></name></type> <name><name pos:line="5" pos:column="11">values<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">1<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">value_list_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">vl<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">value_map_t<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">map<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">value_map<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">!=<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">NULL<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="5">c_avl_get<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">value_map<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">type_instance<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="41">(<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">void<pos:position pos:line="10" pos:column="46"/></name> <operator pos:line="10" pos:column="47">*<pos:position pos:line="10" pos:column="48"/></operator><operator pos:line="10" pos:column="48">)<pos:position pos:line="10" pos:column="49"/></operator><operator pos:line="10" pos:column="49">&amp;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="50">map<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* If the "MappedOnly" option is specified, ignore unmapped values. */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">collect_mapped_only<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">&amp;&amp;<pos:position pos:line="13" pos:column="37"/></operator> <operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">map<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">==<pos:position pos:line="13" pos:column="37"/></operator> <name pos:line="13" pos:column="38">NULL<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">)<pos:position pos:line="13" pos:column="43"/></operator></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44"> <block pos:line="13" pos:column="45">{
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">value_map<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">NULL<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="7">c_complain<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(
          <argument><expr><name pos:line="16" pos:column="11">LOG_WARNING<pos:position pos:line="16" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="24">&amp;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="25">complain_no_map<pos:position pos:line="16" pos:column="40"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="17" pos:column="11">"ethstat plugin: The \"MappedOnly\" option has been set to true, "<pos:position pos:line="17" pos:column="77"/></literal>
          <literal type="string" pos:line="18" pos:column="11">"but no mapping has been configured. All values will be ignored!"<pos:position pos:line="18" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="78"/></expr_stmt></block></then></if>
    <return pos:line="19" pos:column="5">return;<pos:position pos:line="19" pos:column="12"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="22" pos:column="3">values<pos:position pos:line="22" pos:column="9"/></name><index pos:line="22" pos:column="9">[<expr><literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>]<pos:position pos:line="22" pos:column="12"/></index></name><operator pos:line="22" pos:column="12">.<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">derive<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">value<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">vl<pos:position pos:line="23" pos:column="5"/></name><operator pos:line="23" pos:column="5">.<pos:position pos:line="23" pos:column="6"/></operator><name pos:line="23" pos:column="6">values<pos:position pos:line="23" pos:column="12"/></name></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">values<pos:position pos:line="23" pos:column="21"/></name></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">vl<pos:position pos:line="24" pos:column="5"/></name><operator pos:line="24" pos:column="5">.<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">values_len<pos:position pos:line="24" pos:column="16"/></name></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <literal type="number" pos:line="24" pos:column="19">1<pos:position pos:line="24" pos:column="20"/></literal></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">sstrncpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name><name pos:line="26" pos:column="12">vl<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">host<pos:position pos:line="26" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="21">hostname_g<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="33">sizeof<argument_list pos:line="26" pos:column="39">(<argument><expr><name><name pos:line="26" pos:column="40">vl<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">.<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="43">host<pos:position pos:line="26" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">sstrncpy<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name><name pos:line="27" pos:column="12">vl<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">.<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">plugin<pos:position pos:line="27" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"ethstat"<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="34">sizeof<argument_list pos:line="27" pos:column="40">(<argument><expr><name><name pos:line="27" pos:column="41">vl<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">plugin<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">sstrncpy<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name><name pos:line="28" pos:column="12">vl<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">plugin_instance<pos:position pos:line="28" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="32">device<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="40">sizeof<argument_list pos:line="28" pos:column="46">(<argument><expr><name><name pos:line="28" pos:column="47">vl<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">plugin_instance<pos:position pos:line="28" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">map<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">!=<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">NULL<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">sstrncpy<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><name><name pos:line="30" pos:column="14">vl<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">type<pos:position pos:line="30" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="23">map<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">type<pos:position pos:line="30" pos:column="32"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="34">sizeof<argument_list pos:line="30" pos:column="40">(<argument><expr><name><name pos:line="30" pos:column="41">vl<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">.<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="44">type<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">sstrncpy<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name><name pos:line="31" pos:column="14">vl<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">type_instance<pos:position pos:line="31" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="32">map<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">type_instance<pos:position pos:line="31" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="52">sizeof<argument_list pos:line="31" pos:column="58">(<argument><expr><name><name pos:line="31" pos:column="59">vl<pos:position pos:line="31" pos:column="61"/></name><operator pos:line="31" pos:column="61">.<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="62">type_instance<pos:position pos:line="31" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="78"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then> <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sstrncpy<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name><name pos:line="33" pos:column="14">vl<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">.<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">type<pos:position pos:line="33" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"derive"<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="33">sizeof<argument_list pos:line="33" pos:column="39">(<argument><expr><name><name pos:line="33" pos:column="40">vl<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">.<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="43">type<pos:position pos:line="33" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">sstrncpy<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name><name pos:line="34" pos:column="14">vl<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">type_instance<pos:position pos:line="34" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="32">type_instance<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="47">sizeof<argument_list pos:line="34" pos:column="53">(<argument><expr><name><name pos:line="34" pos:column="54">vl<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">.<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">type_instance<pos:position pos:line="34" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="73"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="37" pos:column="3">plugin_dispatch_values<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="27">vl<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
