<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_652_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">agg_instance_read<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">agg_instance_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">inst<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">cdtime_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">t<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <comment type="block" pos:line="1" pos:column="64">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">value_list_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">vl<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* Pre-set all the fields in the value list that will not change per
   * aggregation type (sum, average, ...). The struct will be re-used and must
   * therefore be dispatched using the "secure" function. */</comment>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">vl<pos:position pos:line="9" pos:column="5"/></name><operator pos:line="9" pos:column="5">.<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">time<pos:position pos:line="9" pos:column="10"/></name></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <name pos:line="9" pos:column="13">t<pos:position pos:line="9" pos:column="14"/></name></expr>;<pos:position pos:line="9" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">vl<pos:position pos:line="10" pos:column="5"/></name><operator pos:line="10" pos:column="5">.<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">interval<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="12" pos:column="3">vl<pos:position pos:line="12" pos:column="5"/></name><operator pos:line="12" pos:column="5">.<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">meta<pos:position pos:line="12" pos:column="10"/></name></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">meta_data_create<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">()<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">vl<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">.<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">meta<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">NULL<pos:position pos:line="13" pos:column="22"/></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">ERROR<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"aggregation plugin: meta_data_create failed."<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal><operator pos:line="15" pos:column="15">)<pos:position pos:line="15" pos:column="16"/></operator></expr>;<pos:position pos:line="15" pos:column="17"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">meta_data_add_boolean<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name><name pos:line="17" pos:column="25">vl<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">.<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="28">meta<pos:position pos:line="17" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"aggregation:created"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="57">1<pos:position pos:line="17" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">sstrncpy<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">vl<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">host<pos:position pos:line="19" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="21">inst<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">ident<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">.<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">host<pos:position pos:line="19" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="39">sizeof<argument_list pos:line="19" pos:column="45">(<argument><expr><name><name pos:line="19" pos:column="46">vl<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">host<pos:position pos:line="19" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">sstrncpy<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">vl<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">plugin<pos:position pos:line="20" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="23">inst<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">ident<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">.<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">plugin<pos:position pos:line="20" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="43">sizeof<argument_list pos:line="20" pos:column="49">(<argument><expr><name><name pos:line="20" pos:column="50">vl<pos:position pos:line="20" pos:column="52"/></name><operator pos:line="20" pos:column="52">.<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">plugin<pos:position pos:line="20" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">sstrncpy<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name><name pos:line="21" pos:column="12">vl<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">type<pos:position pos:line="21" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="21">inst<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">ident<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">.<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">type<pos:position pos:line="21" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="39">sizeof<argument_list pos:line="21" pos:column="45">(<argument><expr><name><name pos:line="21" pos:column="46">vl<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">.<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="49">type<pos:position pos:line="21" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">sstrncpy<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name><name pos:line="22" pos:column="12">vl<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">type_instance<pos:position pos:line="22" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="30">inst<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">ident<pos:position pos:line="22" pos:column="41"/></name><operator pos:line="22" pos:column="41">.<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="42">type_instance<pos:position pos:line="22" pos:column="55"/></name></name></expr></argument>,
           <argument><expr><sizeof pos:line="23" pos:column="12">sizeof<argument_list pos:line="23" pos:column="18">(<argument><expr><name><name pos:line="23" pos:column="19">vl<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">.<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">type_instance<pos:position pos:line="23" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>

<cpp:define pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">define<pos:position pos:line="25" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="25" pos:column="9">READ_FUNC<pos:position pos:line="25" pos:column="18"/></name><parameter_list pos:line="25" pos:column="18">(<parameter><type><name pos:line="25" pos:column="19">func<pos:position pos:line="25" pos:column="23"/></name></type></parameter>, <parameter><type><name pos:line="25" pos:column="25">rate<pos:position pos:line="25" pos:column="29"/></name></type></parameter>)<pos:position pos:line="25" pos:column="30"/></parameter_list></cpp:macro>                                                  \
  <cpp:value pos:line="26" pos:column="3">do {                                                                         \
    if (inst-&gt;state_##func != NULL) {                                          \
      agg_instance_read_func(inst, #func, rate, inst-&gt;state_##func, &amp;vl,       \
                             inst-&gt;ident.plugin_instance, t);                  \
    }                                                                          \
  } while (0)<pos:position pos:line="31" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">pthread_mutex_lock<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name><name pos:line="33" pos:column="23">inst<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">lock<pos:position pos:line="33" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">READ_FUNC<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">num<pos:position pos:line="35" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="18">(<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">gauge_t<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">)<pos:position pos:line="35" pos:column="27"/></operator><name><name pos:line="35" pos:column="27">inst<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">num<pos:position pos:line="35" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="37" pos:column="3">/* All other aggregations are only defined when there have been any values
   * at all. */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name><name pos:line="39" pos:column="7">inst<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">num<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">&gt;<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr>)<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21"> <block pos:line="39" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">READ_FUNC<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">sum<pos:position pos:line="40" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="20">inst<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">-&gt;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="26">sum<pos:position pos:line="40" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">READ_FUNC<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">average<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name><name pos:line="41" pos:column="25">inst<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">-&gt;<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="31">sum<pos:position pos:line="41" pos:column="34"/></name></name> <operator pos:line="41" pos:column="35">/<pos:position pos:line="41" pos:column="36"/></operator> <operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator><operator pos:line="41" pos:column="38">(<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="39">gauge_t<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">)<pos:position pos:line="41" pos:column="47"/></operator><name><name pos:line="41" pos:column="47">inst<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">-&gt;<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="53">num<pos:position pos:line="41" pos:column="56"/></name></name><operator pos:line="41" pos:column="56">)<pos:position pos:line="41" pos:column="57"/></operator><operator pos:line="41" pos:column="57">)<pos:position pos:line="41" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">READ_FUNC<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">min<pos:position pos:line="42" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="20">inst<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">-&gt;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="26">min<pos:position pos:line="42" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">READ_FUNC<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">max<pos:position pos:line="43" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="20">inst<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">max<pos:position pos:line="43" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">READ_FUNC<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">stddev<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="23">sqrt<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><operator pos:line="44" pos:column="28">(<pos:position pos:line="44" pos:column="29"/></operator><operator pos:line="44" pos:column="29">(<pos:position pos:line="44" pos:column="30"/></operator><operator pos:line="44" pos:column="30">(<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="31">gauge_t<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">)<pos:position pos:line="44" pos:column="39"/></operator><name><name pos:line="44" pos:column="39">inst<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">-&gt;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="45">num<pos:position pos:line="44" pos:column="48"/></name></name><operator pos:line="44" pos:column="48">)<pos:position pos:line="44" pos:column="49"/></operator> <operator pos:line="44" pos:column="50">*<pos:position pos:line="44" pos:column="51"/></operator> <name><name pos:line="44" pos:column="52">inst<pos:position pos:line="44" pos:column="56"/></name><operator pos:line="44" pos:column="56">-&gt;<pos:position pos:line="44" pos:column="61"/></operator><name pos:line="44" pos:column="58">squares_sum<pos:position pos:line="44" pos:column="69"/></name></name><operator pos:line="44" pos:column="69">)<pos:position pos:line="44" pos:column="70"/></operator> <operator pos:line="44" pos:column="71">-<pos:position pos:line="44" pos:column="72"/></operator>
                           <operator pos:line="45" pos:column="28">(<pos:position pos:line="45" pos:column="29"/></operator><name><name pos:line="45" pos:column="29">inst<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">-&gt;<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="35">sum<pos:position pos:line="45" pos:column="38"/></name></name> <operator pos:line="45" pos:column="39">*<pos:position pos:line="45" pos:column="40"/></operator> <name><name pos:line="45" pos:column="41">inst<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">-&gt;<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="47">sum<pos:position pos:line="45" pos:column="50"/></name></name><operator pos:line="45" pos:column="50">)<pos:position pos:line="45" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call> <operator pos:line="45" pos:column="53">/<pos:position pos:line="45" pos:column="54"/></operator>
                          <operator pos:line="46" pos:column="27">(<pos:position pos:line="46" pos:column="28"/></operator><operator pos:line="46" pos:column="28">(<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">gauge_t<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">)<pos:position pos:line="46" pos:column="37"/></operator><name><name pos:line="46" pos:column="37">inst<pos:position pos:line="46" pos:column="41"/></name><operator pos:line="46" pos:column="41">-&gt;<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="43">num<pos:position pos:line="46" pos:column="46"/></name></name><operator pos:line="46" pos:column="46">)<pos:position pos:line="46" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="49" pos:column="3">/* Reset internal state. */</comment>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">inst<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">-&gt;<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="9">num<pos:position pos:line="50" pos:column="12"/></name></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <literal type="number" pos:line="50" pos:column="15">0<pos:position pos:line="50" pos:column="16"/></literal></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="51" pos:column="3">inst<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">-&gt;<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="9">sum<pos:position pos:line="51" pos:column="12"/></name></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <literal type="number" pos:line="51" pos:column="15">0.0<pos:position pos:line="51" pos:column="18"/></literal></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">inst<pos:position pos:line="52" pos:column="7"/></name><operator pos:line="52" pos:column="7">-&gt;<pos:position pos:line="52" pos:column="12"/></operator><name pos:line="52" pos:column="9">squares_sum<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0.0<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">inst<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">-&gt;<pos:position pos:line="53" pos:column="12"/></operator><name pos:line="53" pos:column="9">min<pos:position pos:line="53" pos:column="12"/></name></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">NAN<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">inst<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">-&gt;<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="9">max<pos:position pos:line="54" pos:column="12"/></name></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">NAN<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="56" pos:column="3">pthread_mutex_unlock<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><operator pos:line="56" pos:column="24">&amp;<pos:position pos:line="56" pos:column="29"/></operator><name><name pos:line="56" pos:column="25">inst<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">lock<pos:position pos:line="56" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">meta_data_destroy<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><name><name pos:line="58" pos:column="21">vl<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">.<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="24">meta<pos:position pos:line="58" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="59" pos:column="3">vl<pos:position pos:line="59" pos:column="5"/></name><operator pos:line="59" pos:column="5">.<pos:position pos:line="59" pos:column="6"/></operator><name pos:line="59" pos:column="6">meta<pos:position pos:line="59" pos:column="10"/></name></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <name pos:line="59" pos:column="13">NULL<pos:position pos:line="59" pos:column="17"/></name></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt>

  <return pos:line="61" pos:column="3">return <expr><operator pos:line="61" pos:column="10">(<pos:position pos:line="61" pos:column="11"/></operator><literal type="number" pos:line="61" pos:column="11">0<pos:position pos:line="61" pos:column="12"/></literal><operator pos:line="61" pos:column="12">)<pos:position pos:line="61" pos:column="13"/></operator></expr>;<pos:position pos:line="61" pos:column="14"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
