<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2758_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">configure_collectd<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">cmdline_config<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">config<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <block pos:line="1" pos:column="55">{
  <decl_stmt><decl><type><specifier pos:line="2" pos:column="3">const<pos:position pos:line="2" pos:column="8"/></specifier> <name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">basedir<pos:position pos:line="2" pos:column="22"/></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
  <comment type="block" pos:line="3" pos:column="3">/*
   * Read options from the config file, the environment and the command
   * line (in that order, with later options overwriting previous ones in
   * general).
   * Also, this will automatically load modules.
   */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">cf_read<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name><name pos:line="9" pos:column="15">config<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">configfile<pos:position pos:line="9" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block pos:line="9" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">fprintf<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">stderr<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="21">"Error: Reading the config file failed!\n"<pos:position pos:line="10" pos:column="63"/></literal>
                    <literal type="string" pos:line="11" pos:column="21">"Read the logs for details.\n"<pos:position pos:line="11" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><literal type="number" pos:line="12" pos:column="12">1<pos:position pos:line="12" pos:column="13"/></literal></expr>;<pos:position pos:line="12" pos:column="14"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/*
   * Change directory. We do this _after_ reading the config and loading
   * modules to relative paths work as expected.
   */</comment>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">(<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">basedir<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">global_option_get<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><literal type="string" pos:line="19" pos:column="36">"BaseDir"<pos:position pos:line="19" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call><operator pos:line="19" pos:column="46">)<pos:position pos:line="19" pos:column="47"/></operator> <operator pos:line="19" pos:column="48">==<pos:position pos:line="19" pos:column="50"/></operator> <name pos:line="19" pos:column="51">NULL<pos:position pos:line="19" pos:column="55"/></name></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56"> <block pos:line="19" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">fprintf<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">stderr<pos:position pos:line="20" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="21" pos:column="13">"Don't have a basedir to use. This should not happen. Ever."<pos:position pos:line="21" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="75"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><literal type="number" pos:line="22" pos:column="12">1<pos:position pos:line="22" pos:column="13"/></literal></expr>;<pos:position pos:line="22" pos:column="14"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then> <elseif pos:line="23" pos:column="5">else <if pos:line="23" pos:column="10">if <condition pos:line="23" pos:column="13">(<expr><call><name pos:line="23" pos:column="14">change_basedir<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">basedir<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="38">config<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">create_basedir<pos:position pos:line="23" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62"> <block pos:line="23" pos:column="63">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">fprintf<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">stderr<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="21">"Error: Unable to change to directory `%s'.\n"<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">basedir<pos:position pos:line="24" pos:column="76"/></name></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><literal type="number" pos:line="25" pos:column="12">1<pos:position pos:line="25" pos:column="13"/></literal></expr>;<pos:position pos:line="25" pos:column="14"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="28" pos:column="3">/*
   * Set global variables or, if that fails, exit. We cannot run with
   * them being uninitialized. If nothing is configured, then defaults
   * are being used. So this means that the user has actually done
   * something wrong.
   */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><call><name pos:line="34" pos:column="7">init_global_variables<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">()<pos:position pos:line="34" pos:column="30"/></argument_list></call> <operator pos:line="34" pos:column="31">!=<pos:position pos:line="34" pos:column="33"/></operator> <literal type="number" pos:line="34" pos:column="34">0<pos:position pos:line="34" pos:column="35"/></literal></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36">
    <block type="pseudo"><return pos:line="35" pos:column="5">return <expr><literal type="number" pos:line="35" pos:column="12">1<pos:position pos:line="35" pos:column="13"/></literal></expr>;<pos:position pos:line="35" pos:column="14"/></return></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><literal type="number" pos:line="37" pos:column="10">0<pos:position pos:line="37" pos:column="11"/></literal></expr>;<pos:position pos:line="37" pos:column="12"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
