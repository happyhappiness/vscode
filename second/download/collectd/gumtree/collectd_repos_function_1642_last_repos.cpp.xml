<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1642_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <comment type="block" pos:line="1" pos:column="33">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">double<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">last_time<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">values_sent<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">read_options<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">argc<pos:position pos:line="6" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="22">argv<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">sigint_action<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">sa_handler<pos:position pos:line="8" pos:column="27"/></name></name> <operator pos:line="8" pos:column="28">=<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">signal_handler<pos:position pos:line="8" pos:column="44"/></name></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">sigaction<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">SIGINT<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="22">sigint_action<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <comment type="block" pos:line="9" pos:column="37">/* old = */</comment> <argument><expr><name pos:line="9" pos:column="49">NULL<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="11" pos:column="3">sigterm_action<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">sa_handler<pos:position pos:line="11" pos:column="28"/></name></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">signal_handler<pos:position pos:line="11" pos:column="45"/></name></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">sigaction<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">SIGTERM<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="22">&amp;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="23">sigterm_action<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <comment type="block" pos:line="12" pos:column="39">/* old = */</comment> <argument><expr><name pos:line="12" pos:column="51">NULL<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">values_heap<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">c_heap_create<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">compare_time<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">values_heap<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">NULL<pos:position pos:line="15" pos:column="26"/></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27"> <block pos:line="15" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">stderr<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"c_heap_create failed.\n"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">exit<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">EXIT_FAILURE<pos:position pos:line="17" pos:column="22"/></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">net<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">lcc_network_create<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">()<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">net<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">NULL<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">fprintf<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">stderr<pos:position pos:line="22" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="21">"lcc_network_create failed.\n"<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">exit<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">EXIT_FAILURE<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then> <else pos:line="24" pos:column="5">else <block pos:line="24" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">lcc_server_t<pos:position pos:line="25" pos:column="17"/></name> <modifier pos:line="25" pos:column="18">*<pos:position pos:line="25" pos:column="19"/></modifier></type><name pos:line="25" pos:column="19">srv<pos:position pos:line="25" pos:column="22"/></name></decl>;<pos:position pos:line="25" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">srv<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <call><name pos:line="27" pos:column="11">lcc_server_create<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">net<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">conf_destination<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">conf_service<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="66"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">srv<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">==<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">NULL<pos:position pos:line="28" pos:column="20"/></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21"> <block pos:line="28" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">fprintf<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">stderr<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"lcc_server_create failed.\n"<pos:position pos:line="29" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">exit<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">EXIT_FAILURE<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">lcc_server_set_ttl<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">srv<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="29">42<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="34" pos:column="5">0<pos:position pos:line="34" pos:column="6"/></literal></expr></cpp:if>
    lcc_server_set_security_level (srv, ENCRYPT,
        "admin", "password1");
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="38" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">fprintf<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">stdout<pos:position pos:line="40" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="19">"Creating %i values ... "<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">conf_num_values<pos:position pos:line="40" pos:column="61"/></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">fflush<pos:position pos:line="41" pos:column="9"/></name><argument_list pos:line="41" pos:column="9">(<argument><expr><name pos:line="41" pos:column="10">stdout<pos:position pos:line="41" pos:column="16"/></name></expr></argument>)<pos:position pos:line="41" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt>
  <for pos:line="42" pos:column="3">for <control pos:line="42" pos:column="7">(<init><decl><type><name pos:line="42" pos:column="8">int<pos:position pos:line="42" pos:column="11"/></name></type> <name pos:line="42" pos:column="12">i<pos:position pos:line="42" pos:column="13"/></name> <init pos:line="42" pos:column="14">= <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="42" pos:column="18"/></init> <condition><expr><name pos:line="42" pos:column="19">i<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">&lt;<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="23">conf_num_values<pos:position pos:line="42" pos:column="38"/></name></expr>;<pos:position pos:line="42" pos:column="39"/></condition> <incr><expr><name pos:line="42" pos:column="40">i<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">++<pos:position pos:line="42" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="44"/></control> <block pos:line="42" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">lcc_value_list_t<pos:position pos:line="43" pos:column="21"/></name> <modifier pos:line="43" pos:column="22">*<pos:position pos:line="43" pos:column="23"/></modifier></type><name pos:line="43" pos:column="23">vl<pos:position pos:line="43" pos:column="25"/></name></decl>;<pos:position pos:line="43" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="45" pos:column="5">vl<pos:position pos:line="45" pos:column="7"/></name> <operator pos:line="45" pos:column="8">=<pos:position pos:line="45" pos:column="9"/></operator> <call><name pos:line="45" pos:column="10">create_value_list<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">()<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">vl<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">==<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">NULL<pos:position pos:line="46" pos:column="19"/></name></expr>)<pos:position pos:line="46" pos:column="20"/></condition><then pos:line="46" pos:column="20"> <block pos:line="46" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">fprintf<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">stderr<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"create_value_list failed.\n"<pos:position pos:line="47" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">exit<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><name pos:line="48" pos:column="12">EXIT_FAILURE<pos:position pos:line="48" pos:column="24"/></name></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">c_heap_insert<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">values_heap<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">vl<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">fprintf<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><name pos:line="53" pos:column="11">stdout<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"done\n"<pos:position pos:line="53" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="55" pos:column="3">last_time<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <literal type="number" pos:line="55" pos:column="15">0<pos:position pos:line="55" pos:column="16"/></literal></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
  <while pos:line="56" pos:column="3">while <condition pos:line="56" pos:column="9">(<expr><name pos:line="56" pos:column="10">loop<pos:position pos:line="56" pos:column="14"/></name></expr>)<pos:position pos:line="56" pos:column="15"/></condition> <block pos:line="56" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">lcc_value_list_t<pos:position pos:line="57" pos:column="21"/></name> <modifier pos:line="57" pos:column="22">*<pos:position pos:line="57" pos:column="23"/></modifier></type><name pos:line="57" pos:column="23">vl<pos:position pos:line="57" pos:column="25"/></name> <init pos:line="57" pos:column="26">= <expr><call><name pos:line="57" pos:column="28">c_heap_get_root<pos:position pos:line="57" pos:column="43"/></name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">values_heap<pos:position pos:line="57" pos:column="55"/></name></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="57"/></decl_stmt>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">vl<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">==<pos:position pos:line="59" pos:column="14"/></operator> <name pos:line="59" pos:column="15">NULL<pos:position pos:line="59" pos:column="19"/></name></expr>)<pos:position pos:line="59" pos:column="20"/></condition><then pos:line="59" pos:column="20">
      <block type="pseudo"><break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break></block></then></if>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name><name pos:line="62" pos:column="9">vl<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">-&gt;<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="13">time<pos:position pos:line="62" pos:column="17"/></name></name> <operator pos:line="62" pos:column="18">!=<pos:position pos:line="62" pos:column="20"/></operator> <name pos:line="62" pos:column="21">last_time<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">printf<pos:position pos:line="63" pos:column="13"/></name><argument_list pos:line="63" pos:column="13">(<argument><expr><literal type="string" pos:line="63" pos:column="14">"%i values have been sent.\n"<pos:position pos:line="63" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="45">values_sent<pos:position pos:line="63" pos:column="56"/></name></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="58"/></expr_stmt>

      <comment type="block" pos:line="65" pos:column="7">/* Check if we need to sleep */</comment>
      <decl_stmt><decl><type><name pos:line="66" pos:column="7">double<pos:position pos:line="66" pos:column="13"/></name></type> <name pos:line="66" pos:column="14">now<pos:position pos:line="66" pos:column="17"/></name> <init pos:line="66" pos:column="18">= <expr><call><name pos:line="66" pos:column="20">dtime<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">()<pos:position pos:line="66" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="66" pos:column="28"/></decl_stmt>

      <while pos:line="68" pos:column="7">while <condition pos:line="68" pos:column="13">(<expr><name pos:line="68" pos:column="14">now<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">&lt;<pos:position pos:line="68" pos:column="22"/></operator> <name><name pos:line="68" pos:column="20">vl<pos:position pos:line="68" pos:column="22"/></name><operator pos:line="68" pos:column="22">-&gt;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="24">time<pos:position pos:line="68" pos:column="28"/></name></name></expr>)<pos:position pos:line="68" pos:column="29"/></condition> <block pos:line="68" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="69" pos:column="9">double<pos:position pos:line="69" pos:column="15"/></name></type> <name pos:line="69" pos:column="16">diff<pos:position pos:line="69" pos:column="20"/></name> <init pos:line="69" pos:column="21">= <expr><name><name pos:line="69" pos:column="23">vl<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">time<pos:position pos:line="69" pos:column="31"/></name></name> <operator pos:line="69" pos:column="32">-<pos:position pos:line="69" pos:column="33"/></operator> <name pos:line="69" pos:column="34">now<pos:position pos:line="69" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="69" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="70" pos:column="9">struct<pos:position pos:line="70" pos:column="15"/></name> <name pos:line="70" pos:column="16">timespec<pos:position pos:line="70" pos:column="24"/></name></name></type> <name pos:line="70" pos:column="25">ts<pos:position pos:line="70" pos:column="27"/></name> <init pos:line="70" pos:column="28">= <expr><block pos:line="70" pos:column="30">{
            <expr><operator pos:line="71" pos:column="13">.<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="14">tv_sec<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <operator pos:line="71" pos:column="23">(<pos:position pos:line="71" pos:column="24"/></operator><name pos:line="71" pos:column="24">time_t<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">)<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">diff<pos:position pos:line="71" pos:column="35"/></name></expr>,
        }<pos:position pos:line="72" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="72" pos:column="11"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">ts<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">.<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">tv_nsec<pos:position pos:line="73" pos:column="19"/></name></name> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <call pos:line="73" pos:column="22">(<name pos:line="73" pos:column="23">long<pos:position pos:line="73" pos:column="27"/></name>)<argument_list pos:line="73" pos:column="28">(<argument><expr><operator pos:line="73" pos:column="29">(<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="30">diff<pos:position pos:line="73" pos:column="34"/></name> <operator pos:line="73" pos:column="35">-<pos:position pos:line="73" pos:column="36"/></operator> <operator pos:line="73" pos:column="37">(<pos:position pos:line="73" pos:column="38"/></operator><operator pos:line="73" pos:column="38">(<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="39">double<pos:position pos:line="73" pos:column="45"/></name><operator pos:line="73" pos:column="45">)<pos:position pos:line="73" pos:column="46"/></operator><name><name pos:line="73" pos:column="46">ts<pos:position pos:line="73" pos:column="48"/></name><operator pos:line="73" pos:column="48">.<pos:position pos:line="73" pos:column="49"/></operator><name pos:line="73" pos:column="49">tv_sec<pos:position pos:line="73" pos:column="55"/></name></name><operator pos:line="73" pos:column="55">)<pos:position pos:line="73" pos:column="56"/></operator><operator pos:line="73" pos:column="56">)<pos:position pos:line="73" pos:column="57"/></operator> <operator pos:line="73" pos:column="58">*<pos:position pos:line="73" pos:column="59"/></operator> <literal type="number" pos:line="73" pos:column="60">1e9<pos:position pos:line="73" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="65"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="75" pos:column="9">nanosleep<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><operator pos:line="75" pos:column="19">&amp;<pos:position pos:line="75" pos:column="24"/></operator><name pos:line="75" pos:column="20">ts<pos:position pos:line="75" pos:column="22"/></name></expr></argument>, <comment type="block" pos:line="75" pos:column="24">/* remaining = */</comment> <argument><expr><name pos:line="75" pos:column="42">NULL<pos:position pos:line="75" pos:column="46"/></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="76" pos:column="9">now<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">=<pos:position pos:line="76" pos:column="14"/></operator> <call><name pos:line="76" pos:column="15">dtime<pos:position pos:line="76" pos:column="20"/></name><argument_list pos:line="76" pos:column="20">()<pos:position pos:line="76" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>

        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><operator pos:line="78" pos:column="13">!<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="14">loop<pos:position pos:line="78" pos:column="18"/></name></expr>)<pos:position pos:line="78" pos:column="19"/></condition><then pos:line="78" pos:column="19">
          <block type="pseudo"><break pos:line="79" pos:column="11">break;<pos:position pos:line="79" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="80" pos:column="8"/></block></while>
      <expr_stmt><expr><name pos:line="81" pos:column="7">last_time<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">=<pos:position pos:line="81" pos:column="18"/></operator> <name><name pos:line="81" pos:column="19">vl<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">time<pos:position pos:line="81" pos:column="27"/></name></name></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">send_value<pos:position pos:line="84" pos:column="15"/></name><argument_list pos:line="84" pos:column="15">(<argument><expr><name pos:line="84" pos:column="16">vl<pos:position pos:line="84" pos:column="18"/></name></expr></argument>)<pos:position pos:line="84" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="85" pos:column="5">values_sent<pos:position pos:line="85" pos:column="16"/></name><operator pos:line="85" pos:column="16">++<pos:position pos:line="85" pos:column="18"/></operator></expr>;<pos:position pos:line="85" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">c_heap_insert<pos:position pos:line="87" pos:column="18"/></name><argument_list pos:line="87" pos:column="18">(<argument><expr><name pos:line="87" pos:column="19">values_heap<pos:position pos:line="87" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="32">vl<pos:position pos:line="87" pos:column="34"/></name></expr></argument>)<pos:position pos:line="87" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="90" pos:column="3">fprintf<pos:position pos:line="90" pos:column="10"/></name><argument_list pos:line="90" pos:column="10">(<argument><expr><name pos:line="90" pos:column="11">stdout<pos:position pos:line="90" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="19">"Shutting down.\n"<pos:position pos:line="90" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">fflush<pos:position pos:line="91" pos:column="9"/></name><argument_list pos:line="91" pos:column="9">(<argument><expr><name pos:line="91" pos:column="10">stdout<pos:position pos:line="91" pos:column="16"/></name></expr></argument>)<pos:position pos:line="91" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="18"/></expr_stmt>

  <while pos:line="93" pos:column="3">while <condition pos:line="93" pos:column="9">(<expr><literal type="number" pos:line="93" pos:column="10">42<pos:position pos:line="93" pos:column="12"/></literal></expr>)<pos:position pos:line="93" pos:column="13"/></condition> <block pos:line="93" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">lcc_value_list_t<pos:position pos:line="94" pos:column="21"/></name> <modifier pos:line="94" pos:column="22">*<pos:position pos:line="94" pos:column="23"/></modifier></type><name pos:line="94" pos:column="23">vl<pos:position pos:line="94" pos:column="25"/></name> <init pos:line="94" pos:column="26">= <expr><call><name pos:line="94" pos:column="28">c_heap_get_root<pos:position pos:line="94" pos:column="43"/></name><argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">values_heap<pos:position pos:line="94" pos:column="55"/></name></expr></argument>)<pos:position pos:line="94" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="94" pos:column="57"/></decl_stmt>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name pos:line="95" pos:column="9">vl<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">==<pos:position pos:line="95" pos:column="14"/></operator> <name pos:line="95" pos:column="15">NULL<pos:position pos:line="95" pos:column="19"/></name></expr>)<pos:position pos:line="95" pos:column="20"/></condition><then pos:line="95" pos:column="20">
      <block type="pseudo"><break pos:line="96" pos:column="7">break;<pos:position pos:line="96" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">destroy_value_list<pos:position pos:line="97" pos:column="23"/></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">vl<pos:position pos:line="97" pos:column="26"/></name></expr></argument>)<pos:position pos:line="97" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="99" pos:column="3">c_heap_destroy<pos:position pos:line="99" pos:column="17"/></name><argument_list pos:line="99" pos:column="17">(<argument><expr><name pos:line="99" pos:column="18">values_heap<pos:position pos:line="99" pos:column="29"/></name></expr></argument>)<pos:position pos:line="99" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="101" pos:column="3">lcc_network_destroy<pos:position pos:line="101" pos:column="22"/></name><argument_list pos:line="101" pos:column="22">(<argument><expr><name pos:line="101" pos:column="23">net<pos:position pos:line="101" pos:column="26"/></name></expr></argument>)<pos:position pos:line="101" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="102" pos:column="3">exit<pos:position pos:line="102" pos:column="7"/></name><argument_list pos:line="102" pos:column="7">(<argument><expr><name pos:line="102" pos:column="8">EXIT_SUCCESS<pos:position pos:line="102" pos:column="20"/></name></expr></argument>)<pos:position pos:line="102" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="22"/></expr_stmt>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
