<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1709_collectd-5.0.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">plugin_shutdown_all<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">llentry_t<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">le<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">stop_read_threads<pos:position pos:line="5" pos:column="26"/></name> <argument_list pos:line="5" pos:column="27">()<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">destroy_all_callbacks<pos:position pos:line="7" pos:column="30"/></name> <argument_list pos:line="7" pos:column="31">(<argument><expr><operator pos:line="7" pos:column="32">&amp;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="33">list_init<pos:position pos:line="7" pos:column="42"/></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">pthread_mutex_lock<pos:position pos:line="9" pos:column="27"/></name> <argument_list pos:line="9" pos:column="28">(<argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="30">read_lock<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">llist_destroy<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">read_list<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">read_list<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="21">NULL<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">pthread_mutex_unlock<pos:position pos:line="12" pos:column="29"/></name> <argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">read_lock<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">destroy_read_heap<pos:position pos:line="14" pos:column="26"/></name> <argument_list pos:line="14" pos:column="27">()<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">plugin_flush<pos:position pos:line="16" pos:column="21"/></name> <argument_list pos:line="16" pos:column="22">(<comment type="block" pos:line="16" pos:column="23">/* plugin = */</comment> <argument><expr><name pos:line="16" pos:column="38">NULL<pos:position pos:line="16" pos:column="42"/></name></expr></argument>,
			<comment type="block" pos:line="17" pos:column="25">/* timeout = */</comment> <argument><expr><literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>,
			<comment type="block" pos:line="18" pos:column="25">/* identifier = */</comment> <argument><expr><name pos:line="18" pos:column="44">NULL<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><name pos:line="20" pos:column="9">le<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">NULL<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">list_shutdown<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">!=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">NULL<pos:position pos:line="21" pos:column="34"/></name></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">le<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">llist_head<pos:position pos:line="22" pos:column="32"/></name> <argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">list_shutdown<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt></block></then></if>

	<while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">le<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">!=<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">NULL<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition>
	<block pos:line="25" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">callback_func_t<pos:position pos:line="26" pos:column="32"/></name> <modifier pos:line="26" pos:column="33">*<pos:position pos:line="26" pos:column="34"/></modifier></type><name pos:line="26" pos:column="34">cf<pos:position pos:line="26" pos:column="36"/></name></decl>;<pos:position pos:line="26" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">plugin_shutdown_cb<pos:position pos:line="27" pos:column="35"/></name></type> <name pos:line="27" pos:column="36">callback<pos:position pos:line="27" pos:column="44"/></name></decl>;<pos:position pos:line="27" pos:column="45"/></decl_stmt>

		<expr_stmt><expr><name pos:line="29" pos:column="17">cf<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <name><name pos:line="29" pos:column="22">le<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">value<pos:position pos:line="29" pos:column="31"/></name></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">callback<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">=<pos:position pos:line="30" pos:column="27"/></operator> <name><name pos:line="30" pos:column="28">cf<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">cf_callback<pos:position pos:line="30" pos:column="43"/></name></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>

		<comment type="block" pos:line="32" pos:column="17">/* Advance the pointer before calling the callback allows
		 * shutdown functions to unregister themselves. If done the
		 * other way around the memory `le' points to will be freed
		 * after callback returns. */</comment>
		<expr_stmt><expr><name pos:line="36" pos:column="17">le<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name><name pos:line="36" pos:column="22">le<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">next<pos:position pos:line="36" pos:column="30"/></name></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>

		<expr_stmt><expr><call pos:line="38" pos:column="17">(<modifier pos:line="38" pos:column="18">*<pos:position pos:line="38" pos:column="19"/></modifier><name pos:line="38" pos:column="19">callback<pos:position pos:line="38" pos:column="27"/></name>) <argument_list pos:line="38" pos:column="29">()<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></while>

	<comment type="block" pos:line="41" pos:column="9">/* Write plugins which use the `user_data' pointer usually need the
	 * same data available to the flush callback. If this is the case, set
	 * the free_function to NULL when registering the flush callback and to
	 * the real free function when registering the write callback. This way
	 * the data isn't freed twice. */</comment>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">destroy_all_callbacks<pos:position pos:line="46" pos:column="30"/></name> <argument_list pos:line="46" pos:column="31">(<argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">list_flush<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">destroy_all_callbacks<pos:position pos:line="47" pos:column="30"/></name> <argument_list pos:line="47" pos:column="31">(<argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">list_missing<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">destroy_all_callbacks<pos:position pos:line="48" pos:column="30"/></name> <argument_list pos:line="48" pos:column="31">(<argument><expr><operator pos:line="48" pos:column="32">&amp;<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="33">list_write<pos:position pos:line="48" pos:column="43"/></name></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="50" pos:column="9">destroy_all_callbacks<pos:position pos:line="50" pos:column="30"/></name> <argument_list pos:line="50" pos:column="31">(<argument><expr><operator pos:line="50" pos:column="32">&amp;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="33">list_notification<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">destroy_all_callbacks<pos:position pos:line="51" pos:column="30"/></name> <argument_list pos:line="51" pos:column="31">(<argument><expr><operator pos:line="51" pos:column="32">&amp;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="33">list_shutdown<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">destroy_all_callbacks<pos:position pos:line="52" pos:column="30"/></name> <argument_list pos:line="52" pos:column="31">(<argument><expr><operator pos:line="52" pos:column="32">&amp;<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="33">list_log<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
