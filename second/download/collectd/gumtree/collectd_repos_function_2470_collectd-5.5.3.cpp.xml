<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2470_collectd-5.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_dispatch_values<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">value_list_t<pos:position pos:line="1" pos:column="41"/></name> <specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">vl<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">pthread_mutex_t<pos:position pos:line="4" pos:column="31"/></name></type> <name pos:line="4" pos:column="32">statistics_lock<pos:position pos:line="4" pos:column="47"/></name> <init pos:line="4" pos:column="48">= <expr><name pos:line="4" pos:column="50">PTHREAD_MUTEX_INITIALIZER<pos:position pos:line="4" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="76"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">check_drop_value<pos:position pos:line="6" pos:column="29"/></name> <argument_list pos:line="6" pos:column="30">()<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="33"/></condition><then pos:line="6" pos:column="33"> <block pos:line="6" pos:column="34">{
		<if pos:line="7" pos:column="17">if<condition pos:line="7" pos:column="19">(<expr><name pos:line="7" pos:column="20">record_statistics<pos:position pos:line="7" pos:column="37"/></name></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <block pos:line="7" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">pthread_mutex_lock<pos:position pos:line="8" pos:column="43"/></name><argument_list pos:line="8" pos:column="43">(<argument><expr><operator pos:line="8" pos:column="44">&amp;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="45">statistics_lock<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="9" pos:column="25">stats_values_dropped<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">++<pos:position pos:line="9" pos:column="47"/></operator></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">pthread_mutex_unlock<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><operator pos:line="10" pos:column="46">&amp;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="47">statistics_lock<pos:position pos:line="10" pos:column="62"/></name></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">0<pos:position pos:line="12" pos:column="26"/></literal><operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator></expr>;<pos:position pos:line="12" pos:column="28"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">plugin_write_enqueue<pos:position pos:line="15" pos:column="38"/></name> <argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">vl<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">!=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25">
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name></type> <name><name pos:line="18" pos:column="22">errbuf<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><literal type="number" pos:line="18" pos:column="29">1024<pos:position pos:line="18" pos:column="33"/></literal></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">ERROR<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"plugin_dispatch_values: plugin_write_enqueue failed "<pos:position pos:line="19" pos:column="78"/></literal>
				<literal type="string" pos:line="20" pos:column="33">"with status %i (%s)."<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">status<pos:position pos:line="20" pos:column="63"/></name></expr></argument>,
				<argument><expr><call><name pos:line="21" pos:column="33">sstrerror<pos:position pos:line="21" pos:column="42"/></name> <argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">status<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">errbuf<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="60">sizeof <argument_list pos:line="21" pos:column="67">(<argument><expr><name pos:line="21" pos:column="68">errbuf<pos:position pos:line="21" pos:column="74"/></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="78"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">status<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">)<pos:position pos:line="22" pos:column="32"/></operator></expr>;<pos:position pos:line="22" pos:column="33"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal><operator pos:line="25" pos:column="18">)<pos:position pos:line="25" pos:column="19"/></operator></expr>;<pos:position pos:line="25" pos:column="20"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
