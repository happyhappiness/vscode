<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_197_collectd-4.4.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">disk_config<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">key<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">ignorelist<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">==<pos:position pos:line="3" pos:column="20"/></operator> <name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr>)<pos:position pos:line="3" pos:column="26"/></condition><then pos:line="3" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="5">ignorelist<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">ignorelist_create<pos:position pos:line="4" pos:column="35"/></name> <argument_list pos:line="4" pos:column="36">(<comment type="block" pos:line="4" pos:column="37">/* invert = */</comment> <argument><expr><literal type="number" pos:line="4" pos:column="52">1<pos:position pos:line="4" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt></block></then></if>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">ignorelist<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">==<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal><operator pos:line="6" pos:column="14">)<pos:position pos:line="6" pos:column="15"/></operator></expr>;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">strcasecmp<pos:position pos:line="8" pos:column="17"/></name> <argument_list pos:line="8" pos:column="18">(<argument><expr><literal type="string" pos:line="8" pos:column="19">"Disk"<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">key<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call> <operator pos:line="8" pos:column="32">==<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="35">0<pos:position pos:line="8" pos:column="36"/></literal></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ignorelist_add<pos:position pos:line="10" pos:column="19"/></name> <argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">ignorelist<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">value<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if <condition pos:line="12" pos:column="11">(<expr><call><name pos:line="12" pos:column="12">strcasecmp<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"IgnoreSelected"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">key<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call> <operator pos:line="12" pos:column="47">==<pos:position pos:line="12" pos:column="49"/></operator> <literal type="number" pos:line="12" pos:column="50">0<pos:position pos:line="12" pos:column="51"/></literal></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52">
  <block pos:line="13" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">invert<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><literal type="number" pos:line="14" pos:column="18">1<pos:position pos:line="14" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">strcasecmp<pos:position pos:line="15" pos:column="20"/></name> <argument_list pos:line="15" pos:column="21">(<argument><expr><literal type="string" pos:line="15" pos:column="22">"True"<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">value<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call> <operator pos:line="15" pos:column="37">==<pos:position pos:line="15" pos:column="39"/></operator> <literal type="number" pos:line="15" pos:column="40">0<pos:position pos:line="15" pos:column="41"/></literal><operator pos:line="15" pos:column="41">)<pos:position pos:line="15" pos:column="42"/></operator>
	<operator pos:line="16" pos:column="9">||<pos:position pos:line="16" pos:column="11"/></operator> <operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><call><name pos:line="16" pos:column="13">strcasecmp<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><literal type="string" pos:line="16" pos:column="25">"Yes"<pos:position pos:line="16" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">value<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call> <operator pos:line="16" pos:column="39">==<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">0<pos:position pos:line="16" pos:column="43"/></literal><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator>
	<operator pos:line="17" pos:column="9">||<pos:position pos:line="17" pos:column="11"/></operator> <operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><call><name pos:line="17" pos:column="13">strcasecmp<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><literal type="string" pos:line="17" pos:column="25">"On"<pos:position pos:line="17" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="31">value<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call> <operator pos:line="17" pos:column="38">==<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal><operator pos:line="17" pos:column="42">)<pos:position pos:line="17" pos:column="43"/></operator></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="7">invert<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ignorelist_set_invert<pos:position pos:line="19" pos:column="26"/></name> <argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">ignorelist<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">invert<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if></elseif>
  <else pos:line="21" pos:column="3">else
  <block pos:line="22" pos:column="3">{
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><operator pos:line="23" pos:column="13">-<pos:position pos:line="23" pos:column="14"/></operator><literal type="number" pos:line="23" pos:column="14">1<pos:position pos:line="23" pos:column="15"/></literal><operator pos:line="23" pos:column="15">)<pos:position pos:line="23" pos:column="16"/></operator></expr>;<pos:position pos:line="23" pos:column="17"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></else></if>

  <return pos:line="26" pos:column="3">return <expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><literal type="number" pos:line="26" pos:column="11">0<pos:position pos:line="26" pos:column="12"/></literal><operator pos:line="26" pos:column="12">)<pos:position pos:line="26" pos:column="13"/></operator></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
