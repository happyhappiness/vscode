<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2911_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_shutdown_all<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <block pos:line="1" pos:column="31">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">llentry_t<pos:position pos:line="2" pos:column="12"/></name> <modifier pos:line="2" pos:column="13">*<pos:position pos:line="2" pos:column="14"/></modifier></type><name pos:line="2" pos:column="14">le<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">ret<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt> <comment type="line" pos:line="3" pos:column="16">// Assume success.</comment>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">destroy_all_callbacks<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><operator pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="26">list_init<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">stop_read_threads<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">()<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">pthread_mutex_lock<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">read_lock<pos:position pos:line="9" pos:column="32"/></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">llist_destroy<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">read_list<pos:position pos:line="10" pos:column="26"/></name></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">read_list<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">NULL<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">pthread_mutex_unlock<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="25">read_lock<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">destroy_read_heap<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">()<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* blocks until all write threads have shut down. */</comment>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">stop_write_threads<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">()<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* ask all plugins to write out the state they kept. */</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">plugin_flush<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<comment type="block" pos:line="20" pos:column="16">/* plugin = */</comment> <argument><expr><name pos:line="20" pos:column="31">NULL<pos:position pos:line="20" pos:column="35"/></name></expr></argument>,
               <comment type="block" pos:line="21" pos:column="16">/* timeout = */</comment> <argument><expr><literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>,
               <comment type="block" pos:line="22" pos:column="16">/* identifier = */</comment> <argument><expr><name pos:line="22" pos:column="35">NULL<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">le<pos:position pos:line="24" pos:column="5"/></name> <operator pos:line="24" pos:column="6">=<pos:position pos:line="24" pos:column="7"/></operator> <name pos:line="24" pos:column="8">NULL<pos:position pos:line="24" pos:column="12"/></name></expr>;<pos:position pos:line="24" pos:column="13"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">list_shutdown<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">!=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">NULL<pos:position pos:line="25" pos:column="28"/></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">le<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <call><name pos:line="26" pos:column="10">llist_head<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">list_shutdown<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt></block></then></if>

  <while pos:line="28" pos:column="3">while <condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">le<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">!=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">NULL<pos:position pos:line="28" pos:column="20"/></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition> <block pos:line="28" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">callback_func_t<pos:position pos:line="29" pos:column="20"/></name> <modifier pos:line="29" pos:column="21">*<pos:position pos:line="29" pos:column="22"/></modifier></type><name pos:line="29" pos:column="22">cf<pos:position pos:line="29" pos:column="24"/></name></decl>;<pos:position pos:line="29" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">plugin_shutdown_cb<pos:position pos:line="30" pos:column="23"/></name></type> <name pos:line="30" pos:column="24">callback<pos:position pos:line="30" pos:column="32"/></name></decl>;<pos:position pos:line="30" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">plugin_ctx_t<pos:position pos:line="31" pos:column="17"/></name></type> <name pos:line="31" pos:column="18">old_ctx<pos:position pos:line="31" pos:column="25"/></name></decl>;<pos:position pos:line="31" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">cf<pos:position pos:line="33" pos:column="7"/></name> <operator pos:line="33" pos:column="8">=<pos:position pos:line="33" pos:column="9"/></operator> <name><name pos:line="33" pos:column="10">le<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">value<pos:position pos:line="33" pos:column="19"/></name></name></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">old_ctx<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">plugin_set_ctx<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name><name pos:line="34" pos:column="30">cf<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">-&gt;<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="34">cf_ctx<pos:position pos:line="34" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">callback<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <name><name pos:line="35" pos:column="16">cf<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">cf_callback<pos:position pos:line="35" pos:column="31"/></name></name></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* Advance the pointer before calling the callback allows
     * shutdown functions to unregister themselves. If done the
     * other way around the memory `le' points to will be freed
     * after callback returns. */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">le<pos:position pos:line="41" pos:column="7"/></name> <operator pos:line="41" pos:column="8">=<pos:position pos:line="41" pos:column="9"/></operator> <name><name pos:line="41" pos:column="10">le<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">next<pos:position pos:line="41" pos:column="18"/></name></name></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call pos:line="43" pos:column="9">(<modifier pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></modifier><name pos:line="43" pos:column="11">callback<pos:position pos:line="43" pos:column="19"/></name>)<argument_list pos:line="43" pos:column="20">()<pos:position pos:line="43" pos:column="22"/></argument_list></call> <operator pos:line="43" pos:column="23">!=<pos:position pos:line="43" pos:column="25"/></operator> <literal type="number" pos:line="43" pos:column="26">0<pos:position pos:line="43" pos:column="27"/></literal></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">ret<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <operator pos:line="44" pos:column="13">-<pos:position pos:line="44" pos:column="14"/></operator><literal type="number" pos:line="44" pos:column="14">1<pos:position pos:line="44" pos:column="15"/></literal></expr>;<pos:position pos:line="44" pos:column="16"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">plugin_set_ctx<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">old_ctx<pos:position pos:line="46" pos:column="27"/></name></expr></argument>)<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></while>

  <comment type="block" pos:line="49" pos:column="3">/* Write plugins which use the `user_data' pointer usually need the
   * same data available to the flush callback. If this is the case, set
   * the free_function to NULL when registering the flush callback and to
   * the real free function when registering the write callback. This way
   * the data isn't freed twice. */</comment>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">destroy_all_callbacks<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><operator pos:line="54" pos:column="25">&amp;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="26">list_flush<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">destroy_all_callbacks<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><operator pos:line="55" pos:column="25">&amp;<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="26">list_missing<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">destroy_all_callbacks<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><operator pos:line="56" pos:column="25">&amp;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="26">list_write<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">destroy_all_callbacks<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><operator pos:line="58" pos:column="25">&amp;<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="26">list_notification<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">destroy_all_callbacks<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">list_shutdown<pos:position pos:line="59" pos:column="39"/></name></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">destroy_all_callbacks<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><operator pos:line="60" pos:column="25">&amp;<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="26">list_log<pos:position pos:line="60" pos:column="34"/></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="62" pos:column="3">plugin_free_loaded<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">()<pos:position pos:line="62" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">plugin_free_data_sets<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">()<pos:position pos:line="63" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
  <return pos:line="64" pos:column="3">return <expr><name pos:line="64" pos:column="10">ret<pos:position pos:line="64" pos:column="13"/></name></expr>;<pos:position pos:line="64" pos:column="14"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
