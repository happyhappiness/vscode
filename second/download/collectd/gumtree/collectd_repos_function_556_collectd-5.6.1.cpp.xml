<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_556_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">BMP085_detect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">__s32<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">res<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">errbuf<pos:position pos:line="4" pos:column="16"/></name><index pos:line="4" pos:column="16">[<expr><literal type="number" pos:line="4" pos:column="17">1024<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">ioctl<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">i2c_bus_fd<pos:position pos:line="6" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="27">I2C_SLAVE_FORCE<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="44">BMP085_I2C_ADDRESS<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call> <operator pos:line="6" pos:column="64">&lt;<pos:position pos:line="6" pos:column="68"/></operator> <literal type="number" pos:line="6" pos:column="66">0<pos:position pos:line="6" pos:column="67"/></literal></expr>)<pos:position pos:line="6" pos:column="68"/></condition><then pos:line="6" pos:column="68">
    <block pos:line="7" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">ERROR<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><literal type="string" pos:line="8" pos:column="15">"barometer: BMP085_detect - problem setting i2c slave address to 0x%02X: %s"<pos:position pos:line="8" pos:column="91"/></literal></expr></argument>,
              <argument><expr><name pos:line="9" pos:column="15">BMP085_I2C_ADDRESS<pos:position pos:line="9" pos:column="33"/></name></expr></argument>,
              <argument><expr><call><name pos:line="10" pos:column="15">sstrerror<pos:position pos:line="10" pos:column="24"/></name> <argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">errno<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">errbuf<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="41">sizeof <argument_list pos:line="10" pos:column="48">(<argument><expr><name pos:line="10" pos:column="49">errbuf<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr> ;<pos:position pos:line="11" pos:column="19"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="14" pos:column="5">res<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">i2c_smbus_read_byte_data<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">i2c_bus_fd<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">BMP085_ADDR_ID_REG<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="68"/></expr_stmt>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">res<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">==<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">BMP085_CHIP_ID<pos:position pos:line="15" pos:column="29"/></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30">
    <block pos:line="16" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">DEBUG<pos:position pos:line="17" pos:column="14"/></name> <argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="string" pos:line="17" pos:column="16">"barometer: BMP085_detect - positive detection"<pos:position pos:line="17" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>

        <comment type="block" pos:line="19" pos:column="9">/* get version */</comment>
        <expr_stmt><expr><name pos:line="20" pos:column="9">res<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">i2c_smbus_read_byte_data<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">i2c_bus_fd<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">BMP085_ADDR_VERSION<pos:position pos:line="20" pos:column="71"/></name></expr></argument> )<pos:position pos:line="20" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="74"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">res<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">&lt;<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr>)<pos:position pos:line="21" pos:column="21"/></condition><then pos:line="21" pos:column="21">
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">ERROR<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><literal type="string" pos:line="23" pos:column="19">"barometer: BMP085_detect - problem checking chip version: %s"<pos:position pos:line="23" pos:column="81"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="24" pos:column="19">sstrerror<pos:position pos:line="24" pos:column="28"/></name> <argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">errno<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">errbuf<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="45">sizeof <argument_list pos:line="24" pos:column="52">(<argument><expr><name pos:line="24" pos:column="53">errbuf<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><literal type="number" pos:line="25" pos:column="20">0<pos:position pos:line="25" pos:column="21"/></literal></expr> ;<pos:position pos:line="25" pos:column="23"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">DEBUG<pos:position pos:line="27" pos:column="14"/></name> <argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"barometer: BMP085_detect - chip version ML:0x%02X AL:0x%02X"<pos:position pos:line="27" pos:column="77"/></literal></expr></argument>,
               <argument><expr><name pos:line="28" pos:column="16">res<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">&amp;<pos:position pos:line="28" pos:column="25"/></operator> <literal type="number" pos:line="28" pos:column="22">0x0f<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>,
               <argument><expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">res<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">&amp;<pos:position pos:line="29" pos:column="26"/></operator> <literal type="number" pos:line="29" pos:column="23">0xf0<pos:position pos:line="29" pos:column="27"/></literal><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator> <operator pos:line="29" pos:column="29">&gt;&gt;<pos:position pos:line="29" pos:column="34"/></operator> <literal type="number" pos:line="29" pos:column="32">4<pos:position pos:line="29" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">1<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">DEBUG<pos:position pos:line="33" pos:column="10"/></name> <argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="string" pos:line="33" pos:column="12">"barometer: BMP085_detect - negative detection"<pos:position pos:line="33" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="61"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><literal type="number" pos:line="34" pos:column="12">0<pos:position pos:line="34" pos:column="13"/></literal></expr>;<pos:position pos:line="34" pos:column="14"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
