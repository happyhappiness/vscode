<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1279_collectd-4.10.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_putval<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">FILE<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">fh<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">buffer<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">command<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">identifier<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">hostname<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">plugin<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">plugin_instance<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">type<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">type_instance<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type>   <name pos:line="10" pos:column="15">status<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type>   <name pos:line="11" pos:column="15">values_submitted<pos:position pos:line="11" pos:column="31"/></name></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">identifier_copy<pos:position pos:line="13" pos:column="30"/></name></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">data_set_t<pos:position pos:line="15" pos:column="25"/></name> <modifier pos:line="15" pos:column="26">*<pos:position pos:line="15" pos:column="27"/></modifier></type><name pos:line="15" pos:column="27">ds<pos:position pos:line="15" pos:column="29"/></name></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">value_list_t<pos:position pos:line="16" pos:column="21"/></name></type> <name pos:line="16" pos:column="22">vl<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><name pos:line="16" pos:column="27">VALUE_LIST_INIT<pos:position pos:line="16" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="43"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">DEBUG<pos:position pos:line="18" pos:column="14"/></name> <argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"utils_cmd_putval: handle_putval (fh = %p, buffer = %s);"<pos:position pos:line="18" pos:column="73"/></literal></expr></argument>,
			<argument><expr><operator pos:line="19" pos:column="25">(<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">void<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">*<pos:position pos:line="19" pos:column="32"/></operator><operator pos:line="19" pos:column="32">)<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="34">fh<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">buffer<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">command<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">NULL<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">status<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">parse_string<pos:position pos:line="22" pos:column="30"/></name> <argument_list pos:line="22" pos:column="31">(<argument><expr><operator pos:line="22" pos:column="32">&amp;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="33">buffer<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="41">&amp;<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="42">command<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">status<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">!=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25">
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">print_to_socket<pos:position pos:line="25" pos:column="32"/></name> <argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">fh<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="38">"-1 Cannot parse command.\n"<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">(<pos:position pos:line="26" pos:column="25"/></operator><operator pos:line="26" pos:column="25">-<pos:position pos:line="26" pos:column="26"/></operator><literal type="number" pos:line="26" pos:column="26">1<pos:position pos:line="26" pos:column="27"/></literal><operator pos:line="26" pos:column="27">)<pos:position pos:line="26" pos:column="28"/></operator></expr>;<pos:position pos:line="26" pos:column="29"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">assert<pos:position pos:line="28" pos:column="15"/></name> <argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">command<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">!=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">NULL<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">strcasecmp<pos:position pos:line="30" pos:column="23"/></name> <argument_list pos:line="30" pos:column="24">(<argument><expr><literal type="string" pos:line="30" pos:column="25">"PUTVAL"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">command<pos:position pos:line="30" pos:column="42"/></name></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call> <operator pos:line="30" pos:column="44">!=<pos:position pos:line="30" pos:column="46"/></operator> <literal type="number" pos:line="30" pos:column="47">0<pos:position pos:line="30" pos:column="48"/></literal></expr>)<pos:position pos:line="30" pos:column="49"/></condition><then pos:line="30" pos:column="49">
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">print_to_socket<pos:position pos:line="32" pos:column="32"/></name> <argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">fh<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="38">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="32" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="72">command<pos:position pos:line="32" pos:column="79"/></name></expr></argument>)<pos:position pos:line="32" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="81"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><operator pos:line="33" pos:column="24">(<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">-<pos:position pos:line="33" pos:column="26"/></operator><literal type="number" pos:line="33" pos:column="26">1<pos:position pos:line="33" pos:column="27"/></literal><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator></expr>;<pos:position pos:line="33" pos:column="29"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">identifier<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">NULL<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">parse_string<pos:position pos:line="37" pos:column="30"/></name> <argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="33">buffer<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">identifier<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">status<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">!=<pos:position pos:line="38" pos:column="22"/></operator> <literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25">
	<block pos:line="39" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">print_to_socket<pos:position pos:line="40" pos:column="32"/></name> <argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">fh<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="38">"-1 Cannot parse identifier.\n"<pos:position pos:line="40" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><operator pos:line="41" pos:column="25">-<pos:position pos:line="41" pos:column="26"/></operator><literal type="number" pos:line="41" pos:column="26">1<pos:position pos:line="41" pos:column="27"/></literal><operator pos:line="41" pos:column="27">)<pos:position pos:line="41" pos:column="28"/></operator></expr>;<pos:position pos:line="41" pos:column="29"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">assert<pos:position pos:line="43" pos:column="15"/></name> <argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">identifier<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">!=<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">NULL<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="45" pos:column="9">/* parse_identifier() modifies its first argument,
	 * returning pointers into it */</comment>
	<expr_stmt><expr><name pos:line="47" pos:column="9">identifier_copy<pos:position pos:line="47" pos:column="24"/></name> <operator pos:line="47" pos:column="25">=<pos:position pos:line="47" pos:column="26"/></operator> <call><name pos:line="47" pos:column="27">sstrdup<pos:position pos:line="47" pos:column="34"/></name> <argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">identifier<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><name pos:line="49" pos:column="9">status<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">parse_identifier<pos:position pos:line="49" pos:column="34"/></name> <argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">identifier_copy<pos:position pos:line="49" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="53">&amp;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="54">hostname<pos:position pos:line="49" pos:column="62"/></name></expr></argument>,
			<argument><expr><operator pos:line="50" pos:column="25">&amp;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="26">plugin<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="34">&amp;<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="35">plugin_instance<pos:position pos:line="50" pos:column="50"/></name></expr></argument>,
			<argument><expr><operator pos:line="51" pos:column="25">&amp;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="26">type<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="32">&amp;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="33">type_instance<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">status<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">!=<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25">
	<block pos:line="53" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">DEBUG<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><literal type="string" pos:line="54" pos:column="24">"handle_putval: Cannot parse identifier `%s'."<pos:position pos:line="54" pos:column="70"/></literal></expr></argument>,
				<argument><expr><name pos:line="55" pos:column="33">identifier<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">print_to_socket<pos:position pos:line="56" pos:column="32"/></name> <argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">fh<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="38">"-1 Cannot parse identifier `%s'.\n"<pos:position pos:line="56" pos:column="74"/></literal></expr></argument>,
				<argument><expr><name pos:line="57" pos:column="33">identifier<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">sfree<pos:position pos:line="58" pos:column="22"/></name> <argument_list pos:line="58" pos:column="23">(<argument><expr><name pos:line="58" pos:column="24">identifier_copy<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
		<return pos:line="59" pos:column="17">return <expr><operator pos:line="59" pos:column="24">(<pos:position pos:line="59" pos:column="25"/></operator><operator pos:line="59" pos:column="25">-<pos:position pos:line="59" pos:column="26"/></operator><literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal><operator pos:line="59" pos:column="27">)<pos:position pos:line="59" pos:column="28"/></operator></expr>;<pos:position pos:line="59" pos:column="29"/></return>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">(<pos:position pos:line="62" pos:column="14"/></operator><call><name pos:line="62" pos:column="14">strlen<pos:position pos:line="62" pos:column="20"/></name> <argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">hostname<pos:position pos:line="62" pos:column="30"/></name></expr></argument>)<pos:position pos:line="62" pos:column="31"/></argument_list></call> <operator pos:line="62" pos:column="32">&gt;=<pos:position pos:line="62" pos:column="37"/></operator> <sizeof pos:line="62" pos:column="35">sizeof <argument_list pos:line="62" pos:column="42">(<argument><expr><name><name pos:line="62" pos:column="43">vl<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">.<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">host<pos:position pos:line="62" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></sizeof><operator pos:line="62" pos:column="51">)<pos:position pos:line="62" pos:column="52"/></operator>
			<operator pos:line="63" pos:column="25">||<pos:position pos:line="63" pos:column="27"/></operator> <operator pos:line="63" pos:column="28">(<pos:position pos:line="63" pos:column="29"/></operator><call><name pos:line="63" pos:column="29">strlen<pos:position pos:line="63" pos:column="35"/></name> <argument_list pos:line="63" pos:column="36">(<argument><expr><name pos:line="63" pos:column="37">plugin<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call> <operator pos:line="63" pos:column="45">&gt;=<pos:position pos:line="63" pos:column="50"/></operator> <sizeof pos:line="63" pos:column="48">sizeof <argument_list pos:line="63" pos:column="55">(<argument><expr><name><name pos:line="63" pos:column="56">vl<pos:position pos:line="63" pos:column="58"/></name><operator pos:line="63" pos:column="58">.<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="59">plugin<pos:position pos:line="63" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="66"/></argument_list></sizeof><operator pos:line="63" pos:column="66">)<pos:position pos:line="63" pos:column="67"/></operator>
			<operator pos:line="64" pos:column="25">||<pos:position pos:line="64" pos:column="27"/></operator> <operator pos:line="64" pos:column="28">(<pos:position pos:line="64" pos:column="29"/></operator><operator pos:line="64" pos:column="29">(<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">plugin_instance<pos:position pos:line="64" pos:column="45"/></name> <operator pos:line="64" pos:column="46">!=<pos:position pos:line="64" pos:column="48"/></operator> <name pos:line="64" pos:column="49">NULL<pos:position pos:line="64" pos:column="53"/></name><operator pos:line="64" pos:column="53">)<pos:position pos:line="64" pos:column="54"/></operator>
				<operator pos:line="65" pos:column="33">&amp;&amp;<pos:position pos:line="65" pos:column="43"/></operator> <operator pos:line="65" pos:column="36">(<pos:position pos:line="65" pos:column="37"/></operator><call><name pos:line="65" pos:column="37">strlen<pos:position pos:line="65" pos:column="43"/></name> <argument_list pos:line="65" pos:column="44">(<argument><expr><name pos:line="65" pos:column="45">plugin_instance<pos:position pos:line="65" pos:column="60"/></name></expr></argument>)<pos:position pos:line="65" pos:column="61"/></argument_list></call> <operator pos:line="65" pos:column="62">&gt;=<pos:position pos:line="65" pos:column="67"/></operator> <sizeof pos:line="65" pos:column="65">sizeof <argument_list pos:line="65" pos:column="72">(<argument><expr><name><name pos:line="65" pos:column="73">vl<pos:position pos:line="65" pos:column="75"/></name><operator pos:line="65" pos:column="75">.<pos:position pos:line="65" pos:column="76"/></operator><name pos:line="65" pos:column="76">plugin_instance<pos:position pos:line="65" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="92"/></argument_list></sizeof><operator pos:line="65" pos:column="92">)<pos:position pos:line="65" pos:column="93"/></operator><operator pos:line="65" pos:column="93">)<pos:position pos:line="65" pos:column="94"/></operator>
			<operator pos:line="66" pos:column="25">||<pos:position pos:line="66" pos:column="27"/></operator> <operator pos:line="66" pos:column="28">(<pos:position pos:line="66" pos:column="29"/></operator><operator pos:line="66" pos:column="29">(<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">type_instance<pos:position pos:line="66" pos:column="43"/></name> <operator pos:line="66" pos:column="44">!=<pos:position pos:line="66" pos:column="46"/></operator> <name pos:line="66" pos:column="47">NULL<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">)<pos:position pos:line="66" pos:column="52"/></operator>
				<operator pos:line="67" pos:column="33">&amp;&amp;<pos:position pos:line="67" pos:column="43"/></operator> <operator pos:line="67" pos:column="36">(<pos:position pos:line="67" pos:column="37"/></operator><call><name pos:line="67" pos:column="37">strlen<pos:position pos:line="67" pos:column="43"/></name> <argument_list pos:line="67" pos:column="44">(<argument><expr><name pos:line="67" pos:column="45">type_instance<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call> <operator pos:line="67" pos:column="60">&gt;=<pos:position pos:line="67" pos:column="65"/></operator> <sizeof pos:line="67" pos:column="63">sizeof <argument_list pos:line="67" pos:column="70">(<argument><expr><name><name pos:line="67" pos:column="71">vl<pos:position pos:line="67" pos:column="73"/></name><operator pos:line="67" pos:column="73">.<pos:position pos:line="67" pos:column="74"/></operator><name pos:line="67" pos:column="74">type_instance<pos:position pos:line="67" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="88"/></argument_list></sizeof><operator pos:line="67" pos:column="88">)<pos:position pos:line="67" pos:column="89"/></operator><operator pos:line="67" pos:column="89">)<pos:position pos:line="67" pos:column="90"/></operator></expr>)<pos:position pos:line="67" pos:column="91"/></condition><then pos:line="67" pos:column="91">
	<block pos:line="68" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">print_to_socket<pos:position pos:line="69" pos:column="32"/></name> <argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">fh<pos:position pos:line="69" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="38">"-1 Identifier too long.\n"<pos:position pos:line="69" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">sfree<pos:position pos:line="70" pos:column="22"/></name> <argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">identifier_copy<pos:position pos:line="70" pos:column="39"/></name></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
		<return pos:line="71" pos:column="17">return <expr><operator pos:line="71" pos:column="24">(<pos:position pos:line="71" pos:column="25"/></operator><operator pos:line="71" pos:column="25">-<pos:position pos:line="71" pos:column="26"/></operator><literal type="number" pos:line="71" pos:column="26">1<pos:position pos:line="71" pos:column="27"/></literal><operator pos:line="71" pos:column="27">)<pos:position pos:line="71" pos:column="28"/></operator></expr>;<pos:position pos:line="71" pos:column="29"/></return>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="74" pos:column="9">sstrncpy<pos:position pos:line="74" pos:column="17"/></name> <argument_list pos:line="74" pos:column="18">(<argument><expr><name><name pos:line="74" pos:column="19">vl<pos:position pos:line="74" pos:column="21"/></name><operator pos:line="74" pos:column="21">.<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="22">host<pos:position pos:line="74" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="28">hostname<pos:position pos:line="74" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="38">sizeof <argument_list pos:line="74" pos:column="45">(<argument><expr><name><name pos:line="74" pos:column="46">vl<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">.<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">host<pos:position pos:line="74" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">sstrncpy<pos:position pos:line="75" pos:column="17"/></name> <argument_list pos:line="75" pos:column="18">(<argument><expr><name><name pos:line="75" pos:column="19">vl<pos:position pos:line="75" pos:column="21"/></name><operator pos:line="75" pos:column="21">.<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="22">plugin<pos:position pos:line="75" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="30">plugin<pos:position pos:line="75" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="38">sizeof <argument_list pos:line="75" pos:column="45">(<argument><expr><name><name pos:line="75" pos:column="46">vl<pos:position pos:line="75" pos:column="48"/></name><operator pos:line="75" pos:column="48">.<pos:position pos:line="75" pos:column="49"/></operator><name pos:line="75" pos:column="49">plugin<pos:position pos:line="75" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">sstrncpy<pos:position pos:line="76" pos:column="17"/></name> <argument_list pos:line="76" pos:column="18">(<argument><expr><name><name pos:line="76" pos:column="19">vl<pos:position pos:line="76" pos:column="21"/></name><operator pos:line="76" pos:column="21">.<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">type<pos:position pos:line="76" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="28">type<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="34">sizeof <argument_list pos:line="76" pos:column="41">(<argument><expr><name><name pos:line="76" pos:column="42">vl<pos:position pos:line="76" pos:column="44"/></name><operator pos:line="76" pos:column="44">.<pos:position pos:line="76" pos:column="45"/></operator><name pos:line="76" pos:column="45">type<pos:position pos:line="76" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="52"/></expr_stmt>
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">plugin_instance<pos:position pos:line="77" pos:column="28"/></name> <operator pos:line="77" pos:column="29">!=<pos:position pos:line="77" pos:column="31"/></operator> <name pos:line="77" pos:column="32">NULL<pos:position pos:line="77" pos:column="36"/></name></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="17">sstrncpy<pos:position pos:line="78" pos:column="25"/></name> <argument_list pos:line="78" pos:column="26">(<argument><expr><name><name pos:line="78" pos:column="27">vl<pos:position pos:line="78" pos:column="29"/></name><operator pos:line="78" pos:column="29">.<pos:position pos:line="78" pos:column="30"/></operator><name pos:line="78" pos:column="30">plugin_instance<pos:position pos:line="78" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="47">plugin_instance<pos:position pos:line="78" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="64">sizeof <argument_list pos:line="78" pos:column="71">(<argument><expr><name><name pos:line="78" pos:column="72">vl<pos:position pos:line="78" pos:column="74"/></name><operator pos:line="78" pos:column="74">.<pos:position pos:line="78" pos:column="75"/></operator><name pos:line="78" pos:column="75">plugin_instance<pos:position pos:line="78" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="91"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="93"/></expr_stmt></block></then></if>
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">type_instance<pos:position pos:line="79" pos:column="26"/></name> <operator pos:line="79" pos:column="27">!=<pos:position pos:line="79" pos:column="29"/></operator> <name pos:line="79" pos:column="30">NULL<pos:position pos:line="79" pos:column="34"/></name></expr>)<pos:position pos:line="79" pos:column="35"/></condition><then pos:line="79" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="17">sstrncpy<pos:position pos:line="80" pos:column="25"/></name> <argument_list pos:line="80" pos:column="26">(<argument><expr><name><name pos:line="80" pos:column="27">vl<pos:position pos:line="80" pos:column="29"/></name><operator pos:line="80" pos:column="29">.<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="30">type_instance<pos:position pos:line="80" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="45">type_instance<pos:position pos:line="80" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="60">sizeof <argument_list pos:line="80" pos:column="67">(<argument><expr><name><name pos:line="80" pos:column="68">vl<pos:position pos:line="80" pos:column="70"/></name><operator pos:line="80" pos:column="70">.<pos:position pos:line="80" pos:column="71"/></operator><name pos:line="80" pos:column="71">type_instance<pos:position pos:line="80" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="87"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="82" pos:column="9">ds<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <call><name pos:line="82" pos:column="14">plugin_get_ds<pos:position pos:line="82" pos:column="27"/></name> <argument_list pos:line="82" pos:column="28">(<argument><expr><name pos:line="82" pos:column="29">type<pos:position pos:line="82" pos:column="33"/></name></expr></argument>)<pos:position pos:line="82" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="35"/></expr_stmt>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">ds<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">==<pos:position pos:line="83" pos:column="18"/></operator> <name pos:line="83" pos:column="19">NULL<pos:position pos:line="83" pos:column="23"/></name></expr>)<pos:position pos:line="83" pos:column="24"/></condition><then pos:line="83" pos:column="24"> <block pos:line="83" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">print_to_socket<pos:position pos:line="84" pos:column="32"/></name> <argument_list pos:line="84" pos:column="33">(<argument><expr><name pos:line="84" pos:column="34">fh<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="38">"-1 Type `%s' isn't defined.\n"<pos:position pos:line="84" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="71">type<pos:position pos:line="84" pos:column="75"/></name></expr></argument>)<pos:position pos:line="84" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">sfree<pos:position pos:line="85" pos:column="22"/></name> <argument_list pos:line="85" pos:column="23">(<argument><expr><name pos:line="85" pos:column="24">identifier_copy<pos:position pos:line="85" pos:column="39"/></name></expr></argument>)<pos:position pos:line="85" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="41"/></expr_stmt>
		<return pos:line="86" pos:column="17">return <expr><operator pos:line="86" pos:column="24">(<pos:position pos:line="86" pos:column="25"/></operator><operator pos:line="86" pos:column="25">-<pos:position pos:line="86" pos:column="26"/></operator><literal type="number" pos:line="86" pos:column="26">1<pos:position pos:line="86" pos:column="27"/></literal><operator pos:line="86" pos:column="27">)<pos:position pos:line="86" pos:column="28"/></operator></expr>;<pos:position pos:line="86" pos:column="29"/></return>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="89" pos:column="9">/* Free identifier_copy */</comment>
	<expr_stmt><expr><name pos:line="90" pos:column="9">hostname<pos:position pos:line="90" pos:column="17"/></name> <operator pos:line="90" pos:column="18">=<pos:position pos:line="90" pos:column="19"/></operator> <name pos:line="90" pos:column="20">NULL<pos:position pos:line="90" pos:column="24"/></name></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="91" pos:column="9">plugin<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator> <name pos:line="91" pos:column="18">NULL<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></expr_stmt> <expr_stmt><expr><name pos:line="91" pos:column="24">plugin_instance<pos:position pos:line="91" pos:column="39"/></name> <operator pos:line="91" pos:column="40">=<pos:position pos:line="91" pos:column="41"/></operator> <name pos:line="91" pos:column="42">NULL<pos:position pos:line="91" pos:column="46"/></name></expr>;<pos:position pos:line="91" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="92" pos:column="9">type<pos:position pos:line="92" pos:column="13"/></name> <operator pos:line="92" pos:column="14">=<pos:position pos:line="92" pos:column="15"/></operator> <name pos:line="92" pos:column="16">NULL<pos:position pos:line="92" pos:column="20"/></name></expr>;<pos:position pos:line="92" pos:column="21"/></expr_stmt>   <expr_stmt><expr><name pos:line="92" pos:column="24">type_instance<pos:position pos:line="92" pos:column="37"/></name> <operator pos:line="92" pos:column="38">=<pos:position pos:line="92" pos:column="39"/></operator> <name pos:line="92" pos:column="40">NULL<pos:position pos:line="92" pos:column="44"/></name></expr>;<pos:position pos:line="92" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="93" pos:column="9">sfree<pos:position pos:line="93" pos:column="14"/></name> <argument_list pos:line="93" pos:column="15">(<argument><expr><name pos:line="93" pos:column="16">identifier_copy<pos:position pos:line="93" pos:column="31"/></name></expr></argument>)<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="95" pos:column="9">vl<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">.<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">values_len<pos:position pos:line="95" pos:column="22"/></name></name> <operator pos:line="95" pos:column="23">=<pos:position pos:line="95" pos:column="24"/></operator> <name><name pos:line="95" pos:column="25">ds<pos:position pos:line="95" pos:column="27"/></name><operator pos:line="95" pos:column="27">-&gt;<pos:position pos:line="95" pos:column="32"/></operator><name pos:line="95" pos:column="29">ds_num<pos:position pos:line="95" pos:column="35"/></name></name></expr>;<pos:position pos:line="95" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="96" pos:column="9">vl<pos:position pos:line="96" pos:column="11"/></name><operator pos:line="96" pos:column="11">.<pos:position pos:line="96" pos:column="12"/></operator><name pos:line="96" pos:column="12">values<pos:position pos:line="96" pos:column="18"/></name></name> <operator pos:line="96" pos:column="19">=<pos:position pos:line="96" pos:column="20"/></operator> <operator pos:line="96" pos:column="21">(<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">value_t<pos:position pos:line="96" pos:column="29"/></name> <operator pos:line="96" pos:column="30">*<pos:position pos:line="96" pos:column="31"/></operator><operator pos:line="96" pos:column="31">)<pos:position pos:line="96" pos:column="32"/></operator> <call><name pos:line="96" pos:column="33">malloc<pos:position pos:line="96" pos:column="39"/></name> <argument_list pos:line="96" pos:column="40">(<argument><expr><name><name pos:line="96" pos:column="41">vl<pos:position pos:line="96" pos:column="43"/></name><operator pos:line="96" pos:column="43">.<pos:position pos:line="96" pos:column="44"/></operator><name pos:line="96" pos:column="44">values_len<pos:position pos:line="96" pos:column="54"/></name></name> <operator pos:line="96" pos:column="55">*<pos:position pos:line="96" pos:column="56"/></operator> <sizeof pos:line="96" pos:column="57">sizeof <argument_list pos:line="96" pos:column="64">(<argument><expr><name pos:line="96" pos:column="65">value_t<pos:position pos:line="96" pos:column="72"/></name></expr></argument>)<pos:position pos:line="96" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="75"/></expr_stmt>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name><name pos:line="97" pos:column="13">vl<pos:position pos:line="97" pos:column="15"/></name><operator pos:line="97" pos:column="15">.<pos:position pos:line="97" pos:column="16"/></operator><name pos:line="97" pos:column="16">values<pos:position pos:line="97" pos:column="22"/></name></name> <operator pos:line="97" pos:column="23">==<pos:position pos:line="97" pos:column="25"/></operator> <name pos:line="97" pos:column="26">NULL<pos:position pos:line="97" pos:column="30"/></name></expr>)<pos:position pos:line="97" pos:column="31"/></condition><then pos:line="97" pos:column="31">
	<block pos:line="98" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">print_to_socket<pos:position pos:line="99" pos:column="32"/></name> <argument_list pos:line="99" pos:column="33">(<argument><expr><name pos:line="99" pos:column="34">fh<pos:position pos:line="99" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="38">"-1 malloc failed.\n"<pos:position pos:line="99" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="61"/></expr_stmt>
		<return pos:line="100" pos:column="17">return <expr><operator pos:line="100" pos:column="24">(<pos:position pos:line="100" pos:column="25"/></operator><operator pos:line="100" pos:column="25">-<pos:position pos:line="100" pos:column="26"/></operator><literal type="number" pos:line="100" pos:column="26">1<pos:position pos:line="100" pos:column="27"/></literal><operator pos:line="100" pos:column="27">)<pos:position pos:line="100" pos:column="28"/></operator></expr>;<pos:position pos:line="100" pos:column="29"/></return>
	}<pos:position pos:line="101" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="103" pos:column="9">/* All the remaining fields are part of the optionlist. */</comment>
	<expr_stmt><expr><name pos:line="104" pos:column="9">values_submitted<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">=<pos:position pos:line="104" pos:column="27"/></operator> <literal type="number" pos:line="104" pos:column="28">0<pos:position pos:line="104" pos:column="29"/></literal></expr>;<pos:position pos:line="104" pos:column="30"/></expr_stmt>
	<while pos:line="105" pos:column="9">while <condition pos:line="105" pos:column="15">(<expr><operator pos:line="105" pos:column="16">*<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="17">buffer<pos:position pos:line="105" pos:column="23"/></name> <operator pos:line="105" pos:column="24">!=<pos:position pos:line="105" pos:column="26"/></operator> <literal type="number" pos:line="105" pos:column="27">0<pos:position pos:line="105" pos:column="28"/></literal></expr>)<pos:position pos:line="105" pos:column="29"/></condition>
	<block pos:line="106" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="107" pos:column="17">char<pos:position pos:line="107" pos:column="21"/></name> <modifier pos:line="107" pos:column="22">*<pos:position pos:line="107" pos:column="23"/></modifier></type><name pos:line="107" pos:column="23">string<pos:position pos:line="107" pos:column="29"/></name> <init pos:line="107" pos:column="30">= <expr><name pos:line="107" pos:column="32">NULL<pos:position pos:line="107" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="107" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">char<pos:position pos:line="108" pos:column="21"/></name> <modifier pos:line="108" pos:column="22">*<pos:position pos:line="108" pos:column="23"/></modifier></type><name pos:line="108" pos:column="23">value<pos:position pos:line="108" pos:column="28"/></name>  <init pos:line="108" pos:column="30">= <expr><name pos:line="108" pos:column="32">NULL<pos:position pos:line="108" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="108" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name pos:line="110" pos:column="17">status<pos:position pos:line="110" pos:column="23"/></name> <operator pos:line="110" pos:column="24">=<pos:position pos:line="110" pos:column="25"/></operator> <call><name pos:line="110" pos:column="26">parse_option<pos:position pos:line="110" pos:column="38"/></name> <argument_list pos:line="110" pos:column="39">(<argument><expr><operator pos:line="110" pos:column="40">&amp;<pos:position pos:line="110" pos:column="45"/></operator><name pos:line="110" pos:column="41">buffer<pos:position pos:line="110" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="49">&amp;<pos:position pos:line="110" pos:column="54"/></operator><name pos:line="110" pos:column="50">string<pos:position pos:line="110" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="58">&amp;<pos:position pos:line="110" pos:column="63"/></operator><name pos:line="110" pos:column="59">value<pos:position pos:line="110" pos:column="64"/></name></expr></argument>)<pos:position pos:line="110" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="66"/></expr_stmt>
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><name pos:line="111" pos:column="21">status<pos:position pos:line="111" pos:column="27"/></name> <operator pos:line="111" pos:column="28">&lt;<pos:position pos:line="111" pos:column="32"/></operator> <literal type="number" pos:line="111" pos:column="30">0<pos:position pos:line="111" pos:column="31"/></literal></expr>)<pos:position pos:line="111" pos:column="32"/></condition><then pos:line="111" pos:column="32">
		<block pos:line="112" pos:column="17">{
			<comment type="block" pos:line="113" pos:column="25">/* parse_option failed, buffer has been modified.
			 * =&gt; we need to abort */</comment>
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">print_to_socket<pos:position pos:line="115" pos:column="40"/></name> <argument_list pos:line="115" pos:column="41">(<argument><expr><name pos:line="115" pos:column="42">fh<pos:position pos:line="115" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="46">"-1 Misformatted option.\n"<pos:position pos:line="115" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="75"/></expr_stmt>
			<return pos:line="116" pos:column="25">return <expr><operator pos:line="116" pos:column="32">(<pos:position pos:line="116" pos:column="33"/></operator><operator pos:line="116" pos:column="33">-<pos:position pos:line="116" pos:column="34"/></operator><literal type="number" pos:line="116" pos:column="34">1<pos:position pos:line="116" pos:column="35"/></literal><operator pos:line="116" pos:column="35">)<pos:position pos:line="116" pos:column="36"/></operator></expr>;<pos:position pos:line="116" pos:column="37"/></return>
		}<pos:position pos:line="117" pos:column="18"/></block></then>
		<elseif pos:line="118" pos:column="17">else <if pos:line="118" pos:column="22">if <condition pos:line="118" pos:column="25">(<expr><name pos:line="118" pos:column="26">status<pos:position pos:line="118" pos:column="32"/></name> <operator pos:line="118" pos:column="33">==<pos:position pos:line="118" pos:column="35"/></operator> <literal type="number" pos:line="118" pos:column="36">0<pos:position pos:line="118" pos:column="37"/></literal></expr>)<pos:position pos:line="118" pos:column="38"/></condition><then pos:line="118" pos:column="38">
		<block pos:line="119" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">assert<pos:position pos:line="120" pos:column="31"/></name> <argument_list pos:line="120" pos:column="32">(<argument><expr><name pos:line="120" pos:column="33">string<pos:position pos:line="120" pos:column="39"/></name> <operator pos:line="120" pos:column="40">!=<pos:position pos:line="120" pos:column="42"/></operator> <name pos:line="120" pos:column="43">NULL<pos:position pos:line="120" pos:column="47"/></name></expr></argument>)<pos:position pos:line="120" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="121" pos:column="25">assert<pos:position pos:line="121" pos:column="31"/></name> <argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">value<pos:position pos:line="121" pos:column="38"/></name> <operator pos:line="121" pos:column="39">!=<pos:position pos:line="121" pos:column="41"/></operator> <name pos:line="121" pos:column="42">NULL<pos:position pos:line="121" pos:column="46"/></name></expr></argument>)<pos:position pos:line="121" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="122" pos:column="25">set_option<pos:position pos:line="122" pos:column="35"/></name> <argument_list pos:line="122" pos:column="36">(<argument><expr><operator pos:line="122" pos:column="37">&amp;<pos:position pos:line="122" pos:column="42"/></operator><name pos:line="122" pos:column="38">vl<pos:position pos:line="122" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="42">string<pos:position pos:line="122" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="50">value<pos:position pos:line="122" pos:column="55"/></name></expr></argument>)<pos:position pos:line="122" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="57"/></expr_stmt>
			<continue pos:line="123" pos:column="25">continue;<pos:position pos:line="123" pos:column="34"/></continue>
		}<pos:position pos:line="124" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="125" pos:column="17">/* else: parse_option but buffer has not been modified. This is
		 * the default if no `=' is found.. */</comment>

		<expr_stmt><expr><name pos:line="128" pos:column="17">status<pos:position pos:line="128" pos:column="23"/></name> <operator pos:line="128" pos:column="24">=<pos:position pos:line="128" pos:column="25"/></operator> <call><name pos:line="128" pos:column="26">parse_string<pos:position pos:line="128" pos:column="38"/></name> <argument_list pos:line="128" pos:column="39">(<argument><expr><operator pos:line="128" pos:column="40">&amp;<pos:position pos:line="128" pos:column="45"/></operator><name pos:line="128" pos:column="41">buffer<pos:position pos:line="128" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="49">&amp;<pos:position pos:line="128" pos:column="54"/></operator><name pos:line="128" pos:column="50">string<pos:position pos:line="128" pos:column="56"/></name></expr></argument>)<pos:position pos:line="128" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="58"/></expr_stmt>
		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><name pos:line="129" pos:column="21">status<pos:position pos:line="129" pos:column="27"/></name> <operator pos:line="129" pos:column="28">!=<pos:position pos:line="129" pos:column="30"/></operator> <literal type="number" pos:line="129" pos:column="31">0<pos:position pos:line="129" pos:column="32"/></literal></expr>)<pos:position pos:line="129" pos:column="33"/></condition><then pos:line="129" pos:column="33">
		<block pos:line="130" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="131" pos:column="25">print_to_socket<pos:position pos:line="131" pos:column="40"/></name> <argument_list pos:line="131" pos:column="41">(<argument><expr><name pos:line="131" pos:column="42">fh<pos:position pos:line="131" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="46">"-1 Misformatted value.\n"<pos:position pos:line="131" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="74"/></expr_stmt>
			<return pos:line="132" pos:column="25">return <expr><operator pos:line="132" pos:column="32">(<pos:position pos:line="132" pos:column="33"/></operator><operator pos:line="132" pos:column="33">-<pos:position pos:line="132" pos:column="34"/></operator><literal type="number" pos:line="132" pos:column="34">1<pos:position pos:line="132" pos:column="35"/></literal><operator pos:line="132" pos:column="35">)<pos:position pos:line="132" pos:column="36"/></operator></expr>;<pos:position pos:line="132" pos:column="37"/></return>
		}<pos:position pos:line="133" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">assert<pos:position pos:line="134" pos:column="23"/></name> <argument_list pos:line="134" pos:column="24">(<argument><expr><name pos:line="134" pos:column="25">string<pos:position pos:line="134" pos:column="31"/></name> <operator pos:line="134" pos:column="32">!=<pos:position pos:line="134" pos:column="34"/></operator> <name pos:line="134" pos:column="35">NULL<pos:position pos:line="134" pos:column="39"/></name></expr></argument>)<pos:position pos:line="134" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="41"/></expr_stmt>

		<expr_stmt><expr><name pos:line="136" pos:column="17">status<pos:position pos:line="136" pos:column="23"/></name> <operator pos:line="136" pos:column="24">=<pos:position pos:line="136" pos:column="25"/></operator> <call><name pos:line="136" pos:column="26">dispatch_values<pos:position pos:line="136" pos:column="41"/></name> <argument_list pos:line="136" pos:column="42">(<argument><expr><name pos:line="136" pos:column="43">ds<pos:position pos:line="136" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="136" pos:column="47">&amp;<pos:position pos:line="136" pos:column="52"/></operator><name pos:line="136" pos:column="48">vl<pos:position pos:line="136" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="52">fh<pos:position pos:line="136" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="56">string<pos:position pos:line="136" pos:column="62"/></name></expr></argument>)<pos:position pos:line="136" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="64"/></expr_stmt>
		<if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><name pos:line="137" pos:column="21">status<pos:position pos:line="137" pos:column="27"/></name> <operator pos:line="137" pos:column="28">!=<pos:position pos:line="137" pos:column="30"/></operator> <literal type="number" pos:line="137" pos:column="31">0<pos:position pos:line="137" pos:column="32"/></literal></expr>)<pos:position pos:line="137" pos:column="33"/></condition><then pos:line="137" pos:column="33">
		<block pos:line="138" pos:column="17">{
			<comment type="block" pos:line="139" pos:column="25">/* An error has already been printed. */</comment>
			<return pos:line="140" pos:column="25">return <expr><operator pos:line="140" pos:column="32">(<pos:position pos:line="140" pos:column="33"/></operator><operator pos:line="140" pos:column="33">-<pos:position pos:line="140" pos:column="34"/></operator><literal type="number" pos:line="140" pos:column="34">1<pos:position pos:line="140" pos:column="35"/></literal><operator pos:line="140" pos:column="35">)<pos:position pos:line="140" pos:column="36"/></operator></expr>;<pos:position pos:line="140" pos:column="37"/></return>
		}<pos:position pos:line="141" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="142" pos:column="17">values_submitted<pos:position pos:line="142" pos:column="33"/></name><operator pos:line="142" pos:column="33">++<pos:position pos:line="142" pos:column="35"/></operator></expr>;<pos:position pos:line="142" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="143" pos:column="10"/></block></while> <comment type="block" pos:line="143" pos:column="11">/* while (*buffer != 0) */</comment>
	<comment type="block" pos:line="144" pos:column="9">/* Done parsing the options. */</comment>

	<expr_stmt><expr><call><name pos:line="146" pos:column="9">print_to_socket<pos:position pos:line="146" pos:column="24"/></name> <argument_list pos:line="146" pos:column="25">(<argument><expr><name pos:line="146" pos:column="26">fh<pos:position pos:line="146" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="30">"0 Success: %i %s been dispatched.\n"<pos:position pos:line="146" pos:column="67"/></literal></expr></argument>,
			<argument><expr><name pos:line="147" pos:column="25">values_submitted<pos:position pos:line="147" pos:column="41"/></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator pos:line="148" pos:column="25">(<pos:position pos:line="148" pos:column="26"/></operator><name pos:line="148" pos:column="26">values_submitted<pos:position pos:line="148" pos:column="42"/></name> <operator pos:line="148" pos:column="43">==<pos:position pos:line="148" pos:column="45"/></operator> <literal type="number" pos:line="148" pos:column="46">1<pos:position pos:line="148" pos:column="47"/></literal><operator pos:line="148" pos:column="47">)<pos:position pos:line="148" pos:column="48"/></operator></expr> ?<pos:position pos:line="148" pos:column="50"/></condition><then pos:line="148" pos:column="50"> <expr><literal type="string" pos:line="148" pos:column="51">"value has"<pos:position pos:line="148" pos:column="62"/></literal></expr> <pos:position pos:line="148" pos:column="63"/></then><else pos:line="148" pos:column="63">: <expr><literal type="string" pos:line="148" pos:column="65">"values have"<pos:position pos:line="148" pos:column="78"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="148" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="80"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="150" pos:column="9">sfree<pos:position pos:line="150" pos:column="14"/></name> <argument_list pos:line="150" pos:column="15">(<argument><expr><name><name pos:line="150" pos:column="16">vl<pos:position pos:line="150" pos:column="18"/></name><operator pos:line="150" pos:column="18">.<pos:position pos:line="150" pos:column="19"/></operator><name pos:line="150" pos:column="19">values<pos:position pos:line="150" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="150" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="27"/></expr_stmt> 

	<return pos:line="152" pos:column="9">return <expr><operator pos:line="152" pos:column="16">(<pos:position pos:line="152" pos:column="17"/></operator><literal type="number" pos:line="152" pos:column="17">0<pos:position pos:line="152" pos:column="18"/></literal><operator pos:line="152" pos:column="18">)<pos:position pos:line="152" pos:column="19"/></operator></expr>;<pos:position pos:line="152" pos:column="20"/></return>
}<pos:position pos:line="153" pos:column="2"/></block></function></unit>
