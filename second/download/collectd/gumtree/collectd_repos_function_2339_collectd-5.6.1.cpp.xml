<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2339_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ignorelist_add<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">ignorelist_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">il<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">entry<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">il<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">==<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
	<block pos:line="6" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">DEBUG<pos:position pos:line="7" pos:column="22"/></name> <argument_list pos:line="7" pos:column="23">(<argument><expr><literal type="string" pos:line="7" pos:column="24">"add called with ignorelist_t == NULL"<pos:position pos:line="7" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="64"/></expr_stmt>
		<return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><literal type="number" pos:line="8" pos:column="25">1<pos:position pos:line="8" pos:column="26"/></literal><operator pos:line="8" pos:column="26">)<pos:position pos:line="8" pos:column="27"/></operator></expr>;<pos:position pos:line="8" pos:column="28"/></return>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">len<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">strlen<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">entry<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* append nothing */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">len<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22">
	<block pos:line="15" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">DEBUG<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="string" pos:line="16" pos:column="23">"not appending: empty entry"<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal><operator pos:line="17" pos:column="26">)<pos:position pos:line="17" pos:column="27"/></operator></expr>;<pos:position pos:line="17" pos:column="28"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">HAVE_REGEX_H<pos:position pos:line="20" pos:column="17"/></name></expr></cpp:if>
	<comment type="block" pos:line="21" pos:column="9">/* regex string is enclosed in "/.../" */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">len<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">&gt;<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="20">2<pos:position pos:line="22" pos:column="21"/></literal><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator> <operator pos:line="22" pos:column="23">&amp;&amp;<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><name><name pos:line="22" pos:column="27">entry<pos:position pos:line="22" pos:column="32"/></name><index pos:line="22" pos:column="32">[<expr><literal type="number" pos:line="22" pos:column="33">0<pos:position pos:line="22" pos:column="34"/></literal></expr>]<pos:position pos:line="22" pos:column="35"/></index></name> <operator pos:line="22" pos:column="36">==<pos:position pos:line="22" pos:column="38"/></operator> <literal type="char" pos:line="22" pos:column="39">'/'<pos:position pos:line="22" pos:column="42"/></literal><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator> <operator pos:line="22" pos:column="44">&amp;&amp;<pos:position pos:line="22" pos:column="54"/></operator> <name><name pos:line="22" pos:column="47">entry<pos:position pos:line="22" pos:column="52"/></name><index pos:line="22" pos:column="52">[<expr><name pos:line="22" pos:column="53">len<pos:position pos:line="22" pos:column="56"/></name> <operator pos:line="22" pos:column="57">-<pos:position pos:line="22" pos:column="58"/></operator> <literal type="number" pos:line="22" pos:column="59">1<pos:position pos:line="22" pos:column="60"/></literal></expr>]<pos:position pos:line="22" pos:column="61"/></index></name> <operator pos:line="22" pos:column="62">==<pos:position pos:line="22" pos:column="64"/></operator> <literal type="char" pos:line="22" pos:column="65">'/'<pos:position pos:line="22" pos:column="68"/></literal></expr>)<pos:position pos:line="22" pos:column="69"/></condition><then pos:line="22" pos:column="69">
	<block pos:line="23" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">char<pos:position pos:line="24" pos:column="21"/></name> <modifier pos:line="24" pos:column="22">*<pos:position pos:line="24" pos:column="23"/></modifier></type><name pos:line="24" pos:column="23">copy<pos:position pos:line="24" pos:column="27"/></name></decl>;<pos:position pos:line="24" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">status<pos:position pos:line="25" pos:column="27"/></name></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>

		<comment type="block" pos:line="27" pos:column="17">/* skip leading slash */</comment>
		<expr_stmt><expr><name pos:line="28" pos:column="17">copy<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">strdup<pos:position pos:line="28" pos:column="30"/></name> <argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">entry<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">+<pos:position pos:line="28" pos:column="39"/></operator> <literal type="number" pos:line="28" pos:column="40">1<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">copy<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">==<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">NULL<pos:position pos:line="29" pos:column="33"/></name></expr>)<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34">
			<block type="pseudo"><return pos:line="30" pos:column="25">return <expr><name pos:line="30" pos:column="32">ENOMEM<pos:position pos:line="30" pos:column="38"/></name></expr>;<pos:position pos:line="30" pos:column="39"/></return></block></then></if>

		<comment type="block" pos:line="32" pos:column="17">/* trim trailing slash */</comment>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">copy<pos:position pos:line="33" pos:column="21"/></name><index pos:line="33" pos:column="21">[<expr><call><name pos:line="33" pos:column="22">strlen<pos:position pos:line="33" pos:column="28"/></name> <argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">copy<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call> <operator pos:line="33" pos:column="36">-<pos:position pos:line="33" pos:column="37"/></operator> <literal type="number" pos:line="33" pos:column="38">1<pos:position pos:line="33" pos:column="39"/></literal></expr>]<pos:position pos:line="33" pos:column="40"/></index></name> <operator pos:line="33" pos:column="41">=<pos:position pos:line="33" pos:column="42"/></operator> <literal type="number" pos:line="33" pos:column="43">0<pos:position pos:line="33" pos:column="44"/></literal></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>

		<expr_stmt><expr><name pos:line="35" pos:column="17">status<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">ignorelist_append_regex<pos:position pos:line="35" pos:column="49"/></name> <argument_list pos:line="35" pos:column="50">(<argument><expr><name pos:line="35" pos:column="51">il<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">copy<pos:position pos:line="35" pos:column="59"/></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">sfree<pos:position pos:line="36" pos:column="22"/></name> <argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">copy<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
		<return pos:line="37" pos:column="17">return <expr><name pos:line="37" pos:column="24">status<pos:position pos:line="37" pos:column="30"/></name></expr>;<pos:position pos:line="37" pos:column="31"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="41" pos:column="9">return <expr><call><name pos:line="41" pos:column="16">ignorelist_append_string<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">il<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">entry<pos:position pos:line="41" pos:column="50"/></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="52"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
