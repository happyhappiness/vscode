<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2333_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ignorelist_append_regex<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">ignorelist_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">il<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">re_str<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list> <block pos:line="1" pos:column="74">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">regex_t<pos:position pos:line="2" pos:column="10"/></name> <modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">re<pos:position pos:line="2" pos:column="14"/></name></decl>;<pos:position pos:line="2" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ignorelist_item_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">entry<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">re<pos:position pos:line="6" pos:column="5"/></name> <operator pos:line="6" pos:column="6">=<pos:position pos:line="6" pos:column="7"/></operator> <call><name pos:line="6" pos:column="8">calloc<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><literal type="number" pos:line="6" pos:column="15">1<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="18">sizeof<argument_list pos:line="6" pos:column="24">(<argument><expr><operator pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">re<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">re<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">==<pos:position pos:line="7" pos:column="12"/></operator> <name pos:line="7" pos:column="13">NULL<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18"> <block pos:line="7" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"ignorelist_append_regex: calloc failed."<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">ENOMEM<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">)<pos:position pos:line="9" pos:column="20"/></operator></expr>;<pos:position pos:line="9" pos:column="21"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">status<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <call><name pos:line="12" pos:column="12">regcomp<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">re<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">re_str<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">REG_EXTENDED<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">!=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">errbuf<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><literal type="number" pos:line="14" pos:column="17">1024<pos:position pos:line="14" pos:column="21"/></literal></expr>]<pos:position pos:line="14" pos:column="22"/></index></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">(<pos:position pos:line="15" pos:column="6"/></operator><name pos:line="15" pos:column="6">void<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">)<pos:position pos:line="15" pos:column="11"/></operator><call><name pos:line="15" pos:column="11">regerror<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">status<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">re<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">errbuf<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="40">sizeof<argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">errbuf<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ERROR<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><literal type="string" pos:line="16" pos:column="11">"utils_ignorelist: regcomp failed: %s"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">errbuf<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"ignorelist_append_regex: Compiling regular expression \"%s\" "<pos:position pos:line="17" pos:column="74"/></literal>
          <literal type="string" pos:line="18" pos:column="11">"failed: %s"<pos:position pos:line="18" pos:column="23"/></literal></expr></argument>,
          <argument><expr><name pos:line="19" pos:column="11">re_str<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">errbuf<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">sfree<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">re<pos:position pos:line="20" pos:column="13"/></name></expr></argument>)<pos:position pos:line="20" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">status<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">)<pos:position pos:line="21" pos:column="20"/></operator></expr>;<pos:position pos:line="21" pos:column="21"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">entry<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">calloc<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="number" pos:line="24" pos:column="18">1<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="21">sizeof<argument_list pos:line="24" pos:column="27">(<argument><expr><operator pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">entry<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">entry<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">NULL<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21"> <block pos:line="25" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ERROR<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><literal type="string" pos:line="26" pos:column="11">"ignorelist_append_regex: calloc failed."<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">regfree<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">re<pos:position pos:line="27" pos:column="15"/></name></expr></argument>)<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sfree<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><name pos:line="28" pos:column="11">re<pos:position pos:line="28" pos:column="13"/></name></expr></argument>)<pos:position pos:line="28" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="15"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">ENOMEM<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">)<pos:position pos:line="29" pos:column="20"/></operator></expr>;<pos:position pos:line="29" pos:column="21"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">entry<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">-&gt;<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="10">rmatch<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">re<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">ignorelist_append<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">il<pos:position pos:line="33" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="25">entry<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
  <return pos:line="34" pos:column="3">return <expr><operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal><operator pos:line="34" pos:column="12">)<pos:position pos:line="34" pos:column="13"/></operator></expr>;<pos:position pos:line="34" pos:column="14"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
