<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_950_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">zookeeper_config<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">key<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">value<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">strncmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">key<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="26">"Host"<pos:position pos:line="3" pos:column="32"/></literal></expr></argument>, <argument><expr><call><name pos:line="3" pos:column="34">strlen<pos:position pos:line="3" pos:column="40"/></name><argument_list pos:line="3" pos:column="40">(<argument><expr><literal type="string" pos:line="3" pos:column="41">"Host"<pos:position pos:line="3" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="49"/></argument_list></call> <operator pos:line="3" pos:column="50">==<pos:position pos:line="3" pos:column="52"/></operator> <literal type="number" pos:line="3" pos:column="53">0<pos:position pos:line="3" pos:column="54"/></literal></expr>)<pos:position pos:line="3" pos:column="55"/></condition><then pos:line="3" pos:column="55">
	<block pos:line="4" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">sfree<pos:position pos:line="5" pos:column="22"/></name> <argument_list pos:line="5" pos:column="23">(<argument><expr><name pos:line="5" pos:column="24">zk_host<pos:position pos:line="5" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="6" pos:column="17">zk_host<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">=<pos:position pos:line="6" pos:column="26"/></operator> <call><name pos:line="6" pos:column="27">strdup<pos:position pos:line="6" pos:column="33"/></name> <argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">value<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="7" pos:column="10"/></block></then>
	<elseif pos:line="8" pos:column="9">else <if pos:line="8" pos:column="14">if <condition pos:line="8" pos:column="17">(<expr><call><name pos:line="8" pos:column="18">strncmp<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">key<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"Port"<pos:position pos:line="8" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="39">strlen<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">(<argument><expr><literal type="string" pos:line="8" pos:column="46">"Port"<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call> <operator pos:line="8" pos:column="55">==<pos:position pos:line="8" pos:column="57"/></operator> <literal type="number" pos:line="8" pos:column="58">0<pos:position pos:line="8" pos:column="59"/></literal></expr>)<pos:position pos:line="8" pos:column="60"/></condition><then pos:line="8" pos:column="60">
	<block pos:line="9" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">sfree<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">zk_port<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">zk_port<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <call><name pos:line="11" pos:column="27">strdup<pos:position pos:line="11" pos:column="33"/></name> <argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">value<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if></elseif>
	<else pos:line="13" pos:column="9">else
	<block pos:line="14" pos:column="9">{
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></else></if>
	<return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
