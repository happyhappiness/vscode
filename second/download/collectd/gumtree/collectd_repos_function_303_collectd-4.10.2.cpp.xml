<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_303_collectd-4.10.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">us_handle_client<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fdin<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fdout<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">FILE<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">fhin<pos:position pos:line="5" pos:column="19"/></name></decl>, <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="22">fhout<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">fdin<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <operator pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></operator><operator pos:line="7" pos:column="17">(<pos:position pos:line="7" pos:column="18"/></operator><operator pos:line="7" pos:column="18">(<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">int<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></operator><operator pos:line="7" pos:column="24">)<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">arg<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">)<pos:position pos:line="7" pos:column="30"/></operator></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">free<pos:position pos:line="8" pos:column="13"/></name> <argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">arg<pos:position pos:line="8" pos:column="18"/></name></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">arg<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">NULL<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">DEBUG<pos:position pos:line="11" pos:column="14"/></name> <argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"unixsock plugin: us_handle_client: Reading from fd #%i"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="74">fdin<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="80"/></expr_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">fdout<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">dup<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">fdin<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">fdout<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23">
	<block pos:line="15" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name></type> <name><name pos:line="16" pos:column="22">errbuf<pos:position pos:line="16" pos:column="28"/></name><index pos:line="16" pos:column="28">[<expr><literal type="number" pos:line="16" pos:column="29">1024<pos:position pos:line="16" pos:column="33"/></literal></expr>]<pos:position pos:line="16" pos:column="34"/></index></name></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">ERROR<pos:position pos:line="17" pos:column="22"/></name> <argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="string" pos:line="17" pos:column="24">"unixsock plugin: dup failed: %s"<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="18" pos:column="33">sstrerror<pos:position pos:line="18" pos:column="42"/></name> <argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">errno<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">errbuf<pos:position pos:line="18" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="59">sizeof <argument_list pos:line="18" pos:column="66">(<argument><expr><name pos:line="18" pos:column="67">errbuf<pos:position pos:line="18" pos:column="73"/></name></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">close<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">fdin<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">pthread_exit<pos:position pos:line="20" pos:column="29"/></name> <argument_list pos:line="20" pos:column="30">(<argument><expr><operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">void<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator><operator pos:line="20" pos:column="38">)<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="40">1<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">fhin<pos:position pos:line="23" pos:column="13"/></name>  <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <call><name pos:line="23" pos:column="17">fdopen<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">fdin<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="31">"r"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">fhin<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">==<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">NULL<pos:position pos:line="24" pos:column="25"/></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26">
	<block pos:line="25" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name></type> <name><name pos:line="26" pos:column="22">errbuf<pos:position pos:line="26" pos:column="28"/></name><index pos:line="26" pos:column="28">[<expr><literal type="number" pos:line="26" pos:column="29">1024<pos:position pos:line="26" pos:column="33"/></literal></expr>]<pos:position pos:line="26" pos:column="34"/></index></name></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">ERROR<pos:position pos:line="27" pos:column="22"/></name> <argument_list pos:line="27" pos:column="23">(<argument><expr><literal type="string" pos:line="27" pos:column="24">"unixsock plugin: fdopen failed: %s"<pos:position pos:line="27" pos:column="60"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="28" pos:column="33">sstrerror<pos:position pos:line="28" pos:column="42"/></name> <argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">errno<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">errbuf<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="59">sizeof <argument_list pos:line="28" pos:column="66">(<argument><expr><name pos:line="28" pos:column="67">errbuf<pos:position pos:line="28" pos:column="73"/></name></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">close<pos:position pos:line="29" pos:column="22"/></name> <argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">fdin<pos:position pos:line="29" pos:column="28"/></name></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">close<pos:position pos:line="30" pos:column="22"/></name> <argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">fdout<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">pthread_exit<pos:position pos:line="31" pos:column="29"/></name> <argument_list pos:line="31" pos:column="30">(<argument><expr><operator pos:line="31" pos:column="31">(<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">void<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">*<pos:position pos:line="31" pos:column="38"/></operator><operator pos:line="31" pos:column="38">)<pos:position pos:line="31" pos:column="39"/></operator> <literal type="number" pos:line="31" pos:column="40">1<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="34" pos:column="9">fhout<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <call><name pos:line="34" pos:column="17">fdopen<pos:position pos:line="34" pos:column="23"/></name> <argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">fdout<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="32">"w"<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">fhout<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">==<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">NULL<pos:position pos:line="35" pos:column="26"/></name></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27">
	<block pos:line="36" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">char<pos:position pos:line="37" pos:column="21"/></name></type> <name><name pos:line="37" pos:column="22">errbuf<pos:position pos:line="37" pos:column="28"/></name><index pos:line="37" pos:column="28">[<expr><literal type="number" pos:line="37" pos:column="29">1024<pos:position pos:line="37" pos:column="33"/></literal></expr>]<pos:position pos:line="37" pos:column="34"/></index></name></decl>;<pos:position pos:line="37" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">ERROR<pos:position pos:line="38" pos:column="22"/></name> <argument_list pos:line="38" pos:column="23">(<argument><expr><literal type="string" pos:line="38" pos:column="24">"unixsock plugin: fdopen failed: %s"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="39" pos:column="33">sstrerror<pos:position pos:line="39" pos:column="42"/></name> <argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">errno<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">errbuf<pos:position pos:line="39" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="59">sizeof <argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">errbuf<pos:position pos:line="39" pos:column="73"/></name></expr></argument>)<pos:position pos:line="39" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">fclose<pos:position pos:line="40" pos:column="23"/></name> <argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">fhin<pos:position pos:line="40" pos:column="29"/></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt> <comment type="block" pos:line="40" pos:column="32">/* this closes fdin as well */</comment>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">close<pos:position pos:line="41" pos:column="22"/></name> <argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">fdout<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">pthread_exit<pos:position pos:line="42" pos:column="29"/></name> <argument_list pos:line="42" pos:column="30">(<argument><expr><operator pos:line="42" pos:column="31">(<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="32">void<pos:position pos:line="42" pos:column="36"/></name> <operator pos:line="42" pos:column="37">*<pos:position pos:line="42" pos:column="38"/></operator><operator pos:line="42" pos:column="38">)<pos:position pos:line="42" pos:column="39"/></operator> <literal type="number" pos:line="42" pos:column="40">1<pos:position pos:line="42" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/* change output buffer to line buffered mode */</comment>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">setvbuf<pos:position pos:line="46" pos:column="20"/></name> <argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">fhout<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">NULL<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">_IOLBF<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call> <operator pos:line="46" pos:column="46">!=<pos:position pos:line="46" pos:column="48"/></operator> <literal type="number" pos:line="46" pos:column="49">0<pos:position pos:line="46" pos:column="50"/></literal></expr>)<pos:position pos:line="46" pos:column="51"/></condition><then pos:line="46" pos:column="51">
	<block pos:line="47" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">char<pos:position pos:line="48" pos:column="21"/></name></type> <name><name pos:line="48" pos:column="22">errbuf<pos:position pos:line="48" pos:column="28"/></name><index pos:line="48" pos:column="28">[<expr><literal type="number" pos:line="48" pos:column="29">1024<pos:position pos:line="48" pos:column="33"/></literal></expr>]<pos:position pos:line="48" pos:column="34"/></index></name></decl>;<pos:position pos:line="48" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">ERROR<pos:position pos:line="49" pos:column="22"/></name> <argument_list pos:line="49" pos:column="23">(<argument><expr><literal type="string" pos:line="49" pos:column="24">"unixsock plugin: setvbuf failed: %s"<pos:position pos:line="49" pos:column="61"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="50" pos:column="33">sstrerror<pos:position pos:line="50" pos:column="42"/></name> <argument_list pos:line="50" pos:column="43">(<argument><expr><name pos:line="50" pos:column="44">errno<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="51">errbuf<pos:position pos:line="50" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="59">sizeof <argument_list pos:line="50" pos:column="66">(<argument><expr><name pos:line="50" pos:column="67">errbuf<pos:position pos:line="50" pos:column="73"/></name></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">fclose<pos:position pos:line="51" pos:column="23"/></name> <argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">fhin<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">fclose<pos:position pos:line="52" pos:column="23"/></name> <argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">fhout<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">pthread_exit<pos:position pos:line="53" pos:column="29"/></name> <argument_list pos:line="53" pos:column="30">(<argument><expr><operator pos:line="53" pos:column="31">(<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">void<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">*<pos:position pos:line="53" pos:column="38"/></operator><operator pos:line="53" pos:column="38">)<pos:position pos:line="53" pos:column="39"/></operator> <literal type="number" pos:line="53" pos:column="40">1<pos:position pos:line="53" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

	<while pos:line="56" pos:column="9">while <condition pos:line="56" pos:column="15">(<expr><literal type="number" pos:line="56" pos:column="16">42<pos:position pos:line="56" pos:column="18"/></literal></expr>)<pos:position pos:line="56" pos:column="19"/></condition>
	<block pos:line="57" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">char<pos:position pos:line="58" pos:column="21"/></name></type> <name><name pos:line="58" pos:column="22">buffer<pos:position pos:line="58" pos:column="28"/></name><index pos:line="58" pos:column="28">[<expr><literal type="number" pos:line="58" pos:column="29">1024<pos:position pos:line="58" pos:column="33"/></literal></expr>]<pos:position pos:line="58" pos:column="34"/></index></name></decl>;<pos:position pos:line="58" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">char<pos:position pos:line="59" pos:column="21"/></name></type> <name><name pos:line="59" pos:column="22">buffer_copy<pos:position pos:line="59" pos:column="33"/></name><index pos:line="59" pos:column="33">[<expr><literal type="number" pos:line="59" pos:column="34">1024<pos:position pos:line="59" pos:column="38"/></literal></expr>]<pos:position pos:line="59" pos:column="39"/></index></name></decl>;<pos:position pos:line="59" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">char<pos:position pos:line="60" pos:column="21"/></name> <modifier pos:line="60" pos:column="22">*<pos:position pos:line="60" pos:column="23"/></modifier></type><name><name pos:line="60" pos:column="23">fields<pos:position pos:line="60" pos:column="29"/></name><index pos:line="60" pos:column="29">[<expr><literal type="number" pos:line="60" pos:column="30">128<pos:position pos:line="60" pos:column="33"/></literal></expr>]<pos:position pos:line="60" pos:column="34"/></index></name></decl>;<pos:position pos:line="60" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">int<pos:position pos:line="61" pos:column="20"/></name></type>   <name pos:line="61" pos:column="23">fields_num<pos:position pos:line="61" pos:column="33"/></name></decl>;<pos:position pos:line="61" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">int<pos:position pos:line="62" pos:column="20"/></name></type>   <name pos:line="62" pos:column="23">len<pos:position pos:line="62" pos:column="26"/></name></decl>;<pos:position pos:line="62" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><name pos:line="64" pos:column="17">errno<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">=<pos:position pos:line="64" pos:column="24"/></operator> <literal type="number" pos:line="64" pos:column="25">0<pos:position pos:line="64" pos:column="26"/></literal></expr>;<pos:position pos:line="64" pos:column="27"/></expr_stmt>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">fgets<pos:position pos:line="65" pos:column="26"/></name> <argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">buffer<pos:position pos:line="65" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="36">sizeof <argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">buffer<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">fhin<pos:position pos:line="65" pos:column="57"/></name></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call> <operator pos:line="65" pos:column="59">==<pos:position pos:line="65" pos:column="61"/></operator> <name pos:line="65" pos:column="62">NULL<pos:position pos:line="65" pos:column="66"/></name></expr>)<pos:position pos:line="65" pos:column="67"/></condition><then pos:line="65" pos:column="67">
		<block pos:line="66" pos:column="17">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name pos:line="67" pos:column="29">errno<pos:position pos:line="67" pos:column="34"/></name> <operator pos:line="67" pos:column="35">!=<pos:position pos:line="67" pos:column="37"/></operator> <literal type="number" pos:line="67" pos:column="38">0<pos:position pos:line="67" pos:column="39"/></literal></expr>)<pos:position pos:line="67" pos:column="40"/></condition><then pos:line="67" pos:column="40">
			<block pos:line="68" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="69" pos:column="33">char<pos:position pos:line="69" pos:column="37"/></name></type> <name><name pos:line="69" pos:column="38">errbuf<pos:position pos:line="69" pos:column="44"/></name><index pos:line="69" pos:column="44">[<expr><literal type="number" pos:line="69" pos:column="45">1024<pos:position pos:line="69" pos:column="49"/></literal></expr>]<pos:position pos:line="69" pos:column="50"/></index></name></decl>;<pos:position pos:line="69" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="70" pos:column="33">WARNING<pos:position pos:line="70" pos:column="40"/></name> <argument_list pos:line="70" pos:column="41">(<argument><expr><literal type="string" pos:line="70" pos:column="42">"unixsock plugin: failed to read from socket #%i: %s"<pos:position pos:line="70" pos:column="95"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="71" pos:column="49">fileno<pos:position pos:line="71" pos:column="55"/></name> <argument_list pos:line="71" pos:column="56">(<argument><expr><name pos:line="71" pos:column="57">fhin<pos:position pos:line="71" pos:column="61"/></name></expr></argument>)<pos:position pos:line="71" pos:column="62"/></argument_list></call></expr></argument>,
						<argument><expr><call><name pos:line="72" pos:column="49">sstrerror<pos:position pos:line="72" pos:column="58"/></name> <argument_list pos:line="72" pos:column="59">(<argument><expr><name pos:line="72" pos:column="60">errno<pos:position pos:line="72" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="67">errbuf<pos:position pos:line="72" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="75">sizeof <argument_list pos:line="72" pos:column="82">(<argument><expr><name pos:line="72" pos:column="83">errbuf<pos:position pos:line="72" pos:column="89"/></name></expr></argument>)<pos:position pos:line="72" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="93"/></expr_stmt>
			}<pos:position pos:line="73" pos:column="26"/></block></then></if>
			<break pos:line="74" pos:column="25">break;<pos:position pos:line="74" pos:column="31"/></break>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="77" pos:column="17">len<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <call><name pos:line="77" pos:column="23">strlen<pos:position pos:line="77" pos:column="29"/></name> <argument_list pos:line="77" pos:column="30">(<argument><expr><name pos:line="77" pos:column="31">buffer<pos:position pos:line="77" pos:column="37"/></name></expr></argument>)<pos:position pos:line="77" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
		<while pos:line="78" pos:column="17">while <condition pos:line="78" pos:column="23">(<expr><operator pos:line="78" pos:column="24">(<pos:position pos:line="78" pos:column="25"/></operator><name pos:line="78" pos:column="25">len<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">&gt;<pos:position pos:line="78" pos:column="33"/></operator> <literal type="number" pos:line="78" pos:column="31">0<pos:position pos:line="78" pos:column="32"/></literal><operator pos:line="78" pos:column="32">)<pos:position pos:line="78" pos:column="33"/></operator>
				<operator pos:line="79" pos:column="33">&amp;&amp;<pos:position pos:line="79" pos:column="43"/></operator> <operator pos:line="79" pos:column="36">(<pos:position pos:line="79" pos:column="37"/></operator><operator pos:line="79" pos:column="37">(<pos:position pos:line="79" pos:column="38"/></operator><name><name pos:line="79" pos:column="38">buffer<pos:position pos:line="79" pos:column="44"/></name><index pos:line="79" pos:column="44">[<expr><name pos:line="79" pos:column="45">len<pos:position pos:line="79" pos:column="48"/></name> <operator pos:line="79" pos:column="49">-<pos:position pos:line="79" pos:column="50"/></operator> <literal type="number" pos:line="79" pos:column="51">1<pos:position pos:line="79" pos:column="52"/></literal></expr>]<pos:position pos:line="79" pos:column="53"/></index></name> <operator pos:line="79" pos:column="54">==<pos:position pos:line="79" pos:column="56"/></operator> <literal type="char" pos:line="79" pos:column="57">'\n'<pos:position pos:line="79" pos:column="61"/></literal><operator pos:line="79" pos:column="61">)<pos:position pos:line="79" pos:column="62"/></operator> <operator pos:line="79" pos:column="63">||<pos:position pos:line="79" pos:column="65"/></operator> <operator pos:line="79" pos:column="66">(<pos:position pos:line="79" pos:column="67"/></operator><name><name pos:line="79" pos:column="67">buffer<pos:position pos:line="79" pos:column="73"/></name><index pos:line="79" pos:column="73">[<expr><name pos:line="79" pos:column="74">len<pos:position pos:line="79" pos:column="77"/></name> <operator pos:line="79" pos:column="78">-<pos:position pos:line="79" pos:column="79"/></operator> <literal type="number" pos:line="79" pos:column="80">1<pos:position pos:line="79" pos:column="81"/></literal></expr>]<pos:position pos:line="79" pos:column="82"/></index></name> <operator pos:line="79" pos:column="83">==<pos:position pos:line="79" pos:column="85"/></operator> <literal type="char" pos:line="79" pos:column="86">'\r'<pos:position pos:line="79" pos:column="90"/></literal><operator pos:line="79" pos:column="90">)<pos:position pos:line="79" pos:column="91"/></operator><operator pos:line="79" pos:column="91">)<pos:position pos:line="79" pos:column="92"/></operator></expr>)<pos:position pos:line="79" pos:column="93"/></condition>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="80" pos:column="25">buffer<pos:position pos:line="80" pos:column="31"/></name><index pos:line="80" pos:column="31">[<expr><operator pos:line="80" pos:column="32">--<pos:position pos:line="80" pos:column="34"/></operator><name pos:line="80" pos:column="34">len<pos:position pos:line="80" pos:column="37"/></name></expr>]<pos:position pos:line="80" pos:column="38"/></index></name> <operator pos:line="80" pos:column="39">=<pos:position pos:line="80" pos:column="40"/></operator> <literal type="char" pos:line="80" pos:column="41">'\0'<pos:position pos:line="80" pos:column="45"/></literal></expr>;<pos:position pos:line="80" pos:column="46"/></expr_stmt></block></while>

		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">len<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">==<pos:position pos:line="82" pos:column="27"/></operator> <literal type="number" pos:line="82" pos:column="28">0<pos:position pos:line="82" pos:column="29"/></literal></expr>)<pos:position pos:line="82" pos:column="30"/></condition><then pos:line="82" pos:column="30">
			<block type="pseudo"><continue pos:line="83" pos:column="25">continue;<pos:position pos:line="83" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="85" pos:column="17">sstrncpy<pos:position pos:line="85" pos:column="25"/></name> <argument_list pos:line="85" pos:column="26">(<argument><expr><name pos:line="85" pos:column="27">buffer_copy<pos:position pos:line="85" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="40">buffer<pos:position pos:line="85" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="48">sizeof <argument_list pos:line="85" pos:column="55">(<argument><expr><name pos:line="85" pos:column="56">buffer_copy<pos:position pos:line="85" pos:column="67"/></name></expr></argument>)<pos:position pos:line="85" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="85" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="70"/></expr_stmt>

		<expr_stmt><expr><name pos:line="87" pos:column="17">fields_num<pos:position pos:line="87" pos:column="27"/></name> <operator pos:line="87" pos:column="28">=<pos:position pos:line="87" pos:column="29"/></operator> <call><name pos:line="87" pos:column="30">strsplit<pos:position pos:line="87" pos:column="38"/></name> <argument_list pos:line="87" pos:column="39">(<argument><expr><name pos:line="87" pos:column="40">buffer_copy<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">fields<pos:position pos:line="87" pos:column="59"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="88" pos:column="33">sizeof <argument_list pos:line="88" pos:column="40">(<argument><expr><name pos:line="88" pos:column="41">fields<pos:position pos:line="88" pos:column="47"/></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></sizeof> <operator pos:line="88" pos:column="49">/<pos:position pos:line="88" pos:column="50"/></operator> <sizeof pos:line="88" pos:column="51">sizeof <argument_list pos:line="88" pos:column="58">(<argument><expr><name><name pos:line="88" pos:column="59">fields<pos:position pos:line="88" pos:column="65"/></name><index pos:line="88" pos:column="65">[<expr><literal type="number" pos:line="88" pos:column="66">0<pos:position pos:line="88" pos:column="67"/></literal></expr>]<pos:position pos:line="88" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="88" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="88" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="71"/></expr_stmt>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">fields_num<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">&lt;<pos:position pos:line="89" pos:column="36"/></operator> <literal type="number" pos:line="89" pos:column="34">1<pos:position pos:line="89" pos:column="35"/></literal></expr>)<pos:position pos:line="89" pos:column="36"/></condition><then pos:line="89" pos:column="36">
		<block pos:line="90" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">fprintf<pos:position pos:line="91" pos:column="32"/></name> <argument_list pos:line="91" pos:column="33">(<argument><expr><name pos:line="91" pos:column="34">fhout<pos:position pos:line="91" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="41">"-1 Internal error\n"<pos:position pos:line="91" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="92" pos:column="25">fclose<pos:position pos:line="92" pos:column="31"/></name> <argument_list pos:line="92" pos:column="32">(<argument><expr><name pos:line="92" pos:column="33">fhin<pos:position pos:line="92" pos:column="37"/></name></expr></argument>)<pos:position pos:line="92" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">fclose<pos:position pos:line="93" pos:column="31"/></name> <argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">fhout<pos:position pos:line="93" pos:column="38"/></name></expr></argument>)<pos:position pos:line="93" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">pthread_exit<pos:position pos:line="94" pos:column="37"/></name> <argument_list pos:line="94" pos:column="38">(<argument><expr><operator pos:line="94" pos:column="39">(<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="40">void<pos:position pos:line="94" pos:column="44"/></name> <operator pos:line="94" pos:column="45">*<pos:position pos:line="94" pos:column="46"/></operator><operator pos:line="94" pos:column="46">)<pos:position pos:line="94" pos:column="47"/></operator> <literal type="number" pos:line="94" pos:column="48">1<pos:position pos:line="94" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>

		<if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><call><name pos:line="97" pos:column="21">strcasecmp<pos:position pos:line="97" pos:column="31"/></name> <argument_list pos:line="97" pos:column="32">(<argument><expr><name><name pos:line="97" pos:column="33">fields<pos:position pos:line="97" pos:column="39"/></name><index pos:line="97" pos:column="39">[<expr><literal type="number" pos:line="97" pos:column="40">0<pos:position pos:line="97" pos:column="41"/></literal></expr>]<pos:position pos:line="97" pos:column="42"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="44">"getval"<pos:position pos:line="97" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="53"/></argument_list></call> <operator pos:line="97" pos:column="54">==<pos:position pos:line="97" pos:column="56"/></operator> <literal type="number" pos:line="97" pos:column="57">0<pos:position pos:line="97" pos:column="58"/></literal></expr>)<pos:position pos:line="97" pos:column="59"/></condition><then pos:line="97" pos:column="59">
		<block pos:line="98" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">handle_getval<pos:position pos:line="99" pos:column="38"/></name> <argument_list pos:line="99" pos:column="39">(<argument><expr><name pos:line="99" pos:column="40">fhout<pos:position pos:line="99" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="47">buffer<pos:position pos:line="99" pos:column="53"/></name></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="100" pos:column="18"/></block></then>
		<elseif pos:line="101" pos:column="17">else <if pos:line="101" pos:column="22">if <condition pos:line="101" pos:column="25">(<expr><call><name pos:line="101" pos:column="26">strcasecmp<pos:position pos:line="101" pos:column="36"/></name> <argument_list pos:line="101" pos:column="37">(<argument><expr><name><name pos:line="101" pos:column="38">fields<pos:position pos:line="101" pos:column="44"/></name><index pos:line="101" pos:column="44">[<expr><literal type="number" pos:line="101" pos:column="45">0<pos:position pos:line="101" pos:column="46"/></literal></expr>]<pos:position pos:line="101" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="49">"getthreshold"<pos:position pos:line="101" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="64"/></argument_list></call> <operator pos:line="101" pos:column="65">==<pos:position pos:line="101" pos:column="67"/></operator> <literal type="number" pos:line="101" pos:column="68">0<pos:position pos:line="101" pos:column="69"/></literal></expr>)<pos:position pos:line="101" pos:column="70"/></condition><then pos:line="101" pos:column="70">
		<block pos:line="102" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">handle_getthreshold<pos:position pos:line="103" pos:column="44"/></name> <argument_list pos:line="103" pos:column="45">(<argument><expr><name pos:line="103" pos:column="46">fhout<pos:position pos:line="103" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="53">buffer<pos:position pos:line="103" pos:column="59"/></name></expr></argument>)<pos:position pos:line="103" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="104" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="105" pos:column="17">else <if pos:line="105" pos:column="22">if <condition pos:line="105" pos:column="25">(<expr><call><name pos:line="105" pos:column="26">strcasecmp<pos:position pos:line="105" pos:column="36"/></name> <argument_list pos:line="105" pos:column="37">(<argument><expr><name><name pos:line="105" pos:column="38">fields<pos:position pos:line="105" pos:column="44"/></name><index pos:line="105" pos:column="44">[<expr><literal type="number" pos:line="105" pos:column="45">0<pos:position pos:line="105" pos:column="46"/></literal></expr>]<pos:position pos:line="105" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="49">"putval"<pos:position pos:line="105" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="58"/></argument_list></call> <operator pos:line="105" pos:column="59">==<pos:position pos:line="105" pos:column="61"/></operator> <literal type="number" pos:line="105" pos:column="62">0<pos:position pos:line="105" pos:column="63"/></literal></expr>)<pos:position pos:line="105" pos:column="64"/></condition><then pos:line="105" pos:column="64">
		<block pos:line="106" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">handle_putval<pos:position pos:line="107" pos:column="38"/></name> <argument_list pos:line="107" pos:column="39">(<argument><expr><name pos:line="107" pos:column="40">fhout<pos:position pos:line="107" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="47">buffer<pos:position pos:line="107" pos:column="53"/></name></expr></argument>)<pos:position pos:line="107" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="108" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="109" pos:column="17">else <if pos:line="109" pos:column="22">if <condition pos:line="109" pos:column="25">(<expr><call><name pos:line="109" pos:column="26">strcasecmp<pos:position pos:line="109" pos:column="36"/></name> <argument_list pos:line="109" pos:column="37">(<argument><expr><name><name pos:line="109" pos:column="38">fields<pos:position pos:line="109" pos:column="44"/></name><index pos:line="109" pos:column="44">[<expr><literal type="number" pos:line="109" pos:column="45">0<pos:position pos:line="109" pos:column="46"/></literal></expr>]<pos:position pos:line="109" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="49">"listval"<pos:position pos:line="109" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="59"/></argument_list></call> <operator pos:line="109" pos:column="60">==<pos:position pos:line="109" pos:column="62"/></operator> <literal type="number" pos:line="109" pos:column="63">0<pos:position pos:line="109" pos:column="64"/></literal></expr>)<pos:position pos:line="109" pos:column="65"/></condition><then pos:line="109" pos:column="65">
		<block pos:line="110" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">handle_listval<pos:position pos:line="111" pos:column="39"/></name> <argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">fhout<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">buffer<pos:position pos:line="111" pos:column="54"/></name></expr></argument>)<pos:position pos:line="111" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="112" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="113" pos:column="17">else <if pos:line="113" pos:column="22">if <condition pos:line="113" pos:column="25">(<expr><call><name pos:line="113" pos:column="26">strcasecmp<pos:position pos:line="113" pos:column="36"/></name> <argument_list pos:line="113" pos:column="37">(<argument><expr><name><name pos:line="113" pos:column="38">fields<pos:position pos:line="113" pos:column="44"/></name><index pos:line="113" pos:column="44">[<expr><literal type="number" pos:line="113" pos:column="45">0<pos:position pos:line="113" pos:column="46"/></literal></expr>]<pos:position pos:line="113" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="49">"putnotif"<pos:position pos:line="113" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="60"/></argument_list></call> <operator pos:line="113" pos:column="61">==<pos:position pos:line="113" pos:column="63"/></operator> <literal type="number" pos:line="113" pos:column="64">0<pos:position pos:line="113" pos:column="65"/></literal></expr>)<pos:position pos:line="113" pos:column="66"/></condition><then pos:line="113" pos:column="66">
		<block pos:line="114" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">handle_putnotif<pos:position pos:line="115" pos:column="40"/></name> <argument_list pos:line="115" pos:column="41">(<argument><expr><name pos:line="115" pos:column="42">fhout<pos:position pos:line="115" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="49">buffer<pos:position pos:line="115" pos:column="55"/></name></expr></argument>)<pos:position pos:line="115" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="116" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="117" pos:column="17">else <if pos:line="117" pos:column="22">if <condition pos:line="117" pos:column="25">(<expr><call><name pos:line="117" pos:column="26">strcasecmp<pos:position pos:line="117" pos:column="36"/></name> <argument_list pos:line="117" pos:column="37">(<argument><expr><name><name pos:line="117" pos:column="38">fields<pos:position pos:line="117" pos:column="44"/></name><index pos:line="117" pos:column="44">[<expr><literal type="number" pos:line="117" pos:column="45">0<pos:position pos:line="117" pos:column="46"/></literal></expr>]<pos:position pos:line="117" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="49">"flush"<pos:position pos:line="117" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="57"/></argument_list></call> <operator pos:line="117" pos:column="58">==<pos:position pos:line="117" pos:column="60"/></operator> <literal type="number" pos:line="117" pos:column="61">0<pos:position pos:line="117" pos:column="62"/></literal></expr>)<pos:position pos:line="117" pos:column="63"/></condition><then pos:line="117" pos:column="63">
		<block pos:line="118" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="119" pos:column="25">handle_flush<pos:position pos:line="119" pos:column="37"/></name> <argument_list pos:line="119" pos:column="38">(<argument><expr><name pos:line="119" pos:column="39">fhout<pos:position pos:line="119" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="46">buffer<pos:position pos:line="119" pos:column="52"/></name></expr></argument>)<pos:position pos:line="119" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="120" pos:column="18"/></block></then></if></elseif>
		<else pos:line="121" pos:column="17">else
		<block pos:line="122" pos:column="17">{
			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><call><name pos:line="123" pos:column="29">fprintf<pos:position pos:line="123" pos:column="36"/></name> <argument_list pos:line="123" pos:column="37">(<argument><expr><name pos:line="123" pos:column="38">fhout<pos:position pos:line="123" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="45">"-1 Unknown command: %s\n"<pos:position pos:line="123" pos:column="71"/></literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="73">fields<pos:position pos:line="123" pos:column="79"/></name><index pos:line="123" pos:column="79">[<expr><literal type="number" pos:line="123" pos:column="80">0<pos:position pos:line="123" pos:column="81"/></literal></expr>]<pos:position pos:line="123" pos:column="82"/></index></name></expr></argument>)<pos:position pos:line="123" pos:column="83"/></argument_list></call> <operator pos:line="123" pos:column="84">&lt;<pos:position pos:line="123" pos:column="88"/></operator> <literal type="number" pos:line="123" pos:column="86">0<pos:position pos:line="123" pos:column="87"/></literal></expr>)<pos:position pos:line="123" pos:column="88"/></condition><then pos:line="123" pos:column="88">
			<block pos:line="124" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="125" pos:column="33">char<pos:position pos:line="125" pos:column="37"/></name></type> <name><name pos:line="125" pos:column="38">errbuf<pos:position pos:line="125" pos:column="44"/></name><index pos:line="125" pos:column="44">[<expr><literal type="number" pos:line="125" pos:column="45">1024<pos:position pos:line="125" pos:column="49"/></literal></expr>]<pos:position pos:line="125" pos:column="50"/></index></name></decl>;<pos:position pos:line="125" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="126" pos:column="33">WARNING<pos:position pos:line="126" pos:column="40"/></name> <argument_list pos:line="126" pos:column="41">(<argument><expr><literal type="string" pos:line="126" pos:column="42">"unixsock plugin: failed to write to socket #%i: %s"<pos:position pos:line="126" pos:column="94"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="127" pos:column="49">fileno<pos:position pos:line="127" pos:column="55"/></name> <argument_list pos:line="127" pos:column="56">(<argument><expr><name pos:line="127" pos:column="57">fhout<pos:position pos:line="127" pos:column="62"/></name></expr></argument>)<pos:position pos:line="127" pos:column="63"/></argument_list></call></expr></argument>,
						<argument><expr><call><name pos:line="128" pos:column="49">sstrerror<pos:position pos:line="128" pos:column="58"/></name> <argument_list pos:line="128" pos:column="59">(<argument><expr><name pos:line="128" pos:column="60">errno<pos:position pos:line="128" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="67">errbuf<pos:position pos:line="128" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="128" pos:column="75">sizeof <argument_list pos:line="128" pos:column="82">(<argument><expr><name pos:line="128" pos:column="83">errbuf<pos:position pos:line="128" pos:column="89"/></name></expr></argument>)<pos:position pos:line="128" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="128" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="93"/></expr_stmt>
				<break pos:line="129" pos:column="33">break;<pos:position pos:line="129" pos:column="39"/></break>
			}<pos:position pos:line="130" pos:column="26"/></block></then></if>
		}<pos:position pos:line="131" pos:column="18"/></block></else></if>
	}<pos:position pos:line="132" pos:column="10"/></block></while> <comment type="block" pos:line="132" pos:column="11">/* while (fgets) */</comment>

	<expr_stmt><expr><call><name pos:line="134" pos:column="9">DEBUG<pos:position pos:line="134" pos:column="14"/></name> <argument_list pos:line="134" pos:column="15">(<argument><expr><literal type="string" pos:line="134" pos:column="16">"unixsock plugin: us_handle_client: Exiting.."<pos:position pos:line="134" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="135" pos:column="9">fclose<pos:position pos:line="135" pos:column="15"/></name> <argument_list pos:line="135" pos:column="16">(<argument><expr><name pos:line="135" pos:column="17">fhin<pos:position pos:line="135" pos:column="21"/></name></expr></argument>)<pos:position pos:line="135" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="136" pos:column="9">fclose<pos:position pos:line="136" pos:column="15"/></name> <argument_list pos:line="136" pos:column="16">(<argument><expr><name pos:line="136" pos:column="17">fhout<pos:position pos:line="136" pos:column="22"/></name></expr></argument>)<pos:position pos:line="136" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="138" pos:column="9">pthread_exit<pos:position pos:line="138" pos:column="21"/></name> <argument_list pos:line="138" pos:column="22">(<argument><expr><operator pos:line="138" pos:column="23">(<pos:position pos:line="138" pos:column="24"/></operator><name pos:line="138" pos:column="24">void<pos:position pos:line="138" pos:column="28"/></name> <operator pos:line="138" pos:column="29">*<pos:position pos:line="138" pos:column="30"/></operator><operator pos:line="138" pos:column="30">)<pos:position pos:line="138" pos:column="31"/></operator> <literal type="number" pos:line="138" pos:column="32">0<pos:position pos:line="138" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="35"/></expr_stmt>
	<return pos:line="139" pos:column="9">return <expr><operator pos:line="139" pos:column="16">(<pos:position pos:line="139" pos:column="17"/></operator><operator pos:line="139" pos:column="17">(<pos:position pos:line="139" pos:column="18"/></operator><name pos:line="139" pos:column="18">void<pos:position pos:line="139" pos:column="22"/></name> <operator pos:line="139" pos:column="23">*<pos:position pos:line="139" pos:column="24"/></operator><operator pos:line="139" pos:column="24">)<pos:position pos:line="139" pos:column="25"/></operator> <literal type="number" pos:line="139" pos:column="26">0<pos:position pos:line="139" pos:column="27"/></literal><operator pos:line="139" pos:column="27">)<pos:position pos:line="139" pos:column="28"/></operator></expr>;<pos:position pos:line="139" pos:column="29"/></return>
}<pos:position pos:line="140" pos:column="2"/></block></function></unit>
