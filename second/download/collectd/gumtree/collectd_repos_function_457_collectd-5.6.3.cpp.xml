<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_457_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">csnmp_strvbcopy_hexstring<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">dst<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
                                     <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">variable_list<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">vb<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="3" pos:column="38">size_t<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">dst_size<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list> <block pos:line="3" pos:column="55">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">buffer_ptr<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">buffer_free<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">dst<pos:position pos:line="7" pos:column="6"/></name><index pos:line="7" pos:column="6">[<expr><literal type="number" pos:line="7" pos:column="7">0<pos:position pos:line="7" pos:column="8"/></literal></expr>]<pos:position pos:line="7" pos:column="9"/></index></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">buffer_ptr<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">dst<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">buffer_free<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">dst_size<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>

  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">size_t<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">i<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></init> <condition><expr><name pos:line="12" pos:column="22">i<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <name><name pos:line="12" pos:column="26">vb<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">val_len<pos:position pos:line="12" pos:column="37"/></name></name></expr>;<pos:position pos:line="12" pos:column="38"/></condition> <incr><expr><name pos:line="12" pos:column="39">i<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">++<pos:position pos:line="12" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="43"/></control> <block pos:line="12" pos:column="44">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">status<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">status<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">snprintf<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">buffer_ptr<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">buffer_free<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="15" pos:column="48">(<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">i<pos:position pos:line="15" pos:column="50"/></name> <operator pos:line="15" pos:column="51">==<pos:position pos:line="15" pos:column="53"/></operator> <literal type="number" pos:line="15" pos:column="54">0<pos:position pos:line="15" pos:column="55"/></literal><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></expr> ?<pos:position pos:line="15" pos:column="58"/></condition><then pos:line="15" pos:column="58"> <expr><literal type="string" pos:line="15" pos:column="59">"%02x"<pos:position pos:line="15" pos:column="65"/></literal></expr> <pos:position pos:line="15" pos:column="66"/></then><else pos:line="15" pos:column="66">: <expr><literal type="string" pos:line="15" pos:column="68">":%02x"<pos:position pos:line="15" pos:column="75"/></literal></expr></else></ternary></expr></argument>,
                      <argument><expr><operator pos:line="16" pos:column="23">(<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">unsigned<pos:position pos:line="16" pos:column="32"/></name> <name pos:line="16" pos:column="33">int<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">)<pos:position pos:line="16" pos:column="37"/></operator><name><name pos:line="16" pos:column="37">vb<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">val<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">.<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">bitstring<pos:position pos:line="16" pos:column="54"/></name><index pos:line="16" pos:column="54">[<expr><name pos:line="16" pos:column="55">i<pos:position pos:line="16" pos:column="56"/></name></expr>]<pos:position pos:line="16" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">status<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&gt;=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><operator pos:line="19" pos:column="10">(<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">size_t<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">)<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">status<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">)<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">&gt;=<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="29">buffer_free<pos:position pos:line="19" pos:column="40"/></name></expr>)<pos:position pos:line="19" pos:column="41"/></condition><then pos:line="19" pos:column="41"> <comment type="block" pos:line="19" pos:column="42">/* truncated */</comment>
    <block pos:line="20" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">dst<pos:position pos:line="21" pos:column="10"/></name><index pos:line="21" pos:column="10">[<expr><name pos:line="21" pos:column="11">dst_size<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">-<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="22">1<pos:position pos:line="21" pos:column="23"/></literal></expr>]<pos:position pos:line="21" pos:column="24"/></index></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">ENOMEM<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <else pos:line="23" pos:column="7">else <comment type="block" pos:line="23" pos:column="12">/* if (status &lt; buffer_free) */</comment>
    <block pos:line="24" pos:column="5">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">buffer_ptr<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">+=<pos:position pos:line="25" pos:column="20"/></operator> <operator pos:line="25" pos:column="21">(<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">size_t<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">)<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">status<pos:position pos:line="25" pos:column="35"/></name></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">buffer_free<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">-=<pos:position pos:line="26" pos:column="21"/></operator> <operator pos:line="26" pos:column="22">(<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">size_t<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">)<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">status<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></for>

  <return pos:line="30" pos:column="3">return <expr><literal type="number" pos:line="30" pos:column="10">0<pos:position pos:line="30" pos:column="11"/></literal></expr>;<pos:position pos:line="30" pos:column="12"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
