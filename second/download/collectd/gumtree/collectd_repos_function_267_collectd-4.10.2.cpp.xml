<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_267_collectd-4.10.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ignorelist_add<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">ignorelist_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">il<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">entry<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">entry_len<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">il<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">==<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">DEBUG<pos:position pos:line="8" pos:column="22"/></name> <argument_list pos:line="8" pos:column="23">(<argument><expr><literal type="string" pos:line="8" pos:column="24">"add called with ignorelist_t == NULL"<pos:position pos:line="8" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal><operator pos:line="9" pos:column="26">)<pos:position pos:line="9" pos:column="27"/></operator></expr>;<pos:position pos:line="9" pos:column="28"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">entry_len<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">strlen<pos:position pos:line="12" pos:column="27"/></name> <argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">entry<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* append nothing */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">entry_len<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">==<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="26">0<pos:position pos:line="15" pos:column="27"/></literal></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
	<block pos:line="16" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">DEBUG<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="string" pos:line="17" pos:column="23">"not appending: empty entry"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal><operator pos:line="18" pos:column="26">)<pos:position pos:line="18" pos:column="27"/></operator></expr>;<pos:position pos:line="18" pos:column="28"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">HAVE_REGEX_H<pos:position pos:line="21" pos:column="17"/></name></expr></cpp:if>
	<comment type="block" pos:line="22" pos:column="9">/* regex string is enclosed in "/.../" */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">entry_len<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">&gt;<pos:position pos:line="23" pos:column="28"/></operator> <literal type="number" pos:line="23" pos:column="26">2<pos:position pos:line="23" pos:column="27"/></literal><operator pos:line="23" pos:column="27">)<pos:position pos:line="23" pos:column="28"/></operator> <operator pos:line="23" pos:column="29">&amp;&amp;<pos:position pos:line="23" pos:column="39"/></operator> <operator pos:line="23" pos:column="32">(<pos:position pos:line="23" pos:column="33"/></operator><name><name pos:line="23" pos:column="33">entry<pos:position pos:line="23" pos:column="38"/></name><index pos:line="23" pos:column="38">[<expr><literal type="number" pos:line="23" pos:column="39">0<pos:position pos:line="23" pos:column="40"/></literal></expr>]<pos:position pos:line="23" pos:column="41"/></index></name> <operator pos:line="23" pos:column="42">==<pos:position pos:line="23" pos:column="44"/></operator> <literal type="char" pos:line="23" pos:column="45">'/'<pos:position pos:line="23" pos:column="48"/></literal><operator pos:line="23" pos:column="48">)<pos:position pos:line="23" pos:column="49"/></operator> <operator pos:line="23" pos:column="50">&amp;&amp;<pos:position pos:line="23" pos:column="60"/></operator> <name><name pos:line="23" pos:column="53">entry<pos:position pos:line="23" pos:column="58"/></name><index pos:line="23" pos:column="58">[<expr><name pos:line="23" pos:column="59">entry_len<pos:position pos:line="23" pos:column="68"/></name> <operator pos:line="23" pos:column="69">-<pos:position pos:line="23" pos:column="70"/></operator> <literal type="number" pos:line="23" pos:column="71">1<pos:position pos:line="23" pos:column="72"/></literal></expr>]<pos:position pos:line="23" pos:column="73"/></index></name> <operator pos:line="23" pos:column="74">==<pos:position pos:line="23" pos:column="76"/></operator> <literal type="char" pos:line="23" pos:column="77">'/'<pos:position pos:line="23" pos:column="80"/></literal></expr>)<pos:position pos:line="23" pos:column="81"/></condition><then pos:line="23" pos:column="81">
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">char<pos:position pos:line="25" pos:column="21"/></name> <modifier pos:line="25" pos:column="22">*<pos:position pos:line="25" pos:column="23"/></modifier></type><name pos:line="25" pos:column="23">entry_copy<pos:position pos:line="25" pos:column="33"/></name></decl>;<pos:position pos:line="25" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">size_t<pos:position pos:line="26" pos:column="23"/></name></type> <name pos:line="26" pos:column="24">entry_copy_size<pos:position pos:line="26" pos:column="39"/></name></decl>;<pos:position pos:line="26" pos:column="40"/></decl_stmt>

		<comment type="block" pos:line="28" pos:column="17">/* We need to copy `entry' since it's const */</comment>
		<expr_stmt><expr><name pos:line="29" pos:column="17">entry_copy_size<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">=<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="35">entry_len<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">-<pos:position pos:line="29" pos:column="46"/></operator> <literal type="number" pos:line="29" pos:column="47">1<pos:position pos:line="29" pos:column="48"/></literal></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">entry_copy<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <call><name pos:line="30" pos:column="30">smalloc<pos:position pos:line="30" pos:column="37"/></name> <argument_list pos:line="30" pos:column="38">(<argument><expr><name pos:line="30" pos:column="39">entry_copy_size<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">sstrncpy<pos:position pos:line="31" pos:column="25"/></name> <argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">entry_copy<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">entry<pos:position pos:line="31" pos:column="44"/></name> <operator pos:line="31" pos:column="45">+<pos:position pos:line="31" pos:column="46"/></operator> <literal type="number" pos:line="31" pos:column="47">1<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">entry_copy_size<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="33" pos:column="17">DEBUG<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><literal type="string" pos:line="33" pos:column="23">"I'm about to add regex entry: %s"<pos:position pos:line="33" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="59">entry_copy<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">ret<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="23">ignorelist_append_regex<pos:position pos:line="34" pos:column="46"/></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">il<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">entry_copy<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">sfree<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">entry_copy<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then>
	<else pos:line="37" pos:column="9">else
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
	<block pos:line="39" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">DEBUG<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><literal type="string" pos:line="40" pos:column="23">"to add entry: %s"<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">entry<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">ret<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <call><name pos:line="41" pos:column="23">ignorelist_append_string<pos:position pos:line="41" pos:column="47"/></name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">il<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="52">entry<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">ret<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">)<pos:position pos:line="44" pos:column="21"/></operator></expr>;<pos:position pos:line="44" pos:column="22"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
