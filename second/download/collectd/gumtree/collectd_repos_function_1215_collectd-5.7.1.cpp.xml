<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1215_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">v5_zfs_arc_l2_bytes<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">data_set_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ds<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">value_list_t<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">vl<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list> <comment type="block" pos:line="1" pos:column="72">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">value_list_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">new_vl<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name><name pos:line="5" pos:column="7">vl<pos:position pos:line="5" pos:column="9"/></name><operator pos:line="5" pos:column="9">-&gt;<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="11">values_len<pos:position pos:line="5" pos:column="21"/></name></name> <operator pos:line="5" pos:column="22">!=<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="25">2<pos:position pos:line="5" pos:column="26"/></literal></expr>)<pos:position pos:line="5" pos:column="27"/></condition><then pos:line="5" pos:column="27">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">FC_TARGET_STOP<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator></expr>;<pos:position pos:line="6" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/* Copy everything: Time, interval, host, ... */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memcpy<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><operator pos:line="9" pos:column="10">&amp;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="11">new_vl<pos:position pos:line="9" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="19">vl<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="23">sizeof<argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">new_vl<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Reset data we can't simply copy */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">new_vl<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">.<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">meta<pos:position pos:line="12" pos:column="14"/></name></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* Change the type/-instance to "io_octets-L2" */</comment>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">sstrncpy<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name><name pos:line="15" pos:column="12">new_vl<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">type<pos:position pos:line="15" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="25">"io_octets"<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="38">sizeof<argument_list pos:line="15" pos:column="44">(<argument><expr><name><name pos:line="15" pos:column="45">new_vl<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">.<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">type<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">sstrncpy<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name><name pos:line="16" pos:column="12">new_vl<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">type_instance<pos:position pos:line="16" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"L2"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="40">sizeof<argument_list pos:line="16" pos:column="46">(<argument><expr><name><name pos:line="16" pos:column="47">new_vl<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">.<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="54">type_instance<pos:position pos:line="16" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* Copy the actual values. */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">value_t<pos:position pos:line="19" pos:column="10"/></name></type> <name><name pos:line="19" pos:column="11">values<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[]<pos:position pos:line="19" pos:column="19"/></index></name> <init pos:line="19" pos:column="20">= <expr><block pos:line="19" pos:column="22">{
      <expr><block pos:line="20" pos:column="7">{<expr><operator pos:line="20" pos:column="8">.<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">derive<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">derive_t<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator><name><name pos:line="20" pos:column="28">vl<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">values<pos:position pos:line="20" pos:column="38"/></name><index pos:line="20" pos:column="38">[<expr><literal type="number" pos:line="20" pos:column="39">0<pos:position pos:line="20" pos:column="40"/></literal></expr>]<pos:position pos:line="20" pos:column="41"/></index></name><operator pos:line="20" pos:column="41">.<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">counter<pos:position pos:line="20" pos:column="49"/></name></expr>}<pos:position pos:line="20" pos:column="50"/></block></expr>,
      <expr><block pos:line="21" pos:column="7">{<expr><operator pos:line="21" pos:column="8">.<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">derive<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="18">(<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">derive_t<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator><name><name pos:line="21" pos:column="28">vl<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">values<pos:position pos:line="21" pos:column="38"/></name><index pos:line="21" pos:column="38">[<expr><literal type="number" pos:line="21" pos:column="39">1<pos:position pos:line="21" pos:column="40"/></literal></expr>]<pos:position pos:line="21" pos:column="41"/></index></name><operator pos:line="21" pos:column="41">.<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">counter<pos:position pos:line="21" pos:column="49"/></name></expr>}<pos:position pos:line="21" pos:column="50"/></block></expr>,
  }<pos:position pos:line="22" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="22" pos:column="5"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">new_vl<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">.<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">values<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">values<pos:position pos:line="23" pos:column="25"/></name></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">new_vl<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">.<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">values_len<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">STATIC_ARRAY_SIZE<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">values<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* Dispatch new value lists instead of this one */</comment>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">plugin_dispatch_values<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><operator pos:line="27" pos:column="26">&amp;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="27">new_vl<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* Abort processing */</comment>
  <return pos:line="30" pos:column="3">return <expr><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">FC_TARGET_STOP<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">)<pos:position pos:line="30" pos:column="26"/></operator></expr>;<pos:position pos:line="30" pos:column="27"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
