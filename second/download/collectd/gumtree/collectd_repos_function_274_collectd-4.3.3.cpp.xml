<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_274_collectd-4.3.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">load_read<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">HAVE_GETLOADAVG<pos:position pos:line="3" pos:column="28"/></name></expr></argument>)<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">double<pos:position pos:line="4" pos:column="15"/></name></type> <name><name pos:line="4" pos:column="16">load<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">3<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">getloadavg<pos:position pos:line="6" pos:column="23"/></name> <argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">load<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="31">3<pos:position pos:line="6" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call> <operator pos:line="6" pos:column="34">==<pos:position pos:line="6" pos:column="36"/></operator> <literal type="number" pos:line="6" pos:column="37">3<pos:position pos:line="6" pos:column="38"/></literal></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">load_submit<pos:position pos:line="7" pos:column="28"/></name> <argument_list pos:line="7" pos:column="29">(<argument><expr><name><name pos:line="7" pos:column="30">load<pos:position pos:line="7" pos:column="34"/></name><index pos:line="7" pos:column="34">[<expr><name pos:line="7" pos:column="35">LOADAVG_1MIN<pos:position pos:line="7" pos:column="47"/></name></expr>]<pos:position pos:line="7" pos:column="48"/></index></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="50">load<pos:position pos:line="7" pos:column="54"/></name><index pos:line="7" pos:column="54">[<expr><name pos:line="7" pos:column="55">LOADAVG_5MIN<pos:position pos:line="7" pos:column="67"/></name></expr>]<pos:position pos:line="7" pos:column="68"/></index></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="70">load<pos:position pos:line="7" pos:column="74"/></name><index pos:line="7" pos:column="74">[<expr><name pos:line="7" pos:column="75">LOADAVG_15MIN<pos:position pos:line="7" pos:column="88"/></name></expr>]<pos:position pos:line="7" pos:column="89"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="91"/></expr_stmt></block></then>
	<else pos:line="8" pos:column="9">else
	<block pos:line="9" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name></type> <name><name pos:line="10" pos:column="22">errbuf<pos:position pos:line="10" pos:column="28"/></name><index pos:line="10" pos:column="28">[<expr><literal type="number" pos:line="10" pos:column="29">1024<pos:position pos:line="10" pos:column="33"/></literal></expr>]<pos:position pos:line="10" pos:column="34"/></index></name></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">WARNING<pos:position pos:line="11" pos:column="24"/></name> <argument_list pos:line="11" pos:column="25">(<argument><expr><literal type="string" pos:line="11" pos:column="26">"load: getloadavg failed: %s"<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="12" pos:column="33">sstrerror<pos:position pos:line="12" pos:column="42"/></name> <argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">errno<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">errbuf<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="59">sizeof <argument_list pos:line="12" pos:column="66">(<argument><expr><name pos:line="12" pos:column="67">errbuf<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></else></if>
<comment type="block" pos:line="14" pos:column="1">/* #endif HAVE_GETLOADAVG */</comment>

<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><call><name pos:line="16" pos:column="7">defined<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">KERNEL_LINUX<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">gauge_t<pos:position pos:line="17" pos:column="16"/></name></type> <name pos:line="17" pos:column="17">snum<pos:position pos:line="17" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="23">mnum<pos:position pos:line="17" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="29">lnum<pos:position pos:line="17" pos:column="33"/></name></decl>;<pos:position pos:line="17" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">FILE<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier></type><name pos:line="18" pos:column="15">loadavg<pos:position pos:line="18" pos:column="22"/></name></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name></type> <name><name pos:line="19" pos:column="14">buffer<pos:position pos:line="19" pos:column="20"/></name><index pos:line="19" pos:column="20">[<expr><literal type="number" pos:line="19" pos:column="21">16<pos:position pos:line="19" pos:column="23"/></literal></expr>]<pos:position pos:line="19" pos:column="24"/></index></name></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="21" pos:column="9">char<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name><name pos:line="21" pos:column="15">fields<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><literal type="number" pos:line="21" pos:column="22">8<pos:position pos:line="21" pos:column="23"/></literal></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">numfields<pos:position pos:line="22" pos:column="22"/></name></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>
	
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">loadavg<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">fopen<pos:position pos:line="24" pos:column="29"/></name> <argument_list pos:line="24" pos:column="30">(<argument><expr><literal type="string" pos:line="24" pos:column="31">"/proc/loadavg"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="48">"r"<pos:position pos:line="24" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call><operator pos:line="24" pos:column="52">)<pos:position pos:line="24" pos:column="53"/></operator> <operator pos:line="24" pos:column="54">==<pos:position pos:line="24" pos:column="56"/></operator> <name pos:line="24" pos:column="57">NULL<pos:position pos:line="24" pos:column="61"/></name></expr>)<pos:position pos:line="24" pos:column="62"/></condition><then pos:line="24" pos:column="62">
	<block pos:line="25" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name></type> <name><name pos:line="26" pos:column="22">errbuf<pos:position pos:line="26" pos:column="28"/></name><index pos:line="26" pos:column="28">[<expr><literal type="number" pos:line="26" pos:column="29">1024<pos:position pos:line="26" pos:column="33"/></literal></expr>]<pos:position pos:line="26" pos:column="34"/></index></name></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">WARNING<pos:position pos:line="27" pos:column="24"/></name> <argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"load: fopen: %s"<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="28" pos:column="33">sstrerror<pos:position pos:line="28" pos:column="42"/></name> <argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">errno<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">errbuf<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="59">sizeof <argument_list pos:line="28" pos:column="66">(<argument><expr><name pos:line="28" pos:column="67">errbuf<pos:position pos:line="28" pos:column="73"/></name></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
		<return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><operator pos:line="29" pos:column="25">-<pos:position pos:line="29" pos:column="26"/></operator><literal type="number" pos:line="29" pos:column="26">1<pos:position pos:line="29" pos:column="27"/></literal><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator></expr>;<pos:position pos:line="29" pos:column="29"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">fgets<pos:position pos:line="32" pos:column="18"/></name> <argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">buffer<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="28">16<pos:position pos:line="32" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="32">loadavg<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call> <operator pos:line="32" pos:column="41">==<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="44">NULL<pos:position pos:line="32" pos:column="48"/></name></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49">
	<block pos:line="33" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">char<pos:position pos:line="34" pos:column="21"/></name></type> <name><name pos:line="34" pos:column="22">errbuf<pos:position pos:line="34" pos:column="28"/></name><index pos:line="34" pos:column="28">[<expr><literal type="number" pos:line="34" pos:column="29">1024<pos:position pos:line="34" pos:column="33"/></literal></expr>]<pos:position pos:line="34" pos:column="34"/></index></name></decl>;<pos:position pos:line="34" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">WARNING<pos:position pos:line="35" pos:column="24"/></name> <argument_list pos:line="35" pos:column="25">(<argument><expr><literal type="string" pos:line="35" pos:column="26">"load: fgets: %s"<pos:position pos:line="35" pos:column="43"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="36" pos:column="33">sstrerror<pos:position pos:line="36" pos:column="42"/></name> <argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">errno<pos:position pos:line="36" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">errbuf<pos:position pos:line="36" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="59">sizeof <argument_list pos:line="36" pos:column="66">(<argument><expr><name pos:line="36" pos:column="67">errbuf<pos:position pos:line="36" pos:column="73"/></name></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">fclose<pos:position pos:line="37" pos:column="23"/></name> <argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">loadavg<pos:position pos:line="37" pos:column="32"/></name></expr></argument>)<pos:position pos:line="37" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><operator pos:line="38" pos:column="25">-<pos:position pos:line="38" pos:column="26"/></operator><literal type="number" pos:line="38" pos:column="26">1<pos:position pos:line="38" pos:column="27"/></literal><operator pos:line="38" pos:column="27">)<pos:position pos:line="38" pos:column="28"/></operator></expr>;<pos:position pos:line="38" pos:column="29"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">fclose<pos:position pos:line="41" pos:column="19"/></name> <argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">loadavg<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30">
	<block pos:line="42" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">char<pos:position pos:line="43" pos:column="21"/></name></type> <name><name pos:line="43" pos:column="22">errbuf<pos:position pos:line="43" pos:column="28"/></name><index pos:line="43" pos:column="28">[<expr><literal type="number" pos:line="43" pos:column="29">1024<pos:position pos:line="43" pos:column="33"/></literal></expr>]<pos:position pos:line="43" pos:column="34"/></index></name></decl>;<pos:position pos:line="43" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">WARNING<pos:position pos:line="44" pos:column="24"/></name> <argument_list pos:line="44" pos:column="25">(<argument><expr><literal type="string" pos:line="44" pos:column="26">"load: fclose: %s"<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="45" pos:column="33">sstrerror<pos:position pos:line="45" pos:column="42"/></name> <argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">errno<pos:position pos:line="45" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="51">errbuf<pos:position pos:line="45" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="59">sizeof <argument_list pos:line="45" pos:column="66">(<argument><expr><name pos:line="45" pos:column="67">errbuf<pos:position pos:line="45" pos:column="73"/></name></expr></argument>)<pos:position pos:line="45" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="48" pos:column="9">numfields<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <call><name pos:line="48" pos:column="21">strsplit<pos:position pos:line="48" pos:column="29"/></name> <argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">buffer<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">fields<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="47">8<pos:position pos:line="48" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">numfields<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">&lt;<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="25">3<pos:position pos:line="50" pos:column="26"/></literal></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27">
		<block type="pseudo"><return pos:line="51" pos:column="17">return <expr><operator pos:line="51" pos:column="24">(<pos:position pos:line="51" pos:column="25"/></operator><operator pos:line="51" pos:column="25">-<pos:position pos:line="51" pos:column="26"/></operator><literal type="number" pos:line="51" pos:column="26">1<pos:position pos:line="51" pos:column="27"/></literal><operator pos:line="51" pos:column="27">)<pos:position pos:line="51" pos:column="28"/></operator></expr>;<pos:position pos:line="51" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="53" pos:column="9">snum<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <call><name pos:line="53" pos:column="16">atof<pos:position pos:line="53" pos:column="20"/></name> <argument_list pos:line="53" pos:column="21">(<argument><expr><name><name pos:line="53" pos:column="22">fields<pos:position pos:line="53" pos:column="28"/></name><index pos:line="53" pos:column="28">[<expr><literal type="number" pos:line="53" pos:column="29">0<pos:position pos:line="53" pos:column="30"/></literal></expr>]<pos:position pos:line="53" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="54" pos:column="9">mnum<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">atof<pos:position pos:line="54" pos:column="20"/></name> <argument_list pos:line="54" pos:column="21">(<argument><expr><name><name pos:line="54" pos:column="22">fields<pos:position pos:line="54" pos:column="28"/></name><index pos:line="54" pos:column="28">[<expr><literal type="number" pos:line="54" pos:column="29">1<pos:position pos:line="54" pos:column="30"/></literal></expr>]<pos:position pos:line="54" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="55" pos:column="9">lnum<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <call><name pos:line="55" pos:column="16">atof<pos:position pos:line="55" pos:column="20"/></name> <argument_list pos:line="55" pos:column="21">(<argument><expr><name><name pos:line="55" pos:column="22">fields<pos:position pos:line="55" pos:column="28"/></name><index pos:line="55" pos:column="28">[<expr><literal type="number" pos:line="55" pos:column="29">2<pos:position pos:line="55" pos:column="30"/></literal></expr>]<pos:position pos:line="55" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="57" pos:column="9">load_submit<pos:position pos:line="57" pos:column="20"/></name> <argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">snum<pos:position pos:line="57" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="28">mnum<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="34">lnum<pos:position pos:line="57" pos:column="38"/></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
<comment type="block" pos:line="58" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">elif<pos:position pos:line="60" pos:column="6"/></cpp:directive> <expr><call><name pos:line="60" pos:column="7">defined<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">HAVE_LIBSTATGRAB<pos:position pos:line="60" pos:column="31"/></name></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">gauge_t<pos:position pos:line="61" pos:column="16"/></name></type> <name pos:line="61" pos:column="17">snum<pos:position pos:line="61" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="61" pos:column="23">mnum<pos:position pos:line="61" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="61" pos:column="29">lnum<pos:position pos:line="61" pos:column="33"/></name></decl>;<pos:position pos:line="61" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">sg_load_stats<pos:position pos:line="62" pos:column="22"/></name> <modifier pos:line="62" pos:column="23">*<pos:position pos:line="62" pos:column="24"/></modifier></type><name pos:line="62" pos:column="24">ls<pos:position pos:line="62" pos:column="26"/></name></decl>;<pos:position pos:line="62" pos:column="27"/></decl_stmt>

	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><operator pos:line="64" pos:column="13">(<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">ls<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <call><name pos:line="64" pos:column="19">sg_get_load_stats<pos:position pos:line="64" pos:column="36"/></name> <argument_list pos:line="64" pos:column="37">()<pos:position pos:line="64" pos:column="39"/></argument_list></call><operator pos:line="64" pos:column="39">)<pos:position pos:line="64" pos:column="40"/></operator> <operator pos:line="64" pos:column="41">==<pos:position pos:line="64" pos:column="43"/></operator> <name pos:line="64" pos:column="44">NULL<pos:position pos:line="64" pos:column="48"/></name></expr>)<pos:position pos:line="64" pos:column="49"/></condition><then pos:line="64" pos:column="49">
		<block type="pseudo"><return pos:line="65" pos:column="17">return;<pos:position pos:line="65" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="67" pos:column="9">snum<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <name><name pos:line="67" pos:column="16">ls<pos:position pos:line="67" pos:column="18"/></name><operator pos:line="67" pos:column="18">-&gt;<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="20">min1<pos:position pos:line="67" pos:column="24"/></name></name></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="68" pos:column="9">mnum<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <name><name pos:line="68" pos:column="16">ls<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">-&gt;<pos:position pos:line="68" pos:column="23"/></operator><name pos:line="68" pos:column="20">min5<pos:position pos:line="68" pos:column="24"/></name></name></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="69" pos:column="9">lnum<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">=<pos:position pos:line="69" pos:column="15"/></operator> <name><name pos:line="69" pos:column="16">ls<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">-&gt;<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="20">min15<pos:position pos:line="69" pos:column="25"/></name></name></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="71" pos:column="9">load_submit<pos:position pos:line="71" pos:column="20"/></name> <argument_list pos:line="71" pos:column="21">(<argument><expr><name pos:line="71" pos:column="22">snum<pos:position pos:line="71" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="28">mnum<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="34">lnum<pos:position pos:line="71" pos:column="38"/></name></expr></argument>)<pos:position pos:line="71" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
<comment type="block" pos:line="72" pos:column="1">/* #endif HAVE_LIBSTATGRAB */</comment>

<cpp:else pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">else<pos:position pos:line="74" pos:column="6"/></cpp:directive></cpp:else>
<cpp:error pos:line="75" pos:column="1"># <cpp:directive pos:line="75" pos:column="3">error<pos:position pos:line="75" pos:column="8"/></cpp:directive> <cpp:literal pos:line="75" pos:column="9">"No applicable input method."<pos:position pos:line="75" pos:column="38"/></cpp:literal></cpp:error>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="78" pos:column="9">return <expr><operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><literal type="number" pos:line="78" pos:column="17">0<pos:position pos:line="78" pos:column="18"/></literal><operator pos:line="78" pos:column="18">)<pos:position pos:line="78" pos:column="19"/></operator></expr>;<pos:position pos:line="78" pos:column="20"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
