<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1391_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dns_init<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* clean up an old thread */</comment>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">pthread_mutex_lock<pos:position pos:line="6" pos:column="27"/></name> <argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">traffic_mutex<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">tr_queries<pos:position pos:line="7" pos:column="19"/></name>   <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">tr_responses<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">pthread_mutex_unlock<pos:position pos:line="9" pos:column="29"/></name> <argument_list pos:line="9" pos:column="30">(<argument><expr><operator pos:line="9" pos:column="31">&amp;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="32">traffic_mutex<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">listen_thread_init<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">!=<pos:position pos:line="11" pos:column="34"/></operator> <literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">-<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">plugin_thread_create<pos:position pos:line="14" pos:column="38"/></name> <argument_list pos:line="14" pos:column="39">(<argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">listen_thread<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">NULL<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">dns_child_loop<pos:position pos:line="14" pos:column="76"/></name></expr></argument>,
			<argument><expr><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">void<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">*<pos:position pos:line="15" pos:column="32"/></operator><operator pos:line="15" pos:column="32">)<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">!=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25">
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name></type> <name><name pos:line="18" pos:column="22">errbuf<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><literal type="number" pos:line="18" pos:column="29">1024<pos:position pos:line="18" pos:column="33"/></literal></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">ERROR<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"dns plugin: pthread_create failed: %s"<pos:position pos:line="19" pos:column="63"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">sstrerror<pos:position pos:line="20" pos:column="42"/></name> <argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">errno<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">errbuf<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="59">sizeof <argument_list pos:line="20" pos:column="66">(<argument><expr><name pos:line="20" pos:column="67">errbuf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">-<pos:position pos:line="21" pos:column="26"/></operator><literal type="number" pos:line="21" pos:column="26">1<pos:position pos:line="21" pos:column="27"/></literal><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator></expr>;<pos:position pos:line="21" pos:column="29"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">listen_thread_init<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <literal type="number" pos:line="24" pos:column="30">1<pos:position pos:line="24" pos:column="31"/></literal></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>

<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><call><name pos:line="26" pos:column="5">defined<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">HAVE_SYS_CAPABILITY_H<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call> <operator pos:line="26" pos:column="36">&amp;&amp;<pos:position pos:line="26" pos:column="46"/></operator> <call><name pos:line="26" pos:column="39">defined<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">CAP_NET_RAW<pos:position pos:line="26" pos:column="58"/></name></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr></cpp:if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">check_capability<pos:position pos:line="27" pos:column="29"/></name> <argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">CAP_NET_RAW<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call> <operator pos:line="27" pos:column="44">!=<pos:position pos:line="27" pos:column="46"/></operator> <literal type="number" pos:line="27" pos:column="47">0<pos:position pos:line="27" pos:column="48"/></literal></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49">
	<block pos:line="28" pos:column="9">{
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">getuid<pos:position pos:line="29" pos:column="27"/></name> <argument_list pos:line="29" pos:column="28">()<pos:position pos:line="29" pos:column="30"/></argument_list></call> <operator pos:line="29" pos:column="31">==<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">0<pos:position pos:line="29" pos:column="35"/></literal></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">WARNING<pos:position pos:line="30" pos:column="32"/></name> <argument_list pos:line="30" pos:column="33">(<argument><expr><literal type="string" pos:line="30" pos:column="34">"dns plugin: Running collectd as root, but the CAP_NET_RAW "<pos:position pos:line="30" pos:column="94"/></literal>
					<literal type="string" pos:line="31" pos:column="41">"capability is missing. The plugin's read function will probably "<pos:position pos:line="31" pos:column="107"/></literal>
					<literal type="string" pos:line="32" pos:column="41">"fail. Is your init system dropping capabilities?"<pos:position pos:line="32" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="93"/></expr_stmt></block></then>
		<else pos:line="33" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">WARNING<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><literal type="string" pos:line="34" pos:column="34">"dns plugin: collectd doesn't have the CAP_NET_RAW capability. "<pos:position pos:line="34" pos:column="98"/></literal>
					<literal type="string" pos:line="35" pos:column="41">"If you don't want to run collectd as root, try running \"setcap "<pos:position pos:line="35" pos:column="107"/></literal>
					<literal type="string" pos:line="36" pos:column="41">"cap_net_raw=ep\" on the collectd binary."<pos:position pos:line="36" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="85"/></expr_stmt></block></else></if>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="40" pos:column="9">return <expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal><operator pos:line="40" pos:column="18">)<pos:position pos:line="40" pos:column="19"/></operator></expr>;<pos:position pos:line="40" pos:column="20"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
