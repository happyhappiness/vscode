<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1907_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">value_list_to_filename<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">buffer_size<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">value_list_t<pos:position pos:line="2" pos:column="47"/></name> <specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">vl<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list> <block pos:line="2" pos:column="59">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ptr<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">buffer<pos:position pos:line="5" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">ptr_size<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">buffer_size<pos:position pos:line="6" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">time_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">now<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">tm<pos:position pos:line="8" pos:column="12"/></name></name></type> <name pos:line="8" pos:column="13">struct_tm<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">datadir<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">NULL<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">size_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">len<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><call><name pos:line="11" pos:column="18">strlen<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">datadir<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call> <operator pos:line="11" pos:column="34">+<pos:position pos:line="11" pos:column="35"/></operator> <literal type="number" pos:line="11" pos:column="36">1<pos:position pos:line="11" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&gt;=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="16">ptr_size<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
      <block type="pseudo"><return pos:line="14" pos:column="7">return <expr><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">ENOBUFS<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">)<pos:position pos:line="14" pos:column="23"/></operator></expr>;<pos:position pos:line="14" pos:column="24"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">memcpy<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">ptr<pos:position pos:line="16" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="17">datadir<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="26">len<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">ptr<pos:position pos:line="17" pos:column="8"/></name><index pos:line="17" pos:column="8">[<expr><name pos:line="17" pos:column="9">len<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">-<pos:position pos:line="17" pos:column="14"/></operator> <literal type="number" pos:line="17" pos:column="15">1<pos:position pos:line="17" pos:column="16"/></literal></expr>]<pos:position pos:line="17" pos:column="17"/></index></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <literal type="char" pos:line="17" pos:column="20">'/'<pos:position pos:line="17" pos:column="23"/></literal></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">ptr_size<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">-=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">len<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">ptr<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">+=<pos:position pos:line="19" pos:column="11"/></operator> <name pos:line="19" pos:column="12">len<pos:position pos:line="19" pos:column="15"/></name></expr>;<pos:position pos:line="19" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">status<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">FORMAT_VL<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">ptr<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">ptr_size<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">vl<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <literal type="number" pos:line="23" pos:column="17">0<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">status<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator></expr>;<pos:position pos:line="24" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* Skip all the time formatting stuff when printing to STDOUT or
   * STDERR. */</comment>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">use_stdio<pos:position pos:line="28" pos:column="16"/></name></expr>)<pos:position pos:line="28" pos:column="17"/></condition><then pos:line="28" pos:column="17">
    <block type="pseudo"><return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal><operator pos:line="29" pos:column="14">)<pos:position pos:line="29" pos:column="15"/></operator></expr>;<pos:position pos:line="29" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="31" pos:column="3">ptr_size<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">-=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">strlen<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">ptr<pos:position pos:line="31" pos:column="25"/></name></expr></argument>)<pos:position pos:line="31" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="32" pos:column="3">ptr<pos:position pos:line="32" pos:column="6"/></name> <operator pos:line="32" pos:column="7">+=<pos:position pos:line="32" pos:column="9"/></operator> <call><name pos:line="32" pos:column="10">strlen<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">ptr<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* "-2013-07-12" =&gt; 11 bytes */</comment>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">ptr_size<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">&lt;<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="18">12<pos:position pos:line="35" pos:column="20"/></literal></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ERROR<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><literal type="string" pos:line="36" pos:column="11">"csv plugin: Buffer too small."<pos:position pos:line="36" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">ENOMEM<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">)<pos:position pos:line="37" pos:column="20"/></operator></expr>;<pos:position pos:line="37" pos:column="21"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="40" pos:column="3">/* TODO: Find a way to minimize the calls to `localtime_r',
   * since they are pretty expensive.. */</comment>
  <expr_stmt><expr><name pos:line="42" pos:column="3">now<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <call><name pos:line="42" pos:column="9">time<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">NULL<pos:position pos:line="42" pos:column="18"/></name></expr></argument>)<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><call><name pos:line="43" pos:column="7">localtime_r<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><operator pos:line="43" pos:column="19">&amp;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="20">now<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="25">&amp;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="26">struct_tm<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call> <operator pos:line="43" pos:column="37">==<pos:position pos:line="43" pos:column="39"/></operator> <name pos:line="43" pos:column="40">NULL<pos:position pos:line="43" pos:column="44"/></name></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45"> <block pos:line="43" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">ERROR<pos:position pos:line="44" pos:column="10"/></name><argument_list pos:line="44" pos:column="10">(<argument><expr><literal type="string" pos:line="44" pos:column="11">"csv plugin: localtime_r failed"<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><operator pos:line="45" pos:column="13">-<pos:position pos:line="45" pos:column="14"/></operator><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal><operator pos:line="45" pos:column="15">)<pos:position pos:line="45" pos:column="16"/></operator></expr>;<pos:position pos:line="45" pos:column="17"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="48" pos:column="3">status<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">strftime<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">ptr<pos:position pos:line="48" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="26">ptr_size<pos:position pos:line="48" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="36">"-%Y-%m-%d"<pos:position pos:line="48" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="48" pos:column="49">&amp;<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="50">struct_tm<pos:position pos:line="48" pos:column="59"/></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="61"/></expr_stmt>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name pos:line="49" pos:column="7">status<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">==<pos:position pos:line="49" pos:column="16"/></operator> <literal type="number" pos:line="49" pos:column="17">0<pos:position pos:line="49" pos:column="18"/></literal></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19"> <comment type="block" pos:line="49" pos:column="20">/* yep, it returns zero on error. */</comment>
  <block pos:line="50" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ERROR<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><literal type="string" pos:line="51" pos:column="11">"csv plugin: strftime failed"<pos:position pos:line="51" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><operator pos:line="52" pos:column="13">-<pos:position pos:line="52" pos:column="14"/></operator><literal type="number" pos:line="52" pos:column="14">1<pos:position pos:line="52" pos:column="15"/></literal><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <return pos:line="55" pos:column="3">return <expr><operator pos:line="55" pos:column="10">(<pos:position pos:line="55" pos:column="11"/></operator><literal type="number" pos:line="55" pos:column="11">0<pos:position pos:line="55" pos:column="12"/></literal><operator pos:line="55" pos:column="12">)<pos:position pos:line="55" pos:column="13"/></operator></expr>;<pos:position pos:line="55" pos:column="14"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
