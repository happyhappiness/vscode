<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2308_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">cpy_unicode_or_bytes_to_string<pos:position pos:line="1" pos:column="57"/></name><parameter_list pos:line="1" pos:column="57">(<parameter><decl><type><name pos:line="1" pos:column="58">PyObject<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">o<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list> <block pos:line="1" pos:column="72">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><call><name pos:line="2" pos:column="7">PyUnicode_Check<pos:position pos:line="2" pos:column="22"/></name><argument_list pos:line="2" pos:column="22">(<argument><expr><operator pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">o<pos:position pos:line="2" pos:column="25"/></name></expr></argument>)<pos:position pos:line="2" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="2" pos:column="27"/></condition><then pos:line="2" pos:column="27"> <block pos:line="2" pos:column="28">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">PyObject<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">tmp<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">tmp<pos:position pos:line="4" pos:column="8"/></name> <operator pos:line="4" pos:column="9">=<pos:position pos:line="4" pos:column="10"/></operator> <call><name pos:line="4" pos:column="11">PyUnicode_AsEncodedString<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">(<argument><expr><operator pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">o<pos:position pos:line="4" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="41">NULL<pos:position pos:line="4" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="47">NULL<pos:position pos:line="4" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="53"/></expr_stmt> <comment type="block" pos:line="4" pos:column="54">/* New reference. */</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">tmp<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">==<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
      <block type="pseudo"><return pos:line="6" pos:column="7">return <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr>;<pos:position pos:line="6" pos:column="19"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">Py_DECREF<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><operator pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">o<pos:position pos:line="7" pos:column="17"/></name></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="8" pos:column="5">*<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">o<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <name pos:line="8" pos:column="10">tmp<pos:position pos:line="8" pos:column="13"/></name></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">IS_PY3K<pos:position pos:line="10" pos:column="15"/></name></cpp:ifdef>
  <return pos:line="11" pos:column="3">return <expr><call><name pos:line="11" pos:column="10">PyBytes_AsString<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">o<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></return>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
  <return pos:line="13" pos:column="3">return <expr><call><name pos:line="13" pos:column="10">PyString_AsString<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">o<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></return>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
