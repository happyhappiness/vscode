<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2189_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">flush_buffer<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <block pos:line="1" pos:column="32">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">DEBUG<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><literal type="string" pos:line="2" pos:column="9">"network plugin: flush_buffer: send_buffer_fill = %i"<pos:position pos:line="2" pos:column="62"/></literal></expr></argument>,
        <argument><expr><name pos:line="3" pos:column="9">send_buffer_fill<pos:position pos:line="3" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">network_send_buffer<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">send_buffer<pos:position pos:line="5" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="36">(<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">size_t<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">)<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="44">send_buffer_fill<pos:position pos:line="5" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="62"/></expr_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">stats_octets_tx<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">+=<pos:position pos:line="7" pos:column="21"/></operator> <operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><operator pos:line="7" pos:column="23">(<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="24">uint64_t<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">)<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">send_buffer_fill<pos:position pos:line="7" pos:column="49"/></name><operator pos:line="7" pos:column="49">)<pos:position pos:line="7" pos:column="50"/></operator></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">stats_packets_tx<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">++<pos:position pos:line="8" pos:column="21"/></operator></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">network_init_buffer<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">()<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
