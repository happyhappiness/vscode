<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_694_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">ps_get_cmdline<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">long<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">pid<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">name<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">buf<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">buf_len<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list> <block pos:line="1" pos:column="78">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">buf_ptr<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">len<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">file<pos:position pos:line="5" pos:column="12"/></name><index pos:line="5" pos:column="12">[<expr><name pos:line="5" pos:column="13">PATH_MAX<pos:position pos:line="5" pos:column="21"/></name></expr>]<pos:position pos:line="5" pos:column="22"/></index></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">fd<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">n<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">pid<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">&lt;<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator> <operator pos:line="10" pos:column="17">||<pos:position pos:line="10" pos:column="19"/></operator> <operator pos:line="10" pos:column="20">(<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">buf<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">)<pos:position pos:line="10" pos:column="33"/></operator> <operator pos:line="10" pos:column="34">||<pos:position pos:line="10" pos:column="36"/></operator> <operator pos:line="10" pos:column="37">(<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="38">buf_len<pos:position pos:line="10" pos:column="45"/></name> <operator pos:line="10" pos:column="46">&lt;<pos:position pos:line="10" pos:column="50"/></operator> <literal type="number" pos:line="10" pos:column="48">2<pos:position pos:line="10" pos:column="49"/></literal><operator pos:line="10" pos:column="49">)<pos:position pos:line="10" pos:column="50"/></operator></expr>)<pos:position pos:line="10" pos:column="51"/></condition><then pos:line="10" pos:column="51">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">ssnprintf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">file<pos:position pos:line="13" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="19">sizeof<argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">file<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="33">"/proc/%li/cmdline"<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="54">pid<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">errno<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <literal type="number" pos:line="15" pos:column="11">0<pos:position pos:line="15" pos:column="12"/></literal></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">fd<pos:position pos:line="16" pos:column="5"/></name> <operator pos:line="16" pos:column="6">=<pos:position pos:line="16" pos:column="7"/></operator> <call><name pos:line="16" pos:column="8">open<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">file<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="19">O_RDONLY<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">fd<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">&lt;<pos:position pos:line="17" pos:column="14"/></operator> <literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14"> <block pos:line="17" pos:column="15">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name></type> <name><name pos:line="18" pos:column="10">errbuf<pos:position pos:line="18" pos:column="16"/></name><index pos:line="18" pos:column="16">[<expr><literal type="number" pos:line="18" pos:column="17">4096<pos:position pos:line="18" pos:column="21"/></literal></expr>]<pos:position pos:line="18" pos:column="22"/></index></name></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt>
    <comment type="block" pos:line="19" pos:column="5">/* ENOENT means the process exited while we were handling it.
     * Don't complain about this, it only fills the logs. */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">errno<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">!=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">ENOENT<pos:position pos:line="21" pos:column="24"/></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="7">WARNING<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="string" pos:line="22" pos:column="15">"processes plugin: Failed to open `%s': %s."<pos:position pos:line="22" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="61">file<pos:position pos:line="22" pos:column="65"/></name></expr></argument>,
              <argument><expr><call><name pos:line="23" pos:column="15">sstrerror<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">errno<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">errbuf<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="40">sizeof<argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">errbuf<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt></block></then></if>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">NULL<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">buf_ptr<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <name pos:line="27" pos:column="13">buf<pos:position pos:line="27" pos:column="16"/></name></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="28" pos:column="3">len<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <name pos:line="28" pos:column="9">buf_len<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">n<pos:position pos:line="30" pos:column="4"/></name> <operator pos:line="30" pos:column="5">=<pos:position pos:line="30" pos:column="6"/></operator> <literal type="number" pos:line="30" pos:column="7">0<pos:position pos:line="30" pos:column="8"/></literal></expr>;<pos:position pos:line="30" pos:column="9"/></expr_stmt>

  <while pos:line="32" pos:column="3">while <condition pos:line="32" pos:column="9">(<expr><literal type="number" pos:line="32" pos:column="10">42<pos:position pos:line="32" pos:column="12"/></literal></expr>)<pos:position pos:line="32" pos:column="13"/></condition> <block pos:line="32" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">ssize_t<pos:position pos:line="33" pos:column="12"/></name></type> <name pos:line="33" pos:column="13">status<pos:position pos:line="33" pos:column="19"/></name></decl>;<pos:position pos:line="33" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="35" pos:column="5">status<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">read<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">fd<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="23">(<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="24">void<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">*<pos:position pos:line="35" pos:column="30"/></operator><operator pos:line="35" pos:column="30">)<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">buf_ptr<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">len<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">&lt;<pos:position pos:line="37" pos:column="20"/></operator> <literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr>)<pos:position pos:line="37" pos:column="20"/></condition><then pos:line="37" pos:column="20"> <block pos:line="37" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="38" pos:column="7">char<pos:position pos:line="38" pos:column="11"/></name></type> <name><name pos:line="38" pos:column="12">errbuf<pos:position pos:line="38" pos:column="18"/></name><index pos:line="38" pos:column="18">[<expr><literal type="number" pos:line="38" pos:column="19">1024<pos:position pos:line="38" pos:column="23"/></literal></expr>]<pos:position pos:line="38" pos:column="24"/></index></name></decl>;<pos:position pos:line="38" pos:column="25"/></decl_stmt>

      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><operator pos:line="40" pos:column="11">(<pos:position pos:line="40" pos:column="12"/></operator><name pos:line="40" pos:column="12">EAGAIN<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">==<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="22">errno<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">)<pos:position pos:line="40" pos:column="28"/></operator> <operator pos:line="40" pos:column="29">||<pos:position pos:line="40" pos:column="31"/></operator> <operator pos:line="40" pos:column="32">(<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="33">EINTR<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">==<pos:position pos:line="40" pos:column="41"/></operator> <name pos:line="40" pos:column="42">errno<pos:position pos:line="40" pos:column="47"/></name><operator pos:line="40" pos:column="47">)<pos:position pos:line="40" pos:column="48"/></operator></expr>)<pos:position pos:line="40" pos:column="49"/></condition><then pos:line="40" pos:column="49">
        <block type="pseudo"><continue pos:line="41" pos:column="9">continue;<pos:position pos:line="41" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="43" pos:column="7">WARNING<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><literal type="string" pos:line="43" pos:column="15">"processes plugin: Failed to read from `%s': %s."<pos:position pos:line="43" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="66">file<pos:position pos:line="43" pos:column="70"/></name></expr></argument>,
              <argument><expr><call><name pos:line="44" pos:column="15">sstrerror<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">errno<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="32">errbuf<pos:position pos:line="44" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="40">sizeof<argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">errbuf<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">close<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">fd<pos:position pos:line="45" pos:column="15"/></name></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
      <return pos:line="46" pos:column="7">return <expr><name pos:line="46" pos:column="14">NULL<pos:position pos:line="46" pos:column="18"/></name></expr>;<pos:position pos:line="46" pos:column="19"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="49" pos:column="5">n<pos:position pos:line="49" pos:column="6"/></name> <operator pos:line="49" pos:column="7">+=<pos:position pos:line="49" pos:column="9"/></operator> <name pos:line="49" pos:column="10">status<pos:position pos:line="49" pos:column="16"/></name></expr>;<pos:position pos:line="49" pos:column="17"/></expr_stmt>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">status<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">==<pos:position pos:line="51" pos:column="18"/></operator> <literal type="number" pos:line="51" pos:column="19">0<pos:position pos:line="51" pos:column="20"/></literal></expr>)<pos:position pos:line="51" pos:column="21"/></condition><then pos:line="51" pos:column="21">
      <block type="pseudo"><break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="54" pos:column="5">buf_ptr<pos:position pos:line="54" pos:column="12"/></name> <operator pos:line="54" pos:column="13">+=<pos:position pos:line="54" pos:column="15"/></operator> <name pos:line="54" pos:column="16">status<pos:position pos:line="54" pos:column="22"/></name></expr>;<pos:position pos:line="54" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">len<pos:position pos:line="55" pos:column="8"/></name> <operator pos:line="55" pos:column="9">-=<pos:position pos:line="55" pos:column="11"/></operator> <name pos:line="55" pos:column="12">status<pos:position pos:line="55" pos:column="18"/></name></expr>;<pos:position pos:line="55" pos:column="19"/></expr_stmt>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">len<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">==<pos:position pos:line="57" pos:column="15"/></operator> <literal type="number" pos:line="57" pos:column="16">0<pos:position pos:line="57" pos:column="17"/></literal></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18">
      <block type="pseudo"><break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="59" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">close<pos:position pos:line="61" pos:column="8"/></name><argument_list pos:line="61" pos:column="8">(<argument><expr><name pos:line="61" pos:column="9">fd<pos:position pos:line="61" pos:column="11"/></name></expr></argument>)<pos:position pos:line="61" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="13"/></expr_stmt>

  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><literal type="number" pos:line="63" pos:column="7">0<pos:position pos:line="63" pos:column="8"/></literal> <operator pos:line="63" pos:column="9">==<pos:position pos:line="63" pos:column="11"/></operator> <name pos:line="63" pos:column="12">n<pos:position pos:line="63" pos:column="13"/></name></expr>)<pos:position pos:line="63" pos:column="14"/></condition><then pos:line="63" pos:column="14"> <block pos:line="63" pos:column="15">{
    <comment type="block" pos:line="64" pos:column="5">/* cmdline not available; e.g. kernel thread, zombie */</comment>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">NULL<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">==<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">name<pos:position pos:line="65" pos:column="21"/></name></expr>)<pos:position pos:line="65" pos:column="22"/></condition><then pos:line="65" pos:column="22">
      <block type="pseudo"><return pos:line="66" pos:column="7">return <expr><name pos:line="66" pos:column="14">NULL<pos:position pos:line="66" pos:column="18"/></name></expr>;<pos:position pos:line="66" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">ssnprintf<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><name pos:line="68" pos:column="15">buf<pos:position pos:line="68" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="20">buf_len<pos:position pos:line="68" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="29">"[%s]"<pos:position pos:line="68" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="37">name<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">buf<pos:position pos:line="69" pos:column="15"/></name></expr>;<pos:position pos:line="69" pos:column="16"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="72" pos:column="3">assert<pos:position pos:line="72" pos:column="9"/></name><argument_list pos:line="72" pos:column="9">(<argument><expr><name pos:line="72" pos:column="10">n<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">&lt;=<pos:position pos:line="72" pos:column="17"/></operator> <name pos:line="72" pos:column="15">buf_len<pos:position pos:line="72" pos:column="22"/></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>

  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name pos:line="74" pos:column="7">n<pos:position pos:line="74" pos:column="8"/></name> <operator pos:line="74" pos:column="9">==<pos:position pos:line="74" pos:column="11"/></operator> <name pos:line="74" pos:column="12">buf_len<pos:position pos:line="74" pos:column="19"/></name></expr>)<pos:position pos:line="74" pos:column="20"/></condition><then pos:line="74" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="75" pos:column="5">--<pos:position pos:line="75" pos:column="7"/></operator><name pos:line="75" pos:column="7">n<pos:position pos:line="75" pos:column="8"/></name></expr>;<pos:position pos:line="75" pos:column="9"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="76" pos:column="3">buf<pos:position pos:line="76" pos:column="6"/></name><index pos:line="76" pos:column="6">[<expr><name pos:line="76" pos:column="7">n<pos:position pos:line="76" pos:column="8"/></name></expr>]<pos:position pos:line="76" pos:column="9"/></index></name> <operator pos:line="76" pos:column="10">=<pos:position pos:line="76" pos:column="11"/></operator> <literal type="char" pos:line="76" pos:column="12">'\0'<pos:position pos:line="76" pos:column="16"/></literal></expr>;<pos:position pos:line="76" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="78" pos:column="3">--<pos:position pos:line="78" pos:column="5"/></operator><name pos:line="78" pos:column="5">n<pos:position pos:line="78" pos:column="6"/></name></expr>;<pos:position pos:line="78" pos:column="7"/></expr_stmt>
  <comment type="block" pos:line="79" pos:column="3">/* remove trailing whitespace */</comment>
  <while pos:line="80" pos:column="3">while <condition pos:line="80" pos:column="9">(<expr><operator pos:line="80" pos:column="10">(<pos:position pos:line="80" pos:column="11"/></operator><name pos:line="80" pos:column="11">n<pos:position pos:line="80" pos:column="12"/></name> <operator pos:line="80" pos:column="13">&gt;<pos:position pos:line="80" pos:column="17"/></operator> <literal type="number" pos:line="80" pos:column="15">0<pos:position pos:line="80" pos:column="16"/></literal><operator pos:line="80" pos:column="16">)<pos:position pos:line="80" pos:column="17"/></operator> <operator pos:line="80" pos:column="18">&amp;&amp;<pos:position pos:line="80" pos:column="28"/></operator> <operator pos:line="80" pos:column="21">(<pos:position pos:line="80" pos:column="22"/></operator><call><name pos:line="80" pos:column="22">isspace<pos:position pos:line="80" pos:column="29"/></name><argument_list pos:line="80" pos:column="29">(<argument><expr><name><name pos:line="80" pos:column="30">buf<pos:position pos:line="80" pos:column="33"/></name><index pos:line="80" pos:column="33">[<expr><name pos:line="80" pos:column="34">n<pos:position pos:line="80" pos:column="35"/></name></expr>]<pos:position pos:line="80" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="80" pos:column="37"/></argument_list></call> <operator pos:line="80" pos:column="38">||<pos:position pos:line="80" pos:column="40"/></operator> <operator pos:line="80" pos:column="41">(<pos:position pos:line="80" pos:column="42"/></operator><literal type="char" pos:line="80" pos:column="42">'\0'<pos:position pos:line="80" pos:column="46"/></literal> <operator pos:line="80" pos:column="47">==<pos:position pos:line="80" pos:column="49"/></operator> <name><name pos:line="80" pos:column="50">buf<pos:position pos:line="80" pos:column="53"/></name><index pos:line="80" pos:column="53">[<expr><name pos:line="80" pos:column="54">n<pos:position pos:line="80" pos:column="55"/></name></expr>]<pos:position pos:line="80" pos:column="56"/></index></name><operator pos:line="80" pos:column="56">)<pos:position pos:line="80" pos:column="57"/></operator><operator pos:line="80" pos:column="57">)<pos:position pos:line="80" pos:column="58"/></operator></expr>)<pos:position pos:line="80" pos:column="59"/></condition> <block pos:line="80" pos:column="60">{
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">buf<pos:position pos:line="81" pos:column="8"/></name><index pos:line="81" pos:column="8">[<expr><name pos:line="81" pos:column="9">n<pos:position pos:line="81" pos:column="10"/></name></expr>]<pos:position pos:line="81" pos:column="11"/></index></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <literal type="char" pos:line="81" pos:column="14">'\0'<pos:position pos:line="81" pos:column="18"/></literal></expr>;<pos:position pos:line="81" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="82" pos:column="5">--<pos:position pos:line="82" pos:column="7"/></operator><name pos:line="82" pos:column="7">n<pos:position pos:line="82" pos:column="8"/></name></expr>;<pos:position pos:line="82" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="83" pos:column="4"/></block></while>

  <comment type="block" pos:line="85" pos:column="3">/* arguments are separated by '\0' in /proc/&lt;pid&gt;/cmdline */</comment>
  <while pos:line="86" pos:column="3">while <condition pos:line="86" pos:column="9">(<expr><name pos:line="86" pos:column="10">n<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">&gt;<pos:position pos:line="86" pos:column="16"/></operator> <literal type="number" pos:line="86" pos:column="14">0<pos:position pos:line="86" pos:column="15"/></literal></expr>)<pos:position pos:line="86" pos:column="16"/></condition> <block pos:line="86" pos:column="17">{
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><literal type="char" pos:line="87" pos:column="9">'\0'<pos:position pos:line="87" pos:column="13"/></literal> <operator pos:line="87" pos:column="14">==<pos:position pos:line="87" pos:column="16"/></operator> <name><name pos:line="87" pos:column="17">buf<pos:position pos:line="87" pos:column="20"/></name><index pos:line="87" pos:column="20">[<expr><name pos:line="87" pos:column="21">n<pos:position pos:line="87" pos:column="22"/></name></expr>]<pos:position pos:line="87" pos:column="23"/></index></name></expr>)<pos:position pos:line="87" pos:column="24"/></condition><then pos:line="87" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="7">buf<pos:position pos:line="88" pos:column="10"/></name><index pos:line="88" pos:column="10">[<expr><name pos:line="88" pos:column="11">n<pos:position pos:line="88" pos:column="12"/></name></expr>]<pos:position pos:line="88" pos:column="13"/></index></name> <operator pos:line="88" pos:column="14">=<pos:position pos:line="88" pos:column="15"/></operator> <literal type="char" pos:line="88" pos:column="16">' '<pos:position pos:line="88" pos:column="19"/></literal></expr>;<pos:position pos:line="88" pos:column="20"/></expr_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="89" pos:column="5">--<pos:position pos:line="89" pos:column="7"/></operator><name pos:line="89" pos:column="7">n<pos:position pos:line="89" pos:column="8"/></name></expr>;<pos:position pos:line="89" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="90" pos:column="4"/></block></while>
  <return pos:line="91" pos:column="3">return <expr><name pos:line="91" pos:column="10">buf<pos:position pos:line="91" pos:column="13"/></name></expr>;<pos:position pos:line="91" pos:column="14"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
