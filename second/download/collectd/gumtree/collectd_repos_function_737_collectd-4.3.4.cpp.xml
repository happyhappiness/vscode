<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_737_collectd-4.3.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">plugin_init_all<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<function_decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> (<modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier><name pos:line="3" pos:column="15">callback<pos:position pos:line="3" pos:column="23"/></name>) <parameter_list pos:line="3" pos:column="25">(<parameter><decl><type><name pos:line="3" pos:column="26">void<pos:position pos:line="3" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>;<pos:position pos:line="3" pos:column="32"/></function_decl>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">llentry_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">le<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Init the value cache */</comment>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">uc_init<pos:position pos:line="8" pos:column="16"/></name> <argument_list pos:line="8" pos:column="17">()<pos:position pos:line="8" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">list_init<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">==<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">NULL<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="36">(<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">list_read<pos:position pos:line="10" pos:column="46"/></name> <operator pos:line="10" pos:column="47">==<pos:position pos:line="10" pos:column="49"/></operator> <name pos:line="10" pos:column="50">NULL<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56">
		<block type="pseudo"><return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* Calling all init callbacks before checking if read callbacks
	 * are available allows the init callbacks to register the read
	 * callback. */</comment>
	<expr_stmt><expr><name pos:line="16" pos:column="9">le<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">llist_head<pos:position pos:line="16" pos:column="24"/></name> <argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">list_init<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">le<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">!=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">NULL<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition>
	<block pos:line="18" pos:column="9">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">callback<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <operator pos:line="19" pos:column="28">(<pos:position pos:line="19" pos:column="29"/></operator><call><call><name pos:line="19" pos:column="29">int<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call> <argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">void<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call><operator pos:line="19" pos:column="43">)<pos:position pos:line="19" pos:column="44"/></operator> <name><name pos:line="19" pos:column="45">le<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">-&gt;<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="49">value<pos:position pos:line="19" pos:column="54"/></name></name></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">status<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call pos:line="20" pos:column="26">(<modifier pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></modifier><name pos:line="20" pos:column="28">callback<pos:position pos:line="20" pos:column="36"/></name>) <argument_list pos:line="20" pos:column="38">()<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">status<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">!=<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
		<block pos:line="23" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">ERROR<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><literal type="string" pos:line="24" pos:column="32">"Initialization of plugin `%s' "<pos:position pos:line="24" pos:column="64"/></literal>
					<literal type="string" pos:line="25" pos:column="41">"failed with status %i. "<pos:position pos:line="25" pos:column="66"/></literal>
					<literal type="string" pos:line="26" pos:column="41">"Plugin will be unloaded."<pos:position pos:line="26" pos:column="67"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="27" pos:column="41">le<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">key<pos:position pos:line="27" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">status<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
			<comment type="block" pos:line="28" pos:column="25">/* Plugins that register read callbacks from the init
			 * callback should take care of appropriate error
			 * handling themselves. */</comment>
			<comment type="block" pos:line="31" pos:column="25">/* FIXME: Unload _all_ functions */</comment>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">plugin_unregister_read<pos:position pos:line="32" pos:column="47"/></name> <argument_list pos:line="32" pos:column="48">(<argument><expr><name><name pos:line="32" pos:column="49">le<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">-&gt;<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="53">key<pos:position pos:line="32" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="35" pos:column="17">le<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="22">le<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">-&gt;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="26">next<pos:position pos:line="35" pos:column="30"/></name></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></while>

	<comment type="block" pos:line="38" pos:column="9">/* Start read-threads */</comment>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">list_read<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">!=<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">NULL<pos:position pos:line="39" pos:column="30"/></name></expr>)<pos:position pos:line="39" pos:column="31"/></condition><then pos:line="39" pos:column="31">
	<block pos:line="40" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="41" pos:column="17">const<pos:position pos:line="41" pos:column="22"/></specifier> <name pos:line="41" pos:column="23">char<pos:position pos:line="41" pos:column="27"/></name> <modifier pos:line="41" pos:column="28">*<pos:position pos:line="41" pos:column="29"/></modifier></type><name pos:line="41" pos:column="29">rt<pos:position pos:line="41" pos:column="31"/></name></decl>;<pos:position pos:line="41" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">int<pos:position pos:line="42" pos:column="20"/></name></type> <name pos:line="42" pos:column="21">num<pos:position pos:line="42" pos:column="24"/></name></decl>;<pos:position pos:line="42" pos:column="25"/></decl_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">rt<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <call><name pos:line="43" pos:column="22">global_option_get<pos:position pos:line="43" pos:column="39"/></name> <argument_list pos:line="43" pos:column="40">(<argument><expr><literal type="string" pos:line="43" pos:column="41">"ReadThreads"<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">num<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <call><name pos:line="44" pos:column="23">atoi<pos:position pos:line="44" pos:column="27"/></name> <argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">rt<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">start_threads<pos:position pos:line="45" pos:column="30"/></name> <argument_list pos:line="45" pos:column="31">(<argument><expr><ternary><condition><expr><operator pos:line="45" pos:column="32">(<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="33">num<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">&gt;<pos:position pos:line="45" pos:column="41"/></operator> <literal type="number" pos:line="45" pos:column="39">0<pos:position pos:line="45" pos:column="40"/></literal><operator pos:line="45" pos:column="40">)<pos:position pos:line="45" pos:column="41"/></operator></expr> ?<pos:position pos:line="45" pos:column="43"/></condition><then pos:line="45" pos:column="43"> <expr><name pos:line="45" pos:column="44">num<pos:position pos:line="45" pos:column="47"/></name></expr> <pos:position pos:line="45" pos:column="48"/></then><else pos:line="45" pos:column="48">: <expr><literal type="number" pos:line="45" pos:column="50">5<pos:position pos:line="45" pos:column="51"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
