<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2523_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_parse<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">data<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">size_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">data_size<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">lcc_security_level_t<pos:position pos:line="1" pos:column="76"/></name></type> <name pos:line="1" pos:column="77">sl<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">lcc_network_parse_options_t<pos:position pos:line="2" pos:column="53"/></name> <specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">opts<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list> <block pos:line="2" pos:column="67">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">buffer_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">b<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><operator pos:line="3" pos:column="17">&amp;<pos:position pos:line="3" pos:column="22"/></operator><operator pos:line="3" pos:column="18">(<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">buffer_t<pos:position pos:line="3" pos:column="27"/></name><operator pos:line="3" pos:column="27">)<pos:position pos:line="3" pos:column="28"/></operator><block pos:line="3" pos:column="28">{
      <expr><operator pos:line="4" pos:column="7">.<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">data<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">=<pos:position pos:line="4" pos:column="14"/></operator> <name pos:line="4" pos:column="15">data<pos:position pos:line="4" pos:column="19"/></name></expr>, <expr><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">len<pos:position pos:line="4" pos:column="25"/></name> <operator pos:line="4" pos:column="26">=<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="28">data_size<pos:position pos:line="4" pos:column="37"/></name></expr>,
  }<pos:position pos:line="5" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="5"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">lcc_value_list_t<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">state<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><block pos:line="7" pos:column="28">{<expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr>}<pos:position pos:line="7" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

  <while pos:line="9" pos:column="3">while <condition pos:line="9" pos:column="9">(<expr><name><name pos:line="9" pos:column="10">b<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">len<pos:position pos:line="9" pos:column="16"/></name></name> <operator pos:line="9" pos:column="17">&gt;<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition> <block pos:line="9" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">uint16_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">type<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="24">sz<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">buffer_uint16<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">b<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="26">&amp;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="27">type<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call> <operator pos:line="11" pos:column="33">||<pos:position pos:line="11" pos:column="35"/></operator> <call><name pos:line="11" pos:column="36">buffer_uint16<pos:position pos:line="11" pos:column="49"/></name><argument_list pos:line="11" pos:column="49">(<argument><expr><name pos:line="11" pos:column="50">b<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">sz<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58"> <block pos:line="11" pos:column="59">{
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">DEBUG<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><literal type="string" pos:line="12" pos:column="13">"lcc_network_parse(): reading type and/or length failed.\n"<pos:position pos:line="12" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="74"/></expr_stmt>
      <return pos:line="13" pos:column="7">return <expr><name pos:line="13" pos:column="14">EINVAL<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">sz<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&lt;<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="15">5<pos:position pos:line="16" pos:column="16"/></literal><operator pos:line="16" pos:column="16">)<pos:position pos:line="16" pos:column="17"/></operator> <operator pos:line="16" pos:column="18">||<pos:position pos:line="16" pos:column="20"/></operator> <operator pos:line="16" pos:column="21">(<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><operator pos:line="16" pos:column="23">(<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">size_t<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">)<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">sz<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">-<pos:position pos:line="16" pos:column="35"/></operator> <literal type="number" pos:line="16" pos:column="36">4<pos:position pos:line="16" pos:column="37"/></literal><operator pos:line="16" pos:column="37">)<pos:position pos:line="16" pos:column="38"/></operator> <operator pos:line="16" pos:column="39">&gt;<pos:position pos:line="16" pos:column="43"/></operator> <name><name pos:line="16" pos:column="41">b<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">-&gt;<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="44">len<pos:position pos:line="16" pos:column="47"/></name></name><operator pos:line="16" pos:column="47">)<pos:position pos:line="16" pos:column="48"/></operator></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">DEBUG<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><literal type="string" pos:line="17" pos:column="13">"lcc_network_parse(): invalid 'sz' field: sz = %"<pos:position pos:line="17" pos:column="62"/></literal> <name pos:line="17" pos:column="63">PRIu16<pos:position pos:line="17" pos:column="69"/></name>
            <literal type="string" pos:line="18" pos:column="13">", b-&gt;len = %zu\n"<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>,
            <argument><expr><name pos:line="19" pos:column="13">sz<pos:position pos:line="19" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="17">b<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">len<pos:position pos:line="19" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
      <return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">EINVAL<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="22" pos:column="5">sz<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">-=<pos:position pos:line="22" pos:column="10"/></operator> <literal type="number" pos:line="22" pos:column="11">4<pos:position pos:line="22" pos:column="12"/></literal></expr>;<pos:position pos:line="22" pos:column="13"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="24" pos:column="5">uint8_t<pos:position pos:line="24" pos:column="12"/></name></type> <name><name pos:line="24" pos:column="13">payload<pos:position pos:line="24" pos:column="20"/></name><index pos:line="24" pos:column="20">[<expr><name pos:line="24" pos:column="21">sz<pos:position pos:line="24" pos:column="23"/></name></expr>]<pos:position pos:line="24" pos:column="24"/></index></name></decl>;<pos:position pos:line="24" pos:column="25"/></decl_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">buffer_next<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">b<pos:position pos:line="25" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="24">payload<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="33">sizeof<argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">payload<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">EINVAL<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return></block></then></if>

    <switch pos:line="28" pos:column="5">switch <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">type<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition> <block pos:line="28" pos:column="19">{
    <case pos:line="29" pos:column="5">case <expr><name pos:line="29" pos:column="10">TYPE_HOST<pos:position pos:line="29" pos:column="19"/></name></expr>:<pos:position pos:line="29" pos:column="20"/></case>
    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">TYPE_PLUGIN<pos:position pos:line="30" pos:column="21"/></name></expr>:<pos:position pos:line="30" pos:column="22"/></case>
    <case pos:line="31" pos:column="5">case <expr><name pos:line="31" pos:column="10">TYPE_PLUGIN_INSTANCE<pos:position pos:line="31" pos:column="30"/></name></expr>:<pos:position pos:line="31" pos:column="31"/></case>
    <case pos:line="32" pos:column="5">case <expr><name pos:line="32" pos:column="10">TYPE_TYPE<pos:position pos:line="32" pos:column="19"/></name></expr>:<pos:position pos:line="32" pos:column="20"/></case>
    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">TYPE_TYPE_INSTANCE<pos:position pos:line="33" pos:column="28"/></name></expr>:<pos:position pos:line="33" pos:column="29"/></case> <block pos:line="33" pos:column="30">{
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><call><name pos:line="34" pos:column="11">parse_identifier<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">type<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="34">payload<pos:position pos:line="34" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="43">sizeof<argument_list pos:line="34" pos:column="49">(<argument><expr><name pos:line="34" pos:column="50">payload<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="34" pos:column="60">&amp;<pos:position pos:line="34" pos:column="65"/></operator><name pos:line="34" pos:column="61">state<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="68"/></condition><then pos:line="34" pos:column="68"> <block pos:line="34" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">DEBUG<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><literal type="string" pos:line="35" pos:column="15">"lcc_network_parse(): parse_identifier failed.\n"<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">EINVAL<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></return>
      }<pos:position pos:line="37" pos:column="8"/></block></then></if>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    }<pos:position pos:line="39" pos:column="6"/></block>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">TYPE_INTERVAL<pos:position pos:line="41" pos:column="23"/></name></expr>:<pos:position pos:line="41" pos:column="24"/></case>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">TYPE_INTERVAL_HR<pos:position pos:line="42" pos:column="26"/></name></expr>:<pos:position pos:line="42" pos:column="27"/></case>
    <case pos:line="43" pos:column="5">case <expr><name pos:line="43" pos:column="10">TYPE_TIME<pos:position pos:line="43" pos:column="19"/></name></expr>:<pos:position pos:line="43" pos:column="20"/></case>
    <case pos:line="44" pos:column="5">case <expr><name pos:line="44" pos:column="10">TYPE_TIME_HR<pos:position pos:line="44" pos:column="22"/></name></expr>:<pos:position pos:line="44" pos:column="23"/></case> <block pos:line="44" pos:column="24">{
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">parse_time<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">type<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="28">payload<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="37">sizeof<argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">payload<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="45" pos:column="54">&amp;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="55">state<pos:position pos:line="45" pos:column="60"/></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="62"/></condition><then pos:line="45" pos:column="62"> <block pos:line="45" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">DEBUG<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><literal type="string" pos:line="46" pos:column="15">"lcc_network_parse(): parse_time failed.\n"<pos:position pos:line="46" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="60"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">EINVAL<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></return>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break>
    }<pos:position pos:line="50" pos:column="6"/></block>

    <case pos:line="52" pos:column="5">case <expr><name pos:line="52" pos:column="10">TYPE_VALUES<pos:position pos:line="52" pos:column="21"/></name></expr>:<pos:position pos:line="52" pos:column="22"/></case> <block pos:line="52" pos:column="23">{
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">lcc_value_list_t<pos:position pos:line="53" pos:column="23"/></name></type> <name pos:line="53" pos:column="24">vl<pos:position pos:line="53" pos:column="26"/></name> <init pos:line="53" pos:column="27">= <expr><name pos:line="53" pos:column="29">state<pos:position pos:line="53" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="53" pos:column="35"/></decl_stmt>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><call><name pos:line="54" pos:column="11">parse_values<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">payload<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="33">sizeof<argument_list pos:line="54" pos:column="39">(<argument><expr><name pos:line="54" pos:column="40">payload<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="54" pos:column="50">&amp;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="51">vl<pos:position pos:line="54" pos:column="53"/></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="55"/></condition><then pos:line="54" pos:column="55"> <block pos:line="54" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">free<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name><name pos:line="55" pos:column="14">vl<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">.<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">values<pos:position pos:line="55" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">free<pos:position pos:line="56" pos:column="13"/></name><argument_list pos:line="56" pos:column="13">(<argument><expr><name><name pos:line="56" pos:column="14">vl<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">.<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">values_types<pos:position pos:line="56" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">DEBUG<pos:position pos:line="57" pos:column="14"/></name><argument_list pos:line="57" pos:column="14">(<argument><expr><literal type="string" pos:line="57" pos:column="15">"lcc_network_parse(): parse_values failed.\n"<pos:position pos:line="57" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
        <return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">EINVAL<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></return>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>

      <decl_stmt><decl><type><name pos:line="61" pos:column="7">int<pos:position pos:line="61" pos:column="10"/></name></type> <name pos:line="61" pos:column="11">status<pos:position pos:line="61" pos:column="17"/></name> <init pos:line="61" pos:column="18">= <expr><literal type="number" pos:line="61" pos:column="20">0<pos:position pos:line="61" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="22"/></decl_stmt>

      <comment type="block" pos:line="63" pos:column="7">/* Write metrics if they have the required security level. */</comment>
      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><name pos:line="64" pos:column="11">sl<pos:position pos:line="64" pos:column="13"/></name> <operator pos:line="64" pos:column="14">&gt;=<pos:position pos:line="64" pos:column="19"/></operator> <name><name pos:line="64" pos:column="17">opts<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">-&gt;<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="23">security_level<pos:position pos:line="64" pos:column="37"/></name></name></expr>)<pos:position pos:line="64" pos:column="38"/></condition><then pos:line="64" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="9">status<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <call><name><name pos:line="65" pos:column="18">opts<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">-&gt;<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="24">writer<pos:position pos:line="65" pos:column="30"/></name></name><argument_list pos:line="65" pos:column="30">(<argument><expr><operator pos:line="65" pos:column="31">&amp;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="32">vl<pos:position pos:line="65" pos:column="34"/></name></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="67" pos:column="7">free<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name><name pos:line="67" pos:column="12">vl<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">.<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="15">values<pos:position pos:line="67" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">free<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name><name pos:line="68" pos:column="12">vl<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">.<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="15">values_types<pos:position pos:line="68" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="29"/></expr_stmt>

      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><name pos:line="70" pos:column="11">status<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">!=<pos:position pos:line="70" pos:column="20"/></operator> <literal type="number" pos:line="70" pos:column="21">0<pos:position pos:line="70" pos:column="22"/></literal></expr>)<pos:position pos:line="70" pos:column="23"/></condition><then pos:line="70" pos:column="23">
        <block type="pseudo"><return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">status<pos:position pos:line="71" pos:column="22"/></name></expr>;<pos:position pos:line="71" pos:column="23"/></return></block></then></if>
      <break pos:line="72" pos:column="7">break;<pos:position pos:line="72" pos:column="13"/></break>
    }<pos:position pos:line="73" pos:column="6"/></block>

    <case pos:line="75" pos:column="5">case <expr><name pos:line="75" pos:column="10">TYPE_SIGN_SHA256<pos:position pos:line="75" pos:column="26"/></name></expr>:<pos:position pos:line="75" pos:column="27"/></case> <block pos:line="75" pos:column="28">{
      <decl_stmt><decl><type><name pos:line="76" pos:column="7">int<pos:position pos:line="76" pos:column="10"/></name></type> <name pos:line="76" pos:column="11">status<pos:position pos:line="76" pos:column="17"/></name> <init pos:line="76" pos:column="18">=
          <expr><call><name pos:line="77" pos:column="11">parse_sign_sha256<pos:position pos:line="77" pos:column="28"/></name><argument_list pos:line="77" pos:column="28">(<argument><expr><name pos:line="77" pos:column="29">payload<pos:position pos:line="77" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="38">sizeof<argument_list pos:line="77" pos:column="44">(<argument><expr><name pos:line="77" pos:column="45">payload<pos:position pos:line="77" pos:column="52"/></name></expr></argument>)<pos:position pos:line="77" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="55">b<pos:position pos:line="77" pos:column="56"/></name><operator pos:line="77" pos:column="56">-&gt;<pos:position pos:line="77" pos:column="61"/></operator><name pos:line="77" pos:column="58">data<pos:position pos:line="77" pos:column="62"/></name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="64">b<pos:position pos:line="77" pos:column="65"/></name><operator pos:line="77" pos:column="65">-&gt;<pos:position pos:line="77" pos:column="70"/></operator><name pos:line="77" pos:column="67">len<pos:position pos:line="77" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="72">opts<pos:position pos:line="77" pos:column="76"/></name></expr></argument>)<pos:position pos:line="77" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="78"/></decl_stmt>
      <if pos:line="78" pos:column="7">if <condition pos:line="78" pos:column="10">(<expr><name pos:line="78" pos:column="11">status<pos:position pos:line="78" pos:column="17"/></name> <operator pos:line="78" pos:column="18">!=<pos:position pos:line="78" pos:column="20"/></operator> <literal type="number" pos:line="78" pos:column="21">0<pos:position pos:line="78" pos:column="22"/></literal></expr>)<pos:position pos:line="78" pos:column="23"/></condition><then pos:line="78" pos:column="23"> <block pos:line="78" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">DEBUG<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><literal type="string" pos:line="79" pos:column="15">"lcc_network_parse(): parse_sign_sha256() = %d\n"<pos:position pos:line="79" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="66">status<pos:position pos:line="79" pos:column="72"/></name></expr></argument>)<pos:position pos:line="79" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="74"/></expr_stmt>
        <return pos:line="80" pos:column="9">return <expr><operator pos:line="80" pos:column="16">-<pos:position pos:line="80" pos:column="17"/></operator><literal type="number" pos:line="80" pos:column="17">1<pos:position pos:line="80" pos:column="18"/></literal></expr>;<pos:position pos:line="80" pos:column="19"/></return>
      }<pos:position pos:line="81" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="82" pos:column="7">/* parse_sign_sha256, if successful, consumes all remaining data. */</comment>
      <expr_stmt><expr><name><name pos:line="83" pos:column="7">b<pos:position pos:line="83" pos:column="8"/></name><operator pos:line="83" pos:column="8">-&gt;<pos:position pos:line="83" pos:column="13"/></operator><name pos:line="83" pos:column="10">data<pos:position pos:line="83" pos:column="14"/></name></name> <operator pos:line="83" pos:column="15">=<pos:position pos:line="83" pos:column="16"/></operator> <name pos:line="83" pos:column="17">NULL<pos:position pos:line="83" pos:column="21"/></name></expr>;<pos:position pos:line="83" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="84" pos:column="7">b<pos:position pos:line="84" pos:column="8"/></name><operator pos:line="84" pos:column="8">-&gt;<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="10">len<pos:position pos:line="84" pos:column="13"/></name></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <literal type="number" pos:line="84" pos:column="16">0<pos:position pos:line="84" pos:column="17"/></literal></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    }<pos:position pos:line="86" pos:column="6"/></block>

    <case pos:line="88" pos:column="5">case <expr><name pos:line="88" pos:column="10">TYPE_ENCR_AES256<pos:position pos:line="88" pos:column="26"/></name></expr>:<pos:position pos:line="88" pos:column="27"/></case> <block pos:line="88" pos:column="28">{
      <decl_stmt><decl><type><name pos:line="89" pos:column="7">int<pos:position pos:line="89" pos:column="10"/></name></type> <name pos:line="89" pos:column="11">status<pos:position pos:line="89" pos:column="17"/></name> <init pos:line="89" pos:column="18">= <expr><call><name pos:line="89" pos:column="20">parse_encrypt_aes256<pos:position pos:line="89" pos:column="40"/></name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">payload<pos:position pos:line="89" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="89" pos:column="50">sizeof<argument_list pos:line="89" pos:column="56">(<argument><expr><name pos:line="89" pos:column="57">payload<pos:position pos:line="89" pos:column="64"/></name></expr></argument>)<pos:position pos:line="89" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="89" pos:column="67">opts<pos:position pos:line="89" pos:column="71"/></name></expr></argument>)<pos:position pos:line="89" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="89" pos:column="73"/></decl_stmt>
      <if pos:line="90" pos:column="7">if <condition pos:line="90" pos:column="10">(<expr><name pos:line="90" pos:column="11">status<pos:position pos:line="90" pos:column="17"/></name> <operator pos:line="90" pos:column="18">!=<pos:position pos:line="90" pos:column="20"/></operator> <literal type="number" pos:line="90" pos:column="21">0<pos:position pos:line="90" pos:column="22"/></literal></expr>)<pos:position pos:line="90" pos:column="23"/></condition><then pos:line="90" pos:column="23"> <block pos:line="90" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">DEBUG<pos:position pos:line="91" pos:column="14"/></name><argument_list pos:line="91" pos:column="14">(<argument><expr><literal type="string" pos:line="91" pos:column="15">"lcc_network_parse(): parse_encrypt_aes256() = %d\n"<pos:position pos:line="91" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="69">status<pos:position pos:line="91" pos:column="75"/></name></expr></argument>)<pos:position pos:line="91" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="77"/></expr_stmt>
        <return pos:line="92" pos:column="9">return <expr><operator pos:line="92" pos:column="16">-<pos:position pos:line="92" pos:column="17"/></operator><literal type="number" pos:line="92" pos:column="17">1<pos:position pos:line="92" pos:column="18"/></literal></expr>;<pos:position pos:line="92" pos:column="19"/></return>
      }<pos:position pos:line="93" pos:column="8"/></block></then></if>
      <break pos:line="94" pos:column="7">break;<pos:position pos:line="94" pos:column="13"/></break>
    }<pos:position pos:line="95" pos:column="6"/></block>

    <default pos:line="97" pos:column="5">default:<pos:position pos:line="97" pos:column="13"/></default> <block pos:line="97" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="98" pos:column="7">DEBUG<pos:position pos:line="98" pos:column="12"/></name><argument_list pos:line="98" pos:column="12">(<argument><expr><literal type="string" pos:line="98" pos:column="13">"lcc_network_parse(): ignoring unknown type %"<pos:position pos:line="98" pos:column="59"/></literal> <name pos:line="98" pos:column="60">PRIu16<pos:position pos:line="98" pos:column="66"/></name> <literal type="string" pos:line="98" pos:column="67">"\n"<pos:position pos:line="98" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="73">type<pos:position pos:line="98" pos:column="77"/></name></expr></argument>)<pos:position pos:line="98" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="79"/></expr_stmt>
      <return pos:line="99" pos:column="7">return <expr><name pos:line="99" pos:column="14">EINVAL<pos:position pos:line="99" pos:column="20"/></name></expr>;<pos:position pos:line="99" pos:column="21"/></return>
    }<pos:position pos:line="100" pos:column="6"/></block>
    }<pos:position pos:line="101" pos:column="6"/></block></switch>
  }<pos:position pos:line="102" pos:column="4"/></block></while>

  <return pos:line="104" pos:column="3">return <expr><literal type="number" pos:line="104" pos:column="10">0<pos:position pos:line="104" pos:column="11"/></literal></expr>;<pos:position pos:line="104" pos:column="12"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
