<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_759_collectd-4.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_flush<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">timeout<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">pthread_mutex_lock<pos:position pos:line="3" pos:column="27"/></name> <argument_list pos:line="3" pos:column="28">(<argument><expr><operator pos:line="3" pos:column="29">&amp;<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="30">send_buffer_lock<pos:position pos:line="3" pos:column="46"/></name></expr></argument>)<pos:position pos:line="3" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="48"/></expr_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">(<pos:position pos:line="5" pos:column="14"/></operator><operator pos:line="5" pos:column="14">(<pos:position pos:line="5" pos:column="15"/></operator><call><name pos:line="5" pos:column="15">time<pos:position pos:line="5" pos:column="19"/></name> <argument_list pos:line="5" pos:column="20">(<argument><expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call> <operator pos:line="5" pos:column="27">-<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="29">cache_flush_last<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">)<pos:position pos:line="5" pos:column="46"/></operator> <operator pos:line="5" pos:column="47">&gt;=<pos:position pos:line="5" pos:column="52"/></operator> <name pos:line="5" pos:column="50">timeout<pos:position pos:line="5" pos:column="57"/></name><operator pos:line="5" pos:column="57">)<pos:position pos:line="5" pos:column="58"/></operator>
			<operator pos:line="6" pos:column="25">&amp;&amp;<pos:position pos:line="6" pos:column="35"/></operator> <operator pos:line="6" pos:column="28">(<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">send_buffer_fill<pos:position pos:line="6" pos:column="45"/></name> <operator pos:line="6" pos:column="46">&gt;<pos:position pos:line="6" pos:column="50"/></operator> <literal type="number" pos:line="6" pos:column="48">0<pos:position pos:line="6" pos:column="49"/></literal><operator pos:line="6" pos:column="49">)<pos:position pos:line="6" pos:column="50"/></operator></expr>)<pos:position pos:line="6" pos:column="51"/></condition><then pos:line="6" pos:column="51">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">flush_buffer<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">()<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">pthread_mutex_unlock<pos:position pos:line="11" pos:column="29"/></name> <argument_list pos:line="11" pos:column="30">(<argument><expr><operator pos:line="11" pos:column="31">&amp;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="32">send_buffer_lock<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>

	<return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal><operator pos:line="13" pos:column="18">)<pos:position pos:line="13" pos:column="19"/></operator></expr>;<pos:position pos:line="13" pos:column="20"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
