<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1979_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cpy_flush_callback<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">timeout<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">id<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">user_data_t<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">data<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list> <block pos:line="1" pos:column="80">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">cpy_callback_t<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">c<pos:position pos:line="2" pos:column="20"/></name> <init pos:line="2" pos:column="21">= <expr><name><name pos:line="2" pos:column="23">data<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">-&gt;<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="29">data<pos:position pos:line="2" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="2" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">PyObject<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">text<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <macro><name pos:line="5" pos:column="3">CPY_LOCK_THREADS<pos:position pos:line="5" pos:column="19"/></name></macro>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">id<pos:position pos:line="6" pos:column="9"/></name></expr>)<pos:position pos:line="6" pos:column="10"/></condition><then pos:line="6" pos:column="10"> <block pos:line="6" pos:column="11">{
    <expr_stmt><expr><name pos:line="7" pos:column="5">text<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <call><name pos:line="7" pos:column="12">cpy_string_to_unicode_or_bytes<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">(<argument><expr><name pos:line="7" pos:column="43">id<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then> <else pos:line="8" pos:column="5">else <block pos:line="8" pos:column="10">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">text<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <name pos:line="9" pos:column="12">Py_None<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Py_INCREF<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">text<pos:position pos:line="10" pos:column="19"/></name></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></else></if>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name><name pos:line="12" pos:column="7">c<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">data<pos:position pos:line="12" pos:column="14"/></name></name> <operator pos:line="12" pos:column="15">==<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">NULL<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">ret<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">PyObject_CallFunction<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name><name pos:line="13" pos:column="33">c<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">callback<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="46">"iN"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">timeout<pos:position pos:line="13" pos:column="59"/></name></expr></argument>,
                                <argument><expr><name pos:line="14" pos:column="33">text<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt></block></then> <comment type="block" pos:line="14" pos:column="40">/* New reference. */</comment>
  <else pos:line="15" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">ret<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">PyObject_CallFunction<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name><name pos:line="16" pos:column="33">c<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">callback<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="46">"iNO"<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="53">timeout<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">text<pos:position pos:line="16" pos:column="66"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="17" pos:column="33">c<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">data<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt></block></else></if> <comment type="block" pos:line="17" pos:column="43">/* New reference. */</comment>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">ret<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">==<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">NULL<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19"> <block pos:line="19" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">cpy_log_exception<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><literal type="string" pos:line="20" pos:column="23">"flush callback"<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then> <else pos:line="21" pos:column="5">else <block pos:line="21" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Py_DECREF<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">ret<pos:position pos:line="22" pos:column="18"/></name></expr></argument>)<pos:position pos:line="22" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="24" pos:column="3">CPY_RELEASE_THREADS<pos:position pos:line="24" pos:column="22"/></name></expr></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
