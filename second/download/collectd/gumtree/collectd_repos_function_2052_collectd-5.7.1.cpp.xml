<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2052_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sockent_client_connect<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">sockent_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">se<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list> <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">c_complain_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">complaint<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">C_COMPLAIN_INIT_STATIC<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockent_client<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">client<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">ai_list<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">_Bool<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">reconnect<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">cdtime_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">now<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">se<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">NULL<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">||<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name><name pos:line="11" pos:column="24">se<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">type<pos:position pos:line="11" pos:column="32"/></name></name> <operator pos:line="11" pos:column="33">!=<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">SOCKENT_TYPE_CLIENT<pos:position pos:line="11" pos:column="55"/></name><operator pos:line="11" pos:column="55">)<pos:position pos:line="11" pos:column="56"/></operator></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">EINVAL<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">)<pos:position pos:line="12" pos:column="20"/></operator></expr>;<pos:position pos:line="12" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">client<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <operator pos:line="14" pos:column="12">&amp;<pos:position pos:line="14" pos:column="17"/></operator><name><name pos:line="14" pos:column="13">se<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">data<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">client<pos:position pos:line="14" pos:column="28"/></name></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">now<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">cdtime<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">()<pos:position pos:line="16" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">client<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">resolve_interval<pos:position pos:line="17" pos:column="31"/></name></name> <operator pos:line="17" pos:column="32">!=<pos:position pos:line="17" pos:column="34"/></operator> <literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal> <operator pos:line="17" pos:column="37">&amp;&amp;<pos:position pos:line="17" pos:column="47"/></operator> <name><name pos:line="17" pos:column="40">client<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">-&gt;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="48">next_resolve_reconnect<pos:position pos:line="17" pos:column="70"/></name></name> <operator pos:line="17" pos:column="71">&lt;<pos:position pos:line="17" pos:column="75"/></operator> <name pos:line="17" pos:column="73">now<pos:position pos:line="17" pos:column="76"/></name></expr>)<pos:position pos:line="17" pos:column="77"/></condition><then pos:line="17" pos:column="77"> <block pos:line="17" pos:column="78">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">DEBUG<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"network plugin: Reconnecting socket, resolve_interval = %lf, "<pos:position pos:line="18" pos:column="74"/></literal>
          <literal type="string" pos:line="19" pos:column="11">"next_resolve_reconnect = %lf"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="20" pos:column="11">CDTIME_T_TO_DOUBLE<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name><name pos:line="20" pos:column="30">client<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">resolve_interval<pos:position pos:line="20" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr></argument>,
          <argument><expr><call><name pos:line="21" pos:column="11">CDTIME_T_TO_DOUBLE<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name><name pos:line="21" pos:column="30">client<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">next_resolve_reconnect<pos:position pos:line="21" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">reconnect<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <literal type="number" pos:line="22" pos:column="17">1<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name><name pos:line="25" pos:column="7">client<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">fd<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">&gt;=<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="21">0<pos:position pos:line="25" pos:column="22"/></literal> <operator pos:line="25" pos:column="23">&amp;&amp;<pos:position pos:line="25" pos:column="33"/></operator> <operator pos:line="25" pos:column="26">!<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">reconnect<pos:position pos:line="25" pos:column="36"/></name></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37"> <comment type="block" pos:line="25" pos:column="38">/* already connected and not stale*/</comment>
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">0<pos:position pos:line="26" pos:column="14"/></literal><operator pos:line="26" pos:column="14">)<pos:position pos:line="26" pos:column="15"/></operator></expr>;<pos:position pos:line="26" pos:column="16"/></return></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="28" pos:column="3">struct<pos:position pos:line="28" pos:column="9"/></name> <name pos:line="28" pos:column="10">addrinfo<pos:position pos:line="28" pos:column="18"/></name></name></type> <name pos:line="28" pos:column="19">ai_hints<pos:position pos:line="28" pos:column="27"/></name> <init pos:line="28" pos:column="28">= <expr><block pos:line="28" pos:column="30">{<expr><operator pos:line="28" pos:column="31">.<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">ai_family<pos:position pos:line="28" pos:column="41"/></name> <operator pos:line="28" pos:column="42">=<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="44">AF_UNSPEC<pos:position pos:line="28" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="29" pos:column="31">.<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">ai_flags<pos:position pos:line="29" pos:column="40"/></name> <operator pos:line="29" pos:column="41">=<pos:position pos:line="29" pos:column="42"/></operator> <name pos:line="29" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="29" pos:column="56"/></name></expr>,
                              <expr><operator pos:line="30" pos:column="31">.<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">ai_protocol<pos:position pos:line="30" pos:column="43"/></name> <operator pos:line="30" pos:column="44">=<pos:position pos:line="30" pos:column="45"/></operator> <name pos:line="30" pos:column="46">IPPROTO_UDP<pos:position pos:line="30" pos:column="57"/></name></expr>,
                              <expr><operator pos:line="31" pos:column="31">.<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">ai_socktype<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">=<pos:position pos:line="31" pos:column="45"/></operator> <name pos:line="31" pos:column="46">SOCK_DGRAM<pos:position pos:line="31" pos:column="56"/></name></expr>}<pos:position pos:line="31" pos:column="57"/></block></expr></init></decl>;<pos:position pos:line="31" pos:column="58"/></decl_stmt>

  <expr_stmt><expr><name pos:line="33" pos:column="3">status<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <call><name pos:line="33" pos:column="12">getaddrinfo<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name><name pos:line="33" pos:column="24">se<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">node<pos:position pos:line="33" pos:column="32"/></name></name></expr></argument>,
                       <argument><expr><ternary><condition><expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><name><name pos:line="34" pos:column="25">se<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">service<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">!=<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="40">NULL<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">)<pos:position pos:line="34" pos:column="45"/></operator></expr> ?<pos:position pos:line="34" pos:column="47"/></condition><then pos:line="34" pos:column="47"> <expr><name><name pos:line="34" pos:column="48">se<pos:position pos:line="34" pos:column="50"/></name><operator pos:line="34" pos:column="50">-&gt;<pos:position pos:line="34" pos:column="55"/></operator><name pos:line="34" pos:column="52">service<pos:position pos:line="34" pos:column="59"/></name></name></expr> <pos:position pos:line="34" pos:column="60"/></then><else pos:line="34" pos:column="60">: <expr><name pos:line="34" pos:column="62">NET_DEFAULT_PORT<pos:position pos:line="34" pos:column="78"/></name></expr></else></ternary></expr></argument>,
                       <argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">ai_hints<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="35">&amp;<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="36">ai_list<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">c_complain<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(
        <argument><expr><name pos:line="38" pos:column="9">LOG_ERR<pos:position pos:line="38" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="18">&amp;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="19">complaint<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="30">"network plugin: getaddrinfo (%s, %s) failed: %s"<pos:position pos:line="38" pos:column="79"/></literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="39" pos:column="9">(<pos:position pos:line="39" pos:column="10"/></operator><name><name pos:line="39" pos:column="10">se<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">-&gt;<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="14">node<pos:position pos:line="39" pos:column="18"/></name></name> <operator pos:line="39" pos:column="19">==<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">NULL<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">)<pos:position pos:line="39" pos:column="27"/></operator></expr> ?<pos:position pos:line="39" pos:column="29"/></condition><then pos:line="39" pos:column="29"> <expr><literal type="string" pos:line="39" pos:column="30">"(null)"<pos:position pos:line="39" pos:column="38"/></literal></expr> <pos:position pos:line="39" pos:column="39"/></then><else pos:line="39" pos:column="39">: <expr><name><name pos:line="39" pos:column="41">se<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">-&gt;<pos:position pos:line="39" pos:column="48"/></operator><name pos:line="39" pos:column="45">node<pos:position pos:line="39" pos:column="49"/></name></name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="40" pos:column="9">(<pos:position pos:line="40" pos:column="10"/></operator><name><name pos:line="40" pos:column="10">se<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">service<pos:position pos:line="40" pos:column="21"/></name></name> <operator pos:line="40" pos:column="22">==<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">NULL<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator></expr> ?<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32"> <expr><literal type="string" pos:line="40" pos:column="33">"(null)"<pos:position pos:line="40" pos:column="41"/></literal></expr> <pos:position pos:line="40" pos:column="42"/></then><else pos:line="40" pos:column="42">: <expr><name><name pos:line="40" pos:column="44">se<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">service<pos:position pos:line="40" pos:column="55"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="57">gai_strerror<pos:position pos:line="40" pos:column="69"/></name><argument_list pos:line="40" pos:column="69">(<argument><expr><name pos:line="40" pos:column="70">status<pos:position pos:line="40" pos:column="76"/></name></expr></argument>)<pos:position pos:line="40" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><operator pos:line="41" pos:column="12">(<pos:position pos:line="41" pos:column="13"/></operator><operator pos:line="41" pos:column="13">-<pos:position pos:line="41" pos:column="14"/></operator><literal type="number" pos:line="41" pos:column="14">1<pos:position pos:line="41" pos:column="15"/></literal><operator pos:line="41" pos:column="15">)<pos:position pos:line="41" pos:column="16"/></operator></expr>;<pos:position pos:line="41" pos:column="17"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then> <else pos:line="42" pos:column="5">else <block pos:line="42" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">c_release<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">LOG_NOTICE<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="27">&amp;<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="28">complaint<pos:position pos:line="43" pos:column="37"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="44" pos:column="15">"network plugin: Successfully resolved \"%s\"."<pos:position pos:line="44" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="64">se<pos:position pos:line="44" pos:column="66"/></name><operator pos:line="44" pos:column="66">-&gt;<pos:position pos:line="44" pos:column="71"/></operator><name pos:line="44" pos:column="68">node<pos:position pos:line="44" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="74"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></else></if>

  <for pos:line="47" pos:column="3">for <control pos:line="47" pos:column="7">(<init><decl><type><name><name pos:line="47" pos:column="8">struct<pos:position pos:line="47" pos:column="14"/></name> <name pos:line="47" pos:column="15">addrinfo<pos:position pos:line="47" pos:column="23"/></name></name> <modifier pos:line="47" pos:column="24">*<pos:position pos:line="47" pos:column="25"/></modifier><name pos:line="47" pos:column="25">ai_ptr<pos:position pos:line="47" pos:column="31"/></name></type> <init pos:line="47" pos:column="32">= <expr><name pos:line="47" pos:column="34">ai_list<pos:position pos:line="47" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="42"/></init> <condition><expr><name pos:line="47" pos:column="43">ai_ptr<pos:position pos:line="47" pos:column="49"/></name> <operator pos:line="47" pos:column="50">!=<pos:position pos:line="47" pos:column="52"/></operator> <name pos:line="47" pos:column="53">NULL<pos:position pos:line="47" pos:column="57"/></name></expr>;<pos:position pos:line="47" pos:column="58"/></condition>
       <incr><expr><name pos:line="48" pos:column="8">ai_ptr<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name><name pos:line="48" pos:column="17">ai_ptr<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">-&gt;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="25">ai_next<pos:position pos:line="48" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="48" pos:column="33"/></control> <block pos:line="48" pos:column="34">{
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name><name pos:line="49" pos:column="9">client<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">-&gt;<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="17">fd<pos:position pos:line="49" pos:column="19"/></name></name> <operator pos:line="49" pos:column="20">&gt;=<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="23">0<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25"> <comment type="block" pos:line="49" pos:column="26">/* when we reconnect */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">sockent_client_disconnect<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">se<pos:position pos:line="50" pos:column="35"/></name></expr></argument>)<pos:position pos:line="50" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="52" pos:column="5">client<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">-&gt;<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="13">fd<pos:position pos:line="52" pos:column="15"/></name></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator>
        <call><name pos:line="53" pos:column="9">socket<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name><name pos:line="53" pos:column="16">ai_ptr<pos:position pos:line="53" pos:column="22"/></name><operator pos:line="53" pos:column="22">-&gt;<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="24">ai_family<pos:position pos:line="53" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="35">ai_ptr<pos:position pos:line="53" pos:column="41"/></name><operator pos:line="53" pos:column="41">-&gt;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="43">ai_socktype<pos:position pos:line="53" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="56">ai_ptr<pos:position pos:line="53" pos:column="62"/></name><operator pos:line="53" pos:column="62">-&gt;<pos:position pos:line="53" pos:column="67"/></operator><name pos:line="53" pos:column="64">ai_protocol<pos:position pos:line="53" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="77"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name><name pos:line="54" pos:column="9">client<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">fd<pos:position pos:line="54" pos:column="19"/></name></name> <operator pos:line="54" pos:column="20">&lt;<pos:position pos:line="54" pos:column="24"/></operator> <literal type="number" pos:line="54" pos:column="22">0<pos:position pos:line="54" pos:column="23"/></literal></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24"> <block pos:line="54" pos:column="25">{
      <decl_stmt><decl><type><name pos:line="55" pos:column="7">char<pos:position pos:line="55" pos:column="11"/></name></type> <name><name pos:line="55" pos:column="12">errbuf<pos:position pos:line="55" pos:column="18"/></name><index pos:line="55" pos:column="18">[<expr><literal type="number" pos:line="55" pos:column="19">1024<pos:position pos:line="55" pos:column="23"/></literal></expr>]<pos:position pos:line="55" pos:column="24"/></index></name></decl>;<pos:position pos:line="55" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">ERROR<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><literal type="string" pos:line="56" pos:column="13">"network plugin: socket(2) failed: %s"<pos:position pos:line="56" pos:column="51"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="57" pos:column="13">sstrerror<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">errno<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">errbuf<pos:position pos:line="57" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="38">sizeof<argument_list pos:line="57" pos:column="44">(<argument><expr><name pos:line="57" pos:column="45">errbuf<pos:position pos:line="57" pos:column="51"/></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="55"/></expr_stmt>
      <continue pos:line="58" pos:column="7">continue;<pos:position pos:line="58" pos:column="16"/></continue>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="61" pos:column="5">client<pos:position pos:line="61" pos:column="11"/></name><operator pos:line="61" pos:column="11">-&gt;<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="13">addr<pos:position pos:line="61" pos:column="17"/></name></name> <operator pos:line="61" pos:column="18">=<pos:position pos:line="61" pos:column="19"/></operator> <call><name pos:line="61" pos:column="20">calloc<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><literal type="number" pos:line="61" pos:column="27">1<pos:position pos:line="61" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="30">sizeof<argument_list pos:line="61" pos:column="36">(<argument><expr><operator pos:line="61" pos:column="37">*<pos:position pos:line="61" pos:column="38"/></operator><name><name pos:line="61" pos:column="38">client<pos:position pos:line="61" pos:column="44"/></name><operator pos:line="61" pos:column="44">-&gt;<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="46">addr<pos:position pos:line="61" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name><name pos:line="62" pos:column="9">client<pos:position pos:line="62" pos:column="15"/></name><operator pos:line="62" pos:column="15">-&gt;<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="17">addr<pos:position pos:line="62" pos:column="21"/></name></name> <operator pos:line="62" pos:column="22">==<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">NULL<pos:position pos:line="62" pos:column="29"/></name></expr>)<pos:position pos:line="62" pos:column="30"/></condition><then pos:line="62" pos:column="30"> <block pos:line="62" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">ERROR<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><literal type="string" pos:line="63" pos:column="13">"network plugin: calloc failed."<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">close<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name><name pos:line="64" pos:column="13">client<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">fd<pos:position pos:line="64" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="65" pos:column="7">client<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">-&gt;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="15">fd<pos:position pos:line="65" pos:column="17"/></name></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <operator pos:line="65" pos:column="20">-<pos:position pos:line="65" pos:column="21"/></operator><literal type="number" pos:line="65" pos:column="21">1<pos:position pos:line="65" pos:column="22"/></literal></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
      <continue pos:line="66" pos:column="7">continue;<pos:position pos:line="66" pos:column="16"/></continue>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">assert<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><sizeof pos:line="69" pos:column="12">sizeof<argument_list pos:line="69" pos:column="18">(<argument><expr><operator pos:line="69" pos:column="19">*<pos:position pos:line="69" pos:column="20"/></operator><name><name pos:line="69" pos:column="20">client<pos:position pos:line="69" pos:column="26"/></name><operator pos:line="69" pos:column="26">-&gt;<pos:position pos:line="69" pos:column="31"/></operator><name pos:line="69" pos:column="28">addr<pos:position pos:line="69" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></sizeof> <operator pos:line="69" pos:column="34">&gt;=<pos:position pos:line="69" pos:column="39"/></operator> <name><name pos:line="69" pos:column="37">ai_ptr<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">-&gt;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="45">ai_addrlen<pos:position pos:line="69" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">memcpy<pos:position pos:line="70" pos:column="11"/></name><argument_list pos:line="70" pos:column="11">(<argument><expr><name><name pos:line="70" pos:column="12">client<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="20">addr<pos:position pos:line="70" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="26">ai_ptr<pos:position pos:line="70" pos:column="32"/></name><operator pos:line="70" pos:column="32">-&gt;<pos:position pos:line="70" pos:column="37"/></operator><name pos:line="70" pos:column="34">ai_addr<pos:position pos:line="70" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="43">ai_ptr<pos:position pos:line="70" pos:column="49"/></name><operator pos:line="70" pos:column="49">-&gt;<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="51">ai_addrlen<pos:position pos:line="70" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">client<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">addrlen<pos:position pos:line="71" pos:column="20"/></name></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <name><name pos:line="71" pos:column="23">ai_ptr<pos:position pos:line="71" pos:column="29"/></name><operator pos:line="71" pos:column="29">-&gt;<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="31">ai_addrlen<pos:position pos:line="71" pos:column="41"/></name></name></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">network_set_ttl<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">se<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="25">ai_ptr<pos:position pos:line="73" pos:column="31"/></name></expr></argument>)<pos:position pos:line="73" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">network_set_interface<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">se<pos:position pos:line="74" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="31">ai_ptr<pos:position pos:line="74" pos:column="37"/></name></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="76" pos:column="5">/* We don't open more than one write-socket per
     * node/service pair.. */</comment>
    <break pos:line="78" pos:column="5">break;<pos:position pos:line="78" pos:column="11"/></break>
  }<pos:position pos:line="79" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="81" pos:column="3">freeaddrinfo<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">ai_list<pos:position pos:line="81" pos:column="23"/></name></expr></argument>)<pos:position pos:line="81" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="25"/></expr_stmt>
  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><name><name pos:line="82" pos:column="7">client<pos:position pos:line="82" pos:column="13"/></name><operator pos:line="82" pos:column="13">-&gt;<pos:position pos:line="82" pos:column="18"/></operator><name pos:line="82" pos:column="15">fd<pos:position pos:line="82" pos:column="17"/></name></name> <operator pos:line="82" pos:column="18">&lt;<pos:position pos:line="82" pos:column="22"/></operator> <literal type="number" pos:line="82" pos:column="20">0<pos:position pos:line="82" pos:column="21"/></literal></expr>)<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22">
    <block type="pseudo"><return pos:line="83" pos:column="5">return <expr><operator pos:line="83" pos:column="12">(<pos:position pos:line="83" pos:column="13"/></operator><operator pos:line="83" pos:column="13">-<pos:position pos:line="83" pos:column="14"/></operator><literal type="number" pos:line="83" pos:column="14">1<pos:position pos:line="83" pos:column="15"/></literal><operator pos:line="83" pos:column="15">)<pos:position pos:line="83" pos:column="16"/></operator></expr>;<pos:position pos:line="83" pos:column="17"/></return></block></then></if>

  <if pos:line="85" pos:column="3">if <condition pos:line="85" pos:column="6">(<expr><name><name pos:line="85" pos:column="7">client<pos:position pos:line="85" pos:column="13"/></name><operator pos:line="85" pos:column="13">-&gt;<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="15">resolve_interval<pos:position pos:line="85" pos:column="31"/></name></name> <operator pos:line="85" pos:column="32">&gt;<pos:position pos:line="85" pos:column="36"/></operator> <literal type="number" pos:line="85" pos:column="34">0<pos:position pos:line="85" pos:column="35"/></literal></expr>)<pos:position pos:line="85" pos:column="36"/></condition><then pos:line="85" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="5">client<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">-&gt;<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="13">next_resolve_reconnect<pos:position pos:line="86" pos:column="35"/></name></name> <operator pos:line="86" pos:column="36">=<pos:position pos:line="86" pos:column="37"/></operator> <name pos:line="86" pos:column="38">now<pos:position pos:line="86" pos:column="41"/></name> <operator pos:line="86" pos:column="42">+<pos:position pos:line="86" pos:column="43"/></operator> <name><name pos:line="86" pos:column="44">client<pos:position pos:line="86" pos:column="50"/></name><operator pos:line="86" pos:column="50">-&gt;<pos:position pos:line="86" pos:column="55"/></operator><name pos:line="86" pos:column="52">resolve_interval<pos:position pos:line="86" pos:column="68"/></name></name></expr>;<pos:position pos:line="86" pos:column="69"/></expr_stmt></block></then></if>
  <return pos:line="87" pos:column="3">return <expr><operator pos:line="87" pos:column="10">(<pos:position pos:line="87" pos:column="11"/></operator><literal type="number" pos:line="87" pos:column="11">0<pos:position pos:line="87" pos:column="12"/></literal><operator pos:line="87" pos:column="12">)<pos:position pos:line="87" pos:column="13"/></operator></expr>;<pos:position pos:line="87" pos:column="14"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
