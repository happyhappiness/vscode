<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1438_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_bind_socket<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">fd<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name><name pos:line="1" pos:column="47">struct<pos:position pos:line="1" pos:column="53"/></name> <name pos:line="1" pos:column="54">addrinfo<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">ai<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="68">const<pos:position pos:line="1" pos:column="73"/></specifier> <name pos:line="1" pos:column="74">int<pos:position pos:line="1" pos:column="77"/></name></type> <name pos:line="1" pos:column="78">interface_idx<pos:position pos:line="1" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="92"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">loop<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">yes<pos:position pos:line="4" pos:column="16"/></name>  <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">1<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* allow multiple sockets to use the same PORT number */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">setsockopt<pos:position pos:line="7" pos:column="23"/></name> <argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">fd<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">SOL_SOCKET<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">SO_REUSEADDR<pos:position pos:line="7" pos:column="53"/></name></expr></argument>,
				<argument><expr><operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="34">yes<pos:position pos:line="8" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="39">sizeof<argument_list pos:line="8" pos:column="45">(<argument><expr><name pos:line="8" pos:column="46">yes<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call> <operator pos:line="8" pos:column="52">==<pos:position pos:line="8" pos:column="54"/></operator> <operator pos:line="8" pos:column="55">-<pos:position pos:line="8" pos:column="56"/></operator><literal type="number" pos:line="8" pos:column="56">1<pos:position pos:line="8" pos:column="57"/></literal></expr>)<pos:position pos:line="8" pos:column="58"/></condition><then pos:line="8" pos:column="58"> <block pos:line="8" pos:column="59">{
                <decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name></type> <name><name pos:line="9" pos:column="22">errbuf<pos:position pos:line="9" pos:column="28"/></name><index pos:line="9" pos:column="28">[<expr><literal type="number" pos:line="9" pos:column="29">1024<pos:position pos:line="9" pos:column="33"/></literal></expr>]<pos:position pos:line="9" pos:column="34"/></index></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="10" pos:column="17">ERROR<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"setsockopt: %s"<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>, 
                                <argument><expr><call><name pos:line="11" pos:column="33">sstrerror<pos:position pos:line="11" pos:column="42"/></name> <argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">errno<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">errbuf<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="59">sizeof <argument_list pos:line="11" pos:column="66">(<argument><expr><name pos:line="11" pos:column="67">errbuf<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="77"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">-<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">DEBUG<pos:position pos:line="15" pos:column="14"/></name> <argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="string" pos:line="15" pos:column="16">"fd = %i; calling `bind'"<pos:position pos:line="15" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">fd<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">bind<pos:position pos:line="17" pos:column="17"/></name> <argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">fd<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="23">ai<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">ai_addr<pos:position pos:line="17" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="36">ai<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">-&gt;<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="40">ai_addrlen<pos:position pos:line="17" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call> <operator pos:line="17" pos:column="52">==<pos:position pos:line="17" pos:column="54"/></operator> <operator pos:line="17" pos:column="55">-<pos:position pos:line="17" pos:column="56"/></operator><literal type="number" pos:line="17" pos:column="56">1<pos:position pos:line="17" pos:column="57"/></literal></expr>)<pos:position pos:line="17" pos:column="58"/></condition><then pos:line="17" pos:column="58">
	<block pos:line="18" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">char<pos:position pos:line="19" pos:column="21"/></name></type> <name><name pos:line="19" pos:column="22">errbuf<pos:position pos:line="19" pos:column="28"/></name><index pos:line="19" pos:column="28">[<expr><literal type="number" pos:line="19" pos:column="29">1024<pos:position pos:line="19" pos:column="33"/></literal></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></decl>;<pos:position pos:line="19" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">ERROR<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">(<argument><expr><literal type="string" pos:line="20" pos:column="24">"bind: %s"<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="21" pos:column="33">sstrerror<pos:position pos:line="21" pos:column="42"/></name> <argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">errno<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">errbuf<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="59">sizeof <argument_list pos:line="21" pos:column="66">(<argument><expr><name pos:line="21" pos:column="67">errbuf<pos:position pos:line="21" pos:column="73"/></name></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">-<pos:position pos:line="22" pos:column="26"/></operator><literal type="number" pos:line="22" pos:column="26">1<pos:position pos:line="22" pos:column="27"/></literal><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator></expr>;<pos:position pos:line="22" pos:column="29"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">ai<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">ai_family<pos:position pos:line="25" pos:column="26"/></name></name> <operator pos:line="25" pos:column="27">==<pos:position pos:line="25" pos:column="29"/></operator> <name pos:line="25" pos:column="30">AF_INET<pos:position pos:line="25" pos:column="37"/></name></expr>)<pos:position pos:line="25" pos:column="38"/></condition><then pos:line="25" pos:column="38">
	<block pos:line="26" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">sockaddr_in<pos:position pos:line="27" pos:column="35"/></name></name> <modifier pos:line="27" pos:column="36">*<pos:position pos:line="27" pos:column="37"/></modifier></type><name pos:line="27" pos:column="37">addr<pos:position pos:line="27" pos:column="41"/></name> <init pos:line="27" pos:column="42">= <expr><operator pos:line="27" pos:column="44">(<pos:position pos:line="27" pos:column="45"/></operator>struct <name pos:line="27" pos:column="52">sockaddr_in<pos:position pos:line="27" pos:column="63"/></name> <operator pos:line="27" pos:column="64">*<pos:position pos:line="27" pos:column="65"/></operator><operator pos:line="27" pos:column="65">)<pos:position pos:line="27" pos:column="66"/></operator> <name><name pos:line="27" pos:column="67">ai<pos:position pos:line="27" pos:column="69"/></name><operator pos:line="27" pos:column="69">-&gt;<pos:position pos:line="27" pos:column="74"/></operator><name pos:line="27" pos:column="71">ai_addr<pos:position pos:line="27" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="27" pos:column="79"/></decl_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">IN_MULTICAST<pos:position pos:line="28" pos:column="33"/></name> <argument_list pos:line="28" pos:column="34">(<argument><expr><call><name pos:line="28" pos:column="35">ntohl<pos:position pos:line="28" pos:column="40"/></name> <argument_list pos:line="28" pos:column="41">(<argument><expr><name><name pos:line="28" pos:column="42">addr<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">sin_addr<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">.<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="57">s_addr<pos:position pos:line="28" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="66"/></condition><then pos:line="28" pos:column="66">
		<block pos:line="29" pos:column="17">{
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="30" pos:column="37"/></name></expr></cpp:if>
			<decl_stmt><decl><type><name><name pos:line="31" pos:column="25">struct<pos:position pos:line="31" pos:column="31"/></name> <name pos:line="31" pos:column="32">ip_mreqn<pos:position pos:line="31" pos:column="40"/></name></name></type> <name pos:line="31" pos:column="41">mreq<pos:position pos:line="31" pos:column="45"/></name></decl>;<pos:position pos:line="31" pos:column="46"/></decl_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
			<decl_stmt><decl><type><name><name pos:line="33" pos:column="25">struct<pos:position pos:line="33" pos:column="31"/></name> <name pos:line="33" pos:column="32">ip_mreq<pos:position pos:line="33" pos:column="39"/></name></name></type> <name pos:line="33" pos:column="40">mreq<pos:position pos:line="33" pos:column="44"/></name></decl>;<pos:position pos:line="33" pos:column="45"/></decl_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

			<expr_stmt><expr><call><name pos:line="36" pos:column="25">DEBUG<pos:position pos:line="36" pos:column="30"/></name> <argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="string" pos:line="36" pos:column="32">"fd = %i; IPv4 multicast address found"<pos:position pos:line="36" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">fd<pos:position pos:line="36" pos:column="75"/></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>

			<expr_stmt><expr><name><name pos:line="38" pos:column="25">mreq<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">.<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">imr_multiaddr<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">.<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">s_addr<pos:position pos:line="38" pos:column="50"/></name></name> <operator pos:line="38" pos:column="51">=<pos:position pos:line="38" pos:column="52"/></operator> <name><name pos:line="38" pos:column="53">addr<pos:position pos:line="38" pos:column="57"/></name><operator pos:line="38" pos:column="57">-&gt;<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="59">sin_addr<pos:position pos:line="38" pos:column="67"/></name><operator pos:line="38" pos:column="67">.<pos:position pos:line="38" pos:column="68"/></operator><name pos:line="38" pos:column="68">s_addr<pos:position pos:line="38" pos:column="74"/></name></name></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt>
<cpp:if pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">if<pos:position pos:line="39" pos:column="4"/></cpp:directive> <expr><name pos:line="39" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="39" pos:column="37"/></name></expr></cpp:if>
			<comment type="block" pos:line="40" pos:column="25">/* Set the interface using the interface index if
			 * possible (available). Unfortunately, the struct
			 * ip_mreqn is not portable. */</comment>
			<expr_stmt><expr><name><name pos:line="43" pos:column="25">mreq<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">.<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">imr_address<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">.<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">s_addr<pos:position pos:line="43" pos:column="48"/></name></name> <operator pos:line="43" pos:column="49">=<pos:position pos:line="43" pos:column="50"/></operator> <call><name pos:line="43" pos:column="51">ntohl<pos:position pos:line="43" pos:column="56"/></name> <argument_list pos:line="43" pos:column="57">(<argument><expr><name pos:line="43" pos:column="58">INADDR_ANY<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">mreq<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">imr_ifindex<pos:position pos:line="44" pos:column="41"/></name></name> <operator pos:line="44" pos:column="42">=<pos:position pos:line="44" pos:column="43"/></operator> <name pos:line="44" pos:column="44">interface_idx<pos:position pos:line="44" pos:column="57"/></name></expr>;<pos:position pos:line="44" pos:column="58"/></expr_stmt>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">mreq<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">.<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">imr_interface<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">s_addr<pos:position pos:line="46" pos:column="50"/></name></name> <operator pos:line="46" pos:column="51">=<pos:position pos:line="46" pos:column="52"/></operator> <call><name pos:line="46" pos:column="53">ntohl<pos:position pos:line="46" pos:column="58"/></name> <argument_list pos:line="46" pos:column="59">(<argument><expr><name pos:line="46" pos:column="60">INADDR_ANY<pos:position pos:line="46" pos:column="70"/></name></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><call><name pos:line="49" pos:column="29">setsockopt<pos:position pos:line="49" pos:column="39"/></name> <argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">fd<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">IPPROTO_IP<pos:position pos:line="49" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="57">IP_MULTICAST_LOOP<pos:position pos:line="49" pos:column="74"/></name></expr></argument>,
						<argument><expr><operator pos:line="50" pos:column="49">&amp;<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="50">loop<pos:position pos:line="50" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="56">sizeof <argument_list pos:line="50" pos:column="63">(<argument><expr><name pos:line="50" pos:column="64">loop<pos:position pos:line="50" pos:column="68"/></name></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="70"/></argument_list></call> <operator pos:line="50" pos:column="71">==<pos:position pos:line="50" pos:column="73"/></operator> <operator pos:line="50" pos:column="74">-<pos:position pos:line="50" pos:column="75"/></operator><literal type="number" pos:line="50" pos:column="75">1<pos:position pos:line="50" pos:column="76"/></literal></expr>)<pos:position pos:line="50" pos:column="77"/></condition><then pos:line="50" pos:column="77">
			<block pos:line="51" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="52" pos:column="33">char<pos:position pos:line="52" pos:column="37"/></name></type> <name><name pos:line="52" pos:column="38">errbuf<pos:position pos:line="52" pos:column="44"/></name><index pos:line="52" pos:column="44">[<expr><literal type="number" pos:line="52" pos:column="45">1024<pos:position pos:line="52" pos:column="49"/></literal></expr>]<pos:position pos:line="52" pos:column="50"/></index></name></decl>;<pos:position pos:line="52" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">ERROR<pos:position pos:line="53" pos:column="38"/></name> <argument_list pos:line="53" pos:column="39">(<argument><expr><literal type="string" pos:line="53" pos:column="40">"setsockopt: %s"<pos:position pos:line="53" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="54" pos:column="49">sstrerror<pos:position pos:line="54" pos:column="58"/></name> <argument_list pos:line="54" pos:column="59">(<argument><expr><name pos:line="54" pos:column="60">errno<pos:position pos:line="54" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="67">errbuf<pos:position pos:line="54" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="55" pos:column="57">sizeof <argument_list pos:line="55" pos:column="64">(<argument><expr><name pos:line="55" pos:column="65">errbuf<pos:position pos:line="55" pos:column="71"/></name></expr></argument>)<pos:position pos:line="55" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt>
				<return pos:line="56" pos:column="33">return <expr><operator pos:line="56" pos:column="40">(<pos:position pos:line="56" pos:column="41"/></operator><operator pos:line="56" pos:column="41">-<pos:position pos:line="56" pos:column="42"/></operator><literal type="number" pos:line="56" pos:column="42">1<pos:position pos:line="56" pos:column="43"/></literal><operator pos:line="56" pos:column="43">)<pos:position pos:line="56" pos:column="44"/></operator></expr>;<pos:position pos:line="56" pos:column="45"/></return>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>

			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><call><name pos:line="59" pos:column="29">setsockopt<pos:position pos:line="59" pos:column="39"/></name> <argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">fd<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">IPPROTO_IP<pos:position pos:line="59" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="57">IP_ADD_MEMBERSHIP<pos:position pos:line="59" pos:column="74"/></name></expr></argument>,
						<argument><expr><operator pos:line="60" pos:column="49">&amp;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="50">mreq<pos:position pos:line="60" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="56">sizeof <argument_list pos:line="60" pos:column="63">(<argument><expr><name pos:line="60" pos:column="64">mreq<pos:position pos:line="60" pos:column="68"/></name></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call> <operator pos:line="60" pos:column="71">==<pos:position pos:line="60" pos:column="73"/></operator> <operator pos:line="60" pos:column="74">-<pos:position pos:line="60" pos:column="75"/></operator><literal type="number" pos:line="60" pos:column="75">1<pos:position pos:line="60" pos:column="76"/></literal></expr>)<pos:position pos:line="60" pos:column="77"/></condition><then pos:line="60" pos:column="77">
			<block pos:line="61" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="62" pos:column="33">char<pos:position pos:line="62" pos:column="37"/></name></type> <name><name pos:line="62" pos:column="38">errbuf<pos:position pos:line="62" pos:column="44"/></name><index pos:line="62" pos:column="44">[<expr><literal type="number" pos:line="62" pos:column="45">1024<pos:position pos:line="62" pos:column="49"/></literal></expr>]<pos:position pos:line="62" pos:column="50"/></index></name></decl>;<pos:position pos:line="62" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="63" pos:column="33">ERROR<pos:position pos:line="63" pos:column="38"/></name> <argument_list pos:line="63" pos:column="39">(<argument><expr><literal type="string" pos:line="63" pos:column="40">"setsockopt: %s"<pos:position pos:line="63" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="64" pos:column="49">sstrerror<pos:position pos:line="64" pos:column="58"/></name> <argument_list pos:line="64" pos:column="59">(<argument><expr><name pos:line="64" pos:column="60">errno<pos:position pos:line="64" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="67">errbuf<pos:position pos:line="64" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="65" pos:column="57">sizeof <argument_list pos:line="65" pos:column="64">(<argument><expr><name pos:line="65" pos:column="65">errbuf<pos:position pos:line="65" pos:column="71"/></name></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="75"/></expr_stmt>
				<return pos:line="66" pos:column="33">return <expr><operator pos:line="66" pos:column="40">(<pos:position pos:line="66" pos:column="41"/></operator><operator pos:line="66" pos:column="41">-<pos:position pos:line="66" pos:column="42"/></operator><literal type="number" pos:line="66" pos:column="42">1<pos:position pos:line="66" pos:column="43"/></literal><operator pos:line="66" pos:column="43">)<pos:position pos:line="66" pos:column="44"/></operator></expr>;<pos:position pos:line="66" pos:column="45"/></return>
			}<pos:position pos:line="67" pos:column="26"/></block></then></if>

			<return pos:line="69" pos:column="25">return <expr><operator pos:line="69" pos:column="32">(<pos:position pos:line="69" pos:column="33"/></operator><literal type="number" pos:line="69" pos:column="33">0<pos:position pos:line="69" pos:column="34"/></literal><operator pos:line="69" pos:column="34">)<pos:position pos:line="69" pos:column="35"/></operator></expr>;<pos:position pos:line="69" pos:column="36"/></return>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if>
	}<pos:position pos:line="71" pos:column="10"/></block></then>
	<elseif pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if <condition pos:line="72" pos:column="17">(<expr><name><name pos:line="72" pos:column="18">ai<pos:position pos:line="72" pos:column="20"/></name><operator pos:line="72" pos:column="20">-&gt;<pos:position pos:line="72" pos:column="25"/></operator><name pos:line="72" pos:column="22">ai_family<pos:position pos:line="72" pos:column="31"/></name></name> <operator pos:line="72" pos:column="32">==<pos:position pos:line="72" pos:column="34"/></operator> <name pos:line="72" pos:column="35">AF_INET6<pos:position pos:line="72" pos:column="43"/></name></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44">
	<block pos:line="73" pos:column="9">{
		<comment type="block" pos:line="74" pos:column="17">/* Useful example: http://gsyc.escet.urjc.es/~eva/IPv6-web/examples/mcast.html */</comment>
		<decl_stmt><decl><type><name><name pos:line="75" pos:column="17">struct<pos:position pos:line="75" pos:column="23"/></name> <name pos:line="75" pos:column="24">sockaddr_in6<pos:position pos:line="75" pos:column="36"/></name></name> <modifier pos:line="75" pos:column="37">*<pos:position pos:line="75" pos:column="38"/></modifier></type><name pos:line="75" pos:column="38">addr<pos:position pos:line="75" pos:column="42"/></name> <init pos:line="75" pos:column="43">= <expr><operator pos:line="75" pos:column="45">(<pos:position pos:line="75" pos:column="46"/></operator>struct <name pos:line="75" pos:column="53">sockaddr_in6<pos:position pos:line="75" pos:column="65"/></name> <operator pos:line="75" pos:column="66">*<pos:position pos:line="75" pos:column="67"/></operator><operator pos:line="75" pos:column="67">)<pos:position pos:line="75" pos:column="68"/></operator> <name><name pos:line="75" pos:column="69">ai<pos:position pos:line="75" pos:column="71"/></name><operator pos:line="75" pos:column="71">-&gt;<pos:position pos:line="75" pos:column="76"/></operator><name pos:line="75" pos:column="73">ai_addr<pos:position pos:line="75" pos:column="80"/></name></name></expr></init></decl>;<pos:position pos:line="75" pos:column="81"/></decl_stmt>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><call><name pos:line="76" pos:column="21">IN6_IS_ADDR_MULTICAST<pos:position pos:line="76" pos:column="42"/></name> <argument_list pos:line="76" pos:column="43">(<argument><expr><operator pos:line="76" pos:column="44">&amp;<pos:position pos:line="76" pos:column="49"/></operator><name><name pos:line="76" pos:column="45">addr<pos:position pos:line="76" pos:column="49"/></name><operator pos:line="76" pos:column="49">-&gt;<pos:position pos:line="76" pos:column="54"/></operator><name pos:line="76" pos:column="51">sin6_addr<pos:position pos:line="76" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="62"/></condition><then pos:line="76" pos:column="62">
		<block pos:line="77" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="78" pos:column="25">struct<pos:position pos:line="78" pos:column="31"/></name> <name pos:line="78" pos:column="32">ipv6_mreq<pos:position pos:line="78" pos:column="41"/></name></name></type> <name pos:line="78" pos:column="42">mreq<pos:position pos:line="78" pos:column="46"/></name></decl>;<pos:position pos:line="78" pos:column="47"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="80" pos:column="25">DEBUG<pos:position pos:line="80" pos:column="30"/></name> <argument_list pos:line="80" pos:column="31">(<argument><expr><literal type="string" pos:line="80" pos:column="32">"fd = %i; IPv6 multicast address found"<pos:position pos:line="80" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="73">fd<pos:position pos:line="80" pos:column="75"/></name></expr></argument>)<pos:position pos:line="80" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="77"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="82" pos:column="25">memcpy<pos:position pos:line="82" pos:column="31"/></name> <argument_list pos:line="82" pos:column="32">(<argument><expr><operator pos:line="82" pos:column="33">&amp;<pos:position pos:line="82" pos:column="38"/></operator><name><name pos:line="82" pos:column="34">mreq<pos:position pos:line="82" pos:column="38"/></name><operator pos:line="82" pos:column="38">.<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="39">ipv6mr_multiaddr<pos:position pos:line="82" pos:column="55"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="83" pos:column="41">&amp;<pos:position pos:line="83" pos:column="46"/></operator><name><name pos:line="83" pos:column="42">addr<pos:position pos:line="83" pos:column="46"/></name><operator pos:line="83" pos:column="46">-&gt;<pos:position pos:line="83" pos:column="51"/></operator><name pos:line="83" pos:column="48">sin6_addr<pos:position pos:line="83" pos:column="57"/></name></name></expr></argument>,
					<argument><expr><sizeof pos:line="84" pos:column="41">sizeof <argument_list pos:line="84" pos:column="48">(<argument><expr><name><name pos:line="84" pos:column="49">addr<pos:position pos:line="84" pos:column="53"/></name><operator pos:line="84" pos:column="53">-&gt;<pos:position pos:line="84" pos:column="58"/></operator><name pos:line="84" pos:column="55">sin6_addr<pos:position pos:line="84" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="67"/></expr_stmt>

			<comment type="block" pos:line="86" pos:column="25">/* http://developer.apple.com/documentation/Darwin/Reference/ManPages/man4/ip6.4.html
			 * ipv6mr_interface may be set to zeroes to
			 * choose the default multicast interface or to
			 * the index of a particular multicast-capable
			 * interface if the host is multihomed.
			 * Membership is associ-associated with a
			 * single interface; programs running on
			 * multihomed hosts may need to join the same
			 * group on more than one interface.*/</comment>
			<expr_stmt><expr><name><name pos:line="95" pos:column="25">mreq<pos:position pos:line="95" pos:column="29"/></name><operator pos:line="95" pos:column="29">.<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="30">ipv6mr_interface<pos:position pos:line="95" pos:column="46"/></name></name> <operator pos:line="95" pos:column="47">=<pos:position pos:line="95" pos:column="48"/></operator> <name pos:line="95" pos:column="49">interface_idx<pos:position pos:line="95" pos:column="62"/></name></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt>

			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><call><name pos:line="97" pos:column="29">setsockopt<pos:position pos:line="97" pos:column="39"/></name> <argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">fd<pos:position pos:line="97" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="45">IPPROTO_IPV6<pos:position pos:line="97" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="59">IPV6_MULTICAST_LOOP<pos:position pos:line="97" pos:column="78"/></name></expr></argument>,
						<argument><expr><operator pos:line="98" pos:column="49">&amp;<pos:position pos:line="98" pos:column="54"/></operator><name pos:line="98" pos:column="50">loop<pos:position pos:line="98" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="98" pos:column="56">sizeof <argument_list pos:line="98" pos:column="63">(<argument><expr><name pos:line="98" pos:column="64">loop<pos:position pos:line="98" pos:column="68"/></name></expr></argument>)<pos:position pos:line="98" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="98" pos:column="70"/></argument_list></call> <operator pos:line="98" pos:column="71">==<pos:position pos:line="98" pos:column="73"/></operator> <operator pos:line="98" pos:column="74">-<pos:position pos:line="98" pos:column="75"/></operator><literal type="number" pos:line="98" pos:column="75">1<pos:position pos:line="98" pos:column="76"/></literal></expr>)<pos:position pos:line="98" pos:column="77"/></condition><then pos:line="98" pos:column="77">
			<block pos:line="99" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="100" pos:column="33">char<pos:position pos:line="100" pos:column="37"/></name></type> <name><name pos:line="100" pos:column="38">errbuf<pos:position pos:line="100" pos:column="44"/></name><index pos:line="100" pos:column="44">[<expr><literal type="number" pos:line="100" pos:column="45">1024<pos:position pos:line="100" pos:column="49"/></literal></expr>]<pos:position pos:line="100" pos:column="50"/></index></name></decl>;<pos:position pos:line="100" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="101" pos:column="33">ERROR<pos:position pos:line="101" pos:column="38"/></name> <argument_list pos:line="101" pos:column="39">(<argument><expr><literal type="string" pos:line="101" pos:column="40">"setsockopt: %s"<pos:position pos:line="101" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="102" pos:column="49">sstrerror<pos:position pos:line="102" pos:column="58"/></name> <argument_list pos:line="102" pos:column="59">(<argument><expr><name pos:line="102" pos:column="60">errno<pos:position pos:line="102" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="67">errbuf<pos:position pos:line="102" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="103" pos:column="57">sizeof <argument_list pos:line="103" pos:column="64">(<argument><expr><name pos:line="103" pos:column="65">errbuf<pos:position pos:line="103" pos:column="71"/></name></expr></argument>)<pos:position pos:line="103" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="103" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="75"/></expr_stmt>
				<return pos:line="104" pos:column="33">return <expr><operator pos:line="104" pos:column="40">(<pos:position pos:line="104" pos:column="41"/></operator><operator pos:line="104" pos:column="41">-<pos:position pos:line="104" pos:column="42"/></operator><literal type="number" pos:line="104" pos:column="42">1<pos:position pos:line="104" pos:column="43"/></literal><operator pos:line="104" pos:column="43">)<pos:position pos:line="104" pos:column="44"/></operator></expr>;<pos:position pos:line="104" pos:column="45"/></return>
			}<pos:position pos:line="105" pos:column="26"/></block></then></if>

			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><call><name pos:line="107" pos:column="29">setsockopt<pos:position pos:line="107" pos:column="39"/></name> <argument_list pos:line="107" pos:column="40">(<argument><expr><name pos:line="107" pos:column="41">fd<pos:position pos:line="107" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="45">IPPROTO_IPV6<pos:position pos:line="107" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="59">IPV6_ADD_MEMBERSHIP<pos:position pos:line="107" pos:column="78"/></name></expr></argument>,
						<argument><expr><operator pos:line="108" pos:column="49">&amp;<pos:position pos:line="108" pos:column="54"/></operator><name pos:line="108" pos:column="50">mreq<pos:position pos:line="108" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="108" pos:column="56">sizeof <argument_list pos:line="108" pos:column="63">(<argument><expr><name pos:line="108" pos:column="64">mreq<pos:position pos:line="108" pos:column="68"/></name></expr></argument>)<pos:position pos:line="108" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="108" pos:column="70"/></argument_list></call> <operator pos:line="108" pos:column="71">==<pos:position pos:line="108" pos:column="73"/></operator> <operator pos:line="108" pos:column="74">-<pos:position pos:line="108" pos:column="75"/></operator><literal type="number" pos:line="108" pos:column="75">1<pos:position pos:line="108" pos:column="76"/></literal></expr>)<pos:position pos:line="108" pos:column="77"/></condition><then pos:line="108" pos:column="77">
			<block pos:line="109" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="110" pos:column="33">char<pos:position pos:line="110" pos:column="37"/></name></type> <name><name pos:line="110" pos:column="38">errbuf<pos:position pos:line="110" pos:column="44"/></name><index pos:line="110" pos:column="44">[<expr><literal type="number" pos:line="110" pos:column="45">1024<pos:position pos:line="110" pos:column="49"/></literal></expr>]<pos:position pos:line="110" pos:column="50"/></index></name></decl>;<pos:position pos:line="110" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="111" pos:column="33">ERROR<pos:position pos:line="111" pos:column="38"/></name> <argument_list pos:line="111" pos:column="39">(<argument><expr><literal type="string" pos:line="111" pos:column="40">"setsockopt: %s"<pos:position pos:line="111" pos:column="56"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="112" pos:column="49">sstrerror<pos:position pos:line="112" pos:column="58"/></name> <argument_list pos:line="112" pos:column="59">(<argument><expr><name pos:line="112" pos:column="60">errno<pos:position pos:line="112" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="67">errbuf<pos:position pos:line="112" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="113" pos:column="57">sizeof <argument_list pos:line="113" pos:column="64">(<argument><expr><name pos:line="113" pos:column="65">errbuf<pos:position pos:line="113" pos:column="71"/></name></expr></argument>)<pos:position pos:line="113" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="113" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="75"/></expr_stmt>
				<return pos:line="114" pos:column="33">return <expr><operator pos:line="114" pos:column="40">(<pos:position pos:line="114" pos:column="41"/></operator><operator pos:line="114" pos:column="41">-<pos:position pos:line="114" pos:column="42"/></operator><literal type="number" pos:line="114" pos:column="42">1<pos:position pos:line="114" pos:column="43"/></literal><operator pos:line="114" pos:column="43">)<pos:position pos:line="114" pos:column="44"/></operator></expr>;<pos:position pos:line="114" pos:column="45"/></return>
			}<pos:position pos:line="115" pos:column="26"/></block></then></if>

			<return pos:line="117" pos:column="25">return <expr><operator pos:line="117" pos:column="32">(<pos:position pos:line="117" pos:column="33"/></operator><literal type="number" pos:line="117" pos:column="33">0<pos:position pos:line="117" pos:column="34"/></literal><operator pos:line="117" pos:column="34">)<pos:position pos:line="117" pos:column="35"/></operator></expr>;<pos:position pos:line="117" pos:column="36"/></return>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>
	}<pos:position pos:line="119" pos:column="10"/></block></then></if></elseif></if>

<cpp:if pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">if<pos:position pos:line="121" pos:column="4"/></cpp:directive> <expr><call><name pos:line="121" pos:column="5">defined<pos:position pos:line="121" pos:column="12"/></name><argument_list pos:line="121" pos:column="12">(<argument><expr><name pos:line="121" pos:column="13">HAVE_IF_INDEXTONAME<pos:position pos:line="121" pos:column="32"/></name></expr></argument>)<pos:position pos:line="121" pos:column="33"/></argument_list></call> <operator pos:line="121" pos:column="34">&amp;&amp;<pos:position pos:line="121" pos:column="44"/></operator> <name pos:line="121" pos:column="37">HAVE_IF_INDEXTONAME<pos:position pos:line="121" pos:column="56"/></name> <operator pos:line="121" pos:column="57">&amp;&amp;<pos:position pos:line="121" pos:column="67"/></operator> <call><name pos:line="121" pos:column="60">defined<pos:position pos:line="121" pos:column="67"/></name><argument_list pos:line="121" pos:column="67">(<argument><expr><name pos:line="121" pos:column="68">SO_BINDTODEVICE<pos:position pos:line="121" pos:column="83"/></name></expr></argument>)<pos:position pos:line="121" pos:column="84"/></argument_list></call></expr></cpp:if>
	<comment type="block" pos:line="122" pos:column="9">/* if a specific interface was set, bind the socket to it. But to avoid
 	 * possible problems with multicast routing, only do that for non-multicast
	 * addresses */</comment>
	<if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><name pos:line="125" pos:column="13">interface_idx<pos:position pos:line="125" pos:column="26"/></name> <operator pos:line="125" pos:column="27">!=<pos:position pos:line="125" pos:column="29"/></operator> <literal type="number" pos:line="125" pos:column="30">0<pos:position pos:line="125" pos:column="31"/></literal></expr>)<pos:position pos:line="125" pos:column="32"/></condition><then pos:line="125" pos:column="32">
	<block pos:line="126" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="127" pos:column="17">char<pos:position pos:line="127" pos:column="21"/></name></type> <name><name pos:line="127" pos:column="22">interface_name<pos:position pos:line="127" pos:column="36"/></name><index pos:line="127" pos:column="36">[<expr><name pos:line="127" pos:column="37">IFNAMSIZ<pos:position pos:line="127" pos:column="45"/></name></expr>]<pos:position pos:line="127" pos:column="46"/></index></name></decl>;<pos:position pos:line="127" pos:column="47"/></decl_stmt>

		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><call><name pos:line="129" pos:column="21">if_indextoname<pos:position pos:line="129" pos:column="35"/></name> <argument_list pos:line="129" pos:column="36">(<argument><expr><name pos:line="129" pos:column="37">interface_idx<pos:position pos:line="129" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="52">interface_name<pos:position pos:line="129" pos:column="66"/></name></expr></argument>)<pos:position pos:line="129" pos:column="67"/></argument_list></call> <operator pos:line="129" pos:column="68">==<pos:position pos:line="129" pos:column="70"/></operator> <name pos:line="129" pos:column="71">NULL<pos:position pos:line="129" pos:column="75"/></name></expr>)<pos:position pos:line="129" pos:column="76"/></condition><then pos:line="129" pos:column="76">
			<block type="pseudo"><return pos:line="130" pos:column="25">return <expr><operator pos:line="130" pos:column="32">(<pos:position pos:line="130" pos:column="33"/></operator><operator pos:line="130" pos:column="33">-<pos:position pos:line="130" pos:column="34"/></operator><literal type="number" pos:line="130" pos:column="34">1<pos:position pos:line="130" pos:column="35"/></literal><operator pos:line="130" pos:column="35">)<pos:position pos:line="130" pos:column="36"/></operator></expr>;<pos:position pos:line="130" pos:column="37"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="132" pos:column="17">DEBUG<pos:position pos:line="132" pos:column="22"/></name> <argument_list pos:line="132" pos:column="23">(<argument><expr><literal type="string" pos:line="132" pos:column="24">"fd = %i; Binding socket to interface %s"<pos:position pos:line="132" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="132" pos:column="67">fd<pos:position pos:line="132" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="71">interface_name<pos:position pos:line="132" pos:column="85"/></name></expr></argument>)<pos:position pos:line="132" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="87"/></expr_stmt>

		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><call><name pos:line="134" pos:column="21">setsockopt<pos:position pos:line="134" pos:column="31"/></name> <argument_list pos:line="134" pos:column="32">(<argument><expr><name pos:line="134" pos:column="33">fd<pos:position pos:line="134" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="37">SOL_SOCKET<pos:position pos:line="134" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="49">SO_BINDTODEVICE<pos:position pos:line="134" pos:column="64"/></name></expr></argument>,
					<argument><expr><name pos:line="135" pos:column="41">interface_name<pos:position pos:line="135" pos:column="55"/></name></expr></argument>,
					<argument><expr><sizeof pos:line="136" pos:column="41">sizeof<argument_list pos:line="136" pos:column="47">(<argument><expr><name pos:line="136" pos:column="48">interface_name<pos:position pos:line="136" pos:column="62"/></name></expr></argument>)<pos:position pos:line="136" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="136" pos:column="64"/></argument_list></call> <operator pos:line="136" pos:column="65">==<pos:position pos:line="136" pos:column="67"/></operator> <operator pos:line="136" pos:column="68">-<pos:position pos:line="136" pos:column="69"/></operator><literal type="number" pos:line="136" pos:column="69">1<pos:position pos:line="136" pos:column="70"/></literal></expr> )<pos:position pos:line="136" pos:column="72"/></condition><then pos:line="136" pos:column="72">
		<block pos:line="137" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="138" pos:column="25">char<pos:position pos:line="138" pos:column="29"/></name></type> <name><name pos:line="138" pos:column="30">errbuf<pos:position pos:line="138" pos:column="36"/></name><index pos:line="138" pos:column="36">[<expr><literal type="number" pos:line="138" pos:column="37">1024<pos:position pos:line="138" pos:column="41"/></literal></expr>]<pos:position pos:line="138" pos:column="42"/></index></name></decl>;<pos:position pos:line="138" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="139" pos:column="25">ERROR<pos:position pos:line="139" pos:column="30"/></name> <argument_list pos:line="139" pos:column="31">(<argument><expr><literal type="string" pos:line="139" pos:column="32">"setsockopt: %s"<pos:position pos:line="139" pos:column="48"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="140" pos:column="41">sstrerror<pos:position pos:line="140" pos:column="50"/></name> <argument_list pos:line="140" pos:column="51">(<argument><expr><name pos:line="140" pos:column="52">errno<pos:position pos:line="140" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="59">errbuf<pos:position pos:line="140" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="140" pos:column="67">sizeof <argument_list pos:line="140" pos:column="74">(<argument><expr><name pos:line="140" pos:column="75">errbuf<pos:position pos:line="140" pos:column="81"/></name></expr></argument>)<pos:position pos:line="140" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="140" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="140" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="85"/></expr_stmt>
			<return pos:line="141" pos:column="25">return <expr><operator pos:line="141" pos:column="32">(<pos:position pos:line="141" pos:column="33"/></operator><operator pos:line="141" pos:column="33">-<pos:position pos:line="141" pos:column="34"/></operator><literal type="number" pos:line="141" pos:column="34">1<pos:position pos:line="141" pos:column="35"/></literal><operator pos:line="141" pos:column="35">)<pos:position pos:line="141" pos:column="36"/></operator></expr>;<pos:position pos:line="141" pos:column="37"/></return>
		}<pos:position pos:line="142" pos:column="18"/></block></then></if>
	}<pos:position pos:line="143" pos:column="10"/></block></then></if>
<cpp:endif pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">endif<pos:position pos:line="144" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="144" pos:column="8">/* HAVE_IF_INDEXTONAME &amp;&amp; SO_BINDTODEVICE */</comment>

	<return pos:line="146" pos:column="9">return <expr><operator pos:line="146" pos:column="16">(<pos:position pos:line="146" pos:column="17"/></operator><literal type="number" pos:line="146" pos:column="17">0<pos:position pos:line="146" pos:column="18"/></literal><operator pos:line="146" pos:column="18">)<pos:position pos:line="146" pos:column="19"/></operator></expr>;<pos:position pos:line="146" pos:column="20"/></return>
}<pos:position pos:line="147" pos:column="2"/></block></function></unit>
