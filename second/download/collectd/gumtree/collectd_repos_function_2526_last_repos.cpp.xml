<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2526_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">server_multicast_join<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">lcc_listener_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">srv<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                 <parameter><decl><type><name><name pos:line="2" pos:column="34">struct<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">sockaddr_storage<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">group<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">loop_back<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">int<pos:position pos:line="3" pos:column="37"/></name></type> <name pos:line="3" pos:column="38">ttl<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="42"/></parameter_list> <block pos:line="3" pos:column="43">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name><name pos:line="4" pos:column="7">group<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">-&gt;<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="14">ss_family<pos:position pos:line="4" pos:column="23"/></name></name> <operator pos:line="4" pos:column="24">==<pos:position pos:line="4" pos:column="26"/></operator> <name pos:line="4" pos:column="27">AF_INET<pos:position pos:line="4" pos:column="34"/></name></expr>)<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35"> <block pos:line="4" pos:column="36">{
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">sockaddr_in<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">sa<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><operator pos:line="5" pos:column="30">(<pos:position pos:line="5" pos:column="31"/></operator>struct <name pos:line="5" pos:column="38">sockaddr_in<pos:position pos:line="5" pos:column="49"/></name> <operator pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></operator><operator pos:line="5" pos:column="51">)<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="52">group<pos:position pos:line="5" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><call><name pos:line="7" pos:column="18">setsockopt<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name><name pos:line="7" pos:column="29">srv<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">conn<pos:position pos:line="7" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="40">IPPROTO_IP<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">IP_MULTICAST_LOOP<pos:position pos:line="7" pos:column="69"/></name></expr></argument>,
                            <argument><expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="30">loop_back<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="41">sizeof<argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">loop_back<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">==<pos:position pos:line="9" pos:column="18"/></operator> <operator pos:line="9" pos:column="19">-<pos:position pos:line="9" pos:column="20"/></operator><literal type="number" pos:line="9" pos:column="20">1<pos:position pos:line="9" pos:column="21"/></literal></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <block pos:line="9" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">DEBUG<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="string" pos:line="10" pos:column="13">"setsockopt(IP_MULTICAST_LOOP, %d) = %d\n"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="57">loop_back<pos:position pos:line="10" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="68">errno<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="75"/></expr_stmt>
      <return pos:line="11" pos:column="7">return <expr><name pos:line="11" pos:column="14">errno<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="14" pos:column="5">status<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator>
        <call><name pos:line="15" pos:column="9">setsockopt<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name><name pos:line="15" pos:column="20">srv<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">conn<pos:position pos:line="15" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">IPPROTO_IP<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">IP_MULTICAST_TTL<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="61">&amp;<pos:position pos:line="15" pos:column="66"/></operator><name pos:line="15" pos:column="62">ttl<pos:position pos:line="15" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="67">sizeof<argument_list pos:line="15" pos:column="73">(<argument><expr><name pos:line="15" pos:column="74">ttl<pos:position pos:line="15" pos:column="77"/></name></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="80"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">status<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">==<pos:position pos:line="16" pos:column="18"/></operator> <operator pos:line="16" pos:column="19">-<pos:position pos:line="16" pos:column="20"/></operator><literal type="number" pos:line="16" pos:column="20">1<pos:position pos:line="16" pos:column="21"/></literal></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
      <block type="pseudo"><return pos:line="17" pos:column="7">return <expr><name pos:line="17" pos:column="14">errno<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return></block></then></if>

<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="19" pos:column="37"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">struct<pos:position pos:line="20" pos:column="11"/></name> <name pos:line="20" pos:column="12">ip_mreqn<pos:position pos:line="20" pos:column="20"/></name></name></type> <name pos:line="20" pos:column="21">mreq<pos:position pos:line="20" pos:column="25"/></name> <init pos:line="20" pos:column="26">= <expr><block pos:line="20" pos:column="28">{
        <expr><operator pos:line="21" pos:column="9">.<pos:position pos:line="21" pos:column="10"/></operator><name><name pos:line="21" pos:column="10">imr_address<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">s_addr<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">INADDR_ANY<pos:position pos:line="21" pos:column="41"/></name></expr>,
        <expr><operator pos:line="22" pos:column="9">.<pos:position pos:line="22" pos:column="10"/></operator><name><name pos:line="22" pos:column="10">imr_multiaddr<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">s_addr<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name><name pos:line="22" pos:column="33">sa<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="37">sin_addr<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">.<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">s_addr<pos:position pos:line="22" pos:column="52"/></name></name></expr>,
        <expr><operator pos:line="23" pos:column="9">.<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">imr_ifindex<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <call><name pos:line="23" pos:column="24">if_nametoindex<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name><name pos:line="23" pos:column="39">srv<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">interface<pos:position pos:line="23" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>,
    }<pos:position pos:line="24" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="24" pos:column="7"/></decl_stmt>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">struct<pos:position pos:line="26" pos:column="11"/></name> <name pos:line="26" pos:column="12">ip_mreq<pos:position pos:line="26" pos:column="19"/></name></name></type> <name pos:line="26" pos:column="20">mreq<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><block pos:line="26" pos:column="27">{
        <expr><operator pos:line="27" pos:column="9">.<pos:position pos:line="27" pos:column="10"/></operator><name><name pos:line="27" pos:column="10">imr_multiaddr<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">s_addr<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <name><name pos:line="27" pos:column="33">sa<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">sin_addr<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">.<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">s_addr<pos:position pos:line="27" pos:column="52"/></name></name></expr>,
    }<pos:position pos:line="28" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="28" pos:column="7"/></decl_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="30" pos:column="5">status<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">setsockopt<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name><name pos:line="30" pos:column="25">srv<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">conn<pos:position pos:line="30" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">IPPROTO_IP<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">IP_ADD_MEMBERSHIP<pos:position pos:line="30" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="67">&amp;<pos:position pos:line="30" pos:column="72"/></operator><name pos:line="30" pos:column="68">mreq<pos:position pos:line="30" pos:column="72"/></name></expr></argument>,
                        <argument><expr><sizeof pos:line="31" pos:column="25">sizeof<argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">mreq<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">status<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">==<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">-<pos:position pos:line="32" pos:column="20"/></operator><literal type="number" pos:line="32" pos:column="20">1<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22">
      <block type="pseudo"><return pos:line="33" pos:column="7">return <expr><name pos:line="33" pos:column="14">errno<pos:position pos:line="33" pos:column="19"/></name></expr>;<pos:position pos:line="33" pos:column="20"/></return></block></then></if>
  }<pos:position pos:line="34" pos:column="4"/></block></then> <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><name><name pos:line="34" pos:column="14">group<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">ss_family<pos:position pos:line="34" pos:column="30"/></name></name> <operator pos:line="34" pos:column="31">==<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">AF_INET6<pos:position pos:line="34" pos:column="42"/></name></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43"> <block pos:line="34" pos:column="44">{
    <decl_stmt><decl><type><name><name pos:line="35" pos:column="5">struct<pos:position pos:line="35" pos:column="11"/></name> <name pos:line="35" pos:column="12">sockaddr_in6<pos:position pos:line="35" pos:column="24"/></name></name> <modifier pos:line="35" pos:column="25">*<pos:position pos:line="35" pos:column="26"/></modifier></type><name pos:line="35" pos:column="26">sa<pos:position pos:line="35" pos:column="28"/></name> <init pos:line="35" pos:column="29">= <expr><operator pos:line="35" pos:column="31">(<pos:position pos:line="35" pos:column="32"/></operator>struct <name pos:line="35" pos:column="39">sockaddr_in6<pos:position pos:line="35" pos:column="51"/></name> <operator pos:line="35" pos:column="52">*<pos:position pos:line="35" pos:column="53"/></operator><operator pos:line="35" pos:column="53">)<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="54">group<pos:position pos:line="35" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="60"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="37" pos:column="5">int<pos:position pos:line="37" pos:column="8"/></name></type> <name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <init pos:line="37" pos:column="16">= <expr><call><name pos:line="37" pos:column="18">setsockopt<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">srv<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">conn<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">IPPROTO_IPV6<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">IPV6_MULTICAST_LOOP<pos:position pos:line="37" pos:column="73"/></name></expr></argument>,
                            <argument><expr><operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="30">loop_back<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="41">sizeof<argument_list pos:line="38" pos:column="47">(<argument><expr><name pos:line="38" pos:column="48">loop_back<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="60"/></decl_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">status<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">==<pos:position pos:line="39" pos:column="18"/></operator> <operator pos:line="39" pos:column="19">-<pos:position pos:line="39" pos:column="20"/></operator><literal type="number" pos:line="39" pos:column="20">1<pos:position pos:line="39" pos:column="21"/></literal></expr>)<pos:position pos:line="39" pos:column="22"/></condition><then pos:line="39" pos:column="22">
      <block type="pseudo"><return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">errno<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">status<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <call><name pos:line="42" pos:column="14">setsockopt<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name><name pos:line="42" pos:column="25">srv<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">conn<pos:position pos:line="42" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="36">IPPROTO_IPV6<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">IPV6_MULTICAST_HOPS<pos:position pos:line="42" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="71">&amp;<pos:position pos:line="42" pos:column="76"/></operator><name pos:line="42" pos:column="72">ttl<pos:position pos:line="42" pos:column="75"/></name></expr></argument>,
                        <argument><expr><sizeof pos:line="43" pos:column="25">sizeof<argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">ttl<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">status<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">==<pos:position pos:line="44" pos:column="18"/></operator> <operator pos:line="44" pos:column="19">-<pos:position pos:line="44" pos:column="20"/></operator><literal type="number" pos:line="44" pos:column="20">1<pos:position pos:line="44" pos:column="21"/></literal></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
      <block type="pseudo"><return pos:line="45" pos:column="7">return <expr><name pos:line="45" pos:column="14">errno<pos:position pos:line="45" pos:column="19"/></name></expr>;<pos:position pos:line="45" pos:column="20"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="47" pos:column="5">struct<pos:position pos:line="47" pos:column="11"/></name> <name pos:line="47" pos:column="12">ipv6_mreq<pos:position pos:line="47" pos:column="21"/></name></name></type> <name pos:line="47" pos:column="22">mreq6<pos:position pos:line="47" pos:column="27"/></name> <init pos:line="47" pos:column="28">= <expr><block pos:line="47" pos:column="30">{
        <expr><operator pos:line="48" pos:column="9">.<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">ipv6mr_interface<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <call><name pos:line="48" pos:column="29">if_nametoindex<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">(<argument><expr><name><name pos:line="48" pos:column="44">srv<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">-&gt;<pos:position pos:line="48" pos:column="52"/></operator><name pos:line="48" pos:column="49">interface<pos:position pos:line="48" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>,
    }<pos:position pos:line="49" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="49" pos:column="7"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">memmove<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><operator pos:line="50" pos:column="13">&amp;<pos:position pos:line="50" pos:column="18"/></operator><name><name pos:line="50" pos:column="14">mreq6<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">ipv6mr_multiaddr<pos:position pos:line="50" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="38">&amp;<pos:position pos:line="50" pos:column="43"/></operator><name><name pos:line="50" pos:column="39">sa<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">-&gt;<pos:position pos:line="50" pos:column="46"/></operator><name pos:line="50" pos:column="43">sin6_addr<pos:position pos:line="50" pos:column="52"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="54">sizeof<argument_list pos:line="50" pos:column="60">(<argument><expr pos:line="50" pos:column="61">struct <name pos:line="50" pos:column="68">in6_addr<pos:position pos:line="50" pos:column="76"/></name></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="79"/></expr_stmt>

    <expr_stmt><expr><name pos:line="52" pos:column="5">status<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">setsockopt<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name><name pos:line="52" pos:column="25">srv<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">conn<pos:position pos:line="52" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">IPPROTO_IPV6<pos:position pos:line="52" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">IPV6_JOIN_GROUP<pos:position pos:line="52" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="67">&amp;<pos:position pos:line="52" pos:column="72"/></operator><name pos:line="52" pos:column="68">mreq6<pos:position pos:line="52" pos:column="73"/></name></expr></argument>,
                        <argument><expr><sizeof pos:line="53" pos:column="25">sizeof<argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">mreq6<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">status<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">==<pos:position pos:line="54" pos:column="18"/></operator> <operator pos:line="54" pos:column="19">-<pos:position pos:line="54" pos:column="20"/></operator><literal type="number" pos:line="54" pos:column="20">1<pos:position pos:line="54" pos:column="21"/></literal></expr>)<pos:position pos:line="54" pos:column="22"/></condition><then pos:line="54" pos:column="22">
      <block type="pseudo"><return pos:line="55" pos:column="7">return <expr><name pos:line="55" pos:column="14">errno<pos:position pos:line="55" pos:column="19"/></name></expr>;<pos:position pos:line="55" pos:column="20"/></return></block></then></if>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if></elseif> <else pos:line="56" pos:column="5">else <block pos:line="56" pos:column="10">{
    <return pos:line="57" pos:column="5">return <expr><name pos:line="57" pos:column="12">EINVAL<pos:position pos:line="57" pos:column="18"/></name></expr>;<pos:position pos:line="57" pos:column="19"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></else></if>

  <return pos:line="60" pos:column="3">return <expr><literal type="number" pos:line="60" pos:column="10">0<pos:position pos:line="60" pos:column="11"/></literal></expr>;<pos:position pos:line="60" pos:column="12"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
