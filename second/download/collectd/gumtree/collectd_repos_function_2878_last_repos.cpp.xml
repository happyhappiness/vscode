<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2878_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">plugin_insert_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">read_func_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">rf<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list> <block pos:line="1" pos:column="48">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">status<pos:position pos:line="2" pos:column="13"/></name></decl>;<pos:position pos:line="2" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">llentry_t<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">le<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="5" pos:column="3">rf<pos:position pos:line="5" pos:column="5"/></name><operator pos:line="5" pos:column="5">-&gt;<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="7">rf_next_read<pos:position pos:line="5" pos:column="19"/></name></name> <operator pos:line="5" pos:column="20">=<pos:position pos:line="5" pos:column="21"/></operator> <call><name pos:line="5" pos:column="22">cdtime<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">()<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6" pos:column="3">rf<pos:position pos:line="6" pos:column="5"/></name><operator pos:line="6" pos:column="5">-&gt;<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="7">rf_effective_interval<pos:position pos:line="6" pos:column="28"/></name></name> <operator pos:line="6" pos:column="29">=<pos:position pos:line="6" pos:column="30"/></operator> <name><name pos:line="6" pos:column="31">rf<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">rf_interval<pos:position pos:line="6" pos:column="46"/></name></name></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><operator pos:line="8" pos:column="22">&amp;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="23">read_lock<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">read_list<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">NULL<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">read_list<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <call><name pos:line="11" pos:column="17">llist_create<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">()<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">read_list<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">==<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27"> <block pos:line="12" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">pthread_mutex_unlock<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="29">read_lock<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">ERROR<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><literal type="string" pos:line="14" pos:column="13">"plugin_insert_read: read_list failed."<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><operator pos:line="15" pos:column="14">-<pos:position pos:line="15" pos:column="15"/></operator><literal type="number" pos:line="15" pos:column="15">1<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">read_heap<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">read_heap<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">c_heap_create<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">plugin_compare_read_func<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">read_heap<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">==<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">NULL<pos:position pos:line="21" pos:column="26"/></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">pthread_mutex_unlock<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><operator pos:line="22" pos:column="28">&amp;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="29">read_lock<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">ERROR<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><literal type="string" pos:line="23" pos:column="13">"plugin_insert_read: c_heap_create failed."<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><operator pos:line="24" pos:column="14">-<pos:position pos:line="24" pos:column="15"/></operator><literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="28" pos:column="3">le<pos:position pos:line="28" pos:column="5"/></name> <operator pos:line="28" pos:column="6">=<pos:position pos:line="28" pos:column="7"/></operator> <call><name pos:line="28" pos:column="8">llist_search<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">read_list<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="32">rf<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">rf_name<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">le<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">!=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">NULL<pos:position pos:line="29" pos:column="17"/></name></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18"> <block pos:line="29" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">pthread_mutex_unlock<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><operator pos:line="30" pos:column="26">&amp;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="27">read_lock<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">WARNING<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><literal type="string" pos:line="31" pos:column="13">"The read function \"%s\" is already registered. "<pos:position pos:line="31" pos:column="63"/></literal>
            <literal type="string" pos:line="32" pos:column="13">"Check for duplicates in your configuration!"<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="33" pos:column="13">rf<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">rf_name<pos:position pos:line="33" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">EINVAL<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="37" pos:column="3">le<pos:position pos:line="37" pos:column="5"/></name> <operator pos:line="37" pos:column="6">=<pos:position pos:line="37" pos:column="7"/></operator> <call><name pos:line="37" pos:column="8">llentry_create<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name><name pos:line="37" pos:column="23">rf<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">-&gt;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="27">rf_name<pos:position pos:line="37" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">rf<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">le<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">==<pos:position pos:line="38" pos:column="12"/></operator> <name pos:line="38" pos:column="13">NULL<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18"> <block pos:line="38" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">pthread_mutex_unlock<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><operator pos:line="39" pos:column="26">&amp;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="27">read_lock<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">ERROR<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><literal type="string" pos:line="40" pos:column="11">"plugin_insert_read: llentry_create failed."<pos:position pos:line="40" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><operator pos:line="41" pos:column="12">-<pos:position pos:line="41" pos:column="13"/></operator><literal type="number" pos:line="41" pos:column="13">1<pos:position pos:line="41" pos:column="14"/></literal></expr>;<pos:position pos:line="41" pos:column="15"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="44" pos:column="3">status<pos:position pos:line="44" pos:column="9"/></name> <operator pos:line="44" pos:column="10">=<pos:position pos:line="44" pos:column="11"/></operator> <call><name pos:line="44" pos:column="12">c_heap_insert<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">read_heap<pos:position pos:line="44" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">rf<pos:position pos:line="44" pos:column="39"/></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name pos:line="45" pos:column="7">status<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">!=<pos:position pos:line="45" pos:column="16"/></operator> <literal type="number" pos:line="45" pos:column="17">0<pos:position pos:line="45" pos:column="18"/></literal></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19"> <block pos:line="45" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">pthread_mutex_unlock<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">read_lock<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ERROR<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><literal type="string" pos:line="47" pos:column="11">"plugin_insert_read: c_heap_insert failed."<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">llentry_destroy<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">le<pos:position pos:line="48" pos:column="23"/></name></expr></argument>)<pos:position pos:line="48" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
    <return pos:line="49" pos:column="5">return <expr><operator pos:line="49" pos:column="12">-<pos:position pos:line="49" pos:column="13"/></operator><literal type="number" pos:line="49" pos:column="13">1<pos:position pos:line="49" pos:column="14"/></literal></expr>;<pos:position pos:line="49" pos:column="15"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="52" pos:column="3">/* This does not fail. */</comment>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">llist_append<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">read_list<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="27">le<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="55" pos:column="3">/* Wake up all the read threads. */</comment>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">pthread_cond_broadcast<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><operator pos:line="56" pos:column="26">&amp;<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="27">read_cond<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">pthread_mutex_unlock<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><operator pos:line="57" pos:column="24">&amp;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="25">read_lock<pos:position pos:line="57" pos:column="34"/></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>
  <return pos:line="58" pos:column="3">return <expr><literal type="number" pos:line="58" pos:column="10">0<pos:position pos:line="58" pos:column="11"/></literal></expr>;<pos:position pos:line="58" pos:column="12"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
