<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_612_collectd-4.4.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">srrd_update<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">filename<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><specifier pos:line="1" pos:column="47">template<pos:position pos:line="1" pos:column="55"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">argc<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier><modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">argv<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">new_argc<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier><modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">new_argv<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

	<macro><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument pos:line="8" pos:column="17">template == NULL<pos:position pos:line="8" pos:column="33"/></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></macro><empty_stmt pos:line="8" pos:column="34">;<pos:position pos:line="8" pos:column="35"/></empty_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">new_argc<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="20">2<pos:position pos:line="10" pos:column="21"/></literal> <operator pos:line="10" pos:column="22">+<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">argc<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">new_argv<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">(<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">char<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></operator><operator pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></operator><operator pos:line="11" pos:column="28">)<pos:position pos:line="11" pos:column="29"/></operator> <call><name pos:line="11" pos:column="30">malloc<pos:position pos:line="11" pos:column="36"/></name> <argument_list pos:line="11" pos:column="37">(<argument><expr><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">new_argc<pos:position pos:line="11" pos:column="47"/></name> <operator pos:line="11" pos:column="48">+<pos:position pos:line="11" pos:column="49"/></operator> <literal type="number" pos:line="11" pos:column="50">1<pos:position pos:line="11" pos:column="51"/></literal><operator pos:line="11" pos:column="51">)<pos:position pos:line="11" pos:column="52"/></operator> <operator pos:line="11" pos:column="53">*<pos:position pos:line="11" pos:column="54"/></operator> <sizeof pos:line="11" pos:column="55">sizeof <argument_list pos:line="11" pos:column="62">(<argument><expr><name pos:line="11" pos:column="63">char<pos:position pos:line="11" pos:column="67"/></name> <operator pos:line="11" pos:column="68">*<pos:position pos:line="11" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">new_argv<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"rrdtool plugin: malloc failed."<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">-<pos:position pos:line="15" pos:column="26"/></operator><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal><operator pos:line="15" pos:column="27">)<pos:position pos:line="15" pos:column="28"/></operator></expr>;<pos:position pos:line="15" pos:column="29"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="18" pos:column="9">new_argv<pos:position pos:line="18" pos:column="17"/></name><index pos:line="18" pos:column="17">[<expr><literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>]<pos:position pos:line="18" pos:column="20"/></index></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="string" pos:line="18" pos:column="23">"update"<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">new_argv<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal></expr>]<pos:position pos:line="19" pos:column="20"/></index></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">filename<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memcpy<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">new_argv<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">+<pos:position pos:line="21" pos:column="27"/></operator> <literal type="number" pos:line="21" pos:column="28">2<pos:position pos:line="21" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">argv<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">argc<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">*<pos:position pos:line="21" pos:column="43"/></operator> <sizeof pos:line="21" pos:column="44">sizeof <argument_list pos:line="21" pos:column="51">(<argument><expr><name pos:line="21" pos:column="52">char<pos:position pos:line="21" pos:column="56"/></name> <operator pos:line="21" pos:column="57">*<pos:position pos:line="21" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">new_argv<pos:position pos:line="22" pos:column="17"/></name><index pos:line="22" pos:column="17">[<expr><name pos:line="22" pos:column="18">new_argc<pos:position pos:line="22" pos:column="26"/></name></expr>]<pos:position pos:line="22" pos:column="27"/></index></name> <operator pos:line="22" pos:column="28">=<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">NULL<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">pthread_mutex_lock<pos:position pos:line="24" pos:column="27"/></name> <argument_list pos:line="24" pos:column="28">(<argument><expr><operator pos:line="24" pos:column="29">&amp;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="30">librrd_lock<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">optind<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt> <comment type="block" pos:line="25" pos:column="21">/* bug in librrd? */</comment>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">rrd_clear_error<pos:position pos:line="26" pos:column="24"/></name> <argument_list pos:line="26" pos:column="25">()<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">rrd_update<pos:position pos:line="28" pos:column="28"/></name> <argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">new_argc<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">new_argv<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">pthread_mutex_unlock<pos:position pos:line="29" pos:column="29"/></name> <argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">librrd_lock<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">status<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">!=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">0<pos:position pos:line="31" pos:column="24"/></literal></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25">
	<block pos:line="32" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">WARNING<pos:position pos:line="33" pos:column="24"/></name> <argument_list pos:line="33" pos:column="25">(<argument><expr><literal type="string" pos:line="33" pos:column="26">"rrdtool plugin: rrd_update_r failed: %s: %s"<pos:position pos:line="33" pos:column="71"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="34" pos:column="33">argv<pos:position pos:line="34" pos:column="37"/></name><index pos:line="34" pos:column="37">[<expr><literal type="number" pos:line="34" pos:column="38">1<pos:position pos:line="34" pos:column="39"/></literal></expr>]<pos:position pos:line="34" pos:column="40"/></index></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="42">rrd_get_error<pos:position pos:line="34" pos:column="55"/></name> <argument_list pos:line="34" pos:column="56">()<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">sfree<pos:position pos:line="37" pos:column="14"/></name> <argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">new_argv<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>

	<return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">status<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">)<pos:position pos:line="39" pos:column="24"/></operator></expr>;<pos:position pos:line="39" pos:column="25"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
