<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_351_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">camqp_strerror<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">camqp_config_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
                            <parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">buffer<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">size_t<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">buffer_size<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list> <block pos:line="2" pos:column="63">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">amqp_rpc_reply_t<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">r<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">r<pos:position pos:line="5" pos:column="4"/></name> <operator pos:line="5" pos:column="5">=<pos:position pos:line="5" pos:column="6"/></operator> <call><name pos:line="5" pos:column="7">amqp_get_rpc_reply<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name><name pos:line="5" pos:column="26">conf<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">connection<pos:position pos:line="5" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="44"/></expr_stmt>
  <switch pos:line="6" pos:column="3">switch <condition pos:line="6" pos:column="10">(<expr><name><name pos:line="6" pos:column="11">r<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">reply_type<pos:position pos:line="6" pos:column="23"/></name></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition> <block pos:line="6" pos:column="25">{
  <case pos:line="7" pos:column="3">case <expr><name pos:line="7" pos:column="8">AMQP_RESPONSE_NORMAL<pos:position pos:line="7" pos:column="28"/></name></expr>:<pos:position pos:line="7" pos:column="29"/></case>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">sstrncpy<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">buffer<pos:position pos:line="8" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="22">"Success"<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">buffer_size<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
    <break pos:line="9" pos:column="5">break;<pos:position pos:line="9" pos:column="11"/></break>

  <case pos:line="11" pos:column="3">case <expr><name pos:line="11" pos:column="8">AMQP_RESPONSE_NONE<pos:position pos:line="11" pos:column="26"/></name></expr>:<pos:position pos:line="11" pos:column="27"/></case>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">sstrncpy<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">buffer<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="22">"Missing RPC reply type"<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">buffer_size<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
    <break pos:line="13" pos:column="5">break;<pos:position pos:line="13" pos:column="11"/></break>

  <case pos:line="15" pos:column="3">case <expr><name pos:line="15" pos:column="8">AMQP_RESPONSE_LIBRARY_EXCEPTION<pos:position pos:line="15" pos:column="39"/></name></expr>:<pos:position pos:line="15" pos:column="40"/></case>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">HAVE_AMQP_RPC_REPLY_T_LIBRARY_ERRNO<pos:position pos:line="16" pos:column="40"/></name></expr></cpp:if>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">r<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">library_errno<pos:position pos:line="17" pos:column="24"/></name></name></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
      <block type="pseudo"><return pos:line="18" pos:column="7">return <expr><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><call><name pos:line="18" pos:column="15">sstrerror<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">r<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">library_errno<pos:position pos:line="18" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">buffer<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">buffer_size<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call><operator pos:line="18" pos:column="62">)<pos:position pos:line="18" pos:column="63"/></operator></expr>;<pos:position pos:line="18" pos:column="64"/></return></block></then></if>
<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else<pos:position pos:line="19" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">r<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">library_error<pos:position pos:line="20" pos:column="24"/></name></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
      <block type="pseudo"><return pos:line="21" pos:column="7">return <expr><operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><call><name pos:line="21" pos:column="15">sstrerror<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">r<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">.<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">library_error<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">buffer<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">buffer_size<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator></expr>;<pos:position pos:line="21" pos:column="64"/></return></block></then>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    <else pos:line="23" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="7">sstrncpy<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">buffer<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="24">"End of stream"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">buffer_size<pos:position pos:line="24" pos:column="52"/></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt></block></else></if>
    <break pos:line="25" pos:column="5">break;<pos:position pos:line="25" pos:column="11"/></break>

  <case pos:line="27" pos:column="3">case <expr><name pos:line="27" pos:column="8">AMQP_RESPONSE_SERVER_EXCEPTION<pos:position pos:line="27" pos:column="38"/></name></expr>:<pos:position pos:line="27" pos:column="39"/></case>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">r<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">.<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">reply<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">id<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">==<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">AMQP_CONNECTION_CLOSE_METHOD<pos:position pos:line="28" pos:column="51"/></name></expr>)<pos:position pos:line="28" pos:column="52"/></condition><then pos:line="28" pos:column="52"> <block pos:line="28" pos:column="53">{
      <decl_stmt><decl><type><name pos:line="29" pos:column="7">amqp_connection_close_t<pos:position pos:line="29" pos:column="30"/></name> <modifier pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></modifier></type><name pos:line="29" pos:column="32">m<pos:position pos:line="29" pos:column="33"/></name> <init pos:line="29" pos:column="34">= <expr><name><name pos:line="29" pos:column="36">r<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">.<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">reply<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">.<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="44">decoded<pos:position pos:line="29" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="52"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">char<pos:position pos:line="30" pos:column="11"/></name> <modifier pos:line="30" pos:column="12">*<pos:position pos:line="30" pos:column="13"/></modifier></type><name pos:line="30" pos:column="13">tmp<pos:position pos:line="30" pos:column="16"/></name> <init pos:line="30" pos:column="17">= <expr><call><name pos:line="30" pos:column="19">camqp_bytes_cstring<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><operator pos:line="30" pos:column="39">&amp;<pos:position pos:line="30" pos:column="44"/></operator><name><name pos:line="30" pos:column="40">m<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">reply_text<pos:position pos:line="30" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="55"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">ssnprintf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">buffer<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="25">buffer_size<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="38">"Server connection error %d: %s"<pos:position pos:line="31" pos:column="70"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="32" pos:column="17">m<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">-&gt;<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="20">reply_code<pos:position pos:line="32" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="32">tmp<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">sfree<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">tmp<pos:position pos:line="33" pos:column="16"/></name></expr></argument>)<pos:position pos:line="33" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then> <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><name><name pos:line="34" pos:column="16">r<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">.<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">reply<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">.<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">id<pos:position pos:line="34" pos:column="26"/></name></name> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">AMQP_CHANNEL_CLOSE_METHOD<pos:position pos:line="34" pos:column="55"/></name></expr>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56"> <block pos:line="34" pos:column="57">{
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">amqp_channel_close_t<pos:position pos:line="35" pos:column="27"/></name> <modifier pos:line="35" pos:column="28">*<pos:position pos:line="35" pos:column="29"/></modifier></type><name pos:line="35" pos:column="29">m<pos:position pos:line="35" pos:column="30"/></name> <init pos:line="35" pos:column="31">= <expr><name><name pos:line="35" pos:column="33">r<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">.<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">reply<pos:position pos:line="35" pos:column="40"/></name><operator pos:line="35" pos:column="40">.<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="41">decoded<pos:position pos:line="35" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="35" pos:column="49"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">char<pos:position pos:line="36" pos:column="11"/></name> <modifier pos:line="36" pos:column="12">*<pos:position pos:line="36" pos:column="13"/></modifier></type><name pos:line="36" pos:column="13">tmp<pos:position pos:line="36" pos:column="16"/></name> <init pos:line="36" pos:column="17">= <expr><call><name pos:line="36" pos:column="19">camqp_bytes_cstring<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><operator pos:line="36" pos:column="39">&amp;<pos:position pos:line="36" pos:column="44"/></operator><name><name pos:line="36" pos:column="40">m<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">-&gt;<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="43">reply_text<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="55"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">ssnprintf<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">buffer<pos:position pos:line="37" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="25">buffer_size<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="38">"Server channel error %d: %s"<pos:position pos:line="37" pos:column="67"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="38" pos:column="17">m<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">-&gt;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="20">reply_code<pos:position pos:line="38" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">tmp<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">sfree<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">tmp<pos:position pos:line="39" pos:column="16"/></name></expr></argument>)<pos:position pos:line="39" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if></elseif> <else pos:line="40" pos:column="7">else <block pos:line="40" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">ssnprintf<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">buffer<pos:position pos:line="41" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="25">buffer_size<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="38">"Server error method %#"<pos:position pos:line="41" pos:column="62"/></literal> <name pos:line="41" pos:column="63">PRIx32<pos:position pos:line="41" pos:column="69"/></name></expr></argument>,
                <argument><expr><name><name pos:line="42" pos:column="17">r<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">.<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">reply<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">.<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">id<pos:position pos:line="42" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></else></if>
    <break pos:line="44" pos:column="5">break;<pos:position pos:line="44" pos:column="11"/></break>

  <default pos:line="46" pos:column="3">default:<pos:position pos:line="46" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ssnprintf<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">buffer<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="23">buffer_size<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="36">"Unknown reply type %i"<pos:position pos:line="47" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="61">(<pos:position pos:line="47" pos:column="62"/></operator><name pos:line="47" pos:column="62">int<pos:position pos:line="47" pos:column="65"/></name><operator pos:line="47" pos:column="65">)<pos:position pos:line="47" pos:column="66"/></operator><name><name pos:line="47" pos:column="66">r<pos:position pos:line="47" pos:column="67"/></name><operator pos:line="47" pos:column="67">.<pos:position pos:line="47" pos:column="68"/></operator><name pos:line="47" pos:column="68">reply_type<pos:position pos:line="47" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></switch>

  <return pos:line="50" pos:column="3">return <expr><operator pos:line="50" pos:column="10">(<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">buffer<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">)<pos:position pos:line="50" pos:column="18"/></operator></expr>;<pos:position pos:line="50" pos:column="19"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
