<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2047_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wg_callback_init<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">wg_callback<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">cb<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">addrinfo<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ai_list<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">cdtime_t<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">now<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">status<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">connerr<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><literal type="number" pos:line="7" pos:column="18">1024<pos:position pos:line="7" pos:column="22"/></literal></expr>]<pos:position pos:line="7" pos:column="23"/></index></name> <init pos:line="7" pos:column="24">= <expr><literal type="string" pos:line="7" pos:column="26">""<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">cb<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">sock_fd<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">&gt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal><operator pos:line="10" pos:column="18">)<pos:position pos:line="10" pos:column="19"/></operator></expr>;<pos:position pos:line="10" pos:column="20"/></return></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/* Don't try to reconnect too often. By default, one reconnection attempt
     * is made per second. */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">now<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">cdtime<pos:position pos:line="14" pos:column="17"/></name> <argument_list pos:line="14" pos:column="18">()<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">now<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">-<pos:position pos:line="15" pos:column="15"/></operator> <name><name pos:line="15" pos:column="16">cb<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">last_connect_time<pos:position pos:line="15" pos:column="37"/></name></name><operator pos:line="15" pos:column="37">)<pos:position pos:line="15" pos:column="38"/></operator> <operator pos:line="15" pos:column="39">&lt;<pos:position pos:line="15" pos:column="43"/></operator> <name pos:line="15" pos:column="41">WG_MIN_RECONNECT_INTERVAL<pos:position pos:line="15" pos:column="66"/></name></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">EAGAIN<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">)<pos:position pos:line="16" pos:column="24"/></operator></expr>;<pos:position pos:line="16" pos:column="25"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">cb<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">last_connect_time<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">now<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">struct<pos:position pos:line="19" pos:column="11"/></name> <name pos:line="19" pos:column="12">addrinfo<pos:position pos:line="19" pos:column="20"/></name></name></type> <name pos:line="19" pos:column="21">ai_hints<pos:position pos:line="19" pos:column="29"/></name> <init pos:line="19" pos:column="30">= <expr><block pos:line="19" pos:column="32">{
        <expr><operator pos:line="20" pos:column="9">.<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">ai_family<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">AF_UNSPEC<pos:position pos:line="20" pos:column="31"/></name></expr>,
        <expr><operator pos:line="21" pos:column="9">.<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">ai_flags<pos:position pos:line="21" pos:column="18"/></name>  <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">AI_ADDRCONFIG<pos:position pos:line="21" pos:column="35"/></name></expr>
    }<pos:position pos:line="22" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="22" pos:column="7"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal> <operator pos:line="24" pos:column="11">==<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">strcasecmp<pos:position pos:line="24" pos:column="24"/></name> <argument_list pos:line="24" pos:column="25">(<argument><expr><literal type="string" pos:line="24" pos:column="26">"tcp"<pos:position pos:line="24" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="33">cb<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">protocol<pos:position pos:line="24" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="47"/></condition><then pos:line="24" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="9">ai_hints<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">.<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">ai_socktype<pos:position pos:line="25" pos:column="29"/></name></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">SOCK_STREAM<pos:position pos:line="25" pos:column="43"/></name></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></then>
    <else pos:line="26" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="9">ai_hints<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">.<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">ai_socktype<pos:position pos:line="27" pos:column="29"/></name></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">SOCK_DGRAM<pos:position pos:line="27" pos:column="42"/></name></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="29" pos:column="5">status<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">getaddrinfo<pos:position pos:line="29" pos:column="25"/></name> <argument_list pos:line="29" pos:column="26">(<argument><expr><name><name pos:line="29" pos:column="27">cb<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">node<pos:position pos:line="29" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="37">cb<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">-&gt;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="41">service<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="50">&amp;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="51">ai_hints<pos:position pos:line="29" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="61">&amp;<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="62">ai_list<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">status<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">!=<pos:position pos:line="30" pos:column="18"/></operator> <literal type="number" pos:line="30" pos:column="19">0<pos:position pos:line="30" pos:column="20"/></literal></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21">
    <block pos:line="31" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">ERROR<pos:position pos:line="32" pos:column="14"/></name> <argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="string" pos:line="32" pos:column="16">"write_graphite plugin: getaddrinfo (%s, %s, %s) failed: %s"<pos:position pos:line="32" pos:column="76"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="33" pos:column="17">cb<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">node<pos:position pos:line="33" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="27">cb<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">-&gt;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="31">service<pos:position pos:line="33" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="40">cb<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">protocol<pos:position pos:line="33" pos:column="52"/></name></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="54">gai_strerror<pos:position pos:line="33" pos:column="66"/></name> <argument_list pos:line="33" pos:column="67">(<argument><expr><name pos:line="33" pos:column="68">status<pos:position pos:line="33" pos:column="74"/></name></expr></argument>)<pos:position pos:line="33" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="77"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><operator pos:line="34" pos:column="17">-<pos:position pos:line="34" pos:column="18"/></operator><literal type="number" pos:line="34" pos:column="18">1<pos:position pos:line="34" pos:column="19"/></literal><operator pos:line="34" pos:column="19">)<pos:position pos:line="34" pos:column="20"/></operator></expr>;<pos:position pos:line="34" pos:column="21"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">assert<pos:position pos:line="37" pos:column="11"/></name> <argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">ai_list<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">!=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">NULL<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
    <for pos:line="38" pos:column="5">for <control pos:line="38" pos:column="9">(<init><decl><type><name><name pos:line="38" pos:column="10">struct<pos:position pos:line="38" pos:column="16"/></name> <name pos:line="38" pos:column="17">addrinfo<pos:position pos:line="38" pos:column="25"/></name></name> <modifier pos:line="38" pos:column="26">*<pos:position pos:line="38" pos:column="27"/></modifier><name pos:line="38" pos:column="27">ai_ptr<pos:position pos:line="38" pos:column="33"/></name></type> <init pos:line="38" pos:column="34">= <expr><name pos:line="38" pos:column="36">ai_list<pos:position pos:line="38" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="44"/></init> <condition><expr><name pos:line="38" pos:column="45">ai_ptr<pos:position pos:line="38" pos:column="51"/></name> <operator pos:line="38" pos:column="52">!=<pos:position pos:line="38" pos:column="54"/></operator> <name pos:line="38" pos:column="55">NULL<pos:position pos:line="38" pos:column="59"/></name></expr>;<pos:position pos:line="38" pos:column="60"/></condition> <incr><expr><name pos:line="38" pos:column="61">ai_ptr<pos:position pos:line="38" pos:column="67"/></name> <operator pos:line="38" pos:column="68">=<pos:position pos:line="38" pos:column="69"/></operator> <name><name pos:line="38" pos:column="70">ai_ptr<pos:position pos:line="38" pos:column="76"/></name><operator pos:line="38" pos:column="76">-&gt;<pos:position pos:line="38" pos:column="81"/></operator><name pos:line="38" pos:column="78">ai_next<pos:position pos:line="38" pos:column="85"/></name></name></expr></incr>)<pos:position pos:line="38" pos:column="86"/></control>
    <block pos:line="39" pos:column="5">{
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">cb<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">sock_fd<pos:position pos:line="40" pos:column="20"/></name></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <call><name pos:line="40" pos:column="23">socket<pos:position pos:line="40" pos:column="29"/></name> <argument_list pos:line="40" pos:column="30">(<argument><expr><name><name pos:line="40" pos:column="31">ai_ptr<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">-&gt;<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="39">ai_family<pos:position pos:line="40" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="50">ai_ptr<pos:position pos:line="40" pos:column="56"/></name><operator pos:line="40" pos:column="56">-&gt;<pos:position pos:line="40" pos:column="61"/></operator><name pos:line="40" pos:column="58">ai_socktype<pos:position pos:line="40" pos:column="69"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="41" pos:column="17">ai_ptr<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">-&gt;<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="25">ai_protocol<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">cb<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">sock_fd<pos:position pos:line="42" pos:column="24"/></name></name> <operator pos:line="42" pos:column="25">&lt;<pos:position pos:line="42" pos:column="29"/></operator> <literal type="number" pos:line="42" pos:column="27">0<pos:position pos:line="42" pos:column="28"/></literal></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">char<pos:position pos:line="43" pos:column="17"/></name></type> <name><name pos:line="43" pos:column="18">errbuf<pos:position pos:line="43" pos:column="24"/></name><index pos:line="43" pos:column="24">[<expr><literal type="number" pos:line="43" pos:column="25">1024<pos:position pos:line="43" pos:column="29"/></literal></expr>]<pos:position pos:line="43" pos:column="30"/></index></name></decl>;<pos:position pos:line="43" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">snprintf<pos:position pos:line="44" pos:column="21"/></name> <argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">connerr<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="32">sizeof <argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">connerr<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="50">"failed to open socket: %s"<pos:position pos:line="44" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><call><name pos:line="45" pos:column="21">sstrerror<pos:position pos:line="45" pos:column="30"/></name> <argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">errno<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">errbuf<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="47">sizeof <argument_list pos:line="45" pos:column="54">(<argument><expr><name pos:line="45" pos:column="55">errbuf<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>
            <continue pos:line="46" pos:column="13">continue;<pos:position pos:line="46" pos:column="22"/></continue>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="49" pos:column="9">set_sock_opts<pos:position pos:line="49" pos:column="22"/></name> <argument_list pos:line="49" pos:column="23">(<argument><expr><name><name pos:line="49" pos:column="24">cb<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">-&gt;<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="28">sock_fd<pos:position pos:line="49" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><name pos:line="51" pos:column="9">status<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <call><name pos:line="51" pos:column="18">connect<pos:position pos:line="51" pos:column="25"/></name> <argument_list pos:line="51" pos:column="26">(<argument><expr><name><name pos:line="51" pos:column="27">cb<pos:position pos:line="51" pos:column="29"/></name><operator pos:line="51" pos:column="29">-&gt;<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="31">sock_fd<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="40">ai_ptr<pos:position pos:line="51" pos:column="46"/></name><operator pos:line="51" pos:column="46">-&gt;<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="48">ai_addr<pos:position pos:line="51" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="57">ai_ptr<pos:position pos:line="51" pos:column="63"/></name><operator pos:line="51" pos:column="63">-&gt;<pos:position pos:line="51" pos:column="68"/></operator><name pos:line="51" pos:column="65">ai_addrlen<pos:position pos:line="51" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="77"/></expr_stmt>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">status<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">!=<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25">
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">char<pos:position pos:line="54" pos:column="17"/></name></type> <name><name pos:line="54" pos:column="18">errbuf<pos:position pos:line="54" pos:column="24"/></name><index pos:line="54" pos:column="24">[<expr><literal type="number" pos:line="54" pos:column="25">1024<pos:position pos:line="54" pos:column="29"/></literal></expr>]<pos:position pos:line="54" pos:column="30"/></index></name></decl>;<pos:position pos:line="54" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">snprintf<pos:position pos:line="55" pos:column="21"/></name> <argument_list pos:line="55" pos:column="22">(<argument><expr><name pos:line="55" pos:column="23">connerr<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="32">sizeof <argument_list pos:line="55" pos:column="39">(<argument><expr><name pos:line="55" pos:column="40">connerr<pos:position pos:line="55" pos:column="47"/></name></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="50">"failed to connect to remote "<pos:position pos:line="55" pos:column="80"/></literal>
                    <literal type="string" pos:line="56" pos:column="21">"host: %s"<pos:position pos:line="56" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="33">sstrerror<pos:position pos:line="56" pos:column="42"/></name> <argument_list pos:line="56" pos:column="43">(<argument><expr><name pos:line="56" pos:column="44">errno<pos:position pos:line="56" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">errbuf<pos:position pos:line="56" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="59">sizeof <argument_list pos:line="56" pos:column="66">(<argument><expr><name pos:line="56" pos:column="67">errbuf<pos:position pos:line="56" pos:column="73"/></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="77"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">close<pos:position pos:line="57" pos:column="18"/></name> <argument_list pos:line="57" pos:column="19">(<argument><expr><name><name pos:line="57" pos:column="20">cb<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">sock_fd<pos:position pos:line="57" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">cb<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">-&gt;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="17">sock_fd<pos:position pos:line="58" pos:column="24"/></name></name> <operator pos:line="58" pos:column="25">=<pos:position pos:line="58" pos:column="26"/></operator> <operator pos:line="58" pos:column="27">-<pos:position pos:line="58" pos:column="28"/></operator><literal type="number" pos:line="58" pos:column="28">1<pos:position pos:line="58" pos:column="29"/></literal></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
            <continue pos:line="59" pos:column="13">continue;<pos:position pos:line="59" pos:column="22"/></continue>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>

        <break pos:line="62" pos:column="9">break;<pos:position pos:line="62" pos:column="15"/></break>
    }<pos:position pos:line="63" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">freeaddrinfo<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">ai_list<pos:position pos:line="65" pos:column="26"/></name></expr></argument>)<pos:position pos:line="65" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name><name pos:line="67" pos:column="9">cb<pos:position pos:line="67" pos:column="11"/></name><operator pos:line="67" pos:column="11">-&gt;<pos:position pos:line="67" pos:column="16"/></operator><name pos:line="67" pos:column="13">sock_fd<pos:position pos:line="67" pos:column="20"/></name></name> <operator pos:line="67" pos:column="21">&lt;<pos:position pos:line="67" pos:column="25"/></operator> <literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25">
    <block pos:line="68" pos:column="5">{
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">connerr<pos:position pos:line="69" pos:column="20"/></name><index pos:line="69" pos:column="20">[<expr><literal type="number" pos:line="69" pos:column="21">0<pos:position pos:line="69" pos:column="22"/></literal></expr>]<pos:position pos:line="69" pos:column="23"/></index></name> <operator pos:line="69" pos:column="24">==<pos:position pos:line="69" pos:column="26"/></operator> <literal type="char" pos:line="69" pos:column="27">'\0'<pos:position pos:line="69" pos:column="31"/></literal></expr>)<pos:position pos:line="69" pos:column="32"/></condition><then pos:line="69" pos:column="32">
            <comment type="block" pos:line="70" pos:column="13">/* this should not happen but try to get a message anyway */</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="13">sstrerror<pos:position pos:line="71" pos:column="22"/></name> <argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">errno<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">connerr<pos:position pos:line="71" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="71" pos:column="40">sizeof <argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">connerr<pos:position pos:line="71" pos:column="55"/></name></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="71" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="58"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">c_complain<pos:position pos:line="72" pos:column="19"/></name> <argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">LOG_ERR<pos:position pos:line="72" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="30">&amp;<pos:position pos:line="72" pos:column="35"/></operator><name><name pos:line="72" pos:column="31">cb<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">-&gt;<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="35">init_complaint<pos:position pos:line="72" pos:column="49"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="73" pos:column="19">"write_graphite plugin: Connecting to %s:%s via %s failed. "<pos:position pos:line="73" pos:column="79"/></literal>
                  <literal type="string" pos:line="74" pos:column="19">"The last error was: %s"<pos:position pos:line="74" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="45">cb<pos:position pos:line="74" pos:column="47"/></name><operator pos:line="74" pos:column="47">-&gt;<pos:position pos:line="74" pos:column="52"/></operator><name pos:line="74" pos:column="49">node<pos:position pos:line="74" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="55">cb<pos:position pos:line="74" pos:column="57"/></name><operator pos:line="74" pos:column="57">-&gt;<pos:position pos:line="74" pos:column="62"/></operator><name pos:line="74" pos:column="59">service<pos:position pos:line="74" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="68">cb<pos:position pos:line="74" pos:column="70"/></name><operator pos:line="74" pos:column="70">-&gt;<pos:position pos:line="74" pos:column="75"/></operator><name pos:line="74" pos:column="72">protocol<pos:position pos:line="74" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="82">connerr<pos:position pos:line="74" pos:column="89"/></name></expr></argument>)<pos:position pos:line="74" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="91"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><operator pos:line="75" pos:column="16">(<pos:position pos:line="75" pos:column="17"/></operator><operator pos:line="75" pos:column="17">-<pos:position pos:line="75" pos:column="18"/></operator><literal type="number" pos:line="75" pos:column="18">1<pos:position pos:line="75" pos:column="19"/></literal><operator pos:line="75" pos:column="19">)<pos:position pos:line="75" pos:column="20"/></operator></expr>;<pos:position pos:line="75" pos:column="21"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then>
    <else pos:line="77" pos:column="5">else
    <block pos:line="78" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">c_release<pos:position pos:line="79" pos:column="18"/></name> <argument_list pos:line="79" pos:column="19">(<argument><expr><name pos:line="79" pos:column="20">LOG_INFO<pos:position pos:line="79" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="30">&amp;<pos:position pos:line="79" pos:column="35"/></operator><name><name pos:line="79" pos:column="31">cb<pos:position pos:line="79" pos:column="33"/></name><operator pos:line="79" pos:column="33">-&gt;<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="35">init_complaint<pos:position pos:line="79" pos:column="49"/></name></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="80" pos:column="17">"write_graphite plugin: Successfully connected to %s:%s via %s."<pos:position pos:line="80" pos:column="81"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="81" pos:column="17">cb<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">-&gt;<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="21">node<pos:position pos:line="81" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="27">cb<pos:position pos:line="81" pos:column="29"/></name><operator pos:line="81" pos:column="29">-&gt;<pos:position pos:line="81" pos:column="34"/></operator><name pos:line="81" pos:column="31">service<pos:position pos:line="81" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="40">cb<pos:position pos:line="81" pos:column="42"/></name><operator pos:line="81" pos:column="42">-&gt;<pos:position pos:line="81" pos:column="47"/></operator><name pos:line="81" pos:column="44">protocol<pos:position pos:line="81" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="84" pos:column="5">/* wg_force_reconnect_check does not flush the buffer before closing a
     * sending socket, so only call wg_reset_buffer() if the socket was closed
     * for a different reason (tracked in cb-&gt;reconnect_interval_reached). */</comment>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><operator pos:line="87" pos:column="9">!<pos:position pos:line="87" pos:column="10"/></operator><name><name pos:line="87" pos:column="10">cb<pos:position pos:line="87" pos:column="12"/></name><operator pos:line="87" pos:column="12">-&gt;<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="14">reconnect_interval_reached<pos:position pos:line="87" pos:column="40"/></name></name> <operator pos:line="87" pos:column="41">||<pos:position pos:line="87" pos:column="43"/></operator> <operator pos:line="87" pos:column="44">(<pos:position pos:line="87" pos:column="45"/></operator><name><name pos:line="87" pos:column="45">cb<pos:position pos:line="87" pos:column="47"/></name><operator pos:line="87" pos:column="47">-&gt;<pos:position pos:line="87" pos:column="52"/></operator><name pos:line="87" pos:column="49">send_buf_free<pos:position pos:line="87" pos:column="62"/></name></name> <operator pos:line="87" pos:column="63">==<pos:position pos:line="87" pos:column="65"/></operator> <literal type="number" pos:line="87" pos:column="66">0<pos:position pos:line="87" pos:column="67"/></literal><operator pos:line="87" pos:column="67">)<pos:position pos:line="87" pos:column="68"/></operator></expr>)<pos:position pos:line="87" pos:column="69"/></condition><then pos:line="87" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="9">wg_reset_buffer<pos:position pos:line="88" pos:column="24"/></name> <argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">cb<pos:position pos:line="88" pos:column="28"/></name></expr></argument>)<pos:position pos:line="88" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="89" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="90" pos:column="9">cb<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">-&gt;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="13">reconnect_interval_reached<pos:position pos:line="90" pos:column="39"/></name></name> <operator pos:line="90" pos:column="40">=<pos:position pos:line="90" pos:column="41"/></operator> <literal type="number" pos:line="90" pos:column="42">0<pos:position pos:line="90" pos:column="43"/></literal></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt></block></else></if>

    <return pos:line="92" pos:column="5">return <expr><operator pos:line="92" pos:column="12">(<pos:position pos:line="92" pos:column="13"/></operator><literal type="number" pos:line="92" pos:column="13">0<pos:position pos:line="92" pos:column="14"/></literal><operator pos:line="92" pos:column="14">)<pos:position pos:line="92" pos:column="15"/></operator></expr>;<pos:position pos:line="92" pos:column="16"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
