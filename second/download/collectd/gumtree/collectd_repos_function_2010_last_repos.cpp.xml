<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2010_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pmu_add_hw_events<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">eventlist<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">el<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier><modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">e<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">count<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list> <block pos:line="1" pos:column="76">{

  <for pos:line="3" pos:column="3">for <control pos:line="3" pos:column="7">(<init><decl><type><name pos:line="3" pos:column="8">size_t<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">i<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></init> <condition><expr><name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">&lt;<pos:position pos:line="3" pos:column="28"/></operator> <name pos:line="3" pos:column="26">count<pos:position pos:line="3" pos:column="31"/></name></expr>;<pos:position pos:line="3" pos:column="32"/></condition> <incr><expr><name pos:line="3" pos:column="33">i<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">++<pos:position pos:line="3" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="3" pos:column="37"/></control> <block pos:line="3" pos:column="38">{

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">group_events_count<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">events<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">strdup<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name><name pos:line="7" pos:column="27">e<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><name pos:line="7" pos:column="29">i<pos:position pos:line="7" pos:column="30"/></name></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">events<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
      <block type="pseudo"><return pos:line="9" pos:column="7">return <expr><operator pos:line="9" pos:column="14">-<pos:position pos:line="9" pos:column="15"/></operator><literal type="number" pos:line="9" pos:column="15">1<pos:position pos:line="9" pos:column="16"/></literal></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">s<pos:position pos:line="11" pos:column="12"/></name></decl>, <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="15">tmp<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><expr><name pos:line="12" pos:column="10">s<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">strtok_r<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">events<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="31">","<pos:position pos:line="12" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">tmp<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></init> <condition><expr><name pos:line="12" pos:column="43">s<pos:position pos:line="12" pos:column="44"/></name></expr>;<pos:position pos:line="12" pos:column="45"/></condition> <incr><expr><name pos:line="12" pos:column="46">s<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">=<pos:position pos:line="12" pos:column="49"/></operator> <call><name pos:line="12" pos:column="50">strtok_r<pos:position pos:line="12" pos:column="58"/></name><argument_list pos:line="12" pos:column="58">(<argument><expr><name pos:line="12" pos:column="59">NULL<pos:position pos:line="12" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="65">","<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="70">&amp;<pos:position pos:line="12" pos:column="75"/></operator><name pos:line="12" pos:column="71">tmp<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr></incr>)<pos:position pos:line="12" pos:column="76"/></control> <block pos:line="12" pos:column="77">{

      <comment type="block" pos:line="14" pos:column="7">/* Multiple events parsed in one entry */</comment>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">group_events_count<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">==<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
        <comment type="block" pos:line="16" pos:column="9">/* Mark previously added event as group leader */</comment>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">el<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">eventlist_last<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">group_leader<pos:position pos:line="17" pos:column="41"/></name></name> <operator pos:line="17" pos:column="42">=<pos:position pos:line="17" pos:column="43"/></operator> <literal type="number" pos:line="17" pos:column="44">1<pos:position pos:line="17" pos:column="45"/></literal></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="18" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="20" pos:column="7">/* Allocate memory for event struct that contains array of efd structs
         for all cores */</comment>
      <decl_stmt><decl><type><name><name pos:line="22" pos:column="7">struct<pos:position pos:line="22" pos:column="13"/></name> <name pos:line="22" pos:column="14">event<pos:position pos:line="22" pos:column="19"/></name></name> <modifier pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></modifier></type><name pos:line="22" pos:column="21">e<pos:position pos:line="22" pos:column="22"/></name> <init pos:line="22" pos:column="23">=
          <expr><call><name pos:line="23" pos:column="11">calloc<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><sizeof pos:line="23" pos:column="18">sizeof<argument_list pos:line="23" pos:column="24">(<argument><expr pos:line="23" pos:column="25">struct <name pos:line="23" pos:column="32">event<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></sizeof> <operator pos:line="23" pos:column="39">+<pos:position pos:line="23" pos:column="40"/></operator> <sizeof pos:line="23" pos:column="41">sizeof<argument_list pos:line="23" pos:column="47">(<argument><expr pos:line="23" pos:column="48">struct <name pos:line="23" pos:column="55">efd<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></sizeof> <operator pos:line="23" pos:column="60">*<pos:position pos:line="23" pos:column="61"/></operator> <name><name pos:line="23" pos:column="62">el<pos:position pos:line="23" pos:column="64"/></name><operator pos:line="23" pos:column="64">-&gt;<pos:position pos:line="23" pos:column="69"/></operator><name pos:line="23" pos:column="66">num_cpus<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="76">1<pos:position pos:line="23" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="79"/></decl_stmt>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">e<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">==<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">NULL<pos:position pos:line="24" pos:column="20"/></name></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <block pos:line="24" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">free<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">events<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">-<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">ENOMEM<pos:position pos:line="26" pos:column="23"/></name></expr>;<pos:position pos:line="26" pos:column="24"/></return>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>

      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><call><name pos:line="29" pos:column="11">resolve_event<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">s<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="29">e<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">attr<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call> <operator pos:line="29" pos:column="38">==<pos:position pos:line="29" pos:column="40"/></operator> <literal type="number" pos:line="29" pos:column="41">0<pos:position pos:line="29" pos:column="42"/></literal></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43"> <block pos:line="29" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">e<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">next<pos:position pos:line="30" pos:column="16"/></name></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">NULL<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name><name pos:line="31" pos:column="14">el<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">eventlist<pos:position pos:line="31" pos:column="27"/></name></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="11">el<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">eventlist<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">e<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt></block></then></if>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">el<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">eventlist_last<pos:position pos:line="33" pos:column="31"/></name></name></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="11">el<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">-&gt;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="15">eventlist_last<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">-&gt;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="31">next<pos:position pos:line="34" pos:column="35"/></name></name> <operator pos:line="34" pos:column="36">=<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="38">e<pos:position pos:line="34" pos:column="39"/></name></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">el<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">eventlist_last<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">=<pos:position pos:line="35" pos:column="29"/></operator> <name pos:line="35" pos:column="30">e<pos:position pos:line="35" pos:column="31"/></name></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">e<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">event<pos:position pos:line="36" pos:column="17"/></name></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">strdup<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">s<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="37" pos:column="8"/></block></then> <else pos:line="37" pos:column="9">else <block pos:line="37" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">DEBUG<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">PMU_PLUGIN<pos:position pos:line="38" pos:column="25"/></name> <literal type="string" pos:line="38" pos:column="26">": Cannot resolve %s"<pos:position pos:line="38" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="49">s<pos:position pos:line="38" pos:column="50"/></name></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">sfree<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">e<pos:position pos:line="39" pos:column="16"/></name></expr></argument>)<pos:position pos:line="39" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></else></if>

      <expr_stmt><expr><name pos:line="42" pos:column="7">group_events_count<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">++<pos:position pos:line="42" pos:column="27"/></operator></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></for>

    <comment type="block" pos:line="45" pos:column="5">/* Multiple events parsed in one entry */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">group_events_count<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">&gt;<pos:position pos:line="46" pos:column="32"/></operator> <literal type="number" pos:line="46" pos:column="30">1<pos:position pos:line="46" pos:column="31"/></literal></expr>)<pos:position pos:line="46" pos:column="32"/></condition><then pos:line="46" pos:column="32"> <block pos:line="46" pos:column="33">{
      <comment type="block" pos:line="47" pos:column="7">/* Mark last added event as group end */</comment>
      <expr_stmt><expr><name><name pos:line="48" pos:column="7">el<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">-&gt;<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="11">eventlist_last<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">-&gt;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="27">end_group<pos:position pos:line="48" pos:column="36"/></name></name> <operator pos:line="48" pos:column="37">=<pos:position pos:line="48" pos:column="38"/></operator> <literal type="number" pos:line="48" pos:column="39">1<pos:position pos:line="48" pos:column="40"/></literal></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">free<pos:position pos:line="51" pos:column="9"/></name><argument_list pos:line="51" pos:column="9">(<argument><expr><name pos:line="51" pos:column="10">events<pos:position pos:line="51" pos:column="16"/></name></expr></argument>)<pos:position pos:line="51" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></for>

  <return pos:line="54" pos:column="3">return <expr><literal type="number" pos:line="54" pos:column="10">0<pos:position pos:line="54" pos:column="11"/></literal></expr>;<pos:position pos:line="54" pos:column="12"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
