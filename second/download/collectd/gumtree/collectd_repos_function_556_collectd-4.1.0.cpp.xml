<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_556_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">sockent_t<pos:position pos:line="1" pos:column="17"/></name> <modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type><name pos:line="1" pos:column="19">network_create_socket<pos:position pos:line="1" pos:column="40"/></name> <parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">node<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">service<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">int<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">listen<pos:position pos:line="3" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="28"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">addrinfo<pos:position pos:line="5" pos:column="24"/></name></name></type>  <name pos:line="5" pos:column="26">ai_hints<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">ai_list<pos:position pos:line="6" pos:column="33"/></name></decl>, <modifier pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="36">ai_ptr<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type>              <name pos:line="7" pos:column="26">ai_return<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">sockent_t<pos:position pos:line="9" pos:column="18"/></name> <modifier pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></modifier></type><name pos:line="9" pos:column="20">se_head<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><name pos:line="9" pos:column="30">NULL<pos:position pos:line="9" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">sockent_t<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">se_tail<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name pos:line="10" pos:column="30">NULL<pos:position pos:line="10" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">DEBUG<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="string" pos:line="12" pos:column="16">"node = %s, service = %s"<pos:position pos:line="12" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">node<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="49">service<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><operator pos:line="14" pos:column="17">&amp;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="18">ai_hints<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="28">'\0'<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="34">sizeof <argument_list pos:line="14" pos:column="41">(<argument><expr><name pos:line="14" pos:column="42">ai_hints<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">ai_hints<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">ai_flags<pos:position pos:line="15" pos:column="26"/></name></name>    <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">0<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">AI_PASSIVE<pos:position pos:line="16" pos:column="18"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">ai_hints<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">ai_flags<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">|=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">AI_PASSIVE<pos:position pos:line="17" pos:column="40"/></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="19" pos:column="21"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">ai_hints<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">ai_flags<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">|=<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">AI_ADDRCONFIG<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">ai_hints<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">.<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">ai_family<pos:position pos:line="22" pos:column="27"/></name></name>   <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">AF_UNSPEC<pos:position pos:line="22" pos:column="41"/></name></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">ai_hints<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">ai_socktype<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">SOCK_DGRAM<pos:position pos:line="23" pos:column="42"/></name></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">ai_hints<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">ai_protocol<pos:position pos:line="24" pos:column="29"/></name></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">IPPROTO_UDP<pos:position pos:line="24" pos:column="43"/></name></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="26" pos:column="9">ai_return<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <call><name pos:line="26" pos:column="21">getaddrinfo<pos:position pos:line="26" pos:column="32"/></name> <argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">node<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">service<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="49">&amp;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="50">ai_hints<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="60">&amp;<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="61">ai_list<pos:position pos:line="26" pos:column="68"/></name></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">ai_return<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">!=<pos:position pos:line="27" pos:column="25"/></operator> <literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28">
	<block pos:line="28" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">char<pos:position pos:line="29" pos:column="21"/></name></type> <name><name pos:line="29" pos:column="22">errbuf<pos:position pos:line="29" pos:column="28"/></name><index pos:line="29" pos:column="28">[<expr><literal type="number" pos:line="29" pos:column="29">1024<pos:position pos:line="29" pos:column="33"/></literal></expr>]<pos:position pos:line="29" pos:column="34"/></index></name></decl>;<pos:position pos:line="29" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">ERROR<pos:position pos:line="30" pos:column="22"/></name> <argument_list pos:line="30" pos:column="23">(<argument><expr><literal type="string" pos:line="30" pos:column="24">"getaddrinfo (%s, %s): %s"<pos:position pos:line="30" pos:column="50"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="31" pos:column="33">(<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">node<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">==<pos:position pos:line="31" pos:column="41"/></operator> <name pos:line="31" pos:column="42">NULL<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">)<pos:position pos:line="31" pos:column="47"/></operator></expr> ?<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49"> <expr><literal type="string" pos:line="31" pos:column="50">"(null)"<pos:position pos:line="31" pos:column="58"/></literal></expr> <pos:position pos:line="31" pos:column="59"/></then><else pos:line="31" pos:column="59">: <expr><name pos:line="31" pos:column="61">node<pos:position pos:line="31" pos:column="65"/></name></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="32" pos:column="33">(<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">service<pos:position pos:line="32" pos:column="41"/></name> <operator pos:line="32" pos:column="42">==<pos:position pos:line="32" pos:column="44"/></operator> <name pos:line="32" pos:column="45">NULL<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">)<pos:position pos:line="32" pos:column="50"/></operator></expr> ?<pos:position pos:line="32" pos:column="52"/></condition><then pos:line="32" pos:column="52"> <expr><literal type="string" pos:line="32" pos:column="53">"(null)"<pos:position pos:line="32" pos:column="61"/></literal></expr> <pos:position pos:line="32" pos:column="62"/></then><else pos:line="32" pos:column="62">: <expr><name pos:line="32" pos:column="64">service<pos:position pos:line="32" pos:column="71"/></name></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">ai_return<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">==<pos:position pos:line="33" pos:column="46"/></operator> <name pos:line="33" pos:column="47">EAI_SYSTEM<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">)<pos:position pos:line="33" pos:column="58"/></operator></expr>
				?<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <expr><call><name pos:line="34" pos:column="35">sstrerror<pos:position pos:line="34" pos:column="44"/></name> <argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">errno<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">errbuf<pos:position pos:line="34" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="61">sizeof <argument_list pos:line="34" pos:column="68">(<argument><expr><name pos:line="34" pos:column="69">errbuf<pos:position pos:line="34" pos:column="75"/></name></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>
				<pos:position pos:line="35" pos:column="5"/></then><else pos:line="35" pos:column="33">: <expr><call><name pos:line="35" pos:column="35">gai_strerror<pos:position pos:line="35" pos:column="47"/></name> <argument_list pos:line="35" pos:column="48">(<argument><expr><name pos:line="35" pos:column="49">ai_return<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="61"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><operator pos:line="36" pos:column="24">(<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="25">NULL<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">)<pos:position pos:line="36" pos:column="30"/></operator></expr>;<pos:position pos:line="36" pos:column="31"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<for pos:line="39" pos:column="9">for <control pos:line="39" pos:column="13">(<init><expr><name pos:line="39" pos:column="14">ai_ptr<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">ai_list<pos:position pos:line="39" pos:column="30"/></name></expr>;<pos:position pos:line="39" pos:column="31"/></init> <condition><expr><name pos:line="39" pos:column="32">ai_ptr<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">!=<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="42">NULL<pos:position pos:line="39" pos:column="46"/></name></expr>;<pos:position pos:line="39" pos:column="47"/></condition> <incr><expr><name pos:line="39" pos:column="48">ai_ptr<pos:position pos:line="39" pos:column="54"/></name> <operator pos:line="39" pos:column="55">=<pos:position pos:line="39" pos:column="56"/></operator> <name><name pos:line="39" pos:column="57">ai_ptr<pos:position pos:line="39" pos:column="63"/></name><operator pos:line="39" pos:column="63">-&gt;<pos:position pos:line="39" pos:column="68"/></operator><name pos:line="39" pos:column="65">ai_next<pos:position pos:line="39" pos:column="72"/></name></name></expr></incr>)<pos:position pos:line="39" pos:column="73"/></control>
	<block pos:line="40" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">sockent_t<pos:position pos:line="41" pos:column="26"/></name> <modifier pos:line="41" pos:column="27">*<pos:position pos:line="41" pos:column="28"/></modifier></type><name pos:line="41" pos:column="28">se<pos:position pos:line="41" pos:column="30"/></name></decl>;<pos:position pos:line="41" pos:column="31"/></decl_stmt>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">se<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <operator pos:line="43" pos:column="27">(<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">sockent_t<pos:position pos:line="43" pos:column="37"/></name> <operator pos:line="43" pos:column="38">*<pos:position pos:line="43" pos:column="39"/></operator><operator pos:line="43" pos:column="39">)<pos:position pos:line="43" pos:column="40"/></operator> <call><name pos:line="43" pos:column="41">malloc<pos:position pos:line="43" pos:column="47"/></name> <argument_list pos:line="43" pos:column="48">(<argument><expr><sizeof pos:line="43" pos:column="49">sizeof <argument_list pos:line="43" pos:column="56">(<argument><expr><name pos:line="43" pos:column="57">sockent_t<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call><operator pos:line="43" pos:column="68">)<pos:position pos:line="43" pos:column="69"/></operator> <operator pos:line="43" pos:column="70">==<pos:position pos:line="43" pos:column="72"/></operator> <name pos:line="43" pos:column="73">NULL<pos:position pos:line="43" pos:column="77"/></name></expr>)<pos:position pos:line="43" pos:column="78"/></condition><then pos:line="43" pos:column="78">
		<block pos:line="44" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">char<pos:position pos:line="45" pos:column="29"/></name></type> <name><name pos:line="45" pos:column="30">errbuf<pos:position pos:line="45" pos:column="36"/></name><index pos:line="45" pos:column="36">[<expr><literal type="number" pos:line="45" pos:column="37">1024<pos:position pos:line="45" pos:column="41"/></literal></expr>]<pos:position pos:line="45" pos:column="42"/></index></name></decl>;<pos:position pos:line="45" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">ERROR<pos:position pos:line="46" pos:column="30"/></name> <argument_list pos:line="46" pos:column="31">(<argument><expr><literal type="string" pos:line="46" pos:column="32">"malloc: %s"<pos:position pos:line="46" pos:column="44"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="47" pos:column="41">sstrerror<pos:position pos:line="47" pos:column="50"/></name> <argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">errno<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="59">errbuf<pos:position pos:line="47" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="48" pos:column="49">sizeof <argument_list pos:line="48" pos:column="56">(<argument><expr><name pos:line="48" pos:column="57">errbuf<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
			<continue pos:line="49" pos:column="25">continue;<pos:position pos:line="49" pos:column="34"/></continue>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>

		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">(<pos:position pos:line="52" pos:column="22"/></operator><name><name pos:line="52" pos:column="22">se<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">-&gt;<pos:position pos:line="52" pos:column="29"/></operator><name pos:line="52" pos:column="26">addr<pos:position pos:line="52" pos:column="30"/></name></name> <operator pos:line="52" pos:column="31">=<pos:position pos:line="52" pos:column="32"/></operator> <operator pos:line="52" pos:column="33">(<pos:position pos:line="52" pos:column="34"/></operator>struct <name pos:line="52" pos:column="41">sockaddr_storage<pos:position pos:line="52" pos:column="57"/></name> <operator pos:line="52" pos:column="58">*<pos:position pos:line="52" pos:column="59"/></operator><operator pos:line="52" pos:column="59">)<pos:position pos:line="52" pos:column="60"/></operator> <call><name pos:line="52" pos:column="61">malloc<pos:position pos:line="52" pos:column="67"/></name> <argument_list pos:line="52" pos:column="68">(<argument><expr><sizeof pos:line="52" pos:column="69">sizeof <argument_list pos:line="52" pos:column="76">(<argument><expr pos:line="52" pos:column="77">struct <name pos:line="52" pos:column="84">sockaddr_storage<pos:position pos:line="52" pos:column="100"/></name></expr></argument>)<pos:position pos:line="52" pos:column="101"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="102"/></argument_list></call><operator pos:line="52" pos:column="102">)<pos:position pos:line="52" pos:column="103"/></operator> <operator pos:line="52" pos:column="104">==<pos:position pos:line="52" pos:column="106"/></operator> <name pos:line="52" pos:column="107">NULL<pos:position pos:line="52" pos:column="111"/></name></expr>)<pos:position pos:line="52" pos:column="112"/></condition><then pos:line="52" pos:column="112">
		<block pos:line="53" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">char<pos:position pos:line="54" pos:column="29"/></name></type> <name><name pos:line="54" pos:column="30">errbuf<pos:position pos:line="54" pos:column="36"/></name><index pos:line="54" pos:column="36">[<expr><literal type="number" pos:line="54" pos:column="37">1024<pos:position pos:line="54" pos:column="41"/></literal></expr>]<pos:position pos:line="54" pos:column="42"/></index></name></decl>;<pos:position pos:line="54" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">ERROR<pos:position pos:line="55" pos:column="30"/></name> <argument_list pos:line="55" pos:column="31">(<argument><expr><literal type="string" pos:line="55" pos:column="32">"malloc: %s"<pos:position pos:line="55" pos:column="44"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="56" pos:column="41">sstrerror<pos:position pos:line="56" pos:column="50"/></name> <argument_list pos:line="56" pos:column="51">(<argument><expr><name pos:line="56" pos:column="52">errno<pos:position pos:line="56" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="59">errbuf<pos:position pos:line="56" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="57" pos:column="49">sizeof <argument_list pos:line="57" pos:column="56">(<argument><expr><name pos:line="57" pos:column="57">errbuf<pos:position pos:line="57" pos:column="63"/></name></expr></argument>)<pos:position pos:line="57" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">free<pos:position pos:line="58" pos:column="29"/></name> <argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">se<pos:position pos:line="58" pos:column="33"/></name></expr></argument>)<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
			<continue pos:line="59" pos:column="25">continue;<pos:position pos:line="59" pos:column="34"/></continue>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assert<pos:position pos:line="62" pos:column="23"/></name> <argument_list pos:line="62" pos:column="24">(<argument><expr><sizeof pos:line="62" pos:column="25">sizeof <argument_list pos:line="62" pos:column="32">(<argument><expr pos:line="62" pos:column="33">struct <name pos:line="62" pos:column="40">sockaddr_storage<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></sizeof> <operator pos:line="62" pos:column="58">&gt;=<pos:position pos:line="62" pos:column="63"/></operator> <name><name pos:line="62" pos:column="61">ai_ptr<pos:position pos:line="62" pos:column="67"/></name><operator pos:line="62" pos:column="67">-&gt;<pos:position pos:line="62" pos:column="72"/></operator><name pos:line="62" pos:column="69">ai_addrlen<pos:position pos:line="62" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">memset<pos:position pos:line="63" pos:column="23"/></name> <argument_list pos:line="63" pos:column="24">(<argument><expr><name><name pos:line="63" pos:column="25">se<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">addr<pos:position pos:line="63" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="63" pos:column="35">'\0'<pos:position pos:line="63" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="41">sizeof <argument_list pos:line="63" pos:column="48">(<argument><expr pos:line="63" pos:column="49">struct <name pos:line="63" pos:column="56">sockaddr_storage<pos:position pos:line="63" pos:column="72"/></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">memcpy<pos:position pos:line="64" pos:column="23"/></name> <argument_list pos:line="64" pos:column="24">(<argument><expr><name><name pos:line="64" pos:column="25">se<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">-&gt;<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="29">addr<pos:position pos:line="64" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="35">ai_ptr<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">-&gt;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="43">ai_addr<pos:position pos:line="64" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="52">ai_ptr<pos:position pos:line="64" pos:column="58"/></name><operator pos:line="64" pos:column="58">-&gt;<pos:position pos:line="64" pos:column="63"/></operator><name pos:line="64" pos:column="60">ai_addrlen<pos:position pos:line="64" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">se<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">-&gt;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="21">addrlen<pos:position pos:line="65" pos:column="28"/></name></name> <operator pos:line="65" pos:column="29">=<pos:position pos:line="65" pos:column="30"/></operator> <name><name pos:line="65" pos:column="31">ai_ptr<pos:position pos:line="65" pos:column="37"/></name><operator pos:line="65" pos:column="37">-&gt;<pos:position pos:line="65" pos:column="42"/></operator><name pos:line="65" pos:column="39">ai_addrlen<pos:position pos:line="65" pos:column="49"/></name></name></expr>;<pos:position pos:line="65" pos:column="50"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="67" pos:column="17">se<pos:position pos:line="67" pos:column="19"/></name><operator pos:line="67" pos:column="19">-&gt;<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="21">fd<pos:position pos:line="67" pos:column="23"/></name></name>   <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <call><name pos:line="67" pos:column="28">socket<pos:position pos:line="67" pos:column="34"/></name> <argument_list pos:line="67" pos:column="35">(<argument><expr><name><name pos:line="67" pos:column="36">ai_ptr<pos:position pos:line="67" pos:column="42"/></name><operator pos:line="67" pos:column="42">-&gt;<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="44">ai_family<pos:position pos:line="67" pos:column="53"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="68" pos:column="33">ai_ptr<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">-&gt;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="41">ai_socktype<pos:position pos:line="68" pos:column="52"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="69" pos:column="33">ai_ptr<pos:position pos:line="69" pos:column="39"/></name><operator pos:line="69" pos:column="39">-&gt;<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="41">ai_protocol<pos:position pos:line="69" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">se<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">-&gt;<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="21">next<pos:position pos:line="70" pos:column="25"/></name></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">NULL<pos:position pos:line="70" pos:column="32"/></name></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name><name pos:line="72" pos:column="21">se<pos:position pos:line="72" pos:column="23"/></name><operator pos:line="72" pos:column="23">-&gt;<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="25">fd<pos:position pos:line="72" pos:column="27"/></name></name> <operator pos:line="72" pos:column="28">==<pos:position pos:line="72" pos:column="30"/></operator> <operator pos:line="72" pos:column="31">-<pos:position pos:line="72" pos:column="32"/></operator><literal type="number" pos:line="72" pos:column="32">1<pos:position pos:line="72" pos:column="33"/></literal></expr>)<pos:position pos:line="72" pos:column="34"/></condition><then pos:line="72" pos:column="34">
		<block pos:line="73" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">char<pos:position pos:line="74" pos:column="29"/></name></type> <name><name pos:line="74" pos:column="30">errbuf<pos:position pos:line="74" pos:column="36"/></name><index pos:line="74" pos:column="36">[<expr><literal type="number" pos:line="74" pos:column="37">1024<pos:position pos:line="74" pos:column="41"/></literal></expr>]<pos:position pos:line="74" pos:column="42"/></index></name></decl>;<pos:position pos:line="74" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">ERROR<pos:position pos:line="75" pos:column="30"/></name> <argument_list pos:line="75" pos:column="31">(<argument><expr><literal type="string" pos:line="75" pos:column="32">"socket: %s"<pos:position pos:line="75" pos:column="44"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="76" pos:column="41">sstrerror<pos:position pos:line="76" pos:column="50"/></name> <argument_list pos:line="76" pos:column="51">(<argument><expr><name pos:line="76" pos:column="52">errno<pos:position pos:line="76" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="59">errbuf<pos:position pos:line="76" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="77" pos:column="49">sizeof <argument_list pos:line="77" pos:column="56">(<argument><expr><name pos:line="77" pos:column="57">errbuf<pos:position pos:line="77" pos:column="63"/></name></expr></argument>)<pos:position pos:line="77" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">free<pos:position pos:line="78" pos:column="29"/></name> <argument_list pos:line="78" pos:column="30">(<argument><expr><name><name pos:line="78" pos:column="31">se<pos:position pos:line="78" pos:column="33"/></name><operator pos:line="78" pos:column="33">-&gt;<pos:position pos:line="78" pos:column="38"/></operator><name pos:line="78" pos:column="35">addr<pos:position pos:line="78" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="79" pos:column="25">free<pos:position pos:line="79" pos:column="29"/></name> <argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">se<pos:position pos:line="79" pos:column="33"/></name></expr></argument>)<pos:position pos:line="79" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="35"/></expr_stmt>
			<continue pos:line="80" pos:column="25">continue;<pos:position pos:line="80" pos:column="34"/></continue>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if>

		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">listen<pos:position pos:line="83" pos:column="27"/></name> <operator pos:line="83" pos:column="28">!=<pos:position pos:line="83" pos:column="30"/></operator> <literal type="number" pos:line="83" pos:column="31">0<pos:position pos:line="83" pos:column="32"/></literal></expr>)<pos:position pos:line="83" pos:column="33"/></condition><then pos:line="83" pos:column="33">
		<block pos:line="84" pos:column="17">{
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><call><name pos:line="85" pos:column="29">network_bind_socket<pos:position pos:line="85" pos:column="48"/></name> <argument_list pos:line="85" pos:column="49">(<argument><expr><name pos:line="85" pos:column="50">se<pos:position pos:line="85" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="54">ai_ptr<pos:position pos:line="85" pos:column="60"/></name></expr></argument>)<pos:position pos:line="85" pos:column="61"/></argument_list></call> <operator pos:line="85" pos:column="62">!=<pos:position pos:line="85" pos:column="64"/></operator> <literal type="number" pos:line="85" pos:column="65">0<pos:position pos:line="85" pos:column="66"/></literal></expr>)<pos:position pos:line="85" pos:column="67"/></condition><then pos:line="85" pos:column="67">
			<block pos:line="86" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">close<pos:position pos:line="87" pos:column="38"/></name> <argument_list pos:line="87" pos:column="39">(<argument><expr><name><name pos:line="87" pos:column="40">se<pos:position pos:line="87" pos:column="42"/></name><operator pos:line="87" pos:column="42">-&gt;<pos:position pos:line="87" pos:column="47"/></operator><name pos:line="87" pos:column="44">fd<pos:position pos:line="87" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">free<pos:position pos:line="88" pos:column="37"/></name> <argument_list pos:line="88" pos:column="38">(<argument><expr><name><name pos:line="88" pos:column="39">se<pos:position pos:line="88" pos:column="41"/></name><operator pos:line="88" pos:column="41">-&gt;<pos:position pos:line="88" pos:column="46"/></operator><name pos:line="88" pos:column="43">addr<pos:position pos:line="88" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">free<pos:position pos:line="89" pos:column="37"/></name> <argument_list pos:line="89" pos:column="38">(<argument><expr><name pos:line="89" pos:column="39">se<pos:position pos:line="89" pos:column="41"/></name></expr></argument>)<pos:position pos:line="89" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="43"/></expr_stmt>
				<continue pos:line="90" pos:column="33">continue;<pos:position pos:line="90" pos:column="42"/></continue>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>
		}<pos:position pos:line="92" pos:column="18"/></block></then>
		<else pos:line="93" pos:column="17">else <comment type="block" pos:line="93" pos:column="22">/* listen == 0 */</comment>
		<block pos:line="94" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">network_set_ttl<pos:position pos:line="95" pos:column="40"/></name> <argument_list pos:line="95" pos:column="41">(<argument><expr><name pos:line="95" pos:column="42">se<pos:position pos:line="95" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="46">ai_ptr<pos:position pos:line="95" pos:column="52"/></name></expr></argument>)<pos:position pos:line="95" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="96" pos:column="18"/></block></else></if>

		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><name pos:line="98" pos:column="21">se_tail<pos:position pos:line="98" pos:column="28"/></name> <operator pos:line="98" pos:column="29">==<pos:position pos:line="98" pos:column="31"/></operator> <name pos:line="98" pos:column="32">NULL<pos:position pos:line="98" pos:column="36"/></name></expr>)<pos:position pos:line="98" pos:column="37"/></condition><then pos:line="98" pos:column="37">
		<block pos:line="99" pos:column="17">{
			<expr_stmt><expr><name pos:line="100" pos:column="25">se_head<pos:position pos:line="100" pos:column="32"/></name> <operator pos:line="100" pos:column="33">=<pos:position pos:line="100" pos:column="34"/></operator> <name pos:line="100" pos:column="35">se<pos:position pos:line="100" pos:column="37"/></name></expr>;<pos:position pos:line="100" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">se_tail<pos:position pos:line="101" pos:column="32"/></name> <operator pos:line="101" pos:column="33">=<pos:position pos:line="101" pos:column="34"/></operator> <name pos:line="101" pos:column="35">se<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="102" pos:column="18"/></block></then>
		<else pos:line="103" pos:column="17">else
		<block pos:line="104" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">se_tail<pos:position pos:line="105" pos:column="32"/></name><operator pos:line="105" pos:column="32">-&gt;<pos:position pos:line="105" pos:column="37"/></operator><name pos:line="105" pos:column="34">next<pos:position pos:line="105" pos:column="38"/></name></name> <operator pos:line="105" pos:column="39">=<pos:position pos:line="105" pos:column="40"/></operator> <name pos:line="105" pos:column="41">se<pos:position pos:line="105" pos:column="43"/></name></expr>;<pos:position pos:line="105" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">se_tail<pos:position pos:line="106" pos:column="32"/></name> <operator pos:line="106" pos:column="33">=<pos:position pos:line="106" pos:column="34"/></operator> <name pos:line="106" pos:column="35">se<pos:position pos:line="106" pos:column="37"/></name></expr>;<pos:position pos:line="106" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="107" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="109" pos:column="17">/* We don't open more than one write-socket per node/service pair.. */</comment>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">listen<pos:position pos:line="110" pos:column="27"/></name> <operator pos:line="110" pos:column="28">==<pos:position pos:line="110" pos:column="30"/></operator> <literal type="number" pos:line="110" pos:column="31">0<pos:position pos:line="110" pos:column="32"/></literal></expr>)<pos:position pos:line="110" pos:column="33"/></condition><then pos:line="110" pos:column="33">
			<block type="pseudo"><break pos:line="111" pos:column="25">break;<pos:position pos:line="111" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="112" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="114" pos:column="9">freeaddrinfo<pos:position pos:line="114" pos:column="21"/></name> <argument_list pos:line="114" pos:column="22">(<argument><expr><name pos:line="114" pos:column="23">ai_list<pos:position pos:line="114" pos:column="30"/></name></expr></argument>)<pos:position pos:line="114" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="32"/></expr_stmt>

	<return pos:line="116" pos:column="9">return <expr><operator pos:line="116" pos:column="16">(<pos:position pos:line="116" pos:column="17"/></operator><name pos:line="116" pos:column="17">se_head<pos:position pos:line="116" pos:column="24"/></name><operator pos:line="116" pos:column="24">)<pos:position pos:line="116" pos:column="25"/></operator></expr>;<pos:position pos:line="116" pos:column="26"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
