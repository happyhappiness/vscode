<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_565_collectd-4.3.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">daemonize<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">rlimit<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">rl<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">pid_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">pid<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type>   <name pos:line="6" pos:column="15">i<pos:position pos:line="6" pos:column="16"/></name>   <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><literal type="number" pos:line="8" pos:column="13">0<pos:position pos:line="8" pos:column="14"/></literal> <operator pos:line="8" pos:column="15">!=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">chdir<pos:position pos:line="8" pos:column="23"/></name> <argument_list pos:line="8" pos:column="24">(<argument><expr><literal type="string" pos:line="8" pos:column="25">"/"<pos:position pos:line="8" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30"> <block pos:line="8" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">fprintf<pos:position pos:line="9" pos:column="24"/></name> <argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">stderr<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"Error: chdir() failed: %s\n"<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="65">strerror<pos:position pos:line="9" pos:column="73"/></name> <argument_list pos:line="9" pos:column="74">(<argument><expr><name pos:line="9" pos:column="75">errno<pos:position pos:line="9" pos:column="80"/></name></expr></argument>)<pos:position pos:line="9" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="83"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal> <operator pos:line="13" pos:column="15">!=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">getrlimit<pos:position pos:line="13" pos:column="27"/></name> <argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">RLIMIT_NOFILE<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="44">&amp;<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="45">rl<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49"> <block pos:line="13" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">fprintf<pos:position pos:line="14" pos:column="24"/></name> <argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">stderr<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"Error: getrlimit() failed: %s\n"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="69">strerror<pos:position pos:line="14" pos:column="77"/></name> <argument_list pos:line="14" pos:column="78">(<argument><expr><name pos:line="14" pos:column="79">errno<pos:position pos:line="14" pos:column="84"/></name></expr></argument>)<pos:position pos:line="14" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="87"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal> <operator pos:line="18" pos:column="15">&gt;<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="17">(<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">pid<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">fork<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">()<pos:position pos:line="18" pos:column="31"/></argument_list></call><operator pos:line="18" pos:column="31">)<pos:position pos:line="18" pos:column="32"/></operator></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">fprintf<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">stderr<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"Error: fork() failed: %s\n"<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="64">strerror<pos:position pos:line="19" pos:column="72"/></name> <argument_list pos:line="19" pos:column="73">(<argument><expr><name pos:line="19" pos:column="74">errno<pos:position pos:line="19" pos:column="79"/></name></expr></argument>)<pos:position pos:line="19" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="82"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">-<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">1<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then>
	<elseif pos:line="22" pos:column="9">else <if pos:line="22" pos:column="14">if <condition pos:line="22" pos:column="17">(<expr><name pos:line="22" pos:column="18">pid<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="25">0<pos:position pos:line="22" pos:column="26"/></literal></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">exit<pos:position pos:line="23" pos:column="21"/></name> <argument_list pos:line="23" pos:column="22">(<argument><expr><literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><literal type="number" pos:line="26" pos:column="13">0<pos:position pos:line="26" pos:column="14"/></literal> <operator pos:line="26" pos:column="15">!=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">pidfile_create<pos:position pos:line="26" pos:column="32"/></name> <argument_list pos:line="26" pos:column="33">()<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><operator pos:line="27" pos:column="24">-<pos:position pos:line="27" pos:column="25"/></operator><literal type="number" pos:line="27" pos:column="25">1<pos:position pos:line="27" pos:column="26"/></literal></expr>;<pos:position pos:line="27" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">setsid<pos:position pos:line="29" pos:column="15"/></name> <argument_list pos:line="29" pos:column="16">()<pos:position pos:line="29" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">RLIM_INFINITY<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <name><name pos:line="31" pos:column="30">rl<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">.<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">rlim_max<pos:position pos:line="31" pos:column="41"/></name></name></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="17">rl<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">.<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">rlim_max<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="31">1024<pos:position pos:line="32" pos:column="35"/></literal></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt></block></then></if>

	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">i<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></init> <condition><expr><name pos:line="34" pos:column="21">i<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&lt;<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="25">(<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">int<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">)<pos:position pos:line="34" pos:column="30"/></operator><name><name pos:line="34" pos:column="30">rl<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">.<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">rlim_max<pos:position pos:line="34" pos:column="41"/></name></name></expr>;<pos:position pos:line="34" pos:column="42"/></condition> <incr><expr><operator pos:line="34" pos:column="43">++<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="45">i<pos:position pos:line="34" pos:column="46"/></name></expr></incr>)<pos:position pos:line="34" pos:column="47"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">close<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">i<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt></block></for>

	<expr_stmt><expr><name pos:line="37" pos:column="9">errno<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">open<pos:position pos:line="38" pos:column="17"/></name> <argument_list pos:line="38" pos:column="18">(<argument><expr><literal type="string" pos:line="38" pos:column="19">"/dev/null"<pos:position pos:line="38" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">O_RDWR<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call> <operator pos:line="38" pos:column="40">!=<pos:position pos:line="38" pos:column="42"/></operator> <literal type="number" pos:line="38" pos:column="43">0<pos:position pos:line="38" pos:column="44"/></literal></expr>)<pos:position pos:line="38" pos:column="45"/></condition><then pos:line="38" pos:column="45"> <block pos:line="38" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">syslog<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">LOG_ERR<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="34">"Error: couldn't connect STDIN to /dev/null: %s"<pos:position pos:line="39" pos:column="82"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="40" pos:column="33">strerror<pos:position pos:line="40" pos:column="41"/></name> <argument_list pos:line="40" pos:column="42">(<argument><expr><name pos:line="40" pos:column="43">errno<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><operator pos:line="41" pos:column="24">-<pos:position pos:line="41" pos:column="25"/></operator><literal type="number" pos:line="41" pos:column="25">1<pos:position pos:line="41" pos:column="26"/></literal></expr>;<pos:position pos:line="41" pos:column="27"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="44" pos:column="9">errno<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <literal type="number" pos:line="44" pos:column="17">0<pos:position pos:line="44" pos:column="18"/></literal></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">dup<pos:position pos:line="45" pos:column="16"/></name> <argument_list pos:line="45" pos:column="17">(<argument><expr><literal type="number" pos:line="45" pos:column="18">0<pos:position pos:line="45" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="20"/></argument_list></call> <operator pos:line="45" pos:column="21">!=<pos:position pos:line="45" pos:column="23"/></operator> <literal type="number" pos:line="45" pos:column="24">1<pos:position pos:line="45" pos:column="25"/></literal></expr>)<pos:position pos:line="45" pos:column="26"/></condition><then pos:line="45" pos:column="26"> <block pos:line="45" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">syslog<pos:position pos:line="46" pos:column="23"/></name> <argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">LOG_ERR<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="34">"Error: couldn't connect STDOUT to /dev/null: %s"<pos:position pos:line="46" pos:column="83"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="47" pos:column="33">strerror<pos:position pos:line="47" pos:column="41"/></name> <argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">errno<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><operator pos:line="48" pos:column="24">-<pos:position pos:line="48" pos:column="25"/></operator><literal type="number" pos:line="48" pos:column="25">1<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="51" pos:column="9">errno<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <literal type="number" pos:line="51" pos:column="17">0<pos:position pos:line="51" pos:column="18"/></literal></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">dup<pos:position pos:line="52" pos:column="16"/></name> <argument_list pos:line="52" pos:column="17">(<argument><expr><literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="20"/></argument_list></call> <operator pos:line="52" pos:column="21">!=<pos:position pos:line="52" pos:column="23"/></operator> <literal type="number" pos:line="52" pos:column="24">2<pos:position pos:line="52" pos:column="25"/></literal></expr>)<pos:position pos:line="52" pos:column="26"/></condition><then pos:line="52" pos:column="26"> <block pos:line="52" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">syslog<pos:position pos:line="53" pos:column="23"/></name> <argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">LOG_ERR<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="34">"Error: couldn't connect STDERR to /dev/null: %s"<pos:position pos:line="53" pos:column="83"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="54" pos:column="33">strerror<pos:position pos:line="54" pos:column="41"/></name> <argument_list pos:line="54" pos:column="42">(<argument><expr><name pos:line="54" pos:column="43">errno<pos:position pos:line="54" pos:column="48"/></name></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="51"/></expr_stmt>
		<return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>
	<return pos:line="57" pos:column="9">return <expr><literal type="number" pos:line="57" pos:column="16">0<pos:position pos:line="57" pos:column="17"/></literal></expr>;<pos:position pos:line="57" pos:column="18"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
