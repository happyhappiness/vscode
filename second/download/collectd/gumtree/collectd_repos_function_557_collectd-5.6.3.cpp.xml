<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_557_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">BMP085_detect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <block pos:line="1" pos:column="32">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">__s32<pos:position pos:line="2" pos:column="8"/></name></type> <name pos:line="2" pos:column="9">res<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">errbuf<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">1024<pos:position pos:line="3" pos:column="19"/></literal></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">ioctl<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">i2c_bus_fd<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="25">I2C_SLAVE_FORCE<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="42">BMP085_I2C_ADDRESS<pos:position pos:line="5" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></call> <operator pos:line="5" pos:column="62">&lt;<pos:position pos:line="5" pos:column="66"/></operator> <literal type="number" pos:line="5" pos:column="64">0<pos:position pos:line="5" pos:column="65"/></literal></expr>)<pos:position pos:line="5" pos:column="66"/></condition><then pos:line="5" pos:column="66"> <block pos:line="5" pos:column="67">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">ERROR<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><literal type="string" pos:line="6" pos:column="11">"barometer: BMP085_detect - problem setting i2c slave address to "<pos:position pos:line="6" pos:column="77"/></literal>
          <literal type="string" pos:line="7" pos:column="11">"0x%02X: %s"<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>,
          <argument><expr><name pos:line="8" pos:column="11">BMP085_I2C_ADDRESS<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="31">sstrerror<pos:position pos:line="8" pos:column="40"/></name><argument_list pos:line="8" pos:column="40">(<argument><expr><name pos:line="8" pos:column="41">errno<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="48">errbuf<pos:position pos:line="8" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="56">sizeof<argument_list pos:line="8" pos:column="62">(<argument><expr><name pos:line="8" pos:column="63">errbuf<pos:position pos:line="8" pos:column="69"/></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">res<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">i2c_smbus_read_byte_data<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">i2c_bus_fd<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">BMP085_ADDR_ID_REG<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">res<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <name pos:line="13" pos:column="14">BMP085_CHIP_ID<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <block pos:line="13" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">DEBUG<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"barometer: BMP085_detect - positive detection"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* get version */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">res<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <call><name pos:line="17" pos:column="11">i2c_smbus_read_byte_data<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">i2c_bus_fd<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">BMP085_ADDR_VERSION<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">res<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">&lt;<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="15">0<pos:position pos:line="18" pos:column="16"/></literal></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">ERROR<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="string" pos:line="19" pos:column="13">"barometer: BMP085_detect - problem checking chip version: %s"<pos:position pos:line="19" pos:column="75"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="20" pos:column="13">sstrerror<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">errno<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">errbuf<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="38">sizeof<argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">errbuf<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">DEBUG<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><literal type="string" pos:line="23" pos:column="11">"barometer: BMP085_detect - chip version ML:0x%02X AL:0x%02X"<pos:position pos:line="23" pos:column="72"/></literal></expr></argument>,
          <argument><expr><name pos:line="24" pos:column="11">res<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">&amp;<pos:position pos:line="24" pos:column="20"/></operator> <literal type="number" pos:line="24" pos:column="17">0x0f<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="23">(<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">res<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">&amp;<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="30">0xf0<pos:position pos:line="24" pos:column="34"/></literal><operator pos:line="24" pos:column="34">)<pos:position pos:line="24" pos:column="35"/></operator> <operator pos:line="24" pos:column="36">&gt;&gt;<pos:position pos:line="24" pos:column="41"/></operator> <literal type="number" pos:line="24" pos:column="39">4<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><literal type="number" pos:line="25" pos:column="12">1<pos:position pos:line="25" pos:column="13"/></literal></expr>;<pos:position pos:line="25" pos:column="14"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">DEBUG<pos:position pos:line="28" pos:column="8"/></name><argument_list pos:line="28" pos:column="8">(<argument><expr><literal type="string" pos:line="28" pos:column="9">"barometer: BMP085_detect - negative detection"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">0<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
