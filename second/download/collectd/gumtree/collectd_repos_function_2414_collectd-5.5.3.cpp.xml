<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2414_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">log_list_callbacks<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">llist_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">list<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
				<parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">comment<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">str<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">llentry_t<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">le<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">n<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier><modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">keys<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">n<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <call><name pos:line="11" pos:column="13">llist_size<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">list<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">n<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">==<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">INFO<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><literal type="string" pos:line="14" pos:column="22">"%s [none]"<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">comment<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
		<return pos:line="15" pos:column="17">return;<pos:position pos:line="15" pos:column="24"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">keys<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">calloc<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">n<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">char<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">*<pos:position pos:line="18" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">keys<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">==<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">NULL<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26">
	<block pos:line="21" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">ERROR<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><literal type="string" pos:line="22" pos:column="23">"%s: failed to allocate memory for list of callbacks"<pos:position pos:line="22" pos:column="76"/></literal></expr></argument>,
		      <argument><expr><name pos:line="23" pos:column="23">comment<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>

		<return pos:line="25" pos:column="17">return;<pos:position pos:line="25" pos:column="24"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">le<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">llist_head<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><operator pos:line="28" pos:column="31">*<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">list<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr><operator pos:line="28" pos:column="37">,<pos:position pos:line="28" pos:column="38"/></operator> <expr><name pos:line="28" pos:column="39">i<pos:position pos:line="28" pos:column="40"/></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">0<pos:position pos:line="28" pos:column="44"/></literal></expr><operator pos:line="28" pos:column="44">,<pos:position pos:line="28" pos:column="45"/></operator> <expr><name pos:line="28" pos:column="46">len<pos:position pos:line="28" pos:column="49"/></name> <operator pos:line="28" pos:column="50">=<pos:position pos:line="28" pos:column="51"/></operator> <literal type="number" pos:line="28" pos:column="52">0<pos:position pos:line="28" pos:column="53"/></literal></expr>;<pos:position pos:line="28" pos:column="54"/></init>
	     <condition><expr><name pos:line="29" pos:column="14">le<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">!=<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">NULL<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></condition>
	     <incr><expr><name pos:line="30" pos:column="14">le<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <name><name pos:line="30" pos:column="19">le<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">next<pos:position pos:line="30" pos:column="27"/></name></name></expr><operator pos:line="30" pos:column="27">,<pos:position pos:line="30" pos:column="28"/></operator> <expr><name pos:line="30" pos:column="29">i<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">++<pos:position pos:line="30" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="33"/></control>
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">keys<pos:position pos:line="32" pos:column="21"/></name><index pos:line="32" pos:column="21">[<expr><name pos:line="32" pos:column="22">i<pos:position pos:line="32" pos:column="23"/></name></expr>]<pos:position pos:line="32" pos:column="24"/></index></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name><name pos:line="32" pos:column="27">le<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">key<pos:position pos:line="32" pos:column="34"/></name></name></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">len<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">+=<pos:position pos:line="33" pos:column="23"/></operator> <call><name pos:line="33" pos:column="24">strlen<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name><name pos:line="33" pos:column="31">le<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">-&gt;<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="35">key<pos:position pos:line="33" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call> <operator pos:line="33" pos:column="40">+<pos:position pos:line="33" pos:column="41"/></operator> <literal type="number" pos:line="33" pos:column="42">6<pos:position pos:line="33" pos:column="43"/></literal></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="35" pos:column="9">str<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">malloc<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">len<pos:position pos:line="35" pos:column="25"/></name> <operator pos:line="35" pos:column="26">+<pos:position pos:line="35" pos:column="27"/></operator> <literal type="number" pos:line="35" pos:column="28">10<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">str<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">==<pos:position pos:line="36" pos:column="19"/></operator> <name pos:line="36" pos:column="20">NULL<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25">
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">ERROR<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><literal type="string" pos:line="38" pos:column="23">"%s: failed to allocate memory for list of callbacks"<pos:position pos:line="38" pos:column="76"/></literal></expr></argument>,
		      <argument><expr><name pos:line="39" pos:column="23">comment<pos:position pos:line="39" pos:column="30"/></name></expr></argument>)<pos:position pos:line="39" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then>
	<else pos:line="41" pos:column="9">else
	<block pos:line="42" pos:column="9">{
		<expr_stmt><expr><operator pos:line="43" pos:column="17">*<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">str<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="char" pos:line="43" pos:column="24">'\0'<pos:position pos:line="43" pos:column="28"/></literal></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">strjoin<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">str<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="30">len<pos:position pos:line="44" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="35">keys<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">n<pos:position pos:line="44" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="44">"', '"<pos:position pos:line="44" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">INFO<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><literal type="string" pos:line="45" pos:column="22">"%s ['%s']"<pos:position pos:line="45" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="35">comment<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">str<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">free<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">str<pos:position pos:line="46" pos:column="25"/></name></expr></argument>)<pos:position pos:line="46" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">free<pos:position pos:line="48" pos:column="13"/></name><argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">keys<pos:position pos:line="48" pos:column="18"/></name></expr></argument>)<pos:position pos:line="48" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="20"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
