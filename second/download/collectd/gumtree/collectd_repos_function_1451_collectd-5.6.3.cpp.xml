<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1451_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">tbl_config_append_array_i<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">name<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier><modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">var<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">size_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">len<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">oconfig_item_t<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">ci<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list> <block pos:line="2" pos:column="58">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">tmp<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">num<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><literal type="number" pos:line="6" pos:column="7">1<pos:position pos:line="6" pos:column="8"/></literal> <operator pos:line="6" pos:column="9">&gt;<pos:position pos:line="6" pos:column="13"/></operator> <name><name pos:line="6" pos:column="11">ci<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">values_num<pos:position pos:line="6" pos:column="25"/></name></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">log_err<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"\"%s\" expects at least one argument."<pos:position pos:line="7" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="54">name<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">1<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">num<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">size_t<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">)<pos:position pos:line="11" pos:column="17"/></operator><name><name pos:line="11" pos:column="17">ci<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">values_num<pos:position pos:line="11" pos:column="31"/></name></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">size_t<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">i<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></init> <condition><expr><name pos:line="12" pos:column="22">i<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="26">num<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></condition> <incr><expr><operator pos:line="12" pos:column="31">++<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">i<pos:position pos:line="12" pos:column="34"/></name></expr></incr>)<pos:position pos:line="12" pos:column="35"/></control> <block pos:line="12" pos:column="36">{
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">OCONFIG_TYPE_NUMBER<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">!=<pos:position pos:line="13" pos:column="31"/></operator> <name><name pos:line="13" pos:column="32">ci<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">values<pos:position pos:line="13" pos:column="42"/></name><index pos:line="13" pos:column="42">[<expr><name pos:line="13" pos:column="43">i<pos:position pos:line="13" pos:column="44"/></name></expr>]<pos:position pos:line="13" pos:column="45"/></index></name><operator pos:line="13" pos:column="45">.<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">type<pos:position pos:line="13" pos:column="50"/></name></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51"> <block pos:line="13" pos:column="52">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">log_err<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><literal type="string" pos:line="14" pos:column="15">"\"%s\" expects numerical arguments only."<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="59">name<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal></expr>;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
  }<pos:position pos:line="17" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="19" pos:column="3">tmp<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">realloc<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">var<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">len<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">)<pos:position pos:line="19" pos:column="30"/></operator> <operator pos:line="19" pos:column="31">+<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">num<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator> <operator pos:line="19" pos:column="38">*<pos:position pos:line="19" pos:column="39"/></operator> <sizeof pos:line="19" pos:column="40">sizeof<argument_list pos:line="19" pos:column="46">(<argument><expr><operator pos:line="19" pos:column="47">*<pos:position pos:line="19" pos:column="48"/></operator><operator pos:line="19" pos:column="48">*<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">var<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">NULL<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">==<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">tmp<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <block pos:line="20" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name><name pos:line="21" pos:column="10">errbuf<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><literal type="number" pos:line="21" pos:column="17">1024<pos:position pos:line="21" pos:column="21"/></literal></expr>]<pos:position pos:line="21" pos:column="22"/></index></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">log_err<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><literal type="string" pos:line="22" pos:column="13">"realloc failed: %s."<pos:position pos:line="22" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="36">sstrerror<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">errno<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">errbuf<pos:position pos:line="22" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="61">sizeof<argument_list pos:line="22" pos:column="67">(<argument><expr><name pos:line="22" pos:column="68">errbuf<pos:position pos:line="22" pos:column="74"/></name></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="78"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">-<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">1<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="25" pos:column="3">*<pos:position pos:line="25" pos:column="4"/></operator><name pos:line="25" pos:column="4">var<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <name pos:line="25" pos:column="10">tmp<pos:position pos:line="25" pos:column="13"/></name></expr>;<pos:position pos:line="25" pos:column="14"/></expr_stmt>

  <for pos:line="27" pos:column="3">for <control pos:line="27" pos:column="7">(<init><decl><type><name pos:line="27" pos:column="8">size_t<pos:position pos:line="27" pos:column="14"/></name></type> <name pos:line="27" pos:column="15">i<pos:position pos:line="27" pos:column="16"/></name> <init pos:line="27" pos:column="17">= <expr><literal type="number" pos:line="27" pos:column="19">0<pos:position pos:line="27" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="21"/></init> <condition><expr><name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">&lt;<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="26">num<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></condition> <incr><expr><operator pos:line="27" pos:column="31">++<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">i<pos:position pos:line="27" pos:column="34"/></name></expr></incr>)<pos:position pos:line="27" pos:column="35"/></control> <block pos:line="27" pos:column="36">{
    <expr_stmt><expr><operator pos:line="28" pos:column="5">(<pos:position pos:line="28" pos:column="6"/></operator><operator pos:line="28" pos:column="6">*<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">var<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">)<pos:position pos:line="28" pos:column="11"/></operator><index pos:line="28" pos:column="11">[<expr><operator pos:line="28" pos:column="12">*<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">len<pos:position pos:line="28" pos:column="16"/></name></expr>]<pos:position pos:line="28" pos:column="17"/></index> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <operator pos:line="28" pos:column="20">(<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">size_t<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator><name><name pos:line="28" pos:column="28">ci<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">values<pos:position pos:line="28" pos:column="38"/></name><index pos:line="28" pos:column="38">[<expr><name pos:line="28" pos:column="39">i<pos:position pos:line="28" pos:column="40"/></name></expr>]<pos:position pos:line="28" pos:column="41"/></index></name><operator pos:line="28" pos:column="41">.<pos:position pos:line="28" pos:column="42"/></operator><name><name pos:line="28" pos:column="42">value<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">.<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">number<pos:position pos:line="28" pos:column="54"/></name></name></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="29" pos:column="5">(<pos:position pos:line="29" pos:column="6"/></operator><operator pos:line="29" pos:column="6">*<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">len<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">)<pos:position pos:line="29" pos:column="11"/></operator><operator pos:line="29" pos:column="11">++<pos:position pos:line="29" pos:column="13"/></operator></expr>;<pos:position pos:line="29" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></for>

  <return pos:line="32" pos:column="3">return <expr><literal type="number" pos:line="32" pos:column="10">0<pos:position pos:line="32" pos:column="11"/></literal></expr>;<pos:position pos:line="32" pos:column="12"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
