<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1940_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_init_buffer<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <block pos:line="1" pos:column="39">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">memset<pos:position pos:line="2" pos:column="9"/></name><argument_list pos:line="2" pos:column="9">(<argument><expr><name pos:line="2" pos:column="10">send_buffer<pos:position pos:line="2" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2" pos:column="23">0<pos:position pos:line="2" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="2" pos:column="26">network_config_packet_size<pos:position pos:line="2" pos:column="52"/></name></expr></argument>)<pos:position pos:line="2" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3" pos:column="3">send_buffer_ptr<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">=<pos:position pos:line="3" pos:column="20"/></operator> <name pos:line="3" pos:column="21">send_buffer<pos:position pos:line="3" pos:column="32"/></name></expr>;<pos:position pos:line="3" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4" pos:column="3">send_buffer_fill<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">=<pos:position pos:line="4" pos:column="21"/></operator> <literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5" pos:column="3">send_buffer_last_update<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">=<pos:position pos:line="5" pos:column="28"/></operator> <literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">memset<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><operator pos:line="7" pos:column="10">&amp;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="11">send_buffer_vl<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="30">sizeof<argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">send_buffer_vl<pos:position pos:line="7" pos:column="51"/></name></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="54"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
