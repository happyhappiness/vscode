<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_474_collectd-4.7.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_value<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">value<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">value_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">ret_value<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">data_source_t<pos:position pos:line="1" pos:column="76"/></name></type> <name pos:line="1" pos:column="77">ds<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">endptr<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">DS_TYPE_COUNTER<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">==<pos:position pos:line="5" pos:column="31"/></operator> <name><name pos:line="5" pos:column="32">ds<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">.<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">type<pos:position pos:line="5" pos:column="39"/></name></name></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="6" pos:column="17">ret_value<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">counter<pos:position pos:line="6" pos:column="35"/></name></name> <operator pos:line="6" pos:column="36">=<pos:position pos:line="6" pos:column="37"/></operator> <operator pos:line="6" pos:column="38">(<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="39">counter_t<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">)<pos:position pos:line="6" pos:column="49"/></operator><call><name pos:line="6" pos:column="49">strtoll<pos:position pos:line="6" pos:column="56"/></name> <argument_list pos:line="6" pos:column="57">(<argument><expr><name pos:line="6" pos:column="58">value<pos:position pos:line="6" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="65">&amp;<pos:position pos:line="6" pos:column="70"/></operator><name pos:line="6" pos:column="66">endptr<pos:position pos:line="6" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="74">0<pos:position pos:line="6" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="77"/></expr_stmt></block></then>
	<elseif pos:line="7" pos:column="9">else <if pos:line="7" pos:column="14">if <condition pos:line="7" pos:column="17">(<expr><name pos:line="7" pos:column="18">DS_TYPE_GAUGE<pos:position pos:line="7" pos:column="31"/></name> <operator pos:line="7" pos:column="32">==<pos:position pos:line="7" pos:column="34"/></operator> <name><name pos:line="7" pos:column="35">ds<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">type<pos:position pos:line="7" pos:column="42"/></name></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="8" pos:column="17">ret_value<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">gauge<pos:position pos:line="8" pos:column="33"/></name></name> <operator pos:line="8" pos:column="34">=<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="36">(<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="37">gauge_t<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">)<pos:position pos:line="8" pos:column="45"/></operator><call><name pos:line="8" pos:column="45">strtod<pos:position pos:line="8" pos:column="51"/></name> <argument_list pos:line="8" pos:column="52">(<argument><expr><name pos:line="8" pos:column="53">value<pos:position pos:line="8" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="60">&amp;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="61">endptr<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt></block></then></if></elseif>
	<else pos:line="9" pos:column="9">else <block pos:line="9" pos:column="14">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">ERROR<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"parse_value: Invalid data source \"%s\" "<pos:position pos:line="10" pos:column="66"/></literal>
				<literal type="string" pos:line="11" pos:column="33">"(type = %i)."<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="49">ds<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">.<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="52">name<pos:position pos:line="11" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="58">ds<pos:position pos:line="11" pos:column="60"/></name><operator pos:line="11" pos:column="60">.<pos:position pos:line="11" pos:column="61"/></operator><name pos:line="11" pos:column="61">type<pos:position pos:line="11" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="67"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></else></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">value<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">endptr<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <block pos:line="15" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">ERROR<pos:position pos:line="16" pos:column="22"/></name> <argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"parse_value: Failed to parse string as number: %s."<pos:position pos:line="16" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="78">value<pos:position pos:line="16" pos:column="83"/></name></expr></argument>)<pos:position pos:line="16" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="85"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then>
	<elseif pos:line="19" pos:column="9">else <if pos:line="19" pos:column="14">if <condition pos:line="19" pos:column="17">(<expr><operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">NULL<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">!=<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">endptr<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">)<pos:position pos:line="19" pos:column="34"/></operator> <operator pos:line="19" pos:column="35">&amp;&amp;<pos:position pos:line="19" pos:column="45"/></operator> <operator pos:line="19" pos:column="38">(<pos:position pos:line="19" pos:column="39"/></operator><literal type="char" pos:line="19" pos:column="39">'\0'<pos:position pos:line="19" pos:column="43"/></literal> <operator pos:line="19" pos:column="44">!=<pos:position pos:line="19" pos:column="46"/></operator> <operator pos:line="19" pos:column="47">*<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="48">endptr<pos:position pos:line="19" pos:column="54"/></name><operator pos:line="19" pos:column="54">)<pos:position pos:line="19" pos:column="55"/></operator></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">WARNING<pos:position pos:line="20" pos:column="24"/></name> <argument_list pos:line="20" pos:column="25">(<argument><expr><literal type="string" pos:line="20" pos:column="26">"parse_value: Ignoring trailing garbage after number: %s."<pos:position pos:line="20" pos:column="84"/></literal></expr></argument>,
				<argument><expr><name pos:line="21" pos:column="33">endptr<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
	<return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
