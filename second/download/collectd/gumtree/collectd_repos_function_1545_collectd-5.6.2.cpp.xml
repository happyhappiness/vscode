<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1545_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">collectd_start<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier><modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">argv<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list> <block pos:line="1" pos:column="40">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">pid_t<pos:position pos:line="2" pos:column="8"/></name></type> <name pos:line="2" pos:column="9">pid<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><literal type="number" pos:line="2" pos:column="15">0<pos:position pos:line="2" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><literal type="number" pos:line="4" pos:column="7">0<pos:position pos:line="4" pos:column="8"/></literal> <operator pos:line="4" pos:column="9">&gt;<pos:position pos:line="4" pos:column="13"/></operator> <operator pos:line="4" pos:column="11">(<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">pid<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">fork<pos:position pos:line="4" pos:column="22"/></name><argument_list pos:line="4" pos:column="22">()<pos:position pos:line="4" pos:column="24"/></argument_list></call><operator pos:line="4" pos:column="24">)<pos:position pos:line="4" pos:column="25"/></operator></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26"> <block pos:line="4" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">syslog<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">LOG_ERR<pos:position pos:line="5" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="21">"Error: fork() failed: %s"<pos:position pos:line="5" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="49">strerror<pos:position pos:line="5" pos:column="57"/></name><argument_list pos:line="5" pos:column="57">(<argument><expr><name pos:line="5" pos:column="58">errno<pos:position pos:line="5" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="66"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal></expr>;<pos:position pos:line="6" pos:column="15"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then> <elseif pos:line="7" pos:column="5">else <if pos:line="7" pos:column="10">if <condition pos:line="7" pos:column="13">(<expr><name pos:line="7" pos:column="14">pid<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">!=<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23"> <block pos:line="7" pos:column="24">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">collectd_pid<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">pid<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">execvp<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name><name pos:line="12" pos:column="10">argv<pos:position pos:line="12" pos:column="14"/></name><index pos:line="12" pos:column="14">[<expr><literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>]<pos:position pos:line="12" pos:column="17"/></index></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">argv<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">syslog<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><name pos:line="13" pos:column="10">LOG_ERR<pos:position pos:line="13" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"Error: execvp(%s) failed: %s"<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="51">argv<pos:position pos:line="13" pos:column="55"/></name><index pos:line="13" pos:column="55">[<expr><literal type="number" pos:line="13" pos:column="56">0<pos:position pos:line="13" pos:column="57"/></literal></expr>]<pos:position pos:line="13" pos:column="58"/></index></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="60">strerror<pos:position pos:line="13" pos:column="68"/></name><argument_list pos:line="13" pos:column="68">(<argument><expr><name pos:line="13" pos:column="69">errno<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">exit<pos:position pos:line="14" pos:column="7"/></name><argument_list pos:line="14" pos:column="7">(<argument><expr><operator pos:line="14" pos:column="8">-<pos:position pos:line="14" pos:column="9"/></operator><literal type="number" pos:line="14" pos:column="9">1<pos:position pos:line="14" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
