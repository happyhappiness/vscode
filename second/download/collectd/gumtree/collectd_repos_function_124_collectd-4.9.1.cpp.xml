<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_124_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">mach_header<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type>
<name pos:line="2" pos:column="1">lt__match_loadedlib<pos:position pos:line="2" pos:column="20"/></name> <parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">name<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">mach_header<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">mh<pos:position pos:line="4" pos:column="24"/></name>	<init pos:line="4" pos:column="25">= <expr><literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name> <init pos:line="5" pos:column="9">= <expr><call><name pos:line="5" pos:column="11">_dyld_image_count<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">()<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

  <while pos:line="7" pos:column="3">while <condition pos:line="7" pos:column="9">(<expr><name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">&gt;<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="14">0<pos:position pos:line="7" pos:column="15"/></literal></expr>)<pos:position pos:line="7" pos:column="16"/></condition>
    <block pos:line="8" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="9" pos:column="7">const<pos:position pos:line="9" pos:column="12"/></specifier> <name pos:line="9" pos:column="13">char<pos:position pos:line="9" pos:column="17"/></name> <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier></type><name pos:line="9" pos:column="19">id<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>

      <expr_stmt><expr><operator pos:line="11" pos:column="7">--<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">i<pos:position pos:line="11" pos:column="10"/></name></expr>;<pos:position pos:line="11" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><name pos:line="12" pos:column="7">id<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <call><name pos:line="12" pos:column="12">lt__header_get_instnam<pos:position pos:line="12" pos:column="34"/></name> <argument_list pos:line="12" pos:column="35">(<argument><expr><call><name pos:line="12" pos:column="36">_dyld_get_image_header<pos:position pos:line="12" pos:column="58"/></name> <argument_list pos:line="12" pos:column="59">(<argument><expr><name pos:line="12" pos:column="60">i<pos:position pos:line="12" pos:column="61"/></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">id<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&amp;&amp;<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="17">strneq<pos:position pos:line="13" pos:column="23"/></name> <argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">id<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">name<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
	<block pos:line="14" pos:column="9">{
	  <expr_stmt><expr><name pos:line="15" pos:column="11">mh<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">_dyld_get_image_header<pos:position pos:line="15" pos:column="38"/></name> <argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">i<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
	  <break pos:line="16" pos:column="11">break;<pos:position pos:line="16" pos:column="17"/></break>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></while>

  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">mh<pos:position pos:line="20" pos:column="12"/></name></expr>;<pos:position pos:line="20" pos:column="13"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
