<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_296_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_write<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">data_set_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">ds<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">value_list_t<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">vl<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="70">/* {{{ */</comment>
                       <parameter><decl><type><name pos:line="2" pos:column="24">user_data_t<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">user_data<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list> <block pos:line="2" pos:column="48">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">camqp_config_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">conf<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name><name pos:line="3" pos:column="26">user_data<pos:position pos:line="3" pos:column="35"/></name><operator pos:line="3" pos:column="35">-&gt;<pos:position pos:line="3" pos:column="40"/></operator><name pos:line="3" pos:column="37">data<pos:position pos:line="3" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">routing_key<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><literal type="number" pos:line="4" pos:column="20">6<pos:position pos:line="4" pos:column="21"/></literal> <operator pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">DATA_MAX_NAME_LEN<pos:position pos:line="4" pos:column="41"/></name></expr>]<pos:position pos:line="4" pos:column="42"/></index></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buffer<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><literal type="number" pos:line="5" pos:column="15">8192<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">ds<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">==<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">NULL<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">)<pos:position pos:line="8" pos:column="19"/></operator> <operator pos:line="8" pos:column="20">||<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="23">(<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">vl<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">NULL<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="36">||<pos:position pos:line="8" pos:column="38"/></operator> <operator pos:line="8" pos:column="39">(<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">conf<pos:position pos:line="8" pos:column="44"/></name> <operator pos:line="8" pos:column="45">==<pos:position pos:line="8" pos:column="47"/></operator> <name pos:line="8" pos:column="48">NULL<pos:position pos:line="8" pos:column="52"/></name><operator pos:line="8" pos:column="52">)<pos:position pos:line="8" pos:column="53"/></operator></expr>)<pos:position pos:line="8" pos:column="54"/></condition><then pos:line="8" pos:column="54">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">EINVAL<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">conf<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">routing_key<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">!=<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">NULL<pos:position pos:line="11" pos:column="32"/></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33"> <block pos:line="11" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">sstrncpy<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">routing_key<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="27">conf<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">routing_key<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="46">sizeof<argument_list pos:line="12" pos:column="52">(<argument><expr><name pos:line="12" pos:column="53">routing_key<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then> <else pos:line="13" pos:column="5">else <block pos:line="13" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">snprintf<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">routing_key<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">routing_key<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="48">"collectd/%s/%s/%s/%s/%s"<pos:position pos:line="14" pos:column="73"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="15" pos:column="14">vl<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">host<pos:position pos:line="15" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="24">vl<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">plugin<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="36">vl<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">plugin_instance<pos:position pos:line="15" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="57">vl<pos:position pos:line="15" pos:column="59"/></name><operator pos:line="15" pos:column="59">-&gt;<pos:position pos:line="15" pos:column="64"/></operator><name pos:line="15" pos:column="61">type<pos:position pos:line="15" pos:column="65"/></name></name></expr></argument>,
             <argument><expr><name><name pos:line="16" pos:column="14">vl<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">type_instance<pos:position pos:line="16" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Switch slashes (the only character forbidden by collectd) and dots
     * (the separation character used by AMQP). */</comment>
    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init><decl><type><name pos:line="20" pos:column="10">size_t<pos:position pos:line="20" pos:column="16"/></name></type> <name pos:line="20" pos:column="17">i<pos:position pos:line="20" pos:column="18"/></name> <init pos:line="20" pos:column="19">= <expr><literal type="number" pos:line="20" pos:column="21">0<pos:position pos:line="20" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="23"/></init> <condition><expr><name><name pos:line="20" pos:column="24">routing_key<pos:position pos:line="20" pos:column="35"/></name><index pos:line="20" pos:column="35">[<expr><name pos:line="20" pos:column="36">i<pos:position pos:line="20" pos:column="37"/></name></expr>]<pos:position pos:line="20" pos:column="38"/></index></name> <operator pos:line="20" pos:column="39">!=<pos:position pos:line="20" pos:column="41"/></operator> <literal type="number" pos:line="20" pos:column="42">0<pos:position pos:line="20" pos:column="43"/></literal></expr>;<pos:position pos:line="20" pos:column="44"/></condition> <incr><expr><name pos:line="20" pos:column="45">i<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">++<pos:position pos:line="20" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="49"/></control> <block pos:line="20" pos:column="50">{
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name><name pos:line="21" pos:column="11">routing_key<pos:position pos:line="21" pos:column="22"/></name><index pos:line="21" pos:column="22">[<expr><name pos:line="21" pos:column="23">i<pos:position pos:line="21" pos:column="24"/></name></expr>]<pos:position pos:line="21" pos:column="25"/></index></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <literal type="char" pos:line="21" pos:column="29">'.'<pos:position pos:line="21" pos:column="32"/></literal></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="9">routing_key<pos:position pos:line="22" pos:column="20"/></name><index pos:line="22" pos:column="20">[<expr><name pos:line="22" pos:column="21">i<pos:position pos:line="22" pos:column="22"/></name></expr>]<pos:position pos:line="22" pos:column="23"/></index></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <literal type="char" pos:line="22" pos:column="26">'/'<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt></block></then>
      <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><name><name pos:line="23" pos:column="16">routing_key<pos:position pos:line="23" pos:column="27"/></name><index pos:line="23" pos:column="27">[<expr><name pos:line="23" pos:column="28">i<pos:position pos:line="23" pos:column="29"/></name></expr>]<pos:position pos:line="23" pos:column="30"/></index></name> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <literal type="char" pos:line="23" pos:column="34">'/'<pos:position pos:line="23" pos:column="37"/></literal></expr>)<pos:position pos:line="23" pos:column="38"/></condition><then pos:line="23" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="9">routing_key<pos:position pos:line="24" pos:column="20"/></name><index pos:line="24" pos:column="20">[<expr><name pos:line="24" pos:column="21">i<pos:position pos:line="24" pos:column="22"/></name></expr>]<pos:position pos:line="24" pos:column="23"/></index></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="char" pos:line="24" pos:column="26">'.'<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="25" pos:column="6"/></block></for>
  }<pos:position pos:line="26" pos:column="4"/></block></else></if>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name><name pos:line="28" pos:column="7">conf<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">format<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">==<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">CAMQP_FORMAT_COMMAND<pos:position pos:line="28" pos:column="43"/></name></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44"> <block pos:line="28" pos:column="45">{
    <expr_stmt><expr><name pos:line="29" pos:column="5">status<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">cmd_create_putval<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">buffer<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="40">sizeof<argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">buffer<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">ds<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">vl<pos:position pos:line="29" pos:column="62"/></name></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">status<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">!=<pos:position pos:line="30" pos:column="18"/></operator> <literal type="number" pos:line="30" pos:column="19">0<pos:position pos:line="30" pos:column="20"/></literal></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">ERROR<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><literal type="string" pos:line="31" pos:column="13">"amqp plugin: cmd_create_putval failed with status %i."<pos:position pos:line="31" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="70">status<pos:position pos:line="31" pos:column="76"/></name></expr></argument>)<pos:position pos:line="31" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="78"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">status<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
  }<pos:position pos:line="34" pos:column="4"/></block></then> <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><name><name pos:line="34" pos:column="14">conf<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">format<pos:position pos:line="34" pos:column="26"/></name></name> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">CAMQP_FORMAT_JSON<pos:position pos:line="34" pos:column="47"/></name></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48"> <block pos:line="34" pos:column="49">{
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">size_t<pos:position pos:line="35" pos:column="11"/></name></type> <name pos:line="35" pos:column="12">bfree<pos:position pos:line="35" pos:column="17"/></name> <init pos:line="35" pos:column="18">= <expr><sizeof pos:line="35" pos:column="20">sizeof<argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">buffer<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="35" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">size_t<pos:position pos:line="36" pos:column="11"/></name></type> <name pos:line="36" pos:column="12">bfill<pos:position pos:line="36" pos:column="17"/></name> <init pos:line="36" pos:column="18">= <expr><literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">format_json_initialize<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">buffer<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="37">bfill<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="44">&amp;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="45">bfree<pos:position pos:line="38" pos:column="50"/></name></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">format_json_value_list<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">buffer<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="36">&amp;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="37">bfill<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">bfree<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">ds<pos:position pos:line="39" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="56">vl<pos:position pos:line="39" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="60">conf<pos:position pos:line="39" pos:column="64"/></name><operator pos:line="39" pos:column="64">-&gt;<pos:position pos:line="39" pos:column="69"/></operator><name pos:line="39" pos:column="66">store_rates<pos:position pos:line="39" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">format_json_finalize<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">buffer<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="34">&amp;<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="35">bfill<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="42">&amp;<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="43">bfree<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if></elseif> <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if <condition pos:line="41" pos:column="13">(<expr><name><name pos:line="41" pos:column="14">conf<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">format<pos:position pos:line="41" pos:column="26"/></name></name> <operator pos:line="41" pos:column="27">==<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">CAMQP_FORMAT_GRAPHITE<pos:position pos:line="41" pos:column="51"/></name></expr>)<pos:position pos:line="41" pos:column="52"/></condition><then pos:line="41" pos:column="52"> <block pos:line="41" pos:column="53">{
    <expr_stmt><expr><name pos:line="42" pos:column="5">status<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator>
        <call><name pos:line="43" pos:column="9">format_graphite<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">buffer<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="33">sizeof<argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">buffer<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">ds<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">vl<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="57">conf<pos:position pos:line="43" pos:column="61"/></name><operator pos:line="43" pos:column="61">-&gt;<pos:position pos:line="43" pos:column="66"/></operator><name pos:line="43" pos:column="63">prefix<pos:position pos:line="43" pos:column="69"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="44" pos:column="25">conf<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">postfix<pos:position pos:line="44" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="40">conf<pos:position pos:line="44" pos:column="44"/></name><operator pos:line="44" pos:column="44">-&gt;<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="46">escape_char<pos:position pos:line="44" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="59">conf<pos:position pos:line="44" pos:column="63"/></name><operator pos:line="44" pos:column="63">-&gt;<pos:position pos:line="44" pos:column="68"/></operator><name pos:line="44" pos:column="65">graphite_flags<pos:position pos:line="44" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="81"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">status<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">!=<pos:position pos:line="45" pos:column="18"/></operator> <literal type="number" pos:line="45" pos:column="19">0<pos:position pos:line="45" pos:column="20"/></literal></expr>)<pos:position pos:line="45" pos:column="21"/></condition><then pos:line="45" pos:column="21"> <block pos:line="45" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">ERROR<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><literal type="string" pos:line="46" pos:column="13">"amqp plugin: format_graphite failed with status %i."<pos:position pos:line="46" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="68">status<pos:position pos:line="46" pos:column="74"/></name></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="76"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">status<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block></then></if></elseif> <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">ERROR<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><literal type="string" pos:line="50" pos:column="11">"amqp plugin: Invalid format (%i)."<pos:position pos:line="50" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="48">conf<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">-&gt;<pos:position pos:line="50" pos:column="57"/></operator><name pos:line="50" pos:column="54">format<pos:position pos:line="50" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="62"/></expr_stmt>
    <return pos:line="51" pos:column="5">return <expr><operator pos:line="51" pos:column="12">-<pos:position pos:line="51" pos:column="13"/></operator><literal type="number" pos:line="51" pos:column="13">1<pos:position pos:line="51" pos:column="14"/></literal></expr>;<pos:position pos:line="51" pos:column="15"/></return>
  }<pos:position pos:line="52" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="54" pos:column="3">pthread_mutex_lock<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><operator pos:line="54" pos:column="22">&amp;<pos:position pos:line="54" pos:column="27"/></operator><name><name pos:line="54" pos:column="23">conf<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">-&gt;<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="29">lock<pos:position pos:line="54" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="55" pos:column="3">status<pos:position pos:line="55" pos:column="9"/></name> <operator pos:line="55" pos:column="10">=<pos:position pos:line="55" pos:column="11"/></operator> <call><name pos:line="55" pos:column="12">camqp_write_locked<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">conf<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="37">buffer<pos:position pos:line="55" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="45">routing_key<pos:position pos:line="55" pos:column="56"/></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">pthread_mutex_unlock<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><operator pos:line="56" pos:column="24">&amp;<pos:position pos:line="56" pos:column="29"/></operator><name><name pos:line="56" pos:column="25">conf<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">lock<pos:position pos:line="56" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">status<pos:position pos:line="58" pos:column="16"/></name></expr>;<pos:position pos:line="58" pos:column="17"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
