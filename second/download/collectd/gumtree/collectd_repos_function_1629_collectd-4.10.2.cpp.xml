<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1629_collectd-4.10.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_unregister_read_group<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">group<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list> <comment type="block" pos:line="1" pos:column="54">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">llentry_t<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">le<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">read_func_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">rf<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">found<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">group<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">==<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="22">NULL<pos:position pos:line="8" pos:column="26"/></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><operator pos:line="9" pos:column="25">-<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">ENOENT<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">)<pos:position pos:line="9" pos:column="33"/></operator></expr>;<pos:position pos:line="9" pos:column="34"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">pthread_mutex_lock<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">read_lock<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">read_list<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">NULL<pos:position pos:line="13" pos:column="30"/></name></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">pthread_mutex_unlock<pos:position pos:line="15" pos:column="37"/></name> <argument_list pos:line="15" pos:column="38">(<argument><expr><operator pos:line="15" pos:column="39">&amp;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="40">read_lock<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">ENOENT<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">)<pos:position pos:line="16" pos:column="33"/></operator></expr>;<pos:position pos:line="16" pos:column="34"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><literal type="number" pos:line="19" pos:column="16">42<pos:position pos:line="19" pos:column="18"/></literal></expr>)<pos:position pos:line="19" pos:column="19"/></condition>
	<block pos:line="20" pos:column="9">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">le<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">llist_search_custom<pos:position pos:line="21" pos:column="41"/></name> <argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">read_list<pos:position pos:line="21" pos:column="52"/></name></expr></argument>,
				<argument><expr><name pos:line="22" pos:column="33">compare_read_func_group<pos:position pos:line="22" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="58">(<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="59">void<pos:position pos:line="22" pos:column="63"/></name> <operator pos:line="22" pos:column="64">*<pos:position pos:line="22" pos:column="65"/></operator><operator pos:line="22" pos:column="65">)<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="66">group<pos:position pos:line="22" pos:column="71"/></name></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">le<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">==<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">NULL<pos:position pos:line="24" pos:column="31"/></name></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32">
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><operator pos:line="27" pos:column="17">++<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">found<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="29" pos:column="17">llist_remove<pos:position pos:line="29" pos:column="29"/></name> <argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">read_list<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">le<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">rf<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <name><name pos:line="31" pos:column="22">le<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">value<pos:position pos:line="31" pos:column="31"/></name></name></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">assert<pos:position pos:line="32" pos:column="23"/></name> <argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">rf<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">!=<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">NULL<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">rf<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">rf_type<pos:position pos:line="33" pos:column="28"/></name></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="31">RF_REMOVE<pos:position pos:line="33" pos:column="40"/></name></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="35" pos:column="17">llentry_destroy<pos:position pos:line="35" pos:column="32"/></name> <argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">le<pos:position pos:line="35" pos:column="36"/></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="37" pos:column="17">DEBUG<pos:position pos:line="37" pos:column="22"/></name> <argument_list pos:line="37" pos:column="23">(<argument><expr><literal type="string" pos:line="37" pos:column="24">"plugin_unregister_read_group: "<pos:position pos:line="37" pos:column="56"/></literal>
				<literal type="string" pos:line="38" pos:column="33">"Marked `%s' (group `%s') for removal."<pos:position pos:line="38" pos:column="72"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="39" pos:column="33">rf<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">rf_name<pos:position pos:line="39" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="46">group<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">pthread_mutex_unlock<pos:position pos:line="42" pos:column="29"/></name> <argument_list pos:line="42" pos:column="30">(<argument><expr><operator pos:line="42" pos:column="31">&amp;<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="32">read_lock<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">found<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">==<pos:position pos:line="44" pos:column="21"/></operator> <literal type="number" pos:line="44" pos:column="22">0<pos:position pos:line="44" pos:column="23"/></literal></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24">
	<block pos:line="45" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">WARNING<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><literal type="string" pos:line="46" pos:column="26">"plugin_unregister_read_group: No such "<pos:position pos:line="46" pos:column="66"/></literal>
				<literal type="string" pos:line="47" pos:column="33">"group of read function: %s"<pos:position pos:line="47" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="63">group<pos:position pos:line="47" pos:column="68"/></name></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><operator pos:line="48" pos:column="24">(<pos:position pos:line="48" pos:column="25"/></operator><operator pos:line="48" pos:column="25">-<pos:position pos:line="48" pos:column="26"/></operator><name pos:line="48" pos:column="26">ENOENT<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">)<pos:position pos:line="48" pos:column="33"/></operator></expr>;<pos:position pos:line="48" pos:column="34"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<return pos:line="51" pos:column="9">return <expr><operator pos:line="51" pos:column="16">(<pos:position pos:line="51" pos:column="17"/></operator><literal type="number" pos:line="51" pos:column="17">0<pos:position pos:line="51" pos:column="18"/></literal><operator pos:line="51" pos:column="18">)<pos:position pos:line="51" pos:column="19"/></operator></expr>;<pos:position pos:line="51" pos:column="20"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
