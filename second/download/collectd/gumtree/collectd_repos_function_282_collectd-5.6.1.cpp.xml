<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_282_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">start_thread<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <comment type="block" pos:line="1" pos:column="32">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">pthread_mutex_lock<pos:position pos:line="5" pos:column="21"/></name> <argument_list pos:line="5" pos:column="22">(<argument><expr><operator pos:line="5" pos:column="23">&amp;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="24">ping_lock<pos:position pos:line="5" pos:column="33"/></name></expr></argument>)<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">ping_thread_loop<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">!=<pos:position pos:line="7" pos:column="26"/></operator> <literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">pthread_mutex_unlock<pos:position pos:line="9" pos:column="25"/></name> <argument_list pos:line="9" pos:column="26">(<argument><expr><operator pos:line="9" pos:column="27">&amp;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="28">ping_lock<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal><operator pos:line="10" pos:column="14">)<pos:position pos:line="10" pos:column="15"/></operator></expr>;<pos:position pos:line="10" pos:column="16"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">ping_thread_loop<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <literal type="number" pos:line="13" pos:column="22">1<pos:position pos:line="13" pos:column="23"/></literal></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">ping_thread_error<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">status<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">plugin_thread_create<pos:position pos:line="15" pos:column="32"/></name> <argument_list pos:line="15" pos:column="33">(<argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">ping_thread_id<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <comment type="block" pos:line="15" pos:column="51">/* attr = */</comment> <argument><expr><name pos:line="15" pos:column="64">NULL<pos:position pos:line="15" pos:column="68"/></name></expr></argument>,
      <argument><expr><name pos:line="16" pos:column="7">ping_thread<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <comment type="block" pos:line="16" pos:column="20">/* arg = */</comment> <argument><expr><operator pos:line="16" pos:column="32">(<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">void<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">*<pos:position pos:line="16" pos:column="39"/></operator><operator pos:line="16" pos:column="39">)<pos:position pos:line="16" pos:column="40"/></operator> <literal type="number" pos:line="16" pos:column="41">0<pos:position pos:line="16" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">ping_thread_loop<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ERROR<pos:position pos:line="20" pos:column="10"/></name> <argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"ping plugin: Starting thread failed."<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">pthread_mutex_unlock<pos:position pos:line="21" pos:column="25"/></name> <argument_list pos:line="21" pos:column="26">(<argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">ping_lock<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><operator pos:line="22" pos:column="13">-<pos:position pos:line="22" pos:column="14"/></operator><literal type="number" pos:line="22" pos:column="14">1<pos:position pos:line="22" pos:column="15"/></literal><operator pos:line="22" pos:column="15">)<pos:position pos:line="22" pos:column="16"/></operator></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">pthread_mutex_unlock<pos:position pos:line="25" pos:column="23"/></name> <argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">ping_lock<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
  <return pos:line="26" pos:column="3">return <expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><literal type="number" pos:line="26" pos:column="11">0<pos:position pos:line="26" pos:column="12"/></literal><operator pos:line="26" pos:column="12">)<pos:position pos:line="26" pos:column="13"/></operator></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
