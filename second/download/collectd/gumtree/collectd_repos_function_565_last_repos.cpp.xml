<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_565_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sensu_notification_to_json<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">sensu_host<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">host<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
                                        <parameter><decl><type><name pos:line="2" pos:column="41">notification_t<pos:position pos:line="2" pos:column="55"/></name> <specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">n<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list> <block pos:line="2" pos:column="66">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">service_buffer<pos:position pos:line="3" pos:column="22"/></name><index pos:line="3" pos:column="22">[<expr><literal type="number" pos:line="3" pos:column="23">6<pos:position pos:line="3" pos:column="24"/></literal> <operator pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></operator> <name pos:line="3" pos:column="27">DATA_MAX_NAME_LEN<pos:position pos:line="3" pos:column="44"/></name></expr>]<pos:position pos:line="3" pos:column="45"/></index></name></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <specifier pos:line="4" pos:column="8">const<pos:position pos:line="4" pos:column="13"/></specifier> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">severity<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ret_str<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">temp_str<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">i<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">res<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
  <comment type="line" pos:line="10" pos:column="3">// add the severity/status</comment>
  <switch pos:line="11" pos:column="3">switch <condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">n<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">severity<pos:position pos:line="11" pos:column="22"/></name></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition> <block pos:line="11" pos:column="24">{
  <case pos:line="12" pos:column="3">case <expr><name pos:line="12" pos:column="8">NOTIF_OKAY<pos:position pos:line="12" pos:column="18"/></name></expr>:<pos:position pos:line="12" pos:column="19"/></case>
    <expr_stmt><expr><name pos:line="13" pos:column="5">severity<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <literal type="string" pos:line="13" pos:column="16">"OK"<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">status<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
    <break pos:line="15" pos:column="5">break;<pos:position pos:line="15" pos:column="11"/></break>
  <case pos:line="16" pos:column="3">case <expr><name pos:line="16" pos:column="8">NOTIF_WARNING<pos:position pos:line="16" pos:column="21"/></name></expr>:<pos:position pos:line="16" pos:column="22"/></case>
    <expr_stmt><expr><name pos:line="17" pos:column="5">severity<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <literal type="string" pos:line="17" pos:column="16">"WARNING"<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">status<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
    <break pos:line="19" pos:column="5">break;<pos:position pos:line="19" pos:column="11"/></break>
  <case pos:line="20" pos:column="3">case <expr><name pos:line="20" pos:column="8">NOTIF_FAILURE<pos:position pos:line="20" pos:column="21"/></name></expr>:<pos:position pos:line="20" pos:column="22"/></case>
    <expr_stmt><expr><name pos:line="21" pos:column="5">severity<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <literal type="string" pos:line="21" pos:column="16">"CRITICAL"<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">status<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <literal type="number" pos:line="22" pos:column="14">2<pos:position pos:line="22" pos:column="15"/></literal></expr>;<pos:position pos:line="22" pos:column="16"/></expr_stmt>
    <break pos:line="23" pos:column="5">break;<pos:position pos:line="23" pos:column="11"/></break>
  <default pos:line="24" pos:column="3">default:<pos:position pos:line="24" pos:column="11"/></default>
    <expr_stmt><expr><name pos:line="25" pos:column="5">severity<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <literal type="string" pos:line="25" pos:column="16">"UNKNOWN"<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">status<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <literal type="number" pos:line="26" pos:column="14">3<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></switch>
  <expr_stmt><expr><name pos:line="28" pos:column="3">res<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <call><name pos:line="28" pos:column="9">my_asprintf<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><operator pos:line="28" pos:column="21">&amp;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="22">temp_str<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="32">"{\"status\": %d"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">status<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">res<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">==<pos:position pos:line="29" pos:column="13"/></operator> <operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17"> <block pos:line="29" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="30" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">NULL<pos:position pos:line="31" pos:column="16"/></name></expr>;<pos:position pos:line="31" pos:column="17"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="33" pos:column="3">ret_str<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">temp_str<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>

  <comment type="line" pos:line="35" pos:column="3">// incorporate the timestamp</comment>
  <expr_stmt><expr><name pos:line="36" pos:column="3">res<pos:position pos:line="36" pos:column="6"/></name> <operator pos:line="36" pos:column="7">=<pos:position pos:line="36" pos:column="8"/></operator> <call><name pos:line="36" pos:column="9">my_asprintf<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><operator pos:line="36" pos:column="21">&amp;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="22">temp_str<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="32">"%s, \"timestamp\": %lld"<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="59">ret_str<pos:position pos:line="36" pos:column="66"/></name></expr></argument>,
                    <argument><expr><operator pos:line="37" pos:column="21">(<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">long<pos:position pos:line="37" pos:column="26"/></name> <name pos:line="37" pos:column="27">long<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">)<pos:position pos:line="37" pos:column="32"/></operator><call><name pos:line="37" pos:column="32">CDTIME_T_TO_TIME_T<pos:position pos:line="37" pos:column="50"/></name><argument_list pos:line="37" pos:column="50">(<argument><expr><name><name pos:line="37" pos:column="51">n<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">-&gt;<pos:position pos:line="37" pos:column="57"/></operator><name pos:line="37" pos:column="54">time<pos:position pos:line="37" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">free<pos:position pos:line="38" pos:column="7"/></name><argument_list pos:line="38" pos:column="7">(<argument><expr><name pos:line="38" pos:column="8">ret_str<pos:position pos:line="38" pos:column="15"/></name></expr></argument>)<pos:position pos:line="38" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="17"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">res<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">==<pos:position pos:line="39" pos:column="13"/></operator> <operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17"> <block pos:line="39" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">ERROR<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><literal type="string" pos:line="40" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="40" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">NULL<pos:position pos:line="41" pos:column="16"/></name></expr>;<pos:position pos:line="41" pos:column="17"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="43" pos:column="3">ret_str<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">temp_str<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="45" pos:column="3">char<pos:position pos:line="45" pos:column="7"/></name> <modifier pos:line="45" pos:column="8">*<pos:position pos:line="45" pos:column="9"/></modifier></type><name pos:line="45" pos:column="9">handlers_str<pos:position pos:line="45" pos:column="21"/></name> <init pos:line="45" pos:column="22">=
      <expr><call><name pos:line="46" pos:column="7">build_json_str_list<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><literal type="string" pos:line="46" pos:column="27">"handlers"<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="39">&amp;<pos:position pos:line="46" pos:column="44"/></operator><operator pos:line="46" pos:column="40">(<pos:position pos:line="46" pos:column="41"/></operator><name><name pos:line="46" pos:column="41">host<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">-&gt;<pos:position pos:line="46" pos:column="50"/></operator><name pos:line="46" pos:column="47">notification_handlers<pos:position pos:line="46" pos:column="68"/></name></name><operator pos:line="46" pos:column="68">)<pos:position pos:line="46" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="71"/></decl_stmt>
  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><name pos:line="47" pos:column="7">handlers_str<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">==<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">NULL<pos:position pos:line="47" pos:column="27"/></name></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28"> <block pos:line="47" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">ERROR<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><literal type="string" pos:line="48" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="48" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">free<pos:position pos:line="49" pos:column="9"/></name><argument_list pos:line="49" pos:column="9">(<argument><expr><name pos:line="49" pos:column="10">ret_str<pos:position pos:line="49" pos:column="17"/></name></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><name pos:line="50" pos:column="12">NULL<pos:position pos:line="50" pos:column="16"/></name></expr>;<pos:position pos:line="50" pos:column="17"/></return>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
  <comment type="line" pos:line="52" pos:column="3">// incorporate the handlers</comment>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><call><name pos:line="53" pos:column="7">strlen<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">handlers_str<pos:position pos:line="53" pos:column="26"/></name></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call> <operator pos:line="53" pos:column="28">!=<pos:position pos:line="53" pos:column="30"/></operator> <literal type="number" pos:line="53" pos:column="31">0<pos:position pos:line="53" pos:column="32"/></literal></expr>)<pos:position pos:line="53" pos:column="33"/></condition><then pos:line="53" pos:column="33"> <block pos:line="53" pos:column="34">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">res<pos:position pos:line="54" pos:column="8"/></name> <operator pos:line="54" pos:column="9">=<pos:position pos:line="54" pos:column="10"/></operator> <call><name pos:line="54" pos:column="11">my_asprintf<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><operator pos:line="54" pos:column="23">&amp;<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="24">temp_str<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="34">"%s, %s"<pos:position pos:line="54" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">ret_str<pos:position pos:line="54" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">handlers_str<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">free<pos:position pos:line="55" pos:column="9"/></name><argument_list pos:line="55" pos:column="9">(<argument><expr><name pos:line="55" pos:column="10">ret_str<pos:position pos:line="55" pos:column="17"/></name></expr></argument>)<pos:position pos:line="55" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">free<pos:position pos:line="56" pos:column="9"/></name><argument_list pos:line="56" pos:column="9">(<argument><expr><name pos:line="56" pos:column="10">handlers_str<pos:position pos:line="56" pos:column="22"/></name></expr></argument>)<pos:position pos:line="56" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">res<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">==<pos:position pos:line="57" pos:column="15"/></operator> <operator pos:line="57" pos:column="16">-<pos:position pos:line="57" pos:column="17"/></operator><literal type="number" pos:line="57" pos:column="17">1<pos:position pos:line="57" pos:column="18"/></literal></expr>)<pos:position pos:line="57" pos:column="19"/></condition><then pos:line="57" pos:column="19"> <block pos:line="57" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">ERROR<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><literal type="string" pos:line="58" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="58" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="59"/></expr_stmt>
      <return pos:line="59" pos:column="7">return <expr><name pos:line="59" pos:column="14">NULL<pos:position pos:line="59" pos:column="18"/></name></expr>;<pos:position pos:line="59" pos:column="19"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="61" pos:column="5">ret_str<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">=<pos:position pos:line="61" pos:column="14"/></operator> <name pos:line="61" pos:column="15">temp_str<pos:position pos:line="61" pos:column="23"/></name></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="62" pos:column="4"/></block></then> <else pos:line="62" pos:column="5">else <block pos:line="62" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">free<pos:position pos:line="63" pos:column="9"/></name><argument_list pos:line="63" pos:column="9">(<argument><expr><name pos:line="63" pos:column="10">handlers_str<pos:position pos:line="63" pos:column="22"/></name></expr></argument>)<pos:position pos:line="63" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="66" pos:column="3">// incorporate the plugin name information if any</comment>
  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><name><name pos:line="67" pos:column="7">n<pos:position pos:line="67" pos:column="8"/></name><operator pos:line="67" pos:column="8">-&gt;<pos:position pos:line="67" pos:column="13"/></operator><name pos:line="67" pos:column="10">plugin<pos:position pos:line="67" pos:column="16"/></name><index pos:line="67" pos:column="16">[<expr><literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal></expr>]<pos:position pos:line="67" pos:column="19"/></index></name> <operator pos:line="67" pos:column="20">!=<pos:position pos:line="67" pos:column="22"/></operator> <literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25"> <block pos:line="67" pos:column="26">{
    <expr_stmt><expr><name pos:line="68" pos:column="5">res<pos:position pos:line="68" pos:column="8"/></name> <operator pos:line="68" pos:column="9">=<pos:position pos:line="68" pos:column="10"/></operator> <call><name pos:line="68" pos:column="11">my_asprintf<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><operator pos:line="68" pos:column="23">&amp;<pos:position pos:line="68" pos:column="28"/></operator><name pos:line="68" pos:column="24">temp_str<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="34">"%s, \"collectd_plugin\": \"%s\""<pos:position pos:line="68" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="69">ret_str<pos:position pos:line="68" pos:column="76"/></name></expr></argument>,
                      <argument><expr><name><name pos:line="69" pos:column="23">n<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">-&gt;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="26">plugin<pos:position pos:line="69" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">free<pos:position pos:line="70" pos:column="9"/></name><argument_list pos:line="70" pos:column="9">(<argument><expr><name pos:line="70" pos:column="10">ret_str<pos:position pos:line="70" pos:column="17"/></name></expr></argument>)<pos:position pos:line="70" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">res<pos:position pos:line="71" pos:column="12"/></name> <operator pos:line="71" pos:column="13">==<pos:position pos:line="71" pos:column="15"/></operator> <operator pos:line="71" pos:column="16">-<pos:position pos:line="71" pos:column="17"/></operator><literal type="number" pos:line="71" pos:column="17">1<pos:position pos:line="71" pos:column="18"/></literal></expr>)<pos:position pos:line="71" pos:column="19"/></condition><then pos:line="71" pos:column="19"> <block pos:line="71" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">ERROR<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><literal type="string" pos:line="72" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="72" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="59"/></expr_stmt>
      <return pos:line="73" pos:column="7">return <expr><name pos:line="73" pos:column="14">NULL<pos:position pos:line="73" pos:column="18"/></name></expr>;<pos:position pos:line="73" pos:column="19"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="75" pos:column="5">ret_str<pos:position pos:line="75" pos:column="12"/></name> <operator pos:line="75" pos:column="13">=<pos:position pos:line="75" pos:column="14"/></operator> <name pos:line="75" pos:column="15">temp_str<pos:position pos:line="75" pos:column="23"/></name></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="78" pos:column="3">// incorporate the plugin type if any</comment>
  <if pos:line="79" pos:column="3">if <condition pos:line="79" pos:column="6">(<expr><name><name pos:line="79" pos:column="7">n<pos:position pos:line="79" pos:column="8"/></name><operator pos:line="79" pos:column="8">-&gt;<pos:position pos:line="79" pos:column="13"/></operator><name pos:line="79" pos:column="10">type<pos:position pos:line="79" pos:column="14"/></name><index pos:line="79" pos:column="14">[<expr><literal type="number" pos:line="79" pos:column="15">0<pos:position pos:line="79" pos:column="16"/></literal></expr>]<pos:position pos:line="79" pos:column="17"/></index></name> <operator pos:line="79" pos:column="18">!=<pos:position pos:line="79" pos:column="20"/></operator> <literal type="number" pos:line="79" pos:column="21">0<pos:position pos:line="79" pos:column="22"/></literal></expr>)<pos:position pos:line="79" pos:column="23"/></condition><then pos:line="79" pos:column="23"> <block pos:line="79" pos:column="24">{
    <expr_stmt><expr><name pos:line="80" pos:column="5">res<pos:position pos:line="80" pos:column="8"/></name> <operator pos:line="80" pos:column="9">=<pos:position pos:line="80" pos:column="10"/></operator> <call><name pos:line="80" pos:column="11">my_asprintf<pos:position pos:line="80" pos:column="22"/></name><argument_list pos:line="80" pos:column="22">(<argument><expr><operator pos:line="80" pos:column="23">&amp;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="24">temp_str<pos:position pos:line="80" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="34">"%s, \"collectd_plugin_type\": \"%s\""<pos:position pos:line="80" pos:column="72"/></literal></expr></argument>,
                      <argument><expr><name pos:line="81" pos:column="23">ret_str<pos:position pos:line="81" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="32">n<pos:position pos:line="81" pos:column="33"/></name><operator pos:line="81" pos:column="33">-&gt;<pos:position pos:line="81" pos:column="38"/></operator><name pos:line="81" pos:column="35">type<pos:position pos:line="81" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">free<pos:position pos:line="82" pos:column="9"/></name><argument_list pos:line="82" pos:column="9">(<argument><expr><name pos:line="82" pos:column="10">ret_str<pos:position pos:line="82" pos:column="17"/></name></expr></argument>)<pos:position pos:line="82" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">res<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">==<pos:position pos:line="83" pos:column="15"/></operator> <operator pos:line="83" pos:column="16">-<pos:position pos:line="83" pos:column="17"/></operator><literal type="number" pos:line="83" pos:column="17">1<pos:position pos:line="83" pos:column="18"/></literal></expr>)<pos:position pos:line="83" pos:column="19"/></condition><then pos:line="83" pos:column="19"> <block pos:line="83" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">ERROR<pos:position pos:line="84" pos:column="12"/></name><argument_list pos:line="84" pos:column="12">(<argument><expr><literal type="string" pos:line="84" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="84" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="59"/></expr_stmt>
      <return pos:line="85" pos:column="7">return <expr><name pos:line="85" pos:column="14">NULL<pos:position pos:line="85" pos:column="18"/></name></expr>;<pos:position pos:line="85" pos:column="19"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="87" pos:column="5">ret_str<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <name pos:line="87" pos:column="15">temp_str<pos:position pos:line="87" pos:column="23"/></name></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="90" pos:column="3">// incorporate the plugin instance if any</comment>
  <if pos:line="91" pos:column="3">if <condition pos:line="91" pos:column="6">(<expr><name><name pos:line="91" pos:column="7">n<pos:position pos:line="91" pos:column="8"/></name><operator pos:line="91" pos:column="8">-&gt;<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="10">plugin_instance<pos:position pos:line="91" pos:column="25"/></name><index pos:line="91" pos:column="25">[<expr><literal type="number" pos:line="91" pos:column="26">0<pos:position pos:line="91" pos:column="27"/></literal></expr>]<pos:position pos:line="91" pos:column="28"/></index></name> <operator pos:line="91" pos:column="29">!=<pos:position pos:line="91" pos:column="31"/></operator> <literal type="number" pos:line="91" pos:column="32">0<pos:position pos:line="91" pos:column="33"/></literal></expr>)<pos:position pos:line="91" pos:column="34"/></condition><then pos:line="91" pos:column="34"> <block pos:line="91" pos:column="35">{
    <expr_stmt><expr><name pos:line="92" pos:column="5">res<pos:position pos:line="92" pos:column="8"/></name> <operator pos:line="92" pos:column="9">=<pos:position pos:line="92" pos:column="10"/></operator> <call><name pos:line="92" pos:column="11">my_asprintf<pos:position pos:line="92" pos:column="22"/></name><argument_list pos:line="92" pos:column="22">(<argument><expr><operator pos:line="92" pos:column="23">&amp;<pos:position pos:line="92" pos:column="28"/></operator><name pos:line="92" pos:column="24">temp_str<pos:position pos:line="92" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="34">"%s, \"collectd_plugin_instance\": \"%s\""<pos:position pos:line="92" pos:column="76"/></literal></expr></argument>,
                      <argument><expr><name pos:line="93" pos:column="23">ret_str<pos:position pos:line="93" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="32">n<pos:position pos:line="93" pos:column="33"/></name><operator pos:line="93" pos:column="33">-&gt;<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="35">plugin_instance<pos:position pos:line="93" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">free<pos:position pos:line="94" pos:column="9"/></name><argument_list pos:line="94" pos:column="9">(<argument><expr><name pos:line="94" pos:column="10">ret_str<pos:position pos:line="94" pos:column="17"/></name></expr></argument>)<pos:position pos:line="94" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="19"/></expr_stmt>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name pos:line="95" pos:column="9">res<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">==<pos:position pos:line="95" pos:column="15"/></operator> <operator pos:line="95" pos:column="16">-<pos:position pos:line="95" pos:column="17"/></operator><literal type="number" pos:line="95" pos:column="17">1<pos:position pos:line="95" pos:column="18"/></literal></expr>)<pos:position pos:line="95" pos:column="19"/></condition><then pos:line="95" pos:column="19"> <block pos:line="95" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="96" pos:column="7">ERROR<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><literal type="string" pos:line="96" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="96" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="59"/></expr_stmt>
      <return pos:line="97" pos:column="7">return <expr><name pos:line="97" pos:column="14">NULL<pos:position pos:line="97" pos:column="18"/></name></expr>;<pos:position pos:line="97" pos:column="19"/></return>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="99" pos:column="5">ret_str<pos:position pos:line="99" pos:column="12"/></name> <operator pos:line="99" pos:column="13">=<pos:position pos:line="99" pos:column="14"/></operator> <name pos:line="99" pos:column="15">temp_str<pos:position pos:line="99" pos:column="23"/></name></expr>;<pos:position pos:line="99" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="102" pos:column="3">// incorporate the plugin type instance if any</comment>
  <if pos:line="103" pos:column="3">if <condition pos:line="103" pos:column="6">(<expr><name><name pos:line="103" pos:column="7">n<pos:position pos:line="103" pos:column="8"/></name><operator pos:line="103" pos:column="8">-&gt;<pos:position pos:line="103" pos:column="13"/></operator><name pos:line="103" pos:column="10">type_instance<pos:position pos:line="103" pos:column="23"/></name><index pos:line="103" pos:column="23">[<expr><literal type="number" pos:line="103" pos:column="24">0<pos:position pos:line="103" pos:column="25"/></literal></expr>]<pos:position pos:line="103" pos:column="26"/></index></name> <operator pos:line="103" pos:column="27">!=<pos:position pos:line="103" pos:column="29"/></operator> <literal type="number" pos:line="103" pos:column="30">0<pos:position pos:line="103" pos:column="31"/></literal></expr>)<pos:position pos:line="103" pos:column="32"/></condition><then pos:line="103" pos:column="32"> <block pos:line="103" pos:column="33">{
    <expr_stmt><expr><name pos:line="104" pos:column="5">res<pos:position pos:line="104" pos:column="8"/></name> <operator pos:line="104" pos:column="9">=<pos:position pos:line="104" pos:column="10"/></operator>
        <call><name pos:line="105" pos:column="9">my_asprintf<pos:position pos:line="105" pos:column="20"/></name><argument_list pos:line="105" pos:column="20">(<argument><expr><operator pos:line="105" pos:column="21">&amp;<pos:position pos:line="105" pos:column="26"/></operator><name pos:line="105" pos:column="22">temp_str<pos:position pos:line="105" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="32">"%s, \"collectd_plugin_type_instance\": \"%s\""<pos:position pos:line="105" pos:column="79"/></literal></expr></argument>,
                    <argument><expr><name pos:line="106" pos:column="21">ret_str<pos:position pos:line="106" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="30">n<pos:position pos:line="106" pos:column="31"/></name><operator pos:line="106" pos:column="31">-&gt;<pos:position pos:line="106" pos:column="36"/></operator><name pos:line="106" pos:column="33">type_instance<pos:position pos:line="106" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="107" pos:column="5">free<pos:position pos:line="107" pos:column="9"/></name><argument_list pos:line="107" pos:column="9">(<argument><expr><name pos:line="107" pos:column="10">ret_str<pos:position pos:line="107" pos:column="17"/></name></expr></argument>)<pos:position pos:line="107" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="19"/></expr_stmt>
    <if pos:line="108" pos:column="5">if <condition pos:line="108" pos:column="8">(<expr><name pos:line="108" pos:column="9">res<pos:position pos:line="108" pos:column="12"/></name> <operator pos:line="108" pos:column="13">==<pos:position pos:line="108" pos:column="15"/></operator> <operator pos:line="108" pos:column="16">-<pos:position pos:line="108" pos:column="17"/></operator><literal type="number" pos:line="108" pos:column="17">1<pos:position pos:line="108" pos:column="18"/></literal></expr>)<pos:position pos:line="108" pos:column="19"/></condition><then pos:line="108" pos:column="19"> <block pos:line="108" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="109" pos:column="7">ERROR<pos:position pos:line="109" pos:column="12"/></name><argument_list pos:line="109" pos:column="12">(<argument><expr><literal type="string" pos:line="109" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="109" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="59"/></expr_stmt>
      <return pos:line="110" pos:column="7">return <expr><name pos:line="110" pos:column="14">NULL<pos:position pos:line="110" pos:column="18"/></name></expr>;<pos:position pos:line="110" pos:column="19"/></return>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="112" pos:column="5">ret_str<pos:position pos:line="112" pos:column="12"/></name> <operator pos:line="112" pos:column="13">=<pos:position pos:line="112" pos:column="14"/></operator> <name pos:line="112" pos:column="15">temp_str<pos:position pos:line="112" pos:column="23"/></name></expr>;<pos:position pos:line="112" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="115" pos:column="3">// add key value attributes from config if any</comment>
  <for pos:line="116" pos:column="3">for <control pos:line="116" pos:column="7">(<init><expr><name pos:line="116" pos:column="8">i<pos:position pos:line="116" pos:column="9"/></name> <operator pos:line="116" pos:column="10">=<pos:position pos:line="116" pos:column="11"/></operator> <literal type="number" pos:line="116" pos:column="12">0<pos:position pos:line="116" pos:column="13"/></literal></expr>;<pos:position pos:line="116" pos:column="14"/></init> <condition><expr><name pos:line="116" pos:column="15">i<pos:position pos:line="116" pos:column="16"/></name> <operator pos:line="116" pos:column="17">&lt;<pos:position pos:line="116" pos:column="21"/></operator> <name pos:line="116" pos:column="19">sensu_attrs_num<pos:position pos:line="116" pos:column="34"/></name></expr>;<pos:position pos:line="116" pos:column="35"/></condition> <incr><expr><name pos:line="116" pos:column="36">i<pos:position pos:line="116" pos:column="37"/></name> <operator pos:line="116" pos:column="38">+=<pos:position pos:line="116" pos:column="40"/></operator> <literal type="number" pos:line="116" pos:column="41">2<pos:position pos:line="116" pos:column="42"/></literal></expr></incr>)<pos:position pos:line="116" pos:column="43"/></control> <block pos:line="116" pos:column="44">{
    <expr_stmt><expr><name pos:line="117" pos:column="5">res<pos:position pos:line="117" pos:column="8"/></name> <operator pos:line="117" pos:column="9">=<pos:position pos:line="117" pos:column="10"/></operator> <call><name pos:line="117" pos:column="11">my_asprintf<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><operator pos:line="117" pos:column="23">&amp;<pos:position pos:line="117" pos:column="28"/></operator><name pos:line="117" pos:column="24">temp_str<pos:position pos:line="117" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="34">"%s, \"%s\": \"%s\""<pos:position pos:line="117" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="56">ret_str<pos:position pos:line="117" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="65">sensu_attrs<pos:position pos:line="117" pos:column="76"/></name><index pos:line="117" pos:column="76">[<expr><name pos:line="117" pos:column="77">i<pos:position pos:line="117" pos:column="78"/></name></expr>]<pos:position pos:line="117" pos:column="79"/></index></name></expr></argument>,
                      <argument><expr><name><name pos:line="118" pos:column="23">sensu_attrs<pos:position pos:line="118" pos:column="34"/></name><index pos:line="118" pos:column="34">[<expr><name pos:line="118" pos:column="35">i<pos:position pos:line="118" pos:column="36"/></name> <operator pos:line="118" pos:column="37">+<pos:position pos:line="118" pos:column="38"/></operator> <literal type="number" pos:line="118" pos:column="39">1<pos:position pos:line="118" pos:column="40"/></literal></expr>]<pos:position pos:line="118" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="118" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">free<pos:position pos:line="119" pos:column="9"/></name><argument_list pos:line="119" pos:column="9">(<argument><expr><name pos:line="119" pos:column="10">ret_str<pos:position pos:line="119" pos:column="17"/></name></expr></argument>)<pos:position pos:line="119" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="19"/></expr_stmt>
    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">res<pos:position pos:line="120" pos:column="12"/></name> <operator pos:line="120" pos:column="13">==<pos:position pos:line="120" pos:column="15"/></operator> <operator pos:line="120" pos:column="16">-<pos:position pos:line="120" pos:column="17"/></operator><literal type="number" pos:line="120" pos:column="17">1<pos:position pos:line="120" pos:column="18"/></literal></expr>)<pos:position pos:line="120" pos:column="19"/></condition><then pos:line="120" pos:column="19"> <block pos:line="120" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="121" pos:column="7">ERROR<pos:position pos:line="121" pos:column="12"/></name><argument_list pos:line="121" pos:column="12">(<argument><expr><literal type="string" pos:line="121" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="121" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="59"/></expr_stmt>
      <return pos:line="122" pos:column="7">return <expr><name pos:line="122" pos:column="14">NULL<pos:position pos:line="122" pos:column="18"/></name></expr>;<pos:position pos:line="122" pos:column="19"/></return>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="124" pos:column="5">ret_str<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">=<pos:position pos:line="124" pos:column="14"/></operator> <name pos:line="124" pos:column="15">temp_str<pos:position pos:line="124" pos:column="23"/></name></expr>;<pos:position pos:line="124" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="125" pos:column="4"/></block></for>

  <comment type="line" pos:line="127" pos:column="3">// incorporate sensu tags from config if any</comment>
  <if pos:line="128" pos:column="3">if <condition pos:line="128" pos:column="6">(<expr><operator pos:line="128" pos:column="7">(<pos:position pos:line="128" pos:column="8"/></operator><name pos:line="128" pos:column="8">sensu_tags<pos:position pos:line="128" pos:column="18"/></name> <operator pos:line="128" pos:column="19">!=<pos:position pos:line="128" pos:column="21"/></operator> <name pos:line="128" pos:column="22">NULL<pos:position pos:line="128" pos:column="26"/></name><operator pos:line="128" pos:column="26">)<pos:position pos:line="128" pos:column="27"/></operator> <operator pos:line="128" pos:column="28">&amp;&amp;<pos:position pos:line="128" pos:column="38"/></operator> <operator pos:line="128" pos:column="31">(<pos:position pos:line="128" pos:column="32"/></operator><call><name pos:line="128" pos:column="32">strlen<pos:position pos:line="128" pos:column="38"/></name><argument_list pos:line="128" pos:column="38">(<argument><expr><name pos:line="128" pos:column="39">sensu_tags<pos:position pos:line="128" pos:column="49"/></name></expr></argument>)<pos:position pos:line="128" pos:column="50"/></argument_list></call> <operator pos:line="128" pos:column="51">!=<pos:position pos:line="128" pos:column="53"/></operator> <literal type="number" pos:line="128" pos:column="54">0<pos:position pos:line="128" pos:column="55"/></literal><operator pos:line="128" pos:column="55">)<pos:position pos:line="128" pos:column="56"/></operator></expr>)<pos:position pos:line="128" pos:column="57"/></condition><then pos:line="128" pos:column="57"> <block pos:line="128" pos:column="58">{
    <expr_stmt><expr><name pos:line="129" pos:column="5">res<pos:position pos:line="129" pos:column="8"/></name> <operator pos:line="129" pos:column="9">=<pos:position pos:line="129" pos:column="10"/></operator> <call><name pos:line="129" pos:column="11">my_asprintf<pos:position pos:line="129" pos:column="22"/></name><argument_list pos:line="129" pos:column="22">(<argument><expr><operator pos:line="129" pos:column="23">&amp;<pos:position pos:line="129" pos:column="28"/></operator><name pos:line="129" pos:column="24">temp_str<pos:position pos:line="129" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="34">"%s, %s"<pos:position pos:line="129" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="129" pos:column="44">ret_str<pos:position pos:line="129" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="53">sensu_tags<pos:position pos:line="129" pos:column="63"/></name></expr></argument>)<pos:position pos:line="129" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">free<pos:position pos:line="130" pos:column="9"/></name><argument_list pos:line="130" pos:column="9">(<argument><expr><name pos:line="130" pos:column="10">ret_str<pos:position pos:line="130" pos:column="17"/></name></expr></argument>)<pos:position pos:line="130" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="19"/></expr_stmt>
    <if pos:line="131" pos:column="5">if <condition pos:line="131" pos:column="8">(<expr><name pos:line="131" pos:column="9">res<pos:position pos:line="131" pos:column="12"/></name> <operator pos:line="131" pos:column="13">==<pos:position pos:line="131" pos:column="15"/></operator> <operator pos:line="131" pos:column="16">-<pos:position pos:line="131" pos:column="17"/></operator><literal type="number" pos:line="131" pos:column="17">1<pos:position pos:line="131" pos:column="18"/></literal></expr>)<pos:position pos:line="131" pos:column="19"/></condition><then pos:line="131" pos:column="19"> <block pos:line="131" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="132" pos:column="7">ERROR<pos:position pos:line="132" pos:column="12"/></name><argument_list pos:line="132" pos:column="12">(<argument><expr><literal type="string" pos:line="132" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="132" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="59"/></expr_stmt>
      <return pos:line="133" pos:column="7">return <expr><name pos:line="133" pos:column="14">NULL<pos:position pos:line="133" pos:column="18"/></name></expr>;<pos:position pos:line="133" pos:column="19"/></return>
    }<pos:position pos:line="134" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="135" pos:column="5">ret_str<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <name pos:line="135" pos:column="15">temp_str<pos:position pos:line="135" pos:column="23"/></name></expr>;<pos:position pos:line="135" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="136" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="138" pos:column="3">// incorporate the service name</comment>
  <expr_stmt><expr><call><name pos:line="139" pos:column="3">sensu_format_name2<pos:position pos:line="139" pos:column="21"/></name><argument_list pos:line="139" pos:column="21">(<argument><expr><name pos:line="139" pos:column="22">service_buffer<pos:position pos:line="139" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="139" pos:column="38">sizeof<argument_list pos:line="139" pos:column="44">(<argument><expr><name pos:line="139" pos:column="45">service_buffer<pos:position pos:line="139" pos:column="59"/></name></expr></argument>)<pos:position pos:line="139" pos:column="60"/></argument_list></sizeof></expr></argument>,
                     <comment type="block" pos:line="140" pos:column="22">/* host */</comment> <argument><expr><literal type="string" pos:line="140" pos:column="33">""<pos:position pos:line="140" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="37">n<pos:position pos:line="140" pos:column="38"/></name><operator pos:line="140" pos:column="38">-&gt;<pos:position pos:line="140" pos:column="43"/></operator><name pos:line="140" pos:column="40">plugin<pos:position pos:line="140" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="48">n<pos:position pos:line="140" pos:column="49"/></name><operator pos:line="140" pos:column="49">-&gt;<pos:position pos:line="140" pos:column="54"/></operator><name pos:line="140" pos:column="51">plugin_instance<pos:position pos:line="140" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="68">n<pos:position pos:line="140" pos:column="69"/></name><operator pos:line="140" pos:column="69">-&gt;<pos:position pos:line="140" pos:column="74"/></operator><name pos:line="140" pos:column="71">type<pos:position pos:line="140" pos:column="75"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="141" pos:column="22">n<pos:position pos:line="141" pos:column="23"/></name><operator pos:line="141" pos:column="23">-&gt;<pos:position pos:line="141" pos:column="28"/></operator><name pos:line="141" pos:column="25">type_instance<pos:position pos:line="141" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="40">host<pos:position pos:line="141" pos:column="44"/></name><operator pos:line="141" pos:column="44">-&gt;<pos:position pos:line="141" pos:column="49"/></operator><name pos:line="141" pos:column="46">separator<pos:position pos:line="141" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="57"/></expr_stmt>
  <comment type="line" pos:line="142" pos:column="3">// replace sensu event name chars that are considered illegal</comment>
  <expr_stmt><expr><call><name pos:line="143" pos:column="3">in_place_replace_sensu_name_reserved<pos:position pos:line="143" pos:column="39"/></name><argument_list pos:line="143" pos:column="39">(<argument><expr><name pos:line="143" pos:column="40">service_buffer<pos:position pos:line="143" pos:column="54"/></name></expr></argument>)<pos:position pos:line="143" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="144" pos:column="3">res<pos:position pos:line="144" pos:column="6"/></name> <operator pos:line="144" pos:column="7">=<pos:position pos:line="144" pos:column="8"/></operator> <call><name pos:line="144" pos:column="9">my_asprintf<pos:position pos:line="144" pos:column="20"/></name><argument_list pos:line="144" pos:column="20">(<argument><expr><operator pos:line="144" pos:column="21">&amp;<pos:position pos:line="144" pos:column="26"/></operator><name pos:line="144" pos:column="22">temp_str<pos:position pos:line="144" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="32">"%s, \"name\": \"%s\""<pos:position pos:line="144" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="56">ret_str<pos:position pos:line="144" pos:column="63"/></name></expr></argument>,
                    <argument><expr><operator pos:line="145" pos:column="21">&amp;<pos:position pos:line="145" pos:column="26"/></operator><name><name pos:line="145" pos:column="22">service_buffer<pos:position pos:line="145" pos:column="36"/></name><index pos:line="145" pos:column="36">[<expr><literal type="number" pos:line="145" pos:column="37">1<pos:position pos:line="145" pos:column="38"/></literal></expr>]<pos:position pos:line="145" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="145" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="146" pos:column="3">free<pos:position pos:line="146" pos:column="7"/></name><argument_list pos:line="146" pos:column="7">(<argument><expr><name pos:line="146" pos:column="8">ret_str<pos:position pos:line="146" pos:column="15"/></name></expr></argument>)<pos:position pos:line="146" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="17"/></expr_stmt>
  <if pos:line="147" pos:column="3">if <condition pos:line="147" pos:column="6">(<expr><name pos:line="147" pos:column="7">res<pos:position pos:line="147" pos:column="10"/></name> <operator pos:line="147" pos:column="11">==<pos:position pos:line="147" pos:column="13"/></operator> <operator pos:line="147" pos:column="14">-<pos:position pos:line="147" pos:column="15"/></operator><literal type="number" pos:line="147" pos:column="15">1<pos:position pos:line="147" pos:column="16"/></literal></expr>)<pos:position pos:line="147" pos:column="17"/></condition><then pos:line="147" pos:column="17"> <block pos:line="147" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="148" pos:column="5">ERROR<pos:position pos:line="148" pos:column="10"/></name><argument_list pos:line="148" pos:column="10">(<argument><expr><literal type="string" pos:line="148" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="148" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="57"/></expr_stmt>
    <return pos:line="149" pos:column="5">return <expr><name pos:line="149" pos:column="12">NULL<pos:position pos:line="149" pos:column="16"/></name></expr>;<pos:position pos:line="149" pos:column="17"/></return>
  }<pos:position pos:line="150" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="151" pos:column="3">ret_str<pos:position pos:line="151" pos:column="10"/></name> <operator pos:line="151" pos:column="11">=<pos:position pos:line="151" pos:column="12"/></operator> <name pos:line="151" pos:column="13">temp_str<pos:position pos:line="151" pos:column="21"/></name></expr>;<pos:position pos:line="151" pos:column="22"/></expr_stmt>

  <comment type="line" pos:line="153" pos:column="3">// incorporate the check output</comment>
  <if pos:line="154" pos:column="3">if <condition pos:line="154" pos:column="6">(<expr><name><name pos:line="154" pos:column="7">n<pos:position pos:line="154" pos:column="8"/></name><operator pos:line="154" pos:column="8">-&gt;<pos:position pos:line="154" pos:column="13"/></operator><name pos:line="154" pos:column="10">message<pos:position pos:line="154" pos:column="17"/></name><index pos:line="154" pos:column="17">[<expr><literal type="number" pos:line="154" pos:column="18">0<pos:position pos:line="154" pos:column="19"/></literal></expr>]<pos:position pos:line="154" pos:column="20"/></index></name> <operator pos:line="154" pos:column="21">!=<pos:position pos:line="154" pos:column="23"/></operator> <literal type="number" pos:line="154" pos:column="24">0<pos:position pos:line="154" pos:column="25"/></literal></expr>)<pos:position pos:line="154" pos:column="26"/></condition><then pos:line="154" pos:column="26"> <block pos:line="154" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="155" pos:column="5">char<pos:position pos:line="155" pos:column="9"/></name> <modifier pos:line="155" pos:column="10">*<pos:position pos:line="155" pos:column="11"/></modifier></type><name pos:line="155" pos:column="11">msg<pos:position pos:line="155" pos:column="14"/></name> <init pos:line="155" pos:column="15">= <expr><call><name pos:line="155" pos:column="17">replace_json_reserved<pos:position pos:line="155" pos:column="38"/></name><argument_list pos:line="155" pos:column="38">(<argument><expr><name><name pos:line="155" pos:column="39">n<pos:position pos:line="155" pos:column="40"/></name><operator pos:line="155" pos:column="40">-&gt;<pos:position pos:line="155" pos:column="45"/></operator><name pos:line="155" pos:column="42">message<pos:position pos:line="155" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="155" pos:column="51"/></decl_stmt>
    <if pos:line="156" pos:column="5">if <condition pos:line="156" pos:column="8">(<expr><name pos:line="156" pos:column="9">msg<pos:position pos:line="156" pos:column="12"/></name> <operator pos:line="156" pos:column="13">==<pos:position pos:line="156" pos:column="15"/></operator> <name pos:line="156" pos:column="16">NULL<pos:position pos:line="156" pos:column="20"/></name></expr>)<pos:position pos:line="156" pos:column="21"/></condition><then pos:line="156" pos:column="21"> <block pos:line="156" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="157" pos:column="7">ERROR<pos:position pos:line="157" pos:column="12"/></name><argument_list pos:line="157" pos:column="12">(<argument><expr><literal type="string" pos:line="157" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="157" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">free<pos:position pos:line="158" pos:column="11"/></name><argument_list pos:line="158" pos:column="11">(<argument><expr><name pos:line="158" pos:column="12">ret_str<pos:position pos:line="158" pos:column="19"/></name></expr></argument>)<pos:position pos:line="158" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="21"/></expr_stmt>
      <return pos:line="159" pos:column="7">return <expr><name pos:line="159" pos:column="14">NULL<pos:position pos:line="159" pos:column="18"/></name></expr>;<pos:position pos:line="159" pos:column="19"/></return>
    }<pos:position pos:line="160" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="161" pos:column="5">res<pos:position pos:line="161" pos:column="8"/></name> <operator pos:line="161" pos:column="9">=<pos:position pos:line="161" pos:column="10"/></operator> <call><name pos:line="161" pos:column="11">my_asprintf<pos:position pos:line="161" pos:column="22"/></name><argument_list pos:line="161" pos:column="22">(<argument><expr><operator pos:line="161" pos:column="23">&amp;<pos:position pos:line="161" pos:column="28"/></operator><name pos:line="161" pos:column="24">temp_str<pos:position pos:line="161" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="161" pos:column="34">"%s, \"output\": \"%s - %s\""<pos:position pos:line="161" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="65">ret_str<pos:position pos:line="161" pos:column="72"/></name></expr></argument>,
                      <argument><expr><name pos:line="162" pos:column="23">severity<pos:position pos:line="162" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="33">msg<pos:position pos:line="162" pos:column="36"/></name></expr></argument>)<pos:position pos:line="162" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="163" pos:column="5">free<pos:position pos:line="163" pos:column="9"/></name><argument_list pos:line="163" pos:column="9">(<argument><expr><name pos:line="163" pos:column="10">ret_str<pos:position pos:line="163" pos:column="17"/></name></expr></argument>)<pos:position pos:line="163" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="164" pos:column="5">free<pos:position pos:line="164" pos:column="9"/></name><argument_list pos:line="164" pos:column="9">(<argument><expr><name pos:line="164" pos:column="10">msg<pos:position pos:line="164" pos:column="13"/></name></expr></argument>)<pos:position pos:line="164" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="15"/></expr_stmt>
    <if pos:line="165" pos:column="5">if <condition pos:line="165" pos:column="8">(<expr><name pos:line="165" pos:column="9">res<pos:position pos:line="165" pos:column="12"/></name> <operator pos:line="165" pos:column="13">==<pos:position pos:line="165" pos:column="15"/></operator> <operator pos:line="165" pos:column="16">-<pos:position pos:line="165" pos:column="17"/></operator><literal type="number" pos:line="165" pos:column="17">1<pos:position pos:line="165" pos:column="18"/></literal></expr>)<pos:position pos:line="165" pos:column="19"/></condition><then pos:line="165" pos:column="19"> <block pos:line="165" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">ERROR<pos:position pos:line="166" pos:column="12"/></name><argument_list pos:line="166" pos:column="12">(<argument><expr><literal type="string" pos:line="166" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="166" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="59"/></expr_stmt>
      <return pos:line="167" pos:column="7">return <expr><name pos:line="167" pos:column="14">NULL<pos:position pos:line="167" pos:column="18"/></name></expr>;<pos:position pos:line="167" pos:column="19"/></return>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="169" pos:column="5">ret_str<pos:position pos:line="169" pos:column="12"/></name> <operator pos:line="169" pos:column="13">=<pos:position pos:line="169" pos:column="14"/></operator> <name pos:line="169" pos:column="15">temp_str<pos:position pos:line="169" pos:column="23"/></name></expr>;<pos:position pos:line="169" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="170" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="172" pos:column="3">// Pull in values from threshold and add extra attributes</comment>
  <for pos:line="173" pos:column="3">for <control pos:line="173" pos:column="7">(<init><decl><type><name pos:line="173" pos:column="8">notification_meta_t<pos:position pos:line="173" pos:column="27"/></name> <modifier pos:line="173" pos:column="28">*<pos:position pos:line="173" pos:column="29"/></modifier></type><name pos:line="173" pos:column="29">meta<pos:position pos:line="173" pos:column="33"/></name> <init pos:line="173" pos:column="34">= <expr><name><name pos:line="173" pos:column="36">n<pos:position pos:line="173" pos:column="37"/></name><operator pos:line="173" pos:column="37">-&gt;<pos:position pos:line="173" pos:column="42"/></operator><name pos:line="173" pos:column="39">meta<pos:position pos:line="173" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="173" pos:column="44"/></init> <condition><expr><name pos:line="173" pos:column="45">meta<pos:position pos:line="173" pos:column="49"/></name> <operator pos:line="173" pos:column="50">!=<pos:position pos:line="173" pos:column="52"/></operator> <name pos:line="173" pos:column="53">NULL<pos:position pos:line="173" pos:column="57"/></name></expr>;<pos:position pos:line="173" pos:column="58"/></condition> <incr><expr><name pos:line="173" pos:column="59">meta<pos:position pos:line="173" pos:column="63"/></name> <operator pos:line="173" pos:column="64">=<pos:position pos:line="173" pos:column="65"/></operator> <name><name pos:line="173" pos:column="66">meta<pos:position pos:line="173" pos:column="70"/></name><operator pos:line="173" pos:column="70">-&gt;<pos:position pos:line="173" pos:column="75"/></operator><name pos:line="173" pos:column="72">next<pos:position pos:line="173" pos:column="76"/></name></name></expr></incr>)<pos:position pos:line="173" pos:column="77"/></control> <block pos:line="173" pos:column="78">{
    <if pos:line="174" pos:column="5">if <condition pos:line="174" pos:column="8">(<expr><call><name pos:line="174" pos:column="9">strcasecmp<pos:position pos:line="174" pos:column="19"/></name><argument_list pos:line="174" pos:column="19">(<argument><expr><literal type="string" pos:line="174" pos:column="20">"CurrentValue"<pos:position pos:line="174" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="36">meta<pos:position pos:line="174" pos:column="40"/></name><operator pos:line="174" pos:column="40">-&gt;<pos:position pos:line="174" pos:column="45"/></operator><name pos:line="174" pos:column="42">name<pos:position pos:line="174" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="174" pos:column="47"/></argument_list></call> <operator pos:line="174" pos:column="48">==<pos:position pos:line="174" pos:column="50"/></operator> <literal type="number" pos:line="174" pos:column="51">0<pos:position pos:line="174" pos:column="52"/></literal> <operator pos:line="174" pos:column="53">&amp;&amp;<pos:position pos:line="174" pos:column="63"/></operator>
        <name><name pos:line="175" pos:column="9">meta<pos:position pos:line="175" pos:column="13"/></name><operator pos:line="175" pos:column="13">-&gt;<pos:position pos:line="175" pos:column="18"/></operator><name pos:line="175" pos:column="15">type<pos:position pos:line="175" pos:column="19"/></name></name> <operator pos:line="175" pos:column="20">==<pos:position pos:line="175" pos:column="22"/></operator> <name pos:line="175" pos:column="23">NM_TYPE_DOUBLE<pos:position pos:line="175" pos:column="37"/></name></expr>)<pos:position pos:line="175" pos:column="38"/></condition><then pos:line="175" pos:column="38"> <block pos:line="175" pos:column="39">{
      <expr_stmt><expr><name pos:line="176" pos:column="7">res<pos:position pos:line="176" pos:column="10"/></name> <operator pos:line="176" pos:column="11">=<pos:position pos:line="176" pos:column="12"/></operator> <call><name pos:line="176" pos:column="13">my_asprintf<pos:position pos:line="176" pos:column="24"/></name><argument_list pos:line="176" pos:column="24">(<argument><expr><operator pos:line="176" pos:column="25">&amp;<pos:position pos:line="176" pos:column="30"/></operator><name pos:line="176" pos:column="26">temp_str<pos:position pos:line="176" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="36">"%s, \"current_value\": \"%.8f\""<pos:position pos:line="176" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="176" pos:column="71">ret_str<pos:position pos:line="176" pos:column="78"/></name></expr></argument>,
                        <argument><expr><name><name pos:line="177" pos:column="25">meta<pos:position pos:line="177" pos:column="29"/></name><operator pos:line="177" pos:column="29">-&gt;<pos:position pos:line="177" pos:column="34"/></operator><name pos:line="177" pos:column="31">nm_value<pos:position pos:line="177" pos:column="39"/></name><operator pos:line="177" pos:column="39">.<pos:position pos:line="177" pos:column="40"/></operator><name pos:line="177" pos:column="40">nm_double<pos:position pos:line="177" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="177" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="178" pos:column="7">free<pos:position pos:line="178" pos:column="11"/></name><argument_list pos:line="178" pos:column="11">(<argument><expr><name pos:line="178" pos:column="12">ret_str<pos:position pos:line="178" pos:column="19"/></name></expr></argument>)<pos:position pos:line="178" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="21"/></expr_stmt>
      <if pos:line="179" pos:column="7">if <condition pos:line="179" pos:column="10">(<expr><name pos:line="179" pos:column="11">res<pos:position pos:line="179" pos:column="14"/></name> <operator pos:line="179" pos:column="15">==<pos:position pos:line="179" pos:column="17"/></operator> <operator pos:line="179" pos:column="18">-<pos:position pos:line="179" pos:column="19"/></operator><literal type="number" pos:line="179" pos:column="19">1<pos:position pos:line="179" pos:column="20"/></literal></expr>)<pos:position pos:line="179" pos:column="21"/></condition><then pos:line="179" pos:column="21"> <block pos:line="179" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="180" pos:column="9">ERROR<pos:position pos:line="180" pos:column="14"/></name><argument_list pos:line="180" pos:column="14">(<argument><expr><literal type="string" pos:line="180" pos:column="15">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="180" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="61"/></expr_stmt>
        <return pos:line="181" pos:column="9">return <expr><name pos:line="181" pos:column="16">NULL<pos:position pos:line="181" pos:column="20"/></name></expr>;<pos:position pos:line="181" pos:column="21"/></return>
      }<pos:position pos:line="182" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="183" pos:column="7">ret_str<pos:position pos:line="183" pos:column="14"/></name> <operator pos:line="183" pos:column="15">=<pos:position pos:line="183" pos:column="16"/></operator> <name pos:line="183" pos:column="17">temp_str<pos:position pos:line="183" pos:column="25"/></name></expr>;<pos:position pos:line="183" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="184" pos:column="6"/></block></then></if>
    <if pos:line="185" pos:column="5">if <condition pos:line="185" pos:column="8">(<expr><name><name pos:line="185" pos:column="9">meta<pos:position pos:line="185" pos:column="13"/></name><operator pos:line="185" pos:column="13">-&gt;<pos:position pos:line="185" pos:column="18"/></operator><name pos:line="185" pos:column="15">type<pos:position pos:line="185" pos:column="19"/></name></name> <operator pos:line="185" pos:column="20">==<pos:position pos:line="185" pos:column="22"/></operator> <name pos:line="185" pos:column="23">NM_TYPE_STRING<pos:position pos:line="185" pos:column="37"/></name></expr>)<pos:position pos:line="185" pos:column="38"/></condition><then pos:line="185" pos:column="38"> <block pos:line="185" pos:column="39">{
      <expr_stmt><expr><name pos:line="186" pos:column="7">res<pos:position pos:line="186" pos:column="10"/></name> <operator pos:line="186" pos:column="11">=<pos:position pos:line="186" pos:column="12"/></operator> <call><name pos:line="186" pos:column="13">my_asprintf<pos:position pos:line="186" pos:column="24"/></name><argument_list pos:line="186" pos:column="24">(<argument><expr><operator pos:line="186" pos:column="25">&amp;<pos:position pos:line="186" pos:column="30"/></operator><name pos:line="186" pos:column="26">temp_str<pos:position pos:line="186" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="36">"%s, \"%s\": \"%s\""<pos:position pos:line="186" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="186" pos:column="58">ret_str<pos:position pos:line="186" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="67">meta<pos:position pos:line="186" pos:column="71"/></name><operator pos:line="186" pos:column="71">-&gt;<pos:position pos:line="186" pos:column="76"/></operator><name pos:line="186" pos:column="73">name<pos:position pos:line="186" pos:column="77"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="187" pos:column="25">meta<pos:position pos:line="187" pos:column="29"/></name><operator pos:line="187" pos:column="29">-&gt;<pos:position pos:line="187" pos:column="34"/></operator><name pos:line="187" pos:column="31">nm_value<pos:position pos:line="187" pos:column="39"/></name><operator pos:line="187" pos:column="39">.<pos:position pos:line="187" pos:column="40"/></operator><name pos:line="187" pos:column="40">nm_string<pos:position pos:line="187" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="187" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="188" pos:column="7">free<pos:position pos:line="188" pos:column="11"/></name><argument_list pos:line="188" pos:column="11">(<argument><expr><name pos:line="188" pos:column="12">ret_str<pos:position pos:line="188" pos:column="19"/></name></expr></argument>)<pos:position pos:line="188" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="21"/></expr_stmt>
      <if pos:line="189" pos:column="7">if <condition pos:line="189" pos:column="10">(<expr><name pos:line="189" pos:column="11">res<pos:position pos:line="189" pos:column="14"/></name> <operator pos:line="189" pos:column="15">==<pos:position pos:line="189" pos:column="17"/></operator> <operator pos:line="189" pos:column="18">-<pos:position pos:line="189" pos:column="19"/></operator><literal type="number" pos:line="189" pos:column="19">1<pos:position pos:line="189" pos:column="20"/></literal></expr>)<pos:position pos:line="189" pos:column="21"/></condition><then pos:line="189" pos:column="21"> <block pos:line="189" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="190" pos:column="9">ERROR<pos:position pos:line="190" pos:column="14"/></name><argument_list pos:line="190" pos:column="14">(<argument><expr><literal type="string" pos:line="190" pos:column="15">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="190" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="61"/></expr_stmt>
        <return pos:line="191" pos:column="9">return <expr><name pos:line="191" pos:column="16">NULL<pos:position pos:line="191" pos:column="20"/></name></expr>;<pos:position pos:line="191" pos:column="21"/></return>
      }<pos:position pos:line="192" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="193" pos:column="7">ret_str<pos:position pos:line="193" pos:column="14"/></name> <operator pos:line="193" pos:column="15">=<pos:position pos:line="193" pos:column="16"/></operator> <name pos:line="193" pos:column="17">temp_str<pos:position pos:line="193" pos:column="25"/></name></expr>;<pos:position pos:line="193" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="194" pos:column="6"/></block></then></if>
  }<pos:position pos:line="195" pos:column="4"/></block></for>

  <comment type="line" pos:line="197" pos:column="3">// close the curly bracket</comment>
  <expr_stmt><expr><name pos:line="198" pos:column="3">res<pos:position pos:line="198" pos:column="6"/></name> <operator pos:line="198" pos:column="7">=<pos:position pos:line="198" pos:column="8"/></operator> <call><name pos:line="198" pos:column="9">my_asprintf<pos:position pos:line="198" pos:column="20"/></name><argument_list pos:line="198" pos:column="20">(<argument><expr><operator pos:line="198" pos:column="21">&amp;<pos:position pos:line="198" pos:column="26"/></operator><name pos:line="198" pos:column="22">temp_str<pos:position pos:line="198" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="198" pos:column="32">"%s}\n"<pos:position pos:line="198" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="41">ret_str<pos:position pos:line="198" pos:column="48"/></name></expr></argument>)<pos:position pos:line="198" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="199" pos:column="3">free<pos:position pos:line="199" pos:column="7"/></name><argument_list pos:line="199" pos:column="7">(<argument><expr><name pos:line="199" pos:column="8">ret_str<pos:position pos:line="199" pos:column="15"/></name></expr></argument>)<pos:position pos:line="199" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="17"/></expr_stmt>
  <if pos:line="200" pos:column="3">if <condition pos:line="200" pos:column="6">(<expr><name pos:line="200" pos:column="7">res<pos:position pos:line="200" pos:column="10"/></name> <operator pos:line="200" pos:column="11">==<pos:position pos:line="200" pos:column="13"/></operator> <operator pos:line="200" pos:column="14">-<pos:position pos:line="200" pos:column="15"/></operator><literal type="number" pos:line="200" pos:column="15">1<pos:position pos:line="200" pos:column="16"/></literal></expr>)<pos:position pos:line="200" pos:column="17"/></condition><then pos:line="200" pos:column="17"> <block pos:line="200" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="201" pos:column="5">ERROR<pos:position pos:line="201" pos:column="10"/></name><argument_list pos:line="201" pos:column="10">(<argument><expr><literal type="string" pos:line="201" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="201" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="57"/></expr_stmt>
    <return pos:line="202" pos:column="5">return <expr><name pos:line="202" pos:column="12">NULL<pos:position pos:line="202" pos:column="16"/></name></expr>;<pos:position pos:line="202" pos:column="17"/></return>
  }<pos:position pos:line="203" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="204" pos:column="3">ret_str<pos:position pos:line="204" pos:column="10"/></name> <operator pos:line="204" pos:column="11">=<pos:position pos:line="204" pos:column="12"/></operator> <name pos:line="204" pos:column="13">temp_str<pos:position pos:line="204" pos:column="21"/></name></expr>;<pos:position pos:line="204" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="206" pos:column="3">DEBUG<pos:position pos:line="206" pos:column="8"/></name><argument_list pos:line="206" pos:column="8">(<argument><expr><literal type="string" pos:line="206" pos:column="9">"write_sensu plugin: Successfully created JSON for notification: "<pos:position pos:line="206" pos:column="75"/></literal>
        <literal type="string" pos:line="207" pos:column="9">"host = \"%s\", service = \"%s\", state = \"%s\""<pos:position pos:line="207" pos:column="58"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="208" pos:column="9">n<pos:position pos:line="208" pos:column="10"/></name><operator pos:line="208" pos:column="10">-&gt;<pos:position pos:line="208" pos:column="15"/></operator><name pos:line="208" pos:column="12">host<pos:position pos:line="208" pos:column="16"/></name></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="18">service_buffer<pos:position pos:line="208" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="34">severity<pos:position pos:line="208" pos:column="42"/></name></expr></argument>)<pos:position pos:line="208" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="44"/></expr_stmt>
  <return pos:line="209" pos:column="3">return <expr><name pos:line="209" pos:column="10">ret_str<pos:position pos:line="209" pos:column="17"/></name></expr>;<pos:position pos:line="209" pos:column="18"/></return>
}<pos:position pos:line="210" pos:column="2"/></block></function></unit>
