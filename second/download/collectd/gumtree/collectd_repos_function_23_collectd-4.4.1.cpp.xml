<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_23_collectd-4.4.1.cpp" pos:tabs="8"><function_decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">lt_module<pos:position pos:line="1" pos:column="17"/></name></type>
<name pos:line="2" pos:column="1">sys_shl_open<pos:position pos:line="2" pos:column="13"/></name> <parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">loader_data<pos:position pos:line="2" pos:column="26"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">filename<pos:position pos:line="2" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
     <decl_stmt><decl><type><name pos:line="3" pos:column="6">lt_user_data<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">loader_data<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="4" pos:column="6">const<pos:position pos:line="4" pos:column="11"/></specifier> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">filename<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="6" pos:column="3">static<pos:position pos:line="6" pos:column="9"/></specifier> <type><name pos:line="6" pos:column="10">shl_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">self<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">(<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">shl_t<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">)<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="31">0<pos:position pos:line="6" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">lt_module<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">module<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name pos:line="7" pos:column="22">shl_load<pos:position pos:line="7" pos:column="30"/></name> <argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">filename<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="42">LT_BIND_FLAGS<pos:position pos:line="7" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="57">0L<pos:position pos:line="7" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Since searching for a symbol against a NULL module handle will also
     look in everything else that was already loaded and exported with
     the -E compiler flag, we always cache a handle saved before any
     modules are loaded.  */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">self<pos:position pos:line="13" pos:column="12"/></name></expr>)<pos:position pos:line="13" pos:column="13"/></condition><then pos:line="13" pos:column="13">
    <block pos:line="14" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">lt_ptr<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">address<pos:position pos:line="15" pos:column="21"/></name></decl>;<pos:position pos:line="15" pos:column="22"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">shl_findsym<pos:position pos:line="16" pos:column="18"/></name> <argument_list pos:line="16" pos:column="19">(<argument><expr><operator pos:line="16" pos:column="20">&amp;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="21">self<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="27">"main"<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">TYPE_UNDEFINED<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="51">&amp;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="52">address<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">!<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">filename<pos:position pos:line="19" pos:column="16"/></name></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17">
    <block pos:line="20" pos:column="5">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">module<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">self<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
  <else pos:line="23" pos:column="3">else
    <block pos:line="24" pos:column="5">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">module<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">shl_load<pos:position pos:line="25" pos:column="24"/></name> <argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">filename<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">LT_BIND_FLAGS<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="51">0L<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>

      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><operator pos:line="27" pos:column="11">!<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">module<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19">
	<block pos:line="28" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="29" pos:column="11">LT_DLMUTEX_SETERROR<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><call><name pos:line="29" pos:column="32">LT_DLSTRERROR<pos:position pos:line="29" pos:column="45"/></name> <argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">CANNOT_OPEN<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>

  <return pos:line="33" pos:column="3">return <expr><name pos:line="33" pos:column="10">module<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function_decl></unit>
