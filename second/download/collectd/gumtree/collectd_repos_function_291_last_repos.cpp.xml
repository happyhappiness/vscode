<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_291_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_read_body<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">camqp_config_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">conf<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
                           <parameter><decl><type><name pos:line="2" pos:column="28">size_t<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">body_size<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">content_type<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list> <block pos:line="2" pos:column="72">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">body<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">body_size<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">+<pos:position pos:line="3" pos:column="24"/></operator> <literal type="number" pos:line="3" pos:column="25">1<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">body_ptr<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">received<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">amqp_frame_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">frame<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">body<pos:position pos:line="9" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="19">sizeof<argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">body<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">body_ptr<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <operator pos:line="10" pos:column="14">&amp;<pos:position pos:line="10" pos:column="19"/></operator><name><name pos:line="10" pos:column="15">body<pos:position pos:line="10" pos:column="19"/></name><index pos:line="10" pos:column="19">[<expr><literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr>]<pos:position pos:line="10" pos:column="22"/></index></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">received<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>

  <while pos:line="13" pos:column="3">while <condition pos:line="13" pos:column="9">(<expr><name pos:line="13" pos:column="10">received<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">body_size<pos:position pos:line="13" pos:column="30"/></name></expr>)<pos:position pos:line="13" pos:column="31"/></condition> <block pos:line="13" pos:column="32">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">status<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">amqp_simple_wait_frame<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name><name pos:line="14" pos:column="37">conf<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">-&gt;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="43">connection<pos:position pos:line="14" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="55">&amp;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="56">frame<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">char<pos:position pos:line="16" pos:column="11"/></name></type> <name><name pos:line="16" pos:column="12">errbuf<pos:position pos:line="16" pos:column="18"/></name><index pos:line="16" pos:column="18">[<expr><literal type="number" pos:line="16" pos:column="19">1024<pos:position pos:line="16" pos:column="23"/></literal></expr>]<pos:position pos:line="16" pos:column="24"/></index></name></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><operator pos:line="17" pos:column="17">-<pos:position pos:line="17" pos:column="18"/></operator><literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal><operator pos:line="17" pos:column="19">)<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="21">*<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">status<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">ERROR<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><literal type="string" pos:line="18" pos:column="13">"amqp plugin: amqp_simple_wait_frame failed: %s"<pos:position pos:line="18" pos:column="61"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="19" pos:column="13">sstrerror<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">status<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="31">errbuf<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="39">sizeof<argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">errbuf<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">camqp_close_connection<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">conf<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">status<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">frame<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">frame_type<pos:position pos:line="24" pos:column="25"/></name></name> <operator pos:line="24" pos:column="26">!=<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">AMQP_FRAME_BODY<pos:position pos:line="24" pos:column="44"/></name></expr>)<pos:position pos:line="24" pos:column="45"/></condition><then pos:line="24" pos:column="45"> <block pos:line="24" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">NOTICE<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="string" pos:line="25" pos:column="14">"amqp plugin: Unexpected frame type: %#"<pos:position pos:line="25" pos:column="54"/></literal> <name pos:line="25" pos:column="55">PRIx8<pos:position pos:line="25" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="62">frame<pos:position pos:line="25" pos:column="67"/></name><operator pos:line="25" pos:column="67">.<pos:position pos:line="25" pos:column="68"/></operator><name pos:line="25" pos:column="68">frame_type<pos:position pos:line="25" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="80"/></expr_stmt>
      <return pos:line="26" pos:column="7">return <expr><operator pos:line="26" pos:column="14">-<pos:position pos:line="26" pos:column="15"/></operator><literal type="number" pos:line="26" pos:column="15">1<pos:position pos:line="26" pos:column="16"/></literal></expr>;<pos:position pos:line="26" pos:column="17"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">body_size<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">-<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">received<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">)<pos:position pos:line="29" pos:column="31"/></operator> <operator pos:line="29" pos:column="32">&lt;<pos:position pos:line="29" pos:column="36"/></operator> <name><name pos:line="29" pos:column="34">frame<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">.<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">payload<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">.<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="48">body_fragment<pos:position pos:line="29" pos:column="61"/></name><operator pos:line="29" pos:column="61">.<pos:position pos:line="29" pos:column="62"/></operator><name pos:line="29" pos:column="62">len<pos:position pos:line="29" pos:column="65"/></name></name></expr>)<pos:position pos:line="29" pos:column="66"/></condition><then pos:line="29" pos:column="66"> <block pos:line="29" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">WARNING<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="string" pos:line="30" pos:column="15">"amqp plugin: Body is larger than indicated by header."<pos:position pos:line="30" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">-<pos:position pos:line="31" pos:column="15"/></operator><literal type="number" pos:line="31" pos:column="15">1<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">memcpy<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">body_ptr<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="22">frame<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">payload<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">.<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="36">body_fragment<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">bytes<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>,
           <argument><expr><name><name pos:line="35" pos:column="12">frame<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">payload<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">.<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">body_fragment<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">.<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">len<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">body_ptr<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">+=<pos:position pos:line="36" pos:column="16"/></operator> <name><name pos:line="36" pos:column="17">frame<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">.<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">payload<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">.<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">body_fragment<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">.<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="45">len<pos:position pos:line="36" pos:column="48"/></name></name></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">received<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">+=<pos:position pos:line="37" pos:column="16"/></operator> <name><name pos:line="37" pos:column="17">frame<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">payload<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">.<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">body_fragment<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">.<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="45">len<pos:position pos:line="37" pos:column="48"/></name></name></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></while> <comment type="block" pos:line="38" pos:column="5">/* while (received &lt; body_size) */</comment>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">strcasecmp<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><literal type="string" pos:line="40" pos:column="18">"text/collectd"<pos:position pos:line="40" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">content_type<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call> <operator pos:line="40" pos:column="49">==<pos:position pos:line="40" pos:column="51"/></operator> <literal type="number" pos:line="40" pos:column="52">0<pos:position pos:line="40" pos:column="53"/></literal></expr>)<pos:position pos:line="40" pos:column="54"/></condition><then pos:line="40" pos:column="54"> <block pos:line="40" pos:column="55">{
    <expr_stmt><expr><name pos:line="41" pos:column="5">status<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">cmd_handle_putval<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">stderr<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">body<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">status<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">!=<pos:position pos:line="42" pos:column="18"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="7">ERROR<pos:position pos:line="43" pos:column="12"/></name><argument_list pos:line="43" pos:column="12">(<argument><expr><literal type="string" pos:line="43" pos:column="13">"amqp plugin: cmd_handle_putval failed with status %i."<pos:position pos:line="43" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="70">status<pos:position pos:line="43" pos:column="76"/></name></expr></argument>)<pos:position pos:line="43" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="78"/></expr_stmt></block></then></if>
    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">status<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then> <elseif pos:line="45" pos:column="5">else <if pos:line="45" pos:column="10">if <condition pos:line="45" pos:column="13">(<expr><call><name pos:line="45" pos:column="14">strcasecmp<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"application/json"<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">content_type<pos:position pos:line="45" pos:column="57"/></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call> <operator pos:line="45" pos:column="59">==<pos:position pos:line="45" pos:column="61"/></operator> <literal type="number" pos:line="45" pos:column="62">0<pos:position pos:line="45" pos:column="63"/></literal></expr>)<pos:position pos:line="45" pos:column="64"/></condition><then pos:line="45" pos:column="64"> <block pos:line="45" pos:column="65">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ERROR<pos:position pos:line="46" pos:column="10"/></name><argument_list pos:line="46" pos:column="10">(<argument><expr><literal type="string" pos:line="46" pos:column="11">"amqp plugin: camqp_read_body: Parsing JSON data has not "<pos:position pos:line="46" pos:column="69"/></literal>
          <literal type="string" pos:line="47" pos:column="11">"been implemented yet. FIXME!"<pos:position pos:line="47" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><literal type="number" pos:line="48" pos:column="12">0<pos:position pos:line="48" pos:column="13"/></literal></expr>;<pos:position pos:line="48" pos:column="14"/></return>
  }<pos:position pos:line="49" pos:column="4"/></block></then></if></elseif> <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">ERROR<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><literal type="string" pos:line="50" pos:column="11">"amqp plugin: camqp_read_body: Unknown content type \"%s\"."<pos:position pos:line="50" pos:column="71"/></literal></expr></argument>,
          <argument><expr><name pos:line="51" pos:column="11">content_type<pos:position pos:line="51" pos:column="23"/></name></expr></argument>)<pos:position pos:line="51" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">EINVAL<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="55" pos:column="3">/* not reached */</comment>
  <return pos:line="56" pos:column="3">return <expr><literal type="number" pos:line="56" pos:column="10">0<pos:position pos:line="56" pos:column="11"/></literal></expr>;<pos:position pos:line="56" pos:column="12"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
