<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1919_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><specifier pos:line="1" pos:column="15">const<pos:position pos:line="1" pos:column="20"/></specifier> <name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">cpy_unicode_or_bytes_to_string<pos:position pos:line="1" pos:column="57"/></name><parameter_list pos:line="1" pos:column="57">(<parameter><decl><type><name pos:line="1" pos:column="58">PyObject<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">o<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list> <block pos:line="1" pos:column="72">{
	<if pos:line="2" pos:column="9">if <condition pos:line="2" pos:column="12">(<expr><call><name pos:line="2" pos:column="13">PyUnicode_Check<pos:position pos:line="2" pos:column="28"/></name><argument_list pos:line="2" pos:column="28">(<argument><expr><operator pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">o<pos:position pos:line="2" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="2" pos:column="33"/></condition><then pos:line="2" pos:column="33"> <block pos:line="2" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="3" pos:column="17">PyObject<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">tmp<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
		<expr_stmt><expr><name pos:line="4" pos:column="17">tmp<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">=<pos:position pos:line="4" pos:column="22"/></operator> <call><name pos:line="4" pos:column="23">PyUnicode_AsEncodedString<pos:position pos:line="4" pos:column="48"/></name><argument_list pos:line="4" pos:column="48">(<argument><expr><operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="50">o<pos:position pos:line="4" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="53">NULL<pos:position pos:line="4" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="59">NULL<pos:position pos:line="4" pos:column="63"/></name></expr></argument>)<pos:position pos:line="4" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="65"/></expr_stmt> <comment type="block" pos:line="4" pos:column="66">/* New reference. */</comment>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">tmp<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">==<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
			<block type="pseudo"><return pos:line="6" pos:column="25">return <expr><name pos:line="6" pos:column="32">NULL<pos:position pos:line="6" pos:column="36"/></name></expr>;<pos:position pos:line="6" pos:column="37"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">Py_DECREF<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">o<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">o<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="22">tmp<pos:position pos:line="8" pos:column="25"/></name></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">IS_PY3K<pos:position pos:line="10" pos:column="15"/></name></cpp:ifdef>
	<return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">PyBytes_AsString<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">o<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></return>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
	<return pos:line="13" pos:column="9">return <expr><call><name pos:line="13" pos:column="16">PyString_AsString<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><operator pos:line="13" pos:column="34">*<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">o<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></return>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
