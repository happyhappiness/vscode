<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1497_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sensor_threshold_event_handler<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(
    <parameter><decl><type><name pos:line="2" pos:column="5">ipmi_sensor_t<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">sensor<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="28">enum<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">ipmi_event_dir_e<pos:position pos:line="2" pos:column="49"/></name></name></type> <name pos:line="2" pos:column="50">dir<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
    <parameter><decl><type><name><name pos:line="3" pos:column="5">enum<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ipmi_thresh_e<pos:position pos:line="3" pos:column="23"/></name></name></type> <name pos:line="3" pos:column="24">threshold<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="35">enum<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">ipmi_event_value_dir_e<pos:position pos:line="3" pos:column="62"/></name></name></type> <name pos:line="3" pos:column="63">high_low<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>,
    <parameter><decl><type><name><name pos:line="4" pos:column="5">enum<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">ipmi_value_present_e<pos:position pos:line="4" pos:column="30"/></name></name></type> <name pos:line="4" pos:column="31">value_present<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="46">unsigned<pos:position pos:line="4" pos:column="54"/></name> <name pos:line="4" pos:column="55">int<pos:position pos:line="4" pos:column="58"/></name></type> <name pos:line="4" pos:column="59">raw_value<pos:position pos:line="4" pos:column="68"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="5" pos:column="5">double<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">value<pos:position pos:line="5" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="5" pos:column="19">void<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">cb_data<pos:position pos:line="5" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="5" pos:column="34">ipmi_event_t<pos:position pos:line="5" pos:column="46"/></name> <modifier pos:line="5" pos:column="47">*<pos:position pos:line="5" pos:column="48"/></modifier></type><name pos:line="5" pos:column="48">event<pos:position pos:line="5" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="54"/></parameter_list> <block pos:line="5" pos:column="55">{

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">c_ipmi_instance_t<pos:position pos:line="7" pos:column="20"/></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">st<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">cb_data<pos:position pos:line="7" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* From the IPMI specification Chapter 2: Events.
   * If a callback handles the event, then all future callbacks called due to
   * the event will receive a NULL for the event. So be ready to handle a NULL
   * event in all your event handlers. A NULL may also be passed to an event
   * handler if the callback was not due to an event. */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">event<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">==<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">NULL<pos:position pos:line="14" pos:column="20"/></name></expr>)<pos:position pos:line="14" pos:column="21"/></condition><then pos:line="14" pos:column="21">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">IPMI_EVENT_NOT_HANDLED<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">notification_t<pos:position pos:line="17" pos:column="17"/></name></type> <name pos:line="17" pos:column="18">n<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><call><name pos:line="17" pos:column="22">c_ipmi_notification_init<pos:position pos:line="17" pos:column="46"/></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">st<pos:position pos:line="17" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="51">NOTIF_OKAY<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="63"/></decl_stmt>
  <comment type="block" pos:line="18" pos:column="3">/* offset is a table index and it's represented as enum of strings that are
     organized in the way - high and low for each threshold severity level */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">unsigned<pos:position pos:line="20" pos:column="11"/></name> <name pos:line="20" pos:column="12">int<pos:position pos:line="20" pos:column="15"/></name></type> <name pos:line="20" pos:column="16">offset<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><operator pos:line="20" pos:column="25">(<pos:position pos:line="20" pos:column="26"/></operator><literal type="number" pos:line="20" pos:column="26">2<pos:position pos:line="20" pos:column="27"/></literal> <operator pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">threshold<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator> <operator pos:line="20" pos:column="41">+<pos:position pos:line="20" pos:column="42"/></operator> <name pos:line="20" pos:column="43">high_low<pos:position pos:line="20" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">unsigned<pos:position pos:line="21" pos:column="11"/></name> <name pos:line="21" pos:column="12">int<pos:position pos:line="21" pos:column="15"/></name></type> <name pos:line="21" pos:column="16">event_type<pos:position pos:line="21" pos:column="26"/></name> <init pos:line="21" pos:column="27">= <expr><call><name pos:line="21" pos:column="29">ipmi_sensor_get_event_reading_type<pos:position pos:line="21" pos:column="63"/></name><argument_list pos:line="21" pos:column="63">(<argument><expr><name pos:line="21" pos:column="64">sensor<pos:position pos:line="21" pos:column="70"/></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="72"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">unsigned<pos:position pos:line="22" pos:column="11"/></name> <name pos:line="22" pos:column="12">int<pos:position pos:line="22" pos:column="15"/></name></type> <name pos:line="22" pos:column="16">sensor_type<pos:position pos:line="22" pos:column="27"/></name> <init pos:line="22" pos:column="28">= <expr><call><name pos:line="22" pos:column="30">ipmi_sensor_get_sensor_type<pos:position pos:line="22" pos:column="57"/></name><argument_list pos:line="22" pos:column="57">(<argument><expr><name pos:line="22" pos:column="58">sensor<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="66"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="23" pos:column="3">const<pos:position pos:line="23" pos:column="8"/></specifier> <name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">event_state<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">=
      <expr><call><name pos:line="24" pos:column="7">ipmi_get_reading_name<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">event_type<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">sensor_type<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">offset<pos:position pos:line="24" pos:column="60"/></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="62"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">sensor_get_name<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">sensor<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="27">n<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">type_instance<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="44">sizeof<argument_list pos:line="25" pos:column="50">(<argument><expr><name><name pos:line="25" pos:column="51">n<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">.<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="53">type_instance<pos:position pos:line="25" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="69"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">value_present<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">!=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">IPMI_NO_VALUES_PRESENT<pos:position pos:line="26" pos:column="46"/></name></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="5">snprintf<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name><name pos:line="27" pos:column="14">n<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">message<pos:position pos:line="27" pos:column="23"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="25">sizeof<argument_list pos:line="27" pos:column="31">(<argument><expr><name><name pos:line="27" pos:column="32">n<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">message<pos:position pos:line="27" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></sizeof></expr></argument>,
             <argument><expr><literal type="string" pos:line="28" pos:column="14">"sensor %s received event: %s, value is %f"<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="59">n<pos:position pos:line="28" pos:column="60"/></name><operator pos:line="28" pos:column="60">.<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="61">type_instance<pos:position pos:line="28" pos:column="74"/></name></name></expr></argument>,
             <argument><expr><name pos:line="29" pos:column="14">event_state<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">value<pos:position pos:line="29" pos:column="32"/></name></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt></block></then>
  <else pos:line="30" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="5">snprintf<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name><name pos:line="31" pos:column="14">n<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">message<pos:position pos:line="31" pos:column="23"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="25">sizeof<argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">n<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">.<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">message<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></sizeof></expr></argument>,
             <argument><expr><literal type="string" pos:line="32" pos:column="14">"sensor %s received event: %s, value not provided"<pos:position pos:line="32" pos:column="64"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="33" pos:column="14">n<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">type_instance<pos:position pos:line="33" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">event_state<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">DEBUG<pos:position pos:line="35" pos:column="8"/></name><argument_list pos:line="35" pos:column="8">(<argument><expr><literal type="string" pos:line="35" pos:column="9">"Threshold event received for sensor %s"<pos:position pos:line="35" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="51">n<pos:position pos:line="35" pos:column="52"/></name><operator pos:line="35" pos:column="52">.<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">type_instance<pos:position pos:line="35" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="37" pos:column="3">sstrncpy<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name><name pos:line="37" pos:column="12">n<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">type<pos:position pos:line="37" pos:column="18"/></name></name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="20">ipmi_sensor_get_sensor_type_string<pos:position pos:line="37" pos:column="54"/></name><argument_list pos:line="37" pos:column="54">(<argument><expr><name pos:line="37" pos:column="55">sensor<pos:position pos:line="37" pos:column="61"/></name></expr></argument>)<pos:position pos:line="37" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="64">sizeof<argument_list pos:line="37" pos:column="70">(<argument><expr><name><name pos:line="37" pos:column="71">n<pos:position pos:line="37" pos:column="72"/></name><operator pos:line="37" pos:column="72">.<pos:position pos:line="37" pos:column="73"/></operator><name pos:line="37" pos:column="73">type<pos:position pos:line="37" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">n<pos:position pos:line="38" pos:column="4"/></name><operator pos:line="38" pos:column="4">.<pos:position pos:line="38" pos:column="5"/></operator><name pos:line="38" pos:column="5">severity<pos:position pos:line="38" pos:column="13"/></name></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name pos:line="38" pos:column="16">sensor_convert_threshold_severity<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">threshold<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="39" pos:column="3">n<pos:position pos:line="39" pos:column="4"/></name><operator pos:line="39" pos:column="4">.<pos:position pos:line="39" pos:column="5"/></operator><name pos:line="39" pos:column="5">time<pos:position pos:line="39" pos:column="9"/></name></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <call><name pos:line="39" pos:column="12">NS_TO_CDTIME_T<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><call><name pos:line="39" pos:column="27">ipmi_event_get_timestamp<pos:position pos:line="39" pos:column="51"/></name><argument_list pos:line="39" pos:column="51">(<argument><expr><name pos:line="39" pos:column="52">event<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="60"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">plugin_notification_meta_add_string<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><operator pos:line="41" pos:column="39">&amp;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="40">n<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="43">"severity"<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>,
                                      <argument><expr><call><name pos:line="42" pos:column="39">ipmi_get_threshold_string<pos:position pos:line="42" pos:column="64"/></name><argument_list pos:line="42" pos:column="64">(<argument><expr><name pos:line="42" pos:column="65">threshold<pos:position pos:line="42" pos:column="74"/></name></expr></argument>)<pos:position pos:line="42" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">plugin_notification_meta_add_string<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><operator pos:line="43" pos:column="39">&amp;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="40">n<pos:position pos:line="43" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="43">"direction"<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>,
                                      <argument><expr><call><name pos:line="44" pos:column="39">ipmi_get_value_dir_string<pos:position pos:line="44" pos:column="64"/></name><argument_list pos:line="44" pos:column="64">(<argument><expr><name pos:line="44" pos:column="65">high_low<pos:position pos:line="44" pos:column="73"/></name></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="76"/></expr_stmt>

  <switch pos:line="46" pos:column="3">switch <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">value_present<pos:position pos:line="46" pos:column="24"/></name></expr>)<pos:position pos:line="46" pos:column="25"/></condition> <block pos:line="46" pos:column="26">{
  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">IPMI_BOTH_VALUES_PRESENT<pos:position pos:line="47" pos:column="32"/></name></expr>:<pos:position pos:line="47" pos:column="33"/></case>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">plugin_notification_meta_add_double<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><operator pos:line="48" pos:column="41">&amp;<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="42">n<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="45">"val"<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="52">value<pos:position pos:line="48" pos:column="57"/></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>
  <comment type="block" pos:line="49" pos:column="3">/* both values present, so fall-through to add raw value too */</comment>
  <case pos:line="50" pos:column="3">case <expr><name pos:line="50" pos:column="8">IPMI_RAW_VALUE_PRESENT<pos:position pos:line="50" pos:column="30"/></name></expr>:<pos:position pos:line="50" pos:column="31"/></case> <block pos:line="50" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">char<pos:position pos:line="51" pos:column="9"/></name></type> <name><name pos:line="51" pos:column="10">buf<pos:position pos:line="51" pos:column="13"/></name><index pos:line="51" pos:column="13">[<expr><name pos:line="51" pos:column="14">DATA_MAX_NAME_LEN<pos:position pos:line="51" pos:column="31"/></name></expr>]<pos:position pos:line="51" pos:column="32"/></index></name> <init pos:line="51" pos:column="33">= <expr><block pos:line="51" pos:column="35">{<expr><literal type="number" pos:line="51" pos:column="36">0<pos:position pos:line="51" pos:column="37"/></literal></expr>}<pos:position pos:line="51" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="51" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">snprintf<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">buf<pos:position pos:line="52" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="19">sizeof<argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">buf<pos:position pos:line="52" pos:column="29"/></name></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="32">"0x%2.2x"<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">raw_value<pos:position pos:line="52" pos:column="52"/></name></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">plugin_notification_meta_add_string<pos:position pos:line="53" pos:column="40"/></name><argument_list pos:line="53" pos:column="40">(<argument><expr><operator pos:line="53" pos:column="41">&amp;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="42">n<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="45">"raw"<pos:position pos:line="53" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">buf<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block> <break pos:line="54" pos:column="5">break;<pos:position pos:line="54" pos:column="11"/></break>
  <default pos:line="55" pos:column="3">default:<pos:position pos:line="55" pos:column="11"/></default>
    <break pos:line="56" pos:column="5">break;<pos:position pos:line="56" pos:column="11"/></break>
  }<pos:position pos:line="57" pos:column="4"/></block></switch> <comment type="block" pos:line="57" pos:column="5">/* switch (value_present) */</comment>

  <expr_stmt><expr><call><name pos:line="59" pos:column="3">add_event_common_data<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">n<pos:position pos:line="59" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="29">sensor<pos:position pos:line="59" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="37">dir<pos:position pos:line="59" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="42">event<pos:position pos:line="59" pos:column="47"/></name></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">plugin_dispatch_notification<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><operator pos:line="61" pos:column="32">&amp;<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="33">n<pos:position pos:line="61" pos:column="34"/></name></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">plugin_notification_meta_free<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name><name pos:line="62" pos:column="33">n<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">.<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="35">meta<pos:position pos:line="62" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="64" pos:column="3">/* Delete handled ipmi event from the list */</comment>
  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name><name pos:line="65" pos:column="7">st<pos:position pos:line="65" pos:column="9"/></name><operator pos:line="65" pos:column="9">-&gt;<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="11">sel_clear_event<pos:position pos:line="65" pos:column="26"/></name></name></expr>)<pos:position pos:line="65" pos:column="27"/></condition><then pos:line="65" pos:column="27"> <block pos:line="65" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">ipmi_event_delete<pos:position pos:line="66" pos:column="22"/></name><argument_list pos:line="66" pos:column="22">(<argument><expr><name pos:line="66" pos:column="23">event<pos:position pos:line="66" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="30">NULL<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">NULL<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
    <return pos:line="67" pos:column="5">return <expr><name pos:line="67" pos:column="12">IPMI_EVENT_HANDLED<pos:position pos:line="67" pos:column="30"/></name></expr>;<pos:position pos:line="67" pos:column="31"/></return>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>

  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">IPMI_EVENT_NOT_HANDLED<pos:position pos:line="70" pos:column="32"/></name></expr>;<pos:position pos:line="70" pos:column="33"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
