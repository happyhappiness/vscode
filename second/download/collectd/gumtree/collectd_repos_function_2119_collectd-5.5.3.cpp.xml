<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2119_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">server_open_socket<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">lcc_server_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">srv<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name></type> <name pos:line="3" pos:column="19">ai_hints<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><block pos:line="3" pos:column="30">{ <expr><literal type="number" pos:line="3" pos:column="32">0<pos:position pos:line="3" pos:column="33"/></literal></expr> }<pos:position pos:line="3" pos:column="35"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">addrinfo<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">ai_list<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ai_ptr<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">srv<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">==<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">NULL<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">EINVAL<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">)<pos:position pos:line="9" pos:column="20"/></operator></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">srv<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">fd<pos:position pos:line="11" pos:column="14"/></name></name> <operator pos:line="11" pos:column="15">&gt;=<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">server_close_socket<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">srv<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="14" pos:column="21"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">ai_hints<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">ai_flags<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">|=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">AI_ADDRCONFIG<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">ai_hints<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">.<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">ai_family<pos:position pos:line="17" pos:column="21"/></name></name>   <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">AF_UNSPEC<pos:position pos:line="17" pos:column="35"/></name></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">ai_hints<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">ai_socktype<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">SOCK_DGRAM<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">status<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">getaddrinfo<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">srv<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">node<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="36">srv<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">service<pos:position pos:line="20" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="50">&amp;<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="51">ai_hints<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="61">&amp;<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="62">ai_list<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">status<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">!=<pos:position pos:line="21" pos:column="16"/></operator> <literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">status<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">)<pos:position pos:line="22" pos:column="20"/></operator></expr>;<pos:position pos:line="22" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">assert<pos:position pos:line="23" pos:column="9"/></name> <argument_list pos:line="23" pos:column="10">(<argument><expr><name pos:line="23" pos:column="11">ai_list<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">!=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">NULL<pos:position pos:line="23" pos:column="26"/></name></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>

  <for pos:line="25" pos:column="3">for <control pos:line="25" pos:column="7">(<init><expr><name pos:line="25" pos:column="8">ai_ptr<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">ai_list<pos:position pos:line="25" pos:column="24"/></name></expr>;<pos:position pos:line="25" pos:column="25"/></init> <condition><expr><name pos:line="25" pos:column="26">ai_ptr<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">!=<pos:position pos:line="25" pos:column="35"/></operator> <name pos:line="25" pos:column="36">NULL<pos:position pos:line="25" pos:column="40"/></name></expr>;<pos:position pos:line="25" pos:column="41"/></condition> <incr><expr><name pos:line="25" pos:column="42">ai_ptr<pos:position pos:line="25" pos:column="48"/></name> <operator pos:line="25" pos:column="49">=<pos:position pos:line="25" pos:column="50"/></operator> <name><name pos:line="25" pos:column="51">ai_ptr<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">-&gt;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="59">ai_next<pos:position pos:line="25" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="25" pos:column="67"/></control>
  <block pos:line="26" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">srv<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">-&gt;<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="10">fd<pos:position pos:line="27" pos:column="12"/></name></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">socket<pos:position pos:line="27" pos:column="21"/></name> <argument_list pos:line="27" pos:column="22">(<argument><expr><name><name pos:line="27" pos:column="23">ai_ptr<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">ai_family<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="42">ai_ptr<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">-&gt;<pos:position pos:line="27" pos:column="53"/></operator><name pos:line="27" pos:column="50">ai_socktype<pos:position pos:line="27" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="63">ai_ptr<pos:position pos:line="27" pos:column="69"/></name><operator pos:line="27" pos:column="69">-&gt;<pos:position pos:line="27" pos:column="74"/></operator><name pos:line="27" pos:column="71">ai_protocol<pos:position pos:line="27" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="84"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">srv<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">fd<pos:position pos:line="28" pos:column="16"/></name></name> <operator pos:line="28" pos:column="17">&lt;<pos:position pos:line="28" pos:column="21"/></operator> <literal type="number" pos:line="28" pos:column="19">0<pos:position pos:line="28" pos:column="20"/></literal></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21">
      <block type="pseudo"><continue pos:line="29" pos:column="7">continue;<pos:position pos:line="29" pos:column="16"/></continue></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">ai_ptr<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">ai_family<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">AF_INET<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38">
    <block pos:line="32" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="33" pos:column="7">struct<pos:position pos:line="33" pos:column="13"/></name> <name pos:line="33" pos:column="14">sockaddr_in<pos:position pos:line="33" pos:column="25"/></name></name> <modifier pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></modifier></type><name pos:line="33" pos:column="27">addr<pos:position pos:line="33" pos:column="31"/></name> <init pos:line="33" pos:column="32">= <expr><operator pos:line="33" pos:column="34">(<pos:position pos:line="33" pos:column="35"/></operator>struct <name pos:line="33" pos:column="42">sockaddr_in<pos:position pos:line="33" pos:column="53"/></name> <operator pos:line="33" pos:column="54">*<pos:position pos:line="33" pos:column="55"/></operator><operator pos:line="33" pos:column="55">)<pos:position pos:line="33" pos:column="56"/></operator> <name><name pos:line="33" pos:column="57">ai_ptr<pos:position pos:line="33" pos:column="63"/></name><operator pos:line="33" pos:column="63">-&gt;<pos:position pos:line="33" pos:column="68"/></operator><name pos:line="33" pos:column="65">ai_addr<pos:position pos:line="33" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="73"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">int<pos:position pos:line="34" pos:column="10"/></name></type> <name pos:line="34" pos:column="11">optname<pos:position pos:line="34" pos:column="18"/></name></decl>;<pos:position pos:line="34" pos:column="19"/></decl_stmt>

      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><call><name pos:line="36" pos:column="11">IN_MULTICAST<pos:position pos:line="36" pos:column="23"/></name> <argument_list pos:line="36" pos:column="24">(<argument><expr><call><name pos:line="36" pos:column="25">ntohl<pos:position pos:line="36" pos:column="30"/></name> <argument_list pos:line="36" pos:column="31">(<argument><expr><name><name pos:line="36" pos:column="32">addr<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">sin_addr<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">.<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">s_addr<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">optname<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">IP_MULTICAST_TTL<pos:position pos:line="37" pos:column="35"/></name></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt></block></then>
      <else pos:line="38" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">optname<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">IP_TTL<pos:position pos:line="39" pos:column="25"/></name></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="41" pos:column="7">status<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">setsockopt<pos:position pos:line="41" pos:column="26"/></name> <argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">srv<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">fd<pos:position pos:line="41" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">IPPROTO_IP<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">optname<pos:position pos:line="41" pos:column="56"/></name></expr></argument>,
          <argument><expr><operator pos:line="42" pos:column="11">&amp;<pos:position pos:line="42" pos:column="16"/></operator><name><name pos:line="42" pos:column="12">srv<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">ttl<pos:position pos:line="42" pos:column="20"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="22">sizeof <argument_list pos:line="42" pos:column="29">(<argument><expr><name><name pos:line="42" pos:column="30">srv<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">ttl<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><name><name pos:line="44" pos:column="14">ai_ptr<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">-&gt;<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="22">ai_family<pos:position pos:line="44" pos:column="31"/></name></name> <operator pos:line="44" pos:column="32">==<pos:position pos:line="44" pos:column="34"/></operator> <name pos:line="44" pos:column="35">AF_INET6<pos:position pos:line="44" pos:column="43"/></name></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44">
    <block pos:line="45" pos:column="5">{
      <comment type="block" pos:line="46" pos:column="7">/* Useful example: http://gsyc.escet.urjc.es/~eva/IPv6-web/examples/mcast.html */</comment>
      <decl_stmt><decl><type><name><name pos:line="47" pos:column="7">struct<pos:position pos:line="47" pos:column="13"/></name> <name pos:line="47" pos:column="14">sockaddr_in6<pos:position pos:line="47" pos:column="26"/></name></name> <modifier pos:line="47" pos:column="27">*<pos:position pos:line="47" pos:column="28"/></modifier></type><name pos:line="47" pos:column="28">addr<pos:position pos:line="47" pos:column="32"/></name> <init pos:line="47" pos:column="33">= <expr><operator pos:line="47" pos:column="35">(<pos:position pos:line="47" pos:column="36"/></operator>struct <name pos:line="47" pos:column="43">sockaddr_in6<pos:position pos:line="47" pos:column="55"/></name> <operator pos:line="47" pos:column="56">*<pos:position pos:line="47" pos:column="57"/></operator><operator pos:line="47" pos:column="57">)<pos:position pos:line="47" pos:column="58"/></operator> <name><name pos:line="47" pos:column="59">ai_ptr<pos:position pos:line="47" pos:column="65"/></name><operator pos:line="47" pos:column="65">-&gt;<pos:position pos:line="47" pos:column="70"/></operator><name pos:line="47" pos:column="67">ai_addr<pos:position pos:line="47" pos:column="74"/></name></name></expr></init></decl>;<pos:position pos:line="47" pos:column="75"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">int<pos:position pos:line="48" pos:column="10"/></name></type> <name pos:line="48" pos:column="11">optname<pos:position pos:line="48" pos:column="18"/></name></decl>;<pos:position pos:line="48" pos:column="19"/></decl_stmt>

      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><call><name pos:line="50" pos:column="11">IN6_IS_ADDR_MULTICAST<pos:position pos:line="50" pos:column="32"/></name> <argument_list pos:line="50" pos:column="33">(<argument><expr><operator pos:line="50" pos:column="34">&amp;<pos:position pos:line="50" pos:column="39"/></operator><name><name pos:line="50" pos:column="35">addr<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">sin6_addr<pos:position pos:line="50" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="52"/></condition><then pos:line="50" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="9">optname<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">IPV6_MULTICAST_HOPS<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt></block></then>
      <else pos:line="52" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">optname<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">IPV6_UNICAST_HOPS<pos:position pos:line="53" pos:column="36"/></name></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="55" pos:column="7">status<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <call><name pos:line="55" pos:column="16">setsockopt<pos:position pos:line="55" pos:column="26"/></name> <argument_list pos:line="55" pos:column="27">(<argument><expr><name><name pos:line="55" pos:column="28">srv<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">fd<pos:position pos:line="55" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="37">IPPROTO_IPV6<pos:position pos:line="55" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="51">optname<pos:position pos:line="55" pos:column="58"/></name></expr></argument>,
          <argument><expr><operator pos:line="56" pos:column="11">&amp;<pos:position pos:line="56" pos:column="16"/></operator><name><name pos:line="56" pos:column="12">srv<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">-&gt;<pos:position pos:line="56" pos:column="20"/></operator><name pos:line="56" pos:column="17">ttl<pos:position pos:line="56" pos:column="20"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="22">sizeof <argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">srv<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">-&gt;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="35">ttl<pos:position pos:line="56" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">status<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">!=<pos:position pos:line="58" pos:column="18"/></operator> <literal type="number" pos:line="58" pos:column="19">0<pos:position pos:line="58" pos:column="20"/></literal></expr>)<pos:position pos:line="58" pos:column="21"/></condition><then pos:line="58" pos:column="21">
    <block pos:line="59" pos:column="5">{
      <comment type="block" pos:line="60" pos:column="7">/* setsockopt failed. */</comment>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">close<pos:position pos:line="61" pos:column="12"/></name> <argument_list pos:line="61" pos:column="13">(<argument><expr><name><name pos:line="61" pos:column="14">srv<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">fd<pos:position pos:line="61" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">srv<pos:position pos:line="62" pos:column="10"/></name><operator pos:line="62" pos:column="10">-&gt;<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="12">fd<pos:position pos:line="62" pos:column="14"/></name></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <operator pos:line="62" pos:column="17">-<pos:position pos:line="62" pos:column="18"/></operator><literal type="number" pos:line="62" pos:column="18">1<pos:position pos:line="62" pos:column="19"/></literal></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>
      <continue pos:line="63" pos:column="7">continue;<pos:position pos:line="63" pos:column="16"/></continue>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="66" pos:column="5">srv<pos:position pos:line="66" pos:column="8"/></name><operator pos:line="66" pos:column="8">-&gt;<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="10">sa<pos:position pos:line="66" pos:column="12"/></name></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <call><name pos:line="66" pos:column="15">malloc<pos:position pos:line="66" pos:column="21"/></name> <argument_list pos:line="66" pos:column="22">(<argument><expr><name><name pos:line="66" pos:column="23">ai_ptr<pos:position pos:line="66" pos:column="29"/></name><operator pos:line="66" pos:column="29">-&gt;<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="31">ai_addrlen<pos:position pos:line="66" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name><name pos:line="67" pos:column="9">srv<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">sa<pos:position pos:line="67" pos:column="16"/></name></name> <operator pos:line="67" pos:column="17">==<pos:position pos:line="67" pos:column="19"/></operator> <name pos:line="67" pos:column="20">NULL<pos:position pos:line="67" pos:column="24"/></name></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25">
    <block pos:line="68" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">close<pos:position pos:line="69" pos:column="12"/></name> <argument_list pos:line="69" pos:column="13">(<argument><expr><name><name pos:line="69" pos:column="14">srv<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">-&gt;<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="19">fd<pos:position pos:line="69" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="70" pos:column="7">srv<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">fd<pos:position pos:line="70" pos:column="14"/></name></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <operator pos:line="70" pos:column="17">-<pos:position pos:line="70" pos:column="18"/></operator><literal type="number" pos:line="70" pos:column="18">1<pos:position pos:line="70" pos:column="19"/></literal></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt>
      <continue pos:line="71" pos:column="7">continue;<pos:position pos:line="71" pos:column="16"/></continue>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="74" pos:column="5">memcpy<pos:position pos:line="74" pos:column="11"/></name> <argument_list pos:line="74" pos:column="12">(<argument><expr><name><name pos:line="74" pos:column="13">srv<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">sa<pos:position pos:line="74" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="22">ai_ptr<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">ai_addr<pos:position pos:line="74" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="39">ai_ptr<pos:position pos:line="74" pos:column="45"/></name><operator pos:line="74" pos:column="45">-&gt;<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="47">ai_addrlen<pos:position pos:line="74" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">srv<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">sa_len<pos:position pos:line="75" pos:column="16"/></name></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <name><name pos:line="75" pos:column="19">ai_ptr<pos:position pos:line="75" pos:column="25"/></name><operator pos:line="75" pos:column="25">-&gt;<pos:position pos:line="75" pos:column="30"/></operator><name pos:line="75" pos:column="27">ai_addrlen<pos:position pos:line="75" pos:column="37"/></name></name></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt>
    <break pos:line="76" pos:column="5">break;<pos:position pos:line="76" pos:column="11"/></break>
  }<pos:position pos:line="77" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="79" pos:column="3">freeaddrinfo<pos:position pos:line="79" pos:column="15"/></name> <argument_list pos:line="79" pos:column="16">(<argument><expr><name pos:line="79" pos:column="17">ai_list<pos:position pos:line="79" pos:column="24"/></name></expr></argument>)<pos:position pos:line="79" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="26"/></expr_stmt>

  <if pos:line="81" pos:column="3">if <condition pos:line="81" pos:column="6">(<expr><name><name pos:line="81" pos:column="7">srv<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">fd<pos:position pos:line="81" pos:column="14"/></name></name> <operator pos:line="81" pos:column="15">&lt;<pos:position pos:line="81" pos:column="19"/></operator> <literal type="number" pos:line="81" pos:column="17">0<pos:position pos:line="81" pos:column="18"/></literal></expr>)<pos:position pos:line="81" pos:column="19"/></condition><then pos:line="81" pos:column="19">
    <block type="pseudo"><return pos:line="82" pos:column="5">return <expr><operator pos:line="82" pos:column="12">(<pos:position pos:line="82" pos:column="13"/></operator><operator pos:line="82" pos:column="13">-<pos:position pos:line="82" pos:column="14"/></operator><literal type="number" pos:line="82" pos:column="14">1<pos:position pos:line="82" pos:column="15"/></literal><operator pos:line="82" pos:column="15">)<pos:position pos:line="82" pos:column="16"/></operator></expr>;<pos:position pos:line="82" pos:column="17"/></return></block></then></if>
  <return pos:line="83" pos:column="3">return <expr><operator pos:line="83" pos:column="10">(<pos:position pos:line="83" pos:column="11"/></operator><literal type="number" pos:line="83" pos:column="11">0<pos:position pos:line="83" pos:column="12"/></literal><operator pos:line="83" pos:column="12">)<pos:position pos:line="83" pos:column="13"/></operator></expr>;<pos:position pos:line="83" pos:column="14"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
