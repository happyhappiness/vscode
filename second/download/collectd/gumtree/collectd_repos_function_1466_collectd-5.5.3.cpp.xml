<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1466_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_write<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">data_set_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">ds<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="48">/* {{{ */</comment>
	      <parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">value_list_t<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">vl<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="3" pos:column="15">user_data_t<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">ud<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>			 <name pos:line="5" pos:column="34">status<pos:position pos:line="5" pos:column="40"/></name> <init pos:line="5" pos:column="41">= <expr><literal type="number" pos:line="5" pos:column="43">0<pos:position pos:line="5" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type>			 <name><name pos:line="6" pos:column="34">statuses<pos:position pos:line="6" pos:column="42"/></name><index pos:line="6" pos:column="42">[<expr><name><name pos:line="6" pos:column="43">vl<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">values_len<pos:position pos:line="6" pos:column="57"/></name></name></expr>]<pos:position pos:line="6" pos:column="58"/></index></name></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">riemann_host<pos:position pos:line="7" pos:column="28"/></name></name>	<modifier pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></modifier></type><name pos:line="7" pos:column="34">host<pos:position pos:line="7" pos:column="38"/></name> <init pos:line="7" pos:column="39">= <expr><name><name pos:line="7" pos:column="41">ud<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">data<pos:position pos:line="7" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">Msg<pos:position pos:line="8" pos:column="12"/></name>			<modifier pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></modifier></type><name pos:line="8" pos:column="34">msg<pos:position pos:line="8" pos:column="37"/></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">host<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">check_thresholds<pos:position pos:line="10" pos:column="35"/></name></name></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">write_riemann_threshold_check<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><name pos:line="11" pos:column="47">ds<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">vl<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">statuses<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">host<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">use_tcp<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal> <operator pos:line="13" pos:column="28">&amp;&amp;<pos:position pos:line="13" pos:column="38"/></operator> <name><name pos:line="13" pos:column="31">host<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">batch_mode<pos:position pos:line="13" pos:column="47"/></name></name></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48"> <block pos:line="13" pos:column="49">{

        <expr_stmt><expr><call><name pos:line="15" pos:column="9">riemann_batch_add_value_list<pos:position pos:line="15" pos:column="37"/></name> <argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">host<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">ds<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">vl<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">statuses<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt>


    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else <block pos:line="18" pos:column="12">{

        <expr_stmt><expr><name pos:line="20" pos:column="9">msg<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">riemann_value_list_to_protobuf<pos:position pos:line="20" pos:column="45"/></name> <argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">host<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">ds<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">vl<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">statuses<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">msg<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">==<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
            <block type="pseudo"><return pos:line="22" pos:column="13">return <expr><operator pos:line="22" pos:column="20">(<pos:position pos:line="22" pos:column="21"/></operator><operator pos:line="22" pos:column="21">-<pos:position pos:line="22" pos:column="22"/></operator><literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal><operator pos:line="22" pos:column="23">)<pos:position pos:line="22" pos:column="24"/></operator></expr>;<pos:position pos:line="22" pos:column="25"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="24" pos:column="9">status<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">riemann_send<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">host<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">msg<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">status<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">!=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="13">ERROR<pos:position pos:line="26" pos:column="18"/></name> <argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"write_riemann plugin: riemann_send failed with status %i"<pos:position pos:line="26" pos:column="78"/></literal></expr></argument>,
                   <argument><expr><name pos:line="27" pos:column="20">status<pos:position pos:line="27" pos:column="26"/></name></expr></argument>)<pos:position pos:line="27" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">riemann_msg_protobuf_free<pos:position pos:line="29" pos:column="34"/></name> <argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">msg<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">status<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
