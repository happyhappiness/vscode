<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_941_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">conn_read_netlink<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list> <block pos:line="1" pos:column="36">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><name pos:line="2" pos:column="5">HAVE_STRUCT_LINUX_INET_DIAG_REQ<pos:position pos:line="2" pos:column="36"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">inet_diag_msg<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">r<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><literal type="number" pos:line="5" pos:column="12">8192<pos:position pos:line="5" pos:column="16"/></literal></expr>]<pos:position pos:line="5" pos:column="17"/></index></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* If this fails, it's likely a permission problem. We'll fall back to
   * reading this information from files below. */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">fd<pos:position pos:line="9" pos:column="5"/></name> <operator pos:line="9" pos:column="6">=<pos:position pos:line="9" pos:column="7"/></operator> <call><name pos:line="9" pos:column="8">socket<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">AF_NETLINK<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">SOCK_RAW<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">NETLINK_INET_DIAG<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">fd<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">&lt;<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block pos:line="10" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ERROR<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><literal type="string" pos:line="11" pos:column="11">"tcpconns plugin: conn_read_netlink: socket(AF_NETLINK, SOCK_RAW, "<pos:position pos:line="11" pos:column="78"/></literal>
          <literal type="string" pos:line="12" pos:column="11">"NETLINK_INET_DIAG) failed: %s"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="13" pos:column="11">sstrerror<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">errno<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">buf<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="33">sizeof<argument_list pos:line="13" pos:column="39">(<argument><expr><name pos:line="13" pos:column="40">buf<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">sockaddr_nl<pos:position pos:line="17" pos:column="21"/></name></name></type> <name pos:line="17" pos:column="22">nladdr<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><block pos:line="17" pos:column="31">{<expr><operator pos:line="17" pos:column="32">.<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">nl_family<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">=<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">AF_NETLINK<pos:position pos:line="17" pos:column="55"/></name></expr>}<pos:position pos:line="17" pos:column="56"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="57"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">nlreq<pos:position pos:line="19" pos:column="15"/></name></name></type> <name pos:line="19" pos:column="16">req<pos:position pos:line="19" pos:column="19"/></name> <init pos:line="19" pos:column="20">= <expr><block pos:line="19" pos:column="22">{
      <expr><operator pos:line="20" pos:column="7">.<pos:position pos:line="20" pos:column="8"/></operator><name><name pos:line="20" pos:column="8">nlh<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">nlmsg_len<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <sizeof pos:line="20" pos:column="24">sizeof<argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">req<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></sizeof></expr>,
      <expr><operator pos:line="21" pos:column="7">.<pos:position pos:line="21" pos:column="8"/></operator><name><name pos:line="21" pos:column="8">nlh<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">.<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">nlmsg_type<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">TCPDIAG_GETSOCK<pos:position pos:line="21" pos:column="40"/></name></expr>,
      <comment type="block" pos:line="22" pos:column="7">/* NLM_F_ROOT: return the complete table instead of a single entry.
       * NLM_F_MATCH: return all entries matching criteria (not implemented)
       * NLM_F_REQUEST: must be set on all request messages */</comment>
      <expr><operator pos:line="25" pos:column="7">.<pos:position pos:line="25" pos:column="8"/></operator><name><name pos:line="25" pos:column="8">nlh<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">.<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">nlmsg_flags<pos:position pos:line="25" pos:column="23"/></name></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">NLM_F_ROOT<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">|<pos:position pos:line="25" pos:column="38"/></operator> <name pos:line="25" pos:column="39">NLM_F_MATCH<pos:position pos:line="25" pos:column="50"/></name> <operator pos:line="25" pos:column="51">|<pos:position pos:line="25" pos:column="52"/></operator> <name pos:line="25" pos:column="53">NLM_F_REQUEST<pos:position pos:line="25" pos:column="66"/></name></expr>,
      <expr><operator pos:line="26" pos:column="7">.<pos:position pos:line="26" pos:column="8"/></operator><name><name pos:line="26" pos:column="8">nlh<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">nlmsg_pid<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>,
      <comment type="block" pos:line="27" pos:column="7">/* The sequence_number is used to track our messages. Since netlink is not
       * reliable, we don't want to end up with a corrupt or incomplete old
       * message in case the system is/was out of memory. */</comment>
      <expr><operator pos:line="30" pos:column="7">.<pos:position pos:line="30" pos:column="8"/></operator><name><name pos:line="30" pos:column="8">nlh<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">nlmsg_seq<pos:position pos:line="30" pos:column="21"/></name></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <operator pos:line="30" pos:column="24">++<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">sequence_number<pos:position pos:line="30" pos:column="41"/></name></expr>,
      <expr><operator pos:line="31" pos:column="7">.<pos:position pos:line="31" pos:column="8"/></operator><name><name pos:line="31" pos:column="8">r<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">.<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">idiag_family<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">AF_INET<pos:position pos:line="31" pos:column="32"/></name></expr>,
      <expr><operator pos:line="32" pos:column="7">.<pos:position pos:line="32" pos:column="8"/></operator><name><name pos:line="32" pos:column="8">r<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">.<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">idiag_states<pos:position pos:line="32" pos:column="22"/></name></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">0xfff<pos:position pos:line="32" pos:column="30"/></literal></expr>,
      <expr><operator pos:line="33" pos:column="7">.<pos:position pos:line="33" pos:column="8"/></operator><name><name pos:line="33" pos:column="8">r<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">.<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">idiag_ext<pos:position pos:line="33" pos:column="19"/></name></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <literal type="number" pos:line="33" pos:column="22">0<pos:position pos:line="33" pos:column="23"/></literal></expr>}<pos:position pos:line="33" pos:column="24"/></block></expr></init></decl>;<pos:position pos:line="33" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="35" pos:column="3">struct<pos:position pos:line="35" pos:column="9"/></name> <name pos:line="35" pos:column="10">iovec<pos:position pos:line="35" pos:column="15"/></name></name></type> <name pos:line="35" pos:column="16">iov<pos:position pos:line="35" pos:column="19"/></name> <init pos:line="35" pos:column="20">= <expr><block pos:line="35" pos:column="22">{<expr><operator pos:line="35" pos:column="23">.<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="24">iov_base<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <operator pos:line="35" pos:column="35">&amp;<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="36">req<pos:position pos:line="35" pos:column="39"/></name></expr>, <expr><operator pos:line="35" pos:column="41">.<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="42">iov_len<pos:position pos:line="35" pos:column="49"/></name> <operator pos:line="35" pos:column="50">=<pos:position pos:line="35" pos:column="51"/></operator> sizeof<operator pos:line="35" pos:column="58">(<pos:position pos:line="35" pos:column="59"/></operator><name pos:line="35" pos:column="59">req<pos:position pos:line="35" pos:column="62"/></name><operator pos:line="35" pos:column="62">)<pos:position pos:line="35" pos:column="63"/></operator></expr>}<pos:position pos:line="35" pos:column="64"/></block></expr></init></decl>;<pos:position pos:line="35" pos:column="65"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="37" pos:column="3">struct<pos:position pos:line="37" pos:column="9"/></name> <name pos:line="37" pos:column="10">msghdr<pos:position pos:line="37" pos:column="16"/></name></name></type> <name pos:line="37" pos:column="17">msg<pos:position pos:line="37" pos:column="20"/></name> <init pos:line="37" pos:column="21">= <expr><block pos:line="37" pos:column="23">{<expr><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">msg_name<pos:position pos:line="37" pos:column="33"/></name> <operator pos:line="37" pos:column="34">=<pos:position pos:line="37" pos:column="35"/></operator> <operator pos:line="37" pos:column="36">(<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">void<pos:position pos:line="37" pos:column="41"/></name> <operator pos:line="37" pos:column="42">*<pos:position pos:line="37" pos:column="43"/></operator><operator pos:line="37" pos:column="43">)<pos:position pos:line="37" pos:column="44"/></operator><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="45">nladdr<pos:position pos:line="37" pos:column="51"/></name></expr>,
                       <expr><operator pos:line="38" pos:column="24">.<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">msg_namelen<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">=<pos:position pos:line="38" pos:column="38"/></operator> <sizeof pos:line="38" pos:column="39">sizeof<argument_list pos:line="38" pos:column="45">(<argument><expr><name pos:line="38" pos:column="46">nladdr<pos:position pos:line="38" pos:column="52"/></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></sizeof></expr>,
                       <expr><operator pos:line="39" pos:column="24">.<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">msg_iov<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <operator pos:line="39" pos:column="35">&amp;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="36">iov<pos:position pos:line="39" pos:column="39"/></name></expr>,
                       <expr><operator pos:line="40" pos:column="24">.<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">msg_iovlen<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <literal type="number" pos:line="40" pos:column="38">1<pos:position pos:line="40" pos:column="39"/></literal></expr>}<pos:position pos:line="40" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="40" pos:column="41"/></decl_stmt>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><call><name pos:line="42" pos:column="7">sendmsg<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">fd<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="19">&amp;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="20">msg<pos:position pos:line="42" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="25">0<pos:position pos:line="42" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call> <operator pos:line="42" pos:column="28">&lt;<pos:position pos:line="42" pos:column="32"/></operator> <literal type="number" pos:line="42" pos:column="30">0<pos:position pos:line="42" pos:column="31"/></literal></expr>)<pos:position pos:line="42" pos:column="32"/></condition><then pos:line="42" pos:column="32"> <block pos:line="42" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">ERROR<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><literal type="string" pos:line="43" pos:column="11">"tcpconns plugin: conn_read_netlink: sendmsg(2) failed: %s"<pos:position pos:line="43" pos:column="70"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="44" pos:column="11">sstrerror<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">errno<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="28">buf<pos:position pos:line="44" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="33">sizeof<argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">buf<pos:position pos:line="44" pos:column="43"/></name></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">close<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">fd<pos:position pos:line="45" pos:column="13"/></name></expr></argument>)<pos:position pos:line="45" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><operator pos:line="46" pos:column="12">-<pos:position pos:line="46" pos:column="13"/></operator><literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="49" pos:column="3">iov<pos:position pos:line="49" pos:column="6"/></name><operator pos:line="49" pos:column="6">.<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">iov_base<pos:position pos:line="49" pos:column="15"/></name></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">buf<pos:position pos:line="49" pos:column="21"/></name></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">iov<pos:position pos:line="50" pos:column="6"/></name><operator pos:line="50" pos:column="6">.<pos:position pos:line="50" pos:column="7"/></operator><name pos:line="50" pos:column="7">iov_len<pos:position pos:line="50" pos:column="14"/></name></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <sizeof pos:line="50" pos:column="17">sizeof<argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">buf<pos:position pos:line="50" pos:column="27"/></name></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>

  <while pos:line="52" pos:column="3">while <condition pos:line="52" pos:column="9">(<expr><literal type="number" pos:line="52" pos:column="10">1<pos:position pos:line="52" pos:column="11"/></literal></expr>)<pos:position pos:line="52" pos:column="12"/></condition> <block pos:line="52" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="53" pos:column="5">int<pos:position pos:line="53" pos:column="8"/></name></type> <name pos:line="53" pos:column="9">status<pos:position pos:line="53" pos:column="15"/></name></decl>;<pos:position pos:line="53" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="54" pos:column="5">struct<pos:position pos:line="54" pos:column="11"/></name> <name pos:line="54" pos:column="12">nlmsghdr<pos:position pos:line="54" pos:column="20"/></name></name> <modifier pos:line="54" pos:column="21">*<pos:position pos:line="54" pos:column="22"/></modifier></type><name pos:line="54" pos:column="22">h<pos:position pos:line="54" pos:column="23"/></name></decl>;<pos:position pos:line="54" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">memset<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><operator pos:line="56" pos:column="12">&amp;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="13">msg<pos:position pos:line="56" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="21">sizeof<argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">msg<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">msg<pos:position pos:line="57" pos:column="8"/></name><operator pos:line="57" pos:column="8">.<pos:position pos:line="57" pos:column="9"/></operator><name pos:line="57" pos:column="9">msg_name<pos:position pos:line="57" pos:column="17"/></name></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <operator pos:line="57" pos:column="20">(<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">void<pos:position pos:line="57" pos:column="25"/></name> <operator pos:line="57" pos:column="26">*<pos:position pos:line="57" pos:column="27"/></operator><operator pos:line="57" pos:column="27">)<pos:position pos:line="57" pos:column="28"/></operator><operator pos:line="57" pos:column="28">&amp;<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="29">nladdr<pos:position pos:line="57" pos:column="35"/></name></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">msg<pos:position pos:line="58" pos:column="8"/></name><operator pos:line="58" pos:column="8">.<pos:position pos:line="58" pos:column="9"/></operator><name pos:line="58" pos:column="9">msg_namelen<pos:position pos:line="58" pos:column="20"/></name></name> <operator pos:line="58" pos:column="21">=<pos:position pos:line="58" pos:column="22"/></operator> <sizeof pos:line="58" pos:column="23">sizeof<argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">nladdr<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">msg<pos:position pos:line="59" pos:column="8"/></name><operator pos:line="59" pos:column="8">.<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">msg_iov<pos:position pos:line="59" pos:column="16"/></name></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <operator pos:line="59" pos:column="19">&amp;<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="20">iov<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">msg<pos:position pos:line="60" pos:column="8"/></name><operator pos:line="60" pos:column="8">.<pos:position pos:line="60" pos:column="9"/></operator><name pos:line="60" pos:column="9">msg_iovlen<pos:position pos:line="60" pos:column="19"/></name></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <literal type="number" pos:line="60" pos:column="22">1<pos:position pos:line="60" pos:column="23"/></literal></expr>;<pos:position pos:line="60" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="62" pos:column="5">status<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <call><name pos:line="62" pos:column="14">recvmsg<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">fd<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="26">(<pos:position pos:line="62" pos:column="27"/></operator><name pos:line="62" pos:column="27">void<pos:position pos:line="62" pos:column="31"/></name> <operator pos:line="62" pos:column="32">*<pos:position pos:line="62" pos:column="33"/></operator><operator pos:line="62" pos:column="33">)<pos:position pos:line="62" pos:column="34"/></operator><operator pos:line="62" pos:column="34">&amp;<pos:position pos:line="62" pos:column="39"/></operator><name pos:line="62" pos:column="35">msg<pos:position pos:line="62" pos:column="38"/></name></expr></argument>, <comment type="block" pos:line="62" pos:column="40">/* flags = */</comment> <argument><expr><literal type="number" pos:line="62" pos:column="54">0<pos:position pos:line="62" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">status<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">&lt;<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>)<pos:position pos:line="63" pos:column="20"/></condition><then pos:line="63" pos:column="20"> <block pos:line="63" pos:column="21">{
      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><operator pos:line="64" pos:column="11">(<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="12">errno<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">==<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">EINTR<pos:position pos:line="64" pos:column="26"/></name><operator pos:line="64" pos:column="26">)<pos:position pos:line="64" pos:column="27"/></operator> <operator pos:line="64" pos:column="28">||<pos:position pos:line="64" pos:column="30"/></operator> <operator pos:line="64" pos:column="31">(<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="32">errno<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">==<pos:position pos:line="64" pos:column="40"/></operator> <name pos:line="64" pos:column="41">EAGAIN<pos:position pos:line="64" pos:column="47"/></name><operator pos:line="64" pos:column="47">)<pos:position pos:line="64" pos:column="48"/></operator></expr>)<pos:position pos:line="64" pos:column="49"/></condition><then pos:line="64" pos:column="49">
        <block type="pseudo"><continue pos:line="65" pos:column="9">continue;<pos:position pos:line="65" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="67" pos:column="7">ERROR<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><literal type="string" pos:line="67" pos:column="13">"tcpconns plugin: conn_read_netlink: recvmsg(2) failed: %s"<pos:position pos:line="67" pos:column="72"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="68" pos:column="13">sstrerror<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">errno<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="30">buf<pos:position pos:line="68" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="35">sizeof<argument_list pos:line="68" pos:column="41">(<argument><expr><name pos:line="68" pos:column="42">buf<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">close<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><name pos:line="69" pos:column="13">fd<pos:position pos:line="69" pos:column="15"/></name></expr></argument>)<pos:position pos:line="69" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="17"/></expr_stmt>
      <return pos:line="70" pos:column="7">return <expr><operator pos:line="70" pos:column="14">-<pos:position pos:line="70" pos:column="15"/></operator><literal type="number" pos:line="70" pos:column="15">1<pos:position pos:line="70" pos:column="16"/></literal></expr>;<pos:position pos:line="70" pos:column="17"/></return>
    }<pos:position pos:line="71" pos:column="6"/></block></then> <elseif pos:line="71" pos:column="7">else <if pos:line="71" pos:column="12">if <condition pos:line="71" pos:column="15">(<expr><name pos:line="71" pos:column="16">status<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">==<pos:position pos:line="71" pos:column="25"/></operator> <literal type="number" pos:line="71" pos:column="26">0<pos:position pos:line="71" pos:column="27"/></literal></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28"> <block pos:line="71" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">close<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><name pos:line="72" pos:column="13">fd<pos:position pos:line="72" pos:column="15"/></name></expr></argument>)<pos:position pos:line="72" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">DEBUG<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><literal type="string" pos:line="73" pos:column="13">"tcpconns plugin: conn_read_netlink: Unexpected zero-sized "<pos:position pos:line="73" pos:column="73"/></literal>
            <literal type="string" pos:line="74" pos:column="13">"reply from netlink socket."<pos:position pos:line="74" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="43"/></expr_stmt>
      <return pos:line="75" pos:column="7">return <expr><literal type="number" pos:line="75" pos:column="14">0<pos:position pos:line="75" pos:column="15"/></literal></expr>;<pos:position pos:line="75" pos:column="16"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="78" pos:column="5">h<pos:position pos:line="78" pos:column="6"/></name> <operator pos:line="78" pos:column="7">=<pos:position pos:line="78" pos:column="8"/></operator> <operator pos:line="78" pos:column="9">(<pos:position pos:line="78" pos:column="10"/></operator>struct <name pos:line="78" pos:column="17">nlmsghdr<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">*<pos:position pos:line="78" pos:column="27"/></operator><operator pos:line="78" pos:column="27">)<pos:position pos:line="78" pos:column="28"/></operator><name pos:line="78" pos:column="28">buf<pos:position pos:line="78" pos:column="31"/></name></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
    <while pos:line="79" pos:column="5">while <condition pos:line="79" pos:column="11">(<expr><call><name pos:line="79" pos:column="12">NLMSG_OK<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><name pos:line="79" pos:column="21">h<pos:position pos:line="79" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="24">status<pos:position pos:line="79" pos:column="30"/></name></expr></argument>)<pos:position pos:line="79" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="32"/></condition> <block pos:line="79" pos:column="33">{
      <if pos:line="80" pos:column="7">if <condition pos:line="80" pos:column="10">(<expr><name><name pos:line="80" pos:column="11">h<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">-&gt;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="14">nlmsg_seq<pos:position pos:line="80" pos:column="23"/></name></name> <operator pos:line="80" pos:column="24">!=<pos:position pos:line="80" pos:column="26"/></operator> <name pos:line="80" pos:column="27">sequence_number<pos:position pos:line="80" pos:column="42"/></name></expr>)<pos:position pos:line="80" pos:column="43"/></condition><then pos:line="80" pos:column="43"> <block pos:line="80" pos:column="44">{
        <expr_stmt><expr><name pos:line="81" pos:column="9">h<pos:position pos:line="81" pos:column="10"/></name> <operator pos:line="81" pos:column="11">=<pos:position pos:line="81" pos:column="12"/></operator> <call><name pos:line="81" pos:column="13">NLMSG_NEXT<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><name pos:line="81" pos:column="24">h<pos:position pos:line="81" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="27">status<pos:position pos:line="81" pos:column="33"/></name></expr></argument>)<pos:position pos:line="81" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="35"/></expr_stmt>
        <continue pos:line="82" pos:column="9">continue;<pos:position pos:line="82" pos:column="18"/></continue>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>

      <if pos:line="85" pos:column="7">if <condition pos:line="85" pos:column="10">(<expr><name><name pos:line="85" pos:column="11">h<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">-&gt;<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="14">nlmsg_type<pos:position pos:line="85" pos:column="24"/></name></name> <operator pos:line="85" pos:column="25">==<pos:position pos:line="85" pos:column="27"/></operator> <name pos:line="85" pos:column="28">NLMSG_DONE<pos:position pos:line="85" pos:column="38"/></name></expr>)<pos:position pos:line="85" pos:column="39"/></condition><then pos:line="85" pos:column="39"> <block pos:line="85" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">close<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">fd<pos:position pos:line="86" pos:column="17"/></name></expr></argument>)<pos:position pos:line="86" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="19"/></expr_stmt>
        <return pos:line="87" pos:column="9">return <expr><literal type="number" pos:line="87" pos:column="16">0<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></return>
      }<pos:position pos:line="88" pos:column="8"/></block></then> <elseif pos:line="88" pos:column="9">else <if pos:line="88" pos:column="14">if <condition pos:line="88" pos:column="17">(<expr><name><name pos:line="88" pos:column="18">h<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">-&gt;<pos:position pos:line="88" pos:column="24"/></operator><name pos:line="88" pos:column="21">nlmsg_type<pos:position pos:line="88" pos:column="31"/></name></name> <operator pos:line="88" pos:column="32">==<pos:position pos:line="88" pos:column="34"/></operator> <name pos:line="88" pos:column="35">NLMSG_ERROR<pos:position pos:line="88" pos:column="46"/></name></expr>)<pos:position pos:line="88" pos:column="47"/></condition><then pos:line="88" pos:column="47"> <block pos:line="88" pos:column="48">{
        <decl_stmt><decl><type><name><name pos:line="89" pos:column="9">struct<pos:position pos:line="89" pos:column="15"/></name> <name pos:line="89" pos:column="16">nlmsgerr<pos:position pos:line="89" pos:column="24"/></name></name> <modifier pos:line="89" pos:column="25">*<pos:position pos:line="89" pos:column="26"/></modifier></type><name pos:line="89" pos:column="26">msg_error<pos:position pos:line="89" pos:column="35"/></name></decl>;<pos:position pos:line="89" pos:column="36"/></decl_stmt>

        <expr_stmt><expr><name pos:line="91" pos:column="9">msg_error<pos:position pos:line="91" pos:column="18"/></name> <operator pos:line="91" pos:column="19">=<pos:position pos:line="91" pos:column="20"/></operator> <call><name pos:line="91" pos:column="21">NLMSG_DATA<pos:position pos:line="91" pos:column="31"/></name><argument_list pos:line="91" pos:column="31">(<argument><expr><name pos:line="91" pos:column="32">h<pos:position pos:line="91" pos:column="33"/></name></expr></argument>)<pos:position pos:line="91" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">WARNING<pos:position pos:line="92" pos:column="16"/></name><argument_list pos:line="92" pos:column="16">(<argument><expr><literal type="string" pos:line="92" pos:column="17">"tcpconns plugin: conn_read_netlink: Received error %i."<pos:position pos:line="92" pos:column="73"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="93" pos:column="17">msg_error<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">-&gt;<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="28">error<pos:position pos:line="93" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="95" pos:column="9">close<pos:position pos:line="95" pos:column="14"/></name><argument_list pos:line="95" pos:column="14">(<argument><expr><name pos:line="95" pos:column="15">fd<pos:position pos:line="95" pos:column="17"/></name></expr></argument>)<pos:position pos:line="95" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="19"/></expr_stmt>
        <return pos:line="96" pos:column="9">return <expr><literal type="number" pos:line="96" pos:column="16">1<pos:position pos:line="96" pos:column="17"/></literal></expr>;<pos:position pos:line="96" pos:column="18"/></return>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if></elseif></if>

      <expr_stmt><expr><name pos:line="99" pos:column="7">r<pos:position pos:line="99" pos:column="8"/></name> <operator pos:line="99" pos:column="9">=<pos:position pos:line="99" pos:column="10"/></operator> <call><name pos:line="99" pos:column="11">NLMSG_DATA<pos:position pos:line="99" pos:column="21"/></name><argument_list pos:line="99" pos:column="21">(<argument><expr><name pos:line="99" pos:column="22">h<pos:position pos:line="99" pos:column="23"/></name></expr></argument>)<pos:position pos:line="99" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="25"/></expr_stmt>

      <comment type="block" pos:line="101" pos:column="7">/* This code does not (need to) distinguish between IPv4 and IPv6. */</comment>
      <expr_stmt><expr><call><name pos:line="102" pos:column="7">conn_handle_ports<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><call><name pos:line="102" pos:column="25">ntohs<pos:position pos:line="102" pos:column="30"/></name><argument_list pos:line="102" pos:column="30">(<argument><expr><name><name pos:line="102" pos:column="31">r<pos:position pos:line="102" pos:column="32"/></name><operator pos:line="102" pos:column="32">-&gt;<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="34">id<pos:position pos:line="102" pos:column="36"/></name><operator pos:line="102" pos:column="36">.<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="37">idiag_sport<pos:position pos:line="102" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="102" pos:column="51">ntohs<pos:position pos:line="102" pos:column="56"/></name><argument_list pos:line="102" pos:column="56">(<argument><expr><name><name pos:line="102" pos:column="57">r<pos:position pos:line="102" pos:column="58"/></name><operator pos:line="102" pos:column="58">-&gt;<pos:position pos:line="102" pos:column="63"/></operator><name pos:line="102" pos:column="60">id<pos:position pos:line="102" pos:column="62"/></name><operator pos:line="102" pos:column="62">.<pos:position pos:line="102" pos:column="63"/></operator><name pos:line="102" pos:column="63">idiag_dport<pos:position pos:line="102" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="75"/></argument_list></call></expr></argument>,
                        <argument><expr><name><name pos:line="103" pos:column="25">r<pos:position pos:line="103" pos:column="26"/></name><operator pos:line="103" pos:column="26">-&gt;<pos:position pos:line="103" pos:column="31"/></operator><name pos:line="103" pos:column="28">idiag_state<pos:position pos:line="103" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>

      <expr_stmt><expr><name pos:line="105" pos:column="7">h<pos:position pos:line="105" pos:column="8"/></name> <operator pos:line="105" pos:column="9">=<pos:position pos:line="105" pos:column="10"/></operator> <call><name pos:line="105" pos:column="11">NLMSG_NEXT<pos:position pos:line="105" pos:column="21"/></name><argument_list pos:line="105" pos:column="21">(<argument><expr><name pos:line="105" pos:column="22">h<pos:position pos:line="105" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="25">status<pos:position pos:line="105" pos:column="31"/></name></expr></argument>)<pos:position pos:line="105" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></while> <comment type="block" pos:line="106" pos:column="7">/* while (NLMSG_OK) */</comment>
  }<pos:position pos:line="107" pos:column="4"/></block></while>   <comment type="block" pos:line="107" pos:column="7">/* while (1) */</comment>

  <comment type="block" pos:line="109" pos:column="3">/* Not reached because the while() loop above handles the exit condition. */</comment>
  <return pos:line="110" pos:column="3">return <expr><literal type="number" pos:line="110" pos:column="10">0<pos:position pos:line="110" pos:column="11"/></literal></expr>;<pos:position pos:line="110" pos:column="12"/></return>
<cpp:else pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">else<pos:position pos:line="111" pos:column="6"/></cpp:directive></cpp:else>
  <return pos:line="112" pos:column="3">return <expr><literal type="number" pos:line="112" pos:column="10">1<pos:position pos:line="112" pos:column="11"/></literal></expr>;<pos:position pos:line="112" pos:column="12"/></return>
<cpp:endif pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">endif<pos:position pos:line="113" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="113" pos:column="8">/* HAVE_STRUCT_LINUX_INET_DIAG_REQ */</comment>
}<pos:position pos:line="114" pos:column="2"/></block></function></unit>
