<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1745_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">ovs_poll_worker<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">arg<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list> <block pos:line="1" pos:column="41">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">ovs_db_t<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">pdb<pos:position pos:line="2" pos:column="16"/></name> <init pos:line="2" pos:column="17">= <expr><operator pos:line="2" pos:column="19">(<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">ovs_db_t<pos:position pos:line="2" pos:column="28"/></name> <operator pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></operator><operator pos:line="2" pos:column="30">)<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">arg<pos:position pos:line="2" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="35"/></decl_stmt> <comment type="block" pos:line="2" pos:column="36">/* pointer to OVS DB */</comment>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ovs_json_reader_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">jreader<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">NULL<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">pollfd<pos:position pos:line="4" pos:column="16"/></name></name></type> <name pos:line="4" pos:column="17">poll_fd<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><block pos:line="4" pos:column="27">{
      <expr><operator pos:line="5" pos:column="7">.<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">fd<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <name><name pos:line="5" pos:column="13">pdb<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">-&gt;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="18">sock<pos:position pos:line="5" pos:column="22"/></name></name></expr>, <expr><operator pos:line="5" pos:column="24">.<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">events<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">=<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="34">POLLIN<pos:position pos:line="5" pos:column="40"/></name> <operator pos:line="5" pos:column="41">|<pos:position pos:line="5" pos:column="42"/></operator> <name pos:line="5" pos:column="43">POLLPRI<pos:position pos:line="5" pos:column="50"/></name></expr>, <expr><operator pos:line="5" pos:column="52">.<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="53">revents<pos:position pos:line="5" pos:column="60"/></name> <operator pos:line="5" pos:column="61">=<pos:position pos:line="5" pos:column="62"/></operator> <literal type="number" pos:line="5" pos:column="63">0<pos:position pos:line="5" pos:column="64"/></literal></expr>,
  }<pos:position pos:line="6" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="5"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* create JSON reader instance */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">(<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">jreader<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">ovs_json_reader_alloc<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">()<pos:position pos:line="9" pos:column="41"/></argument_list></call><operator pos:line="9" pos:column="41">)<pos:position pos:line="9" pos:column="42"/></operator> <operator pos:line="9" pos:column="43">==<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">OVS_ERROR<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><literal type="string" pos:line="10" pos:column="15">"initialize json reader failed"<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* poll data */</comment>
  <while pos:line="15" pos:column="3">while <condition pos:line="15" pos:column="9">(<expr><call><name pos:line="15" pos:column="10">ovs_db_poll_is_running<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">pdb<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="38"/></condition> <block pos:line="15" pos:column="39">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name></type> <name><name pos:line="16" pos:column="10">errbuff<pos:position pos:line="16" pos:column="17"/></name><index pos:line="16" pos:column="17">[<expr><name pos:line="16" pos:column="18">OVS_ERROR_BUFF_SIZE<pos:position pos:line="16" pos:column="37"/></name></expr>]<pos:position pos:line="16" pos:column="38"/></index></name></decl>;<pos:position pos:line="16" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">poll_fd<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">fd<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name><name pos:line="17" pos:column="18">pdb<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">sock<pos:position pos:line="17" pos:column="27"/></name></name></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">poll_ret<pos:position pos:line="18" pos:column="17"/></name> <init pos:line="18" pos:column="18">= <expr><call><name pos:line="18" pos:column="20">poll<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="26">poll_fd<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="35">1<pos:position pos:line="18" pos:column="36"/></literal></expr></argument>, <comment type="block" pos:line="18" pos:column="38">/* ms */</comment> <argument><expr><name pos:line="18" pos:column="47">OVS_DB_POLL_TIMEOUT<pos:position pos:line="18" pos:column="66"/></name> <operator pos:line="18" pos:column="67">*<pos:position pos:line="18" pos:column="68"/></operator> <literal type="number" pos:line="18" pos:column="69">1000<pos:position pos:line="18" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="75"/></decl_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">poll_ret<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&lt;<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22"> <block pos:line="19" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">sstrerror<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">errno<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">errbuff<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="33">sizeof<argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">errbuff<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">OVS_ERROR<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><literal type="string" pos:line="21" pos:column="17">"poll(): %s"<pos:position pos:line="21" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">errbuff<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
      <break pos:line="22" pos:column="7">break;<pos:position pos:line="22" pos:column="13"/></break>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">poll_ret<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30"> <block pos:line="23" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">OVS_DEBUG<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="string" pos:line="24" pos:column="17">"poll(): timeout"<pos:position pos:line="24" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">pdb<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">sock<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">&lt;<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
        <comment type="block" pos:line="26" pos:column="9">/* invalid fd, so try to reconnect */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">ovs_db_reconnect<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">pdb<pos:position pos:line="27" pos:column="29"/></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt></block></then></if>
      <continue pos:line="28" pos:column="7">continue;<pos:position pos:line="28" pos:column="16"/></continue>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name><name pos:line="30" pos:column="9">poll_fd<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">revents<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">&amp;<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="27">POLLNVAL<pos:position pos:line="30" pos:column="35"/></name></expr>)<pos:position pos:line="30" pos:column="36"/></condition><then pos:line="30" pos:column="36"> <block pos:line="30" pos:column="37">{
      <comment type="block" pos:line="31" pos:column="7">/* invalid file descriptor, clean-up */</comment>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">ovs_db_callback_remove_all<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">pdb<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">ovs_json_reader_reset<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">jreader<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
      <comment type="block" pos:line="34" pos:column="7">/* setting poll FD to -1 tells poll() call to ignore this FD.
       * In that case poll() call will return timeout all the time */</comment>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">pdb<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">sock<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <operator pos:line="36" pos:column="19">(<pos:position pos:line="36" pos:column="20"/></operator><operator pos:line="36" pos:column="20">-<pos:position pos:line="36" pos:column="21"/></operator><literal type="number" pos:line="36" pos:column="21">1<pos:position pos:line="36" pos:column="22"/></literal><operator pos:line="36" pos:column="22">)<pos:position pos:line="36" pos:column="23"/></operator></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then> <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name><name pos:line="37" pos:column="17">poll_fd<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">revents<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">&amp;<pos:position pos:line="37" pos:column="38"/></operator> <name pos:line="37" pos:column="35">POLLERR<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">)<pos:position pos:line="37" pos:column="43"/></operator> <operator pos:line="37" pos:column="44">||<pos:position pos:line="37" pos:column="46"/></operator> <operator pos:line="37" pos:column="47">(<pos:position pos:line="37" pos:column="48"/></operator><name><name pos:line="37" pos:column="48">poll_fd<pos:position pos:line="37" pos:column="55"/></name><operator pos:line="37" pos:column="55">.<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="56">revents<pos:position pos:line="37" pos:column="63"/></name></name> <operator pos:line="37" pos:column="64">&amp;<pos:position pos:line="37" pos:column="69"/></operator> <name pos:line="37" pos:column="66">POLLHUP<pos:position pos:line="37" pos:column="73"/></name><operator pos:line="37" pos:column="73">)<pos:position pos:line="37" pos:column="74"/></operator></expr>)<pos:position pos:line="37" pos:column="75"/></condition><then pos:line="37" pos:column="75"> <block pos:line="37" pos:column="76">{
      <comment type="block" pos:line="38" pos:column="7">/* connection is broken */</comment>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">close<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name><name pos:line="39" pos:column="13">poll_fd<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">fd<pos:position pos:line="39" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">ovs_db_event_post<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">pdb<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">OVS_DB_EVENT_CONN_TERMINATED<pos:position pos:line="40" pos:column="58"/></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">OVS_ERROR<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><literal type="string" pos:line="41" pos:column="17">"poll() peer closed its end of the channel"<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if></elseif> <elseif pos:line="42" pos:column="7">else <if pos:line="42" pos:column="12">if <condition pos:line="42" pos:column="15">(<expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><name><name pos:line="42" pos:column="17">poll_fd<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">.<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">revents<pos:position pos:line="42" pos:column="32"/></name></name> <operator pos:line="42" pos:column="33">&amp;<pos:position pos:line="42" pos:column="38"/></operator> <name pos:line="42" pos:column="35">POLLIN<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">)<pos:position pos:line="42" pos:column="42"/></operator> <operator pos:line="42" pos:column="43">||<pos:position pos:line="42" pos:column="45"/></operator> <operator pos:line="42" pos:column="46">(<pos:position pos:line="42" pos:column="47"/></operator><name><name pos:line="42" pos:column="47">poll_fd<pos:position pos:line="42" pos:column="54"/></name><operator pos:line="42" pos:column="54">.<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="55">revents<pos:position pos:line="42" pos:column="62"/></name></name> <operator pos:line="42" pos:column="63">&amp;<pos:position pos:line="42" pos:column="68"/></operator> <name pos:line="42" pos:column="65">POLLPRI<pos:position pos:line="42" pos:column="72"/></name><operator pos:line="42" pos:column="72">)<pos:position pos:line="42" pos:column="73"/></operator></expr>)<pos:position pos:line="42" pos:column="74"/></condition><then pos:line="42" pos:column="74"> <block pos:line="42" pos:column="75">{
      <comment type="block" pos:line="43" pos:column="7">/* read incoming data */</comment>
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">char<pos:position pos:line="44" pos:column="11"/></name></type> <name><name pos:line="44" pos:column="12">buff<pos:position pos:line="44" pos:column="16"/></name><index pos:line="44" pos:column="16">[<expr><name pos:line="44" pos:column="17">OVS_DB_POLL_READ_BLOCK_SIZE<pos:position pos:line="44" pos:column="44"/></name></expr>]<pos:position pos:line="44" pos:column="45"/></index></name></decl>;<pos:position pos:line="44" pos:column="46"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="45" pos:column="7">ssize_t<pos:position pos:line="45" pos:column="14"/></name></type> <name pos:line="45" pos:column="15">nbytes<pos:position pos:line="45" pos:column="21"/></name> <init pos:line="45" pos:column="22">= <expr><call><name pos:line="45" pos:column="24">recv<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name><name pos:line="45" pos:column="29">poll_fd<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">.<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="37">fd<pos:position pos:line="45" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="41">buff<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="47">sizeof<argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">buff<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="61">0<pos:position pos:line="45" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="64"/></decl_stmt>
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">nbytes<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">&lt;<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="20">0<pos:position pos:line="46" pos:column="21"/></literal></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22"> <block pos:line="46" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">sstrerror<pos:position pos:line="47" pos:column="18"/></name><argument_list pos:line="47" pos:column="18">(<argument><expr><name pos:line="47" pos:column="19">errno<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="26">errbuff<pos:position pos:line="47" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="35">sizeof<argument_list pos:line="47" pos:column="41">(<argument><expr><name pos:line="47" pos:column="42">errbuff<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">OVS_ERROR<pos:position pos:line="48" pos:column="18"/></name><argument_list pos:line="48" pos:column="18">(<argument><expr><literal type="string" pos:line="48" pos:column="19">"recv(): %s"<pos:position pos:line="48" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="33">errbuff<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="49" pos:column="9">/* read error? Try to reconnect */</comment>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">close<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name><name pos:line="50" pos:column="15">poll_fd<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">fd<pos:position pos:line="50" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
        <continue pos:line="51" pos:column="9">continue;<pos:position pos:line="51" pos:column="18"/></continue>
      }<pos:position pos:line="52" pos:column="8"/></block></then> <elseif pos:line="52" pos:column="9">else <if pos:line="52" pos:column="14">if <condition pos:line="52" pos:column="17">(<expr><name pos:line="52" pos:column="18">nbytes<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">==<pos:position pos:line="52" pos:column="27"/></operator> <literal type="number" pos:line="52" pos:column="28">0<pos:position pos:line="52" pos:column="29"/></literal></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30"> <block pos:line="52" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">close<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name><name pos:line="53" pos:column="15">poll_fd<pos:position pos:line="53" pos:column="22"/></name><operator pos:line="53" pos:column="22">.<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="23">fd<pos:position pos:line="53" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">ovs_db_event_post<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">pdb<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">OVS_DB_EVENT_CONN_TERMINATED<pos:position pos:line="54" pos:column="60"/></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">OVS_ERROR<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><literal type="string" pos:line="55" pos:column="19">"recv() peer has performed an orderly shutdown"<pos:position pos:line="55" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="68"/></expr_stmt>
        <continue pos:line="56" pos:column="9">continue;<pos:position pos:line="56" pos:column="18"/></continue>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if></elseif></if>
      <comment type="block" pos:line="58" pos:column="7">/* read incoming data */</comment>
      <decl_stmt><decl><type><name pos:line="59" pos:column="7">size_t<pos:position pos:line="59" pos:column="13"/></name></type> <name pos:line="59" pos:column="14">json_len<pos:position pos:line="59" pos:column="22"/></name> <init pos:line="59" pos:column="23">= <expr><literal type="number" pos:line="59" pos:column="25">0<pos:position pos:line="59" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="59" pos:column="27"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="60" pos:column="7">const<pos:position pos:line="60" pos:column="12"/></specifier> <name pos:line="60" pos:column="13">char<pos:position pos:line="60" pos:column="17"/></name> <modifier pos:line="60" pos:column="18">*<pos:position pos:line="60" pos:column="19"/></modifier></type><name pos:line="60" pos:column="19">json<pos:position pos:line="60" pos:column="23"/></name> <init pos:line="60" pos:column="24">= <expr><name pos:line="60" pos:column="26">NULL<pos:position pos:line="60" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="31"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">OVS_DEBUG<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><literal type="string" pos:line="61" pos:column="17">"recv(): received %zd bytes of data"<pos:position pos:line="61" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="55">nbytes<pos:position pos:line="61" pos:column="61"/></name></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">ovs_json_reader_push_data<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">jreader<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">buff<pos:position pos:line="62" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="48">nbytes<pos:position pos:line="62" pos:column="54"/></name></expr></argument>)<pos:position pos:line="62" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="56"/></expr_stmt>
      <while pos:line="63" pos:column="7">while <condition pos:line="63" pos:column="13">(<expr><operator pos:line="63" pos:column="14">!<pos:position pos:line="63" pos:column="15"/></operator><call><name pos:line="63" pos:column="15">ovs_json_reader_pop<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name pos:line="63" pos:column="35">jreader<pos:position pos:line="63" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="44">&amp;<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="45">json<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="51">&amp;<pos:position pos:line="63" pos:column="56"/></operator><name pos:line="63" pos:column="52">json_len<pos:position pos:line="63" pos:column="60"/></name></expr></argument>)<pos:position pos:line="63" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="62"/></condition>
        <comment type="block" pos:line="64" pos:column="9">/* process JSON data */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="9">ovs_db_json_data_process<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">pdb<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="39">json<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">json_len<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="55"/></expr_stmt></block></while>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="67" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="69" pos:column="3">OVS_DEBUG<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><literal type="string" pos:line="69" pos:column="13">"poll thread has been completed"<pos:position pos:line="69" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="70" pos:column="3">ovs_json_reader_free<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">jreader<pos:position pos:line="70" pos:column="31"/></name></expr></argument>)<pos:position pos:line="70" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
  <return pos:line="71" pos:column="3">return <expr><name pos:line="71" pos:column="10">NULL<pos:position pos:line="71" pos:column="14"/></name></expr>;<pos:position pos:line="71" pos:column="15"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
