<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1848_collectd-5.0.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">yyrealloc<pos:position pos:line="1" pos:column="16"/></name>  <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">void<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type> <name pos:line="1" pos:column="26">ptr<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">yy_size_t<pos:position pos:line="1" pos:column="40"/></name></type>  <name pos:line="1" pos:column="42">size<pos:position pos:line="1" pos:column="46"/></name></decl></parameter> )<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */</comment>
	<return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">void<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></operator><operator pos:line="10" pos:column="23">)<pos:position pos:line="10" pos:column="24"/></operator> <call><name pos:line="10" pos:column="25">realloc<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">( <argument><expr><operator pos:line="10" pos:column="34">(<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">char<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">*<pos:position pos:line="10" pos:column="41"/></operator><operator pos:line="10" pos:column="41">)<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">ptr<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="48">size<pos:position pos:line="10" pos:column="52"/></name></expr></argument> )<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
