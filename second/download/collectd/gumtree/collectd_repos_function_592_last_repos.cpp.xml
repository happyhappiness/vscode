<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_592_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">load_read<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list> <block pos:line="1" pos:column="28">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><call><name pos:line="2" pos:column="5">defined<pos:position pos:line="2" pos:column="12"/></name><argument_list pos:line="2" pos:column="12">(<argument><expr><name pos:line="2" pos:column="13">HAVE_GETLOADAVG<pos:position pos:line="2" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2" pos:column="29"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">double<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">load<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">3<pos:position pos:line="3" pos:column="16"/></literal></expr>]<pos:position pos:line="3" pos:column="17"/></index></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">getloadavg<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">load<pos:position pos:line="5" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="24">3<pos:position pos:line="5" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call> <operator pos:line="5" pos:column="27">==<pos:position pos:line="5" pos:column="29"/></operator> <literal type="number" pos:line="5" pos:column="30">3<pos:position pos:line="5" pos:column="31"/></literal></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="5">load_submit<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name><name pos:line="6" pos:column="17">load<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><name pos:line="6" pos:column="22">LOADAVG_1MIN<pos:position pos:line="6" pos:column="34"/></name></expr>]<pos:position pos:line="6" pos:column="35"/></index></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="37">load<pos:position pos:line="6" pos:column="41"/></name><index pos:line="6" pos:column="41">[<expr><name pos:line="6" pos:column="42">LOADAVG_5MIN<pos:position pos:line="6" pos:column="54"/></name></expr>]<pos:position pos:line="6" pos:column="55"/></index></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="57">load<pos:position pos:line="6" pos:column="61"/></name><index pos:line="6" pos:column="61">[<expr><name pos:line="6" pos:column="62">LOADAVG_15MIN<pos:position pos:line="6" pos:column="75"/></name></expr>]<pos:position pos:line="6" pos:column="76"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="78"/></expr_stmt></block></then>
  <else pos:line="7" pos:column="3">else <block pos:line="7" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">errbuf<pos:position pos:line="8" pos:column="16"/></name><index pos:line="8" pos:column="16">[<expr><literal type="number" pos:line="8" pos:column="17">1024<pos:position pos:line="8" pos:column="21"/></literal></expr>]<pos:position pos:line="8" pos:column="22"/></index></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">WARNING<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><literal type="string" pos:line="9" pos:column="13">"load: getloadavg failed: %s"<pos:position pos:line="9" pos:column="42"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="10" pos:column="13">sstrerror<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">errno<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">errbuf<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="38">sizeof<argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">errbuf<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></else></if>
<comment type="block" pos:line="12" pos:column="1">/* #endif HAVE_GETLOADAVG */</comment>

<cpp:elif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">elif<pos:position pos:line="14" pos:column="6"/></cpp:directive> <expr><call><name pos:line="14" pos:column="7">defined<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">KERNEL_LINUX<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">gauge_t<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">snum<pos:position pos:line="15" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="15" pos:column="17">mnum<pos:position pos:line="15" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="15" pos:column="23">lnum<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">FILE<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">loadavg<pos:position pos:line="16" pos:column="16"/></name></decl>;<pos:position pos:line="16" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">buffer<pos:position pos:line="17" pos:column="14"/></name><index pos:line="17" pos:column="14">[<expr><literal type="number" pos:line="17" pos:column="15">16<pos:position pos:line="17" pos:column="17"/></literal></expr>]<pos:position pos:line="17" pos:column="18"/></index></name></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier></type><name><name pos:line="19" pos:column="9">fields<pos:position pos:line="19" pos:column="15"/></name><index pos:line="19" pos:column="15">[<expr><literal type="number" pos:line="19" pos:column="16">8<pos:position pos:line="19" pos:column="17"/></literal></expr>]<pos:position pos:line="19" pos:column="18"/></index></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">numfields<pos:position pos:line="20" pos:column="16"/></name></decl>;<pos:position pos:line="20" pos:column="17"/></decl_stmt>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">loadavg<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">fopen<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><literal type="string" pos:line="22" pos:column="24">"/proc/loadavg"<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="41">"r"<pos:position pos:line="22" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call><operator pos:line="22" pos:column="45">)<pos:position pos:line="22" pos:column="46"/></operator> <operator pos:line="22" pos:column="47">==<pos:position pos:line="22" pos:column="49"/></operator> <name pos:line="22" pos:column="50">NULL<pos:position pos:line="22" pos:column="54"/></name></expr>)<pos:position pos:line="22" pos:column="55"/></condition><then pos:line="22" pos:column="55"> <block pos:line="22" pos:column="56">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name></type> <name><name pos:line="23" pos:column="10">errbuf<pos:position pos:line="23" pos:column="16"/></name><index pos:line="23" pos:column="16">[<expr><literal type="number" pos:line="23" pos:column="17">1024<pos:position pos:line="23" pos:column="21"/></literal></expr>]<pos:position pos:line="23" pos:column="22"/></index></name></decl>;<pos:position pos:line="23" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">WARNING<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><literal type="string" pos:line="24" pos:column="13">"load: fopen: %s"<pos:position pos:line="24" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="32">sstrerror<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">errno<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="49">errbuf<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="57">sizeof<argument_list pos:line="24" pos:column="63">(<argument><expr><name pos:line="24" pos:column="64">errbuf<pos:position pos:line="24" pos:column="70"/></name></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="74"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">-<pos:position pos:line="25" pos:column="13"/></operator><literal type="number" pos:line="25" pos:column="13">1<pos:position pos:line="25" pos:column="14"/></literal></expr>;<pos:position pos:line="25" pos:column="15"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">fgets<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">buffer<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="21">16<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">loadavg<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call> <operator pos:line="28" pos:column="34">==<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="37">NULL<pos:position pos:line="28" pos:column="41"/></name></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name></type> <name><name pos:line="29" pos:column="10">errbuf<pos:position pos:line="29" pos:column="16"/></name><index pos:line="29" pos:column="16">[<expr><literal type="number" pos:line="29" pos:column="17">1024<pos:position pos:line="29" pos:column="21"/></literal></expr>]<pos:position pos:line="29" pos:column="22"/></index></name></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">WARNING<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"load: fgets: %s"<pos:position pos:line="30" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="32">sstrerror<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name pos:line="30" pos:column="42">errno<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">errbuf<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="57">sizeof<argument_list pos:line="30" pos:column="63">(<argument><expr><name pos:line="30" pos:column="64">errbuf<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fclose<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><name pos:line="31" pos:column="12">loadavg<pos:position pos:line="31" pos:column="19"/></name></expr></argument>)<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><call><name pos:line="35" pos:column="7">fclose<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">loadavg<pos:position pos:line="35" pos:column="21"/></name></expr></argument>)<pos:position pos:line="35" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23"> <block pos:line="35" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">char<pos:position pos:line="36" pos:column="9"/></name></type> <name><name pos:line="36" pos:column="10">errbuf<pos:position pos:line="36" pos:column="16"/></name><index pos:line="36" pos:column="16">[<expr><literal type="number" pos:line="36" pos:column="17">1024<pos:position pos:line="36" pos:column="21"/></literal></expr>]<pos:position pos:line="36" pos:column="22"/></index></name></decl>;<pos:position pos:line="36" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">WARNING<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><literal type="string" pos:line="37" pos:column="13">"load: fclose: %s"<pos:position pos:line="37" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="33">sstrerror<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><name pos:line="37" pos:column="43">errno<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">errbuf<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="58">sizeof<argument_list pos:line="37" pos:column="64">(<argument><expr><name pos:line="37" pos:column="65">errbuf<pos:position pos:line="37" pos:column="71"/></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="40" pos:column="3">numfields<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name pos:line="40" pos:column="15">strsplit<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">buffer<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">fields<pos:position pos:line="40" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="40">8<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">numfields<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">&lt;<pos:position pos:line="42" pos:column="21"/></operator> <literal type="number" pos:line="42" pos:column="19">3<pos:position pos:line="42" pos:column="20"/></literal></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21">
    <block type="pseudo"><return pos:line="43" pos:column="5">return <expr><operator pos:line="43" pos:column="12">-<pos:position pos:line="43" pos:column="13"/></operator><literal type="number" pos:line="43" pos:column="13">1<pos:position pos:line="43" pos:column="14"/></literal></expr>;<pos:position pos:line="43" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="45" pos:column="3">snum<pos:position pos:line="45" pos:column="7"/></name> <operator pos:line="45" pos:column="8">=<pos:position pos:line="45" pos:column="9"/></operator> <call><name pos:line="45" pos:column="10">atof<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name><name pos:line="45" pos:column="15">fields<pos:position pos:line="45" pos:column="21"/></name><index pos:line="45" pos:column="21">[<expr><literal type="number" pos:line="45" pos:column="22">0<pos:position pos:line="45" pos:column="23"/></literal></expr>]<pos:position pos:line="45" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="46" pos:column="3">mnum<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <call><name pos:line="46" pos:column="10">atof<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><name><name pos:line="46" pos:column="15">fields<pos:position pos:line="46" pos:column="21"/></name><index pos:line="46" pos:column="21">[<expr><literal type="number" pos:line="46" pos:column="22">1<pos:position pos:line="46" pos:column="23"/></literal></expr>]<pos:position pos:line="46" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="47" pos:column="3">lnum<pos:position pos:line="47" pos:column="7"/></name> <operator pos:line="47" pos:column="8">=<pos:position pos:line="47" pos:column="9"/></operator> <call><name pos:line="47" pos:column="10">atof<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name><name pos:line="47" pos:column="15">fields<pos:position pos:line="47" pos:column="21"/></name><index pos:line="47" pos:column="21">[<expr><literal type="number" pos:line="47" pos:column="22">2<pos:position pos:line="47" pos:column="23"/></literal></expr>]<pos:position pos:line="47" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="49" pos:column="3">load_submit<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">snum<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="21">mnum<pos:position pos:line="49" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="27">lnum<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
<comment type="block" pos:line="50" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">elif<pos:position pos:line="52" pos:column="6"/></cpp:directive> <expr><name pos:line="52" pos:column="7">HAVE_LIBSTATGRAB<pos:position pos:line="52" pos:column="23"/></name></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="53" pos:column="3">gauge_t<pos:position pos:line="53" pos:column="10"/></name></type> <name pos:line="53" pos:column="11">snum<pos:position pos:line="53" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="53" pos:column="17">mnum<pos:position pos:line="53" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="53" pos:column="23">lnum<pos:position pos:line="53" pos:column="27"/></name></decl>;<pos:position pos:line="53" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="54" pos:column="3">sg_load_stats<pos:position pos:line="54" pos:column="16"/></name> <modifier pos:line="54" pos:column="17">*<pos:position pos:line="54" pos:column="18"/></modifier></type><name pos:line="54" pos:column="18">ls<pos:position pos:line="54" pos:column="20"/></name></decl>;<pos:position pos:line="54" pos:column="21"/></decl_stmt>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><operator pos:line="56" pos:column="7">(<pos:position pos:line="56" pos:column="8"/></operator><name pos:line="56" pos:column="8">ls<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <call><name pos:line="56" pos:column="13">sg_get_load_stats<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">()<pos:position pos:line="56" pos:column="32"/></argument_list></call><operator pos:line="56" pos:column="32">)<pos:position pos:line="56" pos:column="33"/></operator> <operator pos:line="56" pos:column="34">==<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">NULL<pos:position pos:line="56" pos:column="41"/></name></expr>)<pos:position pos:line="56" pos:column="42"/></condition><then pos:line="56" pos:column="42">
    <block type="pseudo"><return pos:line="57" pos:column="5">return;<pos:position pos:line="57" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="59" pos:column="3">snum<pos:position pos:line="59" pos:column="7"/></name> <operator pos:line="59" pos:column="8">=<pos:position pos:line="59" pos:column="9"/></operator> <name><name pos:line="59" pos:column="10">ls<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">min1<pos:position pos:line="59" pos:column="18"/></name></name></expr>;<pos:position pos:line="59" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="60" pos:column="3">mnum<pos:position pos:line="60" pos:column="7"/></name> <operator pos:line="60" pos:column="8">=<pos:position pos:line="60" pos:column="9"/></operator> <name><name pos:line="60" pos:column="10">ls<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">min5<pos:position pos:line="60" pos:column="18"/></name></name></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="61" pos:column="3">lnum<pos:position pos:line="61" pos:column="7"/></name> <operator pos:line="61" pos:column="8">=<pos:position pos:line="61" pos:column="9"/></operator> <name><name pos:line="61" pos:column="10">ls<pos:position pos:line="61" pos:column="12"/></name><operator pos:line="61" pos:column="12">-&gt;<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="14">min15<pos:position pos:line="61" pos:column="19"/></name></name></expr>;<pos:position pos:line="61" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">load_submit<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">snum<pos:position pos:line="62" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="21">mnum<pos:position pos:line="62" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="27">lnum<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
<comment type="block" pos:line="63" pos:column="1">/* #endif HAVE_LIBSTATGRAB */</comment>

<cpp:elif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">elif<pos:position pos:line="65" pos:column="6"/></cpp:directive> <expr><name pos:line="65" pos:column="7">HAVE_PERFSTAT<pos:position pos:line="65" pos:column="20"/></name></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="66" pos:column="3">gauge_t<pos:position pos:line="66" pos:column="10"/></name></type> <name pos:line="66" pos:column="11">snum<pos:position pos:line="66" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="66" pos:column="17">mnum<pos:position pos:line="66" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="66" pos:column="23">lnum<pos:position pos:line="66" pos:column="27"/></name></decl>;<pos:position pos:line="66" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="67" pos:column="3">perfstat_cpu_total_t<pos:position pos:line="67" pos:column="23"/></name></type> <name pos:line="67" pos:column="24">cputotal<pos:position pos:line="67" pos:column="32"/></name></decl>;<pos:position pos:line="67" pos:column="33"/></decl_stmt>

  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><call><name pos:line="69" pos:column="7">perfstat_cpu_total<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><name pos:line="69" pos:column="26">NULL<pos:position pos:line="69" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="32">&amp;<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="33">cputotal<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="43">sizeof<argument_list pos:line="69" pos:column="49">(<argument><expr><name pos:line="69" pos:column="50">perfstat_cpu_total_t<pos:position pos:line="69" pos:column="70"/></name></expr></argument>)<pos:position pos:line="69" pos:column="71"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="73">1<pos:position pos:line="69" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="75"/></argument_list></call> <operator pos:line="69" pos:column="76">&lt;<pos:position pos:line="69" pos:column="80"/></operator>
      <literal type="number" pos:line="70" pos:column="7">0<pos:position pos:line="70" pos:column="8"/></literal></expr>)<pos:position pos:line="70" pos:column="9"/></condition><then pos:line="70" pos:column="9"> <block pos:line="70" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">char<pos:position pos:line="71" pos:column="9"/></name></type> <name><name pos:line="71" pos:column="10">errbuf<pos:position pos:line="71" pos:column="16"/></name><index pos:line="71" pos:column="16">[<expr><literal type="number" pos:line="71" pos:column="17">1024<pos:position pos:line="71" pos:column="21"/></literal></expr>]<pos:position pos:line="71" pos:column="22"/></index></name></decl>;<pos:position pos:line="71" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">WARNING<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><literal type="string" pos:line="72" pos:column="13">"load: perfstat_cpu : %s"<pos:position pos:line="72" pos:column="38"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="73" pos:column="13">sstrerror<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">(<argument><expr><name pos:line="73" pos:column="23">errno<pos:position pos:line="73" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="30">errbuf<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="38">sizeof<argument_list pos:line="73" pos:column="44">(<argument><expr><name pos:line="73" pos:column="45">errbuf<pos:position pos:line="73" pos:column="51"/></name></expr></argument>)<pos:position pos:line="73" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="55"/></expr_stmt>
    <return pos:line="74" pos:column="5">return <expr><operator pos:line="74" pos:column="12">-<pos:position pos:line="74" pos:column="13"/></operator><literal type="number" pos:line="74" pos:column="13">1<pos:position pos:line="74" pos:column="14"/></literal></expr>;<pos:position pos:line="74" pos:column="15"/></return>
  }<pos:position pos:line="75" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="77" pos:column="3">snum<pos:position pos:line="77" pos:column="7"/></name> <operator pos:line="77" pos:column="8">=<pos:position pos:line="77" pos:column="9"/></operator> <operator pos:line="77" pos:column="10">(<pos:position pos:line="77" pos:column="11"/></operator><name pos:line="77" pos:column="11">float<pos:position pos:line="77" pos:column="16"/></name><operator pos:line="77" pos:column="16">)<pos:position pos:line="77" pos:column="17"/></operator><name><name pos:line="77" pos:column="17">cputotal<pos:position pos:line="77" pos:column="25"/></name><operator pos:line="77" pos:column="25">.<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="26">loadavg<pos:position pos:line="77" pos:column="33"/></name><index pos:line="77" pos:column="33">[<expr><literal type="number" pos:line="77" pos:column="34">0<pos:position pos:line="77" pos:column="35"/></literal></expr>]<pos:position pos:line="77" pos:column="36"/></index></name> <operator pos:line="77" pos:column="37">/<pos:position pos:line="77" pos:column="38"/></operator> <call pos:line="77" pos:column="39">(<name pos:line="77" pos:column="40">float<pos:position pos:line="77" pos:column="45"/></name>)<argument_list pos:line="77" pos:column="46">(<argument><expr><literal type="number" pos:line="77" pos:column="47">1<pos:position pos:line="77" pos:column="48"/></literal> <operator pos:line="77" pos:column="49">&lt;&lt;<pos:position pos:line="77" pos:column="57"/></operator> <name pos:line="77" pos:column="52">SBITS<pos:position pos:line="77" pos:column="57"/></name></expr></argument>)<pos:position pos:line="77" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name pos:line="78" pos:column="3">mnum<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <operator pos:line="78" pos:column="10">(<pos:position pos:line="78" pos:column="11"/></operator><name pos:line="78" pos:column="11">float<pos:position pos:line="78" pos:column="16"/></name><operator pos:line="78" pos:column="16">)<pos:position pos:line="78" pos:column="17"/></operator><name><name pos:line="78" pos:column="17">cputotal<pos:position pos:line="78" pos:column="25"/></name><operator pos:line="78" pos:column="25">.<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="26">loadavg<pos:position pos:line="78" pos:column="33"/></name><index pos:line="78" pos:column="33">[<expr><literal type="number" pos:line="78" pos:column="34">1<pos:position pos:line="78" pos:column="35"/></literal></expr>]<pos:position pos:line="78" pos:column="36"/></index></name> <operator pos:line="78" pos:column="37">/<pos:position pos:line="78" pos:column="38"/></operator> <call pos:line="78" pos:column="39">(<name pos:line="78" pos:column="40">float<pos:position pos:line="78" pos:column="45"/></name>)<argument_list pos:line="78" pos:column="46">(<argument><expr><literal type="number" pos:line="78" pos:column="47">1<pos:position pos:line="78" pos:column="48"/></literal> <operator pos:line="78" pos:column="49">&lt;&lt;<pos:position pos:line="78" pos:column="57"/></operator> <name pos:line="78" pos:column="52">SBITS<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name pos:line="79" pos:column="3">lnum<pos:position pos:line="79" pos:column="7"/></name> <operator pos:line="79" pos:column="8">=<pos:position pos:line="79" pos:column="9"/></operator> <operator pos:line="79" pos:column="10">(<pos:position pos:line="79" pos:column="11"/></operator><name pos:line="79" pos:column="11">float<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">)<pos:position pos:line="79" pos:column="17"/></operator><name><name pos:line="79" pos:column="17">cputotal<pos:position pos:line="79" pos:column="25"/></name><operator pos:line="79" pos:column="25">.<pos:position pos:line="79" pos:column="26"/></operator><name pos:line="79" pos:column="26">loadavg<pos:position pos:line="79" pos:column="33"/></name><index pos:line="79" pos:column="33">[<expr><literal type="number" pos:line="79" pos:column="34">2<pos:position pos:line="79" pos:column="35"/></literal></expr>]<pos:position pos:line="79" pos:column="36"/></index></name> <operator pos:line="79" pos:column="37">/<pos:position pos:line="79" pos:column="38"/></operator> <call pos:line="79" pos:column="39">(<name pos:line="79" pos:column="40">float<pos:position pos:line="79" pos:column="45"/></name>)<argument_list pos:line="79" pos:column="46">(<argument><expr><literal type="number" pos:line="79" pos:column="47">1<pos:position pos:line="79" pos:column="48"/></literal> <operator pos:line="79" pos:column="49">&lt;&lt;<pos:position pos:line="79" pos:column="57"/></operator> <name pos:line="79" pos:column="52">SBITS<pos:position pos:line="79" pos:column="57"/></name></expr></argument>)<pos:position pos:line="79" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">load_submit<pos:position pos:line="80" pos:column="14"/></name><argument_list pos:line="80" pos:column="14">(<argument><expr><name pos:line="80" pos:column="15">snum<pos:position pos:line="80" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="21">mnum<pos:position pos:line="80" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="27">lnum<pos:position pos:line="80" pos:column="31"/></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
<comment type="block" pos:line="81" pos:column="1">/* #endif HAVE_PERFSTAT */</comment>

<cpp:else pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">else<pos:position pos:line="83" pos:column="6"/></cpp:directive></cpp:else>
<cpp:error pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">error<pos:position pos:line="84" pos:column="7"/></cpp:directive> <cpp:literal pos:line="84" pos:column="8">"No applicable input method."<pos:position pos:line="84" pos:column="37"/></cpp:literal></cpp:error>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="87" pos:column="3">return <expr><literal type="number" pos:line="87" pos:column="10">0<pos:position pos:line="87" pos:column="11"/></literal></expr>;<pos:position pos:line="87" pos:column="12"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
