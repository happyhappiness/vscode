<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2188_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">by_type_entry_t<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">lu_search_by_type<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">lookup_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">obj<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="58">/* {{{ */</comment>
                                          <parameter><decl><type><name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">type<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
                                          <parameter><decl><type><name pos:line="3" pos:column="43">_Bool<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">allocate_if_missing<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list> <block pos:line="3" pos:column="70">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">by_type_entry_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">by_type<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">type_copy<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">status<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">c_avl_get<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name><name pos:line="8" pos:column="22">obj<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">by_type_tree<pos:position pos:line="8" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">type<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="47">(<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="48">void<pos:position pos:line="8" pos:column="52"/></name> <operator pos:line="8" pos:column="53">*<pos:position pos:line="8" pos:column="54"/></operator><operator pos:line="8" pos:column="54">)<pos:position pos:line="8" pos:column="55"/></operator><operator pos:line="8" pos:column="55">&amp;<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="56">by_type<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">by_type<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">)<pos:position pos:line="10" pos:column="21"/></operator></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">allocate_if_missing<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">)<pos:position pos:line="13" pos:column="18"/></operator></expr>;<pos:position pos:line="13" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">type_copy<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">strdup<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">type<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">type_copy<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"utils_vl_lookup: strdup failed."<pos:position pos:line="17" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">NULL<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">)<pos:position pos:line="18" pos:column="18"/></operator></expr>;<pos:position pos:line="18" pos:column="19"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">by_type<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">calloc<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="number" pos:line="21" pos:column="20">1<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="23">sizeof<argument_list pos:line="21" pos:column="29">(<argument><expr><operator pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">by_type<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">by_type<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">NULL<pos:position pos:line="22" pos:column="22"/></name></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23"> <block pos:line="22" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ERROR<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><literal type="string" pos:line="23" pos:column="11">"utils_vl_lookup: calloc failed."<pos:position pos:line="23" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">sfree<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">type_copy<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">NULL<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">)<pos:position pos:line="25" pos:column="18"/></operator></expr>;<pos:position pos:line="25" pos:column="19"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">by_type<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">wildcard_plugin_list<pos:position pos:line="27" pos:column="32"/></name></name> <operator pos:line="27" pos:column="33">=<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">NULL<pos:position pos:line="27" pos:column="39"/></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="29" pos:column="3">by_type<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">by_plugin_tree<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator>
      <call><name pos:line="30" pos:column="7">c_avl_create<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><operator pos:line="30" pos:column="20">(<pos:position pos:line="30" pos:column="21"/></operator><call><call><name pos:line="30" pos:column="21">int<pos:position pos:line="30" pos:column="24"/></name> <argument_list pos:line="30" pos:column="25">(<argument><expr><operator pos:line="30" pos:column="26">*<pos:position pos:line="30" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call><argument_list pos:line="30" pos:column="28">(<argument><expr><specifier pos:line="30" pos:column="29">const<pos:position pos:line="30" pos:column="34"/></specifier> <name pos:line="30" pos:column="35">void<pos:position pos:line="30" pos:column="39"/></name> <operator pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></operator></expr></argument>, <argument><expr><specifier pos:line="30" pos:column="43">const<pos:position pos:line="30" pos:column="48"/></specifier> <name pos:line="30" pos:column="49">void<pos:position pos:line="30" pos:column="53"/></name> <operator pos:line="30" pos:column="54">*<pos:position pos:line="30" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call><operator pos:line="30" pos:column="56">)<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="57">strcmp<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name><name pos:line="31" pos:column="7">by_type<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">-&gt;<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="16">by_plugin_tree<pos:position pos:line="31" pos:column="30"/></name></name> <operator pos:line="31" pos:column="31">==<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">NULL<pos:position pos:line="31" pos:column="38"/></name></expr>)<pos:position pos:line="31" pos:column="39"/></condition><then pos:line="31" pos:column="39"> <block pos:line="31" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">ERROR<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><literal type="string" pos:line="32" pos:column="11">"utils_vl_lookup: c_avl_create failed."<pos:position pos:line="32" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sfree<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">by_type<pos:position pos:line="33" pos:column="18"/></name></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">sfree<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">type_copy<pos:position pos:line="34" pos:column="20"/></name></expr></argument>)<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">NULL<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">)<pos:position pos:line="35" pos:column="18"/></operator></expr>;<pos:position pos:line="35" pos:column="19"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="38" pos:column="3">status<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <call><name pos:line="38" pos:column="12">c_avl_insert<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name><name pos:line="38" pos:column="25">obj<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">by_type_tree<pos:position pos:line="38" pos:column="42"/></name></name></expr></argument>,
                        <comment type="block" pos:line="39" pos:column="25">/* key = */</comment> <argument><expr><name pos:line="39" pos:column="37">type_copy<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <comment type="block" pos:line="39" pos:column="48">/* value = */</comment> <argument><expr><name pos:line="39" pos:column="62">by_type<pos:position pos:line="39" pos:column="69"/></name></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">assert<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">status<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">&lt;=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt> <comment type="block" pos:line="40" pos:column="24">/* &gt;0 =&gt; entry exists =&gt; race condition. */</comment>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name pos:line="41" pos:column="7">status<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">!=<pos:position pos:line="41" pos:column="16"/></operator> <literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal></expr>)<pos:position pos:line="41" pos:column="19"/></condition><then pos:line="41" pos:column="19"> <block pos:line="41" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">ERROR<pos:position pos:line="42" pos:column="10"/></name><argument_list pos:line="42" pos:column="10">(<argument><expr><literal type="string" pos:line="42" pos:column="11">"utils_vl_lookup: c_avl_insert failed."<pos:position pos:line="42" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">c_avl_destroy<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name><name pos:line="43" pos:column="19">by_type<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">by_plugin_tree<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">sfree<pos:position pos:line="44" pos:column="10"/></name><argument_list pos:line="44" pos:column="10">(<argument><expr><name pos:line="44" pos:column="11">by_type<pos:position pos:line="44" pos:column="18"/></name></expr></argument>)<pos:position pos:line="44" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">sfree<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">type_copy<pos:position pos:line="45" pos:column="20"/></name></expr></argument>)<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><operator pos:line="46" pos:column="12">(<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">NULL<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">)<pos:position pos:line="46" pos:column="18"/></operator></expr>;<pos:position pos:line="46" pos:column="19"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <return pos:line="49" pos:column="3">return <expr><operator pos:line="49" pos:column="10">(<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">by_type<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">)<pos:position pos:line="49" pos:column="19"/></operator></expr>;<pos:position pos:line="49" pos:column="20"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
