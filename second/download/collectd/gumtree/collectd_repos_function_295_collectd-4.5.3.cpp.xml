<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_295_collectd-4.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_init<pos:position pos:line="1" pos:column="12"/></name> <parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">void<pos:position pos:line="1" pos:column="18"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="19"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">cache_tree<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">==<pos:position pos:line="3" pos:column="20"/></operator> <name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr>)<pos:position pos:line="3" pos:column="26"/></condition><then pos:line="3" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="5">cache_tree<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">c_avl_create<pos:position pos:line="4" pos:column="30"/></name> <argument_list pos:line="4" pos:column="31">(<argument><expr><operator pos:line="4" pos:column="32">(<pos:position pos:line="4" pos:column="33"/></operator><call><call><name pos:line="4" pos:column="33">int<pos:position pos:line="4" pos:column="36"/></name> <argument_list pos:line="4" pos:column="37">(<argument><expr><operator pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call> <argument_list pos:line="4" pos:column="41">(<argument><expr><specifier pos:line="4" pos:column="42">const<pos:position pos:line="4" pos:column="47"/></specifier> <name pos:line="4" pos:column="48">void<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator></expr></argument>, <argument><expr><specifier pos:line="4" pos:column="56">const<pos:position pos:line="4" pos:column="61"/></specifier> <name pos:line="4" pos:column="62">void<pos:position pos:line="4" pos:column="66"/></name> <operator pos:line="4" pos:column="67">*<pos:position pos:line="4" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="69"/></argument_list></call><operator pos:line="4" pos:column="69">)<pos:position pos:line="4" pos:column="70"/></operator>
	<name pos:line="5" pos:column="9">cache_compare<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt></block></then></if>

  <return pos:line="7" pos:column="3">return <expr><operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><literal type="number" pos:line="7" pos:column="11">0<pos:position pos:line="7" pos:column="12"/></literal><operator pos:line="7" pos:column="12">)<pos:position pos:line="7" pos:column="13"/></operator></expr>;<pos:position pos:line="7" pos:column="14"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
