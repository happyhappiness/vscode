<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2228_collectd-5.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">escape_slashes<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">buffer<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">buffer_size<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">buffer_len<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">buffer_len<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <call><name pos:line="6" pos:column="22">strlen<pos:position pos:line="6" pos:column="28"/></name> <argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">buffer<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">buffer_len<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;=<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="27">1<pos:position pos:line="8" pos:column="28"/></literal></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29">
	<block pos:line="9" pos:column="9">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">strcmp<pos:position pos:line="10" pos:column="27"/></name> <argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"/"<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">buffer<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call> <operator pos:line="10" pos:column="42">==<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="45">0<pos:position pos:line="10" pos:column="46"/></literal></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47">
		<block pos:line="11" pos:column="17">{
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><name pos:line="12" pos:column="29">buffer_size<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">&lt;<pos:position pos:line="12" pos:column="45"/></operator> <literal type="number" pos:line="12" pos:column="43">5<pos:position pos:line="12" pos:column="44"/></literal></expr>)<pos:position pos:line="12" pos:column="45"/></condition><then pos:line="12" pos:column="45">
				<block type="pseudo"><return pos:line="13" pos:column="33">return <expr><operator pos:line="13" pos:column="40">(<pos:position pos:line="13" pos:column="41"/></operator><operator pos:line="13" pos:column="41">-<pos:position pos:line="13" pos:column="42"/></operator><literal type="number" pos:line="13" pos:column="42">1<pos:position pos:line="13" pos:column="43"/></literal><operator pos:line="13" pos:column="43">)<pos:position pos:line="13" pos:column="44"/></operator></expr>;<pos:position pos:line="13" pos:column="45"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">sstrncpy<pos:position pos:line="14" pos:column="33"/></name> <argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">buffer<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="43">"root"<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">buffer_size<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal><operator pos:line="16" pos:column="26">)<pos:position pos:line="16" pos:column="27"/></operator></expr>;<pos:position pos:line="16" pos:column="28"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* Move one to the left */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">buffer<pos:position pos:line="20" pos:column="19"/></name><index pos:line="20" pos:column="19">[<expr><literal type="number" pos:line="20" pos:column="20">0<pos:position pos:line="20" pos:column="21"/></literal></expr>]<pos:position pos:line="20" pos:column="22"/></index></name> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <literal type="char" pos:line="20" pos:column="26">'/'<pos:position pos:line="20" pos:column="29"/></literal></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
	<block pos:line="21" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">memmove<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">buffer<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">buffer<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">+<pos:position pos:line="22" pos:column="42"/></operator> <literal type="number" pos:line="22" pos:column="43">1<pos:position pos:line="22" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">buffer_len<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">buffer_len<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">--<pos:position pos:line="23" pos:column="29"/></operator></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="25">buffer_len<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></condition> <incr><expr><name pos:line="26" pos:column="37">i<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">++<pos:position pos:line="26" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="41"/></control>
	<block pos:line="27" pos:column="9">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">buffer<pos:position pos:line="28" pos:column="27"/></name><index pos:line="28" pos:column="27">[<expr><name pos:line="28" pos:column="28">i<pos:position pos:line="28" pos:column="29"/></name></expr>]<pos:position pos:line="28" pos:column="30"/></index></name> <operator pos:line="28" pos:column="31">==<pos:position pos:line="28" pos:column="33"/></operator> <literal type="char" pos:line="28" pos:column="34">'/'<pos:position pos:line="28" pos:column="37"/></literal></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="25">buffer<pos:position pos:line="29" pos:column="31"/></name><index pos:line="29" pos:column="31">[<expr><name pos:line="29" pos:column="32">i<pos:position pos:line="29" pos:column="33"/></name></expr>]<pos:position pos:line="29" pos:column="34"/></index></name> <operator pos:line="29" pos:column="35">=<pos:position pos:line="29" pos:column="36"/></operator> <literal type="char" pos:line="29" pos:column="37">'_'<pos:position pos:line="29" pos:column="40"/></literal></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></for>

	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal><operator pos:line="32" pos:column="18">)<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
