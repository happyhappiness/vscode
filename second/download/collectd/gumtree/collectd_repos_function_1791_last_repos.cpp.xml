<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1791_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">uint128_t<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">str_to_uint128<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">str<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">len<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">uint128_t<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">lcore_mask<pos:position pos:line="2" pos:column="23"/></name></decl>;<pos:position pos:line="2" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">err<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">memset<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">&amp;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="11">lcore_mask<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="26">sizeof<argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">lcore_mask<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">len<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">&lt;=<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="14">2<pos:position pos:line="7" pos:column="15"/></literal> <operator pos:line="7" pos:column="16">||<pos:position pos:line="7" pos:column="18"/></operator> <call><name pos:line="7" pos:column="19">strncmp<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">str<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="32">"0x"<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="38">2<pos:position pos:line="7" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call> <operator pos:line="7" pos:column="41">!=<pos:position pos:line="7" pos:column="43"/></operator> <literal type="number" pos:line="7" pos:column="44">0<pos:position pos:line="7" pos:column="45"/></literal></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46"> <block pos:line="7" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"%s Value %s should be represened in hexadecimal format"<pos:position pos:line="8" pos:column="67"/></literal></expr></argument>,
          <argument><expr><name pos:line="9" pos:column="11">__FUNCTION__<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="25">str<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">lcore_mask<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="12" pos:column="3">/* If str is &lt;= 64 bit long ('0x' + 16 chars = 18 chars) then
   * conversion is straightforward. Otherwise str is splitted into 64b long
   * blocks */</comment>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">len<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">&lt;=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="14">18<pos:position pos:line="15" pos:column="16"/></literal></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17"> <block pos:line="15" pos:column="18">{
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">lcore_mask<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">low<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">strtoull_safe<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">str<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="41">&amp;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="42">err<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">err<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13">
      <block type="pseudo"><return pos:line="18" pos:column="7">return <expr><name pos:line="18" pos:column="14">lcore_mask<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></return></block></then></if>
  }<pos:position pos:line="19" pos:column="4"/></block></then> <else pos:line="19" pos:column="5">else <block pos:line="19" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name></type> <name><name pos:line="20" pos:column="10">low_str<pos:position pos:line="20" pos:column="17"/></name><index pos:line="20" pos:column="17">[<expr><name pos:line="20" pos:column="18">DATA_MAX_NAME_LEN<pos:position pos:line="20" pos:column="35"/></name></expr>]<pos:position pos:line="20" pos:column="36"/></index></name></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name><name pos:line="21" pos:column="10">high_str<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><name pos:line="21" pos:column="19">DATA_MAX_NAME_LEN<pos:position pos:line="21" pos:column="36"/></name></expr>]<pos:position pos:line="21" pos:column="37"/></index></name></decl>;<pos:position pos:line="21" pos:column="38"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memset<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">high_str<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="22">0<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="25">sizeof<argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">high_str<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memset<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">low_str<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="21">0<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="24">sizeof<argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">low_str<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">strncpy<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">high_str<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">str<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">len<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">-<pos:position pos:line="26" pos:column="33"/></operator> <literal type="number" pos:line="26" pos:column="34">16<pos:position pos:line="26" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">strncpy<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">low_str<pos:position pos:line="27" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">str<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">+<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">len<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">-<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">16<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="38">16<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">lcore_mask<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">low<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">strtoull_safe<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">low_str<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="45">&amp;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="46">err<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">err<pos:position pos:line="30" pos:column="12"/></name></expr>)<pos:position pos:line="30" pos:column="13"/></condition><then pos:line="30" pos:column="13">
      <block type="pseudo"><return pos:line="31" pos:column="7">return <expr><name pos:line="31" pos:column="14">lcore_mask<pos:position pos:line="31" pos:column="24"/></name></expr>;<pos:position pos:line="31" pos:column="25"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">lcore_mask<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">high<pos:position pos:line="33" pos:column="20"/></name></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <call><name pos:line="33" pos:column="23">strtoull_safe<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">high_str<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="47">&amp;<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="48">err<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">err<pos:position pos:line="34" pos:column="12"/></name></expr>)<pos:position pos:line="34" pos:column="13"/></condition><then pos:line="34" pos:column="13"> <block pos:line="34" pos:column="14">{
      <expr_stmt><expr><name><name pos:line="35" pos:column="7">lcore_mask<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">low<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <literal type="number" pos:line="35" pos:column="24">0<pos:position pos:line="35" pos:column="25"/></literal></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
      <return pos:line="36" pos:column="7">return <expr><name pos:line="36" pos:column="14">lcore_mask<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
  }<pos:position pos:line="38" pos:column="4"/></block></else></if>
  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">lcore_mask<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
