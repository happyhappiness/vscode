<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_722_collectd-4.8.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name><name pos:line="3" pos:column="9">range_critical_g<pos:position pos:line="3" pos:column="25"/></name><operator pos:line="3" pos:column="25">.<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="26">min<pos:position pos:line="3" pos:column="29"/></name></name> <operator pos:line="3" pos:column="30">=<pos:position pos:line="3" pos:column="31"/></operator> <name pos:line="3" pos:column="32">NAN<pos:position pos:line="3" pos:column="35"/></name></expr>;<pos:position pos:line="3" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="4" pos:column="9">range_critical_g<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">.<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">max<pos:position pos:line="4" pos:column="29"/></name></name> <operator pos:line="4" pos:column="30">=<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">NAN<pos:position pos:line="4" pos:column="35"/></name></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="5" pos:column="9">range_critical_g<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">.<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">invert<pos:position pos:line="5" pos:column="32"/></name></name> <operator pos:line="5" pos:column="33">=<pos:position pos:line="5" pos:column="34"/></operator> <literal type="number" pos:line="5" pos:column="35">0<pos:position pos:line="5" pos:column="36"/></literal></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="7" pos:column="9">range_warning_g<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">.<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">min<pos:position pos:line="7" pos:column="28"/></name></name> <operator pos:line="7" pos:column="29">=<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">NAN<pos:position pos:line="7" pos:column="34"/></name></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">range_warning_g<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">max<pos:position pos:line="8" pos:column="28"/></name></name> <operator pos:line="8" pos:column="29">=<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="31">NAN<pos:position pos:line="8" pos:column="34"/></name></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">range_warning_g<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">.<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">invert<pos:position pos:line="9" pos:column="31"/></name></name> <operator pos:line="9" pos:column="32">=<pos:position pos:line="9" pos:column="33"/></operator> <literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><literal type="number" pos:line="11" pos:column="16">42<pos:position pos:line="11" pos:column="18"/></literal></expr>)<pos:position pos:line="11" pos:column="19"/></condition>
	<block pos:line="12" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">c<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="15" pos:column="17">c<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">getopt<pos:position pos:line="15" pos:column="27"/></name> <argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">argc<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">argv<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="41">"w:c:s:n:H:g:d:h"<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">c<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>

		<switch pos:line="19" pos:column="17">switch <condition pos:line="19" pos:column="24">(<expr><name pos:line="19" pos:column="25">c<pos:position pos:line="19" pos:column="26"/></name></expr>)<pos:position pos:line="19" pos:column="27"/></condition>
		<block pos:line="20" pos:column="17">{
			<case pos:line="21" pos:column="25">case <expr><literal type="char" pos:line="21" pos:column="30">'c'<pos:position pos:line="21" pos:column="33"/></literal></expr>:<pos:position pos:line="21" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">parse_range<pos:position pos:line="22" pos:column="44"/></name> <argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">optarg<pos:position pos:line="22" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="54">&amp;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="55">range_critical_g<pos:position pos:line="22" pos:column="71"/></name></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>
				<break pos:line="23" pos:column="33">break;<pos:position pos:line="23" pos:column="39"/></break>
			<case pos:line="24" pos:column="25">case <expr><literal type="char" pos:line="24" pos:column="30">'w'<pos:position pos:line="24" pos:column="33"/></literal></expr>:<pos:position pos:line="24" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="25" pos:column="33">parse_range<pos:position pos:line="25" pos:column="44"/></name> <argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">optarg<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="55">range_warning_g<pos:position pos:line="25" pos:column="70"/></name></expr></argument>)<pos:position pos:line="25" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="72"/></expr_stmt>
				<break pos:line="26" pos:column="33">break;<pos:position pos:line="26" pos:column="39"/></break>
			<case pos:line="27" pos:column="25">case <expr><literal type="char" pos:line="27" pos:column="30">'s'<pos:position pos:line="27" pos:column="33"/></literal></expr>:<pos:position pos:line="27" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="28" pos:column="33">socket_file_g<pos:position pos:line="28" pos:column="46"/></name> <operator pos:line="28" pos:column="47">=<pos:position pos:line="28" pos:column="48"/></operator> <name pos:line="28" pos:column="49">optarg<pos:position pos:line="28" pos:column="55"/></name></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
				<break pos:line="29" pos:column="33">break;<pos:position pos:line="29" pos:column="39"/></break>
			<case pos:line="30" pos:column="25">case <expr><literal type="char" pos:line="30" pos:column="30">'n'<pos:position pos:line="30" pos:column="33"/></literal></expr>:<pos:position pos:line="30" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="31" pos:column="33">value_string_g<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">=<pos:position pos:line="31" pos:column="49"/></operator> <name pos:line="31" pos:column="50">optarg<pos:position pos:line="31" pos:column="56"/></name></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
				<break pos:line="32" pos:column="33">break;<pos:position pos:line="32" pos:column="39"/></break>
			<case pos:line="33" pos:column="25">case <expr><literal type="char" pos:line="33" pos:column="30">'H'<pos:position pos:line="33" pos:column="33"/></literal></expr>:<pos:position pos:line="33" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="34" pos:column="33">hostname_g<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">=<pos:position pos:line="34" pos:column="45"/></operator> <name pos:line="34" pos:column="46">optarg<pos:position pos:line="34" pos:column="52"/></name></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
				<break pos:line="35" pos:column="33">break;<pos:position pos:line="35" pos:column="39"/></break>
			<case pos:line="36" pos:column="25">case <expr><literal type="char" pos:line="36" pos:column="30">'g'<pos:position pos:line="36" pos:column="33"/></literal></expr>:<pos:position pos:line="36" pos:column="34"/></case>
				<if pos:line="37" pos:column="33">if <condition pos:line="37" pos:column="36">(<expr><call><name pos:line="37" pos:column="37">strcasecmp<pos:position pos:line="37" pos:column="47"/></name> <argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">optarg<pos:position pos:line="37" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="57">"none"<pos:position pos:line="37" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call> <operator pos:line="37" pos:column="65">==<pos:position pos:line="37" pos:column="67"/></operator> <literal type="number" pos:line="37" pos:column="68">0<pos:position pos:line="37" pos:column="69"/></literal></expr>)<pos:position pos:line="37" pos:column="70"/></condition><then pos:line="37" pos:column="70">
					<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="41">consolitation_g<pos:position pos:line="38" pos:column="56"/></name> <operator pos:line="38" pos:column="57">=<pos:position pos:line="38" pos:column="58"/></operator> <name pos:line="38" pos:column="59">CON_NONE<pos:position pos:line="38" pos:column="67"/></name></expr>;<pos:position pos:line="38" pos:column="68"/></expr_stmt></block></then>
				<elseif pos:line="39" pos:column="33">else <if pos:line="39" pos:column="38">if <condition pos:line="39" pos:column="41">(<expr><call><name pos:line="39" pos:column="42">strcasecmp<pos:position pos:line="39" pos:column="52"/></name> <argument_list pos:line="39" pos:column="53">(<argument><expr><name pos:line="39" pos:column="54">optarg<pos:position pos:line="39" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="62">"average"<pos:position pos:line="39" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call> <operator pos:line="39" pos:column="73">==<pos:position pos:line="39" pos:column="75"/></operator> <literal type="number" pos:line="39" pos:column="76">0<pos:position pos:line="39" pos:column="77"/></literal></expr>)<pos:position pos:line="39" pos:column="78"/></condition><then pos:line="39" pos:column="78">
					<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="41">consolitation_g<pos:position pos:line="40" pos:column="56"/></name> <operator pos:line="40" pos:column="57">=<pos:position pos:line="40" pos:column="58"/></operator> <name pos:line="40" pos:column="59">CON_AVERAGE<pos:position pos:line="40" pos:column="70"/></name></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt></block></then></if></elseif>
				<elseif pos:line="41" pos:column="33">else <if pos:line="41" pos:column="38">if <condition pos:line="41" pos:column="41">(<expr><call><name pos:line="41" pos:column="42">strcasecmp<pos:position pos:line="41" pos:column="52"/></name> <argument_list pos:line="41" pos:column="53">(<argument><expr><name pos:line="41" pos:column="54">optarg<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="62">"sum"<pos:position pos:line="41" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call> <operator pos:line="41" pos:column="69">==<pos:position pos:line="41" pos:column="71"/></operator> <literal type="number" pos:line="41" pos:column="72">0<pos:position pos:line="41" pos:column="73"/></literal></expr>)<pos:position pos:line="41" pos:column="74"/></condition><then pos:line="41" pos:column="74">
					<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="41">consolitation_g<pos:position pos:line="42" pos:column="56"/></name> <operator pos:line="42" pos:column="57">=<pos:position pos:line="42" pos:column="58"/></operator> <name pos:line="42" pos:column="59">CON_SUM<pos:position pos:line="42" pos:column="66"/></name></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt></block></then></if></elseif>
				<elseif pos:line="43" pos:column="33">else <if pos:line="43" pos:column="38">if <condition pos:line="43" pos:column="41">(<expr><call><name pos:line="43" pos:column="42">strcasecmp<pos:position pos:line="43" pos:column="52"/></name> <argument_list pos:line="43" pos:column="53">(<argument><expr><name pos:line="43" pos:column="54">optarg<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="62">"percentage"<pos:position pos:line="43" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="75"/></argument_list></call> <operator pos:line="43" pos:column="76">==<pos:position pos:line="43" pos:column="78"/></operator> <literal type="number" pos:line="43" pos:column="79">0<pos:position pos:line="43" pos:column="80"/></literal></expr>)<pos:position pos:line="43" pos:column="81"/></condition><then pos:line="43" pos:column="81">
					<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="41">consolitation_g<pos:position pos:line="44" pos:column="56"/></name> <operator pos:line="44" pos:column="57">=<pos:position pos:line="44" pos:column="58"/></operator> <name pos:line="44" pos:column="59">CON_PERCENTAGE<pos:position pos:line="44" pos:column="73"/></name></expr>;<pos:position pos:line="44" pos:column="74"/></expr_stmt></block></then></if></elseif>
				<else pos:line="45" pos:column="33">else
				<block pos:line="46" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="47" pos:column="41">fprintf<pos:position pos:line="47" pos:column="48"/></name> <argument_list pos:line="47" pos:column="49">(<argument><expr><name pos:line="47" pos:column="50">stderr<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="58">"Unknown consolidation function `%s'.\n"<pos:position pos:line="47" pos:column="98"/></literal></expr></argument>,
							<argument><expr><name pos:line="48" pos:column="57">optarg<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="49" pos:column="41">usage<pos:position pos:line="49" pos:column="46"/></name> <argument_list pos:line="49" pos:column="47">(<argument><expr><name><name pos:line="49" pos:column="48">argv<pos:position pos:line="49" pos:column="52"/></name><index pos:line="49" pos:column="52">[<expr><literal type="number" pos:line="49" pos:column="53">0<pos:position pos:line="49" pos:column="54"/></literal></expr>]<pos:position pos:line="49" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="57"/></expr_stmt>
				}<pos:position pos:line="50" pos:column="34"/></block></else></if>
				<break pos:line="51" pos:column="33">break;<pos:position pos:line="51" pos:column="39"/></break>
			<case pos:line="52" pos:column="25">case <expr><literal type="char" pos:line="52" pos:column="30">'d'<pos:position pos:line="52" pos:column="33"/></literal></expr>:<pos:position pos:line="52" pos:column="34"/></case>
			<block pos:line="53" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="54" pos:column="33">char<pos:position pos:line="54" pos:column="37"/></name> <modifier pos:line="54" pos:column="38">*<pos:position pos:line="54" pos:column="39"/></modifier><modifier pos:line="54" pos:column="39">*<pos:position pos:line="54" pos:column="40"/></modifier></type><name pos:line="54" pos:column="40">tmp<pos:position pos:line="54" pos:column="43"/></name></decl>;<pos:position pos:line="54" pos:column="44"/></decl_stmt>
				<expr_stmt><expr><name pos:line="55" pos:column="33">tmp<pos:position pos:line="55" pos:column="36"/></name> <operator pos:line="55" pos:column="37">=<pos:position pos:line="55" pos:column="38"/></operator> <operator pos:line="55" pos:column="39">(<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="40">char<pos:position pos:line="55" pos:column="44"/></name> <operator pos:line="55" pos:column="45">*<pos:position pos:line="55" pos:column="46"/></operator><operator pos:line="55" pos:column="46">*<pos:position pos:line="55" pos:column="47"/></operator><operator pos:line="55" pos:column="47">)<pos:position pos:line="55" pos:column="48"/></operator> <call><name pos:line="55" pos:column="49">realloc<pos:position pos:line="55" pos:column="56"/></name> <argument_list pos:line="55" pos:column="57">(<argument><expr><name pos:line="55" pos:column="58">match_ds_g<pos:position pos:line="55" pos:column="68"/></name></expr></argument>,
						<argument><expr><operator pos:line="56" pos:column="49">(<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="50">match_ds_num_g<pos:position pos:line="56" pos:column="64"/></name> <operator pos:line="56" pos:column="65">+<pos:position pos:line="56" pos:column="66"/></operator> <literal type="number" pos:line="56" pos:column="67">1<pos:position pos:line="56" pos:column="68"/></literal><operator pos:line="56" pos:column="68">)<pos:position pos:line="56" pos:column="69"/></operator>
						<operator pos:line="57" pos:column="49">*<pos:position pos:line="57" pos:column="50"/></operator> <sizeof pos:line="57" pos:column="51">sizeof <argument_list pos:line="57" pos:column="58">(<argument><expr><name pos:line="57" pos:column="59">char<pos:position pos:line="57" pos:column="63"/></name> <operator pos:line="57" pos:column="64">*<pos:position pos:line="57" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt>
				<if pos:line="58" pos:column="33">if <condition pos:line="58" pos:column="36">(<expr><name pos:line="58" pos:column="37">tmp<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">==<pos:position pos:line="58" pos:column="43"/></operator> <name pos:line="58" pos:column="44">NULL<pos:position pos:line="58" pos:column="48"/></name></expr>)<pos:position pos:line="58" pos:column="49"/></condition><then pos:line="58" pos:column="49">
				<block pos:line="59" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="60" pos:column="41">fprintf<pos:position pos:line="60" pos:column="48"/></name> <argument_list pos:line="60" pos:column="49">(<argument><expr><name pos:line="60" pos:column="50">stderr<pos:position pos:line="60" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="58">"realloc failed: %s\n"<pos:position pos:line="60" pos:column="80"/></literal></expr></argument>,
							<argument><expr><call><name pos:line="61" pos:column="57">strerror<pos:position pos:line="61" pos:column="65"/></name> <argument_list pos:line="61" pos:column="66">(<argument><expr><name pos:line="61" pos:column="67">errno<pos:position pos:line="61" pos:column="72"/></name></expr></argument>)<pos:position pos:line="61" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="75"/></expr_stmt>
					<return pos:line="62" pos:column="41">return <expr><operator pos:line="62" pos:column="48">(<pos:position pos:line="62" pos:column="49"/></operator><name pos:line="62" pos:column="49">RET_UNKNOWN<pos:position pos:line="62" pos:column="60"/></name><operator pos:line="62" pos:column="60">)<pos:position pos:line="62" pos:column="61"/></operator></expr>;<pos:position pos:line="62" pos:column="62"/></return>
				}<pos:position pos:line="63" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="64" pos:column="33">match_ds_g<pos:position pos:line="64" pos:column="43"/></name> <operator pos:line="64" pos:column="44">=<pos:position pos:line="64" pos:column="45"/></operator> <name pos:line="64" pos:column="46">tmp<pos:position pos:line="64" pos:column="49"/></name></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="65" pos:column="33">match_ds_g<pos:position pos:line="65" pos:column="43"/></name><index pos:line="65" pos:column="43">[<expr><name pos:line="65" pos:column="44">match_ds_num_g<pos:position pos:line="65" pos:column="58"/></name></expr>]<pos:position pos:line="65" pos:column="59"/></index></name> <operator pos:line="65" pos:column="60">=<pos:position pos:line="65" pos:column="61"/></operator> <call><name pos:line="65" pos:column="62">cn_strdup<pos:position pos:line="65" pos:column="71"/></name> <argument_list pos:line="65" pos:column="72">(<argument><expr><name pos:line="65" pos:column="73">optarg<pos:position pos:line="65" pos:column="79"/></name></expr></argument>)<pos:position pos:line="65" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="81"/></expr_stmt>
				<if pos:line="66" pos:column="33">if <condition pos:line="66" pos:column="36">(<expr><name><name pos:line="66" pos:column="37">match_ds_g<pos:position pos:line="66" pos:column="47"/></name><index pos:line="66" pos:column="47">[<expr><name pos:line="66" pos:column="48">match_ds_num_g<pos:position pos:line="66" pos:column="62"/></name></expr>]<pos:position pos:line="66" pos:column="63"/></index></name> <operator pos:line="66" pos:column="64">==<pos:position pos:line="66" pos:column="66"/></operator> <name pos:line="66" pos:column="67">NULL<pos:position pos:line="66" pos:column="71"/></name></expr>)<pos:position pos:line="66" pos:column="72"/></condition><then pos:line="66" pos:column="72">
				<block pos:line="67" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="68" pos:column="41">fprintf<pos:position pos:line="68" pos:column="48"/></name> <argument_list pos:line="68" pos:column="49">(<argument><expr><name pos:line="68" pos:column="50">stderr<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="58">"cn_strdup failed: %s\n"<pos:position pos:line="68" pos:column="82"/></literal></expr></argument>,
							<argument><expr><call><name pos:line="69" pos:column="57">strerror<pos:position pos:line="69" pos:column="65"/></name> <argument_list pos:line="69" pos:column="66">(<argument><expr><name pos:line="69" pos:column="67">errno<pos:position pos:line="69" pos:column="72"/></name></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="75"/></expr_stmt>
					<return pos:line="70" pos:column="41">return <expr><operator pos:line="70" pos:column="48">(<pos:position pos:line="70" pos:column="49"/></operator><name pos:line="70" pos:column="49">RET_UNKNOWN<pos:position pos:line="70" pos:column="60"/></name><operator pos:line="70" pos:column="60">)<pos:position pos:line="70" pos:column="61"/></operator></expr>;<pos:position pos:line="70" pos:column="62"/></return>
				}<pos:position pos:line="71" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="72" pos:column="33">match_ds_num_g<pos:position pos:line="72" pos:column="47"/></name><operator pos:line="72" pos:column="47">++<pos:position pos:line="72" pos:column="49"/></operator></expr>;<pos:position pos:line="72" pos:column="50"/></expr_stmt>
				<break pos:line="73" pos:column="33">break;<pos:position pos:line="73" pos:column="39"/></break>
			}<pos:position pos:line="74" pos:column="26"/></block>
			<default pos:line="75" pos:column="25">default:<pos:position pos:line="75" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="76" pos:column="33">usage<pos:position pos:line="76" pos:column="38"/></name> <argument_list pos:line="76" pos:column="39">(<argument><expr><name><name pos:line="76" pos:column="40">argv<pos:position pos:line="76" pos:column="44"/></name><index pos:line="76" pos:column="44">[<expr><literal type="number" pos:line="76" pos:column="45">0<pos:position pos:line="76" pos:column="46"/></literal></expr>]<pos:position pos:line="76" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></switch> <comment type="block" pos:line="77" pos:column="19">/* switch (c) */</comment>
	}<pos:position pos:line="78" pos:column="10"/></block></while>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">(<pos:position pos:line="80" pos:column="14"/></operator><name pos:line="80" pos:column="14">socket_file_g<pos:position pos:line="80" pos:column="27"/></name> <operator pos:line="80" pos:column="28">==<pos:position pos:line="80" pos:column="30"/></operator> <name pos:line="80" pos:column="31">NULL<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">)<pos:position pos:line="80" pos:column="36"/></operator> <operator pos:line="80" pos:column="37">||<pos:position pos:line="80" pos:column="39"/></operator> <operator pos:line="80" pos:column="40">(<pos:position pos:line="80" pos:column="41"/></operator><name pos:line="80" pos:column="41">value_string_g<pos:position pos:line="80" pos:column="55"/></name> <operator pos:line="80" pos:column="56">==<pos:position pos:line="80" pos:column="58"/></operator> <name pos:line="80" pos:column="59">NULL<pos:position pos:line="80" pos:column="63"/></name><operator pos:line="80" pos:column="63">)<pos:position pos:line="80" pos:column="64"/></operator>
			<operator pos:line="81" pos:column="25">||<pos:position pos:line="81" pos:column="27"/></operator> <operator pos:line="81" pos:column="28">(<pos:position pos:line="81" pos:column="29"/></operator><name pos:line="81" pos:column="29">hostname_g<pos:position pos:line="81" pos:column="39"/></name> <operator pos:line="81" pos:column="40">==<pos:position pos:line="81" pos:column="42"/></operator> <name pos:line="81" pos:column="43">NULL<pos:position pos:line="81" pos:column="47"/></name><operator pos:line="81" pos:column="47">)<pos:position pos:line="81" pos:column="48"/></operator></expr>)<pos:position pos:line="81" pos:column="49"/></condition><then pos:line="81" pos:column="49">
	<block pos:line="82" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">fprintf<pos:position pos:line="83" pos:column="24"/></name> <argument_list pos:line="83" pos:column="25">(<argument><expr><name pos:line="83" pos:column="26">stderr<pos:position pos:line="83" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="34">"Missing required arguments.\n"<pos:position pos:line="83" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">usage<pos:position pos:line="84" pos:column="22"/></name> <argument_list pos:line="84" pos:column="23">(<argument><expr><name><name pos:line="84" pos:column="24">argv<pos:position pos:line="84" pos:column="28"/></name><index pos:line="84" pos:column="28">[<expr><literal type="number" pos:line="84" pos:column="29">0<pos:position pos:line="84" pos:column="30"/></literal></expr>]<pos:position pos:line="84" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="84" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<return pos:line="87" pos:column="9">return <expr><operator pos:line="87" pos:column="16">(<pos:position pos:line="87" pos:column="17"/></operator><call><name pos:line="87" pos:column="17">do_check<pos:position pos:line="87" pos:column="25"/></name> <argument_list pos:line="87" pos:column="26">()<pos:position pos:line="87" pos:column="28"/></argument_list></call><operator pos:line="87" pos:column="28">)<pos:position pos:line="87" pos:column="29"/></operator></expr>;<pos:position pos:line="87" pos:column="30"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
