<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2859_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">plugin_load_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">file<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">_Bool<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">global<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list> <block pos:line="1" pos:column="61">{
  <function_decl><type><name pos:line="2" pos:column="3">void<pos:position pos:line="2" pos:column="7"/></name></type> (<modifier pos:line="2" pos:column="9">*<pos:position pos:line="2" pos:column="10"/></modifier><name pos:line="2" pos:column="10">reg_handle<pos:position pos:line="2" pos:column="20"/></name>)<parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>;<pos:position pos:line="2" pos:column="28"/></function_decl>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">flags<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">RTLD_NOW<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">global<pos:position pos:line="5" pos:column="13"/></name></expr>)<pos:position pos:line="5" pos:column="14"/></condition><then pos:line="5" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="5">flags<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">|=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">RTLD_GLOBAL<pos:position pos:line="6" pos:column="25"/></name></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">void<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">dlh<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><call><name pos:line="8" pos:column="15">dlopen<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">file<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">flags<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">dlh<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">==<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">NULL<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">errbuf<pos:position pos:line="11" pos:column="16"/></name><index pos:line="11" pos:column="16">[<expr><literal type="number" pos:line="11" pos:column="17">1024<pos:position pos:line="11" pos:column="21"/></literal></expr>]<pos:position pos:line="11" pos:column="22"/></index></name> <init pos:line="11" pos:column="23">= <expr><literal type="string" pos:line="11" pos:column="25">""<pos:position pos:line="11" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">snprintf<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">errbuf<pos:position pos:line="13" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="22">sizeof<argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">errbuf<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></sizeof></expr></argument>,
             <argument><expr><literal type="string" pos:line="14" pos:column="14">"dlopen (\"%s\") failed: %s. "<pos:position pos:line="14" pos:column="44"/></literal>
             <literal type="string" pos:line="15" pos:column="14">"The most common cause for this problem is "<pos:position pos:line="15" pos:column="58"/></literal>
             <literal type="string" pos:line="16" pos:column="14">"missing dependencies. Use ldd(1) to check "<pos:position pos:line="16" pos:column="58"/></literal>
             <literal type="string" pos:line="17" pos:column="14">"the dependencies of the plugin "<pos:position pos:line="17" pos:column="47"/></literal>
             <literal type="string" pos:line="18" pos:column="14">"/ shared object."<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>,
             <argument><expr><name pos:line="19" pos:column="14">file<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="20">dlerror<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ERROR<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><literal type="string" pos:line="21" pos:column="11">"%s"<pos:position pos:line="21" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="17">errbuf<pos:position pos:line="21" pos:column="23"/></name></expr></argument>)<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="22" pos:column="5">/* Make sure this is printed to STDERR in any case, but also
     * make sure it's printed only once. */</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">list_log<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">!=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">NULL<pos:position pos:line="24" pos:column="25"/></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="7">fprintf<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">stderr<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="23">"ERROR: %s\n"<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">errbuf<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt></block></then></if>

    <return pos:line="27" pos:column="5">return <expr><literal type="number" pos:line="27" pos:column="12">1<pos:position pos:line="27" pos:column="13"/></literal></expr>;<pos:position pos:line="27" pos:column="14"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="30" pos:column="3">reg_handle<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><call><call><name pos:line="30" pos:column="17">void<pos:position pos:line="30" pos:column="21"/></name> <argument_list pos:line="30" pos:column="22">(<argument><expr><operator pos:line="30" pos:column="23">*<pos:position pos:line="30" pos:column="24"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">void<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call><operator pos:line="30" pos:column="31">)<pos:position pos:line="30" pos:column="32"/></operator><call><name pos:line="30" pos:column="32">dlsym<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">dlh<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="43">"module_register"<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">reg_handle<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">==<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">NULL<pos:position pos:line="31" pos:column="25"/></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26"> <block pos:line="31" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">WARNING<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><literal type="string" pos:line="32" pos:column="13">"Couldn't find symbol \"module_register\" in \"%s\": %s\n"<pos:position pos:line="32" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="73">file<pos:position pos:line="32" pos:column="77"/></name></expr></argument>,
            <argument><expr><call><name pos:line="33" pos:column="13">dlerror<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">()<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">dlclose<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">dlh<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">-<pos:position pos:line="35" pos:column="13"/></operator><literal type="number" pos:line="35" pos:column="13">1<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call pos:line="38" pos:column="3">(<modifier pos:line="38" pos:column="4">*<pos:position pos:line="38" pos:column="5"/></modifier><name pos:line="38" pos:column="5">reg_handle<pos:position pos:line="38" pos:column="15"/></name>)<argument_list pos:line="38" pos:column="16">()<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>

  <return pos:line="40" pos:column="3">return <expr><literal type="number" pos:line="40" pos:column="10">0<pos:position pos:line="40" pos:column="11"/></literal></expr>;<pos:position pos:line="40" pos:column="12"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
