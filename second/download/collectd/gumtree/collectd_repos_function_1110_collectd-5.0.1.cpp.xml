<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1110_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">c_ipmi_error<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">func<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">status<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">errbuf<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">4096<pos:position pos:line="3" pos:column="19"/></literal></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">memset<pos:position pos:line="5" pos:column="9"/></name> <argument_list pos:line="5" pos:column="10">(<argument><expr><name pos:line="5" pos:column="11">errbuf<pos:position pos:line="5" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="22">sizeof <argument_list pos:line="5" pos:column="29">(<argument><expr><name pos:line="5" pos:column="30">errbuf<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">IPMI_IS_OS_ERR<pos:position pos:line="7" pos:column="21"/></name> <argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">status<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">sstrerror<pos:position pos:line="9" pos:column="14"/></name> <argument_list pos:line="9" pos:column="15">(<argument><expr><call><name pos:line="9" pos:column="16">IPMI_GET_OS_ERR<pos:position pos:line="9" pos:column="31"/></name> <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">status<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="42">errbuf<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="50">sizeof <argument_list pos:line="9" pos:column="57">(<argument><expr><name pos:line="9" pos:column="58">errbuf<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then>
  <elseif pos:line="11" pos:column="3">else <if pos:line="11" pos:column="8">if <condition pos:line="11" pos:column="11">(<expr><call><name pos:line="11" pos:column="12">IPMI_IS_IPMI_ERR<pos:position pos:line="11" pos:column="28"/></name> <argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">status<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ipmi_get_error_string<pos:position pos:line="13" pos:column="26"/></name> <argument_list pos:line="13" pos:column="27">(<argument><expr><call><name pos:line="13" pos:column="28">IPMI_GET_IPMI_ERR<pos:position pos:line="13" pos:column="45"/></name> <argument_list pos:line="13" pos:column="46">(<argument><expr><name pos:line="13" pos:column="47">status<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="56">errbuf<pos:position pos:line="13" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="64">sizeof <argument_list pos:line="13" pos:column="71">(<argument><expr><name pos:line="13" pos:column="72">errbuf<pos:position pos:line="13" pos:column="78"/></name></expr></argument>)<pos:position pos:line="13" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="81"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if></elseif></if>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">errbuf<pos:position pos:line="16" pos:column="13"/></name><index pos:line="16" pos:column="13">[<expr><literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>]<pos:position pos:line="16" pos:column="16"/></index></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <literal type="number" pos:line="16" pos:column="20">0<pos:position pos:line="16" pos:column="21"/></literal></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ssnprintf<pos:position pos:line="18" pos:column="14"/></name> <argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">errbuf<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="24">sizeof <argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">errbuf<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"Unknown error %#x"<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">status<pos:position pos:line="18" pos:column="68"/></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">errbuf<pos:position pos:line="20" pos:column="9"/></name><index pos:line="20" pos:column="9">[<expr><sizeof pos:line="20" pos:column="10">sizeof <argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">errbuf<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></sizeof> <operator pos:line="20" pos:column="26">-<pos:position pos:line="20" pos:column="27"/></operator> <literal type="number" pos:line="20" pos:column="28">1<pos:position pos:line="20" pos:column="29"/></literal></expr>]<pos:position pos:line="20" pos:column="30"/></index></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">0<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">ERROR<pos:position pos:line="22" pos:column="8"/></name> <argument_list pos:line="22" pos:column="9">(<argument><expr><literal type="string" pos:line="22" pos:column="10">"ipmi plugin: %s failed: %s"<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">func<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">errbuf<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
