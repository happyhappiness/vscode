<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1508_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">c_ipmi_init<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list> <block pos:line="1" pos:column="30">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">c_ipmi_instance_t<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">st<pos:position pos:line="2" pos:column="24"/></name></decl>;<pos:position pos:line="2" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">callback_name<pos:position pos:line="3" pos:column="21"/></name><index pos:line="3" pos:column="21">[<expr><literal type="number" pos:line="3" pos:column="22">3<pos:position pos:line="3" pos:column="23"/></literal> <operator pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></operator> <name pos:line="3" pos:column="26">DATA_MAX_NAME_LEN<pos:position pos:line="3" pos:column="43"/></name></expr>]<pos:position pos:line="3" pos:column="44"/></index></name></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">os_handler<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">!=<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26"> <block pos:line="5" pos:column="27">{
    <return pos:line="6" pos:column="5">return <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">os_handler<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">ipmi_posix_thread_setup_os_handler<pos:position pos:line="9" pos:column="50"/></name><argument_list pos:line="9" pos:column="50">(<argument><expr><name pos:line="9" pos:column="51">SIGIO<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">os_handler<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ERROR<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><literal type="string" pos:line="11" pos:column="11">"ipmi plugin: ipmi_posix_thread_setup_os_handler failed."<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="70"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="15" pos:column="3">os_handler<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">set_log_handler<pos:position pos:line="15" pos:column="30"/></name></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">os_handler<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">c_ipmi_log<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">ipmi_init<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">os_handler<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call> <operator pos:line="17" pos:column="29">!=<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">0<pos:position pos:line="17" pos:column="33"/></literal></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34"> <block pos:line="17" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"ipmi plugin: ipmi_init() failed."<pos:position pos:line="18" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">os_handler<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">free_os_handler<pos:position pos:line="19" pos:column="32"/></name></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">os_handler<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if><empty_stmt pos:line="21" pos:column="4">;<pos:position pos:line="21" pos:column="5"/></empty_stmt>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">instances<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">==<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">NULL<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
    <comment type="block" pos:line="24" pos:column="5">/* No instances were configured, let's start a default instance. */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">st<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <call><name pos:line="25" pos:column="10">c_ipmi_init_instance<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">()<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">st<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">==<pos:position pos:line="26" pos:column="14"/></operator> <name pos:line="26" pos:column="15">NULL<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
      <block type="pseudo"><return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">ENOMEM<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">c_ipmi_add_instance<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">st<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="32" pos:column="3">/* Don't send `ADD' notifications during startup (~ 1 minute) */</comment>
  <decl_stmt><decl><type><name pos:line="33" pos:column="3">int<pos:position pos:line="33" pos:column="6"/></name></type> <name pos:line="33" pos:column="7">cycles<pos:position pos:line="33" pos:column="13"/></name> <init pos:line="33" pos:column="14">= <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal> <operator pos:line="33" pos:column="18">+<pos:position pos:line="33" pos:column="19"/></operator> <operator pos:line="33" pos:column="20">(<pos:position pos:line="33" pos:column="21"/></operator><literal type="number" pos:line="33" pos:column="21">60<pos:position pos:line="33" pos:column="23"/></literal> <operator pos:line="33" pos:column="24">/<pos:position pos:line="33" pos:column="25"/></operator> <call><name pos:line="33" pos:column="26">CDTIME_T_TO_TIME_T<pos:position pos:line="33" pos:column="44"/></name><argument_list pos:line="33" pos:column="44">(<argument><expr><call><name pos:line="33" pos:column="45">plugin_get_interval<pos:position pos:line="33" pos:column="64"/></name><argument_list pos:line="33" pos:column="64">()<pos:position pos:line="33" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call><operator pos:line="33" pos:column="67">)<pos:position pos:line="33" pos:column="68"/></operator></expr></init></decl>;<pos:position pos:line="33" pos:column="69"/></decl_stmt>

  <expr_stmt><expr><name pos:line="35" pos:column="3">st<pos:position pos:line="35" pos:column="5"/></name> <operator pos:line="35" pos:column="6">=<pos:position pos:line="35" pos:column="7"/></operator> <name pos:line="35" pos:column="8">instances<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
  <while pos:line="36" pos:column="3">while <condition pos:line="36" pos:column="9">(<expr><name pos:line="36" pos:column="10">NULL<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">!=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">st<pos:position pos:line="36" pos:column="20"/></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition> <block pos:line="36" pos:column="22">{
    <comment type="block" pos:line="37" pos:column="5">/* The `st-&gt;name` is used as "domain name" for ipmi_open_domain().
     * That value should be unique, so we do plugin_register_complex_read()
     * at first as it checks the uniqueness. */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">snprintf<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">callback_name<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="29">sizeof<argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">callback_name<pos:position pos:line="40" pos:column="49"/></name></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="52">"ipmi/%s"<pos:position pos:line="40" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="63">st<pos:position pos:line="40" pos:column="65"/></name><operator pos:line="40" pos:column="65">-&gt;<pos:position pos:line="40" pos:column="70"/></operator><name pos:line="40" pos:column="67">name<pos:position pos:line="40" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="42" pos:column="5">user_data_t<pos:position pos:line="42" pos:column="16"/></name></type> <name pos:line="42" pos:column="17">ud<pos:position pos:line="42" pos:column="19"/></name> <init pos:line="42" pos:column="20">= <expr><block pos:line="42" pos:column="22">{
        <expr><operator pos:line="43" pos:column="9">.<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">data<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <name pos:line="43" pos:column="17">st<pos:position pos:line="43" pos:column="19"/></name></expr>,
    }<pos:position pos:line="44" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="44" pos:column="7"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="46" pos:column="5">int<pos:position pos:line="46" pos:column="8"/></name></type> <name pos:line="46" pos:column="9">status<pos:position pos:line="46" pos:column="15"/></name> <init pos:line="46" pos:column="16">= <expr><call><name pos:line="46" pos:column="18">plugin_register_complex_read<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(
        <comment type="block" pos:line="47" pos:column="9">/* group     = */</comment> <argument><expr><literal type="string" pos:line="47" pos:column="27">"ipmi"<pos:position pos:line="47" pos:column="33"/></literal></expr></argument>,
        <comment type="block" pos:line="48" pos:column="9">/* name      = */</comment> <argument><expr><name pos:line="48" pos:column="27">callback_name<pos:position pos:line="48" pos:column="40"/></name></expr></argument>,
        <comment type="block" pos:line="49" pos:column="9">/* callback  = */</comment> <argument><expr><name pos:line="49" pos:column="27">c_ipmi_read<pos:position pos:line="49" pos:column="38"/></name></expr></argument>,
        <comment type="block" pos:line="50" pos:column="9">/* interval  = */</comment> <argument><expr><literal type="number" pos:line="50" pos:column="27">0<pos:position pos:line="50" pos:column="28"/></literal></expr></argument>,
        <comment type="block" pos:line="51" pos:column="9">/* user_data = */</comment> <argument><expr><operator pos:line="51" pos:column="27">&amp;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="28">ud<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="32"/></decl_stmt>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">status<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">!=<pos:position pos:line="53" pos:column="18"/></operator> <literal type="number" pos:line="53" pos:column="19">0<pos:position pos:line="53" pos:column="20"/></literal></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21"> <block pos:line="53" pos:column="22">{
      <expr_stmt><expr><name pos:line="54" pos:column="7">st<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <name><name pos:line="54" pos:column="12">st<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">next<pos:position pos:line="54" pos:column="20"/></name></name></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
      <continue pos:line="55" pos:column="7">continue;<pos:position pos:line="55" pos:column="16"/></continue>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="58" pos:column="5">st<pos:position pos:line="58" pos:column="7"/></name><operator pos:line="58" pos:column="7">-&gt;<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="9">init_in_progress<pos:position pos:line="58" pos:column="25"/></name></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <name pos:line="58" pos:column="28">cycles<pos:position pos:line="58" pos:column="34"/></name></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">st<pos:position pos:line="59" pos:column="7"/></name><operator pos:line="59" pos:column="7">-&gt;<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="9">active<pos:position pos:line="59" pos:column="15"/></name></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <literal type="number" pos:line="59" pos:column="18">1<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="61" pos:column="5">status<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">plugin_thread_create<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><operator pos:line="61" pos:column="35">&amp;<pos:position pos:line="61" pos:column="40"/></operator><name><name pos:line="61" pos:column="36">st<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">-&gt;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="40">thread_id<pos:position pos:line="61" pos:column="49"/></name></name></expr></argument>, <comment type="block" pos:line="61" pos:column="51">/* attr = */</comment> <argument><expr><name pos:line="61" pos:column="64">NULL<pos:position pos:line="61" pos:column="68"/></name></expr></argument>,
                                  <argument><expr><name pos:line="62" pos:column="35">c_ipmi_thread_main<pos:position pos:line="62" pos:column="53"/></name></expr></argument>,
                                  <comment type="block" pos:line="63" pos:column="35">/* user data = */</comment> <argument><expr><operator pos:line="63" pos:column="53">(<pos:position pos:line="63" pos:column="54"/></operator><name pos:line="63" pos:column="54">void<pos:position pos:line="63" pos:column="58"/></name> <operator pos:line="63" pos:column="59">*<pos:position pos:line="63" pos:column="60"/></operator><operator pos:line="63" pos:column="60">)<pos:position pos:line="63" pos:column="61"/></operator><name pos:line="63" pos:column="61">st<pos:position pos:line="63" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="65">"ipmi"<pos:position pos:line="63" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="73"/></expr_stmt>

    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">status<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">!=<pos:position pos:line="65" pos:column="18"/></operator> <literal type="number" pos:line="65" pos:column="19">0<pos:position pos:line="65" pos:column="20"/></literal></expr>)<pos:position pos:line="65" pos:column="21"/></condition><then pos:line="65" pos:column="21"> <block pos:line="65" pos:column="22">{
      <expr_stmt><expr><name><name pos:line="66" pos:column="7">st<pos:position pos:line="66" pos:column="9"/></name><operator pos:line="66" pos:column="9">-&gt;<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="11">active<pos:position pos:line="66" pos:column="17"/></name></name> <operator pos:line="66" pos:column="18">=<pos:position pos:line="66" pos:column="19"/></operator> <literal type="number" pos:line="66" pos:column="20">0<pos:position pos:line="66" pos:column="21"/></literal></expr>;<pos:position pos:line="66" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="67" pos:column="7">st<pos:position pos:line="67" pos:column="9"/></name><operator pos:line="67" pos:column="9">-&gt;<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="11">thread_id<pos:position pos:line="67" pos:column="20"/></name></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <operator pos:line="67" pos:column="23">(<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="24">pthread_t<pos:position pos:line="67" pos:column="33"/></name><operator pos:line="67" pos:column="33">)<pos:position pos:line="67" pos:column="34"/></operator><block pos:line="67" pos:column="34">{<expr><literal type="number" pos:line="67" pos:column="35">0<pos:position pos:line="67" pos:column="36"/></literal></expr>}<pos:position pos:line="67" pos:column="37"/></block></expr>;<pos:position pos:line="67" pos:column="38"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="69" pos:column="7">plugin_unregister_read<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">callback_name<pos:position pos:line="69" pos:column="43"/></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="45"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="71" pos:column="7">ERROR<pos:position pos:line="71" pos:column="12"/></name><argument_list pos:line="71" pos:column="12">(<argument><expr><literal type="string" pos:line="71" pos:column="13">"ipmi plugin: pthread_create failed for `%s`."<pos:position pos:line="71" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="61">callback_name<pos:position pos:line="71" pos:column="74"/></name></expr></argument>)<pos:position pos:line="71" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="76"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="74" pos:column="5">st<pos:position pos:line="74" pos:column="7"/></name> <operator pos:line="74" pos:column="8">=<pos:position pos:line="74" pos:column="9"/></operator> <name><name pos:line="74" pos:column="10">st<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">next<pos:position pos:line="74" pos:column="18"/></name></name></expr>;<pos:position pos:line="74" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="75" pos:column="4"/></block></while>

  <return pos:line="77" pos:column="3">return <expr><literal type="number" pos:line="77" pos:column="10">0<pos:position pos:line="77" pos:column="11"/></literal></expr>;<pos:position pos:line="77" pos:column="12"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
