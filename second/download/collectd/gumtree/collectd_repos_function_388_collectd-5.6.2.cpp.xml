<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_388_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">get_via_generic_iokit<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">double<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">ret_capacity_full<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="62">/* {{{ */</comment>
                                  <parameter><decl><type><name pos:line="2" pos:column="35">double<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">ret_capacity_design<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">double<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">ret_current<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="56">double<pos:position pos:line="3" pos:column="62"/></name> <modifier pos:line="3" pos:column="63">*<pos:position pos:line="3" pos:column="64"/></modifier></type><name pos:line="3" pos:column="64">ret_voltage<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="76"/></parameter_list> <block pos:line="3" pos:column="77">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">kern_return_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">status<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">io_iterator_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">iterator<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">io_object_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">io_obj<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CFDictionaryRef<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">bat_root_dict<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CFArrayRef<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">bat_info_arry<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CFIndex<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">bat_info_arry_len<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CFDictionaryRef<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">bat_info_dict<pos:position pos:line="11" pos:column="32"/></name></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">double<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">temp_double<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">status<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">IOServiceGetMatchingServices<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(
      <argument><expr><name pos:line="16" pos:column="7">kIOMasterPortDefault<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="29">IOServiceNameMatching<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(<argument><expr><literal type="string" pos:line="16" pos:column="51">"battery"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="16" pos:column="63">&amp;<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="64">iterator<pos:position pos:line="16" pos:column="72"/></name></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="74"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">kIOReturnSuccess<pos:position pos:line="17" pos:column="33"/></name></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34"> <block pos:line="17" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">DEBUG<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"IOServiceGetMatchingServices failed."<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
    <return pos:line="19" pos:column="5">return;<pos:position pos:line="19" pos:column="12"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><operator pos:line="22" pos:column="10">(<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">io_obj<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <call><name pos:line="22" pos:column="20">IOIteratorNext<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">iterator<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call><operator pos:line="22" pos:column="44">)<pos:position pos:line="22" pos:column="45"/></operator></expr>)<pos:position pos:line="22" pos:column="46"/></condition> <block pos:line="22" pos:column="47">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">status<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">IORegistryEntryCreateCFProperties<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(
        <argument><expr><name pos:line="24" pos:column="9">io_obj<pos:position pos:line="24" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">CFMutableDictionaryRef<pos:position pos:line="24" pos:column="40"/></name> <operator pos:line="24" pos:column="41">*<pos:position pos:line="24" pos:column="42"/></operator><operator pos:line="24" pos:column="42">)<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="44">bat_root_dict<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">kCFAllocatorDefault<pos:position pos:line="24" pos:column="78"/></name></expr></argument>,
        <argument><expr><name pos:line="25" pos:column="9">kNilOptions<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">!=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">kIOReturnSuccess<pos:position pos:line="26" pos:column="35"/></name></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36"> <block pos:line="26" pos:column="37">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">DEBUG<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><literal type="string" pos:line="27" pos:column="13">"IORegistryEntryCreateCFProperties failed."<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
      <continue pos:line="28" pos:column="7">continue;<pos:position pos:line="28" pos:column="16"/></continue>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">bat_info_arry<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator>
        <operator pos:line="32" pos:column="9">(<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">CFArrayRef<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">)<pos:position pos:line="32" pos:column="21"/></operator><call><name pos:line="32" pos:column="21">CFDictionaryGetValue<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">bat_root_dict<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="57">CFSTR<pos:position pos:line="32" pos:column="62"/></name><argument_list pos:line="32" pos:column="62">(<argument><expr><literal type="string" pos:line="32" pos:column="63">"IOBatteryInfo"<pos:position pos:line="32" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="81"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">bat_info_arry<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">==<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">NULL<pos:position pos:line="33" pos:column="30"/></name></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">CFRelease<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">bat_root_dict<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
      <continue pos:line="35" pos:column="7">continue;<pos:position pos:line="35" pos:column="16"/></continue>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="37" pos:column="5">bat_info_arry_len<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <call><name pos:line="37" pos:column="25">CFArrayGetCount<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">bat_info_arry<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>

    <for pos:line="39" pos:column="5">for <control pos:line="39" pos:column="9">(<init><decl><type><name pos:line="39" pos:column="10">CFIndex<pos:position pos:line="39" pos:column="17"/></name></type> <name pos:line="39" pos:column="18">bat_info_arry_pos<pos:position pos:line="39" pos:column="35"/></name> <init pos:line="39" pos:column="36">= <expr><literal type="number" pos:line="39" pos:column="38">0<pos:position pos:line="39" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="39" pos:column="40"/></init> <condition><expr><name pos:line="39" pos:column="41">bat_info_arry_pos<pos:position pos:line="39" pos:column="58"/></name> <operator pos:line="39" pos:column="59">&lt;<pos:position pos:line="39" pos:column="63"/></operator> <name pos:line="39" pos:column="61">bat_info_arry_len<pos:position pos:line="39" pos:column="78"/></name></expr>;<pos:position pos:line="39" pos:column="79"/></condition>
         <incr><expr><name pos:line="40" pos:column="10">bat_info_arry_pos<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">++<pos:position pos:line="40" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="30"/></control> <block pos:line="40" pos:column="31">{
      <expr_stmt><expr><name pos:line="41" pos:column="7">bat_info_dict<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <operator pos:line="41" pos:column="23">(<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">CFDictionaryRef<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">)<pos:position pos:line="41" pos:column="40"/></operator><call><name pos:line="41" pos:column="40">CFArrayGetValueAtIndex<pos:position pos:line="41" pos:column="62"/></name><argument_list pos:line="41" pos:column="62">(
          <argument><expr><name pos:line="42" pos:column="11">bat_info_arry<pos:position pos:line="42" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="26">bat_info_arry_pos<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>

      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><call><name pos:line="44" pos:column="11">isnan<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><operator pos:line="44" pos:column="17">*<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">ret_capacity_full<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="37"/></condition><then pos:line="44" pos:column="37"> <block pos:line="44" pos:column="38">{
        <expr_stmt><expr><name pos:line="45" pos:column="9">temp_double<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <call><name pos:line="45" pos:column="23">dict_get_double<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">bat_info_dict<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="54">"Capacity"<pos:position pos:line="45" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="46" pos:column="9">*<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">ret_capacity_full<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">temp_double<pos:position pos:line="46" pos:column="41"/></name> <operator pos:line="46" pos:column="42">/<pos:position pos:line="46" pos:column="43"/></operator> <literal type="number" pos:line="46" pos:column="44">1000.0<pos:position pos:line="46" pos:column="50"/></literal></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>

      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><call><name pos:line="49" pos:column="11">isnan<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">ret_capacity_design<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="39"/></condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">temp_double<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <call><name pos:line="50" pos:column="23">dict_get_double<pos:position pos:line="50" pos:column="38"/></name><argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">bat_info_dict<pos:position pos:line="50" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="54">"AbsoluteMaxCapacity"<pos:position pos:line="50" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">ret_capacity_design<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">=<pos:position pos:line="51" pos:column="31"/></operator> <name pos:line="51" pos:column="32">temp_double<pos:position pos:line="51" pos:column="43"/></name> <operator pos:line="51" pos:column="44">/<pos:position pos:line="51" pos:column="45"/></operator> <literal type="number" pos:line="51" pos:column="46">1000.0<pos:position pos:line="51" pos:column="52"/></literal></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if>

      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><call><name pos:line="54" pos:column="11">isnan<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><operator pos:line="54" pos:column="17">*<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">ret_current<pos:position pos:line="54" pos:column="29"/></name></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31"> <block pos:line="54" pos:column="32">{
        <expr_stmt><expr><name pos:line="55" pos:column="9">temp_double<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <call><name pos:line="55" pos:column="23">dict_get_double<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">bat_info_dict<pos:position pos:line="55" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="54">"Current"<pos:position pos:line="55" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">ret_current<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <name pos:line="56" pos:column="24">temp_double<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">/<pos:position pos:line="56" pos:column="37"/></operator> <literal type="number" pos:line="56" pos:column="38">1000.0<pos:position pos:line="56" pos:column="44"/></literal></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if>

      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><call><name pos:line="59" pos:column="11">isnan<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><operator pos:line="59" pos:column="17">*<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="18">ret_voltage<pos:position pos:line="59" pos:column="29"/></name></expr></argument>)<pos:position pos:line="59" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="31"/></condition><then pos:line="59" pos:column="31"> <block pos:line="59" pos:column="32">{
        <expr_stmt><expr><name pos:line="60" pos:column="9">temp_double<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">dict_get_double<pos:position pos:line="60" pos:column="38"/></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name pos:line="60" pos:column="39">bat_info_dict<pos:position pos:line="60" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="54">"Voltage"<pos:position pos:line="60" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="61" pos:column="9">*<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">ret_voltage<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">temp_double<pos:position pos:line="61" pos:column="35"/></name> <operator pos:line="61" pos:column="36">/<pos:position pos:line="61" pos:column="37"/></operator> <literal type="number" pos:line="61" pos:column="38">1000.0<pos:position pos:line="61" pos:column="44"/></literal></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">CFRelease<pos:position pos:line="65" pos:column="14"/></name><argument_list pos:line="65" pos:column="14">(<argument><expr><name pos:line="65" pos:column="15">bat_root_dict<pos:position pos:line="65" pos:column="28"/></name></expr></argument>)<pos:position pos:line="65" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">IOObjectRelease<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">iterator<pos:position pos:line="68" pos:column="27"/></name></expr></argument>)<pos:position pos:line="68" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="29"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
