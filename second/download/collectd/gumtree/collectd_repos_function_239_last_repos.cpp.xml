<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_239_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpu_read<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list> <block pos:line="1" pos:column="27">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">cdtime_t<pos:position pos:line="2" pos:column="11"/></name></type> <name pos:line="2" pos:column="12">now<pos:position pos:line="2" pos:column="15"/></name> <init pos:line="2" pos:column="16">= <expr><call><name pos:line="2" pos:column="18">cdtime<pos:position pos:line="2" pos:column="24"/></name><argument_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="27"/></decl_stmt>

<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">PROCESSOR_CPU_LOAD_INFO<pos:position pos:line="4" pos:column="28"/></name></expr></cpp:if> <comment type="block" pos:line="4" pos:column="29">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">kern_return_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">status<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">processor_cpu_load_info_data_t<pos:position pos:line="7" pos:column="33"/></name></type> <name pos:line="7" pos:column="34">cpu_info<pos:position pos:line="7" pos:column="42"/></name></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">mach_msg_type_number_t<pos:position pos:line="8" pos:column="25"/></name></type> <name pos:line="8" pos:column="26">cpu_info_len<pos:position pos:line="8" pos:column="38"/></name></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">host_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">cpu_host<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>

  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">mach_msg_type_number_t<pos:position pos:line="12" pos:column="30"/></name></type> <name pos:line="12" pos:column="31">cpu<pos:position pos:line="12" pos:column="34"/></name> <init pos:line="12" pos:column="35">= <expr><literal type="number" pos:line="12" pos:column="37">0<pos:position pos:line="12" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></init> <condition><expr><name pos:line="12" pos:column="40">cpu<pos:position pos:line="12" pos:column="43"/></name> <operator pos:line="12" pos:column="44">&lt;<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="46">cpu_list_len<pos:position pos:line="12" pos:column="58"/></name></expr>;<pos:position pos:line="12" pos:column="59"/></condition> <incr><expr><name pos:line="12" pos:column="60">cpu<pos:position pos:line="12" pos:column="63"/></name><operator pos:line="12" pos:column="63">++<pos:position pos:line="12" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="66"/></control> <block pos:line="12" pos:column="67">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">cpu_host<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">cpu_info_len<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">PROCESSOR_BASIC_INFO_COUNT<pos:position pos:line="14" pos:column="46"/></name></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">status<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">processor_info<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">cpu_list<pos:position pos:line="16" pos:column="37"/></name><index pos:line="16" pos:column="37">[<expr><name pos:line="16" pos:column="38">cpu<pos:position pos:line="16" pos:column="41"/></name></expr>]<pos:position pos:line="16" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">PROCESSOR_CPU_LOAD_INFO<pos:position pos:line="16" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="69">&amp;<pos:position pos:line="16" pos:column="74"/></operator><name pos:line="16" pos:column="70">cpu_host<pos:position pos:line="16" pos:column="78"/></name></expr></argument>,
                            <argument><expr><operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">processor_info_t<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">)<pos:position pos:line="17" pos:column="47"/></operator><operator pos:line="17" pos:column="47">&amp;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="48">cpu_info<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="58">&amp;<pos:position pos:line="17" pos:column="63"/></operator><name pos:line="17" pos:column="59">cpu_info_len<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">status<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">!=<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">KERN_SUCCESS<pos:position pos:line="18" pos:column="31"/></name></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">ERROR<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="string" pos:line="19" pos:column="13">"cpu plugin: processor_info (PROCESSOR_CPU_LOAD_INFO) failed: %s"<pos:position pos:line="19" pos:column="78"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="20" pos:column="13">mach_error_string<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">status<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
      <continue pos:line="21" pos:column="7">continue;<pos:position pos:line="21" pos:column="16"/></continue>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">cpu_info_len<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">&lt;<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="24">CPU_STATE_MAX<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">ERROR<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><literal type="string" pos:line="25" pos:column="13">"cpu plugin: processor_info returned only %i elements.."<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>,
            <argument><expr><name pos:line="26" pos:column="13">cpu_info_len<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
      <continue pos:line="27" pos:column="7">continue;<pos:position pos:line="27" pos:column="16"/></continue>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">cpu_stage<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">cpu<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">COLLECTD_CPU_STATE_USER<pos:position pos:line="30" pos:column="43"/></name></expr></argument>,
              <argument><expr><operator pos:line="31" pos:column="15">(<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">derive_t<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">)<pos:position pos:line="31" pos:column="25"/></operator><name><name pos:line="31" pos:column="25">cpu_info<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">.<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">cpu_ticks<pos:position pos:line="31" pos:column="43"/></name><index pos:line="31" pos:column="43">[<expr><name pos:line="31" pos:column="44">CPU_STATE_USER<pos:position pos:line="31" pos:column="58"/></name></expr>]<pos:position pos:line="31" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="61">now<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">cpu_stage<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">cpu<pos:position pos:line="32" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="20">COLLECTD_CPU_STATE_NICE<pos:position pos:line="32" pos:column="43"/></name></expr></argument>,
              <argument><expr><operator pos:line="33" pos:column="15">(<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">derive_t<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">)<pos:position pos:line="33" pos:column="25"/></operator><name><name pos:line="33" pos:column="25">cpu_info<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">cpu_ticks<pos:position pos:line="33" pos:column="43"/></name><index pos:line="33" pos:column="43">[<expr><name pos:line="33" pos:column="44">CPU_STATE_NICE<pos:position pos:line="33" pos:column="58"/></name></expr>]<pos:position pos:line="33" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="61">now<pos:position pos:line="33" pos:column="64"/></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">cpu_stage<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">cpu<pos:position pos:line="34" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="20">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="34" pos:column="45"/></name></expr></argument>,
              <argument><expr><operator pos:line="35" pos:column="15">(<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">derive_t<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">)<pos:position pos:line="35" pos:column="25"/></operator><name><name pos:line="35" pos:column="25">cpu_info<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">.<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="34">cpu_ticks<pos:position pos:line="35" pos:column="43"/></name><index pos:line="35" pos:column="43">[<expr><name pos:line="35" pos:column="44">CPU_STATE_SYSTEM<pos:position pos:line="35" pos:column="60"/></name></expr>]<pos:position pos:line="35" pos:column="61"/></index></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="63">now<pos:position pos:line="35" pos:column="66"/></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">cpu_stage<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">cpu<pos:position pos:line="36" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="20">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="36" pos:column="43"/></name></expr></argument>,
              <argument><expr><operator pos:line="37" pos:column="15">(<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">derive_t<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">)<pos:position pos:line="37" pos:column="25"/></operator><name><name pos:line="37" pos:column="25">cpu_info<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">.<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">cpu_ticks<pos:position pos:line="37" pos:column="43"/></name><index pos:line="37" pos:column="43">[<expr><name pos:line="37" pos:column="44">CPU_STATE_IDLE<pos:position pos:line="37" pos:column="58"/></name></expr>]<pos:position pos:line="37" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">now<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></for>
<comment type="block" pos:line="39" pos:column="1">/* }}} #endif PROCESSOR_CPU_LOAD_INFO */</comment>

<cpp:elif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">elif<pos:position pos:line="41" pos:column="6"/></cpp:directive> <expr><call><name pos:line="41" pos:column="7">defined<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">KERNEL_LINUX<pos:position pos:line="41" pos:column="27"/></name></expr></argument>)<pos:position pos:line="41" pos:column="28"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="41" pos:column="29">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="42" pos:column="3">int<pos:position pos:line="42" pos:column="6"/></name></type> <name pos:line="42" pos:column="7">cpu<pos:position pos:line="42" pos:column="10"/></name></decl>;<pos:position pos:line="42" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="43" pos:column="3">FILE<pos:position pos:line="43" pos:column="7"/></name> <modifier pos:line="43" pos:column="8">*<pos:position pos:line="43" pos:column="9"/></modifier></type><name pos:line="43" pos:column="9">fh<pos:position pos:line="43" pos:column="11"/></name></decl>;<pos:position pos:line="43" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="44" pos:column="3">char<pos:position pos:line="44" pos:column="7"/></name></type> <name><name pos:line="44" pos:column="8">buf<pos:position pos:line="44" pos:column="11"/></name><index pos:line="44" pos:column="11">[<expr><literal type="number" pos:line="44" pos:column="12">1024<pos:position pos:line="44" pos:column="16"/></literal></expr>]<pos:position pos:line="44" pos:column="17"/></index></name></decl>;<pos:position pos:line="44" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="46" pos:column="3">char<pos:position pos:line="46" pos:column="7"/></name> <modifier pos:line="46" pos:column="8">*<pos:position pos:line="46" pos:column="9"/></modifier></type><name><name pos:line="46" pos:column="9">fields<pos:position pos:line="46" pos:column="15"/></name><index pos:line="46" pos:column="15">[<expr><literal type="number" pos:line="46" pos:column="16">11<pos:position pos:line="46" pos:column="18"/></literal></expr>]<pos:position pos:line="46" pos:column="19"/></index></name></decl>;<pos:position pos:line="46" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="47" pos:column="3">int<pos:position pos:line="47" pos:column="6"/></name></type> <name pos:line="47" pos:column="7">numfields<pos:position pos:line="47" pos:column="16"/></name></decl>;<pos:position pos:line="47" pos:column="17"/></decl_stmt>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><operator pos:line="49" pos:column="7">(<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">fh<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <call><name pos:line="49" pos:column="13">fopen<pos:position pos:line="49" pos:column="18"/></name><argument_list pos:line="49" pos:column="18">(<argument><expr><literal type="string" pos:line="49" pos:column="19">"/proc/stat"<pos:position pos:line="49" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"r"<pos:position pos:line="49" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call><operator pos:line="49" pos:column="37">)<pos:position pos:line="49" pos:column="38"/></operator> <operator pos:line="49" pos:column="39">==<pos:position pos:line="49" pos:column="41"/></operator> <name pos:line="49" pos:column="42">NULL<pos:position pos:line="49" pos:column="46"/></name></expr>)<pos:position pos:line="49" pos:column="47"/></condition><then pos:line="49" pos:column="47"> <block pos:line="49" pos:column="48">{
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">char<pos:position pos:line="50" pos:column="9"/></name></type> <name><name pos:line="50" pos:column="10">errbuf<pos:position pos:line="50" pos:column="16"/></name><index pos:line="50" pos:column="16">[<expr><literal type="number" pos:line="50" pos:column="17">1024<pos:position pos:line="50" pos:column="21"/></literal></expr>]<pos:position pos:line="50" pos:column="22"/></index></name></decl>;<pos:position pos:line="50" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ERROR<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><literal type="string" pos:line="51" pos:column="11">"cpu plugin: fopen (/proc/stat) failed: %s"<pos:position pos:line="51" pos:column="54"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="52" pos:column="11">sstrerror<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">errno<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="28">errbuf<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="36">sizeof<argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">errbuf<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <while pos:line="56" pos:column="3">while <condition pos:line="56" pos:column="9">(<expr><call><name pos:line="56" pos:column="10">fgets<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">buf<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="21">1024<pos:position pos:line="56" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="27">fh<pos:position pos:line="56" pos:column="29"/></name></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call> <operator pos:line="56" pos:column="31">!=<pos:position pos:line="56" pos:column="33"/></operator> <name pos:line="56" pos:column="34">NULL<pos:position pos:line="56" pos:column="38"/></name></expr>)<pos:position pos:line="56" pos:column="39"/></condition> <block pos:line="56" pos:column="40">{
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">strncmp<pos:position pos:line="57" pos:column="16"/></name><argument_list pos:line="57" pos:column="16">(<argument><expr><name pos:line="57" pos:column="17">buf<pos:position pos:line="57" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="22">"cpu"<pos:position pos:line="57" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="29">3<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="32"/></condition><then pos:line="57" pos:column="32">
      <block type="pseudo"><continue pos:line="58" pos:column="7">continue;<pos:position pos:line="58" pos:column="16"/></continue></block></then></if>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><operator pos:line="59" pos:column="9">(<pos:position pos:line="59" pos:column="10"/></operator><name><name pos:line="59" pos:column="10">buf<pos:position pos:line="59" pos:column="13"/></name><index pos:line="59" pos:column="13">[<expr><literal type="number" pos:line="59" pos:column="14">3<pos:position pos:line="59" pos:column="15"/></literal></expr>]<pos:position pos:line="59" pos:column="16"/></index></name> <operator pos:line="59" pos:column="17">&lt;<pos:position pos:line="59" pos:column="21"/></operator> <literal type="char" pos:line="59" pos:column="19">'0'<pos:position pos:line="59" pos:column="22"/></literal><operator pos:line="59" pos:column="22">)<pos:position pos:line="59" pos:column="23"/></operator> <operator pos:line="59" pos:column="24">||<pos:position pos:line="59" pos:column="26"/></operator> <operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator><name><name pos:line="59" pos:column="28">buf<pos:position pos:line="59" pos:column="31"/></name><index pos:line="59" pos:column="31">[<expr><literal type="number" pos:line="59" pos:column="32">3<pos:position pos:line="59" pos:column="33"/></literal></expr>]<pos:position pos:line="59" pos:column="34"/></index></name> <operator pos:line="59" pos:column="35">&gt;<pos:position pos:line="59" pos:column="39"/></operator> <literal type="char" pos:line="59" pos:column="37">'9'<pos:position pos:line="59" pos:column="40"/></literal><operator pos:line="59" pos:column="40">)<pos:position pos:line="59" pos:column="41"/></operator></expr>)<pos:position pos:line="59" pos:column="42"/></condition><then pos:line="59" pos:column="42">
      <block type="pseudo"><continue pos:line="60" pos:column="7">continue;<pos:position pos:line="60" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="62" pos:column="5">numfields<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <call><name pos:line="62" pos:column="17">strsplit<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">buf<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="31">fields<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="39">STATIC_ARRAY_SIZE<pos:position pos:line="62" pos:column="56"/></name><argument_list pos:line="62" pos:column="56">(<argument><expr><name pos:line="62" pos:column="57">fields<pos:position pos:line="62" pos:column="63"/></name></expr></argument>)<pos:position pos:line="62" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="66"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">numfields<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">&lt;<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="21">5<pos:position pos:line="63" pos:column="22"/></literal></expr>)<pos:position pos:line="63" pos:column="23"/></condition><then pos:line="63" pos:column="23">
      <block type="pseudo"><continue pos:line="64" pos:column="7">continue;<pos:position pos:line="64" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="66" pos:column="5">cpu<pos:position pos:line="66" pos:column="8"/></name> <operator pos:line="66" pos:column="9">=<pos:position pos:line="66" pos:column="10"/></operator> <call><name pos:line="66" pos:column="11">atoi<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><name><name pos:line="66" pos:column="16">fields<pos:position pos:line="66" pos:column="22"/></name><index pos:line="66" pos:column="22">[<expr><literal type="number" pos:line="66" pos:column="23">0<pos:position pos:line="66" pos:column="24"/></literal></expr>]<pos:position pos:line="66" pos:column="25"/></index></name> <operator pos:line="66" pos:column="26">+<pos:position pos:line="66" pos:column="27"/></operator> <literal type="number" pos:line="66" pos:column="28">3<pos:position pos:line="66" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="68" pos:column="5">/* Do not stage User and Nice immediately: we may need to alter them later: */</comment>
    <decl_stmt><decl><type><name pos:line="69" pos:column="5">long<pos:position pos:line="69" pos:column="9"/></name> <name pos:line="69" pos:column="10">long<pos:position pos:line="69" pos:column="14"/></name></type> <name pos:line="69" pos:column="15">user_value<pos:position pos:line="69" pos:column="25"/></name> <init pos:line="69" pos:column="26">= <expr><call><name pos:line="69" pos:column="28">atoll<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name><name pos:line="69" pos:column="34">fields<pos:position pos:line="69" pos:column="40"/></name><index pos:line="69" pos:column="40">[<expr><literal type="number" pos:line="69" pos:column="41">1<pos:position pos:line="69" pos:column="42"/></literal></expr>]<pos:position pos:line="69" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="70" pos:column="5">long<pos:position pos:line="70" pos:column="9"/></name> <name pos:line="70" pos:column="10">long<pos:position pos:line="70" pos:column="14"/></name></type> <name pos:line="70" pos:column="15">nice_value<pos:position pos:line="70" pos:column="25"/></name> <init pos:line="70" pos:column="26">= <expr><call><name pos:line="70" pos:column="28">atoll<pos:position pos:line="70" pos:column="33"/></name><argument_list pos:line="70" pos:column="33">(<argument><expr><name><name pos:line="70" pos:column="34">fields<pos:position pos:line="70" pos:column="40"/></name><index pos:line="70" pos:column="40">[<expr><literal type="number" pos:line="70" pos:column="41">2<pos:position pos:line="70" pos:column="42"/></literal></expr>]<pos:position pos:line="70" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="45"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">cpu_stage<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">(<argument><expr><name pos:line="71" pos:column="15">cpu<pos:position pos:line="71" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="20">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="71" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="47">(<pos:position pos:line="71" pos:column="48"/></operator><name pos:line="71" pos:column="48">derive_t<pos:position pos:line="71" pos:column="56"/></name><operator pos:line="71" pos:column="56">)<pos:position pos:line="71" pos:column="57"/></operator><call><name pos:line="71" pos:column="57">atoll<pos:position pos:line="71" pos:column="62"/></name><argument_list pos:line="71" pos:column="62">(<argument><expr><name><name pos:line="71" pos:column="63">fields<pos:position pos:line="71" pos:column="69"/></name><index pos:line="71" pos:column="69">[<expr><literal type="number" pos:line="71" pos:column="70">3<pos:position pos:line="71" pos:column="71"/></literal></expr>]<pos:position pos:line="71" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="71" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="71" pos:column="75">now<pos:position pos:line="71" pos:column="78"/></name></expr></argument>)<pos:position pos:line="71" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">cpu_stage<pos:position pos:line="72" pos:column="14"/></name><argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">cpu<pos:position pos:line="72" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="20">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="72" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="45">(<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="46">derive_t<pos:position pos:line="72" pos:column="54"/></name><operator pos:line="72" pos:column="54">)<pos:position pos:line="72" pos:column="55"/></operator><call><name pos:line="72" pos:column="55">atoll<pos:position pos:line="72" pos:column="60"/></name><argument_list pos:line="72" pos:column="60">(<argument><expr><name><name pos:line="72" pos:column="61">fields<pos:position pos:line="72" pos:column="67"/></name><index pos:line="72" pos:column="67">[<expr><literal type="number" pos:line="72" pos:column="68">4<pos:position pos:line="72" pos:column="69"/></literal></expr>]<pos:position pos:line="72" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="73">now<pos:position pos:line="72" pos:column="76"/></name></expr></argument>)<pos:position pos:line="72" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="78"/></expr_stmt>

    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name pos:line="74" pos:column="9">numfields<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">&gt;=<pos:position pos:line="74" pos:column="24"/></operator> <literal type="number" pos:line="74" pos:column="22">8<pos:position pos:line="74" pos:column="23"/></literal></expr>)<pos:position pos:line="74" pos:column="24"/></condition><then pos:line="74" pos:column="24"> <block pos:line="74" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">cpu_stage<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">cpu<pos:position pos:line="75" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="22">COLLECTD_CPU_STATE_WAIT<pos:position pos:line="75" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="47">(<pos:position pos:line="75" pos:column="48"/></operator><name pos:line="75" pos:column="48">derive_t<pos:position pos:line="75" pos:column="56"/></name><operator pos:line="75" pos:column="56">)<pos:position pos:line="75" pos:column="57"/></operator><call><name pos:line="75" pos:column="57">atoll<pos:position pos:line="75" pos:column="62"/></name><argument_list pos:line="75" pos:column="62">(<argument><expr><name><name pos:line="75" pos:column="63">fields<pos:position pos:line="75" pos:column="69"/></name><index pos:line="75" pos:column="69">[<expr><literal type="number" pos:line="75" pos:column="70">5<pos:position pos:line="75" pos:column="71"/></literal></expr>]<pos:position pos:line="75" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="75" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="75" pos:column="75">now<pos:position pos:line="75" pos:column="78"/></name></expr></argument>)<pos:position pos:line="75" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">cpu_stage<pos:position pos:line="76" pos:column="16"/></name><argument_list pos:line="76" pos:column="16">(<argument><expr><name pos:line="76" pos:column="17">cpu<pos:position pos:line="76" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="22">COLLECTD_CPU_STATE_INTERRUPT<pos:position pos:line="76" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="52">(<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="53">derive_t<pos:position pos:line="76" pos:column="61"/></name><operator pos:line="76" pos:column="61">)<pos:position pos:line="76" pos:column="62"/></operator><call><name pos:line="76" pos:column="62">atoll<pos:position pos:line="76" pos:column="67"/></name><argument_list pos:line="76" pos:column="67">(<argument><expr><name><name pos:line="76" pos:column="68">fields<pos:position pos:line="76" pos:column="74"/></name><index pos:line="76" pos:column="74">[<expr><literal type="number" pos:line="76" pos:column="75">6<pos:position pos:line="76" pos:column="76"/></literal></expr>]<pos:position pos:line="76" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="76" pos:column="78"/></argument_list></call></expr></argument>,
                <argument><expr><name pos:line="77" pos:column="17">now<pos:position pos:line="77" pos:column="20"/></name></expr></argument>)<pos:position pos:line="77" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="78" pos:column="7">cpu_stage<pos:position pos:line="78" pos:column="16"/></name><argument_list pos:line="78" pos:column="16">(<argument><expr><name pos:line="78" pos:column="17">cpu<pos:position pos:line="78" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="22">COLLECTD_CPU_STATE_SOFTIRQ<pos:position pos:line="78" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="50">(<pos:position pos:line="78" pos:column="51"/></operator><name pos:line="78" pos:column="51">derive_t<pos:position pos:line="78" pos:column="59"/></name><operator pos:line="78" pos:column="59">)<pos:position pos:line="78" pos:column="60"/></operator><call><name pos:line="78" pos:column="60">atoll<pos:position pos:line="78" pos:column="65"/></name><argument_list pos:line="78" pos:column="65">(<argument><expr><name><name pos:line="78" pos:column="66">fields<pos:position pos:line="78" pos:column="72"/></name><index pos:line="78" pos:column="72">[<expr><literal type="number" pos:line="78" pos:column="73">7<pos:position pos:line="78" pos:column="74"/></literal></expr>]<pos:position pos:line="78" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="78" pos:column="76"/></argument_list></call></expr></argument>,
                <argument><expr><name pos:line="79" pos:column="17">now<pos:position pos:line="79" pos:column="20"/></name></expr></argument>)<pos:position pos:line="79" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="22"/></expr_stmt>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if>

    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">numfields<pos:position pos:line="82" pos:column="18"/></name> <operator pos:line="82" pos:column="19">&gt;=<pos:position pos:line="82" pos:column="24"/></operator> <literal type="number" pos:line="82" pos:column="22">9<pos:position pos:line="82" pos:column="23"/></literal></expr>)<pos:position pos:line="82" pos:column="24"/></condition><then pos:line="82" pos:column="24"> <block pos:line="82" pos:column="25">{ <comment type="block" pos:line="82" pos:column="27">/* Steal (since Linux 2.6.11) */</comment>
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">cpu_stage<pos:position pos:line="83" pos:column="16"/></name><argument_list pos:line="83" pos:column="16">(<argument><expr><name pos:line="83" pos:column="17">cpu<pos:position pos:line="83" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="22">COLLECTD_CPU_STATE_STEAL<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="48">(<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="49">derive_t<pos:position pos:line="83" pos:column="57"/></name><operator pos:line="83" pos:column="57">)<pos:position pos:line="83" pos:column="58"/></operator><call><name pos:line="83" pos:column="58">atoll<pos:position pos:line="83" pos:column="63"/></name><argument_list pos:line="83" pos:column="63">(<argument><expr><name><name pos:line="83" pos:column="64">fields<pos:position pos:line="83" pos:column="70"/></name><index pos:line="83" pos:column="70">[<expr><literal type="number" pos:line="83" pos:column="71">8<pos:position pos:line="83" pos:column="72"/></literal></expr>]<pos:position pos:line="83" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="83" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="83" pos:column="76">now<pos:position pos:line="83" pos:column="79"/></name></expr></argument>)<pos:position pos:line="83" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name pos:line="86" pos:column="9">numfields<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">&gt;=<pos:position pos:line="86" pos:column="24"/></operator> <literal type="number" pos:line="86" pos:column="22">10<pos:position pos:line="86" pos:column="24"/></literal></expr>)<pos:position pos:line="86" pos:column="25"/></condition><then pos:line="86" pos:column="25"> <block pos:line="86" pos:column="26">{ <comment type="block" pos:line="86" pos:column="28">/* Guest (since Linux 2.6.24) */</comment>
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><name pos:line="87" pos:column="11">report_guest<pos:position pos:line="87" pos:column="23"/></name></expr>)<pos:position pos:line="87" pos:column="24"/></condition><then pos:line="87" pos:column="24"> <block pos:line="87" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="88" pos:column="9">long<pos:position pos:line="88" pos:column="13"/></name> <name pos:line="88" pos:column="14">long<pos:position pos:line="88" pos:column="18"/></name></type> <name pos:line="88" pos:column="19">value<pos:position pos:line="88" pos:column="24"/></name> <init pos:line="88" pos:column="25">= <expr><call><name pos:line="88" pos:column="27">atoll<pos:position pos:line="88" pos:column="32"/></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name><name pos:line="88" pos:column="33">fields<pos:position pos:line="88" pos:column="39"/></name><index pos:line="88" pos:column="39">[<expr><literal type="number" pos:line="88" pos:column="40">9<pos:position pos:line="88" pos:column="41"/></literal></expr>]<pos:position pos:line="88" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="88" pos:column="44"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">cpu_stage<pos:position pos:line="89" pos:column="18"/></name><argument_list pos:line="89" pos:column="18">(<argument><expr><name pos:line="89" pos:column="19">cpu<pos:position pos:line="89" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="24">COLLECTD_CPU_STATE_GUEST<pos:position pos:line="89" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="50">(<pos:position pos:line="89" pos:column="51"/></operator><name pos:line="89" pos:column="51">derive_t<pos:position pos:line="89" pos:column="59"/></name><operator pos:line="89" pos:column="59">)<pos:position pos:line="89" pos:column="60"/></operator><name pos:line="89" pos:column="60">value<pos:position pos:line="89" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="67">now<pos:position pos:line="89" pos:column="70"/></name></expr></argument>)<pos:position pos:line="89" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="72"/></expr_stmt>
        <comment type="block" pos:line="90" pos:column="9">/* Guest is included in User; optionally subtract Guest from User: */</comment>
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">subtract_guest<pos:position pos:line="91" pos:column="27"/></name></expr>)<pos:position pos:line="91" pos:column="28"/></condition><then pos:line="91" pos:column="28"> <block pos:line="91" pos:column="29">{
          <expr_stmt><expr><name pos:line="92" pos:column="11">user_value<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">-=<pos:position pos:line="92" pos:column="24"/></operator> <name pos:line="92" pos:column="25">value<pos:position pos:line="92" pos:column="30"/></name></expr>;<pos:position pos:line="92" pos:column="31"/></expr_stmt>
          <if pos:line="93" pos:column="11">if <condition pos:line="93" pos:column="14">(<expr><name pos:line="93" pos:column="15">user_value<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">&lt;<pos:position pos:line="93" pos:column="30"/></operator> <literal type="number" pos:line="93" pos:column="28">0<pos:position pos:line="93" pos:column="29"/></literal></expr>)<pos:position pos:line="93" pos:column="30"/></condition><then pos:line="93" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="31">user_value<pos:position pos:line="93" pos:column="41"/></name> <operator pos:line="93" pos:column="42">=<pos:position pos:line="93" pos:column="43"/></operator> <literal type="number" pos:line="93" pos:column="44">0<pos:position pos:line="93" pos:column="45"/></literal></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt></block></then></if>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if>
      }<pos:position pos:line="95" pos:column="8"/></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>

    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">numfields<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">&gt;=<pos:position pos:line="98" pos:column="24"/></operator> <literal type="number" pos:line="98" pos:column="22">11<pos:position pos:line="98" pos:column="24"/></literal></expr>)<pos:position pos:line="98" pos:column="25"/></condition><then pos:line="98" pos:column="25"> <block pos:line="98" pos:column="26">{ <comment type="block" pos:line="98" pos:column="28">/* Guest_nice (since Linux 2.6.33) */</comment>
      <if pos:line="99" pos:column="7">if <condition pos:line="99" pos:column="10">(<expr><name pos:line="99" pos:column="11">report_guest<pos:position pos:line="99" pos:column="23"/></name></expr>)<pos:position pos:line="99" pos:column="24"/></condition><then pos:line="99" pos:column="24"> <block pos:line="99" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="100" pos:column="9">long<pos:position pos:line="100" pos:column="13"/></name> <name pos:line="100" pos:column="14">long<pos:position pos:line="100" pos:column="18"/></name></type> <name pos:line="100" pos:column="19">value<pos:position pos:line="100" pos:column="24"/></name> <init pos:line="100" pos:column="25">= <expr><call><name pos:line="100" pos:column="27">atoll<pos:position pos:line="100" pos:column="32"/></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name><name pos:line="100" pos:column="33">fields<pos:position pos:line="100" pos:column="39"/></name><index pos:line="100" pos:column="39">[<expr><literal type="number" pos:line="100" pos:column="40">10<pos:position pos:line="100" pos:column="42"/></literal></expr>]<pos:position pos:line="100" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="100" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="100" pos:column="45"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">cpu_stage<pos:position pos:line="101" pos:column="18"/></name><argument_list pos:line="101" pos:column="18">(<argument><expr><name pos:line="101" pos:column="19">cpu<pos:position pos:line="101" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="24">COLLECTD_CPU_STATE_GUEST_NICE<pos:position pos:line="101" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="55">(<pos:position pos:line="101" pos:column="56"/></operator><name pos:line="101" pos:column="56">derive_t<pos:position pos:line="101" pos:column="64"/></name><operator pos:line="101" pos:column="64">)<pos:position pos:line="101" pos:column="65"/></operator><name pos:line="101" pos:column="65">value<pos:position pos:line="101" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="72">now<pos:position pos:line="101" pos:column="75"/></name></expr></argument>)<pos:position pos:line="101" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="77"/></expr_stmt>
        <comment type="block" pos:line="102" pos:column="9">/* Guest_nice is included in Nice; optionally subtract Guest_nice from
           Nice: */</comment>
        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">subtract_guest<pos:position pos:line="104" pos:column="27"/></name></expr>)<pos:position pos:line="104" pos:column="28"/></condition><then pos:line="104" pos:column="28"> <block pos:line="104" pos:column="29">{
          <expr_stmt><expr><name pos:line="105" pos:column="11">nice_value<pos:position pos:line="105" pos:column="21"/></name> <operator pos:line="105" pos:column="22">-=<pos:position pos:line="105" pos:column="24"/></operator> <name pos:line="105" pos:column="25">value<pos:position pos:line="105" pos:column="30"/></name></expr>;<pos:position pos:line="105" pos:column="31"/></expr_stmt>
          <if pos:line="106" pos:column="11">if <condition pos:line="106" pos:column="14">(<expr><name pos:line="106" pos:column="15">nice_value<pos:position pos:line="106" pos:column="25"/></name> <operator pos:line="106" pos:column="26">&lt;<pos:position pos:line="106" pos:column="30"/></operator> <literal type="number" pos:line="106" pos:column="28">0<pos:position pos:line="106" pos:column="29"/></literal></expr>)<pos:position pos:line="106" pos:column="30"/></condition><then pos:line="106" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="31">nice_value<pos:position pos:line="106" pos:column="41"/></name> <operator pos:line="106" pos:column="42">=<pos:position pos:line="106" pos:column="43"/></operator> <literal type="number" pos:line="106" pos:column="44">0<pos:position pos:line="106" pos:column="45"/></literal></expr>;<pos:position pos:line="106" pos:column="46"/></expr_stmt></block></then></if>
        }<pos:position pos:line="107" pos:column="10"/></block></then></if>
      }<pos:position pos:line="108" pos:column="8"/></block></then></if>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="111" pos:column="5">/* Eventually stage User and Nice: */</comment>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">cpu_stage<pos:position pos:line="112" pos:column="14"/></name><argument_list pos:line="112" pos:column="14">(<argument><expr><name pos:line="112" pos:column="15">cpu<pos:position pos:line="112" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="20">COLLECTD_CPU_STATE_USER<pos:position pos:line="112" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="45">(<pos:position pos:line="112" pos:column="46"/></operator><name pos:line="112" pos:column="46">derive_t<pos:position pos:line="112" pos:column="54"/></name><operator pos:line="112" pos:column="54">)<pos:position pos:line="112" pos:column="55"/></operator><name pos:line="112" pos:column="55">user_value<pos:position pos:line="112" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="67">now<pos:position pos:line="112" pos:column="70"/></name></expr></argument>)<pos:position pos:line="112" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">cpu_stage<pos:position pos:line="113" pos:column="14"/></name><argument_list pos:line="113" pos:column="14">(<argument><expr><name pos:line="113" pos:column="15">cpu<pos:position pos:line="113" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="20">COLLECTD_CPU_STATE_NICE<pos:position pos:line="113" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="45">(<pos:position pos:line="113" pos:column="46"/></operator><name pos:line="113" pos:column="46">derive_t<pos:position pos:line="113" pos:column="54"/></name><operator pos:line="113" pos:column="54">)<pos:position pos:line="113" pos:column="55"/></operator><name pos:line="113" pos:column="55">nice_value<pos:position pos:line="113" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="67">now<pos:position pos:line="113" pos:column="70"/></name></expr></argument>)<pos:position pos:line="113" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="114" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="115" pos:column="3">fclose<pos:position pos:line="115" pos:column="9"/></name><argument_list pos:line="115" pos:column="9">(<argument><expr><name pos:line="115" pos:column="10">fh<pos:position pos:line="115" pos:column="12"/></name></expr></argument>)<pos:position pos:line="115" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="14"/></expr_stmt>
<comment type="block" pos:line="116" pos:column="1">/* }}} #endif defined(KERNEL_LINUX) */</comment>

<cpp:elif pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">elif<pos:position pos:line="118" pos:column="6"/></cpp:directive> <expr><call><name pos:line="118" pos:column="7">defined<pos:position pos:line="118" pos:column="14"/></name><argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">HAVE_LIBKSTAT<pos:position pos:line="118" pos:column="28"/></name></expr></argument>)<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="118" pos:column="30">/* {{{ */</comment>
  <decl_stmt><decl><specifier pos:line="119" pos:column="3">static<pos:position pos:line="119" pos:column="9"/></specifier> <type><name pos:line="119" pos:column="10">cpu_stat_t<pos:position pos:line="119" pos:column="20"/></name></type> <name pos:line="119" pos:column="21">cs<pos:position pos:line="119" pos:column="23"/></name></decl>;<pos:position pos:line="119" pos:column="24"/></decl_stmt>

  <if pos:line="121" pos:column="3">if <condition pos:line="121" pos:column="6">(<expr><name pos:line="121" pos:column="7">kc<pos:position pos:line="121" pos:column="9"/></name> <operator pos:line="121" pos:column="10">==<pos:position pos:line="121" pos:column="12"/></operator> <name pos:line="121" pos:column="13">NULL<pos:position pos:line="121" pos:column="17"/></name></expr>)<pos:position pos:line="121" pos:column="18"/></condition><then pos:line="121" pos:column="18">
    <block type="pseudo"><return pos:line="122" pos:column="5">return <expr><operator pos:line="122" pos:column="12">-<pos:position pos:line="122" pos:column="13"/></operator><literal type="number" pos:line="122" pos:column="13">1<pos:position pos:line="122" pos:column="14"/></literal></expr>;<pos:position pos:line="122" pos:column="15"/></return></block></then></if>

  <for pos:line="124" pos:column="3">for <control pos:line="124" pos:column="7">(<init><decl><type><name pos:line="124" pos:column="8">int<pos:position pos:line="124" pos:column="11"/></name></type> <name pos:line="124" pos:column="12">cpu<pos:position pos:line="124" pos:column="15"/></name> <init pos:line="124" pos:column="16">= <expr><literal type="number" pos:line="124" pos:column="18">0<pos:position pos:line="124" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="124" pos:column="20"/></init> <condition><expr><name pos:line="124" pos:column="21">cpu<pos:position pos:line="124" pos:column="24"/></name> <operator pos:line="124" pos:column="25">&lt;<pos:position pos:line="124" pos:column="29"/></operator> <name pos:line="124" pos:column="27">numcpu<pos:position pos:line="124" pos:column="33"/></name></expr>;<pos:position pos:line="124" pos:column="34"/></condition> <incr><expr><name pos:line="124" pos:column="35">cpu<pos:position pos:line="124" pos:column="38"/></name><operator pos:line="124" pos:column="38">++<pos:position pos:line="124" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="124" pos:column="41"/></control> <block pos:line="124" pos:column="42">{
    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><call><name pos:line="125" pos:column="9">kstat_read<pos:position pos:line="125" pos:column="19"/></name><argument_list pos:line="125" pos:column="19">(<argument><expr><name pos:line="125" pos:column="20">kc<pos:position pos:line="125" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="24">ksp<pos:position pos:line="125" pos:column="27"/></name><index pos:line="125" pos:column="27">[<expr><name pos:line="125" pos:column="28">cpu<pos:position pos:line="125" pos:column="31"/></name></expr>]<pos:position pos:line="125" pos:column="32"/></index></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="34">&amp;<pos:position pos:line="125" pos:column="39"/></operator><name pos:line="125" pos:column="35">cs<pos:position pos:line="125" pos:column="37"/></name></expr></argument>)<pos:position pos:line="125" pos:column="38"/></argument_list></call> <operator pos:line="125" pos:column="39">==<pos:position pos:line="125" pos:column="41"/></operator> <operator pos:line="125" pos:column="42">-<pos:position pos:line="125" pos:column="43"/></operator><literal type="number" pos:line="125" pos:column="43">1<pos:position pos:line="125" pos:column="44"/></literal></expr>)<pos:position pos:line="125" pos:column="45"/></condition><then pos:line="125" pos:column="45">
      <block type="pseudo"><continue pos:line="126" pos:column="7">continue;<pos:position pos:line="126" pos:column="16"/></continue></block></then></if> <comment type="block" pos:line="126" pos:column="17">/* error message? */</comment>

    <expr_stmt><expr><call><name pos:line="128" pos:column="5">cpu_stage<pos:position pos:line="128" pos:column="14"/></name><argument_list pos:line="128" pos:column="14">(<argument><expr><name><name pos:line="128" pos:column="15">ksp<pos:position pos:line="128" pos:column="18"/></name><index pos:line="128" pos:column="18">[<expr><name pos:line="128" pos:column="19">cpu<pos:position pos:line="128" pos:column="22"/></name></expr>]<pos:position pos:line="128" pos:column="23"/></index></name><operator pos:line="128" pos:column="23">-&gt;<pos:position pos:line="128" pos:column="28"/></operator><name pos:line="128" pos:column="25">ks_instance<pos:position pos:line="128" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="38">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="128" pos:column="61"/></name></expr></argument>,
              <argument><expr><operator pos:line="129" pos:column="15">(<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="16">derive_t<pos:position pos:line="129" pos:column="24"/></name><operator pos:line="129" pos:column="24">)<pos:position pos:line="129" pos:column="25"/></operator><name><name pos:line="129" pos:column="25">cs<pos:position pos:line="129" pos:column="27"/></name><operator pos:line="129" pos:column="27">.<pos:position pos:line="129" pos:column="28"/></operator><name pos:line="129" pos:column="28">cpu_sysinfo<pos:position pos:line="129" pos:column="39"/></name><operator pos:line="129" pos:column="39">.<pos:position pos:line="129" pos:column="40"/></operator><name pos:line="129" pos:column="40">cpu<pos:position pos:line="129" pos:column="43"/></name><index pos:line="129" pos:column="43">[<expr><name pos:line="129" pos:column="44">CPU_IDLE<pos:position pos:line="129" pos:column="52"/></name></expr>]<pos:position pos:line="129" pos:column="53"/></index></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="55">now<pos:position pos:line="129" pos:column="58"/></name></expr></argument>)<pos:position pos:line="129" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">cpu_stage<pos:position pos:line="130" pos:column="14"/></name><argument_list pos:line="130" pos:column="14">(<argument><expr><name><name pos:line="130" pos:column="15">ksp<pos:position pos:line="130" pos:column="18"/></name><index pos:line="130" pos:column="18">[<expr><name pos:line="130" pos:column="19">cpu<pos:position pos:line="130" pos:column="22"/></name></expr>]<pos:position pos:line="130" pos:column="23"/></index></name><operator pos:line="130" pos:column="23">-&gt;<pos:position pos:line="130" pos:column="28"/></operator><name pos:line="130" pos:column="25">ks_instance<pos:position pos:line="130" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="38">COLLECTD_CPU_STATE_USER<pos:position pos:line="130" pos:column="61"/></name></expr></argument>,
              <argument><expr><operator pos:line="131" pos:column="15">(<pos:position pos:line="131" pos:column="16"/></operator><name pos:line="131" pos:column="16">derive_t<pos:position pos:line="131" pos:column="24"/></name><operator pos:line="131" pos:column="24">)<pos:position pos:line="131" pos:column="25"/></operator><name><name pos:line="131" pos:column="25">cs<pos:position pos:line="131" pos:column="27"/></name><operator pos:line="131" pos:column="27">.<pos:position pos:line="131" pos:column="28"/></operator><name pos:line="131" pos:column="28">cpu_sysinfo<pos:position pos:line="131" pos:column="39"/></name><operator pos:line="131" pos:column="39">.<pos:position pos:line="131" pos:column="40"/></operator><name pos:line="131" pos:column="40">cpu<pos:position pos:line="131" pos:column="43"/></name><index pos:line="131" pos:column="43">[<expr><name pos:line="131" pos:column="44">CPU_USER<pos:position pos:line="131" pos:column="52"/></name></expr>]<pos:position pos:line="131" pos:column="53"/></index></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="55">now<pos:position pos:line="131" pos:column="58"/></name></expr></argument>)<pos:position pos:line="131" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">cpu_stage<pos:position pos:line="132" pos:column="14"/></name><argument_list pos:line="132" pos:column="14">(<argument><expr><name><name pos:line="132" pos:column="15">ksp<pos:position pos:line="132" pos:column="18"/></name><index pos:line="132" pos:column="18">[<expr><name pos:line="132" pos:column="19">cpu<pos:position pos:line="132" pos:column="22"/></name></expr>]<pos:position pos:line="132" pos:column="23"/></index></name><operator pos:line="132" pos:column="23">-&gt;<pos:position pos:line="132" pos:column="28"/></operator><name pos:line="132" pos:column="25">ks_instance<pos:position pos:line="132" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="38">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="132" pos:column="63"/></name></expr></argument>,
              <argument><expr><operator pos:line="133" pos:column="15">(<pos:position pos:line="133" pos:column="16"/></operator><name pos:line="133" pos:column="16">derive_t<pos:position pos:line="133" pos:column="24"/></name><operator pos:line="133" pos:column="24">)<pos:position pos:line="133" pos:column="25"/></operator><name><name pos:line="133" pos:column="25">cs<pos:position pos:line="133" pos:column="27"/></name><operator pos:line="133" pos:column="27">.<pos:position pos:line="133" pos:column="28"/></operator><name pos:line="133" pos:column="28">cpu_sysinfo<pos:position pos:line="133" pos:column="39"/></name><operator pos:line="133" pos:column="39">.<pos:position pos:line="133" pos:column="40"/></operator><name pos:line="133" pos:column="40">cpu<pos:position pos:line="133" pos:column="43"/></name><index pos:line="133" pos:column="43">[<expr><name pos:line="133" pos:column="44">CPU_KERNEL<pos:position pos:line="133" pos:column="54"/></name></expr>]<pos:position pos:line="133" pos:column="55"/></index></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="57">now<pos:position pos:line="133" pos:column="60"/></name></expr></argument>)<pos:position pos:line="133" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">cpu_stage<pos:position pos:line="134" pos:column="14"/></name><argument_list pos:line="134" pos:column="14">(<argument><expr><name><name pos:line="134" pos:column="15">ksp<pos:position pos:line="134" pos:column="18"/></name><index pos:line="134" pos:column="18">[<expr><name pos:line="134" pos:column="19">cpu<pos:position pos:line="134" pos:column="22"/></name></expr>]<pos:position pos:line="134" pos:column="23"/></index></name><operator pos:line="134" pos:column="23">-&gt;<pos:position pos:line="134" pos:column="28"/></operator><name pos:line="134" pos:column="25">ks_instance<pos:position pos:line="134" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="38">COLLECTD_CPU_STATE_WAIT<pos:position pos:line="134" pos:column="61"/></name></expr></argument>,
              <argument><expr><operator pos:line="135" pos:column="15">(<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="16">derive_t<pos:position pos:line="135" pos:column="24"/></name><operator pos:line="135" pos:column="24">)<pos:position pos:line="135" pos:column="25"/></operator><name><name pos:line="135" pos:column="25">cs<pos:position pos:line="135" pos:column="27"/></name><operator pos:line="135" pos:column="27">.<pos:position pos:line="135" pos:column="28"/></operator><name pos:line="135" pos:column="28">cpu_sysinfo<pos:position pos:line="135" pos:column="39"/></name><operator pos:line="135" pos:column="39">.<pos:position pos:line="135" pos:column="40"/></operator><name pos:line="135" pos:column="40">cpu<pos:position pos:line="135" pos:column="43"/></name><index pos:line="135" pos:column="43">[<expr><name pos:line="135" pos:column="44">CPU_WAIT<pos:position pos:line="135" pos:column="52"/></name></expr>]<pos:position pos:line="135" pos:column="53"/></index></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="55">now<pos:position pos:line="135" pos:column="58"/></name></expr></argument>)<pos:position pos:line="135" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="136" pos:column="4"/></block></for>
<comment type="block" pos:line="137" pos:column="1">/* }}} #endif defined(HAVE_LIBKSTAT) */</comment>

<cpp:elif pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">elif<pos:position pos:line="139" pos:column="6"/></cpp:directive> <expr><name pos:line="139" pos:column="7">CAN_USE_SYSCTL<pos:position pos:line="139" pos:column="21"/></name></expr></cpp:elif> <comment type="block" pos:line="139" pos:column="22">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="140" pos:column="3">uint64_t<pos:position pos:line="140" pos:column="11"/></name></type> <name><name pos:line="140" pos:column="12">cpuinfo<pos:position pos:line="140" pos:column="19"/></name><index pos:line="140" pos:column="19">[<expr><name pos:line="140" pos:column="20">numcpu<pos:position pos:line="140" pos:column="26"/></name></expr>]<pos:position pos:line="140" pos:column="27"/></index><index pos:line="140" pos:column="27">[<expr><name pos:line="140" pos:column="28">CPUSTATES<pos:position pos:line="140" pos:column="37"/></name></expr>]<pos:position pos:line="140" pos:column="38"/></index></name></decl>;<pos:position pos:line="140" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="141" pos:column="3">size_t<pos:position pos:line="141" pos:column="9"/></name></type> <name pos:line="141" pos:column="10">cpuinfo_size<pos:position pos:line="141" pos:column="22"/></name></decl>;<pos:position pos:line="141" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="142" pos:column="3">int<pos:position pos:line="142" pos:column="6"/></name></type> <name pos:line="142" pos:column="7">status<pos:position pos:line="142" pos:column="13"/></name></decl>;<pos:position pos:line="142" pos:column="14"/></decl_stmt>

  <if pos:line="144" pos:column="3">if <condition pos:line="144" pos:column="6">(<expr><name pos:line="144" pos:column="7">numcpu<pos:position pos:line="144" pos:column="13"/></name> <operator pos:line="144" pos:column="14">&lt;<pos:position pos:line="144" pos:column="18"/></operator> <literal type="number" pos:line="144" pos:column="16">1<pos:position pos:line="144" pos:column="17"/></literal></expr>)<pos:position pos:line="144" pos:column="18"/></condition><then pos:line="144" pos:column="18"> <block pos:line="144" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="145" pos:column="5">ERROR<pos:position pos:line="145" pos:column="10"/></name><argument_list pos:line="145" pos:column="10">(<argument><expr><literal type="string" pos:line="145" pos:column="11">"cpu plugin: Could not determine number of "<pos:position pos:line="145" pos:column="55"/></literal>
          <literal type="string" pos:line="146" pos:column="11">"installed CPUs using sysctl(3)."<pos:position pos:line="146" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="46"/></expr_stmt>
    <return pos:line="147" pos:column="5">return <expr><operator pos:line="147" pos:column="12">-<pos:position pos:line="147" pos:column="13"/></operator><literal type="number" pos:line="147" pos:column="13">1<pos:position pos:line="147" pos:column="14"/></literal></expr>;<pos:position pos:line="147" pos:column="15"/></return>
  }<pos:position pos:line="148" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="150" pos:column="3">memset<pos:position pos:line="150" pos:column="9"/></name><argument_list pos:line="150" pos:column="9">(<argument><expr><name pos:line="150" pos:column="10">cpuinfo<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="19">0<pos:position pos:line="150" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="150" pos:column="22">sizeof<argument_list pos:line="150" pos:column="28">(<argument><expr><name pos:line="150" pos:column="29">cpuinfo<pos:position pos:line="150" pos:column="36"/></name></expr></argument>)<pos:position pos:line="150" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="150" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="39"/></expr_stmt>

<cpp:if pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">if<pos:position pos:line="152" pos:column="4"/></cpp:directive> <expr><call><name pos:line="152" pos:column="5">defined<pos:position pos:line="152" pos:column="12"/></name><argument_list pos:line="152" pos:column="12">(<argument><expr><name pos:line="152" pos:column="13">KERN_CPTIME2<pos:position pos:line="152" pos:column="25"/></name></expr></argument>)<pos:position pos:line="152" pos:column="26"/></argument_list></call></expr></cpp:if>
  <if pos:line="153" pos:column="3">if <condition pos:line="153" pos:column="6">(<expr><name pos:line="153" pos:column="7">numcpu<pos:position pos:line="153" pos:column="13"/></name> <operator pos:line="153" pos:column="14">&gt;<pos:position pos:line="153" pos:column="18"/></operator> <literal type="number" pos:line="153" pos:column="16">1<pos:position pos:line="153" pos:column="17"/></literal></expr>)<pos:position pos:line="153" pos:column="18"/></condition><then pos:line="153" pos:column="18"> <block pos:line="153" pos:column="19">{
    <for pos:line="154" pos:column="5">for <control pos:line="154" pos:column="9">(<init><decl><type><name pos:line="154" pos:column="10">int<pos:position pos:line="154" pos:column="13"/></name></type> <name pos:line="154" pos:column="14">i<pos:position pos:line="154" pos:column="15"/></name> <init pos:line="154" pos:column="16">= <expr><literal type="number" pos:line="154" pos:column="18">0<pos:position pos:line="154" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="154" pos:column="20"/></init> <condition><expr><name pos:line="154" pos:column="21">i<pos:position pos:line="154" pos:column="22"/></name> <operator pos:line="154" pos:column="23">&lt;<pos:position pos:line="154" pos:column="27"/></operator> <name pos:line="154" pos:column="25">numcpu<pos:position pos:line="154" pos:column="31"/></name></expr>;<pos:position pos:line="154" pos:column="32"/></condition> <incr><expr><name pos:line="154" pos:column="33">i<pos:position pos:line="154" pos:column="34"/></name><operator pos:line="154" pos:column="34">++<pos:position pos:line="154" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="154" pos:column="37"/></control> <block pos:line="154" pos:column="38">{
      <decl_stmt><decl><type><name pos:line="155" pos:column="7">int<pos:position pos:line="155" pos:column="10"/></name></type> <name><name pos:line="155" pos:column="11">mib<pos:position pos:line="155" pos:column="14"/></name><index pos:line="155" pos:column="14">[]<pos:position pos:line="155" pos:column="16"/></index></name> <init pos:line="155" pos:column="17">= <expr><block pos:line="155" pos:column="19">{<expr><name pos:line="155" pos:column="20">CTL_KERN<pos:position pos:line="155" pos:column="28"/></name></expr>, <expr><name pos:line="155" pos:column="30">KERN_CPTIME2<pos:position pos:line="155" pos:column="42"/></name></expr>, <expr><name pos:line="155" pos:column="44">i<pos:position pos:line="155" pos:column="45"/></name></expr>}<pos:position pos:line="155" pos:column="46"/></block></expr></init></decl>;<pos:position pos:line="155" pos:column="47"/></decl_stmt>

      <expr_stmt><expr><name pos:line="157" pos:column="7">cpuinfo_size<pos:position pos:line="157" pos:column="19"/></name> <operator pos:line="157" pos:column="20">=<pos:position pos:line="157" pos:column="21"/></operator> <sizeof pos:line="157" pos:column="22">sizeof<argument_list pos:line="157" pos:column="28">(<argument><expr><name><name pos:line="157" pos:column="29">cpuinfo<pos:position pos:line="157" pos:column="36"/></name><index pos:line="157" pos:column="36">[<expr><literal type="number" pos:line="157" pos:column="37">0<pos:position pos:line="157" pos:column="38"/></literal></expr>]<pos:position pos:line="157" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="157" pos:column="40"/></argument_list></sizeof></expr>;<pos:position pos:line="157" pos:column="41"/></expr_stmt>

      <expr_stmt><expr><name pos:line="159" pos:column="7">status<pos:position pos:line="159" pos:column="13"/></name> <operator pos:line="159" pos:column="14">=<pos:position pos:line="159" pos:column="15"/></operator> <call><name pos:line="159" pos:column="16">sysctl<pos:position pos:line="159" pos:column="22"/></name><argument_list pos:line="159" pos:column="22">(<argument><expr><name pos:line="159" pos:column="23">mib<pos:position pos:line="159" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="159" pos:column="28">STATIC_ARRAY_SIZE<pos:position pos:line="159" pos:column="45"/></name><argument_list pos:line="159" pos:column="45">(<argument><expr><name pos:line="159" pos:column="46">mib<pos:position pos:line="159" pos:column="49"/></name></expr></argument>)<pos:position pos:line="159" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="52">cpuinfo<pos:position pos:line="159" pos:column="59"/></name><index pos:line="159" pos:column="59">[<expr><name pos:line="159" pos:column="60">i<pos:position pos:line="159" pos:column="61"/></name></expr>]<pos:position pos:line="159" pos:column="62"/></index></name></expr></argument>, <argument><expr><operator pos:line="159" pos:column="64">&amp;<pos:position pos:line="159" pos:column="69"/></operator><name pos:line="159" pos:column="65">cpuinfo_size<pos:position pos:line="159" pos:column="77"/></name></expr></argument>,
                      <argument><expr><name pos:line="160" pos:column="23">NULL<pos:position pos:line="160" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="160" pos:column="29">0<pos:position pos:line="160" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="32"/></expr_stmt>
      <if pos:line="161" pos:column="7">if <condition pos:line="161" pos:column="10">(<expr><name pos:line="161" pos:column="11">status<pos:position pos:line="161" pos:column="17"/></name> <operator pos:line="161" pos:column="18">==<pos:position pos:line="161" pos:column="20"/></operator> <operator pos:line="161" pos:column="21">-<pos:position pos:line="161" pos:column="22"/></operator><literal type="number" pos:line="161" pos:column="22">1<pos:position pos:line="161" pos:column="23"/></literal></expr>)<pos:position pos:line="161" pos:column="24"/></condition><then pos:line="161" pos:column="24"> <block pos:line="161" pos:column="25">{
        <decl_stmt><decl><type><name pos:line="162" pos:column="9">char<pos:position pos:line="162" pos:column="13"/></name></type> <name><name pos:line="162" pos:column="14">errbuf<pos:position pos:line="162" pos:column="20"/></name><index pos:line="162" pos:column="20">[<expr><literal type="number" pos:line="162" pos:column="21">1024<pos:position pos:line="162" pos:column="25"/></literal></expr>]<pos:position pos:line="162" pos:column="26"/></index></name></decl>;<pos:position pos:line="162" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">ERROR<pos:position pos:line="163" pos:column="14"/></name><argument_list pos:line="163" pos:column="14">(<argument><expr><literal type="string" pos:line="163" pos:column="15">"cpu plugin: sysctl failed: %s."<pos:position pos:line="163" pos:column="47"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="164" pos:column="15">sstrerror<pos:position pos:line="164" pos:column="24"/></name><argument_list pos:line="164" pos:column="24">(<argument><expr><name pos:line="164" pos:column="25">errno<pos:position pos:line="164" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="32">errbuf<pos:position pos:line="164" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="164" pos:column="40">sizeof<argument_list pos:line="164" pos:column="46">(<argument><expr><name pos:line="164" pos:column="47">errbuf<pos:position pos:line="164" pos:column="53"/></name></expr></argument>)<pos:position pos:line="164" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="164" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="164" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="57"/></expr_stmt>
        <return pos:line="165" pos:column="9">return <expr><operator pos:line="165" pos:column="16">-<pos:position pos:line="165" pos:column="17"/></operator><literal type="number" pos:line="165" pos:column="17">1<pos:position pos:line="165" pos:column="18"/></literal></expr>;<pos:position pos:line="165" pos:column="19"/></return>
      }<pos:position pos:line="166" pos:column="8"/></block></then></if>
    }<pos:position pos:line="167" pos:column="6"/></block></for>
  }<pos:position pos:line="168" pos:column="4"/></block></then> <else pos:line="168" pos:column="5">else
<cpp:endif pos:line="169" pos:column="1">#<cpp:directive pos:line="169" pos:column="2">endif<pos:position pos:line="169" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="169" pos:column="8">/* defined(KERN_CPTIME2) */</comment>
  <block pos:line="170" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="171" pos:column="5">int<pos:position pos:line="171" pos:column="8"/></name></type> <name><name pos:line="171" pos:column="9">mib<pos:position pos:line="171" pos:column="12"/></name><index pos:line="171" pos:column="12">[]<pos:position pos:line="171" pos:column="14"/></index></name> <init pos:line="171" pos:column="15">= <expr><block pos:line="171" pos:column="17">{<expr><name pos:line="171" pos:column="18">CTL_KERN<pos:position pos:line="171" pos:column="26"/></name></expr>, <expr><name pos:line="171" pos:column="28">KERN_CPTIME<pos:position pos:line="171" pos:column="39"/></name></expr>}<pos:position pos:line="171" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="171" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="172" pos:column="5">long<pos:position pos:line="172" pos:column="9"/></name></type> <name><name pos:line="172" pos:column="10">cpuinfo_tmp<pos:position pos:line="172" pos:column="21"/></name><index pos:line="172" pos:column="21">[<expr><name pos:line="172" pos:column="22">CPUSTATES<pos:position pos:line="172" pos:column="31"/></name></expr>]<pos:position pos:line="172" pos:column="32"/></index></name></decl>;<pos:position pos:line="172" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="174" pos:column="5">cpuinfo_size<pos:position pos:line="174" pos:column="17"/></name> <operator pos:line="174" pos:column="18">=<pos:position pos:line="174" pos:column="19"/></operator> <sizeof pos:line="174" pos:column="20">sizeof<argument_list pos:line="174" pos:column="26">(<argument><expr><name pos:line="174" pos:column="27">cpuinfo_tmp<pos:position pos:line="174" pos:column="38"/></name></expr></argument>)<pos:position pos:line="174" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="174" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="176" pos:column="5">status<pos:position pos:line="176" pos:column="11"/></name> <operator pos:line="176" pos:column="12">=<pos:position pos:line="176" pos:column="13"/></operator> <call><name pos:line="176" pos:column="14">sysctl<pos:position pos:line="176" pos:column="20"/></name><argument_list pos:line="176" pos:column="20">(<argument><expr><name pos:line="176" pos:column="21">mib<pos:position pos:line="176" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="176" pos:column="26">STATIC_ARRAY_SIZE<pos:position pos:line="176" pos:column="43"/></name><argument_list pos:line="176" pos:column="43">(<argument><expr><name pos:line="176" pos:column="44">mib<pos:position pos:line="176" pos:column="47"/></name></expr></argument>)<pos:position pos:line="176" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="176" pos:column="50">&amp;<pos:position pos:line="176" pos:column="55"/></operator><name pos:line="176" pos:column="51">cpuinfo_tmp<pos:position pos:line="176" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="176" pos:column="64">&amp;<pos:position pos:line="176" pos:column="69"/></operator><name pos:line="176" pos:column="65">cpuinfo_size<pos:position pos:line="176" pos:column="77"/></name></expr></argument>,
                    <argument><expr><name pos:line="177" pos:column="21">NULL<pos:position pos:line="177" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="27">0<pos:position pos:line="177" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="30"/></expr_stmt>
    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><name pos:line="178" pos:column="9">status<pos:position pos:line="178" pos:column="15"/></name> <operator pos:line="178" pos:column="16">==<pos:position pos:line="178" pos:column="18"/></operator> <operator pos:line="178" pos:column="19">-<pos:position pos:line="178" pos:column="20"/></operator><literal type="number" pos:line="178" pos:column="20">1<pos:position pos:line="178" pos:column="21"/></literal></expr>)<pos:position pos:line="178" pos:column="22"/></condition><then pos:line="178" pos:column="22"> <block pos:line="178" pos:column="23">{
      <decl_stmt><decl><type><name pos:line="179" pos:column="7">char<pos:position pos:line="179" pos:column="11"/></name></type> <name><name pos:line="179" pos:column="12">errbuf<pos:position pos:line="179" pos:column="18"/></name><index pos:line="179" pos:column="18">[<expr><literal type="number" pos:line="179" pos:column="19">1024<pos:position pos:line="179" pos:column="23"/></literal></expr>]<pos:position pos:line="179" pos:column="24"/></index></name></decl>;<pos:position pos:line="179" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="180" pos:column="7">ERROR<pos:position pos:line="180" pos:column="12"/></name><argument_list pos:line="180" pos:column="12">(<argument><expr><literal type="string" pos:line="180" pos:column="13">"cpu plugin: sysctl failed: %s."<pos:position pos:line="180" pos:column="45"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="181" pos:column="13">sstrerror<pos:position pos:line="181" pos:column="22"/></name><argument_list pos:line="181" pos:column="22">(<argument><expr><name pos:line="181" pos:column="23">errno<pos:position pos:line="181" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="30">errbuf<pos:position pos:line="181" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="181" pos:column="38">sizeof<argument_list pos:line="181" pos:column="44">(<argument><expr><name pos:line="181" pos:column="45">errbuf<pos:position pos:line="181" pos:column="51"/></name></expr></argument>)<pos:position pos:line="181" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="181" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="181" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="55"/></expr_stmt>
      <return pos:line="182" pos:column="7">return <expr><operator pos:line="182" pos:column="14">-<pos:position pos:line="182" pos:column="15"/></operator><literal type="number" pos:line="182" pos:column="15">1<pos:position pos:line="182" pos:column="16"/></literal></expr>;<pos:position pos:line="182" pos:column="17"/></return>
    }<pos:position pos:line="183" pos:column="6"/></block></then></if>

    <for pos:line="185" pos:column="5">for <control pos:line="185" pos:column="9">(<init><decl><type><name pos:line="185" pos:column="10">int<pos:position pos:line="185" pos:column="13"/></name></type> <name pos:line="185" pos:column="14">i<pos:position pos:line="185" pos:column="15"/></name> <init pos:line="185" pos:column="16">= <expr><literal type="number" pos:line="185" pos:column="18">0<pos:position pos:line="185" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="185" pos:column="20"/></init> <condition><expr><name pos:line="185" pos:column="21">i<pos:position pos:line="185" pos:column="22"/></name> <operator pos:line="185" pos:column="23">&lt;<pos:position pos:line="185" pos:column="27"/></operator> <name pos:line="185" pos:column="25">CPUSTATES<pos:position pos:line="185" pos:column="34"/></name></expr>;<pos:position pos:line="185" pos:column="35"/></condition> <incr><expr><name pos:line="185" pos:column="36">i<pos:position pos:line="185" pos:column="37"/></name><operator pos:line="185" pos:column="37">++<pos:position pos:line="185" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="185" pos:column="40"/></control> <block pos:line="185" pos:column="41">{
      <expr_stmt><expr><name><name pos:line="186" pos:column="7">cpuinfo<pos:position pos:line="186" pos:column="14"/></name><index pos:line="186" pos:column="14">[<expr><literal type="number" pos:line="186" pos:column="15">0<pos:position pos:line="186" pos:column="16"/></literal></expr>]<pos:position pos:line="186" pos:column="17"/></index><index pos:line="186" pos:column="17">[<expr><name pos:line="186" pos:column="18">i<pos:position pos:line="186" pos:column="19"/></name></expr>]<pos:position pos:line="186" pos:column="20"/></index></name> <operator pos:line="186" pos:column="21">=<pos:position pos:line="186" pos:column="22"/></operator> <name><name pos:line="186" pos:column="23">cpuinfo_tmp<pos:position pos:line="186" pos:column="34"/></name><index pos:line="186" pos:column="34">[<expr><name pos:line="186" pos:column="35">i<pos:position pos:line="186" pos:column="36"/></name></expr>]<pos:position pos:line="186" pos:column="37"/></index></name></expr>;<pos:position pos:line="186" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="187" pos:column="6"/></block></for>
  }<pos:position pos:line="188" pos:column="4"/></block></else></if>

  <for pos:line="190" pos:column="3">for <control pos:line="190" pos:column="7">(<init><decl><type><name pos:line="190" pos:column="8">int<pos:position pos:line="190" pos:column="11"/></name></type> <name pos:line="190" pos:column="12">i<pos:position pos:line="190" pos:column="13"/></name> <init pos:line="190" pos:column="14">= <expr><literal type="number" pos:line="190" pos:column="16">0<pos:position pos:line="190" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="190" pos:column="18"/></init> <condition><expr><name pos:line="190" pos:column="19">i<pos:position pos:line="190" pos:column="20"/></name> <operator pos:line="190" pos:column="21">&lt;<pos:position pos:line="190" pos:column="25"/></operator> <name pos:line="190" pos:column="23">numcpu<pos:position pos:line="190" pos:column="29"/></name></expr>;<pos:position pos:line="190" pos:column="30"/></condition> <incr><expr><name pos:line="190" pos:column="31">i<pos:position pos:line="190" pos:column="32"/></name><operator pos:line="190" pos:column="32">++<pos:position pos:line="190" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="190" pos:column="35"/></control> <block pos:line="190" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="191" pos:column="5">cpu_stage<pos:position pos:line="191" pos:column="14"/></name><argument_list pos:line="191" pos:column="14">(<argument><expr><name pos:line="191" pos:column="15">i<pos:position pos:line="191" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="18">COLLECTD_CPU_STATE_USER<pos:position pos:line="191" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="191" pos:column="43">(<pos:position pos:line="191" pos:column="44"/></operator><name pos:line="191" pos:column="44">derive_t<pos:position pos:line="191" pos:column="52"/></name><operator pos:line="191" pos:column="52">)<pos:position pos:line="191" pos:column="53"/></operator><name><name pos:line="191" pos:column="53">cpuinfo<pos:position pos:line="191" pos:column="60"/></name><index pos:line="191" pos:column="60">[<expr><name pos:line="191" pos:column="61">i<pos:position pos:line="191" pos:column="62"/></name></expr>]<pos:position pos:line="191" pos:column="63"/></index><index pos:line="191" pos:column="63">[<expr><name pos:line="191" pos:column="64">CP_USER<pos:position pos:line="191" pos:column="71"/></name></expr>]<pos:position pos:line="191" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="74">now<pos:position pos:line="191" pos:column="77"/></name></expr></argument>)<pos:position pos:line="191" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="192" pos:column="5">cpu_stage<pos:position pos:line="192" pos:column="14"/></name><argument_list pos:line="192" pos:column="14">(<argument><expr><name pos:line="192" pos:column="15">i<pos:position pos:line="192" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="18">COLLECTD_CPU_STATE_NICE<pos:position pos:line="192" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="192" pos:column="43">(<pos:position pos:line="192" pos:column="44"/></operator><name pos:line="192" pos:column="44">derive_t<pos:position pos:line="192" pos:column="52"/></name><operator pos:line="192" pos:column="52">)<pos:position pos:line="192" pos:column="53"/></operator><name><name pos:line="192" pos:column="53">cpuinfo<pos:position pos:line="192" pos:column="60"/></name><index pos:line="192" pos:column="60">[<expr><name pos:line="192" pos:column="61">i<pos:position pos:line="192" pos:column="62"/></name></expr>]<pos:position pos:line="192" pos:column="63"/></index><index pos:line="192" pos:column="63">[<expr><name pos:line="192" pos:column="64">CP_NICE<pos:position pos:line="192" pos:column="71"/></name></expr>]<pos:position pos:line="192" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="74">now<pos:position pos:line="192" pos:column="77"/></name></expr></argument>)<pos:position pos:line="192" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="193" pos:column="5">cpu_stage<pos:position pos:line="193" pos:column="14"/></name><argument_list pos:line="193" pos:column="14">(<argument><expr><name pos:line="193" pos:column="15">i<pos:position pos:line="193" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="18">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="193" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="193" pos:column="45">(<pos:position pos:line="193" pos:column="46"/></operator><name pos:line="193" pos:column="46">derive_t<pos:position pos:line="193" pos:column="54"/></name><operator pos:line="193" pos:column="54">)<pos:position pos:line="193" pos:column="55"/></operator><name><name pos:line="193" pos:column="55">cpuinfo<pos:position pos:line="193" pos:column="62"/></name><index pos:line="193" pos:column="62">[<expr><name pos:line="193" pos:column="63">i<pos:position pos:line="193" pos:column="64"/></name></expr>]<pos:position pos:line="193" pos:column="65"/></index><index pos:line="193" pos:column="65">[<expr><name pos:line="193" pos:column="66">CP_SYS<pos:position pos:line="193" pos:column="72"/></name></expr>]<pos:position pos:line="193" pos:column="73"/></index></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="75">now<pos:position pos:line="193" pos:column="78"/></name></expr></argument>)<pos:position pos:line="193" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="194" pos:column="5">cpu_stage<pos:position pos:line="194" pos:column="14"/></name><argument_list pos:line="194" pos:column="14">(<argument><expr><name pos:line="194" pos:column="15">i<pos:position pos:line="194" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="18">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="194" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="194" pos:column="43">(<pos:position pos:line="194" pos:column="44"/></operator><name pos:line="194" pos:column="44">derive_t<pos:position pos:line="194" pos:column="52"/></name><operator pos:line="194" pos:column="52">)<pos:position pos:line="194" pos:column="53"/></operator><name><name pos:line="194" pos:column="53">cpuinfo<pos:position pos:line="194" pos:column="60"/></name><index pos:line="194" pos:column="60">[<expr><name pos:line="194" pos:column="61">i<pos:position pos:line="194" pos:column="62"/></name></expr>]<pos:position pos:line="194" pos:column="63"/></index><index pos:line="194" pos:column="63">[<expr><name pos:line="194" pos:column="64">CP_IDLE<pos:position pos:line="194" pos:column="71"/></name></expr>]<pos:position pos:line="194" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="74">now<pos:position pos:line="194" pos:column="77"/></name></expr></argument>)<pos:position pos:line="194" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">cpu_stage<pos:position pos:line="195" pos:column="14"/></name><argument_list pos:line="195" pos:column="14">(<argument><expr><name pos:line="195" pos:column="15">i<pos:position pos:line="195" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="18">COLLECTD_CPU_STATE_INTERRUPT<pos:position pos:line="195" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="195" pos:column="48">(<pos:position pos:line="195" pos:column="49"/></operator><name pos:line="195" pos:column="49">derive_t<pos:position pos:line="195" pos:column="57"/></name><operator pos:line="195" pos:column="57">)<pos:position pos:line="195" pos:column="58"/></operator><name><name pos:line="195" pos:column="58">cpuinfo<pos:position pos:line="195" pos:column="65"/></name><index pos:line="195" pos:column="65">[<expr><name pos:line="195" pos:column="66">i<pos:position pos:line="195" pos:column="67"/></name></expr>]<pos:position pos:line="195" pos:column="68"/></index><index pos:line="195" pos:column="68">[<expr><name pos:line="195" pos:column="69">CP_INTR<pos:position pos:line="195" pos:column="76"/></name></expr>]<pos:position pos:line="195" pos:column="77"/></index></name></expr></argument>,
              <argument><expr><name pos:line="196" pos:column="15">now<pos:position pos:line="196" pos:column="18"/></name></expr></argument>)<pos:position pos:line="196" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="197" pos:column="4"/></block></for>
<comment type="block" pos:line="198" pos:column="1">/* }}} #endif CAN_USE_SYSCTL */</comment>

<cpp:elif pos:line="200" pos:column="1">#<cpp:directive pos:line="200" pos:column="2">elif<pos:position pos:line="200" pos:column="6"/></cpp:directive> <expr><call><name pos:line="200" pos:column="7">defined<pos:position pos:line="200" pos:column="14"/></name><argument_list pos:line="200" pos:column="14">(<argument><expr><name pos:line="200" pos:column="15">HAVE_SYSCTLBYNAME<pos:position pos:line="200" pos:column="32"/></name></expr></argument>)<pos:position pos:line="200" pos:column="33"/></argument_list></call> <operator pos:line="200" pos:column="34">&amp;&amp;<pos:position pos:line="200" pos:column="44"/></operator> <call><name pos:line="200" pos:column="37">defined<pos:position pos:line="200" pos:column="44"/></name><argument_list pos:line="200" pos:column="44">(<argument><expr><name pos:line="200" pos:column="45">HAVE_SYSCTL_KERN_CP_TIMES<pos:position pos:line="200" pos:column="70"/></name></expr></argument>)<pos:position pos:line="200" pos:column="71"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="200" pos:column="72">/* {{{  \
                                                                          */</comment>
  <decl_stmt><decl><type><name pos:line="202" pos:column="3">long<pos:position pos:line="202" pos:column="7"/></name></type> <name><name pos:line="202" pos:column="8">cpuinfo<pos:position pos:line="202" pos:column="15"/></name><index pos:line="202" pos:column="15">[<expr><name pos:line="202" pos:column="16">maxcpu<pos:position pos:line="202" pos:column="22"/></name></expr>]<pos:position pos:line="202" pos:column="23"/></index><index pos:line="202" pos:column="23">[<expr><name pos:line="202" pos:column="24">CPUSTATES<pos:position pos:line="202" pos:column="33"/></name></expr>]<pos:position pos:line="202" pos:column="34"/></index></name></decl>;<pos:position pos:line="202" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="203" pos:column="3">size_t<pos:position pos:line="203" pos:column="9"/></name></type> <name pos:line="203" pos:column="10">cpuinfo_size<pos:position pos:line="203" pos:column="22"/></name></decl>;<pos:position pos:line="203" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="205" pos:column="3">memset<pos:position pos:line="205" pos:column="9"/></name><argument_list pos:line="205" pos:column="9">(<argument><expr><name pos:line="205" pos:column="10">cpuinfo<pos:position pos:line="205" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="205" pos:column="19">0<pos:position pos:line="205" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="205" pos:column="22">sizeof<argument_list pos:line="205" pos:column="28">(<argument><expr><name pos:line="205" pos:column="29">cpuinfo<pos:position pos:line="205" pos:column="36"/></name></expr></argument>)<pos:position pos:line="205" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="205" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><name pos:line="207" pos:column="3">cpuinfo_size<pos:position pos:line="207" pos:column="15"/></name> <operator pos:line="207" pos:column="16">=<pos:position pos:line="207" pos:column="17"/></operator> <sizeof pos:line="207" pos:column="18">sizeof<argument_list pos:line="207" pos:column="24">(<argument><expr><name pos:line="207" pos:column="25">cpuinfo<pos:position pos:line="207" pos:column="32"/></name></expr></argument>)<pos:position pos:line="207" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="207" pos:column="34"/></expr_stmt>
  <if pos:line="208" pos:column="3">if <condition pos:line="208" pos:column="6">(<expr><call><name pos:line="208" pos:column="7">sysctlbyname<pos:position pos:line="208" pos:column="19"/></name><argument_list pos:line="208" pos:column="19">(<argument><expr><literal type="string" pos:line="208" pos:column="20">"kern.cp_times"<pos:position pos:line="208" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="208" pos:column="37">&amp;<pos:position pos:line="208" pos:column="42"/></operator><name pos:line="208" pos:column="38">cpuinfo<pos:position pos:line="208" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="208" pos:column="47">&amp;<pos:position pos:line="208" pos:column="52"/></operator><name pos:line="208" pos:column="48">cpuinfo_size<pos:position pos:line="208" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="62">NULL<pos:position pos:line="208" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="208" pos:column="68">0<pos:position pos:line="208" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="70"/></argument_list></call> <operator pos:line="208" pos:column="71">&lt;<pos:position pos:line="208" pos:column="75"/></operator> <literal type="number" pos:line="208" pos:column="73">0<pos:position pos:line="208" pos:column="74"/></literal></expr>)<pos:position pos:line="208" pos:column="75"/></condition><then pos:line="208" pos:column="75"> <block pos:line="208" pos:column="76">{
    <decl_stmt><decl><type><name pos:line="209" pos:column="5">char<pos:position pos:line="209" pos:column="9"/></name></type> <name><name pos:line="209" pos:column="10">errbuf<pos:position pos:line="209" pos:column="16"/></name><index pos:line="209" pos:column="16">[<expr><literal type="number" pos:line="209" pos:column="17">1024<pos:position pos:line="209" pos:column="21"/></literal></expr>]<pos:position pos:line="209" pos:column="22"/></index></name></decl>;<pos:position pos:line="209" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="210" pos:column="5">ERROR<pos:position pos:line="210" pos:column="10"/></name><argument_list pos:line="210" pos:column="10">(<argument><expr><literal type="string" pos:line="210" pos:column="11">"cpu plugin: sysctlbyname failed: %s."<pos:position pos:line="210" pos:column="49"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="211" pos:column="11">sstrerror<pos:position pos:line="211" pos:column="20"/></name><argument_list pos:line="211" pos:column="20">(<argument><expr><name pos:line="211" pos:column="21">errno<pos:position pos:line="211" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="28">errbuf<pos:position pos:line="211" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="211" pos:column="36">sizeof<argument_list pos:line="211" pos:column="42">(<argument><expr><name pos:line="211" pos:column="43">errbuf<pos:position pos:line="211" pos:column="49"/></name></expr></argument>)<pos:position pos:line="211" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="211" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="211" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="53"/></expr_stmt>
    <return pos:line="212" pos:column="5">return <expr><operator pos:line="212" pos:column="12">-<pos:position pos:line="212" pos:column="13"/></operator><literal type="number" pos:line="212" pos:column="13">1<pos:position pos:line="212" pos:column="14"/></literal></expr>;<pos:position pos:line="212" pos:column="15"/></return>
  }<pos:position pos:line="213" pos:column="4"/></block></then></if>

  <for pos:line="215" pos:column="3">for <control pos:line="215" pos:column="7">(<init><decl><type><name pos:line="215" pos:column="8">int<pos:position pos:line="215" pos:column="11"/></name></type> <name pos:line="215" pos:column="12">i<pos:position pos:line="215" pos:column="13"/></name> <init pos:line="215" pos:column="14">= <expr><literal type="number" pos:line="215" pos:column="16">0<pos:position pos:line="215" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="215" pos:column="18"/></init> <condition><expr><name pos:line="215" pos:column="19">i<pos:position pos:line="215" pos:column="20"/></name> <operator pos:line="215" pos:column="21">&lt;<pos:position pos:line="215" pos:column="25"/></operator> <name pos:line="215" pos:column="23">numcpu<pos:position pos:line="215" pos:column="29"/></name></expr>;<pos:position pos:line="215" pos:column="30"/></condition> <incr><expr><name pos:line="215" pos:column="31">i<pos:position pos:line="215" pos:column="32"/></name><operator pos:line="215" pos:column="32">++<pos:position pos:line="215" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="215" pos:column="35"/></control> <block pos:line="215" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="216" pos:column="5">cpu_stage<pos:position pos:line="216" pos:column="14"/></name><argument_list pos:line="216" pos:column="14">(<argument><expr><name pos:line="216" pos:column="15">i<pos:position pos:line="216" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="18">COLLECTD_CPU_STATE_USER<pos:position pos:line="216" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="216" pos:column="43">(<pos:position pos:line="216" pos:column="44"/></operator><name pos:line="216" pos:column="44">derive_t<pos:position pos:line="216" pos:column="52"/></name><operator pos:line="216" pos:column="52">)<pos:position pos:line="216" pos:column="53"/></operator><name><name pos:line="216" pos:column="53">cpuinfo<pos:position pos:line="216" pos:column="60"/></name><index pos:line="216" pos:column="60">[<expr><name pos:line="216" pos:column="61">i<pos:position pos:line="216" pos:column="62"/></name></expr>]<pos:position pos:line="216" pos:column="63"/></index><index pos:line="216" pos:column="63">[<expr><name pos:line="216" pos:column="64">CP_USER<pos:position pos:line="216" pos:column="71"/></name></expr>]<pos:position pos:line="216" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="74">now<pos:position pos:line="216" pos:column="77"/></name></expr></argument>)<pos:position pos:line="216" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="217" pos:column="5">cpu_stage<pos:position pos:line="217" pos:column="14"/></name><argument_list pos:line="217" pos:column="14">(<argument><expr><name pos:line="217" pos:column="15">i<pos:position pos:line="217" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="18">COLLECTD_CPU_STATE_NICE<pos:position pos:line="217" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="217" pos:column="43">(<pos:position pos:line="217" pos:column="44"/></operator><name pos:line="217" pos:column="44">derive_t<pos:position pos:line="217" pos:column="52"/></name><operator pos:line="217" pos:column="52">)<pos:position pos:line="217" pos:column="53"/></operator><name><name pos:line="217" pos:column="53">cpuinfo<pos:position pos:line="217" pos:column="60"/></name><index pos:line="217" pos:column="60">[<expr><name pos:line="217" pos:column="61">i<pos:position pos:line="217" pos:column="62"/></name></expr>]<pos:position pos:line="217" pos:column="63"/></index><index pos:line="217" pos:column="63">[<expr><name pos:line="217" pos:column="64">CP_NICE<pos:position pos:line="217" pos:column="71"/></name></expr>]<pos:position pos:line="217" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="74">now<pos:position pos:line="217" pos:column="77"/></name></expr></argument>)<pos:position pos:line="217" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="218" pos:column="5">cpu_stage<pos:position pos:line="218" pos:column="14"/></name><argument_list pos:line="218" pos:column="14">(<argument><expr><name pos:line="218" pos:column="15">i<pos:position pos:line="218" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="18">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="218" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="218" pos:column="45">(<pos:position pos:line="218" pos:column="46"/></operator><name pos:line="218" pos:column="46">derive_t<pos:position pos:line="218" pos:column="54"/></name><operator pos:line="218" pos:column="54">)<pos:position pos:line="218" pos:column="55"/></operator><name><name pos:line="218" pos:column="55">cpuinfo<pos:position pos:line="218" pos:column="62"/></name><index pos:line="218" pos:column="62">[<expr><name pos:line="218" pos:column="63">i<pos:position pos:line="218" pos:column="64"/></name></expr>]<pos:position pos:line="218" pos:column="65"/></index><index pos:line="218" pos:column="65">[<expr><name pos:line="218" pos:column="66">CP_SYS<pos:position pos:line="218" pos:column="72"/></name></expr>]<pos:position pos:line="218" pos:column="73"/></index></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="75">now<pos:position pos:line="218" pos:column="78"/></name></expr></argument>)<pos:position pos:line="218" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="219" pos:column="5">cpu_stage<pos:position pos:line="219" pos:column="14"/></name><argument_list pos:line="219" pos:column="14">(<argument><expr><name pos:line="219" pos:column="15">i<pos:position pos:line="219" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="18">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="219" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="219" pos:column="43">(<pos:position pos:line="219" pos:column="44"/></operator><name pos:line="219" pos:column="44">derive_t<pos:position pos:line="219" pos:column="52"/></name><operator pos:line="219" pos:column="52">)<pos:position pos:line="219" pos:column="53"/></operator><name><name pos:line="219" pos:column="53">cpuinfo<pos:position pos:line="219" pos:column="60"/></name><index pos:line="219" pos:column="60">[<expr><name pos:line="219" pos:column="61">i<pos:position pos:line="219" pos:column="62"/></name></expr>]<pos:position pos:line="219" pos:column="63"/></index><index pos:line="219" pos:column="63">[<expr><name pos:line="219" pos:column="64">CP_IDLE<pos:position pos:line="219" pos:column="71"/></name></expr>]<pos:position pos:line="219" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="74">now<pos:position pos:line="219" pos:column="77"/></name></expr></argument>)<pos:position pos:line="219" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="220" pos:column="5">cpu_stage<pos:position pos:line="220" pos:column="14"/></name><argument_list pos:line="220" pos:column="14">(<argument><expr><name pos:line="220" pos:column="15">i<pos:position pos:line="220" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="18">COLLECTD_CPU_STATE_INTERRUPT<pos:position pos:line="220" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="220" pos:column="48">(<pos:position pos:line="220" pos:column="49"/></operator><name pos:line="220" pos:column="49">derive_t<pos:position pos:line="220" pos:column="57"/></name><operator pos:line="220" pos:column="57">)<pos:position pos:line="220" pos:column="58"/></operator><name><name pos:line="220" pos:column="58">cpuinfo<pos:position pos:line="220" pos:column="65"/></name><index pos:line="220" pos:column="65">[<expr><name pos:line="220" pos:column="66">i<pos:position pos:line="220" pos:column="67"/></name></expr>]<pos:position pos:line="220" pos:column="68"/></index><index pos:line="220" pos:column="68">[<expr><name pos:line="220" pos:column="69">CP_INTR<pos:position pos:line="220" pos:column="76"/></name></expr>]<pos:position pos:line="220" pos:column="77"/></index></name></expr></argument>,
              <argument><expr><name pos:line="221" pos:column="15">now<pos:position pos:line="221" pos:column="18"/></name></expr></argument>)<pos:position pos:line="221" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="222" pos:column="4"/></block></for>
<comment type="block" pos:line="223" pos:column="1">/* }}} #endif HAVE_SYSCTL_KERN_CP_TIMES */</comment>

<cpp:elif pos:line="225" pos:column="1">#<cpp:directive pos:line="225" pos:column="2">elif<pos:position pos:line="225" pos:column="6"/></cpp:directive> <expr><call><name pos:line="225" pos:column="7">defined<pos:position pos:line="225" pos:column="14"/></name><argument_list pos:line="225" pos:column="14">(<argument><expr><name pos:line="225" pos:column="15">HAVE_SYSCTLBYNAME<pos:position pos:line="225" pos:column="32"/></name></expr></argument>)<pos:position pos:line="225" pos:column="33"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="225" pos:column="34">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="226" pos:column="3">long<pos:position pos:line="226" pos:column="7"/></name></type> <name><name pos:line="226" pos:column="8">cpuinfo<pos:position pos:line="226" pos:column="15"/></name><index pos:line="226" pos:column="15">[<expr><name pos:line="226" pos:column="16">CPUSTATES<pos:position pos:line="226" pos:column="25"/></name></expr>]<pos:position pos:line="226" pos:column="26"/></index></name></decl>;<pos:position pos:line="226" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="227" pos:column="3">size_t<pos:position pos:line="227" pos:column="9"/></name></type> <name pos:line="227" pos:column="10">cpuinfo_size<pos:position pos:line="227" pos:column="22"/></name></decl>;<pos:position pos:line="227" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><name pos:line="229" pos:column="3">cpuinfo_size<pos:position pos:line="229" pos:column="15"/></name> <operator pos:line="229" pos:column="16">=<pos:position pos:line="229" pos:column="17"/></operator> <sizeof pos:line="229" pos:column="18">sizeof<argument_list pos:line="229" pos:column="24">(<argument><expr><name pos:line="229" pos:column="25">cpuinfo<pos:position pos:line="229" pos:column="32"/></name></expr></argument>)<pos:position pos:line="229" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="229" pos:column="34"/></expr_stmt>

  <if pos:line="231" pos:column="3">if <condition pos:line="231" pos:column="6">(<expr><call><name pos:line="231" pos:column="7">sysctlbyname<pos:position pos:line="231" pos:column="19"/></name><argument_list pos:line="231" pos:column="19">(<argument><expr><literal type="string" pos:line="231" pos:column="20">"kern.cp_time"<pos:position pos:line="231" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="231" pos:column="36">&amp;<pos:position pos:line="231" pos:column="41"/></operator><name pos:line="231" pos:column="37">cpuinfo<pos:position pos:line="231" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="231" pos:column="46">&amp;<pos:position pos:line="231" pos:column="51"/></operator><name pos:line="231" pos:column="47">cpuinfo_size<pos:position pos:line="231" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="61">NULL<pos:position pos:line="231" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="231" pos:column="67">0<pos:position pos:line="231" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="69"/></argument_list></call> <operator pos:line="231" pos:column="70">&lt;<pos:position pos:line="231" pos:column="74"/></operator> <literal type="number" pos:line="231" pos:column="72">0<pos:position pos:line="231" pos:column="73"/></literal></expr>)<pos:position pos:line="231" pos:column="74"/></condition><then pos:line="231" pos:column="74"> <block pos:line="231" pos:column="75">{
    <decl_stmt><decl><type><name pos:line="232" pos:column="5">char<pos:position pos:line="232" pos:column="9"/></name></type> <name><name pos:line="232" pos:column="10">errbuf<pos:position pos:line="232" pos:column="16"/></name><index pos:line="232" pos:column="16">[<expr><literal type="number" pos:line="232" pos:column="17">1024<pos:position pos:line="232" pos:column="21"/></literal></expr>]<pos:position pos:line="232" pos:column="22"/></index></name></decl>;<pos:position pos:line="232" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="233" pos:column="5">ERROR<pos:position pos:line="233" pos:column="10"/></name><argument_list pos:line="233" pos:column="10">(<argument><expr><literal type="string" pos:line="233" pos:column="11">"cpu plugin: sysctlbyname failed: %s."<pos:position pos:line="233" pos:column="49"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="234" pos:column="11">sstrerror<pos:position pos:line="234" pos:column="20"/></name><argument_list pos:line="234" pos:column="20">(<argument><expr><name pos:line="234" pos:column="21">errno<pos:position pos:line="234" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="28">errbuf<pos:position pos:line="234" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="234" pos:column="36">sizeof<argument_list pos:line="234" pos:column="42">(<argument><expr><name pos:line="234" pos:column="43">errbuf<pos:position pos:line="234" pos:column="49"/></name></expr></argument>)<pos:position pos:line="234" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="234" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="234" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="53"/></expr_stmt>
    <return pos:line="235" pos:column="5">return <expr><operator pos:line="235" pos:column="12">-<pos:position pos:line="235" pos:column="13"/></operator><literal type="number" pos:line="235" pos:column="13">1<pos:position pos:line="235" pos:column="14"/></literal></expr>;<pos:position pos:line="235" pos:column="15"/></return>
  }<pos:position pos:line="236" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="238" pos:column="3">cpu_stage<pos:position pos:line="238" pos:column="12"/></name><argument_list pos:line="238" pos:column="12">(<argument><expr><literal type="number" pos:line="238" pos:column="13">0<pos:position pos:line="238" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="16">COLLECTD_CPU_STATE_USER<pos:position pos:line="238" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="238" pos:column="41">(<pos:position pos:line="238" pos:column="42"/></operator><name pos:line="238" pos:column="42">derive_t<pos:position pos:line="238" pos:column="50"/></name><operator pos:line="238" pos:column="50">)<pos:position pos:line="238" pos:column="51"/></operator><name><name pos:line="238" pos:column="51">cpuinfo<pos:position pos:line="238" pos:column="58"/></name><index pos:line="238" pos:column="58">[<expr><name pos:line="238" pos:column="59">CP_USER<pos:position pos:line="238" pos:column="66"/></name></expr>]<pos:position pos:line="238" pos:column="67"/></index></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="69">now<pos:position pos:line="238" pos:column="72"/></name></expr></argument>)<pos:position pos:line="238" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="239" pos:column="3">cpu_stage<pos:position pos:line="239" pos:column="12"/></name><argument_list pos:line="239" pos:column="12">(<argument><expr><literal type="number" pos:line="239" pos:column="13">0<pos:position pos:line="239" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="16">COLLECTD_CPU_STATE_NICE<pos:position pos:line="239" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="239" pos:column="41">(<pos:position pos:line="239" pos:column="42"/></operator><name pos:line="239" pos:column="42">derive_t<pos:position pos:line="239" pos:column="50"/></name><operator pos:line="239" pos:column="50">)<pos:position pos:line="239" pos:column="51"/></operator><name><name pos:line="239" pos:column="51">cpuinfo<pos:position pos:line="239" pos:column="58"/></name><index pos:line="239" pos:column="58">[<expr><name pos:line="239" pos:column="59">CP_NICE<pos:position pos:line="239" pos:column="66"/></name></expr>]<pos:position pos:line="239" pos:column="67"/></index></name></expr></argument>, <argument><expr><name pos:line="239" pos:column="69">now<pos:position pos:line="239" pos:column="72"/></name></expr></argument>)<pos:position pos:line="239" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="240" pos:column="3">cpu_stage<pos:position pos:line="240" pos:column="12"/></name><argument_list pos:line="240" pos:column="12">(<argument><expr><literal type="number" pos:line="240" pos:column="13">0<pos:position pos:line="240" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="240" pos:column="16">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="240" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="240" pos:column="43">(<pos:position pos:line="240" pos:column="44"/></operator><name pos:line="240" pos:column="44">derive_t<pos:position pos:line="240" pos:column="52"/></name><operator pos:line="240" pos:column="52">)<pos:position pos:line="240" pos:column="53"/></operator><name><name pos:line="240" pos:column="53">cpuinfo<pos:position pos:line="240" pos:column="60"/></name><index pos:line="240" pos:column="60">[<expr><name pos:line="240" pos:column="61">CP_SYS<pos:position pos:line="240" pos:column="67"/></name></expr>]<pos:position pos:line="240" pos:column="68"/></index></name></expr></argument>, <argument><expr><name pos:line="240" pos:column="70">now<pos:position pos:line="240" pos:column="73"/></name></expr></argument>)<pos:position pos:line="240" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="241" pos:column="3">cpu_stage<pos:position pos:line="241" pos:column="12"/></name><argument_list pos:line="241" pos:column="12">(<argument><expr><literal type="number" pos:line="241" pos:column="13">0<pos:position pos:line="241" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="16">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="241" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="241" pos:column="41">(<pos:position pos:line="241" pos:column="42"/></operator><name pos:line="241" pos:column="42">derive_t<pos:position pos:line="241" pos:column="50"/></name><operator pos:line="241" pos:column="50">)<pos:position pos:line="241" pos:column="51"/></operator><name><name pos:line="241" pos:column="51">cpuinfo<pos:position pos:line="241" pos:column="58"/></name><index pos:line="241" pos:column="58">[<expr><name pos:line="241" pos:column="59">CP_IDLE<pos:position pos:line="241" pos:column="66"/></name></expr>]<pos:position pos:line="241" pos:column="67"/></index></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="69">now<pos:position pos:line="241" pos:column="72"/></name></expr></argument>)<pos:position pos:line="241" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="242" pos:column="3">cpu_stage<pos:position pos:line="242" pos:column="12"/></name><argument_list pos:line="242" pos:column="12">(<argument><expr><literal type="number" pos:line="242" pos:column="13">0<pos:position pos:line="242" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="242" pos:column="16">COLLECTD_CPU_STATE_INTERRUPT<pos:position pos:line="242" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="242" pos:column="46">(<pos:position pos:line="242" pos:column="47"/></operator><name pos:line="242" pos:column="47">derive_t<pos:position pos:line="242" pos:column="55"/></name><operator pos:line="242" pos:column="55">)<pos:position pos:line="242" pos:column="56"/></operator><name><name pos:line="242" pos:column="56">cpuinfo<pos:position pos:line="242" pos:column="63"/></name><index pos:line="242" pos:column="63">[<expr><name pos:line="242" pos:column="64">CP_INTR<pos:position pos:line="242" pos:column="71"/></name></expr>]<pos:position pos:line="242" pos:column="72"/></index></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="74">now<pos:position pos:line="242" pos:column="77"/></name></expr></argument>)<pos:position pos:line="242" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="79"/></expr_stmt>
<comment type="block" pos:line="243" pos:column="1">/* }}} #endif HAVE_SYSCTLBYNAME */</comment>

<cpp:elif pos:line="245" pos:column="1">#<cpp:directive pos:line="245" pos:column="2">elif<pos:position pos:line="245" pos:column="6"/></cpp:directive> <expr><call><name pos:line="245" pos:column="7">defined<pos:position pos:line="245" pos:column="14"/></name><argument_list pos:line="245" pos:column="14">(<argument><expr><name pos:line="245" pos:column="15">HAVE_LIBSTATGRAB<pos:position pos:line="245" pos:column="31"/></name></expr></argument>)<pos:position pos:line="245" pos:column="32"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="245" pos:column="33">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="246" pos:column="3">sg_cpu_stats<pos:position pos:line="246" pos:column="15"/></name> <modifier pos:line="246" pos:column="16">*<pos:position pos:line="246" pos:column="17"/></modifier></type><name pos:line="246" pos:column="17">cs<pos:position pos:line="246" pos:column="19"/></name></decl>;<pos:position pos:line="246" pos:column="20"/></decl_stmt>
  <expr_stmt><expr><name pos:line="247" pos:column="3">cs<pos:position pos:line="247" pos:column="5"/></name> <operator pos:line="247" pos:column="6">=<pos:position pos:line="247" pos:column="7"/></operator> <call><name pos:line="247" pos:column="8">sg_get_cpu_stats<pos:position pos:line="247" pos:column="24"/></name><argument_list pos:line="247" pos:column="24">()<pos:position pos:line="247" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="27"/></expr_stmt>

  <if pos:line="249" pos:column="3">if <condition pos:line="249" pos:column="6">(<expr><name pos:line="249" pos:column="7">cs<pos:position pos:line="249" pos:column="9"/></name> <operator pos:line="249" pos:column="10">==<pos:position pos:line="249" pos:column="12"/></operator> <name pos:line="249" pos:column="13">NULL<pos:position pos:line="249" pos:column="17"/></name></expr>)<pos:position pos:line="249" pos:column="18"/></condition><then pos:line="249" pos:column="18"> <block pos:line="249" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="250" pos:column="5">ERROR<pos:position pos:line="250" pos:column="10"/></name><argument_list pos:line="250" pos:column="10">(<argument><expr><literal type="string" pos:line="250" pos:column="11">"cpu plugin: sg_get_cpu_stats failed."<pos:position pos:line="250" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="51"/></expr_stmt>
    <return pos:line="251" pos:column="5">return <expr><operator pos:line="251" pos:column="12">-<pos:position pos:line="251" pos:column="13"/></operator><literal type="number" pos:line="251" pos:column="13">1<pos:position pos:line="251" pos:column="14"/></literal></expr>;<pos:position pos:line="251" pos:column="15"/></return>
  }<pos:position pos:line="252" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="254" pos:column="3">cpu_state<pos:position pos:line="254" pos:column="12"/></name><argument_list pos:line="254" pos:column="12">(<argument><expr><literal type="number" pos:line="254" pos:column="13">0<pos:position pos:line="254" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="254" pos:column="16">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="254" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="254" pos:column="41">(<pos:position pos:line="254" pos:column="42"/></operator><name pos:line="254" pos:column="42">derive_t<pos:position pos:line="254" pos:column="50"/></name><operator pos:line="254" pos:column="50">)<pos:position pos:line="254" pos:column="51"/></operator><name><name pos:line="254" pos:column="51">cs<pos:position pos:line="254" pos:column="53"/></name><operator pos:line="254" pos:column="53">-&gt;<pos:position pos:line="254" pos:column="58"/></operator><name pos:line="254" pos:column="55">idle<pos:position pos:line="254" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="254" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="255" pos:column="3">cpu_state<pos:position pos:line="255" pos:column="12"/></name><argument_list pos:line="255" pos:column="12">(<argument><expr><literal type="number" pos:line="255" pos:column="13">0<pos:position pos:line="255" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="255" pos:column="16">COLLECTD_CPU_STATE_NICE<pos:position pos:line="255" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="255" pos:column="41">(<pos:position pos:line="255" pos:column="42"/></operator><name pos:line="255" pos:column="42">derive_t<pos:position pos:line="255" pos:column="50"/></name><operator pos:line="255" pos:column="50">)<pos:position pos:line="255" pos:column="51"/></operator><name><name pos:line="255" pos:column="51">cs<pos:position pos:line="255" pos:column="53"/></name><operator pos:line="255" pos:column="53">-&gt;<pos:position pos:line="255" pos:column="58"/></operator><name pos:line="255" pos:column="55">nice<pos:position pos:line="255" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="255" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="256" pos:column="3">cpu_state<pos:position pos:line="256" pos:column="12"/></name><argument_list pos:line="256" pos:column="12">(<argument><expr><literal type="number" pos:line="256" pos:column="13">0<pos:position pos:line="256" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="256" pos:column="16">COLLECTD_CPU_STATE_SWAP<pos:position pos:line="256" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="256" pos:column="41">(<pos:position pos:line="256" pos:column="42"/></operator><name pos:line="256" pos:column="42">derive_t<pos:position pos:line="256" pos:column="50"/></name><operator pos:line="256" pos:column="50">)<pos:position pos:line="256" pos:column="51"/></operator><name><name pos:line="256" pos:column="51">cs<pos:position pos:line="256" pos:column="53"/></name><operator pos:line="256" pos:column="53">-&gt;<pos:position pos:line="256" pos:column="58"/></operator><name pos:line="256" pos:column="55">swap<pos:position pos:line="256" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="256" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="257" pos:column="3">cpu_state<pos:position pos:line="257" pos:column="12"/></name><argument_list pos:line="257" pos:column="12">(<argument><expr><literal type="number" pos:line="257" pos:column="13">0<pos:position pos:line="257" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="257" pos:column="16">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="257" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="257" pos:column="43">(<pos:position pos:line="257" pos:column="44"/></operator><name pos:line="257" pos:column="44">derive_t<pos:position pos:line="257" pos:column="52"/></name><operator pos:line="257" pos:column="52">)<pos:position pos:line="257" pos:column="53"/></operator><name><name pos:line="257" pos:column="53">cs<pos:position pos:line="257" pos:column="55"/></name><operator pos:line="257" pos:column="55">-&gt;<pos:position pos:line="257" pos:column="60"/></operator><name pos:line="257" pos:column="57">kernel<pos:position pos:line="257" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="257" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="258" pos:column="3">cpu_state<pos:position pos:line="258" pos:column="12"/></name><argument_list pos:line="258" pos:column="12">(<argument><expr><literal type="number" pos:line="258" pos:column="13">0<pos:position pos:line="258" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="258" pos:column="16">COLLECTD_CPU_STATE_USER<pos:position pos:line="258" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="258" pos:column="41">(<pos:position pos:line="258" pos:column="42"/></operator><name pos:line="258" pos:column="42">derive_t<pos:position pos:line="258" pos:column="50"/></name><operator pos:line="258" pos:column="50">)<pos:position pos:line="258" pos:column="51"/></operator><name><name pos:line="258" pos:column="51">cs<pos:position pos:line="258" pos:column="53"/></name><operator pos:line="258" pos:column="53">-&gt;<pos:position pos:line="258" pos:column="58"/></operator><name pos:line="258" pos:column="55">user<pos:position pos:line="258" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="258" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="259" pos:column="3">cpu_state<pos:position pos:line="259" pos:column="12"/></name><argument_list pos:line="259" pos:column="12">(<argument><expr><literal type="number" pos:line="259" pos:column="13">0<pos:position pos:line="259" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="259" pos:column="16">COLLECTD_CPU_STATE_WAIT<pos:position pos:line="259" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="259" pos:column="41">(<pos:position pos:line="259" pos:column="42"/></operator><name pos:line="259" pos:column="42">derive_t<pos:position pos:line="259" pos:column="50"/></name><operator pos:line="259" pos:column="50">)<pos:position pos:line="259" pos:column="51"/></operator><name><name pos:line="259" pos:column="51">cs<pos:position pos:line="259" pos:column="53"/></name><operator pos:line="259" pos:column="53">-&gt;<pos:position pos:line="259" pos:column="58"/></operator><name pos:line="259" pos:column="55">iowait<pos:position pos:line="259" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="259" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="63"/></expr_stmt>
<comment type="block" pos:line="260" pos:column="1">/* }}} #endif HAVE_LIBSTATGRAB */</comment>

<cpp:elif pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">elif<pos:position pos:line="262" pos:column="6"/></cpp:directive> <expr><call><name pos:line="262" pos:column="7">defined<pos:position pos:line="262" pos:column="14"/></name><argument_list pos:line="262" pos:column="14">(<argument><expr><name pos:line="262" pos:column="15">HAVE_PERFSTAT<pos:position pos:line="262" pos:column="28"/></name></expr></argument>)<pos:position pos:line="262" pos:column="29"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="262" pos:column="30">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="263" pos:column="3">perfstat_id_t<pos:position pos:line="263" pos:column="16"/></name></type> <name pos:line="263" pos:column="17">id<pos:position pos:line="263" pos:column="19"/></name></decl>;<pos:position pos:line="263" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="264" pos:column="3">int<pos:position pos:line="264" pos:column="6"/></name></type> <name pos:line="264" pos:column="7">cpus<pos:position pos:line="264" pos:column="11"/></name></decl>;<pos:position pos:line="264" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="266" pos:column="3">numcpu<pos:position pos:line="266" pos:column="9"/></name> <operator pos:line="266" pos:column="10">=<pos:position pos:line="266" pos:column="11"/></operator> <call><name pos:line="266" pos:column="12">perfstat_cpu<pos:position pos:line="266" pos:column="24"/></name><argument_list pos:line="266" pos:column="24">(<argument><expr><name pos:line="266" pos:column="25">NULL<pos:position pos:line="266" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="266" pos:column="31">NULL<pos:position pos:line="266" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="266" pos:column="37">sizeof<argument_list pos:line="266" pos:column="43">(<argument><expr><name pos:line="266" pos:column="44">perfstat_cpu_t<pos:position pos:line="266" pos:column="58"/></name></expr></argument>)<pos:position pos:line="266" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="266" pos:column="61">0<pos:position pos:line="266" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="266" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="64"/></expr_stmt>
  <if pos:line="267" pos:column="3">if <condition pos:line="267" pos:column="6">(<expr><name pos:line="267" pos:column="7">numcpu<pos:position pos:line="267" pos:column="13"/></name> <operator pos:line="267" pos:column="14">==<pos:position pos:line="267" pos:column="16"/></operator> <operator pos:line="267" pos:column="17">-<pos:position pos:line="267" pos:column="18"/></operator><literal type="number" pos:line="267" pos:column="18">1<pos:position pos:line="267" pos:column="19"/></literal></expr>)<pos:position pos:line="267" pos:column="20"/></condition><then pos:line="267" pos:column="20"> <block pos:line="267" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="268" pos:column="5">char<pos:position pos:line="268" pos:column="9"/></name></type> <name><name pos:line="268" pos:column="10">errbuf<pos:position pos:line="268" pos:column="16"/></name><index pos:line="268" pos:column="16">[<expr><literal type="number" pos:line="268" pos:column="17">1024<pos:position pos:line="268" pos:column="21"/></literal></expr>]<pos:position pos:line="268" pos:column="22"/></index></name></decl>;<pos:position pos:line="268" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="269" pos:column="5">WARNING<pos:position pos:line="269" pos:column="12"/></name><argument_list pos:line="269" pos:column="12">(<argument><expr><literal type="string" pos:line="269" pos:column="13">"cpu plugin: perfstat_cpu: %s"<pos:position pos:line="269" pos:column="43"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="270" pos:column="13">sstrerror<pos:position pos:line="270" pos:column="22"/></name><argument_list pos:line="270" pos:column="22">(<argument><expr><name pos:line="270" pos:column="23">errno<pos:position pos:line="270" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="30">errbuf<pos:position pos:line="270" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="270" pos:column="38">sizeof<argument_list pos:line="270" pos:column="44">(<argument><expr><name pos:line="270" pos:column="45">errbuf<pos:position pos:line="270" pos:column="51"/></name></expr></argument>)<pos:position pos:line="270" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="270" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="270" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="55"/></expr_stmt>
    <return pos:line="271" pos:column="5">return <expr><operator pos:line="271" pos:column="12">-<pos:position pos:line="271" pos:column="13"/></operator><literal type="number" pos:line="271" pos:column="13">1<pos:position pos:line="271" pos:column="14"/></literal></expr>;<pos:position pos:line="271" pos:column="15"/></return>
  }<pos:position pos:line="272" pos:column="4"/></block></then></if>

  <if pos:line="274" pos:column="3">if <condition pos:line="274" pos:column="6">(<expr><name pos:line="274" pos:column="7">pnumcpu<pos:position pos:line="274" pos:column="14"/></name> <operator pos:line="274" pos:column="15">!=<pos:position pos:line="274" pos:column="17"/></operator> <name pos:line="274" pos:column="18">numcpu<pos:position pos:line="274" pos:column="24"/></name> <operator pos:line="274" pos:column="25">||<pos:position pos:line="274" pos:column="27"/></operator> <name pos:line="274" pos:column="28">perfcpu<pos:position pos:line="274" pos:column="35"/></name> <operator pos:line="274" pos:column="36">==<pos:position pos:line="274" pos:column="38"/></operator> <name pos:line="274" pos:column="39">NULL<pos:position pos:line="274" pos:column="43"/></name></expr>)<pos:position pos:line="274" pos:column="44"/></condition><then pos:line="274" pos:column="44"> <block pos:line="274" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="275" pos:column="5">free<pos:position pos:line="275" pos:column="9"/></name><argument_list pos:line="275" pos:column="9">(<argument><expr><name pos:line="275" pos:column="10">perfcpu<pos:position pos:line="275" pos:column="17"/></name></expr></argument>)<pos:position pos:line="275" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="276" pos:column="5">perfcpu<pos:position pos:line="276" pos:column="12"/></name> <operator pos:line="276" pos:column="13">=<pos:position pos:line="276" pos:column="14"/></operator> <call><name pos:line="276" pos:column="15">malloc<pos:position pos:line="276" pos:column="21"/></name><argument_list pos:line="276" pos:column="21">(<argument><expr><name pos:line="276" pos:column="22">numcpu<pos:position pos:line="276" pos:column="28"/></name> <operator pos:line="276" pos:column="29">*<pos:position pos:line="276" pos:column="30"/></operator> <sizeof pos:line="276" pos:column="31">sizeof<argument_list pos:line="276" pos:column="37">(<argument><expr><name pos:line="276" pos:column="38">perfstat_cpu_t<pos:position pos:line="276" pos:column="52"/></name></expr></argument>)<pos:position pos:line="276" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="276" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="277" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="278" pos:column="3">pnumcpu<pos:position pos:line="278" pos:column="10"/></name> <operator pos:line="278" pos:column="11">=<pos:position pos:line="278" pos:column="12"/></operator> <name pos:line="278" pos:column="13">numcpu<pos:position pos:line="278" pos:column="19"/></name></expr>;<pos:position pos:line="278" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="280" pos:column="3">id<pos:position pos:line="280" pos:column="5"/></name><operator pos:line="280" pos:column="5">.<pos:position pos:line="280" pos:column="6"/></operator><name pos:line="280" pos:column="6">name<pos:position pos:line="280" pos:column="10"/></name><index pos:line="280" pos:column="10">[<expr><literal type="number" pos:line="280" pos:column="11">0<pos:position pos:line="280" pos:column="12"/></literal></expr>]<pos:position pos:line="280" pos:column="13"/></index></name> <operator pos:line="280" pos:column="14">=<pos:position pos:line="280" pos:column="15"/></operator> <literal type="char" pos:line="280" pos:column="16">'\0'<pos:position pos:line="280" pos:column="20"/></literal></expr>;<pos:position pos:line="280" pos:column="21"/></expr_stmt>
  <if pos:line="281" pos:column="3">if <condition pos:line="281" pos:column="6">(<expr><operator pos:line="281" pos:column="7">(<pos:position pos:line="281" pos:column="8"/></operator><name pos:line="281" pos:column="8">cpus<pos:position pos:line="281" pos:column="12"/></name> <operator pos:line="281" pos:column="13">=<pos:position pos:line="281" pos:column="14"/></operator> <call><name pos:line="281" pos:column="15">perfstat_cpu<pos:position pos:line="281" pos:column="27"/></name><argument_list pos:line="281" pos:column="27">(<argument><expr><operator pos:line="281" pos:column="28">&amp;<pos:position pos:line="281" pos:column="33"/></operator><name pos:line="281" pos:column="29">id<pos:position pos:line="281" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="281" pos:column="33">perfcpu<pos:position pos:line="281" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="281" pos:column="42">sizeof<argument_list pos:line="281" pos:column="48">(<argument><expr><name pos:line="281" pos:column="49">perfstat_cpu_t<pos:position pos:line="281" pos:column="63"/></name></expr></argument>)<pos:position pos:line="281" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="281" pos:column="66">numcpu<pos:position pos:line="281" pos:column="72"/></name></expr></argument>)<pos:position pos:line="281" pos:column="73"/></argument_list></call><operator pos:line="281" pos:column="73">)<pos:position pos:line="281" pos:column="74"/></operator> <operator pos:line="281" pos:column="75">&lt;<pos:position pos:line="281" pos:column="79"/></operator> <literal type="number" pos:line="281" pos:column="77">0<pos:position pos:line="281" pos:column="78"/></literal></expr>)<pos:position pos:line="281" pos:column="79"/></condition><then pos:line="281" pos:column="79"> <block pos:line="281" pos:column="80">{
    <decl_stmt><decl><type><name pos:line="282" pos:column="5">char<pos:position pos:line="282" pos:column="9"/></name></type> <name><name pos:line="282" pos:column="10">errbuf<pos:position pos:line="282" pos:column="16"/></name><index pos:line="282" pos:column="16">[<expr><literal type="number" pos:line="282" pos:column="17">1024<pos:position pos:line="282" pos:column="21"/></literal></expr>]<pos:position pos:line="282" pos:column="22"/></index></name></decl>;<pos:position pos:line="282" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="283" pos:column="5">WARNING<pos:position pos:line="283" pos:column="12"/></name><argument_list pos:line="283" pos:column="12">(<argument><expr><literal type="string" pos:line="283" pos:column="13">"cpu plugin: perfstat_cpu: %s"<pos:position pos:line="283" pos:column="43"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="284" pos:column="13">sstrerror<pos:position pos:line="284" pos:column="22"/></name><argument_list pos:line="284" pos:column="22">(<argument><expr><name pos:line="284" pos:column="23">errno<pos:position pos:line="284" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="284" pos:column="30">errbuf<pos:position pos:line="284" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="284" pos:column="38">sizeof<argument_list pos:line="284" pos:column="44">(<argument><expr><name pos:line="284" pos:column="45">errbuf<pos:position pos:line="284" pos:column="51"/></name></expr></argument>)<pos:position pos:line="284" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="284" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="284" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="55"/></expr_stmt>
    <return pos:line="285" pos:column="5">return <expr><operator pos:line="285" pos:column="12">-<pos:position pos:line="285" pos:column="13"/></operator><literal type="number" pos:line="285" pos:column="13">1<pos:position pos:line="285" pos:column="14"/></literal></expr>;<pos:position pos:line="285" pos:column="15"/></return>
  }<pos:position pos:line="286" pos:column="4"/></block></then></if>

  <for pos:line="288" pos:column="3">for <control pos:line="288" pos:column="7">(<init><decl><type><name pos:line="288" pos:column="8">int<pos:position pos:line="288" pos:column="11"/></name></type> <name pos:line="288" pos:column="12">i<pos:position pos:line="288" pos:column="13"/></name> <init pos:line="288" pos:column="14">= <expr><literal type="number" pos:line="288" pos:column="16">0<pos:position pos:line="288" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="288" pos:column="18"/></init> <condition><expr><name pos:line="288" pos:column="19">i<pos:position pos:line="288" pos:column="20"/></name> <operator pos:line="288" pos:column="21">&lt;<pos:position pos:line="288" pos:column="25"/></operator> <name pos:line="288" pos:column="23">cpus<pos:position pos:line="288" pos:column="27"/></name></expr>;<pos:position pos:line="288" pos:column="28"/></condition> <incr><expr><name pos:line="288" pos:column="29">i<pos:position pos:line="288" pos:column="30"/></name><operator pos:line="288" pos:column="30">++<pos:position pos:line="288" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="288" pos:column="33"/></control> <block pos:line="288" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="289" pos:column="5">cpu_stage<pos:position pos:line="289" pos:column="14"/></name><argument_list pos:line="289" pos:column="14">(<argument><expr><name pos:line="289" pos:column="15">i<pos:position pos:line="289" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="18">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="289" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="289" pos:column="43">(<pos:position pos:line="289" pos:column="44"/></operator><name pos:line="289" pos:column="44">derive_t<pos:position pos:line="289" pos:column="52"/></name><operator pos:line="289" pos:column="52">)<pos:position pos:line="289" pos:column="53"/></operator><name><name pos:line="289" pos:column="53">perfcpu<pos:position pos:line="289" pos:column="60"/></name><index pos:line="289" pos:column="60">[<expr><name pos:line="289" pos:column="61">i<pos:position pos:line="289" pos:column="62"/></name></expr>]<pos:position pos:line="289" pos:column="63"/></index></name><operator pos:line="289" pos:column="63">.<pos:position pos:line="289" pos:column="64"/></operator><name pos:line="289" pos:column="64">idle<pos:position pos:line="289" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="70">now<pos:position pos:line="289" pos:column="73"/></name></expr></argument>)<pos:position pos:line="289" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="290" pos:column="5">cpu_stage<pos:position pos:line="290" pos:column="14"/></name><argument_list pos:line="290" pos:column="14">(<argument><expr><name pos:line="290" pos:column="15">i<pos:position pos:line="290" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="18">COLLECTD_CPU_STATE_SYSTEM<pos:position pos:line="290" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="290" pos:column="45">(<pos:position pos:line="290" pos:column="46"/></operator><name pos:line="290" pos:column="46">derive_t<pos:position pos:line="290" pos:column="54"/></name><operator pos:line="290" pos:column="54">)<pos:position pos:line="290" pos:column="55"/></operator><name><name pos:line="290" pos:column="55">perfcpu<pos:position pos:line="290" pos:column="62"/></name><index pos:line="290" pos:column="62">[<expr><name pos:line="290" pos:column="63">i<pos:position pos:line="290" pos:column="64"/></name></expr>]<pos:position pos:line="290" pos:column="65"/></index></name><operator pos:line="290" pos:column="65">.<pos:position pos:line="290" pos:column="66"/></operator><name pos:line="290" pos:column="66">sys<pos:position pos:line="290" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="71">now<pos:position pos:line="290" pos:column="74"/></name></expr></argument>)<pos:position pos:line="290" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="291" pos:column="5">cpu_stage<pos:position pos:line="291" pos:column="14"/></name><argument_list pos:line="291" pos:column="14">(<argument><expr><name pos:line="291" pos:column="15">i<pos:position pos:line="291" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="291" pos:column="18">COLLECTD_CPU_STATE_USER<pos:position pos:line="291" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="291" pos:column="43">(<pos:position pos:line="291" pos:column="44"/></operator><name pos:line="291" pos:column="44">derive_t<pos:position pos:line="291" pos:column="52"/></name><operator pos:line="291" pos:column="52">)<pos:position pos:line="291" pos:column="53"/></operator><name><name pos:line="291" pos:column="53">perfcpu<pos:position pos:line="291" pos:column="60"/></name><index pos:line="291" pos:column="60">[<expr><name pos:line="291" pos:column="61">i<pos:position pos:line="291" pos:column="62"/></name></expr>]<pos:position pos:line="291" pos:column="63"/></index></name><operator pos:line="291" pos:column="63">.<pos:position pos:line="291" pos:column="64"/></operator><name pos:line="291" pos:column="64">user<pos:position pos:line="291" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="291" pos:column="70">now<pos:position pos:line="291" pos:column="73"/></name></expr></argument>)<pos:position pos:line="291" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="292" pos:column="5">cpu_stage<pos:position pos:line="292" pos:column="14"/></name><argument_list pos:line="292" pos:column="14">(<argument><expr><name pos:line="292" pos:column="15">i<pos:position pos:line="292" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="18">COLLECTD_CPU_STATE_WAIT<pos:position pos:line="292" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="292" pos:column="43">(<pos:position pos:line="292" pos:column="44"/></operator><name pos:line="292" pos:column="44">derive_t<pos:position pos:line="292" pos:column="52"/></name><operator pos:line="292" pos:column="52">)<pos:position pos:line="292" pos:column="53"/></operator><name><name pos:line="292" pos:column="53">perfcpu<pos:position pos:line="292" pos:column="60"/></name><index pos:line="292" pos:column="60">[<expr><name pos:line="292" pos:column="61">i<pos:position pos:line="292" pos:column="62"/></name></expr>]<pos:position pos:line="292" pos:column="63"/></index></name><operator pos:line="292" pos:column="63">.<pos:position pos:line="292" pos:column="64"/></operator><name pos:line="292" pos:column="64">wait<pos:position pos:line="292" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="70">now<pos:position pos:line="292" pos:column="73"/></name></expr></argument>)<pos:position pos:line="292" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="293" pos:column="4"/></block></for>
<cpp:endif pos:line="294" pos:column="1">#<cpp:directive pos:line="294" pos:column="2">endif<pos:position pos:line="294" pos:column="7"/></cpp:directive></cpp:endif>                       <comment type="block" pos:line="294" pos:column="30">/* }}} HAVE_PERFSTAT */</comment>

  <expr_stmt><expr><call><name pos:line="296" pos:column="3">cpu_commit<pos:position pos:line="296" pos:column="13"/></name><argument_list pos:line="296" pos:column="13">()<pos:position pos:line="296" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="297" pos:column="3">cpu_reset<pos:position pos:line="297" pos:column="12"/></name><argument_list pos:line="297" pos:column="12">()<pos:position pos:line="297" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="297" pos:column="15"/></expr_stmt>
  <return pos:line="298" pos:column="3">return <expr><literal type="number" pos:line="298" pos:column="10">0<pos:position pos:line="298" pos:column="11"/></literal></expr>;<pos:position pos:line="298" pos:column="12"/></return>
}<pos:position pos:line="299" pos:column="2"/></block></function></unit>
