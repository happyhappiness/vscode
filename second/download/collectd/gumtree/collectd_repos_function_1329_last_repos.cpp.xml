<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1329_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">grpc<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">Status<pos:position pos:line="1" pos:column="20"/></name></name></type> <name pos:line="1" pos:column="21">unmarshal_value_list<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name><name pos:line="1" pos:column="48">collectd<pos:position pos:line="1" pos:column="56"/></name><operator pos:line="1" pos:column="56">::<pos:position pos:line="1" pos:column="58"/></operator><name pos:line="1" pos:column="58">types<pos:position pos:line="1" pos:column="63"/></name><operator pos:line="1" pos:column="63">::<pos:position pos:line="1" pos:column="65"/></operator><name pos:line="1" pos:column="65">ValueList<pos:position pos:line="1" pos:column="74"/></name></name> <modifier pos:line="1" pos:column="75">&amp;<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="76">msg<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">value_list_t<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">vl<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <block pos:line="2" pos:column="60">{
  <expr_stmt><expr><name><name pos:line="3" pos:column="3">vl<pos:position pos:line="3" pos:column="5"/></name><operator pos:line="3" pos:column="5">-&gt;<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="7">time<pos:position pos:line="3" pos:column="11"/></name></name> <operator pos:line="3" pos:column="12">=<pos:position pos:line="3" pos:column="13"/></operator> <call><name pos:line="3" pos:column="14">NS_TO_CDTIME_T<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><call><name><name pos:line="3" pos:column="29">TimeUtil<pos:position pos:line="3" pos:column="37"/></name><operator pos:line="3" pos:column="37">::<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="39">TimestampToNanoseconds<pos:position pos:line="3" pos:column="61"/></name></name><argument_list pos:line="3" pos:column="61">(<argument><expr><call><name><name pos:line="3" pos:column="62">msg<pos:position pos:line="3" pos:column="65"/></name><operator pos:line="3" pos:column="65">.<pos:position pos:line="3" pos:column="66"/></operator><name pos:line="3" pos:column="66">time<pos:position pos:line="3" pos:column="70"/></name></name><argument_list pos:line="3" pos:column="70">()<pos:position pos:line="3" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4" pos:column="3">vl<pos:position pos:line="4" pos:column="5"/></name><operator pos:line="4" pos:column="5">-&gt;<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="7">interval<pos:position pos:line="4" pos:column="15"/></name></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator>
      <call><name pos:line="5" pos:column="7">NS_TO_CDTIME_T<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><call><name><name pos:line="5" pos:column="22">TimeUtil<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">::<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">DurationToNanoseconds<pos:position pos:line="5" pos:column="53"/></name></name><argument_list pos:line="5" pos:column="53">(<argument><expr><call><name><name pos:line="5" pos:column="54">msg<pos:position pos:line="5" pos:column="57"/></name><operator pos:line="5" pos:column="57">.<pos:position pos:line="5" pos:column="58"/></operator><name pos:line="5" pos:column="58">interval<pos:position pos:line="5" pos:column="66"/></name></name><argument_list pos:line="5" pos:column="66">()<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="71"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">auto<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">status<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><call><name pos:line="7" pos:column="17">unmarshal_ident<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><call><name><name pos:line="7" pos:column="33">msg<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">.<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">identifier<pos:position pos:line="7" pos:column="47"/></name></name><argument_list pos:line="7" pos:column="47">()<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="51">vl<pos:position pos:line="7" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="7" pos:column="55">true<pos:position pos:line="7" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><call><name><name pos:line="8" pos:column="8">status<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">ok<pos:position pos:line="8" pos:column="17"/></name></name><argument_list pos:line="8" pos:column="17">()<pos:position pos:line="8" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">status<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">status<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">unmarshal_meta_data<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><call><name><name pos:line="11" pos:column="32">msg<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">.<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">meta_data<pos:position pos:line="11" pos:column="45"/></name></name><argument_list pos:line="11" pos:column="45">()<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="11" pos:column="49">&amp;<pos:position pos:line="11" pos:column="54"/></operator><name><name pos:line="11" pos:column="50">vl<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">-&gt;<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="54">meta<pos:position pos:line="11" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><call><name><name pos:line="12" pos:column="8">status<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">ok<pos:position pos:line="12" pos:column="17"/></name></name><argument_list pos:line="12" pos:column="17">()<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">status<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="15" pos:column="3">value_t<pos:position pos:line="15" pos:column="10"/></name> <modifier pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></modifier></type><name pos:line="15" pos:column="12">values<pos:position pos:line="15" pos:column="18"/></name> <init pos:line="15" pos:column="19">= <expr><name pos:line="15" pos:column="21">NULL<pos:position pos:line="15" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">size_t<pos:position pos:line="16" pos:column="9"/></name></type> <name pos:line="16" pos:column="10">values_len<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">status<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name><name pos:line="18" pos:column="12">grpc<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">::<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">Status<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">::<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">OK<pos:position pos:line="18" pos:column="28"/></name></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
  <for pos:line="19" pos:column="3">for <control pos:line="19" pos:column="7">(<init><decl><type><name pos:line="19" pos:column="8">auto<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">v<pos:position pos:line="19" pos:column="14"/></name> <range pos:line="19" pos:column="15">: <expr><call><name><name pos:line="19" pos:column="17">msg<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">values<pos:position pos:line="19" pos:column="27"/></name></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="19" pos:column="30"/></control> <block pos:line="19" pos:column="31">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">value_t<pos:position pos:line="20" pos:column="12"/></name> <modifier pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></modifier></type><name pos:line="20" pos:column="14">val<pos:position pos:line="20" pos:column="17"/></name> <init pos:line="20" pos:column="18">=
        <expr><operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">value_t<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">*<pos:position pos:line="21" pos:column="19"/></operator><operator pos:line="21" pos:column="19">)<pos:position pos:line="21" pos:column="20"/></operator><call><name pos:line="21" pos:column="20">realloc<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">values<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="36">(<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">values_len<pos:position pos:line="21" pos:column="47"/></name> <operator pos:line="21" pos:column="48">+<pos:position pos:line="21" pos:column="49"/></operator> <literal type="number" pos:line="21" pos:column="50">1<pos:position pos:line="21" pos:column="51"/></literal><operator pos:line="21" pos:column="51">)<pos:position pos:line="21" pos:column="52"/></operator> <operator pos:line="21" pos:column="53">*<pos:position pos:line="21" pos:column="54"/></operator> <sizeof pos:line="21" pos:column="55">sizeof<argument_list pos:line="21" pos:column="61">(<argument><expr><operator pos:line="21" pos:column="62">*<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="63">values<pos:position pos:line="21" pos:column="69"/></name></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="72"/></decl_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">val<pos:position pos:line="22" pos:column="13"/></name></expr>)<pos:position pos:line="22" pos:column="14"/></condition><then pos:line="22" pos:column="14"> <block pos:line="22" pos:column="15">{
      <expr_stmt><expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <call><name><name pos:line="23" pos:column="16">grpc<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">::<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">Status<pos:position pos:line="23" pos:column="28"/></name></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name><name pos:line="23" pos:column="29">grpc<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">::<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">StatusCode<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">::<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="47">RESOURCE_EXHAUSTED<pos:position pos:line="23" pos:column="65"/></name></name></expr></argument>,
                            <argument><expr><call><name><name pos:line="24" pos:column="29">grpc<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">::<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">string<pos:position pos:line="24" pos:column="41"/></name></name><argument_list pos:line="24" pos:column="41">(<argument><expr><literal type="string" pos:line="24" pos:column="42">"failed to allocate values array"<pos:position pos:line="24" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
      <break pos:line="25" pos:column="7">break;<pos:position pos:line="25" pos:column="13"/></break>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="28" pos:column="5">values<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">val<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">val<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <name pos:line="29" pos:column="11">values<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">+<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">values_len<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">values_len<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">++<pos:position pos:line="30" pos:column="17"/></operator></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>

    <switch pos:line="32" pos:column="5">switch <condition pos:line="32" pos:column="12">(<expr><call><name><name pos:line="32" pos:column="13">v<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">value_case<pos:position pos:line="32" pos:column="25"/></name></name><argument_list pos:line="32" pos:column="25">()<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="28"/></condition> <block pos:line="32" pos:column="29">{
    <case pos:line="33" pos:column="5">case <expr><name><name pos:line="33" pos:column="10">collectd<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">::<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">types<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">::<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">Value<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">::<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">ValueCase<pos:position pos:line="33" pos:column="43"/></name><operator pos:line="33" pos:column="43">::<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="45">kCounter<pos:position pos:line="33" pos:column="53"/></name></name></expr>:<pos:position pos:line="33" pos:column="54"/></case>
      <expr_stmt><expr><name><name pos:line="34" pos:column="7">val<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">counter<pos:position pos:line="34" pos:column="19"/></name></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <call><name pos:line="34" pos:column="22">counter_t<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><call><name><name pos:line="34" pos:column="32">v<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">.<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">counter<pos:position pos:line="34" pos:column="41"/></name></name><argument_list pos:line="34" pos:column="41">()<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
      <break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break>
    <case pos:line="36" pos:column="5">case <expr><name><name pos:line="36" pos:column="10">collectd<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">::<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">types<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">::<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">Value<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">::<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="34">ValueCase<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">::<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="45">kGauge<pos:position pos:line="36" pos:column="51"/></name></name></expr>:<pos:position pos:line="36" pos:column="52"/></case>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">val<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">gauge<pos:position pos:line="37" pos:column="17"/></name></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <call><name pos:line="37" pos:column="20">gauge_t<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><call><name><name pos:line="37" pos:column="28">v<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">.<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">gauge<pos:position pos:line="37" pos:column="35"/></name></name><argument_list pos:line="37" pos:column="35">()<pos:position pos:line="37" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    <case pos:line="39" pos:column="5">case <expr><name><name pos:line="39" pos:column="10">collectd<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">::<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="20">types<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">::<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">Value<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">::<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">ValueCase<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">::<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="45">kDerive<pos:position pos:line="39" pos:column="52"/></name></name></expr>:<pos:position pos:line="39" pos:column="53"/></case>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">val<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">derive<pos:position pos:line="40" pos:column="18"/></name></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <call><name pos:line="40" pos:column="21">derive_t<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><call><name><name pos:line="40" pos:column="30">v<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">.<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">derive<pos:position pos:line="40" pos:column="38"/></name></name><argument_list pos:line="40" pos:column="38">()<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
      <break pos:line="41" pos:column="7">break;<pos:position pos:line="41" pos:column="13"/></break>
    <case pos:line="42" pos:column="5">case <expr><name><name pos:line="42" pos:column="10">collectd<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">::<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="20">types<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">::<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">Value<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">::<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="34">ValueCase<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">::<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">kAbsolute<pos:position pos:line="42" pos:column="54"/></name></name></expr>:<pos:position pos:line="42" pos:column="55"/></case>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">val<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">absolute<pos:position pos:line="43" pos:column="20"/></name></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <call><name pos:line="43" pos:column="23">absolute_t<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><call><name><name pos:line="43" pos:column="34">v<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">.<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="36">absolute<pos:position pos:line="43" pos:column="44"/></name></name><argument_list pos:line="43" pos:column="44">()<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
      <break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break>
    <default pos:line="45" pos:column="5">default:<pos:position pos:line="45" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="46" pos:column="7">status<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name><name pos:line="46" pos:column="16">grpc<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">::<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">Status<pos:position pos:line="46" pos:column="28"/></name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name><name pos:line="46" pos:column="29">grpc<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">::<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="35">StatusCode<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">::<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="47">INVALID_ARGUMENT<pos:position pos:line="46" pos:column="63"/></name></name></expr></argument>,
                            <argument><expr><call><name><name pos:line="47" pos:column="29">grpc<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">::<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="35">string<pos:position pos:line="47" pos:column="41"/></name></name><argument_list pos:line="47" pos:column="41">(<argument><expr><literal type="string" pos:line="47" pos:column="42">"unknown value type"<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
      <break pos:line="48" pos:column="7">break;<pos:position pos:line="48" pos:column="13"/></break>
    }<pos:position pos:line="49" pos:column="6"/></block></switch>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><operator pos:line="51" pos:column="9">!<pos:position pos:line="51" pos:column="10"/></operator><call><name><name pos:line="51" pos:column="10">status<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">.<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">ok<pos:position pos:line="51" pos:column="19"/></name></name><argument_list pos:line="51" pos:column="19">()<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="22"/></condition><then pos:line="51" pos:column="22">
      <block type="pseudo"><break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block></for>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><call><name><name pos:line="54" pos:column="7">status<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">.<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">ok<pos:position pos:line="54" pos:column="16"/></name></name><argument_list pos:line="54" pos:column="16">()<pos:position pos:line="54" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="19"/></condition><then pos:line="54" pos:column="19"> <block pos:line="54" pos:column="20">{
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">vl<pos:position pos:line="55" pos:column="7"/></name><operator pos:line="55" pos:column="7">-&gt;<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="9">values<pos:position pos:line="55" pos:column="15"/></name></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">values<pos:position pos:line="55" pos:column="24"/></name></expr>;<pos:position pos:line="55" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">vl<pos:position pos:line="56" pos:column="7"/></name><operator pos:line="56" pos:column="7">-&gt;<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="9">values_len<pos:position pos:line="56" pos:column="19"/></name></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">values_len<pos:position pos:line="56" pos:column="32"/></name></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then> <else pos:line="57" pos:column="5">else <block pos:line="57" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">meta_data_destroy<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name><name pos:line="58" pos:column="23">vl<pos:position pos:line="58" pos:column="25"/></name><operator pos:line="58" pos:column="25">-&gt;<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="27">meta<pos:position pos:line="58" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">free<pos:position pos:line="59" pos:column="9"/></name><argument_list pos:line="59" pos:column="9">(<argument><expr><name pos:line="59" pos:column="10">values<pos:position pos:line="59" pos:column="16"/></name></expr></argument>)<pos:position pos:line="59" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></else></if>

  <return pos:line="62" pos:column="3">return <expr><name pos:line="62" pos:column="10">status<pos:position pos:line="62" pos:column="16"/></name></expr>;<pos:position pos:line="62" pos:column="17"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
