<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1502_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">value_list_to_json<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buffer<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">buffer_size<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="65">/* {{{ */</comment>
                              <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">data_set_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">ds<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">value_list_t<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">vl<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="3" pos:column="31">int<pos:position pos:line="3" pos:column="34"/></name></type> <name pos:line="3" pos:column="35">store_rates<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list> <block pos:line="3" pos:column="48">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">temp<pos:position pos:line="4" pos:column="12"/></name><index pos:line="4" pos:column="12">[<expr><literal type="number" pos:line="4" pos:column="13">512<pos:position pos:line="4" pos:column="16"/></literal></expr>]<pos:position pos:line="4" pos:column="17"/></index></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">offset<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">buffer<pos:position pos:line="8" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="21">buffer_size<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">BUFFER_ADD<pos:position pos:line="10" pos:column="19"/></name><parameter_list pos:line="10" pos:column="19">(<parameter><type><modifier pos:line="10" pos:column="20">...<pos:position pos:line="10" pos:column="23"/></modifier></type></parameter>)<pos:position pos:line="10" pos:column="24"/></parameter_list></cpp:macro>                                                        \
  <cpp:value pos:line="11" pos:column="3">do {                                                                         \
    status = ssnprintf(buffer + offset, buffer_size - offset, __VA_ARGS__);    \
    if (status &lt; 1)                                                            \
      return (-1);                                                             \
    else if (((size_t)status) &gt;= (buffer_size - offset))                       \
      return (-ENOMEM);                                                        \
    else                                                                       \
      offset += ((size_t)status);                                              \
  } while (0)<pos:position pos:line="19" pos:column="14"/></cpp:value></cpp:define>

  <comment type="block" pos:line="21" pos:column="3">/* All value lists have a leading comma. The first one will be replaced with
   * a square bracket in `format_json_finalize'. */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">BUFFER_ADD<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><literal type="string" pos:line="23" pos:column="14">",{"<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="25" pos:column="3">status<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">values_to_json<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">temp<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="33">sizeof<argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">temp<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">ds<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">vl<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">store_rates<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">status<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">)<pos:position pos:line="27" pos:column="20"/></operator></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">BUFFER_ADD<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="string" pos:line="28" pos:column="14">"\"values\":%s"<pos:position pos:line="28" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="31">temp<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">status<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">dstypes_to_json<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">temp<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="34">sizeof<argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">temp<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">ds<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">status<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">!=<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19">
    <block type="pseudo"><return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">)<pos:position pos:line="32" pos:column="20"/></operator></expr>;<pos:position pos:line="32" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">BUFFER_ADD<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="string" pos:line="33" pos:column="14">",\"dstypes\":%s"<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">temp<pos:position pos:line="33" pos:column="37"/></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><name pos:line="35" pos:column="3">status<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">dsnames_to_json<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">temp<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="34">sizeof<argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">temp<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="35" pos:column="48">ds<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="52"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19">
    <block type="pseudo"><return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">status<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">)<pos:position pos:line="37" pos:column="20"/></operator></expr>;<pos:position pos:line="37" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">BUFFER_ADD<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><literal type="string" pos:line="38" pos:column="14">",\"dsnames\":%s"<pos:position pos:line="38" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">temp<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">BUFFER_ADD<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><literal type="string" pos:line="40" pos:column="14">",\"time\":%.3f"<pos:position pos:line="40" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="32">CDTIME_T_TO_DOUBLE<pos:position pos:line="40" pos:column="50"/></name><argument_list pos:line="40" pos:column="50">(<argument><expr><name><name pos:line="40" pos:column="51">vl<pos:position pos:line="40" pos:column="53"/></name><operator pos:line="40" pos:column="53">-&gt;<pos:position pos:line="40" pos:column="58"/></operator><name pos:line="40" pos:column="55">time<pos:position pos:line="40" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">BUFFER_ADD<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><literal type="string" pos:line="41" pos:column="14">",\"interval\":%.3f"<pos:position pos:line="41" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="36">CDTIME_T_TO_DOUBLE<pos:position pos:line="41" pos:column="54"/></name><argument_list pos:line="41" pos:column="54">(<argument><expr><name><name pos:line="41" pos:column="55">vl<pos:position pos:line="41" pos:column="57"/></name><operator pos:line="41" pos:column="57">-&gt;<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="59">interval<pos:position pos:line="41" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="70"/></expr_stmt>

<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define<pos:position pos:line="43" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">BUFFER_ADD_KEYVAL<pos:position pos:line="43" pos:column="26"/></name><parameter_list pos:line="43" pos:column="26">(<parameter><type><name pos:line="43" pos:column="27">key<pos:position pos:line="43" pos:column="30"/></name></type></parameter>, <parameter><type><name pos:line="43" pos:column="32">value<pos:position pos:line="43" pos:column="37"/></name></type></parameter>)<pos:position pos:line="43" pos:column="38"/></parameter_list></cpp:macro>                                          \
  <cpp:value pos:line="44" pos:column="3">do {                                                                         \
    status = json_escape_string(temp, sizeof(temp), (value));                  \
    if (status != 0)                                                           \
      return (status);                                                         \
    BUFFER_ADD(",\"%s\":%s", (key), temp);                                     \
  } while (0)<pos:position pos:line="49" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><literal type="string" pos:line="51" pos:column="21">"host"<pos:position pos:line="51" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="29">vl<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">-&gt;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="33">host<pos:position pos:line="51" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><literal type="string" pos:line="52" pos:column="21">"plugin"<pos:position pos:line="52" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="31">vl<pos:position pos:line="52" pos:column="33"/></name><operator pos:line="52" pos:column="33">-&gt;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="35">plugin<pos:position pos:line="52" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><literal type="string" pos:line="53" pos:column="21">"plugin_instance"<pos:position pos:line="53" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="40">vl<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">plugin_instance<pos:position pos:line="53" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><literal type="string" pos:line="54" pos:column="21">"type"<pos:position pos:line="54" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="29">vl<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">-&gt;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="33">type<pos:position pos:line="54" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"type_instance"<pos:position pos:line="55" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="38">vl<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">type_instance<pos:position pos:line="55" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="57"/></expr_stmt>

  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><name><name pos:line="57" pos:column="7">vl<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">-&gt;<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="11">meta<pos:position pos:line="57" pos:column="15"/></name></name> <operator pos:line="57" pos:column="16">!=<pos:position pos:line="57" pos:column="18"/></operator> <name pos:line="57" pos:column="19">NULL<pos:position pos:line="57" pos:column="23"/></name></expr>)<pos:position pos:line="57" pos:column="24"/></condition><then pos:line="57" pos:column="24"> <block pos:line="57" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">char<pos:position pos:line="58" pos:column="9"/></name></type> <name><name pos:line="58" pos:column="10">meta_buffer<pos:position pos:line="58" pos:column="21"/></name><index pos:line="58" pos:column="21">[<expr><name pos:line="58" pos:column="22">buffer_size<pos:position pos:line="58" pos:column="33"/></name></expr>]<pos:position pos:line="58" pos:column="34"/></index></name></decl>;<pos:position pos:line="58" pos:column="35"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">memset<pos:position pos:line="59" pos:column="11"/></name><argument_list pos:line="59" pos:column="11">(<argument><expr><name pos:line="59" pos:column="12">meta_buffer<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="25">0<pos:position pos:line="59" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="28">sizeof<argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">meta_buffer<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">status<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">meta_data_to_json<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">meta_buffer<pos:position pos:line="60" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="45">sizeof<argument_list pos:line="60" pos:column="51">(<argument><expr><name pos:line="60" pos:column="52">meta_buffer<pos:position pos:line="60" pos:column="63"/></name></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="66">vl<pos:position pos:line="60" pos:column="68"/></name><operator pos:line="60" pos:column="68">-&gt;<pos:position pos:line="60" pos:column="73"/></operator><name pos:line="60" pos:column="70">meta<pos:position pos:line="60" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="76"/></expr_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">status<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">!=<pos:position pos:line="61" pos:column="18"/></operator> <literal type="number" pos:line="61" pos:column="19">0<pos:position pos:line="61" pos:column="20"/></literal></expr>)<pos:position pos:line="61" pos:column="21"/></condition><then pos:line="61" pos:column="21">
      <block type="pseudo"><return pos:line="62" pos:column="7">return <expr><operator pos:line="62" pos:column="14">(<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">status<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">)<pos:position pos:line="62" pos:column="22"/></operator></expr>;<pos:position pos:line="62" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">BUFFER_ADD<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><literal type="string" pos:line="64" pos:column="16">",\"meta\":%s"<pos:position pos:line="64" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="32">meta_buffer<pos:position pos:line="64" pos:column="43"/></name></expr></argument>)<pos:position pos:line="64" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if> <comment type="block" pos:line="65" pos:column="5">/* if (vl-&gt;meta != NULL) */</comment>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">BUFFER_ADD<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><literal type="string" pos:line="67" pos:column="14">"}"<pos:position pos:line="67" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>

<cpp:undef pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">undef<pos:position pos:line="69" pos:column="7"/></cpp:directive> <name pos:line="69" pos:column="8">BUFFER_ADD_KEYVAL<pos:position pos:line="69" pos:column="25"/></name></cpp:undef>
<cpp:undef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">undef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">BUFFER_ADD<pos:position pos:line="70" pos:column="18"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="72" pos:column="3">DEBUG<pos:position pos:line="72" pos:column="8"/></name><argument_list pos:line="72" pos:column="8">(<argument><expr><literal type="string" pos:line="72" pos:column="9">"format_json: value_list_to_json: buffer = %s;"<pos:position pos:line="72" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="58">buffer<pos:position pos:line="72" pos:column="64"/></name></expr></argument>)<pos:position pos:line="72" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="66"/></expr_stmt>

  <return pos:line="74" pos:column="3">return <expr><operator pos:line="74" pos:column="10">(<pos:position pos:line="74" pos:column="11"/></operator><literal type="number" pos:line="74" pos:column="11">0<pos:position pos:line="74" pos:column="12"/></literal><operator pos:line="74" pos:column="12">)<pos:position pos:line="74" pos:column="13"/></operator></expr>;<pos:position pos:line="74" pos:column="14"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
