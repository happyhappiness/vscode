<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_361_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_write_locked<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">camqp_config_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conf<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="53">/* {{{ */</comment>
                              <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">buffer<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">routing_key<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list> <block pos:line="2" pos:column="76">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">status<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <call><name pos:line="5" pos:column="12">camqp_connect<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">conf<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">amqp_basic_properties_t<pos:position pos:line="9" pos:column="26"/></name></type> <name pos:line="9" pos:column="27">props<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><block pos:line="9" pos:column="35">{<expr><operator pos:line="9" pos:column="36">.<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">_flags<pos:position pos:line="9" pos:column="43"/></name> <operator pos:line="9" pos:column="44">=<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">AMQP_BASIC_CONTENT_TYPE_FLAG<pos:position pos:line="9" pos:column="74"/></name> <operator pos:line="9" pos:column="75">|<pos:position pos:line="9" pos:column="76"/></operator>
                                             <name pos:line="10" pos:column="46">AMQP_BASIC_DELIVERY_MODE_FLAG<pos:position pos:line="10" pos:column="75"/></name> <operator pos:line="10" pos:column="76">|<pos:position pos:line="10" pos:column="77"/></operator>
                                             <name pos:line="11" pos:column="46">AMQP_BASIC_APP_ID_FLAG<pos:position pos:line="11" pos:column="68"/></name></expr>,
                                   <expr><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">delivery_mode<pos:position pos:line="12" pos:column="50"/></name> <operator pos:line="12" pos:column="51">=<pos:position pos:line="12" pos:column="52"/></operator> <name><name pos:line="12" pos:column="53">conf<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">-&gt;<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="59">delivery_mode<pos:position pos:line="12" pos:column="72"/></name></name></expr>,
                                   <expr><operator pos:line="13" pos:column="36">.<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">app_id<pos:position pos:line="13" pos:column="43"/></name> <operator pos:line="13" pos:column="44">=<pos:position pos:line="13" pos:column="45"/></operator> <macro><name pos:line="13" pos:column="46">amqp_cstring_bytes<pos:position pos:line="13" pos:column="64"/></name><argument_list pos:line="13" pos:column="64">(<argument><literal type="string" pos:line="13" pos:column="65">"collectd"<pos:position pos:line="13" pos:column="75"/></literal></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></macro></expr>}<pos:position pos:line="13" pos:column="77"/></block></expr></init></decl>;<pos:position pos:line="13" pos:column="78"/></decl_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name><name pos:line="15" pos:column="7">conf<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">format<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">CAMQP_FORMAT_COMMAND<pos:position pos:line="15" pos:column="43"/></name></expr>)<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="5">props<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">content_type<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <call><name pos:line="16" pos:column="26">amqp_cstring_bytes<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><literal type="string" pos:line="16" pos:column="45">"text/collectd"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt></block></then>
  <elseif pos:line="17" pos:column="3">else <if pos:line="17" pos:column="8">if <condition pos:line="17" pos:column="11">(<expr><name><name pos:line="17" pos:column="12">conf<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">format<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">==<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">CAMQP_FORMAT_JSON<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="5">props<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">.<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">content_type<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">amqp_cstring_bytes<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><literal type="string" pos:line="18" pos:column="45">"application/json"<pos:position pos:line="18" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="65"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="19" pos:column="3">else <if pos:line="19" pos:column="8">if <condition pos:line="19" pos:column="11">(<expr><name><name pos:line="19" pos:column="12">conf<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">format<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">CAMQP_FORMAT_GRAPHITE<pos:position pos:line="19" pos:column="49"/></name></expr>)<pos:position pos:line="19" pos:column="50"/></condition><then pos:line="19" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="5">props<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">content_type<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">amqp_cstring_bytes<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><literal type="string" pos:line="20" pos:column="45">"text/graphite"<pos:position pos:line="20" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt></block></then></if></elseif>
  <else pos:line="21" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">assert<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">23<pos:position pos:line="22" pos:column="14"/></literal> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">42<pos:position pos:line="22" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">status<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">amqp_basic_publish<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(
      <argument><expr><name><name pos:line="25" pos:column="7">conf<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">connection<pos:position pos:line="25" pos:column="23"/></name></name></expr></argument>,
      <comment type="block" pos:line="26" pos:column="7">/* channel = */</comment> <argument><expr><literal type="number" pos:line="26" pos:column="23">1<pos:position pos:line="26" pos:column="24"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="26">amqp_cstring_bytes<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><call><name pos:line="26" pos:column="45">CONF<pos:position pos:line="26" pos:column="49"/></name><argument_list pos:line="26" pos:column="49">(<argument><expr><name pos:line="26" pos:column="50">conf<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">exchange<pos:position pos:line="26" pos:column="64"/></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr></argument>,
      <argument><expr><call><name pos:line="27" pos:column="7">amqp_cstring_bytes<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">routing_key<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr></argument>,
      <comment type="block" pos:line="28" pos:column="7">/* mandatory = */</comment> <argument><expr><literal type="number" pos:line="28" pos:column="25">0<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>,
      <comment type="block" pos:line="29" pos:column="7">/* immediate = */</comment> <argument><expr><literal type="number" pos:line="29" pos:column="25">0<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="29">props<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="36">amqp_cstring_bytes<pos:position pos:line="29" pos:column="54"/></name><argument_list pos:line="29" pos:column="54">(<argument><expr><name pos:line="29" pos:column="55">buffer<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">status<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">!=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19"> <block pos:line="30" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ERROR<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><literal type="string" pos:line="31" pos:column="11">"amqp plugin: amqp_basic_publish failed with status %i."<pos:position pos:line="31" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="69">status<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">camqp_close_connection<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">conf<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <return pos:line="35" pos:column="3">return <expr><operator pos:line="35" pos:column="10">(<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">status<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">)<pos:position pos:line="35" pos:column="18"/></operator></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
