<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_551_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_string<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ret_buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">ret_buffer_len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">output<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">output_len<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">ret_buffer<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>   <name pos:line="5" pos:column="15">buffer_len<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">ret_buffer_len<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">part_string_t<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">ps<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint16_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">h_length<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">uint16_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">h_type<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">DEBUG<pos:position pos:line="11" pos:column="14"/></name> <argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"network plugin: parse_part_string: ret_buffer = %p;"<pos:position pos:line="11" pos:column="69"/></literal>
			<literal type="string" pos:line="12" pos:column="25">" ret_buffer_len = %i; output = %p; output_len = %i;"<pos:position pos:line="12" pos:column="78"/></literal></expr></argument>,
			<argument><expr><operator pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">ret_buffer<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">ret_buffer_len<pos:position pos:line="13" pos:column="53"/></name></expr></argument>,
			<argument><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">void<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></operator><operator pos:line="14" pos:column="32">)<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">output<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">output_len<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="16" pos:column="9">ps<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">head<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <operator pos:line="16" pos:column="19">(<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">part_header_t<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">*<pos:position pos:line="16" pos:column="35"/></operator><operator pos:line="16" pos:column="35">)<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">buffer<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">h_length<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">ntohs<pos:position pos:line="18" pos:column="25"/></name> <argument_list pos:line="18" pos:column="26">(<argument><expr><name><name pos:line="18" pos:column="27">ps<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">.<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">head<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">length<pos:position pos:line="18" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">h_type<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">ntohs<pos:position pos:line="19" pos:column="23"/></name> <argument_list pos:line="19" pos:column="24">(<argument><expr><name><name pos:line="19" pos:column="25">ps<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">.<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="28">head<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">type<pos:position pos:line="19" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">DEBUG<pos:position pos:line="21" pos:column="14"/></name> <argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"network plugin: parse_part_string: length = %hu; type = %hu;"<pos:position pos:line="21" pos:column="78"/></literal></expr></argument>,
			<argument><expr><name pos:line="22" pos:column="25">h_length<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">h_type<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">buffer_len<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">&lt;<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="26">h_length<pos:position pos:line="24" pos:column="34"/></name></expr>)<pos:position pos:line="24" pos:column="35"/></condition><then pos:line="24" pos:column="35">
	<block pos:line="25" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">DEBUG<pos:position pos:line="26" pos:column="22"/></name> <argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">"packet is too short"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><operator pos:line="27" pos:column="24">(<pos:position pos:line="27" pos:column="25"/></operator><operator pos:line="27" pos:column="25">-<pos:position pos:line="27" pos:column="26"/></operator><literal type="number" pos:line="27" pos:column="26">1<pos:position pos:line="27" pos:column="27"/></literal><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator></expr>;<pos:position pos:line="27" pos:column="29"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">assert<pos:position pos:line="29" pos:column="15"/></name> <argument_list pos:line="29" pos:column="16">(<argument><expr><operator pos:line="29" pos:column="17">(<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">h_type<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">==<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">TYPE_HOST<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator>
			<operator pos:line="30" pos:column="25">||<pos:position pos:line="30" pos:column="27"/></operator> <operator pos:line="30" pos:column="28">(<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="29">h_type<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">==<pos:position pos:line="30" pos:column="38"/></operator> <name pos:line="30" pos:column="39">TYPE_PLUGIN<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator>
			<operator pos:line="31" pos:column="25">||<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="28">(<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">h_type<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">==<pos:position pos:line="31" pos:column="38"/></operator> <name pos:line="31" pos:column="39">TYPE_PLUGIN_INSTANCE<pos:position pos:line="31" pos:column="59"/></name><operator pos:line="31" pos:column="59">)<pos:position pos:line="31" pos:column="60"/></operator>
			<operator pos:line="32" pos:column="25">||<pos:position pos:line="32" pos:column="27"/></operator> <operator pos:line="32" pos:column="28">(<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">h_type<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">==<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">TYPE_TYPE<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">)<pos:position pos:line="32" pos:column="49"/></operator>
			<operator pos:line="33" pos:column="25">||<pos:position pos:line="33" pos:column="27"/></operator> <operator pos:line="33" pos:column="28">(<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">h_type<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">==<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">TYPE_TYPE_INSTANCE<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">)<pos:position pos:line="33" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="35" pos:column="9">ps<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">.<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">value<pos:position pos:line="35" pos:column="17"/></name></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <name pos:line="35" pos:column="20">buffer<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">+<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">4<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">ps<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">.<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="16">value<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><name pos:line="36" pos:column="22">h_length<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">-<pos:position pos:line="36" pos:column="32"/></operator> <literal type="number" pos:line="36" pos:column="33">5<pos:position pos:line="36" pos:column="34"/></literal></expr>]<pos:position pos:line="36" pos:column="35"/></index></name> <operator pos:line="36" pos:column="36">!=<pos:position pos:line="36" pos:column="38"/></operator> <literal type="char" pos:line="36" pos:column="39">'\0'<pos:position pos:line="36" pos:column="43"/></literal></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44">
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">DEBUG<pos:position pos:line="38" pos:column="22"/></name> <argument_list pos:line="38" pos:column="23">(<argument><expr><literal type="string" pos:line="38" pos:column="24">"String does not end with a nullbyte"<pos:position pos:line="38" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><operator pos:line="39" pos:column="25">-<pos:position pos:line="39" pos:column="26"/></operator><literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal><operator pos:line="39" pos:column="27">)<pos:position pos:line="39" pos:column="28"/></operator></expr>;<pos:position pos:line="39" pos:column="29"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">output_len<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">&lt;<pos:position pos:line="42" pos:column="28"/></operator> <operator pos:line="42" pos:column="26">(<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">h_length<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">-<pos:position pos:line="42" pos:column="37"/></operator> <literal type="number" pos:line="42" pos:column="38">4<pos:position pos:line="42" pos:column="39"/></literal><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator></expr>)<pos:position pos:line="42" pos:column="41"/></condition><then pos:line="42" pos:column="41">
	<block pos:line="43" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">DEBUG<pos:position pos:line="44" pos:column="22"/></name> <argument_list pos:line="44" pos:column="23">(<argument><expr><literal type="string" pos:line="44" pos:column="24">"output buffer is too small"<pos:position pos:line="44" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
		<return pos:line="45" pos:column="17">return <expr><operator pos:line="45" pos:column="24">(<pos:position pos:line="45" pos:column="25"/></operator><operator pos:line="45" pos:column="25">-<pos:position pos:line="45" pos:column="26"/></operator><literal type="number" pos:line="45" pos:column="26">1<pos:position pos:line="45" pos:column="27"/></literal><operator pos:line="45" pos:column="27">)<pos:position pos:line="45" pos:column="28"/></operator></expr>;<pos:position pos:line="45" pos:column="29"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">strcpy<pos:position pos:line="47" pos:column="15"/></name> <argument_list pos:line="47" pos:column="16">(<argument><expr><name pos:line="47" pos:column="17">output<pos:position pos:line="47" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="25">ps<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">.<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="28">value<pos:position pos:line="47" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">DEBUG<pos:position pos:line="49" pos:column="14"/></name> <argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="string" pos:line="49" pos:column="16">"network plugin: parse_part_string: output = %s"<pos:position pos:line="49" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="66">output<pos:position pos:line="49" pos:column="72"/></name></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="74"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">ret_buffer<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <operator pos:line="51" pos:column="23">(<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">void<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">*<pos:position pos:line="51" pos:column="30"/></operator><operator pos:line="51" pos:column="30">)<pos:position pos:line="51" pos:column="31"/></operator> <operator pos:line="51" pos:column="32">(<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">buffer<pos:position pos:line="51" pos:column="39"/></name> <operator pos:line="51" pos:column="40">+<pos:position pos:line="51" pos:column="41"/></operator> <name pos:line="51" pos:column="42">h_length<pos:position pos:line="51" pos:column="50"/></name><operator pos:line="51" pos:column="50">)<pos:position pos:line="51" pos:column="51"/></operator></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="52" pos:column="9">*<pos:position pos:line="52" pos:column="10"/></operator><name pos:line="52" pos:column="10">ret_buffer_len<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <name pos:line="52" pos:column="27">buffer_len<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">-<pos:position pos:line="52" pos:column="39"/></operator> <name pos:line="52" pos:column="40">h_length<pos:position pos:line="52" pos:column="48"/></name></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt>

	<return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">0<pos:position pos:line="54" pos:column="18"/></literal><operator pos:line="54" pos:column="18">)<pos:position pos:line="54" pos:column="19"/></operator></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
