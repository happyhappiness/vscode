<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1037_collectd-4.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ping_send_all<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">pingobj_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">obj<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">pinghost_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ph<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">pinghost_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ptr<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">ret<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">ph<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <name><name pos:line="9" pos:column="14">obj<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">head<pos:position pos:line="9" pos:column="23"/></name></name></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>

	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><expr><name pos:line="11" pos:column="14">ptr<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">ph<pos:position pos:line="11" pos:column="22"/></name></expr>;<pos:position pos:line="11" pos:column="23"/></init> <condition><expr><name pos:line="11" pos:column="24">ptr<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">!=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">NULL<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></condition> <incr><expr><name pos:line="11" pos:column="37">ptr<pos:position pos:line="11" pos:column="40"/></name> <operator pos:line="11" pos:column="41">=<pos:position pos:line="11" pos:column="42"/></operator> <name><name pos:line="11" pos:column="43">ptr<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">next<pos:position pos:line="11" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="11" pos:column="53"/></control>
	<block pos:line="12" pos:column="9">{
		<comment type="block" pos:line="13" pos:column="17">/* start timer.. The GNU `ping6' starts the timer before
		 * sending the packet, so I will do that too */</comment>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">gettimeofday<pos:position pos:line="15" pos:column="33"/></name> <argument_list pos:line="15" pos:column="34">(<argument><expr><name><name pos:line="15" pos:column="35">ptr<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">timer<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">NULL<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call> <operator pos:line="15" pos:column="53">==<pos:position pos:line="15" pos:column="55"/></operator> <operator pos:line="15" pos:column="56">-<pos:position pos:line="15" pos:column="57"/></operator><literal type="number" pos:line="15" pos:column="57">1<pos:position pos:line="15" pos:column="58"/></literal></expr>)<pos:position pos:line="15" pos:column="59"/></condition><then pos:line="15" pos:column="59">
		<block pos:line="16" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">dprintf<pos:position pos:line="17" pos:column="32"/></name> <argument_list pos:line="17" pos:column="33">(<argument><expr><literal type="string" pos:line="17" pos:column="34">"gettimeofday: %s\n"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="56">strerror<pos:position pos:line="17" pos:column="64"/></name> <argument_list pos:line="17" pos:column="65">(<argument><expr><name pos:line="17" pos:column="66">errno<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">timerclear<pos:position pos:line="18" pos:column="35"/></name> <argument_list pos:line="18" pos:column="36">(<argument><expr><name><name pos:line="18" pos:column="37">ptr<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">timer<pos:position pos:line="18" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">ret<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">--<pos:position pos:line="19" pos:column="30"/></operator></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
			<continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue>
		}<pos:position pos:line="21" pos:column="18"/></block></then>
		<else pos:line="22" pos:column="17">else
		<block pos:line="23" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">dprintf<pos:position pos:line="24" pos:column="32"/></name> <argument_list pos:line="24" pos:column="33">(<argument><expr><literal type="string" pos:line="24" pos:column="34">"timer set for hostname = %s\n"<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="67">ptr<pos:position pos:line="24" pos:column="70"/></name><operator pos:line="24" pos:column="70">-&gt;<pos:position pos:line="24" pos:column="75"/></operator><name pos:line="24" pos:column="72">hostname<pos:position pos:line="24" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="82"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></else></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">ptr<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">-&gt;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="26">addrfamily<pos:position pos:line="27" pos:column="36"/></name></name> <operator pos:line="27" pos:column="37">==<pos:position pos:line="27" pos:column="39"/></operator> <name pos:line="27" pos:column="40">AF_INET6<pos:position pos:line="27" pos:column="48"/></name></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49">
		<block pos:line="28" pos:column="17">{	
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">dprintf<pos:position pos:line="29" pos:column="32"/></name> <argument_list pos:line="29" pos:column="33">(<argument><expr><literal type="string" pos:line="29" pos:column="34">"Sending ICMPv6 echo request to `%s'\n"<pos:position pos:line="29" pos:column="73"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="75">ptr<pos:position pos:line="29" pos:column="78"/></name><operator pos:line="29" pos:column="78">-&gt;<pos:position pos:line="29" pos:column="83"/></operator><name pos:line="29" pos:column="80">hostname<pos:position pos:line="29" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="90"/></expr_stmt>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><call><name pos:line="30" pos:column="29">ping_send_one_ipv6<pos:position pos:line="30" pos:column="47"/></name> <argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">obj<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">ptr<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call> <operator pos:line="30" pos:column="59">!=<pos:position pos:line="30" pos:column="61"/></operator> <literal type="number" pos:line="30" pos:column="62">0<pos:position pos:line="30" pos:column="63"/></literal></expr>)<pos:position pos:line="30" pos:column="64"/></condition><then pos:line="30" pos:column="64">
			<block pos:line="31" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">timerclear<pos:position pos:line="32" pos:column="43"/></name> <argument_list pos:line="32" pos:column="44">(<argument><expr><name><name pos:line="32" pos:column="45">ptr<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">timer<pos:position pos:line="32" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="33" pos:column="33">ret<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">--<pos:position pos:line="33" pos:column="38"/></operator></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>
				<continue pos:line="34" pos:column="33">continue;<pos:position pos:line="34" pos:column="42"/></continue>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then>
		<elseif pos:line="37" pos:column="17">else <if pos:line="37" pos:column="22">if <condition pos:line="37" pos:column="25">(<expr><name><name pos:line="37" pos:column="26">ptr<pos:position pos:line="37" pos:column="29"/></name><operator pos:line="37" pos:column="29">-&gt;<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="31">addrfamily<pos:position pos:line="37" pos:column="41"/></name></name> <operator pos:line="37" pos:column="42">==<pos:position pos:line="37" pos:column="44"/></operator> <name pos:line="37" pos:column="45">AF_INET<pos:position pos:line="37" pos:column="52"/></name></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53">
		<block pos:line="38" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">dprintf<pos:position pos:line="39" pos:column="32"/></name> <argument_list pos:line="39" pos:column="33">(<argument><expr><literal type="string" pos:line="39" pos:column="34">"Sending ICMPv4 echo request to `%s'\n"<pos:position pos:line="39" pos:column="73"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="75">ptr<pos:position pos:line="39" pos:column="78"/></name><operator pos:line="39" pos:column="78">-&gt;<pos:position pos:line="39" pos:column="83"/></operator><name pos:line="39" pos:column="80">hostname<pos:position pos:line="39" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="90"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><call><name pos:line="40" pos:column="29">ping_send_one_ipv4<pos:position pos:line="40" pos:column="47"/></name> <argument_list pos:line="40" pos:column="48">(<argument><expr><name pos:line="40" pos:column="49">obj<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">ptr<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></call> <operator pos:line="40" pos:column="59">!=<pos:position pos:line="40" pos:column="61"/></operator> <literal type="number" pos:line="40" pos:column="62">0<pos:position pos:line="40" pos:column="63"/></literal></expr>)<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64">
			<block pos:line="41" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">timerclear<pos:position pos:line="42" pos:column="43"/></name> <argument_list pos:line="42" pos:column="44">(<argument><expr><name><name pos:line="42" pos:column="45">ptr<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">-&gt;<pos:position pos:line="42" pos:column="53"/></operator><name pos:line="42" pos:column="50">timer<pos:position pos:line="42" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="43" pos:column="33">ret<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">--<pos:position pos:line="43" pos:column="38"/></operator></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
				<continue pos:line="44" pos:column="33">continue;<pos:position pos:line="44" pos:column="42"/></continue>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if></elseif>
		<else pos:line="47" pos:column="17">else <comment type="block" pos:line="47" pos:column="22">/* this should not happen */</comment>
		<block pos:line="48" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">dprintf<pos:position pos:line="49" pos:column="32"/></name> <argument_list pos:line="49" pos:column="33">(<argument><expr><literal type="string" pos:line="49" pos:column="34">"Unknown address family: %i\n"<pos:position pos:line="49" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="66">ptr<pos:position pos:line="49" pos:column="69"/></name><operator pos:line="49" pos:column="69">-&gt;<pos:position pos:line="49" pos:column="74"/></operator><name pos:line="49" pos:column="71">addrfamily<pos:position pos:line="49" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="83"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">timerclear<pos:position pos:line="50" pos:column="35"/></name> <argument_list pos:line="50" pos:column="36">(<argument><expr><name><name pos:line="50" pos:column="37">ptr<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">timer<pos:position pos:line="50" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">ret<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">--<pos:position pos:line="51" pos:column="30"/></operator></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
			<continue pos:line="52" pos:column="25">continue;<pos:position pos:line="52" pos:column="34"/></continue>
		}<pos:position pos:line="53" pos:column="18"/></block></else></if>

		<expr_stmt><expr><name><name pos:line="55" pos:column="17">ptr<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">sequence<pos:position pos:line="55" pos:column="30"/></name></name><operator pos:line="55" pos:column="30">++<pos:position pos:line="55" pos:column="32"/></operator></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></for>

	<return pos:line="58" pos:column="9">return <expr><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="17">ret<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">)<pos:position pos:line="58" pos:column="21"/></operator></expr>;<pos:position pos:line="58" pos:column="22"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
