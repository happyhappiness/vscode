<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_998_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_listval<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">lcc_connection_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">connection<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">lcc_identifier_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">ret_ident<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">NULL<pos:position pos:line="3" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">ret_ident_num<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">hostname<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name pos:line="6" pos:column="26">NULL<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">status<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">i<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">status<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">lcc_listval<pos:position pos:line="11" pos:column="29"/></name> <argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">connection<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="43">&amp;<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="44">ret_ident<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="55">&amp;<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="56">ret_ident_num<pos:position pos:line="11" pos:column="69"/></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">status<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">!=<pos:position pos:line="12" pos:column="22"/></operator> <literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">printf<pos:position pos:line="13" pos:column="23"/></name> <argument_list pos:line="13" pos:column="24">(<argument><expr><literal type="string" pos:line="13" pos:column="25">"UNKNOWN: %s\n"<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="42">lcc_strerror<pos:position pos:line="13" pos:column="54"/></name> <argument_list pos:line="13" pos:column="55">(<argument><expr><name pos:line="13" pos:column="56">connection<pos:position pos:line="13" pos:column="66"/></name></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">ret_ident<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">!=<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">NULL<pos:position pos:line="14" pos:column="38"/></name></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">free<pos:position pos:line="15" pos:column="29"/></name> <argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">ret_ident<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt></block></then></if>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">RET_UNKNOWN<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">)<pos:position pos:line="16" pos:column="37"/></operator></expr>;<pos:position pos:line="16" pos:column="38"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">lcc_sort_identifiers<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">connection<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">ret_ident<pos:position pos:line="19" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="63">ret_ident_num<pos:position pos:line="19" pos:column="76"/></name></expr></argument>)<pos:position pos:line="19" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="78"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">!=<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25"> <block pos:line="20" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">printf<pos:position pos:line="21" pos:column="23"/></name> <argument_list pos:line="21" pos:column="24">(<argument><expr><literal type="string" pos:line="21" pos:column="25">"UNKNOWN: %s\n"<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="42">lcc_strerror<pos:position pos:line="21" pos:column="54"/></name> <argument_list pos:line="21" pos:column="55">(<argument><expr><name pos:line="21" pos:column="56">connection<pos:position pos:line="21" pos:column="66"/></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">ret_ident<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">!=<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">NULL<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">free<pos:position pos:line="23" pos:column="29"/></name> <argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">ret_ident<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt></block></then></if>
		<return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">RET_UNKNOWN<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator></expr>;<pos:position pos:line="24" pos:column="38"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">ret_ident_num<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></condition> <incr><expr><operator pos:line="27" pos:column="40">++<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">i<pos:position pos:line="27" pos:column="43"/></name></expr></incr>)<pos:position pos:line="27" pos:column="44"/></control> <block pos:line="27" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name></type> <name><name pos:line="28" pos:column="22">id<pos:position pos:line="28" pos:column="24"/></name><index pos:line="28" pos:column="24">[<expr><literal type="number" pos:line="28" pos:column="25">1024<pos:position pos:line="28" pos:column="29"/></literal></expr>]<pos:position pos:line="28" pos:column="30"/></index></name></decl>;<pos:position pos:line="28" pos:column="31"/></decl_stmt>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">hostname_g<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">!=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">NULL<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator> <operator pos:line="30" pos:column="42">&amp;&amp;<pos:position pos:line="30" pos:column="52"/></operator> <operator pos:line="30" pos:column="45">(<pos:position pos:line="30" pos:column="46"/></operator><call><name pos:line="30" pos:column="46">strcasecmp<pos:position pos:line="30" pos:column="56"/></name> <argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">hostname_g<pos:position pos:line="30" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="70">ret_ident<pos:position pos:line="30" pos:column="79"/></name><index pos:line="30" pos:column="79">[<expr><name pos:line="30" pos:column="80">i<pos:position pos:line="30" pos:column="81"/></name></expr>]<pos:position pos:line="30" pos:column="82"/></index></name><operator pos:line="30" pos:column="82">.<pos:position pos:line="30" pos:column="83"/></operator><name pos:line="30" pos:column="83">host<pos:position pos:line="30" pos:column="87"/></name></expr></argument>)<pos:position pos:line="30" pos:column="88"/></argument_list></call><operator pos:line="30" pos:column="88">)<pos:position pos:line="30" pos:column="89"/></operator></expr>)<pos:position pos:line="30" pos:column="90"/></condition><then pos:line="30" pos:column="90">
			<block type="pseudo"><continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue></block></then></if>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">(<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">hostname<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">==<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">NULL<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator> <operator pos:line="33" pos:column="40">||<pos:position pos:line="33" pos:column="42"/></operator> <call><name pos:line="33" pos:column="43">strcasecmp<pos:position pos:line="33" pos:column="53"/></name> <argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">hostname<pos:position pos:line="33" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="65">ret_ident<pos:position pos:line="33" pos:column="74"/></name><index pos:line="33" pos:column="74">[<expr><name pos:line="33" pos:column="75">i<pos:position pos:line="33" pos:column="76"/></name></expr>]<pos:position pos:line="33" pos:column="77"/></index></name><operator pos:line="33" pos:column="77">.<pos:position pos:line="33" pos:column="78"/></operator><name pos:line="33" pos:column="78">host<pos:position pos:line="33" pos:column="82"/></name></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="84"/></condition><then pos:line="33" pos:column="84">
		<block pos:line="34" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">free<pos:position pos:line="35" pos:column="29"/></name> <argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">hostname<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">hostname<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">=<pos:position pos:line="36" pos:column="35"/></operator> <call><name pos:line="36" pos:column="36">strdup<pos:position pos:line="36" pos:column="42"/></name> <argument_list pos:line="36" pos:column="43">(<argument><expr><name><name pos:line="36" pos:column="44">ret_ident<pos:position pos:line="36" pos:column="53"/></name><index pos:line="36" pos:column="53">[<expr><name pos:line="36" pos:column="54">i<pos:position pos:line="36" pos:column="55"/></name></expr>]<pos:position pos:line="36" pos:column="56"/></index></name><operator pos:line="36" pos:column="56">.<pos:position pos:line="36" pos:column="57"/></operator><name pos:line="36" pos:column="57">host<pos:position pos:line="36" pos:column="61"/></name></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">printf<pos:position pos:line="37" pos:column="31"/></name> <argument_list pos:line="37" pos:column="32">(<argument><expr><literal type="string" pos:line="37" pos:column="33">"Host: %s\n"<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">hostname<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="40" pos:column="17">/* empty hostname; not to be printed again */</comment>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">ret_ident<pos:position pos:line="41" pos:column="26"/></name><index pos:line="41" pos:column="26">[<expr><name pos:line="41" pos:column="27">i<pos:position pos:line="41" pos:column="28"/></name></expr>]<pos:position pos:line="41" pos:column="29"/></index></name><operator pos:line="41" pos:column="29">.<pos:position pos:line="41" pos:column="30"/></operator><name><name pos:line="41" pos:column="30">host<pos:position pos:line="41" pos:column="34"/></name><index pos:line="41" pos:column="34">[<expr><literal type="number" pos:line="41" pos:column="35">0<pos:position pos:line="41" pos:column="36"/></literal></expr>]<pos:position pos:line="41" pos:column="37"/></index></name> <operator pos:line="41" pos:column="38">=<pos:position pos:line="41" pos:column="39"/></operator> <literal type="char" pos:line="41" pos:column="40">'\0'<pos:position pos:line="41" pos:column="44"/></literal></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">status<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">=<pos:position pos:line="43" pos:column="25"/></operator> <call><name pos:line="43" pos:column="26">lcc_identifier_to_string<pos:position pos:line="43" pos:column="50"/></name> <argument_list pos:line="43" pos:column="51">(<argument><expr><name pos:line="43" pos:column="52">connection<pos:position pos:line="43" pos:column="62"/></name></expr></argument>,
				<argument><expr><name pos:line="44" pos:column="33">id<pos:position pos:line="44" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="37">sizeof <argument_list pos:line="44" pos:column="44">(<argument><expr><name pos:line="44" pos:column="45">id<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">ret_ident<pos:position pos:line="44" pos:column="59"/></name> <operator pos:line="44" pos:column="60">+<pos:position pos:line="44" pos:column="61"/></operator> <name pos:line="44" pos:column="62">i<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">status<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">!=<pos:position pos:line="45" pos:column="30"/></operator> <literal type="number" pos:line="45" pos:column="31">0<pos:position pos:line="45" pos:column="32"/></literal></expr>)<pos:position pos:line="45" pos:column="33"/></condition><then pos:line="45" pos:column="33"> <block pos:line="45" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">printf<pos:position pos:line="46" pos:column="31"/></name> <argument_list pos:line="46" pos:column="32">(<argument><expr><literal type="string" pos:line="46" pos:column="33">"ERROR: listval: Failed to convert returned "<pos:position pos:line="46" pos:column="78"/></literal>
					<literal type="string" pos:line="47" pos:column="41">"identifier to a string: %s\n"<pos:position pos:line="47" pos:column="71"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="48" pos:column="41">lcc_strerror<pos:position pos:line="48" pos:column="53"/></name> <argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">connection<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">free<pos:position pos:line="49" pos:column="29"/></name> <argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">hostname<pos:position pos:line="49" pos:column="39"/></name></expr></argument>)<pos:position pos:line="49" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">hostname<pos:position pos:line="50" pos:column="33"/></name> <operator pos:line="50" pos:column="34">=<pos:position pos:line="50" pos:column="35"/></operator> <name pos:line="50" pos:column="36">NULL<pos:position pos:line="50" pos:column="40"/></name></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
			<continue pos:line="51" pos:column="25">continue;<pos:position pos:line="51" pos:column="34"/></continue>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="54" pos:column="17">/* skip over the (empty) hostname and following '/' */</comment>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">printf<pos:position pos:line="55" pos:column="23"/></name> <argument_list pos:line="55" pos:column="24">(<argument><expr><literal type="string" pos:line="55" pos:column="25">"\t%s\n"<pos:position pos:line="55" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">id<pos:position pos:line="55" pos:column="37"/></name> <operator pos:line="55" pos:column="38">+<pos:position pos:line="55" pos:column="39"/></operator> <literal type="number" pos:line="55" pos:column="40">1<pos:position pos:line="55" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">free<pos:position pos:line="58" pos:column="13"/></name> <argument_list pos:line="58" pos:column="14">(<argument><expr><name pos:line="58" pos:column="15">ret_ident<pos:position pos:line="58" pos:column="24"/></name></expr></argument>)<pos:position pos:line="58" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">free<pos:position pos:line="59" pos:column="13"/></name> <argument_list pos:line="59" pos:column="14">(<argument><expr><name pos:line="59" pos:column="15">hostname<pos:position pos:line="59" pos:column="23"/></name></expr></argument>)<pos:position pos:line="59" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt>
	<return pos:line="60" pos:column="9">return <expr><operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">RET_OKAY<pos:position pos:line="60" pos:column="25"/></name><operator pos:line="60" pos:column="25">)<pos:position pos:line="60" pos:column="26"/></operator></expr>;<pos:position pos:line="60" pos:column="27"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
