<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1756_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_keys<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buffer<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">size_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">buffer_size<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">key_str<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list> <block pos:line="1" pos:column="78">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">tmp<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><literal type="number" pos:line="2" pos:column="12">2<pos:position pos:line="2" pos:column="13"/></literal> <operator pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></operator> <name pos:line="2" pos:column="16">buffer_size<pos:position pos:line="2" pos:column="27"/></name></expr>]<pos:position pos:line="2" pos:column="28"/></index></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">buffer<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">==<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">NULL<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">||<pos:position pos:line="4" pos:column="24"/></operator> <name pos:line="4" pos:column="25">buffer_size<pos:position pos:line="4" pos:column="36"/></name> <operator pos:line="4" pos:column="37">==<pos:position pos:line="4" pos:column="39"/></operator> <literal type="number" pos:line="4" pos:column="40">0<pos:position pos:line="4" pos:column="41"/></literal> <operator pos:line="4" pos:column="42">||<pos:position pos:line="4" pos:column="44"/></operator> <name pos:line="4" pos:column="45">key_str<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">==<pos:position pos:line="4" pos:column="55"/></operator> <name pos:line="4" pos:column="56">NULL<pos:position pos:line="4" pos:column="60"/></name> <operator pos:line="4" pos:column="61">||<pos:position pos:line="4" pos:column="63"/></operator>
      <call><name pos:line="5" pos:column="7">strlen<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">(<argument><expr><name pos:line="5" pos:column="14">key_str<pos:position pos:line="5" pos:column="21"/></name></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call> <operator pos:line="5" pos:column="23">==<pos:position pos:line="5" pos:column="25"/></operator> <literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">EINVAL<pos:position pos:line="6" pos:column="18"/></name></expr>;<pos:position pos:line="6" pos:column="19"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><call><name pos:line="8" pos:column="8">count_parts<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">key_str<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call> <operator pos:line="8" pos:column="29">&gt;<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="31">2<pos:position pos:line="8" pos:column="32"/></literal><operator pos:line="8" pos:column="32">)<pos:position pos:line="8" pos:column="33"/></operator> <operator pos:line="8" pos:column="34">&amp;&amp;<pos:position pos:line="8" pos:column="44"/></operator> <call><name pos:line="8" pos:column="37">has_suffix<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">key_str<pos:position pos:line="8" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="57">".type"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="66"/></condition><then pos:line="8" pos:column="66"> <block pos:line="8" pos:column="67">{
    <comment type="block" pos:line="9" pos:column="5">/* strip ".type" suffix iff the key has more than two parts. */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">sz<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><call><name pos:line="10" pos:column="17">strlen<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">key_str<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call> <operator pos:line="10" pos:column="33">-<pos:position pos:line="10" pos:column="34"/></operator> <call><name pos:line="10" pos:column="35">strlen<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><literal type="string" pos:line="10" pos:column="42">".type"<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call> <operator pos:line="10" pos:column="51">+<pos:position pos:line="10" pos:column="52"/></operator> <literal type="number" pos:line="10" pos:column="53">1<pos:position pos:line="10" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="55"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">sz<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">&gt;<pos:position pos:line="12" pos:column="16"/></operator> <sizeof pos:line="12" pos:column="14">sizeof<argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">tmp<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></sizeof></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="7">sz<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <sizeof pos:line="13" pos:column="12">sizeof<argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">tmp<pos:position pos:line="13" pos:column="22"/></name></expr></argument>)<pos:position pos:line="13" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">sstrncpy<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">tmp<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="19">key_str<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">sz<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then> <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">sstrncpy<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">tmp<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="19">key_str<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="28">sizeof<argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">tmp<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></else></if>

  <return pos:line="19" pos:column="3">return <expr><call><name pos:line="19" pos:column="10">compact_ds_name<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">buffer<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">buffer_size<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">tmp<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
