<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_36_collectd-4.8.0.cpp" pos:tabs="8"><function_decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name><name pos:line="1" pos:column="14">struct<pos:position pos:line="1" pos:column="20"/></name> <name pos:line="1" pos:column="21">mach_header<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type>
<name pos:line="2" pos:column="1">lt_int_dyld_get_mach_header_from_nsmodule<pos:position pos:line="2" pos:column="42"/></name><parameter_list pos:line="2" pos:column="42">(<parameter><decl><type><name pos:line="2" pos:column="43">module<pos:position pos:line="2" pos:column="49"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">NSModule<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">module<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
<block pos:line="4" pos:column="1">{
<comment type="block" pos:line="5" pos:column="1">/* There should probably be an apple dyld api for this */</comment>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name><init pos:line="6" pos:column="14">=<expr><call><name pos:line="6" pos:column="15">_dyld_image_count<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">()<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">j<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">modname<pos:position pos:line="8" pos:column="28"/></name><init pos:line="8" pos:column="28">=<expr><call><name pos:line="8" pos:column="29">NSNameOfModule<pos:position pos:line="8" pos:column="43"/></name><argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">module<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">struct<pos:position pos:line="9" pos:column="21"/></name> <name pos:line="9" pos:column="22">mach_header<pos:position pos:line="9" pos:column="33"/></name></name> <modifier pos:line="9" pos:column="34">*<pos:position pos:line="9" pos:column="35"/></modifier></type><name pos:line="9" pos:column="35">mh<pos:position pos:line="9" pos:column="37"/></name><init pos:line="9" pos:column="37">=<expr><name pos:line="9" pos:column="38">NULL<pos:position pos:line="9" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">modname<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block type="pseudo"><return pos:line="10" pos:column="23">return <expr><name pos:line="10" pos:column="30">NULL<pos:position pos:line="10" pos:column="34"/></name></expr>;<pos:position pos:line="10" pos:column="35"/></return></block></then></if>
	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><expr><name pos:line="11" pos:column="14">j<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>;<pos:position pos:line="11" pos:column="20"/></init> <condition><expr><name pos:line="11" pos:column="21">j<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&lt;<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="25">i<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></condition> <incr><expr><name pos:line="11" pos:column="28">j<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">++<pos:position pos:line="11" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="32"/></control>
	<block pos:line="12" pos:column="9">{
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><call><name pos:line="13" pos:column="22">strcmp<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><call><name pos:line="13" pos:column="29">_dyld_get_image_name<pos:position pos:line="13" pos:column="49"/></name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">j<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="13" pos:column="53">modname<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="62"/></condition><then pos:line="13" pos:column="62">
		<block pos:line="14" pos:column="17">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">mh<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator><call><name pos:line="15" pos:column="28">_dyld_get_image_header<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><name pos:line="15" pos:column="51">j<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
			<break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">mh<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function_decl></unit>
