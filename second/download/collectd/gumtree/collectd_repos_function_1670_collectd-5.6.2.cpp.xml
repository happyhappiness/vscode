<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1670_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_handle_event<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cconn<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">io<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <block pos:line="1" pos:column="49">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">ret<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>
  <switch pos:line="3" pos:column="3">switch <condition pos:line="3" pos:column="10">(<expr><name><name pos:line="3" pos:column="11">io<pos:position pos:line="3" pos:column="13"/></name><operator pos:line="3" pos:column="13">-&gt;<pos:position pos:line="3" pos:column="18"/></operator><name pos:line="3" pos:column="15">state<pos:position pos:line="3" pos:column="20"/></name></name></expr>)<pos:position pos:line="3" pos:column="21"/></condition> <block pos:line="3" pos:column="22">{
  <case pos:line="4" pos:column="3">case <expr><name pos:line="4" pos:column="8">CSTATE_UNCONNECTED<pos:position pos:line="4" pos:column="26"/></name></expr>:<pos:position pos:line="4" pos:column="27"/></case>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">ERROR<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><literal type="string" pos:line="5" pos:column="11">"ceph plugin: cconn_handle_event(name=%s) got to illegal "<pos:position pos:line="5" pos:column="69"/></literal>
          <literal type="string" pos:line="6" pos:column="11">"state on line %d"<pos:position pos:line="6" pos:column="29"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="7" pos:column="11">io<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">d<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">name<pos:position pos:line="7" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="24">__LINE__<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">EDOM<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></return>
  <case pos:line="10" pos:column="3">case <expr><name pos:line="10" pos:column="8">CSTATE_WRITE_REQUEST<pos:position pos:line="10" pos:column="28"/></name></expr>:<pos:position pos:line="10" pos:column="29"/></case> <block pos:line="10" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">cmd<pos:position pos:line="11" pos:column="13"/></name><index pos:line="11" pos:column="13">[<expr><literal type="number" pos:line="11" pos:column="14">32<pos:position pos:line="11" pos:column="16"/></literal></expr>]<pos:position pos:line="11" pos:column="17"/></index></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">snprintf<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">cmd<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="19">sizeof<argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">cmd<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"%s%d%s"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="42">"{ \"prefix\": \""<pos:position pos:line="12" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="62">io<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">-&gt;<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="66">request_type<pos:position pos:line="12" pos:column="78"/></name></name></expr></argument>,
             <argument><expr><literal type="string" pos:line="13" pos:column="14">"\" }\n"<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">size_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">cmd_len<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><call><name pos:line="14" pos:column="22">strlen<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">cmd<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(
        <argument><expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="14">write<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name><name pos:line="16" pos:column="20">io<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">-&gt;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="24">asok<pos:position pos:line="16" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="30">(<pos:position pos:line="16" pos:column="31"/></operator><operator pos:line="16" pos:column="31">(<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">char<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">*<pos:position pos:line="16" pos:column="38"/></operator><operator pos:line="16" pos:column="38">)<pos:position pos:line="16" pos:column="39"/></operator><operator pos:line="16" pos:column="39">&amp;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="40">cmd<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator> <operator pos:line="16" pos:column="45">+<pos:position pos:line="16" pos:column="46"/></operator> <name><name pos:line="16" pos:column="47">io<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">amt<pos:position pos:line="16" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="56">cmd_len<pos:position pos:line="16" pos:column="63"/></name> <operator pos:line="16" pos:column="64">-<pos:position pos:line="16" pos:column="65"/></operator> <name><name pos:line="16" pos:column="66">io<pos:position pos:line="16" pos:column="68"/></name><operator pos:line="16" pos:column="68">-&gt;<pos:position pos:line="16" pos:column="73"/></operator><name pos:line="16" pos:column="70">amt<pos:position pos:line="16" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">DEBUG<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"ceph plugin: cconn_handle_event(name=%s,state=%d,amt=%d,ret=%d)"<pos:position pos:line="17" pos:column="76"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="18" pos:column="11">io<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">d<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">name<pos:position pos:line="18" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="24">io<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">state<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="35">io<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">amt<pos:position pos:line="18" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">ret<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">ret<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">&lt;<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="15">0<pos:position pos:line="19" pos:column="16"/></literal></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17"> <block pos:line="19" pos:column="18">{
      <return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">ret<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">io<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">-&gt;<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="9">amt<pos:position pos:line="22" pos:column="12"/></name></name> <operator pos:line="22" pos:column="13">+=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">ret<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">io<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">amt<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">&gt;=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="20">cmd_len<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">io<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">amt<pos:position pos:line="24" pos:column="14"/></name></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
      <switch pos:line="25" pos:column="7">switch <condition pos:line="25" pos:column="14">(<expr><name><name pos:line="25" pos:column="15">io<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">request_type<pos:position pos:line="25" pos:column="31"/></name></name></expr>)<pos:position pos:line="25" pos:column="32"/></condition> <block pos:line="25" pos:column="33">{
      <case pos:line="26" pos:column="7">case <expr><name pos:line="26" pos:column="12">ASOK_REQ_VERSION<pos:position pos:line="26" pos:column="28"/></name></expr>:<pos:position pos:line="26" pos:column="29"/></case>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">io<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">state<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">CSTATE_READ_VERSION<pos:position pos:line="27" pos:column="40"/></name></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>
      <default pos:line="29" pos:column="7">default:<pos:position pos:line="29" pos:column="15"/></default>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">io<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">state<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">CSTATE_READ_AMT<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
        <break pos:line="31" pos:column="9">break;<pos:position pos:line="31" pos:column="15"/></break>
      }<pos:position pos:line="32" pos:column="8"/></block></switch>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <return pos:line="34" pos:column="5">return <expr><literal type="number" pos:line="34" pos:column="12">0<pos:position pos:line="34" pos:column="13"/></literal></expr>;<pos:position pos:line="34" pos:column="14"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block>
  <case pos:line="36" pos:column="3">case <expr><name pos:line="36" pos:column="8">CSTATE_READ_VERSION<pos:position pos:line="36" pos:column="27"/></name></expr>:<pos:position pos:line="36" pos:column="28"/></case> <block pos:line="36" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">ret<pos:position pos:line="37" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="25">read<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name><name pos:line="37" pos:column="30">io<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">asok<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="40">(<pos:position pos:line="37" pos:column="41"/></operator><operator pos:line="37" pos:column="41">(<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">char<pos:position pos:line="37" pos:column="46"/></name> <operator pos:line="37" pos:column="47">*<pos:position pos:line="37" pos:column="48"/></operator><operator pos:line="37" pos:column="48">)<pos:position pos:line="37" pos:column="49"/></operator><operator pos:line="37" pos:column="49">(<pos:position pos:line="37" pos:column="50"/></operator><operator pos:line="37" pos:column="50">&amp;<pos:position pos:line="37" pos:column="55"/></operator><name><name pos:line="37" pos:column="51">io<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">-&gt;<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="55">d<pos:position pos:line="37" pos:column="56"/></name><operator pos:line="37" pos:column="56">-&gt;<pos:position pos:line="37" pos:column="61"/></operator><name pos:line="37" pos:column="58">version<pos:position pos:line="37" pos:column="65"/></name></name><operator pos:line="37" pos:column="65">)<pos:position pos:line="37" pos:column="66"/></operator><operator pos:line="37" pos:column="66">)<pos:position pos:line="37" pos:column="67"/></operator> <operator pos:line="37" pos:column="68">+<pos:position pos:line="37" pos:column="69"/></operator> <name><name pos:line="37" pos:column="70">io<pos:position pos:line="37" pos:column="72"/></name><operator pos:line="37" pos:column="72">-&gt;<pos:position pos:line="37" pos:column="77"/></operator><name pos:line="37" pos:column="74">amt<pos:position pos:line="37" pos:column="77"/></name></name></expr></argument>,
                             <argument><expr><sizeof pos:line="38" pos:column="30">sizeof<argument_list pos:line="38" pos:column="36">(<argument><expr><name><name pos:line="38" pos:column="37">io<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">d<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">version<pos:position pos:line="38" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></sizeof> <operator pos:line="38" pos:column="53">-<pos:position pos:line="38" pos:column="54"/></operator> <name><name pos:line="38" pos:column="55">io<pos:position pos:line="38" pos:column="57"/></name><operator pos:line="38" pos:column="57">-&gt;<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="59">amt<pos:position pos:line="38" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">DEBUG<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><literal type="string" pos:line="39" pos:column="11">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="39" pos:column="69"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="40" pos:column="11">io<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">d<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">name<pos:position pos:line="40" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="24">io<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">-&gt;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="28">state<pos:position pos:line="40" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">ret<pos:position pos:line="40" pos:column="38"/></name></expr></argument>)<pos:position pos:line="40" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">ret<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">&lt;<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="15">0<pos:position pos:line="41" pos:column="16"/></literal></expr>)<pos:position pos:line="41" pos:column="17"/></condition><then pos:line="41" pos:column="17"> <block pos:line="41" pos:column="18">{
      <return pos:line="42" pos:column="7">return <expr><name pos:line="42" pos:column="14">ret<pos:position pos:line="42" pos:column="17"/></name></expr>;<pos:position pos:line="42" pos:column="18"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">io<pos:position pos:line="44" pos:column="7"/></name><operator pos:line="44" pos:column="7">-&gt;<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="9">amt<pos:position pos:line="44" pos:column="12"/></name></name> <operator pos:line="44" pos:column="13">+=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">ret<pos:position pos:line="44" pos:column="19"/></name></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">io<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">-&gt;<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="13">amt<pos:position pos:line="45" pos:column="16"/></name></name> <operator pos:line="45" pos:column="17">&gt;=<pos:position pos:line="45" pos:column="22"/></operator> <sizeof pos:line="45" pos:column="20">sizeof<argument_list pos:line="45" pos:column="26">(<argument><expr><name><name pos:line="45" pos:column="27">io<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">d<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">-&gt;<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="34">version<pos:position pos:line="45" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></sizeof></expr>)<pos:position pos:line="45" pos:column="43"/></condition><then pos:line="45" pos:column="43"> <block pos:line="45" pos:column="44">{
      <expr_stmt><expr><name><name pos:line="46" pos:column="7">io<pos:position pos:line="46" pos:column="9"/></name><operator pos:line="46" pos:column="9">-&gt;<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="11">d<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">version<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <call><name pos:line="46" pos:column="24">ntohl<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name><name pos:line="46" pos:column="30">io<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">-&gt;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="34">d<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">version<pos:position pos:line="46" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
      <if pos:line="47" pos:column="7">if <condition pos:line="47" pos:column="10">(<expr><name><name pos:line="47" pos:column="11">io<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">d<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">version<pos:position pos:line="47" pos:column="25"/></name></name> <operator pos:line="47" pos:column="26">!=<pos:position pos:line="47" pos:column="28"/></operator> <literal type="number" pos:line="47" pos:column="29">1<pos:position pos:line="47" pos:column="30"/></literal></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31"> <block pos:line="47" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">ERROR<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><literal type="string" pos:line="48" pos:column="15">"ceph plugin: cconn_handle_event(name=%s) not "<pos:position pos:line="48" pos:column="62"/></literal>
              <literal type="string" pos:line="49" pos:column="15">"expecting version %d!"<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="50" pos:column="15">io<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">d<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">name<pos:position pos:line="50" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="28">io<pos:position pos:line="50" pos:column="30"/></name><operator pos:line="50" pos:column="30">-&gt;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="32">d<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">-&gt;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="35">version<pos:position pos:line="50" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
        <return pos:line="51" pos:column="9">return <expr><operator pos:line="51" pos:column="16">-<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">ENOTSUP<pos:position pos:line="51" pos:column="24"/></name></expr>;<pos:position pos:line="51" pos:column="25"/></return>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">DEBUG<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><literal type="string" pos:line="53" pos:column="13">"ceph plugin: cconn_handle_event(name=%s): identified as "<pos:position pos:line="53" pos:column="71"/></literal>
            <literal type="string" pos:line="54" pos:column="13">"version %d"<pos:position pos:line="54" pos:column="25"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="55" pos:column="13">io<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">-&gt;<pos:position pos:line="55" pos:column="20"/></operator><name pos:line="55" pos:column="17">d<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">-&gt;<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="20">name<pos:position pos:line="55" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="26">io<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">d<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">version<pos:position pos:line="55" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="56" pos:column="7">io<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">-&gt;<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="11">amt<pos:position pos:line="56" pos:column="14"/></name></name> <operator pos:line="56" pos:column="15">=<pos:position pos:line="56" pos:column="16"/></operator> <literal type="number" pos:line="56" pos:column="17">0<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">cconn_close<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">io<pos:position pos:line="57" pos:column="21"/></name></expr></argument>)<pos:position pos:line="57" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="58" pos:column="7">io<pos:position pos:line="58" pos:column="9"/></name><operator pos:line="58" pos:column="9">-&gt;<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="11">request_type<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="26">ASOK_REQ_SCHEMA<pos:position pos:line="58" pos:column="41"/></name></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
    <return pos:line="60" pos:column="5">return <expr><literal type="number" pos:line="60" pos:column="12">0<pos:position pos:line="60" pos:column="13"/></literal></expr>;<pos:position pos:line="60" pos:column="14"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block>
  <case pos:line="62" pos:column="3">case <expr><name pos:line="62" pos:column="8">CSTATE_READ_AMT<pos:position pos:line="62" pos:column="23"/></name></expr>:<pos:position pos:line="62" pos:column="24"/></case> <block pos:line="62" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">ret<pos:position pos:line="63" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="25">read<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name><name pos:line="63" pos:column="30">io<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">-&gt;<pos:position pos:line="63" pos:column="37"/></operator><name pos:line="63" pos:column="34">asok<pos:position pos:line="63" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="40">(<pos:position pos:line="63" pos:column="41"/></operator><operator pos:line="63" pos:column="41">(<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="42">char<pos:position pos:line="63" pos:column="46"/></name> <operator pos:line="63" pos:column="47">*<pos:position pos:line="63" pos:column="48"/></operator><operator pos:line="63" pos:column="48">)<pos:position pos:line="63" pos:column="49"/></operator><operator pos:line="63" pos:column="49">(<pos:position pos:line="63" pos:column="50"/></operator><operator pos:line="63" pos:column="50">&amp;<pos:position pos:line="63" pos:column="55"/></operator><name><name pos:line="63" pos:column="51">io<pos:position pos:line="63" pos:column="53"/></name><operator pos:line="63" pos:column="53">-&gt;<pos:position pos:line="63" pos:column="58"/></operator><name pos:line="63" pos:column="55">json_len<pos:position pos:line="63" pos:column="63"/></name></name><operator pos:line="63" pos:column="63">)<pos:position pos:line="63" pos:column="64"/></operator><operator pos:line="63" pos:column="64">)<pos:position pos:line="63" pos:column="65"/></operator> <operator pos:line="63" pos:column="66">+<pos:position pos:line="63" pos:column="67"/></operator> <name><name pos:line="63" pos:column="68">io<pos:position pos:line="63" pos:column="70"/></name><operator pos:line="63" pos:column="70">-&gt;<pos:position pos:line="63" pos:column="75"/></operator><name pos:line="63" pos:column="72">amt<pos:position pos:line="63" pos:column="75"/></name></name></expr></argument>,
                             <argument><expr><sizeof pos:line="64" pos:column="30">sizeof<argument_list pos:line="64" pos:column="36">(<argument><expr><name><name pos:line="64" pos:column="37">io<pos:position pos:line="64" pos:column="39"/></name><operator pos:line="64" pos:column="39">-&gt;<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="41">json_len<pos:position pos:line="64" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></sizeof> <operator pos:line="64" pos:column="51">-<pos:position pos:line="64" pos:column="52"/></operator> <name><name pos:line="64" pos:column="53">io<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">-&gt;<pos:position pos:line="64" pos:column="60"/></operator><name pos:line="64" pos:column="57">amt<pos:position pos:line="64" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">DEBUG<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><literal type="string" pos:line="65" pos:column="11">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="65" pos:column="69"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="66" pos:column="11">io<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">-&gt;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="15">d<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">-&gt;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="18">name<pos:position pos:line="66" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="24">io<pos:position pos:line="66" pos:column="26"/></name><operator pos:line="66" pos:column="26">-&gt;<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="28">state<pos:position pos:line="66" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="35">ret<pos:position pos:line="66" pos:column="38"/></name></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">ret<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">&lt;<pos:position pos:line="67" pos:column="17"/></operator> <literal type="number" pos:line="67" pos:column="15">0<pos:position pos:line="67" pos:column="16"/></literal></expr>)<pos:position pos:line="67" pos:column="17"/></condition><then pos:line="67" pos:column="17"> <block pos:line="67" pos:column="18">{
      <return pos:line="68" pos:column="7">return <expr><name pos:line="68" pos:column="14">ret<pos:position pos:line="68" pos:column="17"/></name></expr>;<pos:position pos:line="68" pos:column="18"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">io<pos:position pos:line="70" pos:column="7"/></name><operator pos:line="70" pos:column="7">-&gt;<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="9">amt<pos:position pos:line="70" pos:column="12"/></name></name> <operator pos:line="70" pos:column="13">+=<pos:position pos:line="70" pos:column="15"/></operator> <name pos:line="70" pos:column="16">ret<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">io<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">amt<pos:position pos:line="71" pos:column="16"/></name></name> <operator pos:line="71" pos:column="17">&gt;=<pos:position pos:line="71" pos:column="22"/></operator> <sizeof pos:line="71" pos:column="20">sizeof<argument_list pos:line="71" pos:column="26">(<argument><expr><name><name pos:line="71" pos:column="27">io<pos:position pos:line="71" pos:column="29"/></name><operator pos:line="71" pos:column="29">-&gt;<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="31">json_len<pos:position pos:line="71" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></sizeof></expr>)<pos:position pos:line="71" pos:column="41"/></condition><then pos:line="71" pos:column="41"> <block pos:line="71" pos:column="42">{
      <expr_stmt><expr><name><name pos:line="72" pos:column="7">io<pos:position pos:line="72" pos:column="9"/></name><operator pos:line="72" pos:column="9">-&gt;<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="11">json_len<pos:position pos:line="72" pos:column="19"/></name></name> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <call><name pos:line="72" pos:column="22">ntohl<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><name><name pos:line="72" pos:column="28">io<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">-&gt;<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="32">json_len<pos:position pos:line="72" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">io<pos:position pos:line="73" pos:column="9"/></name><operator pos:line="73" pos:column="9">-&gt;<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="11">amt<pos:position pos:line="73" pos:column="14"/></name></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <literal type="number" pos:line="73" pos:column="17">0<pos:position pos:line="73" pos:column="18"/></literal></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="74" pos:column="7">io<pos:position pos:line="74" pos:column="9"/></name><operator pos:line="74" pos:column="9">-&gt;<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="11">state<pos:position pos:line="74" pos:column="16"/></name></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">CSTATE_READ_JSON<pos:position pos:line="74" pos:column="35"/></name></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="75" pos:column="7">io<pos:position pos:line="75" pos:column="9"/></name><operator pos:line="75" pos:column="9">-&gt;<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="11">json<pos:position pos:line="75" pos:column="15"/></name></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <call><name pos:line="75" pos:column="18">calloc<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">(<argument><expr><literal type="number" pos:line="75" pos:column="25">1<pos:position pos:line="75" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="28">io<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">-&gt;<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="32">json_len<pos:position pos:line="75" pos:column="40"/></name></name> <operator pos:line="75" pos:column="41">+<pos:position pos:line="75" pos:column="42"/></operator> <literal type="number" pos:line="75" pos:column="43">1<pos:position pos:line="75" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt>
      <if pos:line="76" pos:column="7">if <condition pos:line="76" pos:column="10">(<expr><operator pos:line="76" pos:column="11">!<pos:position pos:line="76" pos:column="12"/></operator><name><name pos:line="76" pos:column="12">io<pos:position pos:line="76" pos:column="14"/></name><operator pos:line="76" pos:column="14">-&gt;<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="16">json<pos:position pos:line="76" pos:column="20"/></name></name></expr>)<pos:position pos:line="76" pos:column="21"/></condition><then pos:line="76" pos:column="21"> <block pos:line="76" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">ERROR<pos:position pos:line="77" pos:column="14"/></name><argument_list pos:line="77" pos:column="14">(<argument><expr><literal type="string" pos:line="77" pos:column="15">"ceph plugin: error callocing io-&gt;json"<pos:position pos:line="77" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="56"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><operator pos:line="78" pos:column="16">-<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="17">ENOMEM<pos:position pos:line="78" pos:column="23"/></name></expr>;<pos:position pos:line="78" pos:column="24"/></return>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
    <return pos:line="81" pos:column="5">return <expr><literal type="number" pos:line="81" pos:column="12">0<pos:position pos:line="81" pos:column="13"/></literal></expr>;<pos:position pos:line="81" pos:column="14"/></return>
  }<pos:position pos:line="82" pos:column="4"/></block>
  <case pos:line="83" pos:column="3">case <expr><name pos:line="83" pos:column="8">CSTATE_READ_JSON<pos:position pos:line="83" pos:column="24"/></name></expr>:<pos:position pos:line="83" pos:column="25"/></case> <block pos:line="83" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">ret<pos:position pos:line="84" pos:column="23"/></name></expr></argument>,
                   <argument><expr><call><name pos:line="85" pos:column="20">read<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><name><name pos:line="85" pos:column="25">io<pos:position pos:line="85" pos:column="27"/></name><operator pos:line="85" pos:column="27">-&gt;<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="29">asok<pos:position pos:line="85" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="35">io<pos:position pos:line="85" pos:column="37"/></name><operator pos:line="85" pos:column="37">-&gt;<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="39">json<pos:position pos:line="85" pos:column="43"/></name></name> <operator pos:line="85" pos:column="44">+<pos:position pos:line="85" pos:column="45"/></operator> <name><name pos:line="85" pos:column="46">io<pos:position pos:line="85" pos:column="48"/></name><operator pos:line="85" pos:column="48">-&gt;<pos:position pos:line="85" pos:column="53"/></operator><name pos:line="85" pos:column="50">amt<pos:position pos:line="85" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="55">io<pos:position pos:line="85" pos:column="57"/></name><operator pos:line="85" pos:column="57">-&gt;<pos:position pos:line="85" pos:column="62"/></operator><name pos:line="85" pos:column="59">json_len<pos:position pos:line="85" pos:column="67"/></name></name> <operator pos:line="85" pos:column="68">-<pos:position pos:line="85" pos:column="69"/></operator> <name><name pos:line="85" pos:column="70">io<pos:position pos:line="85" pos:column="72"/></name><operator pos:line="85" pos:column="72">-&gt;<pos:position pos:line="85" pos:column="77"/></operator><name pos:line="85" pos:column="74">amt<pos:position pos:line="85" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">DEBUG<pos:position pos:line="86" pos:column="10"/></name><argument_list pos:line="86" pos:column="10">(<argument><expr><literal type="string" pos:line="86" pos:column="11">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="86" pos:column="69"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="87" pos:column="11">io<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">-&gt;<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="15">d<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">-&gt;<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="18">name<pos:position pos:line="87" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="24">io<pos:position pos:line="87" pos:column="26"/></name><operator pos:line="87" pos:column="26">-&gt;<pos:position pos:line="87" pos:column="31"/></operator><name pos:line="87" pos:column="28">state<pos:position pos:line="87" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="35">ret<pos:position pos:line="87" pos:column="38"/></name></expr></argument>)<pos:position pos:line="87" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">ret<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">&lt;<pos:position pos:line="88" pos:column="17"/></operator> <literal type="number" pos:line="88" pos:column="15">0<pos:position pos:line="88" pos:column="16"/></literal></expr>)<pos:position pos:line="88" pos:column="17"/></condition><then pos:line="88" pos:column="17"> <block pos:line="88" pos:column="18">{
      <return pos:line="89" pos:column="7">return <expr><name pos:line="89" pos:column="14">ret<pos:position pos:line="89" pos:column="17"/></name></expr>;<pos:position pos:line="89" pos:column="18"/></return>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">io<pos:position pos:line="91" pos:column="7"/></name><operator pos:line="91" pos:column="7">-&gt;<pos:position pos:line="91" pos:column="12"/></operator><name pos:line="91" pos:column="9">amt<pos:position pos:line="91" pos:column="12"/></name></name> <operator pos:line="91" pos:column="13">+=<pos:position pos:line="91" pos:column="15"/></operator> <name pos:line="91" pos:column="16">ret<pos:position pos:line="91" pos:column="19"/></name></expr>;<pos:position pos:line="91" pos:column="20"/></expr_stmt>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name><name pos:line="92" pos:column="9">io<pos:position pos:line="92" pos:column="11"/></name><operator pos:line="92" pos:column="11">-&gt;<pos:position pos:line="92" pos:column="16"/></operator><name pos:line="92" pos:column="13">amt<pos:position pos:line="92" pos:column="16"/></name></name> <operator pos:line="92" pos:column="17">&gt;=<pos:position pos:line="92" pos:column="22"/></operator> <name><name pos:line="92" pos:column="20">io<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">json_len<pos:position pos:line="92" pos:column="32"/></name></name></expr>)<pos:position pos:line="92" pos:column="33"/></condition><then pos:line="92" pos:column="33"> <block pos:line="92" pos:column="34">{
      <expr_stmt><expr><name pos:line="93" pos:column="7">ret<pos:position pos:line="93" pos:column="10"/></name> <operator pos:line="93" pos:column="11">=<pos:position pos:line="93" pos:column="12"/></operator> <call><name pos:line="93" pos:column="13">cconn_process_json<pos:position pos:line="93" pos:column="31"/></name><argument_list pos:line="93" pos:column="31">(<argument><expr><name pos:line="93" pos:column="32">io<pos:position pos:line="93" pos:column="34"/></name></expr></argument>)<pos:position pos:line="93" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="36"/></expr_stmt>
      <if pos:line="94" pos:column="7">if <condition pos:line="94" pos:column="10">(<expr><name pos:line="94" pos:column="11">ret<pos:position pos:line="94" pos:column="14"/></name></expr>)<pos:position pos:line="94" pos:column="15"/></condition><then pos:line="94" pos:column="15"> <block pos:line="94" pos:column="16">{
        <return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">ret<pos:position pos:line="95" pos:column="19"/></name></expr>;<pos:position pos:line="95" pos:column="20"/></return>
      }<pos:position pos:line="96" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">cconn_close<pos:position pos:line="97" pos:column="18"/></name><argument_list pos:line="97" pos:column="18">(<argument><expr><name pos:line="97" pos:column="19">io<pos:position pos:line="97" pos:column="21"/></name></expr></argument>)<pos:position pos:line="97" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="98" pos:column="7">io<pos:position pos:line="98" pos:column="9"/></name><operator pos:line="98" pos:column="9">-&gt;<pos:position pos:line="98" pos:column="14"/></operator><name pos:line="98" pos:column="11">request_type<pos:position pos:line="98" pos:column="23"/></name></name> <operator pos:line="98" pos:column="24">=<pos:position pos:line="98" pos:column="25"/></operator> <name pos:line="98" pos:column="26">ASOK_REQ_NONE<pos:position pos:line="98" pos:column="39"/></name></expr>;<pos:position pos:line="98" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if>
    <return pos:line="100" pos:column="5">return <expr><literal type="number" pos:line="100" pos:column="12">0<pos:position pos:line="100" pos:column="13"/></literal></expr>;<pos:position pos:line="100" pos:column="14"/></return>
  }<pos:position pos:line="101" pos:column="4"/></block>
  <default pos:line="102" pos:column="3">default:<pos:position pos:line="102" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">ERROR<pos:position pos:line="103" pos:column="10"/></name><argument_list pos:line="103" pos:column="10">(<argument><expr><literal type="string" pos:line="103" pos:column="11">"ceph plugin: cconn_handle_event(name=%s) got to illegal "<pos:position pos:line="103" pos:column="69"/></literal>
          <literal type="string" pos:line="104" pos:column="11">"state on line %d"<pos:position pos:line="104" pos:column="29"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="105" pos:column="11">io<pos:position pos:line="105" pos:column="13"/></name><operator pos:line="105" pos:column="13">-&gt;<pos:position pos:line="105" pos:column="18"/></operator><name pos:line="105" pos:column="15">d<pos:position pos:line="105" pos:column="16"/></name><operator pos:line="105" pos:column="16">-&gt;<pos:position pos:line="105" pos:column="21"/></operator><name pos:line="105" pos:column="18">name<pos:position pos:line="105" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="24">__LINE__<pos:position pos:line="105" pos:column="32"/></name></expr></argument>)<pos:position pos:line="105" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="34"/></expr_stmt>
    <return pos:line="106" pos:column="5">return <expr><operator pos:line="106" pos:column="12">-<pos:position pos:line="106" pos:column="13"/></operator><name pos:line="106" pos:column="13">EDOM<pos:position pos:line="106" pos:column="17"/></name></expr>;<pos:position pos:line="106" pos:column="18"/></return>
  }<pos:position pos:line="107" pos:column="4"/></block></switch>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
