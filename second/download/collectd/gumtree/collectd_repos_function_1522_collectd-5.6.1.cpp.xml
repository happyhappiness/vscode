<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1522_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <comment type="block" pos:line="1" pos:column="34">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">double<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">last_time<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">values_sent<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">read_options<pos:position pos:line="6" pos:column="15"/></name> <argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">argc<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="23">argv<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">sigint_action<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">sa_handler<pos:position pos:line="8" pos:column="27"/></name></name> <operator pos:line="8" pos:column="28">=<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">signal_handler<pos:position pos:line="8" pos:column="44"/></name></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">sigaction<pos:position pos:line="9" pos:column="12"/></name> <argument_list pos:line="9" pos:column="13">(<argument><expr><name pos:line="9" pos:column="14">SIGINT<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">sigint_action<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <comment type="block" pos:line="9" pos:column="38">/* old = */</comment> <argument><expr><name pos:line="9" pos:column="50">NULL<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="11" pos:column="3">sigterm_action<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">sa_handler<pos:position pos:line="11" pos:column="28"/></name></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">signal_handler<pos:position pos:line="11" pos:column="45"/></name></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">sigaction<pos:position pos:line="12" pos:column="12"/></name> <argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">SIGTERM<pos:position pos:line="12" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="24">sigterm_action<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <comment type="block" pos:line="12" pos:column="40">/* old = */</comment> <argument><expr><name pos:line="12" pos:column="52">NULL<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>


  <expr_stmt><expr><name pos:line="15" pos:column="3">values_heap<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">c_heap_create<pos:position pos:line="15" pos:column="30"/></name> <argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">compare_time<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">values_heap<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">fprintf<pos:position pos:line="18" pos:column="12"/></name> <argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">stderr<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="22">"c_heap_create failed.\n"<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">exit<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><name pos:line="19" pos:column="11">EXIT_FAILURE<pos:position pos:line="19" pos:column="23"/></name></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">net<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">lcc_network_create<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">()<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">net<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">==<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">NULL<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19">
  <block pos:line="24" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fprintf<pos:position pos:line="25" pos:column="12"/></name> <argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">stderr<pos:position pos:line="25" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="22">"lcc_network_create failed.\n"<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">exit<pos:position pos:line="26" pos:column="9"/></name> <argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">EXIT_FAILURE<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then>
  <else pos:line="28" pos:column="3">else
  <block pos:line="29" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">lcc_server_t<pos:position pos:line="30" pos:column="17"/></name> <modifier pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></modifier></type><name pos:line="30" pos:column="19">srv<pos:position pos:line="30" pos:column="22"/></name></decl>;<pos:position pos:line="30" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="32" pos:column="5">srv<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">lcc_server_create<pos:position pos:line="32" pos:column="28"/></name> <argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">net<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="35">conf_destination<pos:position pos:line="32" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">conf_service<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">srv<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21">
    <block pos:line="34" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">fprintf<pos:position pos:line="35" pos:column="14"/></name> <argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">stderr<pos:position pos:line="35" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="24">"lcc_server_create failed.\n"<pos:position pos:line="35" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">exit<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">EXIT_FAILURE<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">lcc_server_set_ttl<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">srv<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="30">42<pos:position pos:line="39" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="40" pos:column="5">0<pos:position pos:line="40" pos:column="6"/></literal></expr></cpp:if>
    lcc_server_set_security_level (srv, ENCRYPT,
        "admin", "password1");
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="44" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">fprintf<pos:position pos:line="46" pos:column="10"/></name> <argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">stdout<pos:position pos:line="46" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="20">"Creating %i values ... "<pos:position pos:line="46" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">conf_num_values<pos:position pos:line="46" pos:column="62"/></name></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">fflush<pos:position pos:line="47" pos:column="9"/></name> <argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">stdout<pos:position pos:line="47" pos:column="17"/></name></expr></argument>)<pos:position pos:line="47" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt>
  <for pos:line="48" pos:column="3">for <control pos:line="48" pos:column="7">(<init><decl><type><name pos:line="48" pos:column="8">int<pos:position pos:line="48" pos:column="11"/></name></type> <name pos:line="48" pos:column="12">i<pos:position pos:line="48" pos:column="13"/></name> <init pos:line="48" pos:column="14">= <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="48" pos:column="18"/></init> <condition><expr><name pos:line="48" pos:column="19">i<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">&lt;<pos:position pos:line="48" pos:column="25"/></operator> <name pos:line="48" pos:column="23">conf_num_values<pos:position pos:line="48" pos:column="38"/></name></expr>;<pos:position pos:line="48" pos:column="39"/></condition> <incr><expr><name pos:line="48" pos:column="40">i<pos:position pos:line="48" pos:column="41"/></name><operator pos:line="48" pos:column="41">++<pos:position pos:line="48" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="44"/></control>
  <block pos:line="49" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">lcc_value_list_t<pos:position pos:line="50" pos:column="21"/></name> <modifier pos:line="50" pos:column="22">*<pos:position pos:line="50" pos:column="23"/></modifier></type><name pos:line="50" pos:column="23">vl<pos:position pos:line="50" pos:column="25"/></name></decl>;<pos:position pos:line="50" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><name pos:line="52" pos:column="5">vl<pos:position pos:line="52" pos:column="7"/></name> <operator pos:line="52" pos:column="8">=<pos:position pos:line="52" pos:column="9"/></operator> <call><name pos:line="52" pos:column="10">create_value_list<pos:position pos:line="52" pos:column="27"/></name> <argument_list pos:line="52" pos:column="28">()<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">vl<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">==<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">NULL<pos:position pos:line="53" pos:column="19"/></name></expr>)<pos:position pos:line="53" pos:column="20"/></condition><then pos:line="53" pos:column="20">
    <block pos:line="54" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">fprintf<pos:position pos:line="55" pos:column="14"/></name> <argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">stderr<pos:position pos:line="55" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="24">"create_value_list failed.\n"<pos:position pos:line="55" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">exit<pos:position pos:line="56" pos:column="11"/></name> <argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">EXIT_FAILURE<pos:position pos:line="56" pos:column="25"/></name></expr></argument>)<pos:position pos:line="56" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">c_heap_insert<pos:position pos:line="59" pos:column="18"/></name> <argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">values_heap<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="33">vl<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">fprintf<pos:position pos:line="61" pos:column="10"/></name> <argument_list pos:line="61" pos:column="11">(<argument><expr><name pos:line="61" pos:column="12">stdout<pos:position pos:line="61" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="20">"done\n"<pos:position pos:line="61" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name pos:line="63" pos:column="3">last_time<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <literal type="number" pos:line="63" pos:column="15">0<pos:position pos:line="63" pos:column="16"/></literal></expr>;<pos:position pos:line="63" pos:column="17"/></expr_stmt>
  <while pos:line="64" pos:column="3">while <condition pos:line="64" pos:column="9">(<expr><name pos:line="64" pos:column="10">loop<pos:position pos:line="64" pos:column="14"/></name></expr>)<pos:position pos:line="64" pos:column="15"/></condition>
  <block pos:line="65" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">lcc_value_list_t<pos:position pos:line="66" pos:column="21"/></name> <modifier pos:line="66" pos:column="22">*<pos:position pos:line="66" pos:column="23"/></modifier></type><name pos:line="66" pos:column="23">vl<pos:position pos:line="66" pos:column="25"/></name> <init pos:line="66" pos:column="26">= <expr><call><name pos:line="66" pos:column="28">c_heap_get_root<pos:position pos:line="66" pos:column="43"/></name> <argument_list pos:line="66" pos:column="44">(<argument><expr><name pos:line="66" pos:column="45">values_heap<pos:position pos:line="66" pos:column="56"/></name></expr></argument>)<pos:position pos:line="66" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="66" pos:column="58"/></decl_stmt>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">vl<pos:position pos:line="68" pos:column="11"/></name> <operator pos:line="68" pos:column="12">==<pos:position pos:line="68" pos:column="14"/></operator> <name pos:line="68" pos:column="15">NULL<pos:position pos:line="68" pos:column="19"/></name></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20">
      <block type="pseudo"><break pos:line="69" pos:column="7">break;<pos:position pos:line="69" pos:column="13"/></break></block></then></if>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">vl<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">time<pos:position pos:line="71" pos:column="17"/></name></name> <operator pos:line="71" pos:column="18">!=<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">last_time<pos:position pos:line="71" pos:column="30"/></name></expr>)<pos:position pos:line="71" pos:column="31"/></condition><then pos:line="71" pos:column="31">
    <block pos:line="72" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">printf<pos:position pos:line="73" pos:column="13"/></name> <argument_list pos:line="73" pos:column="14">(<argument><expr><literal type="string" pos:line="73" pos:column="15">"%i values have been sent.\n"<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="46">values_sent<pos:position pos:line="73" pos:column="57"/></name></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="59"/></expr_stmt>

      <comment type="block" pos:line="75" pos:column="7">/* Check if we need to sleep */</comment>
      <decl_stmt><decl><type><name pos:line="76" pos:column="7">double<pos:position pos:line="76" pos:column="13"/></name></type> <name pos:line="76" pos:column="14">now<pos:position pos:line="76" pos:column="17"/></name> <init pos:line="76" pos:column="18">= <expr><call><name pos:line="76" pos:column="20">dtime<pos:position pos:line="76" pos:column="25"/></name> <argument_list pos:line="76" pos:column="26">()<pos:position pos:line="76" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="29"/></decl_stmt>

      <while pos:line="78" pos:column="7">while <condition pos:line="78" pos:column="13">(<expr><name pos:line="78" pos:column="14">now<pos:position pos:line="78" pos:column="17"/></name> <operator pos:line="78" pos:column="18">&lt;<pos:position pos:line="78" pos:column="22"/></operator> <name><name pos:line="78" pos:column="20">vl<pos:position pos:line="78" pos:column="22"/></name><operator pos:line="78" pos:column="22">-&gt;<pos:position pos:line="78" pos:column="27"/></operator><name pos:line="78" pos:column="24">time<pos:position pos:line="78" pos:column="28"/></name></name></expr>)<pos:position pos:line="78" pos:column="29"/></condition>
      <block pos:line="79" pos:column="7">{
        <comment type="block" pos:line="80" pos:column="9">/* 1 / 100 second */</comment>
        <decl_stmt><decl><type><name><name pos:line="81" pos:column="9">struct<pos:position pos:line="81" pos:column="15"/></name> <name pos:line="81" pos:column="16">timespec<pos:position pos:line="81" pos:column="24"/></name></name></type> <name pos:line="81" pos:column="25">ts<pos:position pos:line="81" pos:column="27"/></name> <init pos:line="81" pos:column="28">= <expr><block pos:line="81" pos:column="30">{ <expr><literal type="number" pos:line="81" pos:column="32">0<pos:position pos:line="81" pos:column="33"/></literal></expr>, <expr><literal type="number" pos:line="81" pos:column="35">10000000<pos:position pos:line="81" pos:column="43"/></literal></expr> }<pos:position pos:line="81" pos:column="45"/></block></expr></init></decl>;<pos:position pos:line="81" pos:column="46"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="83" pos:column="9">ts<pos:position pos:line="83" pos:column="11"/></name><operator pos:line="83" pos:column="11">.<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="12">tv_sec<pos:position pos:line="83" pos:column="18"/></name></name> <operator pos:line="83" pos:column="19">=<pos:position pos:line="83" pos:column="20"/></operator> <operator pos:line="83" pos:column="21">(<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="22">time_t<pos:position pos:line="83" pos:column="28"/></name><operator pos:line="83" pos:column="28">)<pos:position pos:line="83" pos:column="29"/></operator> <name pos:line="83" pos:column="30">now<pos:position pos:line="83" pos:column="33"/></name></expr>;<pos:position pos:line="83" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">ts<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">.<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="12">tv_nsec<pos:position pos:line="84" pos:column="19"/></name></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <call pos:line="84" pos:column="22">(<name pos:line="84" pos:column="23">long<pos:position pos:line="84" pos:column="27"/></name>) <argument_list pos:line="84" pos:column="29">(<argument><expr><operator pos:line="84" pos:column="30">(<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">now<pos:position pos:line="84" pos:column="34"/></name> <operator pos:line="84" pos:column="35">-<pos:position pos:line="84" pos:column="36"/></operator> <operator pos:line="84" pos:column="37">(<pos:position pos:line="84" pos:column="38"/></operator><operator pos:line="84" pos:column="38">(<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="39">double<pos:position pos:line="84" pos:column="45"/></name><operator pos:line="84" pos:column="45">)<pos:position pos:line="84" pos:column="46"/></operator> <name><name pos:line="84" pos:column="47">ts<pos:position pos:line="84" pos:column="49"/></name><operator pos:line="84" pos:column="49">.<pos:position pos:line="84" pos:column="50"/></operator><name pos:line="84" pos:column="50">tv_sec<pos:position pos:line="84" pos:column="56"/></name></name><operator pos:line="84" pos:column="56">)<pos:position pos:line="84" pos:column="57"/></operator><operator pos:line="84" pos:column="57">)<pos:position pos:line="84" pos:column="58"/></operator> <operator pos:line="84" pos:column="59">*<pos:position pos:line="84" pos:column="60"/></operator> <literal type="number" pos:line="84" pos:column="61">1e9<pos:position pos:line="84" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="66"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="86" pos:column="9">nanosleep<pos:position pos:line="86" pos:column="18"/></name> <argument_list pos:line="86" pos:column="19">(<argument><expr><operator pos:line="86" pos:column="20">&amp;<pos:position pos:line="86" pos:column="25"/></operator><name pos:line="86" pos:column="21">ts<pos:position pos:line="86" pos:column="23"/></name></expr></argument>, <comment type="block" pos:line="86" pos:column="25">/* remaining = */</comment> <argument><expr><name pos:line="86" pos:column="43">NULL<pos:position pos:line="86" pos:column="47"/></name></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="87" pos:column="9">now<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <call><name pos:line="87" pos:column="15">dtime<pos:position pos:line="87" pos:column="20"/></name> <argument_list pos:line="87" pos:column="21">()<pos:position pos:line="87" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>

        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><operator pos:line="89" pos:column="13">!<pos:position pos:line="89" pos:column="14"/></operator><name pos:line="89" pos:column="14">loop<pos:position pos:line="89" pos:column="18"/></name></expr>)<pos:position pos:line="89" pos:column="19"/></condition><then pos:line="89" pos:column="19">
          <block type="pseudo"><break pos:line="90" pos:column="11">break;<pos:position pos:line="90" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="91" pos:column="8"/></block></while>
      <expr_stmt><expr><name pos:line="92" pos:column="7">last_time<pos:position pos:line="92" pos:column="16"/></name> <operator pos:line="92" pos:column="17">=<pos:position pos:line="92" pos:column="18"/></operator> <name><name pos:line="92" pos:column="19">vl<pos:position pos:line="92" pos:column="21"/></name><operator pos:line="92" pos:column="21">-&gt;<pos:position pos:line="92" pos:column="26"/></operator><name pos:line="92" pos:column="23">time<pos:position pos:line="92" pos:column="27"/></name></name></expr>;<pos:position pos:line="92" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="95" pos:column="5">send_value<pos:position pos:line="95" pos:column="15"/></name> <argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">vl<pos:position pos:line="95" pos:column="19"/></name></expr></argument>)<pos:position pos:line="95" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="96" pos:column="5">values_sent<pos:position pos:line="96" pos:column="16"/></name><operator pos:line="96" pos:column="16">++<pos:position pos:line="96" pos:column="18"/></operator></expr>;<pos:position pos:line="96" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="98" pos:column="5">c_heap_insert<pos:position pos:line="98" pos:column="18"/></name> <argument_list pos:line="98" pos:column="19">(<argument><expr><name pos:line="98" pos:column="20">values_heap<pos:position pos:line="98" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="33">vl<pos:position pos:line="98" pos:column="35"/></name></expr></argument>)<pos:position pos:line="98" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="101" pos:column="3">fprintf<pos:position pos:line="101" pos:column="10"/></name> <argument_list pos:line="101" pos:column="11">(<argument><expr><name pos:line="101" pos:column="12">stdout<pos:position pos:line="101" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="20">"Shutting down.\n"<pos:position pos:line="101" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="102" pos:column="3">fflush<pos:position pos:line="102" pos:column="9"/></name> <argument_list pos:line="102" pos:column="10">(<argument><expr><name pos:line="102" pos:column="11">stdout<pos:position pos:line="102" pos:column="17"/></name></expr></argument>)<pos:position pos:line="102" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="19"/></expr_stmt>

  <while pos:line="104" pos:column="3">while <condition pos:line="104" pos:column="9">(<expr><literal type="number" pos:line="104" pos:column="10">42<pos:position pos:line="104" pos:column="12"/></literal></expr>)<pos:position pos:line="104" pos:column="13"/></condition>
  <block pos:line="105" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="106" pos:column="5">lcc_value_list_t<pos:position pos:line="106" pos:column="21"/></name> <modifier pos:line="106" pos:column="22">*<pos:position pos:line="106" pos:column="23"/></modifier></type><name pos:line="106" pos:column="23">vl<pos:position pos:line="106" pos:column="25"/></name> <init pos:line="106" pos:column="26">= <expr><call><name pos:line="106" pos:column="28">c_heap_get_root<pos:position pos:line="106" pos:column="43"/></name> <argument_list pos:line="106" pos:column="44">(<argument><expr><name pos:line="106" pos:column="45">values_heap<pos:position pos:line="106" pos:column="56"/></name></expr></argument>)<pos:position pos:line="106" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="106" pos:column="58"/></decl_stmt>
    <if pos:line="107" pos:column="5">if <condition pos:line="107" pos:column="8">(<expr><name pos:line="107" pos:column="9">vl<pos:position pos:line="107" pos:column="11"/></name> <operator pos:line="107" pos:column="12">==<pos:position pos:line="107" pos:column="14"/></operator> <name pos:line="107" pos:column="15">NULL<pos:position pos:line="107" pos:column="19"/></name></expr>)<pos:position pos:line="107" pos:column="20"/></condition><then pos:line="107" pos:column="20">
      <block type="pseudo"><break pos:line="108" pos:column="7">break;<pos:position pos:line="108" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">destroy_value_list<pos:position pos:line="109" pos:column="23"/></name> <argument_list pos:line="109" pos:column="24">(<argument><expr><name pos:line="109" pos:column="25">vl<pos:position pos:line="109" pos:column="27"/></name></expr></argument>)<pos:position pos:line="109" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="110" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="111" pos:column="3">c_heap_destroy<pos:position pos:line="111" pos:column="17"/></name> <argument_list pos:line="111" pos:column="18">(<argument><expr><name pos:line="111" pos:column="19">values_heap<pos:position pos:line="111" pos:column="30"/></name></expr></argument>)<pos:position pos:line="111" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="113" pos:column="3">lcc_network_destroy<pos:position pos:line="113" pos:column="22"/></name> <argument_list pos:line="113" pos:column="23">(<argument><expr><name pos:line="113" pos:column="24">net<pos:position pos:line="113" pos:column="27"/></name></expr></argument>)<pos:position pos:line="113" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="114" pos:column="3">exit<pos:position pos:line="114" pos:column="7"/></name> <argument_list pos:line="114" pos:column="8">(<argument><expr><name pos:line="114" pos:column="9">EXIT_SUCCESS<pos:position pos:line="114" pos:column="21"/></name></expr></argument>)<pos:position pos:line="114" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="23"/></expr_stmt>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
