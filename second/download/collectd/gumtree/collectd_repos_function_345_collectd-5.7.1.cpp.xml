<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_345_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">total_rate<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">gauge_t<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">sum_by_state<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">size_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">state<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">derive_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">d<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="2" pos:column="23">value_to_rate_state_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">conv<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">cdtime_t<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">now<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list> <block pos:line="2" pos:column="66">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">gauge_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">rate<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">NAN<pos:position pos:line="3" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">=
      <expr><call><name pos:line="5" pos:column="7">value_to_rate<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><operator pos:line="5" pos:column="21">&amp;<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="22">rate<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="28">(<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">value_t<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">)<pos:position pos:line="5" pos:column="37"/></operator><block pos:line="5" pos:column="37">{<expr><operator pos:line="5" pos:column="38">.<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">derive<pos:position pos:line="5" pos:column="45"/></name> <operator pos:line="5" pos:column="46">=<pos:position pos:line="5" pos:column="47"/></operator> <name pos:line="5" pos:column="48">d<pos:position pos:line="5" pos:column="49"/></name></expr>}<pos:position pos:line="5" pos:column="50"/></block></expr></argument>, <argument><expr><name pos:line="5" pos:column="52">DS_TYPE_DERIVE<pos:position pos:line="5" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="68">now<pos:position pos:line="5" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="73">conv<pos:position pos:line="5" pos:column="77"/></name></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="79"/></decl_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">sum_by_state<pos:position pos:line="9" pos:column="15"/></name><index pos:line="9" pos:column="15">[<expr><name pos:line="9" pos:column="16">state<pos:position pos:line="9" pos:column="21"/></name></expr>]<pos:position pos:line="9" pos:column="22"/></index></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">rate<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">state<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">!=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">COLLECTD_CPU_STATE_IDLE<pos:position pos:line="11" pos:column="39"/></name></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">RATE_ADD<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name><name pos:line="12" pos:column="14">sum_by_state<pos:position pos:line="12" pos:column="26"/></name><index pos:line="12" pos:column="26">[<expr><name pos:line="12" pos:column="27">COLLECTD_CPU_STATE_ACTIVE<pos:position pos:line="12" pos:column="52"/></name></expr>]<pos:position pos:line="12" pos:column="53"/></index></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="55">sum_by_state<pos:position pos:line="12" pos:column="67"/></name><index pos:line="12" pos:column="67">[<expr><name pos:line="12" pos:column="68">state<pos:position pos:line="12" pos:column="73"/></name></expr>]<pos:position pos:line="12" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt></block></then></if>
  <return pos:line="13" pos:column="3">return <expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><literal type="number" pos:line="13" pos:column="11">0<pos:position pos:line="13" pos:column="12"/></literal><operator pos:line="13" pos:column="12">)<pos:position pos:line="13" pos:column="13"/></operator></expr>;<pos:position pos:line="13" pos:column="14"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
