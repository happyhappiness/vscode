<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_350_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">_Bool<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">camqp_is_error<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">camqp_config_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">amqp_rpc_reply_t<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">r<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">r<pos:position pos:line="5" pos:column="4"/></name> <operator pos:line="5" pos:column="5">=<pos:position pos:line="5" pos:column="6"/></operator> <call><name pos:line="5" pos:column="7">amqp_get_rpc_reply<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name><name pos:line="5" pos:column="26">conf<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">connection<pos:position pos:line="5" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="44"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">r<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">.<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">reply_type<pos:position pos:line="6" pos:column="19"/></name></name> <operator pos:line="6" pos:column="20">==<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">AMQP_RESPONSE_NORMAL<pos:position pos:line="6" pos:column="43"/></name></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><literal type="number" pos:line="7" pos:column="13">0<pos:position pos:line="7" pos:column="14"/></literal><operator pos:line="7" pos:column="14">)<pos:position pos:line="7" pos:column="15"/></operator></expr>;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

  <return pos:line="9" pos:column="3">return <expr><operator pos:line="9" pos:column="10">(<pos:position pos:line="9" pos:column="11"/></operator><literal type="number" pos:line="9" pos:column="11">1<pos:position pos:line="9" pos:column="12"/></literal><operator pos:line="9" pos:column="12">)<pos:position pos:line="9" pos:column="13"/></operator></expr>;<pos:position pos:line="9" pos:column="14"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
