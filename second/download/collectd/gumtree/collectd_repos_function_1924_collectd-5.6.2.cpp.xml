<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1924_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_packet<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">sockent_t<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">se<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="40">/* {{{ */</comment>
                        <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">buffer<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">buffer_size<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">int<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">flags<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">char<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">username<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="46"/></parameter_list> <block pos:line="3" pos:column="47">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">value_list_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">vl<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">notification_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">n<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><block pos:line="7" pos:column="22">{<expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>}<pos:position pos:line="7" pos:column="25"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="9" pos:column="19"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">packet_was_signed<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><operator pos:line="10" pos:column="27">(<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">flags<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">&amp;<pos:position pos:line="10" pos:column="39"/></operator> <name pos:line="10" pos:column="36">PP_SIGNED<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">)<pos:position pos:line="10" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">packet_was_encrypted<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">flags<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">&amp;<pos:position pos:line="11" pos:column="42"/></operator> <name pos:line="11" pos:column="39">PP_ENCRYPTED<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">)<pos:position pos:line="11" pos:column="52"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">printed_ignore_warning<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="13" pos:column="8">/* HAVE_LIBGCRYPT */</comment>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">memset<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><operator pos:line="15" pos:column="10">&amp;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="11">vl<pos:position pos:line="15" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="15">'\0'<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="21">sizeof<argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">vl<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">status<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt>

  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">status<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="21">0<pos:position pos:line="18" pos:column="22"/></literal><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator> <operator pos:line="18" pos:column="24">&amp;&amp;<pos:position pos:line="18" pos:column="34"/></operator> <operator pos:line="18" pos:column="27">(<pos:position pos:line="18" pos:column="28"/></operator><literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal> <operator pos:line="18" pos:column="30">&lt;<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="32">buffer_size<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">)<pos:position pos:line="18" pos:column="44"/></operator> <operator pos:line="18" pos:column="45">&amp;&amp;<pos:position pos:line="18" pos:column="55"/></operator>
         <operator pos:line="19" pos:column="10">(<pos:position pos:line="19" pos:column="11"/></operator><operator pos:line="19" pos:column="11">(<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">unsigned<pos:position pos:line="19" pos:column="20"/></name> <name pos:line="19" pos:column="21">int<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">)<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">buffer_size<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">&gt;<pos:position pos:line="19" pos:column="41"/></operator> <sizeof pos:line="19" pos:column="39">sizeof<argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">part_header_t<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></sizeof><operator pos:line="19" pos:column="60">)<pos:position pos:line="19" pos:column="61"/></operator></expr>)<pos:position pos:line="19" pos:column="62"/></condition> <block pos:line="19" pos:column="63">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">uint16_t<pos:position pos:line="20" pos:column="13"/></name></type> <name pos:line="20" pos:column="14">pkg_length<pos:position pos:line="20" pos:column="24"/></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">uint16_t<pos:position pos:line="21" pos:column="13"/></name></type> <name pos:line="21" pos:column="14">pkg_type<pos:position pos:line="21" pos:column="22"/></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memcpy<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">void<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></operator><operator pos:line="23" pos:column="19">)<pos:position pos:line="23" pos:column="20"/></operator><operator pos:line="23" pos:column="20">&amp;<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="21">pkg_type<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="31">(<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">void<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">*<pos:position pos:line="23" pos:column="38"/></operator><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="39">buffer<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="47">sizeof<argument_list pos:line="23" pos:column="53">(<argument><expr><name pos:line="23" pos:column="54">pkg_type<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">void<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator><operator pos:line="24" pos:column="20">&amp;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="21">pkg_length<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="33">(<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">void<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">*<pos:position pos:line="24" pos:column="40"/></operator><operator pos:line="24" pos:column="40">)<pos:position pos:line="24" pos:column="41"/></operator><operator pos:line="24" pos:column="41">(<pos:position pos:line="24" pos:column="42"/></operator><operator pos:line="24" pos:column="42">(<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">(<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">char<pos:position pos:line="24" pos:column="48"/></name> <operator pos:line="24" pos:column="49">*<pos:position pos:line="24" pos:column="50"/></operator><operator pos:line="24" pos:column="50">)<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="51">buffer<pos:position pos:line="24" pos:column="57"/></name><operator pos:line="24" pos:column="57">)<pos:position pos:line="24" pos:column="58"/></operator> <operator pos:line="24" pos:column="59">+<pos:position pos:line="24" pos:column="60"/></operator> <sizeof pos:line="24" pos:column="61">sizeof<argument_list pos:line="24" pos:column="67">(<argument><expr><name pos:line="24" pos:column="68">pkg_type<pos:position pos:line="24" pos:column="76"/></name></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></sizeof><operator pos:line="24" pos:column="77">)<pos:position pos:line="24" pos:column="78"/></operator></expr></argument>,
           <argument><expr><sizeof pos:line="25" pos:column="12">sizeof<argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">pkg_length<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">pkg_length<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">ntohs<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">pkg_length<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">pkg_type<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">ntohs<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">pkg_type<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">pkg_length<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">&gt;<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="22">buffer_size<pos:position pos:line="30" pos:column="33"/></name></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34">
      <block type="pseudo"><break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break></block></then></if>
    <comment type="block" pos:line="32" pos:column="5">/* Ensure that this loop terminates eventually */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">pkg_length<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">&lt;<pos:position pos:line="33" pos:column="24"/></operator> <operator pos:line="33" pos:column="22">(<pos:position pos:line="33" pos:column="23"/></operator><literal type="number" pos:line="33" pos:column="23">2<pos:position pos:line="33" pos:column="24"/></literal> <operator pos:line="33" pos:column="25">*<pos:position pos:line="33" pos:column="26"/></operator> <sizeof pos:line="33" pos:column="27">sizeof<argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">uint16_t<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></sizeof><operator pos:line="33" pos:column="43">)<pos:position pos:line="33" pos:column="44"/></operator></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45">
      <block type="pseudo"><break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">pkg_type<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">==<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">TYPE_ENCR_AES256<pos:position pos:line="36" pos:column="37"/></name></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38"> <block pos:line="36" pos:column="39">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">status<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">parse_part_encr_aes256<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">se<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="43">&amp;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="44">buffer<pos:position pos:line="37" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="52">&amp;<pos:position pos:line="37" pos:column="57"/></operator><name pos:line="37" pos:column="53">buffer_size<pos:position pos:line="37" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="66">flags<pos:position pos:line="37" pos:column="71"/></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="73"/></expr_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><name pos:line="38" pos:column="11">status<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">!=<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="21">0<pos:position pos:line="38" pos:column="22"/></literal></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23"> <block pos:line="38" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">ERROR<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><literal type="string" pos:line="39" pos:column="15">"network plugin: Decrypting AES256 "<pos:position pos:line="39" pos:column="51"/></literal>
              <literal type="string" pos:line="40" pos:column="15">"part failed "<pos:position pos:line="40" pos:column="29"/></literal>
              <literal type="string" pos:line="41" pos:column="15">"with status %i."<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>,
              <argument><expr><name pos:line="42" pos:column="15">status<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
        <break pos:line="43" pos:column="9">break;<pos:position pos:line="43" pos:column="15"/></break>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><name pos:line="46" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="46" pos:column="19"/></name></expr></cpp:if>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><name><name pos:line="47" pos:column="15">se<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">-&gt;<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="19">data<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">.<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">server<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">.<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">security_level<pos:position pos:line="47" pos:column="45"/></name></name> <operator pos:line="47" pos:column="46">==<pos:position pos:line="47" pos:column="48"/></operator> <name pos:line="47" pos:column="49">SECURITY_LEVEL_ENCRYPT<pos:position pos:line="47" pos:column="71"/></name><operator pos:line="47" pos:column="71">)<pos:position pos:line="47" pos:column="72"/></operator> <operator pos:line="47" pos:column="73">&amp;&amp;<pos:position pos:line="47" pos:column="83"/></operator>
             <operator pos:line="48" pos:column="14">(<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">packet_was_encrypted<pos:position pos:line="48" pos:column="35"/></name> <operator pos:line="48" pos:column="36">==<pos:position pos:line="48" pos:column="38"/></operator> <literal type="number" pos:line="48" pos:column="39">0<pos:position pos:line="48" pos:column="40"/></literal><operator pos:line="48" pos:column="40">)<pos:position pos:line="48" pos:column="41"/></operator></expr>)<pos:position pos:line="48" pos:column="42"/></condition><then pos:line="48" pos:column="42"> <block pos:line="48" pos:column="43">{
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">printed_ignore_warning<pos:position pos:line="49" pos:column="33"/></name> <operator pos:line="49" pos:column="34">==<pos:position pos:line="49" pos:column="36"/></operator> <literal type="number" pos:line="49" pos:column="37">0<pos:position pos:line="49" pos:column="38"/></literal></expr>)<pos:position pos:line="49" pos:column="39"/></condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">INFO<pos:position pos:line="50" pos:column="13"/></name><argument_list pos:line="50" pos:column="13">(<argument><expr><literal type="string" pos:line="50" pos:column="14">"network plugin: Unencrypted packet or "<pos:position pos:line="50" pos:column="54"/></literal>
             <literal type="string" pos:line="51" pos:column="14">"part has been ignored."<pos:position pos:line="51" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">printed_ignore_warning<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <literal type="number" pos:line="52" pos:column="34">1<pos:position pos:line="52" pos:column="35"/></literal></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="54" pos:column="7">buffer<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><operator pos:line="54" pos:column="17">(<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">char<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">*<pos:position pos:line="54" pos:column="24"/></operator><operator pos:line="54" pos:column="24">)<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="25">buffer<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">)<pos:position pos:line="54" pos:column="32"/></operator> <operator pos:line="54" pos:column="33">+<pos:position pos:line="54" pos:column="34"/></operator> <name pos:line="54" pos:column="35">pkg_length<pos:position pos:line="54" pos:column="45"/></name></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="55" pos:column="7">buffer_size<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">-=<pos:position pos:line="55" pos:column="21"/></operator> <operator pos:line="55" pos:column="22">(<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="23">size_t<pos:position pos:line="55" pos:column="29"/></name><operator pos:line="55" pos:column="29">)<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">pkg_length<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
      <continue pos:line="56" pos:column="7">continue;<pos:position pos:line="56" pos:column="16"/></continue>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="58" pos:column="8">/* HAVE_LIBGCRYPT */</comment>
    <elseif pos:line="59" pos:column="5">else <if pos:line="59" pos:column="10">if <condition pos:line="59" pos:column="13">(<expr><name pos:line="59" pos:column="14">pkg_type<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">==<pos:position pos:line="59" pos:column="25"/></operator> <name pos:line="59" pos:column="26">TYPE_SIGN_SHA256<pos:position pos:line="59" pos:column="42"/></name></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43"> <block pos:line="59" pos:column="44">{
      <expr_stmt><expr><name pos:line="60" pos:column="7">status<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <call><name pos:line="60" pos:column="16">parse_part_sign_sha256<pos:position pos:line="60" pos:column="38"/></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name pos:line="60" pos:column="39">se<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="43">&amp;<pos:position pos:line="60" pos:column="48"/></operator><name pos:line="60" pos:column="44">buffer<pos:position pos:line="60" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="52">&amp;<pos:position pos:line="60" pos:column="57"/></operator><name pos:line="60" pos:column="53">buffer_size<pos:position pos:line="60" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="66">flags<pos:position pos:line="60" pos:column="71"/></name></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="73"/></expr_stmt>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><name pos:line="61" pos:column="11">status<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">!=<pos:position pos:line="61" pos:column="20"/></operator> <literal type="number" pos:line="61" pos:column="21">0<pos:position pos:line="61" pos:column="22"/></literal></expr>)<pos:position pos:line="61" pos:column="23"/></condition><then pos:line="61" pos:column="23"> <block pos:line="61" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">ERROR<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><literal type="string" pos:line="62" pos:column="15">"network plugin: Verifying HMAC-SHA-256 "<pos:position pos:line="62" pos:column="56"/></literal>
              <literal type="string" pos:line="63" pos:column="15">"signature failed "<pos:position pos:line="63" pos:column="34"/></literal>
              <literal type="string" pos:line="64" pos:column="15">"with status %i."<pos:position pos:line="64" pos:column="32"/></literal></expr></argument>,
              <argument><expr><name pos:line="65" pos:column="15">status<pos:position pos:line="65" pos:column="21"/></name></expr></argument>)<pos:position pos:line="65" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif>
<cpp:if pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">if<pos:position pos:line="69" pos:column="4"/></cpp:directive> <expr><name pos:line="69" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="69" pos:column="19"/></name></expr></cpp:if>
    <elseif pos:line="70" pos:column="5">else <if pos:line="70" pos:column="10">if <condition pos:line="70" pos:column="13">(<expr><operator pos:line="70" pos:column="14">(<pos:position pos:line="70" pos:column="15"/></operator><name><name pos:line="70" pos:column="15">se<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">-&gt;<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="19">data<pos:position pos:line="70" pos:column="23"/></name><operator pos:line="70" pos:column="23">.<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="24">server<pos:position pos:line="70" pos:column="30"/></name><operator pos:line="70" pos:column="30">.<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="31">security_level<pos:position pos:line="70" pos:column="45"/></name></name> <operator pos:line="70" pos:column="46">==<pos:position pos:line="70" pos:column="48"/></operator> <name pos:line="70" pos:column="49">SECURITY_LEVEL_SIGN<pos:position pos:line="70" pos:column="68"/></name><operator pos:line="70" pos:column="68">)<pos:position pos:line="70" pos:column="69"/></operator> <operator pos:line="70" pos:column="70">&amp;&amp;<pos:position pos:line="70" pos:column="80"/></operator>
             <operator pos:line="71" pos:column="14">(<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="15">packet_was_encrypted<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">==<pos:position pos:line="71" pos:column="38"/></operator> <literal type="number" pos:line="71" pos:column="39">0<pos:position pos:line="71" pos:column="40"/></literal><operator pos:line="71" pos:column="40">)<pos:position pos:line="71" pos:column="41"/></operator> <operator pos:line="71" pos:column="42">&amp;&amp;<pos:position pos:line="71" pos:column="52"/></operator> <operator pos:line="71" pos:column="45">(<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">packet_was_signed<pos:position pos:line="71" pos:column="63"/></name> <operator pos:line="71" pos:column="64">==<pos:position pos:line="71" pos:column="66"/></operator> <literal type="number" pos:line="71" pos:column="67">0<pos:position pos:line="71" pos:column="68"/></literal><operator pos:line="71" pos:column="68">)<pos:position pos:line="71" pos:column="69"/></operator></expr>)<pos:position pos:line="71" pos:column="70"/></condition><then pos:line="71" pos:column="70"> <block pos:line="71" pos:column="71">{
      <if pos:line="72" pos:column="7">if <condition pos:line="72" pos:column="10">(<expr><name pos:line="72" pos:column="11">printed_ignore_warning<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">==<pos:position pos:line="72" pos:column="36"/></operator> <literal type="number" pos:line="72" pos:column="37">0<pos:position pos:line="72" pos:column="38"/></literal></expr>)<pos:position pos:line="72" pos:column="39"/></condition><then pos:line="72" pos:column="39"> <block pos:line="72" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">INFO<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><literal type="string" pos:line="73" pos:column="14">"network plugin: Unsigned packet or "<pos:position pos:line="73" pos:column="51"/></literal>
             <literal type="string" pos:line="74" pos:column="14">"part has been ignored."<pos:position pos:line="74" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="75" pos:column="9">printed_ignore_warning<pos:position pos:line="75" pos:column="31"/></name> <operator pos:line="75" pos:column="32">=<pos:position pos:line="75" pos:column="33"/></operator> <literal type="number" pos:line="75" pos:column="34">1<pos:position pos:line="75" pos:column="35"/></literal></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="77" pos:column="7">buffer<pos:position pos:line="77" pos:column="13"/></name> <operator pos:line="77" pos:column="14">=<pos:position pos:line="77" pos:column="15"/></operator> <operator pos:line="77" pos:column="16">(<pos:position pos:line="77" pos:column="17"/></operator><operator pos:line="77" pos:column="17">(<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">char<pos:position pos:line="77" pos:column="22"/></name> <operator pos:line="77" pos:column="23">*<pos:position pos:line="77" pos:column="24"/></operator><operator pos:line="77" pos:column="24">)<pos:position pos:line="77" pos:column="25"/></operator><name pos:line="77" pos:column="25">buffer<pos:position pos:line="77" pos:column="31"/></name><operator pos:line="77" pos:column="31">)<pos:position pos:line="77" pos:column="32"/></operator> <operator pos:line="77" pos:column="33">+<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="35">pkg_length<pos:position pos:line="77" pos:column="45"/></name></expr>;<pos:position pos:line="77" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="78" pos:column="7">buffer_size<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">-=<pos:position pos:line="78" pos:column="21"/></operator> <operator pos:line="78" pos:column="22">(<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="23">size_t<pos:position pos:line="78" pos:column="29"/></name><operator pos:line="78" pos:column="29">)<pos:position pos:line="78" pos:column="30"/></operator><name pos:line="78" pos:column="30">pkg_length<pos:position pos:line="78" pos:column="40"/></name></expr>;<pos:position pos:line="78" pos:column="41"/></expr_stmt>
      <continue pos:line="79" pos:column="7">continue;<pos:position pos:line="79" pos:column="16"/></continue>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="81" pos:column="8">/* HAVE_LIBGCRYPT */</comment>
    <elseif pos:line="82" pos:column="5">else <if pos:line="82" pos:column="10">if <condition pos:line="82" pos:column="13">(<expr><name pos:line="82" pos:column="14">pkg_type<pos:position pos:line="82" pos:column="22"/></name> <operator pos:line="82" pos:column="23">==<pos:position pos:line="82" pos:column="25"/></operator> <name pos:line="82" pos:column="26">TYPE_VALUES<pos:position pos:line="82" pos:column="37"/></name></expr>)<pos:position pos:line="82" pos:column="38"/></condition><then pos:line="82" pos:column="38"> <block pos:line="82" pos:column="39">{
      <expr_stmt><expr><name pos:line="83" pos:column="7">status<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">=<pos:position pos:line="83" pos:column="15"/></operator>
          <call><name pos:line="84" pos:column="11">parse_part_values<pos:position pos:line="84" pos:column="28"/></name><argument_list pos:line="84" pos:column="28">(<argument><expr><operator pos:line="84" pos:column="29">&amp;<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="30">buffer<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="38">&amp;<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="39">buffer_size<pos:position pos:line="84" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="52">&amp;<pos:position pos:line="84" pos:column="57"/></operator><name><name pos:line="84" pos:column="53">vl<pos:position pos:line="84" pos:column="55"/></name><operator pos:line="84" pos:column="55">.<pos:position pos:line="84" pos:column="56"/></operator><name pos:line="84" pos:column="56">values<pos:position pos:line="84" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="64">&amp;<pos:position pos:line="84" pos:column="69"/></operator><name><name pos:line="84" pos:column="65">vl<pos:position pos:line="84" pos:column="67"/></name><operator pos:line="84" pos:column="67">.<pos:position pos:line="84" pos:column="68"/></operator><name pos:line="84" pos:column="68">values_len<pos:position pos:line="84" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="80"/></expr_stmt>
      <if pos:line="85" pos:column="7">if <condition pos:line="85" pos:column="10">(<expr><name pos:line="85" pos:column="11">status<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">!=<pos:position pos:line="85" pos:column="20"/></operator> <literal type="number" pos:line="85" pos:column="21">0<pos:position pos:line="85" pos:column="22"/></literal></expr>)<pos:position pos:line="85" pos:column="23"/></condition><then pos:line="85" pos:column="23">
        <block type="pseudo"><break pos:line="86" pos:column="9">break;<pos:position pos:line="86" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><call><name pos:line="88" pos:column="7">network_dispatch_values<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><operator pos:line="88" pos:column="31">&amp;<pos:position pos:line="88" pos:column="36"/></operator><name pos:line="88" pos:column="32">vl<pos:position pos:line="88" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="36">username<pos:position pos:line="88" pos:column="44"/></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="90" pos:column="7">sfree<pos:position pos:line="90" pos:column="12"/></name><argument_list pos:line="90" pos:column="12">(<argument><expr><name><name pos:line="90" pos:column="13">vl<pos:position pos:line="90" pos:column="15"/></name><operator pos:line="90" pos:column="15">.<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="16">values<pos:position pos:line="90" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if></elseif> <elseif pos:line="91" pos:column="7">else <if pos:line="91" pos:column="12">if <condition pos:line="91" pos:column="15">(<expr><name pos:line="91" pos:column="16">pkg_type<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">==<pos:position pos:line="91" pos:column="27"/></operator> <name pos:line="91" pos:column="28">TYPE_TIME<pos:position pos:line="91" pos:column="37"/></name></expr>)<pos:position pos:line="91" pos:column="38"/></condition><then pos:line="91" pos:column="38"> <block pos:line="91" pos:column="39">{
      <decl_stmt><decl><type><name pos:line="92" pos:column="7">uint64_t<pos:position pos:line="92" pos:column="15"/></name></type> <name pos:line="92" pos:column="16">tmp<pos:position pos:line="92" pos:column="19"/></name> <init pos:line="92" pos:column="20">= <expr><literal type="number" pos:line="92" pos:column="22">0<pos:position pos:line="92" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="92" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="93" pos:column="7">status<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <call><name pos:line="93" pos:column="16">parse_part_number<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><operator pos:line="93" pos:column="34">&amp;<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="35">buffer<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="43">&amp;<pos:position pos:line="93" pos:column="48"/></operator><name pos:line="93" pos:column="44">buffer_size<pos:position pos:line="93" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="57">&amp;<pos:position pos:line="93" pos:column="62"/></operator><name pos:line="93" pos:column="58">tmp<pos:position pos:line="93" pos:column="61"/></name></expr></argument>)<pos:position pos:line="93" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="63"/></expr_stmt>
      <if pos:line="94" pos:column="7">if <condition pos:line="94" pos:column="10">(<expr><name pos:line="94" pos:column="11">status<pos:position pos:line="94" pos:column="17"/></name> <operator pos:line="94" pos:column="18">==<pos:position pos:line="94" pos:column="20"/></operator> <literal type="number" pos:line="94" pos:column="21">0<pos:position pos:line="94" pos:column="22"/></literal></expr>)<pos:position pos:line="94" pos:column="23"/></condition><then pos:line="94" pos:column="23"> <block pos:line="94" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="95" pos:column="9">vl<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">.<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">time<pos:position pos:line="95" pos:column="16"/></name></name> <operator pos:line="95" pos:column="17">=<pos:position pos:line="95" pos:column="18"/></operator> <call><name pos:line="95" pos:column="19">TIME_T_TO_CDTIME_T<pos:position pos:line="95" pos:column="37"/></name><argument_list pos:line="95" pos:column="37">(<argument><expr><name pos:line="95" pos:column="38">tmp<pos:position pos:line="95" pos:column="41"/></name></expr></argument>)<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="96" pos:column="9">n<pos:position pos:line="96" pos:column="10"/></name><operator pos:line="96" pos:column="10">.<pos:position pos:line="96" pos:column="11"/></operator><name pos:line="96" pos:column="11">time<pos:position pos:line="96" pos:column="15"/></name></name> <operator pos:line="96" pos:column="16">=<pos:position pos:line="96" pos:column="17"/></operator> <call><name pos:line="96" pos:column="18">TIME_T_TO_CDTIME_T<pos:position pos:line="96" pos:column="36"/></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">tmp<pos:position pos:line="96" pos:column="40"/></name></expr></argument>)<pos:position pos:line="96" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if></elseif> <elseif pos:line="98" pos:column="7">else <if pos:line="98" pos:column="12">if <condition pos:line="98" pos:column="15">(<expr><name pos:line="98" pos:column="16">pkg_type<pos:position pos:line="98" pos:column="24"/></name> <operator pos:line="98" pos:column="25">==<pos:position pos:line="98" pos:column="27"/></operator> <name pos:line="98" pos:column="28">TYPE_TIME_HR<pos:position pos:line="98" pos:column="40"/></name></expr>)<pos:position pos:line="98" pos:column="41"/></condition><then pos:line="98" pos:column="41"> <block pos:line="98" pos:column="42">{
      <decl_stmt><decl><type><name pos:line="99" pos:column="7">uint64_t<pos:position pos:line="99" pos:column="15"/></name></type> <name pos:line="99" pos:column="16">tmp<pos:position pos:line="99" pos:column="19"/></name> <init pos:line="99" pos:column="20">= <expr><literal type="number" pos:line="99" pos:column="22">0<pos:position pos:line="99" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="99" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="100" pos:column="7">status<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <call><name pos:line="100" pos:column="16">parse_part_number<pos:position pos:line="100" pos:column="33"/></name><argument_list pos:line="100" pos:column="33">(<argument><expr><operator pos:line="100" pos:column="34">&amp;<pos:position pos:line="100" pos:column="39"/></operator><name pos:line="100" pos:column="35">buffer<pos:position pos:line="100" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="43">&amp;<pos:position pos:line="100" pos:column="48"/></operator><name pos:line="100" pos:column="44">buffer_size<pos:position pos:line="100" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="57">&amp;<pos:position pos:line="100" pos:column="62"/></operator><name pos:line="100" pos:column="58">tmp<pos:position pos:line="100" pos:column="61"/></name></expr></argument>)<pos:position pos:line="100" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="63"/></expr_stmt>
      <if pos:line="101" pos:column="7">if <condition pos:line="101" pos:column="10">(<expr><name pos:line="101" pos:column="11">status<pos:position pos:line="101" pos:column="17"/></name> <operator pos:line="101" pos:column="18">==<pos:position pos:line="101" pos:column="20"/></operator> <literal type="number" pos:line="101" pos:column="21">0<pos:position pos:line="101" pos:column="22"/></literal></expr>)<pos:position pos:line="101" pos:column="23"/></condition><then pos:line="101" pos:column="23"> <block pos:line="101" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="102" pos:column="9">vl<pos:position pos:line="102" pos:column="11"/></name><operator pos:line="102" pos:column="11">.<pos:position pos:line="102" pos:column="12"/></operator><name pos:line="102" pos:column="12">time<pos:position pos:line="102" pos:column="16"/></name></name> <operator pos:line="102" pos:column="17">=<pos:position pos:line="102" pos:column="18"/></operator> <operator pos:line="102" pos:column="19">(<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="20">cdtime_t<pos:position pos:line="102" pos:column="28"/></name><operator pos:line="102" pos:column="28">)<pos:position pos:line="102" pos:column="29"/></operator><name pos:line="102" pos:column="29">tmp<pos:position pos:line="102" pos:column="32"/></name></expr>;<pos:position pos:line="102" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="103" pos:column="9">n<pos:position pos:line="103" pos:column="10"/></name><operator pos:line="103" pos:column="10">.<pos:position pos:line="103" pos:column="11"/></operator><name pos:line="103" pos:column="11">time<pos:position pos:line="103" pos:column="15"/></name></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <operator pos:line="103" pos:column="18">(<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="19">cdtime_t<pos:position pos:line="103" pos:column="27"/></name><operator pos:line="103" pos:column="27">)<pos:position pos:line="103" pos:column="28"/></operator><name pos:line="103" pos:column="28">tmp<pos:position pos:line="103" pos:column="31"/></name></expr>;<pos:position pos:line="103" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="104" pos:column="8"/></block></then></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if></elseif> <elseif pos:line="105" pos:column="7">else <if pos:line="105" pos:column="12">if <condition pos:line="105" pos:column="15">(<expr><name pos:line="105" pos:column="16">pkg_type<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">==<pos:position pos:line="105" pos:column="27"/></operator> <name pos:line="105" pos:column="28">TYPE_INTERVAL<pos:position pos:line="105" pos:column="41"/></name></expr>)<pos:position pos:line="105" pos:column="42"/></condition><then pos:line="105" pos:column="42"> <block pos:line="105" pos:column="43">{
      <decl_stmt><decl><type><name pos:line="106" pos:column="7">uint64_t<pos:position pos:line="106" pos:column="15"/></name></type> <name pos:line="106" pos:column="16">tmp<pos:position pos:line="106" pos:column="19"/></name> <init pos:line="106" pos:column="20">= <expr><literal type="number" pos:line="106" pos:column="22">0<pos:position pos:line="106" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="106" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="107" pos:column="7">status<pos:position pos:line="107" pos:column="13"/></name> <operator pos:line="107" pos:column="14">=<pos:position pos:line="107" pos:column="15"/></operator> <call><name pos:line="107" pos:column="16">parse_part_number<pos:position pos:line="107" pos:column="33"/></name><argument_list pos:line="107" pos:column="33">(<argument><expr><operator pos:line="107" pos:column="34">&amp;<pos:position pos:line="107" pos:column="39"/></operator><name pos:line="107" pos:column="35">buffer<pos:position pos:line="107" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="43">&amp;<pos:position pos:line="107" pos:column="48"/></operator><name pos:line="107" pos:column="44">buffer_size<pos:position pos:line="107" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="57">&amp;<pos:position pos:line="107" pos:column="62"/></operator><name pos:line="107" pos:column="58">tmp<pos:position pos:line="107" pos:column="61"/></name></expr></argument>)<pos:position pos:line="107" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="63"/></expr_stmt>
      <if pos:line="108" pos:column="7">if <condition pos:line="108" pos:column="10">(<expr><name pos:line="108" pos:column="11">status<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">==<pos:position pos:line="108" pos:column="20"/></operator> <literal type="number" pos:line="108" pos:column="21">0<pos:position pos:line="108" pos:column="22"/></literal></expr>)<pos:position pos:line="108" pos:column="23"/></condition><then pos:line="108" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="109" pos:column="9">vl<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">.<pos:position pos:line="109" pos:column="12"/></operator><name pos:line="109" pos:column="12">interval<pos:position pos:line="109" pos:column="20"/></name></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <call><name pos:line="109" pos:column="23">TIME_T_TO_CDTIME_T<pos:position pos:line="109" pos:column="41"/></name><argument_list pos:line="109" pos:column="41">(<argument><expr><name pos:line="109" pos:column="42">tmp<pos:position pos:line="109" pos:column="45"/></name></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if></elseif> <elseif pos:line="110" pos:column="7">else <if pos:line="110" pos:column="12">if <condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">pkg_type<pos:position pos:line="110" pos:column="24"/></name> <operator pos:line="110" pos:column="25">==<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">TYPE_INTERVAL_HR<pos:position pos:line="110" pos:column="44"/></name></expr>)<pos:position pos:line="110" pos:column="45"/></condition><then pos:line="110" pos:column="45"> <block pos:line="110" pos:column="46">{
      <decl_stmt><decl><type><name pos:line="111" pos:column="7">uint64_t<pos:position pos:line="111" pos:column="15"/></name></type> <name pos:line="111" pos:column="16">tmp<pos:position pos:line="111" pos:column="19"/></name> <init pos:line="111" pos:column="20">= <expr><literal type="number" pos:line="111" pos:column="22">0<pos:position pos:line="111" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="111" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="112" pos:column="7">status<pos:position pos:line="112" pos:column="13"/></name> <operator pos:line="112" pos:column="14">=<pos:position pos:line="112" pos:column="15"/></operator> <call><name pos:line="112" pos:column="16">parse_part_number<pos:position pos:line="112" pos:column="33"/></name><argument_list pos:line="112" pos:column="33">(<argument><expr><operator pos:line="112" pos:column="34">&amp;<pos:position pos:line="112" pos:column="39"/></operator><name pos:line="112" pos:column="35">buffer<pos:position pos:line="112" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="43">&amp;<pos:position pos:line="112" pos:column="48"/></operator><name pos:line="112" pos:column="44">buffer_size<pos:position pos:line="112" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="57">&amp;<pos:position pos:line="112" pos:column="62"/></operator><name pos:line="112" pos:column="58">tmp<pos:position pos:line="112" pos:column="61"/></name></expr></argument>)<pos:position pos:line="112" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="63"/></expr_stmt>
      <if pos:line="113" pos:column="7">if <condition pos:line="113" pos:column="10">(<expr><name pos:line="113" pos:column="11">status<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">==<pos:position pos:line="113" pos:column="20"/></operator> <literal type="number" pos:line="113" pos:column="21">0<pos:position pos:line="113" pos:column="22"/></literal></expr>)<pos:position pos:line="113" pos:column="23"/></condition><then pos:line="113" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="114" pos:column="9">vl<pos:position pos:line="114" pos:column="11"/></name><operator pos:line="114" pos:column="11">.<pos:position pos:line="114" pos:column="12"/></operator><name pos:line="114" pos:column="12">interval<pos:position pos:line="114" pos:column="20"/></name></name> <operator pos:line="114" pos:column="21">=<pos:position pos:line="114" pos:column="22"/></operator> <operator pos:line="114" pos:column="23">(<pos:position pos:line="114" pos:column="24"/></operator><name pos:line="114" pos:column="24">cdtime_t<pos:position pos:line="114" pos:column="32"/></name><operator pos:line="114" pos:column="32">)<pos:position pos:line="114" pos:column="33"/></operator><name pos:line="114" pos:column="33">tmp<pos:position pos:line="114" pos:column="36"/></name></expr>;<pos:position pos:line="114" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="115" pos:column="6"/></block></then></if></elseif> <elseif pos:line="115" pos:column="7">else <if pos:line="115" pos:column="12">if <condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">pkg_type<pos:position pos:line="115" pos:column="24"/></name> <operator pos:line="115" pos:column="25">==<pos:position pos:line="115" pos:column="27"/></operator> <name pos:line="115" pos:column="28">TYPE_HOST<pos:position pos:line="115" pos:column="37"/></name></expr>)<pos:position pos:line="115" pos:column="38"/></condition><then pos:line="115" pos:column="38"> <block pos:line="115" pos:column="39">{
      <expr_stmt><expr><name pos:line="116" pos:column="7">status<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">=<pos:position pos:line="116" pos:column="15"/></operator>
          <call><name pos:line="117" pos:column="11">parse_part_string<pos:position pos:line="117" pos:column="28"/></name><argument_list pos:line="117" pos:column="28">(<argument><expr><operator pos:line="117" pos:column="29">&amp;<pos:position pos:line="117" pos:column="34"/></operator><name pos:line="117" pos:column="30">buffer<pos:position pos:line="117" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="38">&amp;<pos:position pos:line="117" pos:column="43"/></operator><name pos:line="117" pos:column="39">buffer_size<pos:position pos:line="117" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="52">vl<pos:position pos:line="117" pos:column="54"/></name><operator pos:line="117" pos:column="54">.<pos:position pos:line="117" pos:column="55"/></operator><name pos:line="117" pos:column="55">host<pos:position pos:line="117" pos:column="59"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="117" pos:column="61">sizeof<argument_list pos:line="117" pos:column="67">(<argument><expr><name><name pos:line="117" pos:column="68">vl<pos:position pos:line="117" pos:column="70"/></name><operator pos:line="117" pos:column="70">.<pos:position pos:line="117" pos:column="71"/></operator><name pos:line="117" pos:column="71">host<pos:position pos:line="117" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="117" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="78"/></expr_stmt>
      <if pos:line="118" pos:column="7">if <condition pos:line="118" pos:column="10">(<expr><name pos:line="118" pos:column="11">status<pos:position pos:line="118" pos:column="17"/></name> <operator pos:line="118" pos:column="18">==<pos:position pos:line="118" pos:column="20"/></operator> <literal type="number" pos:line="118" pos:column="21">0<pos:position pos:line="118" pos:column="22"/></literal></expr>)<pos:position pos:line="118" pos:column="23"/></condition><then pos:line="118" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="119" pos:column="9">sstrncpy<pos:position pos:line="119" pos:column="17"/></name><argument_list pos:line="119" pos:column="17">(<argument><expr><name><name pos:line="119" pos:column="18">n<pos:position pos:line="119" pos:column="19"/></name><operator pos:line="119" pos:column="19">.<pos:position pos:line="119" pos:column="20"/></operator><name pos:line="119" pos:column="20">host<pos:position pos:line="119" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="26">vl<pos:position pos:line="119" pos:column="28"/></name><operator pos:line="119" pos:column="28">.<pos:position pos:line="119" pos:column="29"/></operator><name pos:line="119" pos:column="29">host<pos:position pos:line="119" pos:column="33"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="119" pos:column="35">sizeof<argument_list pos:line="119" pos:column="41">(<argument><expr><name><name pos:line="119" pos:column="42">n<pos:position pos:line="119" pos:column="43"/></name><operator pos:line="119" pos:column="43">.<pos:position pos:line="119" pos:column="44"/></operator><name pos:line="119" pos:column="44">host<pos:position pos:line="119" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="119" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="51"/></expr_stmt></block></then></if>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if></elseif> <elseif pos:line="120" pos:column="7">else <if pos:line="120" pos:column="12">if <condition pos:line="120" pos:column="15">(<expr><name pos:line="120" pos:column="16">pkg_type<pos:position pos:line="120" pos:column="24"/></name> <operator pos:line="120" pos:column="25">==<pos:position pos:line="120" pos:column="27"/></operator> <name pos:line="120" pos:column="28">TYPE_PLUGIN<pos:position pos:line="120" pos:column="39"/></name></expr>)<pos:position pos:line="120" pos:column="40"/></condition><then pos:line="120" pos:column="40"> <block pos:line="120" pos:column="41">{
      <expr_stmt><expr><name pos:line="121" pos:column="7">status<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <call><name pos:line="121" pos:column="16">parse_part_string<pos:position pos:line="121" pos:column="33"/></name><argument_list pos:line="121" pos:column="33">(<argument><expr><operator pos:line="121" pos:column="34">&amp;<pos:position pos:line="121" pos:column="39"/></operator><name pos:line="121" pos:column="35">buffer<pos:position pos:line="121" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="43">&amp;<pos:position pos:line="121" pos:column="48"/></operator><name pos:line="121" pos:column="44">buffer_size<pos:position pos:line="121" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="57">vl<pos:position pos:line="121" pos:column="59"/></name><operator pos:line="121" pos:column="59">.<pos:position pos:line="121" pos:column="60"/></operator><name pos:line="121" pos:column="60">plugin<pos:position pos:line="121" pos:column="66"/></name></name></expr></argument>,
                                 <argument><expr><sizeof pos:line="122" pos:column="34">sizeof<argument_list pos:line="122" pos:column="40">(<argument><expr><name><name pos:line="122" pos:column="41">vl<pos:position pos:line="122" pos:column="43"/></name><operator pos:line="122" pos:column="43">.<pos:position pos:line="122" pos:column="44"/></operator><name pos:line="122" pos:column="44">plugin<pos:position pos:line="122" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="122" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="53"/></expr_stmt>
      <if pos:line="123" pos:column="7">if <condition pos:line="123" pos:column="10">(<expr><name pos:line="123" pos:column="11">status<pos:position pos:line="123" pos:column="17"/></name> <operator pos:line="123" pos:column="18">==<pos:position pos:line="123" pos:column="20"/></operator> <literal type="number" pos:line="123" pos:column="21">0<pos:position pos:line="123" pos:column="22"/></literal></expr>)<pos:position pos:line="123" pos:column="23"/></condition><then pos:line="123" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="124" pos:column="9">sstrncpy<pos:position pos:line="124" pos:column="17"/></name><argument_list pos:line="124" pos:column="17">(<argument><expr><name><name pos:line="124" pos:column="18">n<pos:position pos:line="124" pos:column="19"/></name><operator pos:line="124" pos:column="19">.<pos:position pos:line="124" pos:column="20"/></operator><name pos:line="124" pos:column="20">plugin<pos:position pos:line="124" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="28">vl<pos:position pos:line="124" pos:column="30"/></name><operator pos:line="124" pos:column="30">.<pos:position pos:line="124" pos:column="31"/></operator><name pos:line="124" pos:column="31">plugin<pos:position pos:line="124" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="124" pos:column="39">sizeof<argument_list pos:line="124" pos:column="45">(<argument><expr><name><name pos:line="124" pos:column="46">n<pos:position pos:line="124" pos:column="47"/></name><operator pos:line="124" pos:column="47">.<pos:position pos:line="124" pos:column="48"/></operator><name pos:line="124" pos:column="48">plugin<pos:position pos:line="124" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="124" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="57"/></expr_stmt></block></then></if>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if></elseif> <elseif pos:line="125" pos:column="7">else <if pos:line="125" pos:column="12">if <condition pos:line="125" pos:column="15">(<expr><name pos:line="125" pos:column="16">pkg_type<pos:position pos:line="125" pos:column="24"/></name> <operator pos:line="125" pos:column="25">==<pos:position pos:line="125" pos:column="27"/></operator> <name pos:line="125" pos:column="28">TYPE_PLUGIN_INSTANCE<pos:position pos:line="125" pos:column="48"/></name></expr>)<pos:position pos:line="125" pos:column="49"/></condition><then pos:line="125" pos:column="49"> <block pos:line="125" pos:column="50">{
      <expr_stmt><expr><name pos:line="126" pos:column="7">status<pos:position pos:line="126" pos:column="13"/></name> <operator pos:line="126" pos:column="14">=<pos:position pos:line="126" pos:column="15"/></operator> <call><name pos:line="126" pos:column="16">parse_part_string<pos:position pos:line="126" pos:column="33"/></name><argument_list pos:line="126" pos:column="33">(<argument><expr><operator pos:line="126" pos:column="34">&amp;<pos:position pos:line="126" pos:column="39"/></operator><name pos:line="126" pos:column="35">buffer<pos:position pos:line="126" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="43">&amp;<pos:position pos:line="126" pos:column="48"/></operator><name pos:line="126" pos:column="44">buffer_size<pos:position pos:line="126" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="57">vl<pos:position pos:line="126" pos:column="59"/></name><operator pos:line="126" pos:column="59">.<pos:position pos:line="126" pos:column="60"/></operator><name pos:line="126" pos:column="60">plugin_instance<pos:position pos:line="126" pos:column="75"/></name></name></expr></argument>,
                                 <argument><expr><sizeof pos:line="127" pos:column="34">sizeof<argument_list pos:line="127" pos:column="40">(<argument><expr><name><name pos:line="127" pos:column="41">vl<pos:position pos:line="127" pos:column="43"/></name><operator pos:line="127" pos:column="43">.<pos:position pos:line="127" pos:column="44"/></operator><name pos:line="127" pos:column="44">plugin_instance<pos:position pos:line="127" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="62"/></expr_stmt>
      <if pos:line="128" pos:column="7">if <condition pos:line="128" pos:column="10">(<expr><name pos:line="128" pos:column="11">status<pos:position pos:line="128" pos:column="17"/></name> <operator pos:line="128" pos:column="18">==<pos:position pos:line="128" pos:column="20"/></operator> <literal type="number" pos:line="128" pos:column="21">0<pos:position pos:line="128" pos:column="22"/></literal></expr>)<pos:position pos:line="128" pos:column="23"/></condition><then pos:line="128" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="9">sstrncpy<pos:position pos:line="129" pos:column="17"/></name><argument_list pos:line="129" pos:column="17">(<argument><expr><name><name pos:line="129" pos:column="18">n<pos:position pos:line="129" pos:column="19"/></name><operator pos:line="129" pos:column="19">.<pos:position pos:line="129" pos:column="20"/></operator><name pos:line="129" pos:column="20">plugin_instance<pos:position pos:line="129" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="37">vl<pos:position pos:line="129" pos:column="39"/></name><operator pos:line="129" pos:column="39">.<pos:position pos:line="129" pos:column="40"/></operator><name pos:line="129" pos:column="40">plugin_instance<pos:position pos:line="129" pos:column="55"/></name></name></expr></argument>,
                 <argument><expr><sizeof pos:line="130" pos:column="18">sizeof<argument_list pos:line="130" pos:column="24">(<argument><expr><name><name pos:line="130" pos:column="25">n<pos:position pos:line="130" pos:column="26"/></name><operator pos:line="130" pos:column="26">.<pos:position pos:line="130" pos:column="27"/></operator><name pos:line="130" pos:column="27">plugin_instance<pos:position pos:line="130" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="130" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="45"/></expr_stmt></block></then></if>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if></elseif> <elseif pos:line="131" pos:column="7">else <if pos:line="131" pos:column="12">if <condition pos:line="131" pos:column="15">(<expr><name pos:line="131" pos:column="16">pkg_type<pos:position pos:line="131" pos:column="24"/></name> <operator pos:line="131" pos:column="25">==<pos:position pos:line="131" pos:column="27"/></operator> <name pos:line="131" pos:column="28">TYPE_TYPE<pos:position pos:line="131" pos:column="37"/></name></expr>)<pos:position pos:line="131" pos:column="38"/></condition><then pos:line="131" pos:column="38"> <block pos:line="131" pos:column="39">{
      <expr_stmt><expr><name pos:line="132" pos:column="7">status<pos:position pos:line="132" pos:column="13"/></name> <operator pos:line="132" pos:column="14">=<pos:position pos:line="132" pos:column="15"/></operator>
          <call><name pos:line="133" pos:column="11">parse_part_string<pos:position pos:line="133" pos:column="28"/></name><argument_list pos:line="133" pos:column="28">(<argument><expr><operator pos:line="133" pos:column="29">&amp;<pos:position pos:line="133" pos:column="34"/></operator><name pos:line="133" pos:column="30">buffer<pos:position pos:line="133" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="38">&amp;<pos:position pos:line="133" pos:column="43"/></operator><name pos:line="133" pos:column="39">buffer_size<pos:position pos:line="133" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="52">vl<pos:position pos:line="133" pos:column="54"/></name><operator pos:line="133" pos:column="54">.<pos:position pos:line="133" pos:column="55"/></operator><name pos:line="133" pos:column="55">type<pos:position pos:line="133" pos:column="59"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="133" pos:column="61">sizeof<argument_list pos:line="133" pos:column="67">(<argument><expr><name><name pos:line="133" pos:column="68">vl<pos:position pos:line="133" pos:column="70"/></name><operator pos:line="133" pos:column="70">.<pos:position pos:line="133" pos:column="71"/></operator><name pos:line="133" pos:column="71">type<pos:position pos:line="133" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="133" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="78"/></expr_stmt>
      <if pos:line="134" pos:column="7">if <condition pos:line="134" pos:column="10">(<expr><name pos:line="134" pos:column="11">status<pos:position pos:line="134" pos:column="17"/></name> <operator pos:line="134" pos:column="18">==<pos:position pos:line="134" pos:column="20"/></operator> <literal type="number" pos:line="134" pos:column="21">0<pos:position pos:line="134" pos:column="22"/></literal></expr>)<pos:position pos:line="134" pos:column="23"/></condition><then pos:line="134" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="9">sstrncpy<pos:position pos:line="135" pos:column="17"/></name><argument_list pos:line="135" pos:column="17">(<argument><expr><name><name pos:line="135" pos:column="18">n<pos:position pos:line="135" pos:column="19"/></name><operator pos:line="135" pos:column="19">.<pos:position pos:line="135" pos:column="20"/></operator><name pos:line="135" pos:column="20">type<pos:position pos:line="135" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="26">vl<pos:position pos:line="135" pos:column="28"/></name><operator pos:line="135" pos:column="28">.<pos:position pos:line="135" pos:column="29"/></operator><name pos:line="135" pos:column="29">type<pos:position pos:line="135" pos:column="33"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="135" pos:column="35">sizeof<argument_list pos:line="135" pos:column="41">(<argument><expr><name><name pos:line="135" pos:column="42">n<pos:position pos:line="135" pos:column="43"/></name><operator pos:line="135" pos:column="43">.<pos:position pos:line="135" pos:column="44"/></operator><name pos:line="135" pos:column="44">type<pos:position pos:line="135" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="135" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="51"/></expr_stmt></block></then></if>
    }<pos:position pos:line="136" pos:column="6"/></block></then></if></elseif> <elseif pos:line="136" pos:column="7">else <if pos:line="136" pos:column="12">if <condition pos:line="136" pos:column="15">(<expr><name pos:line="136" pos:column="16">pkg_type<pos:position pos:line="136" pos:column="24"/></name> <operator pos:line="136" pos:column="25">==<pos:position pos:line="136" pos:column="27"/></operator> <name pos:line="136" pos:column="28">TYPE_TYPE_INSTANCE<pos:position pos:line="136" pos:column="46"/></name></expr>)<pos:position pos:line="136" pos:column="47"/></condition><then pos:line="136" pos:column="47"> <block pos:line="136" pos:column="48">{
      <expr_stmt><expr><name pos:line="137" pos:column="7">status<pos:position pos:line="137" pos:column="13"/></name> <operator pos:line="137" pos:column="14">=<pos:position pos:line="137" pos:column="15"/></operator> <call><name pos:line="137" pos:column="16">parse_part_string<pos:position pos:line="137" pos:column="33"/></name><argument_list pos:line="137" pos:column="33">(<argument><expr><operator pos:line="137" pos:column="34">&amp;<pos:position pos:line="137" pos:column="39"/></operator><name pos:line="137" pos:column="35">buffer<pos:position pos:line="137" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="137" pos:column="43">&amp;<pos:position pos:line="137" pos:column="48"/></operator><name pos:line="137" pos:column="44">buffer_size<pos:position pos:line="137" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="57">vl<pos:position pos:line="137" pos:column="59"/></name><operator pos:line="137" pos:column="59">.<pos:position pos:line="137" pos:column="60"/></operator><name pos:line="137" pos:column="60">type_instance<pos:position pos:line="137" pos:column="73"/></name></name></expr></argument>,
                                 <argument><expr><sizeof pos:line="138" pos:column="34">sizeof<argument_list pos:line="138" pos:column="40">(<argument><expr><name><name pos:line="138" pos:column="41">vl<pos:position pos:line="138" pos:column="43"/></name><operator pos:line="138" pos:column="43">.<pos:position pos:line="138" pos:column="44"/></operator><name pos:line="138" pos:column="44">type_instance<pos:position pos:line="138" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="138" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="60"/></expr_stmt>
      <if pos:line="139" pos:column="7">if <condition pos:line="139" pos:column="10">(<expr><name pos:line="139" pos:column="11">status<pos:position pos:line="139" pos:column="17"/></name> <operator pos:line="139" pos:column="18">==<pos:position pos:line="139" pos:column="20"/></operator> <literal type="number" pos:line="139" pos:column="21">0<pos:position pos:line="139" pos:column="22"/></literal></expr>)<pos:position pos:line="139" pos:column="23"/></condition><then pos:line="139" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="9">sstrncpy<pos:position pos:line="140" pos:column="17"/></name><argument_list pos:line="140" pos:column="17">(<argument><expr><name><name pos:line="140" pos:column="18">n<pos:position pos:line="140" pos:column="19"/></name><operator pos:line="140" pos:column="19">.<pos:position pos:line="140" pos:column="20"/></operator><name pos:line="140" pos:column="20">type_instance<pos:position pos:line="140" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="35">vl<pos:position pos:line="140" pos:column="37"/></name><operator pos:line="140" pos:column="37">.<pos:position pos:line="140" pos:column="38"/></operator><name pos:line="140" pos:column="38">type_instance<pos:position pos:line="140" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="140" pos:column="53">sizeof<argument_list pos:line="140" pos:column="59">(<argument><expr><name><name pos:line="140" pos:column="60">n<pos:position pos:line="140" pos:column="61"/></name><operator pos:line="140" pos:column="61">.<pos:position pos:line="140" pos:column="62"/></operator><name pos:line="140" pos:column="62">type_instance<pos:position pos:line="140" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="140" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="78"/></expr_stmt></block></then></if>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if></elseif> <elseif pos:line="141" pos:column="7">else <if pos:line="141" pos:column="12">if <condition pos:line="141" pos:column="15">(<expr><name pos:line="141" pos:column="16">pkg_type<pos:position pos:line="141" pos:column="24"/></name> <operator pos:line="141" pos:column="25">==<pos:position pos:line="141" pos:column="27"/></operator> <name pos:line="141" pos:column="28">TYPE_MESSAGE<pos:position pos:line="141" pos:column="40"/></name></expr>)<pos:position pos:line="141" pos:column="41"/></condition><then pos:line="141" pos:column="41"> <block pos:line="141" pos:column="42">{
      <expr_stmt><expr><name pos:line="142" pos:column="7">status<pos:position pos:line="142" pos:column="13"/></name> <operator pos:line="142" pos:column="14">=<pos:position pos:line="142" pos:column="15"/></operator> <call><name pos:line="142" pos:column="16">parse_part_string<pos:position pos:line="142" pos:column="33"/></name><argument_list pos:line="142" pos:column="33">(<argument><expr><operator pos:line="142" pos:column="34">&amp;<pos:position pos:line="142" pos:column="39"/></operator><name pos:line="142" pos:column="35">buffer<pos:position pos:line="142" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="43">&amp;<pos:position pos:line="142" pos:column="48"/></operator><name pos:line="142" pos:column="44">buffer_size<pos:position pos:line="142" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="57">n<pos:position pos:line="142" pos:column="58"/></name><operator pos:line="142" pos:column="58">.<pos:position pos:line="142" pos:column="59"/></operator><name pos:line="142" pos:column="59">message<pos:position pos:line="142" pos:column="66"/></name></name></expr></argument>,
                                 <argument><expr><sizeof pos:line="143" pos:column="34">sizeof<argument_list pos:line="143" pos:column="40">(<argument><expr><name><name pos:line="143" pos:column="41">n<pos:position pos:line="143" pos:column="42"/></name><operator pos:line="143" pos:column="42">.<pos:position pos:line="143" pos:column="43"/></operator><name pos:line="143" pos:column="43">message<pos:position pos:line="143" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="143" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="53"/></expr_stmt>

      <if pos:line="145" pos:column="7">if <condition pos:line="145" pos:column="10">(<expr><name pos:line="145" pos:column="11">status<pos:position pos:line="145" pos:column="17"/></name> <operator pos:line="145" pos:column="18">!=<pos:position pos:line="145" pos:column="20"/></operator> <literal type="number" pos:line="145" pos:column="21">0<pos:position pos:line="145" pos:column="22"/></literal></expr>)<pos:position pos:line="145" pos:column="23"/></condition><then pos:line="145" pos:column="23"> <block pos:line="145" pos:column="24">{
        <comment type="block" pos:line="146" pos:column="9">/* do nothing */</comment>
      }<pos:position pos:line="147" pos:column="8"/></block></then> <elseif pos:line="147" pos:column="9">else <if pos:line="147" pos:column="14">if <condition pos:line="147" pos:column="17">(<expr><operator pos:line="147" pos:column="18">(<pos:position pos:line="147" pos:column="19"/></operator><name><name pos:line="147" pos:column="19">n<pos:position pos:line="147" pos:column="20"/></name><operator pos:line="147" pos:column="20">.<pos:position pos:line="147" pos:column="21"/></operator><name pos:line="147" pos:column="21">severity<pos:position pos:line="147" pos:column="29"/></name></name> <operator pos:line="147" pos:column="30">!=<pos:position pos:line="147" pos:column="32"/></operator> <name pos:line="147" pos:column="33">NOTIF_FAILURE<pos:position pos:line="147" pos:column="46"/></name><operator pos:line="147" pos:column="46">)<pos:position pos:line="147" pos:column="47"/></operator> <operator pos:line="147" pos:column="48">&amp;&amp;<pos:position pos:line="147" pos:column="58"/></operator>
                 <operator pos:line="148" pos:column="18">(<pos:position pos:line="148" pos:column="19"/></operator><name><name pos:line="148" pos:column="19">n<pos:position pos:line="148" pos:column="20"/></name><operator pos:line="148" pos:column="20">.<pos:position pos:line="148" pos:column="21"/></operator><name pos:line="148" pos:column="21">severity<pos:position pos:line="148" pos:column="29"/></name></name> <operator pos:line="148" pos:column="30">!=<pos:position pos:line="148" pos:column="32"/></operator> <name pos:line="148" pos:column="33">NOTIF_WARNING<pos:position pos:line="148" pos:column="46"/></name><operator pos:line="148" pos:column="46">)<pos:position pos:line="148" pos:column="47"/></operator> <operator pos:line="148" pos:column="48">&amp;&amp;<pos:position pos:line="148" pos:column="58"/></operator> <operator pos:line="148" pos:column="51">(<pos:position pos:line="148" pos:column="52"/></operator><name><name pos:line="148" pos:column="52">n<pos:position pos:line="148" pos:column="53"/></name><operator pos:line="148" pos:column="53">.<pos:position pos:line="148" pos:column="54"/></operator><name pos:line="148" pos:column="54">severity<pos:position pos:line="148" pos:column="62"/></name></name> <operator pos:line="148" pos:column="63">!=<pos:position pos:line="148" pos:column="65"/></operator> <name pos:line="148" pos:column="66">NOTIF_OKAY<pos:position pos:line="148" pos:column="76"/></name><operator pos:line="148" pos:column="76">)<pos:position pos:line="148" pos:column="77"/></operator></expr>)<pos:position pos:line="148" pos:column="78"/></condition><then pos:line="148" pos:column="78"> <block pos:line="148" pos:column="79">{
        <expr_stmt><expr><call><name pos:line="149" pos:column="9">INFO<pos:position pos:line="149" pos:column="13"/></name><argument_list pos:line="149" pos:column="13">(<argument><expr><literal type="string" pos:line="149" pos:column="14">"network plugin: "<pos:position pos:line="149" pos:column="32"/></literal>
             <literal type="string" pos:line="150" pos:column="14">"Ignoring notification with "<pos:position pos:line="150" pos:column="43"/></literal>
             <literal type="string" pos:line="151" pos:column="14">"unknown severity %i."<pos:position pos:line="151" pos:column="36"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="152" pos:column="14">n<pos:position pos:line="152" pos:column="15"/></name><operator pos:line="152" pos:column="15">.<pos:position pos:line="152" pos:column="16"/></operator><name pos:line="152" pos:column="16">severity<pos:position pos:line="152" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="152" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="153" pos:column="8"/></block></then></if></elseif> <elseif pos:line="153" pos:column="9">else <if pos:line="153" pos:column="14">if <condition pos:line="153" pos:column="17">(<expr><name><name pos:line="153" pos:column="18">n<pos:position pos:line="153" pos:column="19"/></name><operator pos:line="153" pos:column="19">.<pos:position pos:line="153" pos:column="20"/></operator><name pos:line="153" pos:column="20">time<pos:position pos:line="153" pos:column="24"/></name></name> <operator pos:line="153" pos:column="25">==<pos:position pos:line="153" pos:column="27"/></operator> <literal type="number" pos:line="153" pos:column="28">0<pos:position pos:line="153" pos:column="29"/></literal></expr>)<pos:position pos:line="153" pos:column="30"/></condition><then pos:line="153" pos:column="30"> <block pos:line="153" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="154" pos:column="9">INFO<pos:position pos:line="154" pos:column="13"/></name><argument_list pos:line="154" pos:column="13">(<argument><expr><literal type="string" pos:line="154" pos:column="14">"network plugin: "<pos:position pos:line="154" pos:column="32"/></literal>
             <literal type="string" pos:line="155" pos:column="14">"Ignoring notification with "<pos:position pos:line="155" pos:column="43"/></literal>
             <literal type="string" pos:line="156" pos:column="14">"time == 0."<pos:position pos:line="156" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="157" pos:column="8"/></block></then></if></elseif> <elseif pos:line="157" pos:column="9">else <if pos:line="157" pos:column="14">if <condition pos:line="157" pos:column="17">(<expr><call><name pos:line="157" pos:column="18">strlen<pos:position pos:line="157" pos:column="24"/></name><argument_list pos:line="157" pos:column="24">(<argument><expr><name><name pos:line="157" pos:column="25">n<pos:position pos:line="157" pos:column="26"/></name><operator pos:line="157" pos:column="26">.<pos:position pos:line="157" pos:column="27"/></operator><name pos:line="157" pos:column="27">message<pos:position pos:line="157" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="35"/></argument_list></call> <operator pos:line="157" pos:column="36">==<pos:position pos:line="157" pos:column="38"/></operator> <literal type="number" pos:line="157" pos:column="39">0<pos:position pos:line="157" pos:column="40"/></literal></expr>)<pos:position pos:line="157" pos:column="41"/></condition><then pos:line="157" pos:column="41"> <block pos:line="157" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="158" pos:column="9">INFO<pos:position pos:line="158" pos:column="13"/></name><argument_list pos:line="158" pos:column="13">(<argument><expr><literal type="string" pos:line="158" pos:column="14">"network plugin: "<pos:position pos:line="158" pos:column="32"/></literal>
             <literal type="string" pos:line="159" pos:column="14">"Ignoring notification with "<pos:position pos:line="159" pos:column="43"/></literal>
             <literal type="string" pos:line="160" pos:column="14">"an empty message."<pos:position pos:line="160" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="161" pos:column="8"/></block></then></if></elseif> <else pos:line="161" pos:column="9">else <block pos:line="161" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="162" pos:column="9">network_dispatch_notification<pos:position pos:line="162" pos:column="38"/></name><argument_list pos:line="162" pos:column="38">(<argument><expr><operator pos:line="162" pos:column="39">&amp;<pos:position pos:line="162" pos:column="44"/></operator><name pos:line="162" pos:column="40">n<pos:position pos:line="162" pos:column="41"/></name></expr></argument>)<pos:position pos:line="162" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="163" pos:column="8"/></block></else></if>
    }<pos:position pos:line="164" pos:column="6"/></block></then></if></elseif> <elseif pos:line="164" pos:column="7">else <if pos:line="164" pos:column="12">if <condition pos:line="164" pos:column="15">(<expr><name pos:line="164" pos:column="16">pkg_type<pos:position pos:line="164" pos:column="24"/></name> <operator pos:line="164" pos:column="25">==<pos:position pos:line="164" pos:column="27"/></operator> <name pos:line="164" pos:column="28">TYPE_SEVERITY<pos:position pos:line="164" pos:column="41"/></name></expr>)<pos:position pos:line="164" pos:column="42"/></condition><then pos:line="164" pos:column="42"> <block pos:line="164" pos:column="43">{
      <decl_stmt><decl><type><name pos:line="165" pos:column="7">uint64_t<pos:position pos:line="165" pos:column="15"/></name></type> <name pos:line="165" pos:column="16">tmp<pos:position pos:line="165" pos:column="19"/></name> <init pos:line="165" pos:column="20">= <expr><literal type="number" pos:line="165" pos:column="22">0<pos:position pos:line="165" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="165" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="166" pos:column="7">status<pos:position pos:line="166" pos:column="13"/></name> <operator pos:line="166" pos:column="14">=<pos:position pos:line="166" pos:column="15"/></operator> <call><name pos:line="166" pos:column="16">parse_part_number<pos:position pos:line="166" pos:column="33"/></name><argument_list pos:line="166" pos:column="33">(<argument><expr><operator pos:line="166" pos:column="34">&amp;<pos:position pos:line="166" pos:column="39"/></operator><name pos:line="166" pos:column="35">buffer<pos:position pos:line="166" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="43">&amp;<pos:position pos:line="166" pos:column="48"/></operator><name pos:line="166" pos:column="44">buffer_size<pos:position pos:line="166" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="57">&amp;<pos:position pos:line="166" pos:column="62"/></operator><name pos:line="166" pos:column="58">tmp<pos:position pos:line="166" pos:column="61"/></name></expr></argument>)<pos:position pos:line="166" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="63"/></expr_stmt>
      <if pos:line="167" pos:column="7">if <condition pos:line="167" pos:column="10">(<expr><name pos:line="167" pos:column="11">status<pos:position pos:line="167" pos:column="17"/></name> <operator pos:line="167" pos:column="18">==<pos:position pos:line="167" pos:column="20"/></operator> <literal type="number" pos:line="167" pos:column="21">0<pos:position pos:line="167" pos:column="22"/></literal></expr>)<pos:position pos:line="167" pos:column="23"/></condition><then pos:line="167" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="168" pos:column="9">n<pos:position pos:line="168" pos:column="10"/></name><operator pos:line="168" pos:column="10">.<pos:position pos:line="168" pos:column="11"/></operator><name pos:line="168" pos:column="11">severity<pos:position pos:line="168" pos:column="19"/></name></name> <operator pos:line="168" pos:column="20">=<pos:position pos:line="168" pos:column="21"/></operator> <operator pos:line="168" pos:column="22">(<pos:position pos:line="168" pos:column="23"/></operator><name pos:line="168" pos:column="23">int<pos:position pos:line="168" pos:column="26"/></name><operator pos:line="168" pos:column="26">)<pos:position pos:line="168" pos:column="27"/></operator><name pos:line="168" pos:column="27">tmp<pos:position pos:line="168" pos:column="30"/></name></expr>;<pos:position pos:line="168" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="169" pos:column="6"/></block></then></if></elseif> <else pos:line="169" pos:column="7">else <block pos:line="169" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="170" pos:column="7">DEBUG<pos:position pos:line="170" pos:column="12"/></name><argument_list pos:line="170" pos:column="12">(<argument><expr><literal type="string" pos:line="170" pos:column="13">"network plugin: parse_packet: Unknown part"<pos:position pos:line="170" pos:column="57"/></literal>
            <literal type="string" pos:line="171" pos:column="13">" type: 0x%04hx"<pos:position pos:line="171" pos:column="29"/></literal></expr></argument>,
            <argument><expr><name pos:line="172" pos:column="13">pkg_type<pos:position pos:line="172" pos:column="21"/></name></expr></argument>)<pos:position pos:line="172" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="173" pos:column="7">buffer<pos:position pos:line="173" pos:column="13"/></name> <operator pos:line="173" pos:column="14">=<pos:position pos:line="173" pos:column="15"/></operator> <operator pos:line="173" pos:column="16">(<pos:position pos:line="173" pos:column="17"/></operator><operator pos:line="173" pos:column="17">(<pos:position pos:line="173" pos:column="18"/></operator><name pos:line="173" pos:column="18">char<pos:position pos:line="173" pos:column="22"/></name> <operator pos:line="173" pos:column="23">*<pos:position pos:line="173" pos:column="24"/></operator><operator pos:line="173" pos:column="24">)<pos:position pos:line="173" pos:column="25"/></operator><name pos:line="173" pos:column="25">buffer<pos:position pos:line="173" pos:column="31"/></name><operator pos:line="173" pos:column="31">)<pos:position pos:line="173" pos:column="32"/></operator> <operator pos:line="173" pos:column="33">+<pos:position pos:line="173" pos:column="34"/></operator> <name pos:line="173" pos:column="35">pkg_length<pos:position pos:line="173" pos:column="45"/></name></expr>;<pos:position pos:line="173" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="174" pos:column="7">buffer_size<pos:position pos:line="174" pos:column="18"/></name> <operator pos:line="174" pos:column="19">-=<pos:position pos:line="174" pos:column="21"/></operator> <operator pos:line="174" pos:column="22">(<pos:position pos:line="174" pos:column="23"/></operator><name pos:line="174" pos:column="23">size_t<pos:position pos:line="174" pos:column="29"/></name><operator pos:line="174" pos:column="29">)<pos:position pos:line="174" pos:column="30"/></operator><name pos:line="174" pos:column="30">pkg_length<pos:position pos:line="174" pos:column="40"/></name></expr>;<pos:position pos:line="174" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="175" pos:column="6"/></block></else></if>
  }<pos:position pos:line="176" pos:column="4"/></block></while> <comment type="block" pos:line="176" pos:column="5">/* while (buffer_size &gt; sizeof (part_header_t)) */</comment>

  <if pos:line="178" pos:column="3">if <condition pos:line="178" pos:column="6">(<expr><name pos:line="178" pos:column="7">status<pos:position pos:line="178" pos:column="13"/></name> <operator pos:line="178" pos:column="14">==<pos:position pos:line="178" pos:column="16"/></operator> <literal type="number" pos:line="178" pos:column="17">0<pos:position pos:line="178" pos:column="18"/></literal> <operator pos:line="178" pos:column="19">&amp;&amp;<pos:position pos:line="178" pos:column="29"/></operator> <name pos:line="178" pos:column="22">buffer_size<pos:position pos:line="178" pos:column="33"/></name> <operator pos:line="178" pos:column="34">&gt;<pos:position pos:line="178" pos:column="38"/></operator> <literal type="number" pos:line="178" pos:column="36">0<pos:position pos:line="178" pos:column="37"/></literal></expr>)<pos:position pos:line="178" pos:column="38"/></condition><then pos:line="178" pos:column="38">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="5">WARNING<pos:position pos:line="179" pos:column="12"/></name><argument_list pos:line="179" pos:column="12">(<argument><expr><literal type="string" pos:line="179" pos:column="13">"network plugin: parse_packet: Received truncated "<pos:position pos:line="179" pos:column="64"/></literal>
            <literal type="string" pos:line="180" pos:column="13">"packet, try increasing `MaxPacketSize'"<pos:position pos:line="180" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="55"/></expr_stmt></block></then></if>

  <return pos:line="182" pos:column="3">return <expr><operator pos:line="182" pos:column="10">(<pos:position pos:line="182" pos:column="11"/></operator><name pos:line="182" pos:column="11">status<pos:position pos:line="182" pos:column="17"/></name><operator pos:line="182" pos:column="17">)<pos:position pos:line="182" pos:column="18"/></operator></expr>;<pos:position pos:line="182" pos:column="19"/></return>
}<pos:position pos:line="183" pos:column="2"/></block></function></unit>
