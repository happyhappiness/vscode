<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_886_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_connect_inet<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">memcached_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">st<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">addrinfo<pos:position pos:line="2" pos:column="18"/></name></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">ai_list<pos:position pos:line="2" pos:column="27"/></name></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name> <init pos:line="3" pos:column="10">= <expr><operator pos:line="3" pos:column="12">-<pos:position pos:line="3" pos:column="13"/></operator><literal type="number" pos:line="3" pos:column="13">1<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name></type> <name pos:line="5" pos:column="19">ai_hints<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><block pos:line="5" pos:column="30">{<expr><operator pos:line="5" pos:column="31">.<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">ai_family<pos:position pos:line="5" pos:column="41"/></name> <operator pos:line="5" pos:column="42">=<pos:position pos:line="5" pos:column="43"/></operator> <name pos:line="5" pos:column="44">AF_UNSPEC<pos:position pos:line="5" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="6" pos:column="31">.<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">ai_flags<pos:position pos:line="6" pos:column="40"/></name> <operator pos:line="6" pos:column="41">=<pos:position pos:line="6" pos:column="42"/></operator> <name pos:line="6" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="6" pos:column="56"/></name></expr>,
                              <expr><operator pos:line="7" pos:column="31">.<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">ai_socktype<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">=<pos:position pos:line="7" pos:column="45"/></operator> <name pos:line="7" pos:column="46">SOCK_STREAM<pos:position pos:line="7" pos:column="57"/></name></expr>}<pos:position pos:line="7" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><call><name pos:line="9" pos:column="16">getaddrinfo<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name><name pos:line="9" pos:column="28">st<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">connhost<pos:position pos:line="9" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="42">st<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">-&gt;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="46">connport<pos:position pos:line="9" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="56">&amp;<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="57">ai_hints<pos:position pos:line="9" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="67">&amp;<pos:position pos:line="9" pos:column="72"/></operator><name pos:line="9" pos:column="68">ai_list<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="77"/></decl_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">errbuf<pos:position pos:line="11" pos:column="16"/></name><index pos:line="11" pos:column="16">[<expr><literal type="number" pos:line="11" pos:column="17">1024<pos:position pos:line="11" pos:column="21"/></literal></expr>]<pos:position pos:line="11" pos:column="22"/></index></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><literal type="string" pos:line="12" pos:column="11">"memcached plugin: memcached_connect_inet: "<pos:position pos:line="12" pos:column="55"/></literal>
          <literal type="string" pos:line="13" pos:column="11">"getaddrinfo(%s,%s) failed: %s"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="14" pos:column="11">st<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">connhost<pos:position pos:line="14" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="25">st<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">connport<pos:position pos:line="14" pos:column="37"/></name></name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="15" pos:column="11">(<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">status<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">EAI_SYSTEM<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">)<pos:position pos:line="15" pos:column="33"/></operator></expr> ?<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <expr><call><name pos:line="15" pos:column="36">sstrerror<pos:position pos:line="15" pos:column="45"/></name><argument_list pos:line="15" pos:column="45">(<argument><expr><name pos:line="15" pos:column="46">errno<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">errbuf<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="61">sizeof<argument_list pos:line="15" pos:column="67">(<argument><expr><name pos:line="15" pos:column="68">errbuf<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>
                                 <pos:position pos:line="16" pos:column="34"/></then><else pos:line="16" pos:column="34">: <expr><call><name pos:line="16" pos:column="36">gai_strerror<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">status<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">-<pos:position pos:line="17" pos:column="13"/></operator><literal type="number" pos:line="17" pos:column="13">1<pos:position pos:line="17" pos:column="14"/></literal></expr>;<pos:position pos:line="17" pos:column="15"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <for pos:line="20" pos:column="3">for <control pos:line="20" pos:column="7">(<init><decl><type><name><name pos:line="20" pos:column="8">struct<pos:position pos:line="20" pos:column="14"/></name> <name pos:line="20" pos:column="15">addrinfo<pos:position pos:line="20" pos:column="23"/></name></name> <modifier pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></modifier><name pos:line="20" pos:column="25">ai_ptr<pos:position pos:line="20" pos:column="31"/></name></type> <init pos:line="20" pos:column="32">= <expr><name pos:line="20" pos:column="34">ai_list<pos:position pos:line="20" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="42"/></init> <condition><expr><name pos:line="20" pos:column="43">ai_ptr<pos:position pos:line="20" pos:column="49"/></name> <operator pos:line="20" pos:column="50">!=<pos:position pos:line="20" pos:column="52"/></operator> <name pos:line="20" pos:column="53">NULL<pos:position pos:line="20" pos:column="57"/></name></expr>;<pos:position pos:line="20" pos:column="58"/></condition>
       <incr><expr><name pos:line="21" pos:column="8">ai_ptr<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name><name pos:line="21" pos:column="17">ai_ptr<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">ai_next<pos:position pos:line="21" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="21" pos:column="33"/></control> <block pos:line="21" pos:column="34">{
    <comment type="block" pos:line="22" pos:column="5">/* create our socket descriptor */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">fd<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">=<pos:position pos:line="23" pos:column="9"/></operator> <call><name pos:line="23" pos:column="10">socket<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name><name pos:line="23" pos:column="17">ai_ptr<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">ai_family<pos:position pos:line="23" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="36">ai_ptr<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">ai_socktype<pos:position pos:line="23" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="57">ai_ptr<pos:position pos:line="23" pos:column="63"/></name><operator pos:line="23" pos:column="63">-&gt;<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="65">ai_protocol<pos:position pos:line="23" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="78"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">fd<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">&lt;<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <block pos:line="24" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">char<pos:position pos:line="25" pos:column="11"/></name></type> <name><name pos:line="25" pos:column="12">errbuf<pos:position pos:line="25" pos:column="18"/></name><index pos:line="25" pos:column="18">[<expr><literal type="number" pos:line="25" pos:column="19">1024<pos:position pos:line="25" pos:column="23"/></literal></expr>]<pos:position pos:line="25" pos:column="24"/></index></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">WARNING<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><literal type="string" pos:line="26" pos:column="15">"memcached plugin: memcached_connect_inet: "<pos:position pos:line="26" pos:column="59"/></literal>
              <literal type="string" pos:line="27" pos:column="15">"socket(2) failed: %s"<pos:position pos:line="27" pos:column="37"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="28" pos:column="15">sstrerror<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">errno<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="32">errbuf<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="40">sizeof<argument_list pos:line="28" pos:column="46">(<argument><expr><name pos:line="28" pos:column="47">errbuf<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
      <continue pos:line="29" pos:column="7">continue;<pos:position pos:line="29" pos:column="16"/></continue>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* switch socket to non-blocking mode */</comment>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int<pos:position pos:line="33" pos:column="8"/></name></type> <name pos:line="33" pos:column="9">flags<pos:position pos:line="33" pos:column="14"/></name> <init pos:line="33" pos:column="15">= <expr><call><name pos:line="33" pos:column="17">fcntl<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">fd<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">F_GETFL<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">status<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">fcntl<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">fd<pos:position pos:line="34" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="24">F_SETFL<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="33">flags<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">|<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">O_NONBLOCK<pos:position pos:line="34" pos:column="51"/></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">status<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">!=<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="19">0<pos:position pos:line="35" pos:column="20"/></literal></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">close<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">fd<pos:position pos:line="36" pos:column="15"/></name></expr></argument>)<pos:position pos:line="36" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">fd<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <operator pos:line="37" pos:column="12">-<pos:position pos:line="37" pos:column="13"/></operator><literal type="number" pos:line="37" pos:column="13">1<pos:position pos:line="37" pos:column="14"/></literal></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt>
      <continue pos:line="38" pos:column="7">continue;<pos:position pos:line="38" pos:column="16"/></continue>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/* connect to the memcached daemon */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">status<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">int<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">)<pos:position pos:line="42" pos:column="19"/></operator><call><name pos:line="42" pos:column="19">connect<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">fd<pos:position pos:line="42" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="31">ai_ptr<pos:position pos:line="42" pos:column="37"/></name><operator pos:line="42" pos:column="37">-&gt;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="39">ai_addr<pos:position pos:line="42" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="48">ai_ptr<pos:position pos:line="42" pos:column="54"/></name><operator pos:line="42" pos:column="54">-&gt;<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="56">ai_addrlen<pos:position pos:line="42" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="68"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">status<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">!=<pos:position pos:line="43" pos:column="18"/></operator> <literal type="number" pos:line="43" pos:column="19">0<pos:position pos:line="43" pos:column="20"/></literal> <operator pos:line="43" pos:column="21">&amp;&amp;<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="24">errno<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">!=<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">EINPROGRESS<pos:position pos:line="43" pos:column="44"/></name></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45"> <block pos:line="43" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">shutdown<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">fd<pos:position pos:line="44" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="20">SHUT_RDWR<pos:position pos:line="44" pos:column="29"/></name></expr></argument>)<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">close<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">fd<pos:position pos:line="45" pos:column="15"/></name></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="46" pos:column="7">fd<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <operator pos:line="46" pos:column="12">-<pos:position pos:line="46" pos:column="13"/></operator><literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>
      <continue pos:line="47" pos:column="7">continue;<pos:position pos:line="47" pos:column="16"/></continue>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="50" pos:column="5">/* Wait until connection establishes */</comment>
    <decl_stmt><decl><type><name><name pos:line="51" pos:column="5">struct<pos:position pos:line="51" pos:column="11"/></name> <name pos:line="51" pos:column="12">pollfd<pos:position pos:line="51" pos:column="18"/></name></name></type> <name pos:line="51" pos:column="19">pollfd<pos:position pos:line="51" pos:column="25"/></name> <init pos:line="51" pos:column="26">= <expr><block pos:line="51" pos:column="28">{
        <expr><operator pos:line="52" pos:column="9">.<pos:position pos:line="52" pos:column="10"/></operator><name pos:line="52" pos:column="10">fd<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <name pos:line="52" pos:column="15">fd<pos:position pos:line="52" pos:column="17"/></name></expr>, <expr><operator pos:line="52" pos:column="19">.<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="20">events<pos:position pos:line="52" pos:column="26"/></name> <operator pos:line="52" pos:column="27">=<pos:position pos:line="52" pos:column="28"/></operator> <name pos:line="52" pos:column="29">POLLOUT<pos:position pos:line="52" pos:column="36"/></name></expr>,
    }<pos:position pos:line="53" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="53" pos:column="7"/></decl_stmt>
    <do pos:line="54" pos:column="5">do
      <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="7">status<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <call><name pos:line="55" pos:column="16">poll<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><operator pos:line="55" pos:column="21">&amp;<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="22">pollfd<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="30">1<pos:position pos:line="55" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="33">MEMCACHED_CONNECT_TIMEOUT<pos:position pos:line="55" pos:column="58"/></name></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="60"/></expr_stmt></block>
    while <condition pos:line="56" pos:column="11">(<expr><name pos:line="56" pos:column="12">status<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">&lt;<pos:position pos:line="56" pos:column="23"/></operator> <literal type="number" pos:line="56" pos:column="21">0<pos:position pos:line="56" pos:column="22"/></literal> <operator pos:line="56" pos:column="23">&amp;&amp;<pos:position pos:line="56" pos:column="33"/></operator> <name pos:line="56" pos:column="26">errno<pos:position pos:line="56" pos:column="31"/></name> <operator pos:line="56" pos:column="32">==<pos:position pos:line="56" pos:column="34"/></operator> <name pos:line="56" pos:column="35">EINTR<pos:position pos:line="56" pos:column="40"/></name></expr>)<pos:position pos:line="56" pos:column="41"/></condition>;<pos:position pos:line="56" pos:column="42"/></do>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">status<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">&lt;=<pos:position pos:line="57" pos:column="21"/></operator> <literal type="number" pos:line="57" pos:column="19">0<pos:position pos:line="57" pos:column="20"/></literal></expr>)<pos:position pos:line="57" pos:column="21"/></condition><then pos:line="57" pos:column="21"> <block pos:line="57" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">close<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">fd<pos:position pos:line="58" pos:column="15"/></name></expr></argument>)<pos:position pos:line="58" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="59" pos:column="7">fd<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <operator pos:line="59" pos:column="12">-<pos:position pos:line="59" pos:column="13"/></operator><literal type="number" pos:line="59" pos:column="13">1<pos:position pos:line="59" pos:column="14"/></literal></expr>;<pos:position pos:line="59" pos:column="15"/></expr_stmt>
      <continue pos:line="60" pos:column="7">continue;<pos:position pos:line="60" pos:column="16"/></continue>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="63" pos:column="5">/* Check if all is good */</comment>
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">int<pos:position pos:line="64" pos:column="8"/></name></type> <name pos:line="64" pos:column="9">socket_error<pos:position pos:line="64" pos:column="21"/></name></decl>;<pos:position pos:line="64" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">status<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <call><name pos:line="65" pos:column="14">getsockopt<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">fd<pos:position pos:line="65" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="29">SOL_SOCKET<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">SO_ERROR<pos:position pos:line="65" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="51">(<pos:position pos:line="65" pos:column="52"/></operator><name pos:line="65" pos:column="52">void<pos:position pos:line="65" pos:column="56"/></name> <operator pos:line="65" pos:column="57">*<pos:position pos:line="65" pos:column="58"/></operator><operator pos:line="65" pos:column="58">)<pos:position pos:line="65" pos:column="59"/></operator><operator pos:line="65" pos:column="59">&amp;<pos:position pos:line="65" pos:column="64"/></operator><name pos:line="65" pos:column="60">socket_error<pos:position pos:line="65" pos:column="72"/></name></expr></argument>,
                        <argument><expr><operator pos:line="66" pos:column="25">&amp;<pos:position pos:line="66" pos:column="30"/></operator><operator pos:line="66" pos:column="26">(<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="27">socklen_t<pos:position pos:line="66" pos:column="36"/></name><operator pos:line="66" pos:column="36">)<pos:position pos:line="66" pos:column="37"/></operator><block pos:line="66" pos:column="37">{<expr pos:line="66" pos:column="38">sizeof<operator pos:line="66" pos:column="44">(<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="45">socket_error<pos:position pos:line="66" pos:column="57"/></name><operator pos:line="66" pos:column="57">)<pos:position pos:line="66" pos:column="58"/></operator></expr>}<pos:position pos:line="66" pos:column="59"/></block></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">status<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">!=<pos:position pos:line="67" pos:column="18"/></operator> <literal type="number" pos:line="67" pos:column="19">0<pos:position pos:line="67" pos:column="20"/></literal> <operator pos:line="67" pos:column="21">||<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">socket_error<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">!=<pos:position pos:line="67" pos:column="39"/></operator> <literal type="number" pos:line="67" pos:column="40">0<pos:position pos:line="67" pos:column="41"/></literal></expr>)<pos:position pos:line="67" pos:column="42"/></condition><then pos:line="67" pos:column="42"> <block pos:line="67" pos:column="43">{
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">close<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><name pos:line="68" pos:column="13">fd<pos:position pos:line="68" pos:column="15"/></name></expr></argument>)<pos:position pos:line="68" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="69" pos:column="7">fd<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator> <operator pos:line="69" pos:column="12">-<pos:position pos:line="69" pos:column="13"/></operator><literal type="number" pos:line="69" pos:column="13">1<pos:position pos:line="69" pos:column="14"/></literal></expr>;<pos:position pos:line="69" pos:column="15"/></expr_stmt>
      <continue pos:line="70" pos:column="7">continue;<pos:position pos:line="70" pos:column="16"/></continue>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="72" pos:column="5">/* A socket is opened and connection succeeded. We're done. */</comment>
    <break pos:line="73" pos:column="5">break;<pos:position pos:line="73" pos:column="11"/></break>
  }<pos:position pos:line="74" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="76" pos:column="3">freeaddrinfo<pos:position pos:line="76" pos:column="15"/></name><argument_list pos:line="76" pos:column="15">(<argument><expr><name pos:line="76" pos:column="16">ai_list<pos:position pos:line="76" pos:column="23"/></name></expr></argument>)<pos:position pos:line="76" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
  <return pos:line="77" pos:column="3">return <expr><name pos:line="77" pos:column="10">fd<pos:position pos:line="77" pos:column="12"/></name></expr>;<pos:position pos:line="77" pos:column="13"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
