<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_257_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ir_shutdown<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">(<pos:position pos:line="3" pos:column="8"/></operator><name><name pos:line="3" pos:column="8">rth<pos:position pos:line="3" pos:column="11"/></name><operator pos:line="3" pos:column="11">.<pos:position pos:line="3" pos:column="12"/></operator><name pos:line="3" pos:column="12">fd<pos:position pos:line="3" pos:column="14"/></name></name> <operator pos:line="3" pos:column="15">!=<pos:position pos:line="3" pos:column="17"/></operator> <literal type="number" pos:line="3" pos:column="18">0<pos:position pos:line="3" pos:column="19"/></literal><operator pos:line="3" pos:column="19">)<pos:position pos:line="3" pos:column="20"/></operator> <operator pos:line="3" pos:column="21">||<pos:position pos:line="3" pos:column="23"/></operator> <operator pos:line="3" pos:column="24">(<pos:position pos:line="3" pos:column="25"/></operator><name><name pos:line="3" pos:column="25">rth<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">.<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">seq<pos:position pos:line="3" pos:column="32"/></name></name> <operator pos:line="3" pos:column="33">!=<pos:position pos:line="3" pos:column="35"/></operator> <literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal><operator pos:line="3" pos:column="37">)<pos:position pos:line="3" pos:column="38"/></operator> <operator pos:line="3" pos:column="39">||<pos:position pos:line="3" pos:column="41"/></operator> <operator pos:line="3" pos:column="42">(<pos:position pos:line="3" pos:column="43"/></operator><name><name pos:line="3" pos:column="43">rth<pos:position pos:line="3" pos:column="46"/></name><operator pos:line="3" pos:column="46">.<pos:position pos:line="3" pos:column="47"/></operator><name pos:line="3" pos:column="47">dump<pos:position pos:line="3" pos:column="51"/></name></name> <operator pos:line="3" pos:column="52">!=<pos:position pos:line="3" pos:column="54"/></operator> <literal type="number" pos:line="3" pos:column="55">0<pos:position pos:line="3" pos:column="56"/></literal><operator pos:line="3" pos:column="56">)<pos:position pos:line="3" pos:column="57"/></operator></expr>)<pos:position pos:line="3" pos:column="58"/></condition><then pos:line="3" pos:column="58">
  <block pos:line="4" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">rtnl_close<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><operator pos:line="5" pos:column="16">&amp;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="17">rth<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">memset<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><operator pos:line="6" pos:column="13">&amp;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="14">rth<pos:position pos:line="6" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="19">'\0'<pos:position pos:line="6" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="25">sizeof <argument_list pos:line="6" pos:column="32">(<argument><expr><name pos:line="6" pos:column="33">rth<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>
  
  <return pos:line="9" pos:column="3">return <expr><operator pos:line="9" pos:column="10">(<pos:position pos:line="9" pos:column="11"/></operator><literal type="number" pos:line="9" pos:column="11">0<pos:position pos:line="9" pos:column="12"/></literal><operator pos:line="9" pos:column="12">)<pos:position pos:line="9" pos:column="13"/></operator></expr>;<pos:position pos:line="9" pos:column="14"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
