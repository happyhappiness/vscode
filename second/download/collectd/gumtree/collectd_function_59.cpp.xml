<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_59.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_check_con_average<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">values_num<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">double<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">values<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier><modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">values_names<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">double<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">total<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">total_num<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">total<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="17">0.0<pos:position pos:line="7" pos:column="20"/></literal></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">total_num<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">values_num<pos:position pos:line="9" pos:column="35"/></name></expr>;<pos:position pos:line="9" pos:column="36"/></condition> <incr><expr><name pos:line="9" pos:column="37">i<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">++<pos:position pos:line="9" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="41"/></control>
	<block pos:line="10" pos:column="9">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><call><name pos:line="11" pos:column="22">isnan<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><name><name pos:line="11" pos:column="29">values<pos:position pos:line="11" pos:column="35"/></name><index pos:line="11" pos:column="35">[<expr><name pos:line="11" pos:column="36">i<pos:position pos:line="11" pos:column="37"/></name></expr>]<pos:position pos:line="11" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40">
		<block pos:line="12" pos:column="17">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">total<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">+=<pos:position pos:line="13" pos:column="33"/></operator> <name><name pos:line="13" pos:column="34">values<pos:position pos:line="13" pos:column="40"/></name><index pos:line="13" pos:column="40">[<expr><name pos:line="13" pos:column="41">i<pos:position pos:line="13" pos:column="42"/></name></expr>]<pos:position pos:line="13" pos:column="43"/></index></name></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="14" pos:column="25">total_num<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">++<pos:position pos:line="14" pos:column="36"/></operator></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block></for>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">total_num<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
	<block pos:line="19" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">printf<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">(<argument><expr><literal type="string" pos:line="20" pos:column="25">"WARNING: No defined values found\n"<pos:position pos:line="20" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">RET_WARNING<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">)<pos:position pos:line="21" pos:column="37"/></operator></expr>;<pos:position pos:line="21" pos:column="38"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">match_range<pos:position pos:line="24" pos:column="24"/></name> <argument_list pos:line="24" pos:column="25">(<argument><expr><operator pos:line="24" pos:column="26">&amp;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="27">range_critical_g<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="45">total<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">/<pos:position pos:line="24" pos:column="52"/></operator> <name pos:line="24" pos:column="53">total_num<pos:position pos:line="24" pos:column="62"/></name></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call> <operator pos:line="24" pos:column="64">!=<pos:position pos:line="24" pos:column="66"/></operator> <literal type="number" pos:line="24" pos:column="67">0<pos:position pos:line="24" pos:column="68"/></literal></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69">
	<block pos:line="25" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">printf<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><literal type="string" pos:line="26" pos:column="25">"CRITICAL: Average = %lf\n"<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>,
				<argument><expr><call pos:line="27" pos:column="33">(<name pos:line="27" pos:column="34">double<pos:position pos:line="27" pos:column="40"/></name>) <argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">total<pos:position pos:line="27" pos:column="48"/></name> <operator pos:line="27" pos:column="49">/<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="51">total_num<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="63"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">RET_CRITICAL<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">)<pos:position pos:line="28" pos:column="38"/></operator></expr>;<pos:position pos:line="28" pos:column="39"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then>
	<elseif pos:line="30" pos:column="9">else <if pos:line="30" pos:column="14">if <condition pos:line="30" pos:column="17">(<expr><call><name pos:line="30" pos:column="18">match_range<pos:position pos:line="30" pos:column="29"/></name> <argument_list pos:line="30" pos:column="30">(<argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">range_warning_g<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">total<pos:position pos:line="30" pos:column="54"/></name> <operator pos:line="30" pos:column="55">/<pos:position pos:line="30" pos:column="56"/></operator> <name pos:line="30" pos:column="57">total_num<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call> <operator pos:line="30" pos:column="68">!=<pos:position pos:line="30" pos:column="70"/></operator> <literal type="number" pos:line="30" pos:column="71">0<pos:position pos:line="30" pos:column="72"/></literal></expr>)<pos:position pos:line="30" pos:column="73"/></condition><then pos:line="30" pos:column="73">
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">printf<pos:position pos:line="32" pos:column="23"/></name> <argument_list pos:line="32" pos:column="24">(<argument><expr><literal type="string" pos:line="32" pos:column="25">"WARNING: Average = %lf\n"<pos:position pos:line="32" pos:column="51"/></literal></expr></argument>,
				<argument><expr><call pos:line="33" pos:column="33">(<name pos:line="33" pos:column="34">double<pos:position pos:line="33" pos:column="40"/></name>) <argument_list pos:line="33" pos:column="42">(<argument><expr><name pos:line="33" pos:column="43">total<pos:position pos:line="33" pos:column="48"/></name> <operator pos:line="33" pos:column="49">/<pos:position pos:line="33" pos:column="50"/></operator> <name pos:line="33" pos:column="51">total_num<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">RET_WARNING<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator></expr>;<pos:position pos:line="34" pos:column="38"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if></elseif>
	<else pos:line="36" pos:column="9">else
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">printf<pos:position pos:line="38" pos:column="23"/></name> <argument_list pos:line="38" pos:column="24">(<argument><expr><literal type="string" pos:line="38" pos:column="25">"OKAY: Average = %lf\n"<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>,
				<argument><expr><call pos:line="39" pos:column="33">(<name pos:line="39" pos:column="34">double<pos:position pos:line="39" pos:column="40"/></name>) <argument_list pos:line="39" pos:column="42">(<argument><expr><name pos:line="39" pos:column="43">total<pos:position pos:line="39" pos:column="48"/></name> <operator pos:line="39" pos:column="49">/<pos:position pos:line="39" pos:column="50"/></operator> <name pos:line="39" pos:column="51">total_num<pos:position pos:line="39" pos:column="60"/></name></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">RET_OKAY<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">)<pos:position pos:line="40" pos:column="34"/></operator></expr>;<pos:position pos:line="40" pos:column="35"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></else></if>

	<return pos:line="43" pos:column="9">return <expr><operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">RET_UNKNOWN<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">)<pos:position pos:line="43" pos:column="29"/></operator></expr>;<pos:position pos:line="43" pos:column="30"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
