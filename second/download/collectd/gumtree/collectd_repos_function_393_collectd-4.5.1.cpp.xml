<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_393_collectd-4.5.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">handle_ppp<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">u_char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">pkt<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">len<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">PCAP_SNAPLEN<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">short<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">us<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">short<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">proto<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">len<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">&lt;<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="15">2<pos:position pos:line="7" pos:column="16"/></literal></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17">
	<block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return></block></then></if>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">pkt<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">PPP_ADDRESS_VAL<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">&amp;&amp;<pos:position pos:line="9" pos:column="43"/></operator> <operator pos:line="9" pos:column="36">*<pos:position pos:line="9" pos:column="37"/></operator><operator pos:line="9" pos:column="37">(<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">pkt<pos:position pos:line="9" pos:column="41"/></name> <operator pos:line="9" pos:column="42">+<pos:position pos:line="9" pos:column="43"/></operator> <literal type="number" pos:line="9" pos:column="44">1<pos:position pos:line="9" pos:column="45"/></literal><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator> <operator pos:line="9" pos:column="47">==<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="50">PPP_CONTROL_VAL<pos:position pos:line="9" pos:column="65"/></name></expr>)<pos:position pos:line="9" pos:column="66"/></condition><then pos:line="9" pos:column="66"> <block pos:line="9" pos:column="67">{
	<expr_stmt><expr><name pos:line="10" pos:column="9">pkt<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">+=<pos:position pos:line="10" pos:column="15"/></operator> <literal type="number" pos:line="10" pos:column="16">2<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="10" pos:column="33">/* ACFC not used */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">len<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">-=<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="16">2<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&lt;<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="15">2<pos:position pos:line="13" pos:column="16"/></literal></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17">
	<block type="pseudo"><return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return></block></then></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">pkt<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">%<pos:position pos:line="15" pos:column="15"/></operator> <literal type="number" pos:line="15" pos:column="16">2<pos:position pos:line="15" pos:column="17"/></literal></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18"> <block pos:line="15" pos:column="19">{
	<expr_stmt><expr><name pos:line="16" pos:column="9">proto<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <operator pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">pkt<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>		<comment type="block" pos:line="16" pos:column="33">/* PFC is used */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">pkt<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">++<pos:position pos:line="17" pos:column="14"/></operator></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">len<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">--<pos:position pos:line="18" pos:column="14"/></operator></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="17">us<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="21">pkt<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="26">sizeof<argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">us<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">proto<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">ntohs<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">us<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">pkt<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">+=<pos:position pos:line="22" pos:column="15"/></operator> <literal type="number" pos:line="22" pos:column="16">2<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">len<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">-=<pos:position pos:line="23" pos:column="15"/></operator> <literal type="number" pos:line="23" pos:column="16">2<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">ETHERTYPE_IP<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">!=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">proto<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">&amp;&amp;<pos:position pos:line="25" pos:column="41"/></operator> <name pos:line="25" pos:column="34">PPP_IP<pos:position pos:line="25" pos:column="40"/></name> <operator pos:line="25" pos:column="41">!=<pos:position pos:line="25" pos:column="43"/></operator> <name pos:line="25" pos:column="44">proto<pos:position pos:line="25" pos:column="49"/></name></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50">
	<block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">memcpy<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name pos:line="27" pos:column="12">buf<pos:position pos:line="27" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="17">pkt<pos:position pos:line="27" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">len<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><call><name pos:line="28" pos:column="12">handle_ip<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><operator pos:line="28" pos:column="22">(<pos:position pos:line="28" pos:column="23"/></operator>struct <name pos:line="28" pos:column="30">ip<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">*<pos:position pos:line="28" pos:column="34"/></operator><operator pos:line="28" pos:column="34">)<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">buf<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">len<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
