<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_507_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rrd_config<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">key<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">value<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">strcasecmp<pos:position pos:line="3" pos:column="23"/></name> <argument_list pos:line="3" pos:column="24">(<argument><expr><literal type="string" pos:line="3" pos:column="25">"CacheTimeout"<pos:position pos:line="3" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="41">key<pos:position pos:line="3" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3" pos:column="45"/></argument_list></call> <operator pos:line="3" pos:column="46">==<pos:position pos:line="3" pos:column="48"/></operator> <literal type="number" pos:line="3" pos:column="49">0<pos:position pos:line="3" pos:column="50"/></literal></expr>)<pos:position pos:line="3" pos:column="51"/></condition><then pos:line="3" pos:column="51">
	<block pos:line="4" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">tmp<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">atoi<pos:position pos:line="5" pos:column="31"/></name> <argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">value<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">tmp<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">&lt;<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="27">0<pos:position pos:line="6" pos:column="28"/></literal></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29">
		<block pos:line="7" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">fprintf<pos:position pos:line="8" pos:column="32"/></name> <argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">stderr<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="42">"rrdtool: `CacheTimeout' must "<pos:position pos:line="8" pos:column="73"/></literal>
					<literal type="string" pos:line="9" pos:column="41">"be greater than 0.\n"<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="65"/></expr_stmt>
			<return pos:line="10" pos:column="25">return <expr><operator pos:line="10" pos:column="32">(<pos:position pos:line="10" pos:column="33"/></operator><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal><operator pos:line="10" pos:column="34">)<pos:position pos:line="10" pos:column="35"/></operator></expr>;<pos:position pos:line="10" pos:column="36"/></return>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">cache_timeout<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">tmp<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><call><name pos:line="14" pos:column="18">strcasecmp<pos:position pos:line="14" pos:column="28"/></name> <argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="string" pos:line="14" pos:column="30">"CacheFlush"<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="44">key<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call> <operator pos:line="14" pos:column="49">==<pos:position pos:line="14" pos:column="51"/></operator> <literal type="number" pos:line="14" pos:column="52">0<pos:position pos:line="14" pos:column="53"/></literal></expr>)<pos:position pos:line="14" pos:column="54"/></condition><then pos:line="14" pos:column="54">
	<block pos:line="15" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">tmp<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><call><name pos:line="16" pos:column="27">atoi<pos:position pos:line="16" pos:column="31"/></name> <argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">value<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="40"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">tmp<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&lt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
		<block pos:line="18" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">fprintf<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">stderr<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="42">"rrdtool: `CacheFlush' must "<pos:position pos:line="19" pos:column="71"/></literal>
					<literal type="string" pos:line="20" pos:column="41">"be greater than 0.\n"<pos:position pos:line="20" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></expr_stmt>
			<return pos:line="21" pos:column="25">return <expr><operator pos:line="21" pos:column="32">(<pos:position pos:line="21" pos:column="33"/></operator><literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal><operator pos:line="21" pos:column="34">)<pos:position pos:line="21" pos:column="35"/></operator></expr>;<pos:position pos:line="21" pos:column="36"/></return>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="23" pos:column="17">cache_flush_timeout<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">tmp<pos:position pos:line="23" pos:column="42"/></name></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="25" pos:column="9">else <if pos:line="25" pos:column="14">if <condition pos:line="25" pos:column="17">(<expr><call><name pos:line="25" pos:column="18">strcasecmp<pos:position pos:line="25" pos:column="28"/></name> <argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="string" pos:line="25" pos:column="30">"DataDir"<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">key<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call> <operator pos:line="25" pos:column="46">==<pos:position pos:line="25" pos:column="48"/></operator> <literal type="number" pos:line="25" pos:column="49">0<pos:position pos:line="25" pos:column="50"/></literal></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51">
	<block pos:line="26" pos:column="9">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">datadir<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">!=<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">NULL<pos:position pos:line="27" pos:column="36"/></name></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">free<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">datadir<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">datadir<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <call><name pos:line="29" pos:column="27">strdup<pos:position pos:line="29" pos:column="33"/></name> <argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">value<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">datadir<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">!=<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">NULL<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37">
		<block pos:line="31" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">int<pos:position pos:line="32" pos:column="28"/></name></type> <name pos:line="32" pos:column="29">len<pos:position pos:line="32" pos:column="32"/></name> <init pos:line="32" pos:column="33">= <expr><call><name pos:line="32" pos:column="35">strlen<pos:position pos:line="32" pos:column="41"/></name> <argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">datadir<pos:position pos:line="32" pos:column="50"/></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="52"/></decl_stmt>
			<while pos:line="33" pos:column="25">while <condition pos:line="33" pos:column="31">(<expr><operator pos:line="33" pos:column="32">(<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="33">len<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">&gt;<pos:position pos:line="33" pos:column="41"/></operator> <literal type="number" pos:line="33" pos:column="39">0<pos:position pos:line="33" pos:column="40"/></literal><operator pos:line="33" pos:column="40">)<pos:position pos:line="33" pos:column="41"/></operator> <operator pos:line="33" pos:column="42">&amp;&amp;<pos:position pos:line="33" pos:column="52"/></operator> <operator pos:line="33" pos:column="45">(<pos:position pos:line="33" pos:column="46"/></operator><name><name pos:line="33" pos:column="46">datadir<pos:position pos:line="33" pos:column="53"/></name><index pos:line="33" pos:column="53">[<expr><name pos:line="33" pos:column="54">len<pos:position pos:line="33" pos:column="57"/></name> <operator pos:line="33" pos:column="58">-<pos:position pos:line="33" pos:column="59"/></operator> <literal type="number" pos:line="33" pos:column="60">1<pos:position pos:line="33" pos:column="61"/></literal></expr>]<pos:position pos:line="33" pos:column="62"/></index></name> <operator pos:line="33" pos:column="63">==<pos:position pos:line="33" pos:column="65"/></operator> <literal type="char" pos:line="33" pos:column="66">'/'<pos:position pos:line="33" pos:column="69"/></literal><operator pos:line="33" pos:column="69">)<pos:position pos:line="33" pos:column="70"/></operator></expr>)<pos:position pos:line="33" pos:column="71"/></condition>
			<block pos:line="34" pos:column="25">{
				<expr_stmt><expr><name pos:line="35" pos:column="33">len<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">--<pos:position pos:line="35" pos:column="38"/></operator></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="36" pos:column="33">datadir<pos:position pos:line="36" pos:column="40"/></name><index pos:line="36" pos:column="40">[<expr><name pos:line="36" pos:column="41">len<pos:position pos:line="36" pos:column="44"/></name></expr>]<pos:position pos:line="36" pos:column="45"/></index></name> <operator pos:line="36" pos:column="46">=<pos:position pos:line="36" pos:column="47"/></operator> <literal type="char" pos:line="36" pos:column="48">'\0'<pos:position pos:line="36" pos:column="52"/></literal></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></while>
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name pos:line="38" pos:column="29">len<pos:position pos:line="38" pos:column="32"/></name> <operator pos:line="38" pos:column="33">&lt;=<pos:position pos:line="38" pos:column="38"/></operator> <literal type="number" pos:line="38" pos:column="36">0<pos:position pos:line="38" pos:column="37"/></literal></expr>)<pos:position pos:line="38" pos:column="38"/></condition><then pos:line="38" pos:column="38">
			<block pos:line="39" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">free<pos:position pos:line="40" pos:column="37"/></name> <argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">datadir<pos:position pos:line="40" pos:column="46"/></name></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="41" pos:column="33">datadir<pos:position pos:line="41" pos:column="40"/></name> <operator pos:line="41" pos:column="41">=<pos:position pos:line="41" pos:column="42"/></operator> <name pos:line="41" pos:column="43">NULL<pos:position pos:line="41" pos:column="47"/></name></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="45" pos:column="9">else <if pos:line="45" pos:column="14">if <condition pos:line="45" pos:column="17">(<expr><call><name pos:line="45" pos:column="18">strcasecmp<pos:position pos:line="45" pos:column="28"/></name> <argument_list pos:line="45" pos:column="29">(<argument><expr><literal type="string" pos:line="45" pos:column="30">"StepSize"<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">key<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call> <operator pos:line="45" pos:column="47">==<pos:position pos:line="45" pos:column="49"/></operator> <literal type="number" pos:line="45" pos:column="50">0<pos:position pos:line="45" pos:column="51"/></literal></expr>)<pos:position pos:line="45" pos:column="52"/></condition><then pos:line="45" pos:column="52">
	<block pos:line="46" pos:column="9">{
		<expr_stmt><expr><name pos:line="47" pos:column="17">stepsize<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">=<pos:position pos:line="47" pos:column="27"/></operator> <call><name pos:line="47" pos:column="28">atoi<pos:position pos:line="47" pos:column="32"/></name> <argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">value<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">stepsize<pos:position pos:line="48" pos:column="29"/></name> <operator pos:line="48" pos:column="30">&lt;<pos:position pos:line="48" pos:column="34"/></operator> <literal type="number" pos:line="48" pos:column="32">0<pos:position pos:line="48" pos:column="33"/></literal></expr>)<pos:position pos:line="48" pos:column="34"/></condition><then pos:line="48" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="25">stepsize<pos:position pos:line="49" pos:column="33"/></name> <operator pos:line="49" pos:column="34">=<pos:position pos:line="49" pos:column="35"/></operator> <literal type="number" pos:line="49" pos:column="36">0<pos:position pos:line="49" pos:column="37"/></literal></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="51" pos:column="9">else <if pos:line="51" pos:column="14">if <condition pos:line="51" pos:column="17">(<expr><call><name pos:line="51" pos:column="18">strcasecmp<pos:position pos:line="51" pos:column="28"/></name> <argument_list pos:line="51" pos:column="29">(<argument><expr><literal type="string" pos:line="51" pos:column="30">"HeartBeat"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">key<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call> <operator pos:line="51" pos:column="48">==<pos:position pos:line="51" pos:column="50"/></operator> <literal type="number" pos:line="51" pos:column="51">0<pos:position pos:line="51" pos:column="52"/></literal></expr>)<pos:position pos:line="51" pos:column="53"/></condition><then pos:line="51" pos:column="53">
	<block pos:line="52" pos:column="9">{
		<expr_stmt><expr><name pos:line="53" pos:column="17">heartbeat<pos:position pos:line="53" pos:column="26"/></name> <operator pos:line="53" pos:column="27">=<pos:position pos:line="53" pos:column="28"/></operator> <call><name pos:line="53" pos:column="29">atoi<pos:position pos:line="53" pos:column="33"/></name> <argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">value<pos:position pos:line="53" pos:column="40"/></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">heartbeat<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">&lt;<pos:position pos:line="54" pos:column="35"/></operator> <literal type="number" pos:line="54" pos:column="33">0<pos:position pos:line="54" pos:column="34"/></literal></expr>)<pos:position pos:line="54" pos:column="35"/></condition><then pos:line="54" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="25">heartbeat<pos:position pos:line="55" pos:column="34"/></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <literal type="number" pos:line="55" pos:column="37">0<pos:position pos:line="55" pos:column="38"/></literal></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="57" pos:column="9">else <if pos:line="57" pos:column="14">if <condition pos:line="57" pos:column="17">(<expr><call><name pos:line="57" pos:column="18">strcasecmp<pos:position pos:line="57" pos:column="28"/></name> <argument_list pos:line="57" pos:column="29">(<argument><expr><literal type="string" pos:line="57" pos:column="30">"RRARows"<pos:position pos:line="57" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="41">key<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call> <operator pos:line="57" pos:column="46">==<pos:position pos:line="57" pos:column="48"/></operator> <literal type="number" pos:line="57" pos:column="49">0<pos:position pos:line="57" pos:column="50"/></literal></expr>)<pos:position pos:line="57" pos:column="51"/></condition><then pos:line="57" pos:column="51">
	<block pos:line="58" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">int<pos:position pos:line="59" pos:column="20"/></name></type> <name pos:line="59" pos:column="21">tmp<pos:position pos:line="59" pos:column="24"/></name> <init pos:line="59" pos:column="25">= <expr><call><name pos:line="59" pos:column="27">atoi<pos:position pos:line="59" pos:column="31"/></name> <argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">value<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="59" pos:column="40"/></decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">tmp<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">&lt;=<pos:position pos:line="60" pos:column="30"/></operator> <literal type="number" pos:line="60" pos:column="28">0<pos:position pos:line="60" pos:column="29"/></literal></expr>)<pos:position pos:line="60" pos:column="30"/></condition><then pos:line="60" pos:column="30">
		<block pos:line="61" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">fprintf<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">stderr<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="42">"rrdtool: `RRARows' must "<pos:position pos:line="62" pos:column="68"/></literal>
					<literal type="string" pos:line="63" pos:column="41">"be greater than 0.\n"<pos:position pos:line="63" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt>
			<return pos:line="64" pos:column="25">return <expr><operator pos:line="64" pos:column="32">(<pos:position pos:line="64" pos:column="33"/></operator><literal type="number" pos:line="64" pos:column="33">1<pos:position pos:line="64" pos:column="34"/></literal><operator pos:line="64" pos:column="34">)<pos:position pos:line="64" pos:column="35"/></operator></expr>;<pos:position pos:line="64" pos:column="36"/></return>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="66" pos:column="17">rrarows<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">tmp<pos:position pos:line="66" pos:column="30"/></name></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if <condition pos:line="68" pos:column="17">(<expr><call><name pos:line="68" pos:column="18">strcasecmp<pos:position pos:line="68" pos:column="28"/></name> <argument_list pos:line="68" pos:column="29">(<argument><expr><literal type="string" pos:line="68" pos:column="30">"RRATimespan"<pos:position pos:line="68" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="45">key<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call> <operator pos:line="68" pos:column="50">==<pos:position pos:line="68" pos:column="52"/></operator> <literal type="number" pos:line="68" pos:column="53">0<pos:position pos:line="68" pos:column="54"/></literal></expr>)<pos:position pos:line="68" pos:column="55"/></condition><then pos:line="68" pos:column="55">
	<block pos:line="69" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">char<pos:position pos:line="70" pos:column="21"/></name> <modifier pos:line="70" pos:column="22">*<pos:position pos:line="70" pos:column="23"/></modifier></type><name pos:line="70" pos:column="23">saveptr<pos:position pos:line="70" pos:column="30"/></name> <init pos:line="70" pos:column="31">= <expr><name pos:line="70" pos:column="33">NULL<pos:position pos:line="70" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">char<pos:position pos:line="71" pos:column="21"/></name> <modifier pos:line="71" pos:column="22">*<pos:position pos:line="71" pos:column="23"/></modifier></type><name pos:line="71" pos:column="23">dummy<pos:position pos:line="71" pos:column="28"/></name></decl>;<pos:position pos:line="71" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="72" pos:column="17">char<pos:position pos:line="72" pos:column="21"/></name> <modifier pos:line="72" pos:column="22">*<pos:position pos:line="72" pos:column="23"/></modifier></type><name pos:line="72" pos:column="23">ptr<pos:position pos:line="72" pos:column="26"/></name></decl>;<pos:position pos:line="72" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">char<pos:position pos:line="73" pos:column="21"/></name> <modifier pos:line="73" pos:column="22">*<pos:position pos:line="73" pos:column="23"/></modifier></type><name pos:line="73" pos:column="23">value_copy<pos:position pos:line="73" pos:column="33"/></name></decl>;<pos:position pos:line="73" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">int<pos:position pos:line="74" pos:column="20"/></name> <modifier pos:line="74" pos:column="21">*<pos:position pos:line="74" pos:column="22"/></modifier></type><name pos:line="74" pos:column="22">tmp_alloc<pos:position pos:line="74" pos:column="31"/></name></decl>;<pos:position pos:line="74" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><name pos:line="76" pos:column="17">value_copy<pos:position pos:line="76" pos:column="27"/></name> <operator pos:line="76" pos:column="28">=<pos:position pos:line="76" pos:column="29"/></operator> <call><name pos:line="76" pos:column="30">strdup<pos:position pos:line="76" pos:column="36"/></name> <argument_list pos:line="76" pos:column="37">(<argument><expr><name pos:line="76" pos:column="38">value<pos:position pos:line="76" pos:column="43"/></name></expr></argument>)<pos:position pos:line="76" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">value_copy<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">==<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="35">NULL<pos:position pos:line="77" pos:column="39"/></name></expr>)<pos:position pos:line="77" pos:column="40"/></condition><then pos:line="77" pos:column="40">
			<block type="pseudo"><return pos:line="78" pos:column="25">return <expr><operator pos:line="78" pos:column="32">(<pos:position pos:line="78" pos:column="33"/></operator><literal type="number" pos:line="78" pos:column="33">1<pos:position pos:line="78" pos:column="34"/></literal><operator pos:line="78" pos:column="34">)<pos:position pos:line="78" pos:column="35"/></operator></expr>;<pos:position pos:line="78" pos:column="36"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="80" pos:column="17">dummy<pos:position pos:line="80" pos:column="22"/></name> <operator pos:line="80" pos:column="23">=<pos:position pos:line="80" pos:column="24"/></operator> <name pos:line="80" pos:column="25">value_copy<pos:position pos:line="80" pos:column="35"/></name></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
		<while pos:line="81" pos:column="17">while <condition pos:line="81" pos:column="23">(<expr><operator pos:line="81" pos:column="24">(<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">ptr<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <call><name pos:line="81" pos:column="31">strtok_r<pos:position pos:line="81" pos:column="39"/></name> <argument_list pos:line="81" pos:column="40">(<argument><expr><name pos:line="81" pos:column="41">dummy<pos:position pos:line="81" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="48">", \t"<pos:position pos:line="81" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="81" pos:column="56">&amp;<pos:position pos:line="81" pos:column="61"/></operator><name pos:line="81" pos:column="57">saveptr<pos:position pos:line="81" pos:column="64"/></name></expr></argument>)<pos:position pos:line="81" pos:column="65"/></argument_list></call><operator pos:line="81" pos:column="65">)<pos:position pos:line="81" pos:column="66"/></operator> <operator pos:line="81" pos:column="67">!=<pos:position pos:line="81" pos:column="69"/></operator> <name pos:line="81" pos:column="70">NULL<pos:position pos:line="81" pos:column="74"/></name></expr>)<pos:position pos:line="81" pos:column="75"/></condition>
		<block pos:line="82" pos:column="17">{
			<expr_stmt><expr><name pos:line="83" pos:column="25">dummy<pos:position pos:line="83" pos:column="30"/></name> <operator pos:line="83" pos:column="31">=<pos:position pos:line="83" pos:column="32"/></operator> <name pos:line="83" pos:column="33">NULL<pos:position pos:line="83" pos:column="37"/></name></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt>
			
			<expr_stmt><expr><name pos:line="85" pos:column="25">tmp_alloc<pos:position pos:line="85" pos:column="34"/></name> <operator pos:line="85" pos:column="35">=<pos:position pos:line="85" pos:column="36"/></operator> <call><name pos:line="85" pos:column="37">realloc<pos:position pos:line="85" pos:column="44"/></name> <argument_list pos:line="85" pos:column="45">(<argument><expr><name pos:line="85" pos:column="46">rra_timespans_custom<pos:position pos:line="85" pos:column="66"/></name></expr></argument>,
					<argument><expr><sizeof pos:line="86" pos:column="41">sizeof <argument_list pos:line="86" pos:column="48">(<argument><expr><name pos:line="86" pos:column="49">int<pos:position pos:line="86" pos:column="52"/></name></expr></argument>)<pos:position pos:line="86" pos:column="53"/></argument_list></sizeof> <operator pos:line="86" pos:column="54">*<pos:position pos:line="86" pos:column="55"/></operator> <operator pos:line="86" pos:column="56">(<pos:position pos:line="86" pos:column="57"/></operator><name pos:line="86" pos:column="57">rra_timespans_custom_num<pos:position pos:line="86" pos:column="81"/></name> <operator pos:line="86" pos:column="82">+<pos:position pos:line="86" pos:column="83"/></operator> <literal type="number" pos:line="86" pos:column="84">1<pos:position pos:line="86" pos:column="85"/></literal><operator pos:line="86" pos:column="85">)<pos:position pos:line="86" pos:column="86"/></operator></expr></argument>)<pos:position pos:line="86" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="88"/></expr_stmt>
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><name pos:line="87" pos:column="29">tmp_alloc<pos:position pos:line="87" pos:column="38"/></name> <operator pos:line="87" pos:column="39">==<pos:position pos:line="87" pos:column="41"/></operator> <name pos:line="87" pos:column="42">NULL<pos:position pos:line="87" pos:column="46"/></name></expr>)<pos:position pos:line="87" pos:column="47"/></condition><then pos:line="87" pos:column="47">
			<block pos:line="88" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">fprintf<pos:position pos:line="89" pos:column="40"/></name> <argument_list pos:line="89" pos:column="41">(<argument><expr><name pos:line="89" pos:column="42">stderr<pos:position pos:line="89" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="50">"rrdtool: realloc failed.\n"<pos:position pos:line="89" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="90" pos:column="33">free<pos:position pos:line="90" pos:column="37"/></name> <argument_list pos:line="90" pos:column="38">(<argument><expr><name pos:line="90" pos:column="39">value_copy<pos:position pos:line="90" pos:column="49"/></name></expr></argument>)<pos:position pos:line="90" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="51"/></expr_stmt>
				<return pos:line="91" pos:column="33">return <expr><operator pos:line="91" pos:column="40">(<pos:position pos:line="91" pos:column="41"/></operator><literal type="number" pos:line="91" pos:column="41">1<pos:position pos:line="91" pos:column="42"/></literal><operator pos:line="91" pos:column="42">)<pos:position pos:line="91" pos:column="43"/></operator></expr>;<pos:position pos:line="91" pos:column="44"/></return>
			}<pos:position pos:line="92" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="93" pos:column="25">rra_timespans_custom<pos:position pos:line="93" pos:column="45"/></name> <operator pos:line="93" pos:column="46">=<pos:position pos:line="93" pos:column="47"/></operator> <name pos:line="93" pos:column="48">tmp_alloc<pos:position pos:line="93" pos:column="57"/></name></expr>;<pos:position pos:line="93" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="94" pos:column="25">rra_timespans_custom<pos:position pos:line="94" pos:column="45"/></name><index pos:line="94" pos:column="45">[<expr><name pos:line="94" pos:column="46">rra_timespans_custom_num<pos:position pos:line="94" pos:column="70"/></name></expr>]<pos:position pos:line="94" pos:column="71"/></index></name> <operator pos:line="94" pos:column="72">=<pos:position pos:line="94" pos:column="73"/></operator> <call><name pos:line="94" pos:column="74">atoi<pos:position pos:line="94" pos:column="78"/></name> <argument_list pos:line="94" pos:column="79">(<argument><expr><name pos:line="94" pos:column="80">ptr<pos:position pos:line="94" pos:column="83"/></name></expr></argument>)<pos:position pos:line="94" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="85"/></expr_stmt>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><name><name pos:line="95" pos:column="29">rra_timespans_custom<pos:position pos:line="95" pos:column="49"/></name><index pos:line="95" pos:column="49">[<expr><name pos:line="95" pos:column="50">rra_timespans_custom_num<pos:position pos:line="95" pos:column="74"/></name></expr>]<pos:position pos:line="95" pos:column="75"/></index></name> <operator pos:line="95" pos:column="76">!=<pos:position pos:line="95" pos:column="78"/></operator> <literal type="number" pos:line="95" pos:column="79">0<pos:position pos:line="95" pos:column="80"/></literal></expr>)<pos:position pos:line="95" pos:column="81"/></condition><then pos:line="95" pos:column="81">
				<block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="33">rra_timespans_custom_num<pos:position pos:line="96" pos:column="57"/></name><operator pos:line="96" pos:column="57">++<pos:position pos:line="96" pos:column="59"/></operator></expr>;<pos:position pos:line="96" pos:column="60"/></expr_stmt></block></then></if>
		}<pos:position pos:line="97" pos:column="18"/></block></while> <comment type="block" pos:line="97" pos:column="19">/* while (strtok_r) */</comment>

		<expr_stmt><expr><call><name pos:line="99" pos:column="17">qsort<pos:position pos:line="99" pos:column="22"/></name> <argument_list pos:line="99" pos:column="23">(<comment type="block" pos:line="99" pos:column="24">/* base = */</comment> <argument><expr><name pos:line="99" pos:column="37">rra_timespans_custom<pos:position pos:line="99" pos:column="57"/></name></expr></argument>,
				<comment type="block" pos:line="100" pos:column="33">/* nmemb  = */</comment> <argument><expr><name pos:line="100" pos:column="48">rra_timespans_custom_num<pos:position pos:line="100" pos:column="72"/></name></expr></argument>,
				<comment type="block" pos:line="101" pos:column="33">/* size   = */</comment> <argument><expr><sizeof pos:line="101" pos:column="48">sizeof <argument_list pos:line="101" pos:column="55">(<argument><expr><name><name pos:line="101" pos:column="56">rra_timespans_custom<pos:position pos:line="101" pos:column="76"/></name><index pos:line="101" pos:column="76">[<expr><literal type="number" pos:line="101" pos:column="77">0<pos:position pos:line="101" pos:column="78"/></literal></expr>]<pos:position pos:line="101" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="80"/></argument_list></sizeof></expr></argument>,
				<comment type="block" pos:line="102" pos:column="33">/* compar = */</comment> <argument><expr><name pos:line="102" pos:column="48">rrd_compare_numeric<pos:position pos:line="102" pos:column="67"/></name></expr></argument>)<pos:position pos:line="102" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="69"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="104" pos:column="17">free<pos:position pos:line="104" pos:column="21"/></name> <argument_list pos:line="104" pos:column="22">(<argument><expr><name pos:line="104" pos:column="23">value_copy<pos:position pos:line="104" pos:column="33"/></name></expr></argument>)<pos:position pos:line="104" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="105" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="106" pos:column="9">else <if pos:line="106" pos:column="14">if <condition pos:line="106" pos:column="17">(<expr><call><name pos:line="106" pos:column="18">strcasecmp<pos:position pos:line="106" pos:column="28"/></name> <argument_list pos:line="106" pos:column="29">(<argument><expr><literal type="string" pos:line="106" pos:column="30">"XFF"<pos:position pos:line="106" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="37">key<pos:position pos:line="106" pos:column="40"/></name></expr></argument>)<pos:position pos:line="106" pos:column="41"/></argument_list></call> <operator pos:line="106" pos:column="42">==<pos:position pos:line="106" pos:column="44"/></operator> <literal type="number" pos:line="106" pos:column="45">0<pos:position pos:line="106" pos:column="46"/></literal></expr>)<pos:position pos:line="106" pos:column="47"/></condition><then pos:line="106" pos:column="47">
	<block pos:line="107" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">double<pos:position pos:line="108" pos:column="23"/></name></type> <name pos:line="108" pos:column="24">tmp<pos:position pos:line="108" pos:column="27"/></name> <init pos:line="108" pos:column="28">= <expr><call><name pos:line="108" pos:column="30">atof<pos:position pos:line="108" pos:column="34"/></name> <argument_list pos:line="108" pos:column="35">(<argument><expr><name pos:line="108" pos:column="36">value<pos:position pos:line="108" pos:column="41"/></name></expr></argument>)<pos:position pos:line="108" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="43"/></decl_stmt>
		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><operator pos:line="109" pos:column="21">(<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="22">tmp<pos:position pos:line="109" pos:column="25"/></name> <operator pos:line="109" pos:column="26">&lt;<pos:position pos:line="109" pos:column="30"/></operator> <literal type="number" pos:line="109" pos:column="28">0.0<pos:position pos:line="109" pos:column="31"/></literal><operator pos:line="109" pos:column="31">)<pos:position pos:line="109" pos:column="32"/></operator> <operator pos:line="109" pos:column="33">||<pos:position pos:line="109" pos:column="35"/></operator> <operator pos:line="109" pos:column="36">(<pos:position pos:line="109" pos:column="37"/></operator><name pos:line="109" pos:column="37">tmp<pos:position pos:line="109" pos:column="40"/></name> <operator pos:line="109" pos:column="41">&gt;=<pos:position pos:line="109" pos:column="46"/></operator> <literal type="number" pos:line="109" pos:column="44">1.0<pos:position pos:line="109" pos:column="47"/></literal><operator pos:line="109" pos:column="47">)<pos:position pos:line="109" pos:column="48"/></operator></expr>)<pos:position pos:line="109" pos:column="49"/></condition><then pos:line="109" pos:column="49">
		<block pos:line="110" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">fprintf<pos:position pos:line="111" pos:column="32"/></name> <argument_list pos:line="111" pos:column="33">(<argument><expr><name pos:line="111" pos:column="34">stderr<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="42">"rrdtool: `XFF' must "<pos:position pos:line="111" pos:column="64"/></literal>
					<literal type="string" pos:line="112" pos:column="41">"be in the range 0 to 1 (exclusive)."<pos:position pos:line="112" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="80"/></expr_stmt>
			<return pos:line="113" pos:column="25">return <expr><operator pos:line="113" pos:column="32">(<pos:position pos:line="113" pos:column="33"/></operator><literal type="number" pos:line="113" pos:column="33">1<pos:position pos:line="113" pos:column="34"/></literal><operator pos:line="113" pos:column="34">)<pos:position pos:line="113" pos:column="35"/></operator></expr>;<pos:position pos:line="113" pos:column="36"/></return>
		}<pos:position pos:line="114" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="115" pos:column="17">xff<pos:position pos:line="115" pos:column="20"/></name> <operator pos:line="115" pos:column="21">=<pos:position pos:line="115" pos:column="22"/></operator> <name pos:line="115" pos:column="23">tmp<pos:position pos:line="115" pos:column="26"/></name></expr>;<pos:position pos:line="115" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="116" pos:column="10"/></block></then></if></elseif>
	<else pos:line="117" pos:column="9">else
	<block pos:line="118" pos:column="9">{
		<return pos:line="119" pos:column="17">return <expr><operator pos:line="119" pos:column="24">(<pos:position pos:line="119" pos:column="25"/></operator><operator pos:line="119" pos:column="25">-<pos:position pos:line="119" pos:column="26"/></operator><literal type="number" pos:line="119" pos:column="26">1<pos:position pos:line="119" pos:column="27"/></literal><operator pos:line="119" pos:column="27">)<pos:position pos:line="119" pos:column="28"/></operator></expr>;<pos:position pos:line="119" pos:column="29"/></return>
	}<pos:position pos:line="120" pos:column="10"/></block></else></if>
	<return pos:line="121" pos:column="9">return <expr><operator pos:line="121" pos:column="16">(<pos:position pos:line="121" pos:column="17"/></operator><literal type="number" pos:line="121" pos:column="17">0<pos:position pos:line="121" pos:column="18"/></literal><operator pos:line="121" pos:column="18">)<pos:position pos:line="121" pos:column="19"/></operator></expr>;<pos:position pos:line="121" pos:column="20"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
