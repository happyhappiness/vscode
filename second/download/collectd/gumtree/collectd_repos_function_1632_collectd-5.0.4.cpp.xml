<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1632_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_init_python<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">()<pos:position pos:line="1" pos:column="29"/></parameter_list> <block pos:line="1" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">argv<pos:position pos:line="2" pos:column="19"/></name> <init pos:line="2" pos:column="20">= <expr><literal type="string" pos:line="2" pos:column="22">""<pos:position pos:line="2" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">PyObject<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">sys<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">PyObject<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">module<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">IS_PY3K<pos:position pos:line="6" pos:column="15"/></name></cpp:ifdef>
	<comment type="block" pos:line="7" pos:column="9">/* Add a builtin module, before Py_Initialize */</comment>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">PyImport_AppendInittab<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><literal type="string" pos:line="8" pos:column="32">"collectd"<pos:position pos:line="8" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="44">PyInit_collectd<pos:position pos:line="8" pos:column="59"/></name></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
	
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">Py_Initialize<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">PyType_Ready<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="23">ConfigType<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">PyType_Ready<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="23">PluginDataType<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">ValuesType<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">tp_base<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="31">PluginDataType<pos:position pos:line="15" pos:column="45"/></name></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">PyType_Ready<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><operator pos:line="16" pos:column="22">&amp;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="23">ValuesType<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">NotificationType<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">tp_base<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">=<pos:position pos:line="17" pos:column="35"/></operator> <operator pos:line="17" pos:column="36">&amp;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="37">PluginDataType<pos:position pos:line="17" pos:column="51"/></name></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">PyType_Ready<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">NotificationType<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">SignedType<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">.<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">tp_base<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="31">PyLong_Type<pos:position pos:line="19" pos:column="42"/></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">PyType_Ready<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">SignedType<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">UnsignedType<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">tp_base<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <operator pos:line="21" pos:column="32">&amp;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="33">PyLong_Type<pos:position pos:line="21" pos:column="44"/></name></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">PyType_Ready<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><operator pos:line="22" pos:column="22">&amp;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="23">UnsignedType<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">sys<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">PyImport_ImportModule<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><literal type="string" pos:line="23" pos:column="37">"sys"<pos:position pos:line="23" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt> <comment type="block" pos:line="23" pos:column="45">/* New reference. */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">sys<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">==<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">NULL<pos:position pos:line="24" pos:column="24"/></name></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25"> <block pos:line="24" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">cpy_log_exception<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><literal type="string" pos:line="25" pos:column="35">"python initialization"<pos:position pos:line="25" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="28" pos:column="9">sys_path<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">PyObject_GetAttrString<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">sys<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="48">"path"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt> <comment type="block" pos:line="28" pos:column="57">/* New reference. */</comment>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">Py_DECREF<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">sys<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">sys_path<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">==<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">NULL<pos:position pos:line="30" pos:column="29"/></name></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30"> <block pos:line="30" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">cpy_log_exception<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><literal type="string" pos:line="31" pos:column="35">"python initialization"<pos:position pos:line="31" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
		<return pos:line="32" pos:column="17">return <expr><literal type="number" pos:line="32" pos:column="24">1<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">PySys_SetArgv<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><literal type="number" pos:line="34" pos:column="23">1<pos:position pos:line="34" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="26">&amp;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="27">argv<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">PyList_SetSlice<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">sys_path<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="35">0<pos:position pos:line="35" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="38">1<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">NULL<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">IS_PY3K<pos:position pos:line="37" pos:column="15"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="38" pos:column="9">module<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <call><name pos:line="38" pos:column="18">PyImport_ImportModule<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><literal type="string" pos:line="38" pos:column="40">"collectd"<pos:position pos:line="38" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="40" pos:column="9">module<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">Py_InitModule<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><literal type="string" pos:line="40" pos:column="32">"collectd"<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="44">cpy_methods<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt> <comment type="block" pos:line="40" pos:column="58">/* Borrowed reference. */</comment>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">PyModule_AddObject<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">module<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="36">"Config"<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="46">(<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="47">void<pos:position pos:line="42" pos:column="51"/></name> <operator pos:line="42" pos:column="52">*<pos:position pos:line="42" pos:column="53"/></operator><operator pos:line="42" pos:column="53">)<pos:position pos:line="42" pos:column="54"/></operator> <operator pos:line="42" pos:column="55">&amp;<pos:position pos:line="42" pos:column="60"/></operator><name pos:line="42" pos:column="56">ConfigType<pos:position pos:line="42" pos:column="66"/></name></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="68"/></expr_stmt> <comment type="block" pos:line="42" pos:column="69">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">PyModule_AddObject<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">module<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="36">"Values"<pos:position pos:line="43" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="43" pos:column="46">(<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="47">void<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">*<pos:position pos:line="43" pos:column="53"/></operator><operator pos:line="43" pos:column="53">)<pos:position pos:line="43" pos:column="54"/></operator> <operator pos:line="43" pos:column="55">&amp;<pos:position pos:line="43" pos:column="60"/></operator><name pos:line="43" pos:column="56">ValuesType<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="68"/></expr_stmt> <comment type="block" pos:line="43" pos:column="69">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">PyModule_AddObject<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">module<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="36">"Notification"<pos:position pos:line="44" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="44" pos:column="52">(<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="53">void<pos:position pos:line="44" pos:column="57"/></name> <operator pos:line="44" pos:column="58">*<pos:position pos:line="44" pos:column="59"/></operator><operator pos:line="44" pos:column="59">)<pos:position pos:line="44" pos:column="60"/></operator> <operator pos:line="44" pos:column="61">&amp;<pos:position pos:line="44" pos:column="66"/></operator><name pos:line="44" pos:column="62">NotificationType<pos:position pos:line="44" pos:column="78"/></name></expr></argument>)<pos:position pos:line="44" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="80"/></expr_stmt> <comment type="block" pos:line="44" pos:column="81">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">PyModule_AddObject<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">module<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="36">"Signed"<pos:position pos:line="45" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="46">(<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="47">void<pos:position pos:line="45" pos:column="51"/></name> <operator pos:line="45" pos:column="52">*<pos:position pos:line="45" pos:column="53"/></operator><operator pos:line="45" pos:column="53">)<pos:position pos:line="45" pos:column="54"/></operator> <operator pos:line="45" pos:column="55">&amp;<pos:position pos:line="45" pos:column="60"/></operator><name pos:line="45" pos:column="56">SignedType<pos:position pos:line="45" pos:column="66"/></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt> <comment type="block" pos:line="45" pos:column="69">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">PyModule_AddObject<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">module<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="36">"Unsigned"<pos:position pos:line="46" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="48">(<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="49">void<pos:position pos:line="46" pos:column="53"/></name> <operator pos:line="46" pos:column="54">*<pos:position pos:line="46" pos:column="55"/></operator><operator pos:line="46" pos:column="55">)<pos:position pos:line="46" pos:column="56"/></operator> <operator pos:line="46" pos:column="57">&amp;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="58">UnsignedType<pos:position pos:line="46" pos:column="70"/></name></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="72"/></expr_stmt> <comment type="block" pos:line="46" pos:column="73">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">module<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="41">"LOG_DEBUG"<pos:position pos:line="47" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">LOG_DEBUG<pos:position pos:line="47" pos:column="63"/></name></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">module<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"LOG_INFO"<pos:position pos:line="48" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">LOG_INFO<pos:position pos:line="48" pos:column="61"/></name></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">module<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="41">"LOG_NOTICE"<pos:position pos:line="49" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">LOG_NOTICE<pos:position pos:line="49" pos:column="65"/></name></expr></argument>)<pos:position pos:line="49" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">module<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="41">"LOG_WARNING"<pos:position pos:line="50" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="56">LOG_WARNING<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">module<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="41">"LOG_ERROR"<pos:position pos:line="51" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="54">LOG_ERR<pos:position pos:line="51" pos:column="61"/></name></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="52" pos:column="32"/></name><argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">module<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="41">"NOTIF_FAILURE"<pos:position pos:line="52" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="58">NOTIF_FAILURE<pos:position pos:line="52" pos:column="71"/></name></expr></argument>)<pos:position pos:line="52" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">module<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="41">"NOTIF_WARNING"<pos:position pos:line="53" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">NOTIF_WARNING<pos:position pos:line="53" pos:column="71"/></name></expr></argument>)<pos:position pos:line="53" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">module<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="41">"NOTIF_OKAY"<pos:position pos:line="54" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="55">NOTIF_OKAY<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>
	<return pos:line="55" pos:column="9">return <expr><literal type="number" pos:line="55" pos:column="16">0<pos:position pos:line="55" pos:column="17"/></literal></expr>;<pos:position pos:line="55" pos:column="18"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
