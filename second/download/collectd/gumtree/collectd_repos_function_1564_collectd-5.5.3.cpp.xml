<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1564_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_prepare<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">cconn<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">io<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">pollfd<pos:position pos:line="1" pos:column="57"/></name></name><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type> <name pos:line="1" pos:column="59">fds<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">ret<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
    <if pos:line="4" pos:column="5">if<condition pos:line="4" pos:column="7">(<expr><name><name pos:line="4" pos:column="8">io<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">-&gt;<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="12">request_type<pos:position pos:line="4" pos:column="24"/></name></name> <operator pos:line="4" pos:column="25">==<pos:position pos:line="4" pos:column="27"/></operator> <name pos:line="4" pos:column="28">ASOK_REQ_NONE<pos:position pos:line="4" pos:column="41"/></name></expr>)<pos:position pos:line="4" pos:column="42"/></condition><then pos:line="4" pos:column="42">
    <block pos:line="5" pos:column="5">{
        <comment type="block" pos:line="6" pos:column="9">/* The request has already been serviced. */</comment>
        <return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then>
    <elseif pos:line="9" pos:column="5">else <if pos:line="9" pos:column="10">if<condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name><name pos:line="9" pos:column="14">io<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">request_type<pos:position pos:line="9" pos:column="30"/></name></name> <operator pos:line="9" pos:column="31">==<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="34">ASOK_REQ_DATA<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">)<pos:position pos:line="9" pos:column="48"/></operator> <operator pos:line="9" pos:column="49">&amp;&amp;<pos:position pos:line="9" pos:column="59"/></operator> <operator pos:line="9" pos:column="52">(<pos:position pos:line="9" pos:column="53"/></operator><name><name pos:line="9" pos:column="53">io<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">-&gt;<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="57">d<pos:position pos:line="9" pos:column="58"/></name><operator pos:line="9" pos:column="58">-&gt;<pos:position pos:line="9" pos:column="63"/></operator><name pos:line="9" pos:column="60">ds_num<pos:position pos:line="9" pos:column="66"/></name></name> <operator pos:line="9" pos:column="67">==<pos:position pos:line="9" pos:column="69"/></operator> <literal type="number" pos:line="9" pos:column="70">0<pos:position pos:line="9" pos:column="71"/></literal><operator pos:line="9" pos:column="71">)<pos:position pos:line="9" pos:column="72"/></operator></expr>)<pos:position pos:line="9" pos:column="73"/></condition><then pos:line="9" pos:column="73">
    <block pos:line="10" pos:column="5">{
        <comment type="block" pos:line="11" pos:column="9">/* If there are no counters to report on, don't bother
         * connecting */</comment>
        <return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif></if>

    <switch pos:line="16" pos:column="5">switch <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">io<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">state<pos:position pos:line="16" pos:column="22"/></name></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition>
    <block pos:line="17" pos:column="5">{
        <case pos:line="18" pos:column="9">case <expr><name pos:line="18" pos:column="14">CSTATE_UNCONNECTED<pos:position pos:line="18" pos:column="32"/></name></expr>:<pos:position pos:line="18" pos:column="33"/></case>
            <expr_stmt><expr><name pos:line="19" pos:column="13">ret<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">cconn_connect<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">io<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
            <if pos:line="20" pos:column="13">if<condition pos:line="20" pos:column="15">(<expr><name pos:line="20" pos:column="16">ret<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&gt;<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="22">0<pos:position pos:line="20" pos:column="23"/></literal></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24">
            <block pos:line="21" pos:column="13">{
                <return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">ret<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></return>
            }<pos:position pos:line="23" pos:column="14"/></block></then>
            <elseif pos:line="24" pos:column="13">else <if pos:line="24" pos:column="18">if<condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">ret<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">&lt;<pos:position pos:line="24" pos:column="29"/></operator> <literal type="number" pos:line="24" pos:column="27">0<pos:position pos:line="24" pos:column="28"/></literal></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29">
            <block pos:line="25" pos:column="13">{
                <return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">ret<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></return>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">fds<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">fd<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name><name pos:line="28" pos:column="23">io<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">asok<pos:position pos:line="28" pos:column="31"/></name></name></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">fds<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">events<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">POLLOUT<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><literal type="number" pos:line="30" pos:column="20">1<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></return>
        <case pos:line="31" pos:column="9">case <expr><name pos:line="31" pos:column="14">CSTATE_WRITE_REQUEST<pos:position pos:line="31" pos:column="34"/></name></expr>:<pos:position pos:line="31" pos:column="35"/></case>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">fds<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">fd<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <name><name pos:line="32" pos:column="23">io<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">asok<pos:position pos:line="32" pos:column="31"/></name></name></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">fds<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">events<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">POLLOUT<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
            <return pos:line="34" pos:column="13">return <expr><literal type="number" pos:line="34" pos:column="20">1<pos:position pos:line="34" pos:column="21"/></literal></expr>;<pos:position pos:line="34" pos:column="22"/></return>
        <case pos:line="35" pos:column="9">case <expr><name pos:line="35" pos:column="14">CSTATE_READ_VERSION<pos:position pos:line="35" pos:column="33"/></name></expr>:<pos:position pos:line="35" pos:column="34"/></case>
        <case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">CSTATE_READ_AMT<pos:position pos:line="36" pos:column="29"/></name></expr>:<pos:position pos:line="36" pos:column="30"/></case>
        <case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">CSTATE_READ_JSON<pos:position pos:line="37" pos:column="30"/></name></expr>:<pos:position pos:line="37" pos:column="31"/></case>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">fds<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">fd<pos:position pos:line="38" pos:column="20"/></name></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <name><name pos:line="38" pos:column="23">io<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">-&gt;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="27">asok<pos:position pos:line="38" pos:column="31"/></name></name></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">fds<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">events<pos:position pos:line="39" pos:column="24"/></name></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="27">POLLIN<pos:position pos:line="39" pos:column="33"/></name></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><literal type="number" pos:line="40" pos:column="20">1<pos:position pos:line="40" pos:column="21"/></literal></expr>;<pos:position pos:line="40" pos:column="22"/></return>
        <default pos:line="41" pos:column="9">default:<pos:position pos:line="41" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">ERROR<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><literal type="string" pos:line="42" pos:column="19">"ceph plugin: cconn_prepare(name=%s) got to illegal state "<pos:position pos:line="42" pos:column="78"/></literal>
                <literal type="string" pos:line="43" pos:column="17">"on line %d"<pos:position pos:line="43" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="31">io<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">-&gt;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="35">d<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">name<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="44">__LINE__<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><operator pos:line="44" pos:column="20">-<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">EDOM<pos:position pos:line="44" pos:column="25"/></name></expr>;<pos:position pos:line="44" pos:column="26"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></switch>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
