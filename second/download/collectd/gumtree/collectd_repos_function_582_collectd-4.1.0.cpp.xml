<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_582_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">start_threads<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">num<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">read_threads<pos:position pos:line="5" pos:column="25"/></name> <operator pos:line="5" pos:column="26">!=<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34">
		<block type="pseudo"><return pos:line="6" pos:column="17">return;<pos:position pos:line="6" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="8" pos:column="9">read_threads<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">pthread_t<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">*<pos:position pos:line="8" pos:column="36"/></operator><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator> <call><name pos:line="8" pos:column="38">calloc<pos:position pos:line="8" pos:column="44"/></name> <argument_list pos:line="8" pos:column="45">(<argument><expr><name pos:line="8" pos:column="46">num<pos:position pos:line="8" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="51">sizeof <argument_list pos:line="8" pos:column="58">(<argument><expr><name pos:line="8" pos:column="59">pthread_t<pos:position pos:line="8" pos:column="68"/></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="71"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">read_threads<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">==<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">NULL<pos:position pos:line="9" pos:column="33"/></name></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34">
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">ERROR<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"plugin: start_threads: calloc failed."<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
		<return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">read_threads_num<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><expr><name pos:line="16" pos:column="14">i<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></init> <condition><expr><name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="25">num<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></condition> <incr><expr><name pos:line="16" pos:column="30">i<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">++<pos:position pos:line="16" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="34"/></control>
	<block pos:line="17" pos:column="9">{
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">pthread_create<pos:position pos:line="18" pos:column="35"/></name> <argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">read_threads<pos:position pos:line="18" pos:column="49"/></name> <operator pos:line="18" pos:column="50">+<pos:position pos:line="18" pos:column="51"/></operator> <name pos:line="18" pos:column="52">read_threads_num<pos:position pos:line="18" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="70">NULL<pos:position pos:line="18" pos:column="74"/></name></expr></argument>,
					<argument><expr><name pos:line="19" pos:column="41">plugin_read_thread<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="61">NULL<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call> <operator pos:line="19" pos:column="67">==<pos:position pos:line="19" pos:column="69"/></operator> <literal type="number" pos:line="19" pos:column="70">0<pos:position pos:line="19" pos:column="71"/></literal></expr>)<pos:position pos:line="19" pos:column="72"/></condition><then pos:line="19" pos:column="72">
		<block pos:line="20" pos:column="17">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">read_threads_num<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">++<pos:position pos:line="21" pos:column="43"/></operator></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then>
		<else pos:line="23" pos:column="17">else
		<block pos:line="24" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ERROR<pos:position pos:line="25" pos:column="30"/></name> <argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"plugin: start_threads: pthread_create failed."<pos:position pos:line="25" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="81"/></expr_stmt>
			<return pos:line="26" pos:column="25">return;<pos:position pos:line="26" pos:column="32"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></for> <comment type="block" pos:line="28" pos:column="11">/* for (i) */</comment>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
