<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_740_collectd-4.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_packet<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">buffer<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">buffer_len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">value_list_t<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">vl<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">VALUE_LIST_INIT<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">type<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">DATA_MAX_NAME_LEN<pos:position pos:line="6" pos:column="36"/></name></expr>]<pos:position pos:line="6" pos:column="37"/></index></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">notification_t<pos:position pos:line="7" pos:column="23"/></name></type> <name pos:line="7" pos:column="24">n<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">DEBUG<pos:position pos:line="9" pos:column="14"/></name> <argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="string" pos:line="9" pos:column="16">"network plugin: parse_packet: buffer = %p; buffer_len = %i;"<pos:position pos:line="9" pos:column="77"/></literal></expr></argument>,
			<argument><expr><name pos:line="10" pos:column="25">buffer<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">buffer_len<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name> <argument_list pos:line="12" pos:column="16">(<argument><expr><operator pos:line="12" pos:column="17">&amp;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="18">vl<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="22">'\0'<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="28">sizeof <argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">vl<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name> <argument_list pos:line="13" pos:column="16">(<argument><expr><operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="18">type<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="24">'\0'<pos:position pos:line="13" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="30">sizeof <argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">type<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><operator pos:line="14" pos:column="17">&amp;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="18">n<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="21">'\0'<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="27">sizeof <argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">n<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">status<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal><operator pos:line="17" pos:column="28">)<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">&amp;&amp;<pos:position pos:line="17" pos:column="40"/></operator> <operator pos:line="17" pos:column="33">(<pos:position pos:line="17" pos:column="34"/></operator><literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal> <operator pos:line="17" pos:column="36">&lt;<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="38">buffer_len<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">)<pos:position pos:line="17" pos:column="49"/></operator>
			<operator pos:line="18" pos:column="25">&amp;&amp;<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="28">(<pos:position pos:line="18" pos:column="29"/></operator><operator pos:line="18" pos:column="29">(<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">unsigned<pos:position pos:line="18" pos:column="38"/></name> <name pos:line="18" pos:column="39">int<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">buffer_len<pos:position pos:line="18" pos:column="54"/></name> <operator pos:line="18" pos:column="55">&gt;<pos:position pos:line="18" pos:column="59"/></operator> <sizeof pos:line="18" pos:column="57">sizeof <argument_list pos:line="18" pos:column="64">(<argument><expr><name pos:line="18" pos:column="65">part_header_t<pos:position pos:line="18" pos:column="78"/></name></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></sizeof><operator pos:line="18" pos:column="79">)<pos:position pos:line="18" pos:column="80"/></operator></expr>)<pos:position pos:line="18" pos:column="81"/></condition>
	<block pos:line="19" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">uint16_t<pos:position pos:line="20" pos:column="25"/></name></type> <name pos:line="20" pos:column="26">pkg_length<pos:position pos:line="20" pos:column="36"/></name></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">uint16_t<pos:position pos:line="21" pos:column="25"/></name></type> <name pos:line="21" pos:column="26">pkg_type<pos:position pos:line="21" pos:column="34"/></name></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="23" pos:column="17">memcpy<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><operator pos:line="23" pos:column="25">(<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">void<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></operator><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">&amp;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="35">pkg_type<pos:position pos:line="23" pos:column="43"/></name></expr></argument>,
				<argument><expr><operator pos:line="24" pos:column="33">(<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">void<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">*<pos:position pos:line="24" pos:column="40"/></operator><operator pos:line="24" pos:column="40">)<pos:position pos:line="24" pos:column="41"/></operator> <name pos:line="24" pos:column="42">buffer<pos:position pos:line="24" pos:column="48"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="25" pos:column="33">sizeof <argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">pkg_type<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">memcpy<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><operator pos:line="26" pos:column="25">(<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">void<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></operator><operator pos:line="26" pos:column="32">)<pos:position pos:line="26" pos:column="33"/></operator> <operator pos:line="26" pos:column="34">&amp;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="35">pkg_length<pos:position pos:line="26" pos:column="45"/></name></expr></argument>,
				<argument><expr><operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">void<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">*<pos:position pos:line="27" pos:column="40"/></operator><operator pos:line="27" pos:column="40">)<pos:position pos:line="27" pos:column="41"/></operator> <operator pos:line="27" pos:column="42">(<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">buffer<pos:position pos:line="27" pos:column="49"/></name> <operator pos:line="27" pos:column="50">+<pos:position pos:line="27" pos:column="51"/></operator> <sizeof pos:line="27" pos:column="52">sizeof <argument_list pos:line="27" pos:column="59">(<argument><expr><name pos:line="27" pos:column="60">pkg_type<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></sizeof><operator pos:line="27" pos:column="69">)<pos:position pos:line="27" pos:column="70"/></operator></expr></argument>,
				<argument><expr><sizeof pos:line="28" pos:column="33">sizeof <argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">pkg_length<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><name pos:line="30" pos:column="17">pkg_length<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <call><name pos:line="30" pos:column="30">ntohs<pos:position pos:line="30" pos:column="35"/></name> <argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">pkg_length<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">pkg_type<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <call><name pos:line="31" pos:column="28">ntohs<pos:position pos:line="31" pos:column="33"/></name> <argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">pkg_type<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">pkg_length<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">&gt;<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="34">buffer_len<pos:position pos:line="33" pos:column="44"/></name></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45">
			<block type="pseudo"><break pos:line="34" pos:column="25">break;<pos:position pos:line="34" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="35" pos:column="17">/* Ensure that this loop terminates eventually */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">pkg_length<pos:position pos:line="36" pos:column="31"/></name> <operator pos:line="36" pos:column="32">&lt;<pos:position pos:line="36" pos:column="36"/></operator> <operator pos:line="36" pos:column="34">(<pos:position pos:line="36" pos:column="35"/></operator><literal type="number" pos:line="36" pos:column="35">2<pos:position pos:line="36" pos:column="36"/></literal> <operator pos:line="36" pos:column="37">*<pos:position pos:line="36" pos:column="38"/></operator> <sizeof pos:line="36" pos:column="39">sizeof <argument_list pos:line="36" pos:column="46">(<argument><expr><name pos:line="36" pos:column="47">uint16_t<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></sizeof><operator pos:line="36" pos:column="56">)<pos:position pos:line="36" pos:column="57"/></operator></expr>)<pos:position pos:line="36" pos:column="58"/></condition><then pos:line="36" pos:column="58">
			<block type="pseudo"><break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break></block></then></if>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">pkg_type<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">==<pos:position pos:line="39" pos:column="32"/></operator> <name pos:line="39" pos:column="33">TYPE_VALUES<pos:position pos:line="39" pos:column="44"/></name></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45">
		<block pos:line="40" pos:column="17">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">status<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <call><name pos:line="41" pos:column="34">parse_part_values<pos:position pos:line="41" pos:column="51"/></name> <argument_list pos:line="41" pos:column="52">(<argument><expr><operator pos:line="41" pos:column="53">&amp;<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="54">buffer<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="62">&amp;<pos:position pos:line="41" pos:column="67"/></operator><name pos:line="41" pos:column="63">buffer_len<pos:position pos:line="41" pos:column="73"/></name></expr></argument>,
					<argument><expr><operator pos:line="42" pos:column="41">&amp;<pos:position pos:line="42" pos:column="46"/></operator><name><name pos:line="42" pos:column="42">vl<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">.<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">values<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="53">&amp;<pos:position pos:line="42" pos:column="58"/></operator><name><name pos:line="42" pos:column="54">vl<pos:position pos:line="42" pos:column="56"/></name><operator pos:line="42" pos:column="56">.<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="57">values_len<pos:position pos:line="42" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt>

			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">status<pos:position pos:line="44" pos:column="35"/></name> <operator pos:line="44" pos:column="36">!=<pos:position pos:line="44" pos:column="38"/></operator> <literal type="number" pos:line="44" pos:column="39">0<pos:position pos:line="44" pos:column="40"/></literal></expr>)<pos:position pos:line="44" pos:column="41"/></condition><then pos:line="44" pos:column="41">
				<block type="pseudo"><break pos:line="45" pos:column="33">break;<pos:position pos:line="45" pos:column="39"/></break></block></then></if>

			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><operator pos:line="47" pos:column="29">(<pos:position pos:line="47" pos:column="30"/></operator><name><name pos:line="47" pos:column="30">vl<pos:position pos:line="47" pos:column="32"/></name><operator pos:line="47" pos:column="32">.<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">time<pos:position pos:line="47" pos:column="37"/></name></name> <operator pos:line="47" pos:column="38">&gt;<pos:position pos:line="47" pos:column="42"/></operator> <literal type="number" pos:line="47" pos:column="40">0<pos:position pos:line="47" pos:column="41"/></literal><operator pos:line="47" pos:column="41">)<pos:position pos:line="47" pos:column="42"/></operator>
					<operator pos:line="48" pos:column="41">&amp;&amp;<pos:position pos:line="48" pos:column="51"/></operator> <operator pos:line="48" pos:column="44">(<pos:position pos:line="48" pos:column="45"/></operator><call><name pos:line="48" pos:column="45">strlen<pos:position pos:line="48" pos:column="51"/></name> <argument_list pos:line="48" pos:column="52">(<argument><expr><name><name pos:line="48" pos:column="53">vl<pos:position pos:line="48" pos:column="55"/></name><operator pos:line="48" pos:column="55">.<pos:position pos:line="48" pos:column="56"/></operator><name pos:line="48" pos:column="56">host<pos:position pos:line="48" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></call> <operator pos:line="48" pos:column="62">&gt;<pos:position pos:line="48" pos:column="66"/></operator> <literal type="number" pos:line="48" pos:column="64">0<pos:position pos:line="48" pos:column="65"/></literal><operator pos:line="48" pos:column="65">)<pos:position pos:line="48" pos:column="66"/></operator>
					<operator pos:line="49" pos:column="41">&amp;&amp;<pos:position pos:line="49" pos:column="51"/></operator> <operator pos:line="49" pos:column="44">(<pos:position pos:line="49" pos:column="45"/></operator><call><name pos:line="49" pos:column="45">strlen<pos:position pos:line="49" pos:column="51"/></name> <argument_list pos:line="49" pos:column="52">(<argument><expr><name><name pos:line="49" pos:column="53">vl<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">.<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="56">plugin<pos:position pos:line="49" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="63"/></argument_list></call> <operator pos:line="49" pos:column="64">&gt;<pos:position pos:line="49" pos:column="68"/></operator> <literal type="number" pos:line="49" pos:column="66">0<pos:position pos:line="49" pos:column="67"/></literal><operator pos:line="49" pos:column="67">)<pos:position pos:line="49" pos:column="68"/></operator>
					<operator pos:line="50" pos:column="41">&amp;&amp;<pos:position pos:line="50" pos:column="51"/></operator> <operator pos:line="50" pos:column="44">(<pos:position pos:line="50" pos:column="45"/></operator><call><name pos:line="50" pos:column="45">strlen<pos:position pos:line="50" pos:column="51"/></name> <argument_list pos:line="50" pos:column="52">(<argument><expr><name pos:line="50" pos:column="53">type<pos:position pos:line="50" pos:column="57"/></name></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call> <operator pos:line="50" pos:column="59">&gt;<pos:position pos:line="50" pos:column="63"/></operator> <literal type="number" pos:line="50" pos:column="61">0<pos:position pos:line="50" pos:column="62"/></literal><operator pos:line="50" pos:column="62">)<pos:position pos:line="50" pos:column="63"/></operator>
					<operator pos:line="51" pos:column="41">&amp;&amp;<pos:position pos:line="51" pos:column="51"/></operator> <operator pos:line="51" pos:column="44">(<pos:position pos:line="51" pos:column="45"/></operator><call><name pos:line="51" pos:column="45">cache_check<pos:position pos:line="51" pos:column="56"/></name> <argument_list pos:line="51" pos:column="57">(<argument><expr><name pos:line="51" pos:column="58">type<pos:position pos:line="51" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="64">&amp;<pos:position pos:line="51" pos:column="69"/></operator><name pos:line="51" pos:column="65">vl<pos:position pos:line="51" pos:column="67"/></name></expr></argument>)<pos:position pos:line="51" pos:column="68"/></argument_list></call> <operator pos:line="51" pos:column="69">==<pos:position pos:line="51" pos:column="71"/></operator> <literal type="number" pos:line="51" pos:column="72">0<pos:position pos:line="51" pos:column="73"/></literal><operator pos:line="51" pos:column="73">)<pos:position pos:line="51" pos:column="74"/></operator></expr>)<pos:position pos:line="51" pos:column="75"/></condition><then pos:line="51" pos:column="75">
			<block pos:line="52" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">plugin_dispatch_values<pos:position pos:line="53" pos:column="55"/></name> <argument_list pos:line="53" pos:column="56">(<argument><expr><name pos:line="53" pos:column="57">type<pos:position pos:line="53" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="63">&amp;<pos:position pos:line="53" pos:column="68"/></operator><name pos:line="53" pos:column="64">vl<pos:position pos:line="53" pos:column="66"/></name></expr></argument>)<pos:position pos:line="53" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="54" pos:column="26"/></block></then>
			<else pos:line="55" pos:column="25">else
			<block pos:line="56" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">DEBUG<pos:position pos:line="57" pos:column="38"/></name> <argument_list pos:line="57" pos:column="39">(<argument><expr><literal type="string" pos:line="57" pos:column="40">"network plugin: parse_packet:"<pos:position pos:line="57" pos:column="71"/></literal>
						<literal type="string" pos:line="58" pos:column="49">" NOT dispatching values"<pos:position pos:line="58" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="76"/></expr_stmt>
			}<pos:position pos:line="59" pos:column="26"/></block></else></if>

			<expr_stmt><expr><call><name pos:line="61" pos:column="25">sfree<pos:position pos:line="61" pos:column="30"/></name> <argument_list pos:line="61" pos:column="31">(<argument><expr><name><name pos:line="61" pos:column="32">vl<pos:position pos:line="61" pos:column="34"/></name><operator pos:line="61" pos:column="34">.<pos:position pos:line="61" pos:column="35"/></operator><name pos:line="61" pos:column="35">values<pos:position pos:line="61" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></then>
		<elseif pos:line="63" pos:column="17">else <if pos:line="63" pos:column="22">if <condition pos:line="63" pos:column="25">(<expr><name pos:line="63" pos:column="26">pkg_type<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">==<pos:position pos:line="63" pos:column="37"/></operator> <name pos:line="63" pos:column="38">TYPE_TIME<pos:position pos:line="63" pos:column="47"/></name></expr>)<pos:position pos:line="63" pos:column="48"/></condition><then pos:line="63" pos:column="48">
		<block pos:line="64" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">uint64_t<pos:position pos:line="65" pos:column="33"/></name></type> <name pos:line="65" pos:column="34">tmp<pos:position pos:line="65" pos:column="37"/></name> <init pos:line="65" pos:column="38">= <expr><literal type="number" pos:line="65" pos:column="40">0<pos:position pos:line="65" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="65" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="66" pos:column="25">status<pos:position pos:line="66" pos:column="31"/></name> <operator pos:line="66" pos:column="32">=<pos:position pos:line="66" pos:column="33"/></operator> <call><name pos:line="66" pos:column="34">parse_part_number<pos:position pos:line="66" pos:column="51"/></name> <argument_list pos:line="66" pos:column="52">(<argument><expr><operator pos:line="66" pos:column="53">&amp;<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="54">buffer<pos:position pos:line="66" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="62">&amp;<pos:position pos:line="66" pos:column="67"/></operator><name pos:line="66" pos:column="63">buffer_len<pos:position pos:line="66" pos:column="73"/></name></expr></argument>,
					<argument><expr><operator pos:line="67" pos:column="41">&amp;<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="42">tmp<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name pos:line="68" pos:column="29">status<pos:position pos:line="68" pos:column="35"/></name> <operator pos:line="68" pos:column="36">==<pos:position pos:line="68" pos:column="38"/></operator> <literal type="number" pos:line="68" pos:column="39">0<pos:position pos:line="68" pos:column="40"/></literal></expr>)<pos:position pos:line="68" pos:column="41"/></condition><then pos:line="68" pos:column="41">
			<block pos:line="69" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="70" pos:column="33">vl<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">.<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="36">time<pos:position pos:line="70" pos:column="40"/></name></name> <operator pos:line="70" pos:column="41">=<pos:position pos:line="70" pos:column="42"/></operator> <operator pos:line="70" pos:column="43">(<pos:position pos:line="70" pos:column="44"/></operator><name pos:line="70" pos:column="44">time_t<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">)<pos:position pos:line="70" pos:column="51"/></operator> <name pos:line="70" pos:column="52">tmp<pos:position pos:line="70" pos:column="55"/></name></expr>;<pos:position pos:line="70" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="71" pos:column="33">n<pos:position pos:line="71" pos:column="34"/></name><operator pos:line="71" pos:column="34">.<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">time<pos:position pos:line="71" pos:column="39"/></name></name> <operator pos:line="71" pos:column="40">=<pos:position pos:line="71" pos:column="41"/></operator> <operator pos:line="71" pos:column="42">(<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="43">time_t<pos:position pos:line="71" pos:column="49"/></name><operator pos:line="71" pos:column="49">)<pos:position pos:line="71" pos:column="50"/></operator> <name pos:line="71" pos:column="51">tmp<pos:position pos:line="71" pos:column="54"/></name></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="72" pos:column="26"/></block></then></if>
		}<pos:position pos:line="73" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="74" pos:column="17">else <if pos:line="74" pos:column="22">if <condition pos:line="74" pos:column="25">(<expr><name pos:line="74" pos:column="26">pkg_type<pos:position pos:line="74" pos:column="34"/></name> <operator pos:line="74" pos:column="35">==<pos:position pos:line="74" pos:column="37"/></operator> <name pos:line="74" pos:column="38">TYPE_INTERVAL<pos:position pos:line="74" pos:column="51"/></name></expr>)<pos:position pos:line="74" pos:column="52"/></condition><then pos:line="74" pos:column="52">
		<block pos:line="75" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">uint64_t<pos:position pos:line="76" pos:column="33"/></name></type> <name pos:line="76" pos:column="34">tmp<pos:position pos:line="76" pos:column="37"/></name> <init pos:line="76" pos:column="38">= <expr><literal type="number" pos:line="76" pos:column="40">0<pos:position pos:line="76" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="77" pos:column="25">status<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">=<pos:position pos:line="77" pos:column="33"/></operator> <call><name pos:line="77" pos:column="34">parse_part_number<pos:position pos:line="77" pos:column="51"/></name> <argument_list pos:line="77" pos:column="52">(<argument><expr><operator pos:line="77" pos:column="53">&amp;<pos:position pos:line="77" pos:column="58"/></operator><name pos:line="77" pos:column="54">buffer<pos:position pos:line="77" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="62">&amp;<pos:position pos:line="77" pos:column="67"/></operator><name pos:line="77" pos:column="63">buffer_len<pos:position pos:line="77" pos:column="73"/></name></expr></argument>,
					<argument><expr><operator pos:line="78" pos:column="41">&amp;<pos:position pos:line="78" pos:column="46"/></operator><name pos:line="78" pos:column="42">tmp<pos:position pos:line="78" pos:column="45"/></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><name pos:line="79" pos:column="29">status<pos:position pos:line="79" pos:column="35"/></name> <operator pos:line="79" pos:column="36">==<pos:position pos:line="79" pos:column="38"/></operator> <literal type="number" pos:line="79" pos:column="39">0<pos:position pos:line="79" pos:column="40"/></literal></expr>)<pos:position pos:line="79" pos:column="41"/></condition><then pos:line="79" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="80" pos:column="33">vl<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">.<pos:position pos:line="80" pos:column="36"/></operator><name pos:line="80" pos:column="36">interval<pos:position pos:line="80" pos:column="44"/></name></name> <operator pos:line="80" pos:column="45">=<pos:position pos:line="80" pos:column="46"/></operator> <operator pos:line="80" pos:column="47">(<pos:position pos:line="80" pos:column="48"/></operator><name pos:line="80" pos:column="48">int<pos:position pos:line="80" pos:column="51"/></name><operator pos:line="80" pos:column="51">)<pos:position pos:line="80" pos:column="52"/></operator> <name pos:line="80" pos:column="53">tmp<pos:position pos:line="80" pos:column="56"/></name></expr>;<pos:position pos:line="80" pos:column="57"/></expr_stmt></block></then></if>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="82" pos:column="17">else <if pos:line="82" pos:column="22">if <condition pos:line="82" pos:column="25">(<expr><name pos:line="82" pos:column="26">pkg_type<pos:position pos:line="82" pos:column="34"/></name> <operator pos:line="82" pos:column="35">==<pos:position pos:line="82" pos:column="37"/></operator> <name pos:line="82" pos:column="38">TYPE_HOST<pos:position pos:line="82" pos:column="47"/></name></expr>)<pos:position pos:line="82" pos:column="48"/></condition><then pos:line="82" pos:column="48">
		<block pos:line="83" pos:column="17">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">status<pos:position pos:line="84" pos:column="31"/></name> <operator pos:line="84" pos:column="32">=<pos:position pos:line="84" pos:column="33"/></operator> <call><name pos:line="84" pos:column="34">parse_part_string<pos:position pos:line="84" pos:column="51"/></name> <argument_list pos:line="84" pos:column="52">(<argument><expr><operator pos:line="84" pos:column="53">&amp;<pos:position pos:line="84" pos:column="58"/></operator><name pos:line="84" pos:column="54">buffer<pos:position pos:line="84" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="62">&amp;<pos:position pos:line="84" pos:column="67"/></operator><name pos:line="84" pos:column="63">buffer_len<pos:position pos:line="84" pos:column="73"/></name></expr></argument>,
					<argument><expr><name><name pos:line="85" pos:column="41">vl<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">.<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">host<pos:position pos:line="85" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="50">sizeof <argument_list pos:line="85" pos:column="57">(<argument><expr><name><name pos:line="85" pos:column="58">vl<pos:position pos:line="85" pos:column="60"/></name><operator pos:line="85" pos:column="60">.<pos:position pos:line="85" pos:column="61"/></operator><name pos:line="85" pos:column="61">host<pos:position pos:line="85" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="85" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="68"/></expr_stmt>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">status<pos:position pos:line="86" pos:column="35"/></name> <operator pos:line="86" pos:column="36">==<pos:position pos:line="86" pos:column="38"/></operator> <literal type="number" pos:line="86" pos:column="39">0<pos:position pos:line="86" pos:column="40"/></literal></expr>)<pos:position pos:line="86" pos:column="41"/></condition><then pos:line="86" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="33">sstrncpy<pos:position pos:line="87" pos:column="41"/></name> <argument_list pos:line="87" pos:column="42">(<argument><expr><name><name pos:line="87" pos:column="43">n<pos:position pos:line="87" pos:column="44"/></name><operator pos:line="87" pos:column="44">.<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="45">host<pos:position pos:line="87" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="51">vl<pos:position pos:line="87" pos:column="53"/></name><operator pos:line="87" pos:column="53">.<pos:position pos:line="87" pos:column="54"/></operator><name pos:line="87" pos:column="54">host<pos:position pos:line="87" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="87" pos:column="60">sizeof <argument_list pos:line="87" pos:column="67">(<argument><expr><name><name pos:line="87" pos:column="68">n<pos:position pos:line="87" pos:column="69"/></name><operator pos:line="87" pos:column="69">.<pos:position pos:line="87" pos:column="70"/></operator><name pos:line="87" pos:column="70">host<pos:position pos:line="87" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="87" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="89" pos:column="17">else <if pos:line="89" pos:column="22">if <condition pos:line="89" pos:column="25">(<expr><name pos:line="89" pos:column="26">pkg_type<pos:position pos:line="89" pos:column="34"/></name> <operator pos:line="89" pos:column="35">==<pos:position pos:line="89" pos:column="37"/></operator> <name pos:line="89" pos:column="38">TYPE_PLUGIN<pos:position pos:line="89" pos:column="49"/></name></expr>)<pos:position pos:line="89" pos:column="50"/></condition><then pos:line="89" pos:column="50">
		<block pos:line="90" pos:column="17">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">status<pos:position pos:line="91" pos:column="31"/></name> <operator pos:line="91" pos:column="32">=<pos:position pos:line="91" pos:column="33"/></operator> <call><name pos:line="91" pos:column="34">parse_part_string<pos:position pos:line="91" pos:column="51"/></name> <argument_list pos:line="91" pos:column="52">(<argument><expr><operator pos:line="91" pos:column="53">&amp;<pos:position pos:line="91" pos:column="58"/></operator><name pos:line="91" pos:column="54">buffer<pos:position pos:line="91" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="62">&amp;<pos:position pos:line="91" pos:column="67"/></operator><name pos:line="91" pos:column="63">buffer_len<pos:position pos:line="91" pos:column="73"/></name></expr></argument>,
					<argument><expr><name><name pos:line="92" pos:column="41">vl<pos:position pos:line="92" pos:column="43"/></name><operator pos:line="92" pos:column="43">.<pos:position pos:line="92" pos:column="44"/></operator><name pos:line="92" pos:column="44">plugin<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="52">sizeof <argument_list pos:line="92" pos:column="59">(<argument><expr><name><name pos:line="92" pos:column="60">vl<pos:position pos:line="92" pos:column="62"/></name><operator pos:line="92" pos:column="62">.<pos:position pos:line="92" pos:column="63"/></operator><name pos:line="92" pos:column="63">plugin<pos:position pos:line="92" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt>
			<if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><name pos:line="93" pos:column="29">status<pos:position pos:line="93" pos:column="35"/></name> <operator pos:line="93" pos:column="36">==<pos:position pos:line="93" pos:column="38"/></operator> <literal type="number" pos:line="93" pos:column="39">0<pos:position pos:line="93" pos:column="40"/></literal></expr>)<pos:position pos:line="93" pos:column="41"/></condition><then pos:line="93" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="33">sstrncpy<pos:position pos:line="94" pos:column="41"/></name> <argument_list pos:line="94" pos:column="42">(<argument><expr><name><name pos:line="94" pos:column="43">n<pos:position pos:line="94" pos:column="44"/></name><operator pos:line="94" pos:column="44">.<pos:position pos:line="94" pos:column="45"/></operator><name pos:line="94" pos:column="45">plugin<pos:position pos:line="94" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="53">vl<pos:position pos:line="94" pos:column="55"/></name><operator pos:line="94" pos:column="55">.<pos:position pos:line="94" pos:column="56"/></operator><name pos:line="94" pos:column="56">plugin<pos:position pos:line="94" pos:column="62"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="95" pos:column="49">sizeof <argument_list pos:line="95" pos:column="56">(<argument><expr><name><name pos:line="95" pos:column="57">n<pos:position pos:line="95" pos:column="58"/></name><operator pos:line="95" pos:column="58">.<pos:position pos:line="95" pos:column="59"/></operator><name pos:line="95" pos:column="59">plugin<pos:position pos:line="95" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="68"/></expr_stmt></block></then></if>
		}<pos:position pos:line="96" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="97" pos:column="17">else <if pos:line="97" pos:column="22">if <condition pos:line="97" pos:column="25">(<expr><name pos:line="97" pos:column="26">pkg_type<pos:position pos:line="97" pos:column="34"/></name> <operator pos:line="97" pos:column="35">==<pos:position pos:line="97" pos:column="37"/></operator> <name pos:line="97" pos:column="38">TYPE_PLUGIN_INSTANCE<pos:position pos:line="97" pos:column="58"/></name></expr>)<pos:position pos:line="97" pos:column="59"/></condition><then pos:line="97" pos:column="59">
		<block pos:line="98" pos:column="17">{
			<expr_stmt><expr><name pos:line="99" pos:column="25">status<pos:position pos:line="99" pos:column="31"/></name> <operator pos:line="99" pos:column="32">=<pos:position pos:line="99" pos:column="33"/></operator> <call><name pos:line="99" pos:column="34">parse_part_string<pos:position pos:line="99" pos:column="51"/></name> <argument_list pos:line="99" pos:column="52">(<argument><expr><operator pos:line="99" pos:column="53">&amp;<pos:position pos:line="99" pos:column="58"/></operator><name pos:line="99" pos:column="54">buffer<pos:position pos:line="99" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="62">&amp;<pos:position pos:line="99" pos:column="67"/></operator><name pos:line="99" pos:column="63">buffer_len<pos:position pos:line="99" pos:column="73"/></name></expr></argument>,
					<argument><expr><name><name pos:line="100" pos:column="41">vl<pos:position pos:line="100" pos:column="43"/></name><operator pos:line="100" pos:column="43">.<pos:position pos:line="100" pos:column="44"/></operator><name pos:line="100" pos:column="44">plugin_instance<pos:position pos:line="100" pos:column="59"/></name></name></expr></argument>,
					<argument><expr><sizeof pos:line="101" pos:column="41">sizeof <argument_list pos:line="101" pos:column="48">(<argument><expr><name><name pos:line="101" pos:column="49">vl<pos:position pos:line="101" pos:column="51"/></name><operator pos:line="101" pos:column="51">.<pos:position pos:line="101" pos:column="52"/></operator><name pos:line="101" pos:column="52">plugin_instance<pos:position pos:line="101" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="101" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="70"/></expr_stmt>
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><name pos:line="102" pos:column="29">status<pos:position pos:line="102" pos:column="35"/></name> <operator pos:line="102" pos:column="36">==<pos:position pos:line="102" pos:column="38"/></operator> <literal type="number" pos:line="102" pos:column="39">0<pos:position pos:line="102" pos:column="40"/></literal></expr>)<pos:position pos:line="102" pos:column="41"/></condition><then pos:line="102" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="33">sstrncpy<pos:position pos:line="103" pos:column="41"/></name> <argument_list pos:line="103" pos:column="42">(<argument><expr><name><name pos:line="103" pos:column="43">n<pos:position pos:line="103" pos:column="44"/></name><operator pos:line="103" pos:column="44">.<pos:position pos:line="103" pos:column="45"/></operator><name pos:line="103" pos:column="45">plugin_instance<pos:position pos:line="103" pos:column="60"/></name></name></expr></argument>,
						<argument><expr><name><name pos:line="104" pos:column="49">vl<pos:position pos:line="104" pos:column="51"/></name><operator pos:line="104" pos:column="51">.<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="52">plugin_instance<pos:position pos:line="104" pos:column="67"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="105" pos:column="49">sizeof <argument_list pos:line="105" pos:column="56">(<argument><expr><name><name pos:line="105" pos:column="57">n<pos:position pos:line="105" pos:column="58"/></name><operator pos:line="105" pos:column="58">.<pos:position pos:line="105" pos:column="59"/></operator><name pos:line="105" pos:column="59">plugin_instance<pos:position pos:line="105" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="105" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="106" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="107" pos:column="17">else <if pos:line="107" pos:column="22">if <condition pos:line="107" pos:column="25">(<expr><name pos:line="107" pos:column="26">pkg_type<pos:position pos:line="107" pos:column="34"/></name> <operator pos:line="107" pos:column="35">==<pos:position pos:line="107" pos:column="37"/></operator> <name pos:line="107" pos:column="38">TYPE_TYPE<pos:position pos:line="107" pos:column="47"/></name></expr>)<pos:position pos:line="107" pos:column="48"/></condition><then pos:line="107" pos:column="48">
		<block pos:line="108" pos:column="17">{
			<expr_stmt><expr><name pos:line="109" pos:column="25">status<pos:position pos:line="109" pos:column="31"/></name> <operator pos:line="109" pos:column="32">=<pos:position pos:line="109" pos:column="33"/></operator> <call><name pos:line="109" pos:column="34">parse_part_string<pos:position pos:line="109" pos:column="51"/></name> <argument_list pos:line="109" pos:column="52">(<argument><expr><operator pos:line="109" pos:column="53">&amp;<pos:position pos:line="109" pos:column="58"/></operator><name pos:line="109" pos:column="54">buffer<pos:position pos:line="109" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="62">&amp;<pos:position pos:line="109" pos:column="67"/></operator><name pos:line="109" pos:column="63">buffer_len<pos:position pos:line="109" pos:column="73"/></name></expr></argument>,
					<argument><expr><name pos:line="110" pos:column="41">type<pos:position pos:line="110" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="47">sizeof <argument_list pos:line="110" pos:column="54">(<argument><expr><name pos:line="110" pos:column="55">type<pos:position pos:line="110" pos:column="59"/></name></expr></argument>)<pos:position pos:line="110" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="110" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="62"/></expr_stmt>
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><name pos:line="111" pos:column="29">status<pos:position pos:line="111" pos:column="35"/></name> <operator pos:line="111" pos:column="36">==<pos:position pos:line="111" pos:column="38"/></operator> <literal type="number" pos:line="111" pos:column="39">0<pos:position pos:line="111" pos:column="40"/></literal></expr>)<pos:position pos:line="111" pos:column="41"/></condition><then pos:line="111" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="112" pos:column="33">sstrncpy<pos:position pos:line="112" pos:column="41"/></name> <argument_list pos:line="112" pos:column="42">(<argument><expr><name><name pos:line="112" pos:column="43">n<pos:position pos:line="112" pos:column="44"/></name><operator pos:line="112" pos:column="44">.<pos:position pos:line="112" pos:column="45"/></operator><name pos:line="112" pos:column="45">type<pos:position pos:line="112" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="51">type<pos:position pos:line="112" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="112" pos:column="57">sizeof <argument_list pos:line="112" pos:column="64">(<argument><expr><name><name pos:line="112" pos:column="65">n<pos:position pos:line="112" pos:column="66"/></name><operator pos:line="112" pos:column="66">.<pos:position pos:line="112" pos:column="67"/></operator><name pos:line="112" pos:column="67">type<pos:position pos:line="112" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="112" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="74"/></expr_stmt></block></then></if>
		}<pos:position pos:line="113" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="114" pos:column="17">else <if pos:line="114" pos:column="22">if <condition pos:line="114" pos:column="25">(<expr><name pos:line="114" pos:column="26">pkg_type<pos:position pos:line="114" pos:column="34"/></name> <operator pos:line="114" pos:column="35">==<pos:position pos:line="114" pos:column="37"/></operator> <name pos:line="114" pos:column="38">TYPE_TYPE_INSTANCE<pos:position pos:line="114" pos:column="56"/></name></expr>)<pos:position pos:line="114" pos:column="57"/></condition><then pos:line="114" pos:column="57">
		<block pos:line="115" pos:column="17">{
			<expr_stmt><expr><name pos:line="116" pos:column="25">status<pos:position pos:line="116" pos:column="31"/></name> <operator pos:line="116" pos:column="32">=<pos:position pos:line="116" pos:column="33"/></operator> <call><name pos:line="116" pos:column="34">parse_part_string<pos:position pos:line="116" pos:column="51"/></name> <argument_list pos:line="116" pos:column="52">(<argument><expr><operator pos:line="116" pos:column="53">&amp;<pos:position pos:line="116" pos:column="58"/></operator><name pos:line="116" pos:column="54">buffer<pos:position pos:line="116" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="62">&amp;<pos:position pos:line="116" pos:column="67"/></operator><name pos:line="116" pos:column="63">buffer_len<pos:position pos:line="116" pos:column="73"/></name></expr></argument>,
					<argument><expr><name><name pos:line="117" pos:column="41">vl<pos:position pos:line="117" pos:column="43"/></name><operator pos:line="117" pos:column="43">.<pos:position pos:line="117" pos:column="44"/></operator><name pos:line="117" pos:column="44">type_instance<pos:position pos:line="117" pos:column="57"/></name></name></expr></argument>,
					<argument><expr><sizeof pos:line="118" pos:column="41">sizeof <argument_list pos:line="118" pos:column="48">(<argument><expr><name><name pos:line="118" pos:column="49">vl<pos:position pos:line="118" pos:column="51"/></name><operator pos:line="118" pos:column="51">.<pos:position pos:line="118" pos:column="52"/></operator><name pos:line="118" pos:column="52">type_instance<pos:position pos:line="118" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="118" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="68"/></expr_stmt>
			<if pos:line="119" pos:column="25">if <condition pos:line="119" pos:column="28">(<expr><name pos:line="119" pos:column="29">status<pos:position pos:line="119" pos:column="35"/></name> <operator pos:line="119" pos:column="36">==<pos:position pos:line="119" pos:column="38"/></operator> <literal type="number" pos:line="119" pos:column="39">0<pos:position pos:line="119" pos:column="40"/></literal></expr>)<pos:position pos:line="119" pos:column="41"/></condition><then pos:line="119" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="33">sstrncpy<pos:position pos:line="120" pos:column="41"/></name> <argument_list pos:line="120" pos:column="42">(<argument><expr><name><name pos:line="120" pos:column="43">n<pos:position pos:line="120" pos:column="44"/></name><operator pos:line="120" pos:column="44">.<pos:position pos:line="120" pos:column="45"/></operator><name pos:line="120" pos:column="45">type_instance<pos:position pos:line="120" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="60">vl<pos:position pos:line="120" pos:column="62"/></name><operator pos:line="120" pos:column="62">.<pos:position pos:line="120" pos:column="63"/></operator><name pos:line="120" pos:column="63">type_instance<pos:position pos:line="120" pos:column="76"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="121" pos:column="49">sizeof <argument_list pos:line="121" pos:column="56">(<argument><expr><name><name pos:line="121" pos:column="57">n<pos:position pos:line="121" pos:column="58"/></name><operator pos:line="121" pos:column="58">.<pos:position pos:line="121" pos:column="59"/></operator><name pos:line="121" pos:column="59">type_instance<pos:position pos:line="121" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="75"/></expr_stmt></block></then></if>
		}<pos:position pos:line="122" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="123" pos:column="17">else <if pos:line="123" pos:column="22">if <condition pos:line="123" pos:column="25">(<expr><name pos:line="123" pos:column="26">pkg_type<pos:position pos:line="123" pos:column="34"/></name> <operator pos:line="123" pos:column="35">==<pos:position pos:line="123" pos:column="37"/></operator> <name pos:line="123" pos:column="38">TYPE_MESSAGE<pos:position pos:line="123" pos:column="50"/></name></expr>)<pos:position pos:line="123" pos:column="51"/></condition><then pos:line="123" pos:column="51">
		<block pos:line="124" pos:column="17">{
			<expr_stmt><expr><name pos:line="125" pos:column="25">status<pos:position pos:line="125" pos:column="31"/></name> <operator pos:line="125" pos:column="32">=<pos:position pos:line="125" pos:column="33"/></operator> <call><name pos:line="125" pos:column="34">parse_part_string<pos:position pos:line="125" pos:column="51"/></name> <argument_list pos:line="125" pos:column="52">(<argument><expr><operator pos:line="125" pos:column="53">&amp;<pos:position pos:line="125" pos:column="58"/></operator><name pos:line="125" pos:column="54">buffer<pos:position pos:line="125" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="62">&amp;<pos:position pos:line="125" pos:column="67"/></operator><name pos:line="125" pos:column="63">buffer_len<pos:position pos:line="125" pos:column="73"/></name></expr></argument>,
					<argument><expr><name><name pos:line="126" pos:column="41">n<pos:position pos:line="126" pos:column="42"/></name><operator pos:line="126" pos:column="42">.<pos:position pos:line="126" pos:column="43"/></operator><name pos:line="126" pos:column="43">message<pos:position pos:line="126" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="126" pos:column="52">sizeof <argument_list pos:line="126" pos:column="59">(<argument><expr><name><name pos:line="126" pos:column="60">n<pos:position pos:line="126" pos:column="61"/></name><operator pos:line="126" pos:column="61">.<pos:position pos:line="126" pos:column="62"/></operator><name pos:line="126" pos:column="62">message<pos:position pos:line="126" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="126" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="72"/></expr_stmt>

			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name pos:line="128" pos:column="29">status<pos:position pos:line="128" pos:column="35"/></name> <operator pos:line="128" pos:column="36">!=<pos:position pos:line="128" pos:column="38"/></operator> <literal type="number" pos:line="128" pos:column="39">0<pos:position pos:line="128" pos:column="40"/></literal></expr>)<pos:position pos:line="128" pos:column="41"/></condition><then pos:line="128" pos:column="41">
			<block pos:line="129" pos:column="25">{
				<comment type="block" pos:line="130" pos:column="33">/* do nothing */</comment>
			}<pos:position pos:line="131" pos:column="26"/></block></then>
			<elseif pos:line="132" pos:column="25">else <if pos:line="132" pos:column="30">if <condition pos:line="132" pos:column="33">(<expr><operator pos:line="132" pos:column="34">(<pos:position pos:line="132" pos:column="35"/></operator><name><name pos:line="132" pos:column="35">n<pos:position pos:line="132" pos:column="36"/></name><operator pos:line="132" pos:column="36">.<pos:position pos:line="132" pos:column="37"/></operator><name pos:line="132" pos:column="37">severity<pos:position pos:line="132" pos:column="45"/></name></name> <operator pos:line="132" pos:column="46">!=<pos:position pos:line="132" pos:column="48"/></operator> <name pos:line="132" pos:column="49">NOTIF_FAILURE<pos:position pos:line="132" pos:column="62"/></name><operator pos:line="132" pos:column="62">)<pos:position pos:line="132" pos:column="63"/></operator>
					<operator pos:line="133" pos:column="41">&amp;&amp;<pos:position pos:line="133" pos:column="51"/></operator> <operator pos:line="133" pos:column="44">(<pos:position pos:line="133" pos:column="45"/></operator><name><name pos:line="133" pos:column="45">n<pos:position pos:line="133" pos:column="46"/></name><operator pos:line="133" pos:column="46">.<pos:position pos:line="133" pos:column="47"/></operator><name pos:line="133" pos:column="47">severity<pos:position pos:line="133" pos:column="55"/></name></name> <operator pos:line="133" pos:column="56">!=<pos:position pos:line="133" pos:column="58"/></operator> <name pos:line="133" pos:column="59">NOTIF_WARNING<pos:position pos:line="133" pos:column="72"/></name><operator pos:line="133" pos:column="72">)<pos:position pos:line="133" pos:column="73"/></operator>
					<operator pos:line="134" pos:column="41">&amp;&amp;<pos:position pos:line="134" pos:column="51"/></operator> <operator pos:line="134" pos:column="44">(<pos:position pos:line="134" pos:column="45"/></operator><name><name pos:line="134" pos:column="45">n<pos:position pos:line="134" pos:column="46"/></name><operator pos:line="134" pos:column="46">.<pos:position pos:line="134" pos:column="47"/></operator><name pos:line="134" pos:column="47">severity<pos:position pos:line="134" pos:column="55"/></name></name> <operator pos:line="134" pos:column="56">!=<pos:position pos:line="134" pos:column="58"/></operator> <name pos:line="134" pos:column="59">NOTIF_OKAY<pos:position pos:line="134" pos:column="69"/></name><operator pos:line="134" pos:column="69">)<pos:position pos:line="134" pos:column="70"/></operator></expr>)<pos:position pos:line="134" pos:column="71"/></condition><then pos:line="134" pos:column="71">
			<block pos:line="135" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="136" pos:column="33">INFO<pos:position pos:line="136" pos:column="37"/></name> <argument_list pos:line="136" pos:column="38">(<argument><expr><literal type="string" pos:line="136" pos:column="39">"network plugin: "<pos:position pos:line="136" pos:column="57"/></literal>
						<literal type="string" pos:line="137" pos:column="49">"Ignoring notification with "<pos:position pos:line="137" pos:column="78"/></literal>
						<literal type="string" pos:line="138" pos:column="49">"unknown severity %i."<pos:position pos:line="138" pos:column="71"/></literal></expr></argument>,
						<argument><expr><name><name pos:line="139" pos:column="49">n<pos:position pos:line="139" pos:column="50"/></name><operator pos:line="139" pos:column="50">.<pos:position pos:line="139" pos:column="51"/></operator><name pos:line="139" pos:column="51">severity<pos:position pos:line="139" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="139" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="140" pos:column="26"/></block></then></if></elseif>
			<elseif pos:line="141" pos:column="25">else <if pos:line="141" pos:column="30">if <condition pos:line="141" pos:column="33">(<expr><name><name pos:line="141" pos:column="34">n<pos:position pos:line="141" pos:column="35"/></name><operator pos:line="141" pos:column="35">.<pos:position pos:line="141" pos:column="36"/></operator><name pos:line="141" pos:column="36">time<pos:position pos:line="141" pos:column="40"/></name></name> <operator pos:line="141" pos:column="41">&lt;=<pos:position pos:line="141" pos:column="46"/></operator> <literal type="number" pos:line="141" pos:column="44">0<pos:position pos:line="141" pos:column="45"/></literal></expr>)<pos:position pos:line="141" pos:column="46"/></condition><then pos:line="141" pos:column="46">
			<block pos:line="142" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="143" pos:column="33">INFO<pos:position pos:line="143" pos:column="37"/></name> <argument_list pos:line="143" pos:column="38">(<argument><expr><literal type="string" pos:line="143" pos:column="39">"network plugin: "<pos:position pos:line="143" pos:column="57"/></literal>
						<literal type="string" pos:line="144" pos:column="49">"Ignoring notification with "<pos:position pos:line="144" pos:column="78"/></literal>
						<literal type="string" pos:line="145" pos:column="49">"time == 0."<pos:position pos:line="145" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="146" pos:column="26"/></block></then></if></elseif>
			<elseif pos:line="147" pos:column="25">else <if pos:line="147" pos:column="30">if <condition pos:line="147" pos:column="33">(<expr><call><name pos:line="147" pos:column="34">strlen<pos:position pos:line="147" pos:column="40"/></name> <argument_list pos:line="147" pos:column="41">(<argument><expr><name><name pos:line="147" pos:column="42">n<pos:position pos:line="147" pos:column="43"/></name><operator pos:line="147" pos:column="43">.<pos:position pos:line="147" pos:column="44"/></operator><name pos:line="147" pos:column="44">message<pos:position pos:line="147" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="52"/></argument_list></call> <operator pos:line="147" pos:column="53">&lt;=<pos:position pos:line="147" pos:column="58"/></operator> <literal type="number" pos:line="147" pos:column="56">0<pos:position pos:line="147" pos:column="57"/></literal></expr>)<pos:position pos:line="147" pos:column="58"/></condition><then pos:line="147" pos:column="58">
			<block pos:line="148" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="149" pos:column="33">INFO<pos:position pos:line="149" pos:column="37"/></name> <argument_list pos:line="149" pos:column="38">(<argument><expr><literal type="string" pos:line="149" pos:column="39">"network plugin: "<pos:position pos:line="149" pos:column="57"/></literal>
						<literal type="string" pos:line="150" pos:column="49">"Ignoring notification with "<pos:position pos:line="150" pos:column="78"/></literal>
						<literal type="string" pos:line="151" pos:column="49">"an empty message."<pos:position pos:line="151" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="70"/></expr_stmt>
			}<pos:position pos:line="152" pos:column="26"/></block></then></if></elseif>
			<else pos:line="153" pos:column="25">else
			<block pos:line="154" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="155" pos:column="33">plugin_dispatch_notification<pos:position pos:line="155" pos:column="61"/></name> <argument_list pos:line="155" pos:column="62">(<argument><expr><operator pos:line="155" pos:column="63">&amp;<pos:position pos:line="155" pos:column="68"/></operator><name pos:line="155" pos:column="64">n<pos:position pos:line="155" pos:column="65"/></name></expr></argument>)<pos:position pos:line="155" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="156" pos:column="26"/></block></else></if>
		}<pos:position pos:line="157" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="158" pos:column="17">else <if pos:line="158" pos:column="22">if <condition pos:line="158" pos:column="25">(<expr><name pos:line="158" pos:column="26">pkg_type<pos:position pos:line="158" pos:column="34"/></name> <operator pos:line="158" pos:column="35">==<pos:position pos:line="158" pos:column="37"/></operator> <name pos:line="158" pos:column="38">TYPE_SEVERITY<pos:position pos:line="158" pos:column="51"/></name></expr>)<pos:position pos:line="158" pos:column="52"/></condition><then pos:line="158" pos:column="52">
		<block pos:line="159" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="160" pos:column="25">uint64_t<pos:position pos:line="160" pos:column="33"/></name></type> <name pos:line="160" pos:column="34">tmp<pos:position pos:line="160" pos:column="37"/></name> <init pos:line="160" pos:column="38">= <expr><literal type="number" pos:line="160" pos:column="40">0<pos:position pos:line="160" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="160" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="161" pos:column="25">status<pos:position pos:line="161" pos:column="31"/></name> <operator pos:line="161" pos:column="32">=<pos:position pos:line="161" pos:column="33"/></operator> <call><name pos:line="161" pos:column="34">parse_part_number<pos:position pos:line="161" pos:column="51"/></name> <argument_list pos:line="161" pos:column="52">(<argument><expr><operator pos:line="161" pos:column="53">&amp;<pos:position pos:line="161" pos:column="58"/></operator><name pos:line="161" pos:column="54">buffer<pos:position pos:line="161" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="161" pos:column="62">&amp;<pos:position pos:line="161" pos:column="67"/></operator><name pos:line="161" pos:column="63">buffer_len<pos:position pos:line="161" pos:column="73"/></name></expr></argument>,
					<argument><expr><operator pos:line="162" pos:column="41">&amp;<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="42">tmp<pos:position pos:line="162" pos:column="45"/></name></expr></argument>)<pos:position pos:line="162" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="47"/></expr_stmt>
			<if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><name pos:line="163" pos:column="29">status<pos:position pos:line="163" pos:column="35"/></name> <operator pos:line="163" pos:column="36">==<pos:position pos:line="163" pos:column="38"/></operator> <literal type="number" pos:line="163" pos:column="39">0<pos:position pos:line="163" pos:column="40"/></literal></expr>)<pos:position pos:line="163" pos:column="41"/></condition><then pos:line="163" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="164" pos:column="33">n<pos:position pos:line="164" pos:column="34"/></name><operator pos:line="164" pos:column="34">.<pos:position pos:line="164" pos:column="35"/></operator><name pos:line="164" pos:column="35">severity<pos:position pos:line="164" pos:column="43"/></name></name> <operator pos:line="164" pos:column="44">=<pos:position pos:line="164" pos:column="45"/></operator> <operator pos:line="164" pos:column="46">(<pos:position pos:line="164" pos:column="47"/></operator><name pos:line="164" pos:column="47">int<pos:position pos:line="164" pos:column="50"/></name><operator pos:line="164" pos:column="50">)<pos:position pos:line="164" pos:column="51"/></operator> <name pos:line="164" pos:column="52">tmp<pos:position pos:line="164" pos:column="55"/></name></expr>;<pos:position pos:line="164" pos:column="56"/></expr_stmt></block></then></if>
		}<pos:position pos:line="165" pos:column="18"/></block></then></if></elseif>
		<else pos:line="166" pos:column="17">else
		<block pos:line="167" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="168" pos:column="25">DEBUG<pos:position pos:line="168" pos:column="30"/></name> <argument_list pos:line="168" pos:column="31">(<argument><expr><literal type="string" pos:line="168" pos:column="32">"network plugin: parse_packet: Unknown part"<pos:position pos:line="168" pos:column="76"/></literal>
					<literal type="string" pos:line="169" pos:column="41">" type: 0x%04hx"<pos:position pos:line="169" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="59">pkg_type<pos:position pos:line="169" pos:column="67"/></name></expr></argument>)<pos:position pos:line="169" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><name pos:line="170" pos:column="25">buffer<pos:position pos:line="170" pos:column="31"/></name> <operator pos:line="170" pos:column="32">=<pos:position pos:line="170" pos:column="33"/></operator> <operator pos:line="170" pos:column="34">(<pos:position pos:line="170" pos:column="35"/></operator><operator pos:line="170" pos:column="35">(<pos:position pos:line="170" pos:column="36"/></operator><name pos:line="170" pos:column="36">char<pos:position pos:line="170" pos:column="40"/></name> <operator pos:line="170" pos:column="41">*<pos:position pos:line="170" pos:column="42"/></operator><operator pos:line="170" pos:column="42">)<pos:position pos:line="170" pos:column="43"/></operator> <name pos:line="170" pos:column="44">buffer<pos:position pos:line="170" pos:column="50"/></name><operator pos:line="170" pos:column="50">)<pos:position pos:line="170" pos:column="51"/></operator> <operator pos:line="170" pos:column="52">+<pos:position pos:line="170" pos:column="53"/></operator> <name pos:line="170" pos:column="54">pkg_length<pos:position pos:line="170" pos:column="64"/></name></expr>;<pos:position pos:line="170" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="171" pos:column="18"/></block></else></if>
	}<pos:position pos:line="172" pos:column="10"/></block></while> <comment type="block" pos:line="172" pos:column="11">/* while (buffer_len &gt; sizeof (part_header_t)) */</comment>

	<return pos:line="174" pos:column="9">return <expr><operator pos:line="174" pos:column="16">(<pos:position pos:line="174" pos:column="17"/></operator><name pos:line="174" pos:column="17">status<pos:position pos:line="174" pos:column="23"/></name><operator pos:line="174" pos:column="23">)<pos:position pos:line="174" pos:column="24"/></operator></expr>;<pos:position pos:line="174" pos:column="25"/></return>
}<pos:position pos:line="175" pos:column="2"/></block></function></unit>
