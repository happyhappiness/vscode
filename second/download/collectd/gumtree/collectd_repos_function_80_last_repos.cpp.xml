<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_80_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">domain_state_submit<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">virDomainPtr<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">dom<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">state<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">reason<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list> <block pos:line="1" pos:column="74">{

  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">(<pos:position pos:line="3" pos:column="8"/></operator><name pos:line="3" pos:column="8">state<pos:position pos:line="3" pos:column="13"/></name> <operator pos:line="3" pos:column="14">&lt;<pos:position pos:line="3" pos:column="18"/></operator> <literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal><operator pos:line="3" pos:column="17">)<pos:position pos:line="3" pos:column="18"/></operator> <operator pos:line="3" pos:column="19">||<pos:position pos:line="3" pos:column="21"/></operator> <operator pos:line="3" pos:column="22">(<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">state<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">&gt;=<pos:position pos:line="3" pos:column="34"/></operator> <call><name pos:line="3" pos:column="32">STATIC_ARRAY_SIZE<pos:position pos:line="3" pos:column="49"/></name><argument_list pos:line="3" pos:column="49">(<argument><expr><name pos:line="3" pos:column="50">domain_states<pos:position pos:line="3" pos:column="63"/></name></expr></argument>)<pos:position pos:line="3" pos:column="64"/></argument_list></call><operator pos:line="3" pos:column="64">)<pos:position pos:line="3" pos:column="65"/></operator></expr>)<pos:position pos:line="3" pos:column="66"/></condition><then pos:line="3" pos:column="66"> <block pos:line="3" pos:column="67">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">ERROR<pos:position pos:line="4" pos:column="10"/></name><argument_list pos:line="4" pos:column="10">(<argument><expr><name pos:line="4" pos:column="11">PLUGIN_NAME<pos:position pos:line="4" pos:column="22"/></name> <literal type="string" pos:line="4" pos:column="23">": Array index out of bounds: state=%d"<pos:position pos:line="4" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="64">state<pos:position pos:line="4" pos:column="69"/></name></expr></argument>)<pos:position pos:line="4" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="71"/></expr_stmt>
    <return pos:line="5" pos:column="5">return;<pos:position pos:line="5" pos:column="12"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">msg<pos:position pos:line="8" pos:column="11"/></name><index pos:line="8" pos:column="11">[<expr><name pos:line="8" pos:column="12">DATA_MAX_NAME_LEN<pos:position pos:line="8" pos:column="29"/></name></expr>]<pos:position pos:line="8" pos:column="30"/></index></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">state_str<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name><name pos:line="9" pos:column="27">domain_states<pos:position pos:line="9" pos:column="40"/></name><index pos:line="9" pos:column="40">[<expr><name pos:line="9" pos:column="41">state<pos:position pos:line="9" pos:column="46"/></name></expr>]<pos:position pos:line="9" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">HAVE_DOM_REASON<pos:position pos:line="10" pos:column="23"/></name></cpp:ifdef>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">reason<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&lt;<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">||<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">reason<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&gt;=<pos:position pos:line="11" pos:column="36"/></operator> <call><name pos:line="11" pos:column="34">STATIC_ARRAY_SIZE<pos:position pos:line="11" pos:column="51"/></name><argument_list pos:line="11" pos:column="51">(<argument><expr><name><name pos:line="11" pos:column="52">domain_reasons<pos:position pos:line="11" pos:column="66"/></name><index pos:line="11" pos:column="66">[<expr><literal type="number" pos:line="11" pos:column="67">0<pos:position pos:line="11" pos:column="68"/></literal></expr>]<pos:position pos:line="11" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call><operator pos:line="11" pos:column="70">)<pos:position pos:line="11" pos:column="71"/></operator></expr>)<pos:position pos:line="11" pos:column="72"/></condition><then pos:line="11" pos:column="72"> <block pos:line="11" pos:column="73">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">PLUGIN_NAME<pos:position pos:line="12" pos:column="22"/></name> <literal type="string" pos:line="12" pos:column="23">": Array index out of bounds: reason=%d"<pos:position pos:line="12" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="65">reason<pos:position pos:line="12" pos:column="71"/></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="73"/></expr_stmt>
    <return pos:line="13" pos:column="5">return;<pos:position pos:line="13" pos:column="12"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">reason_str<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><name><name pos:line="16" pos:column="28">domain_reasons<pos:position pos:line="16" pos:column="42"/></name><index pos:line="16" pos:column="42">[<expr><name pos:line="16" pos:column="43">state<pos:position pos:line="16" pos:column="48"/></name></expr>]<pos:position pos:line="16" pos:column="49"/></index><index pos:line="16" pos:column="49">[<expr><name pos:line="16" pos:column="50">reason<pos:position pos:line="16" pos:column="56"/></name></expr>]<pos:position pos:line="16" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="16" pos:column="58"/></decl_stmt>
  <comment type="block" pos:line="17" pos:column="3">/* Array size for domain reasons is fixed, but different domain states can
   * have different number of reasons. We need to check if reason was
   * successfully parsed */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><operator pos:line="20" pos:column="7">!<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">reason_str<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <block pos:line="20" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ERROR<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">PLUGIN_NAME<pos:position pos:line="21" pos:column="22"/></name> <literal type="string" pos:line="21" pos:column="23">": Invalid reason (%d) for domain state: %s"<pos:position pos:line="21" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="69">reason<pos:position pos:line="21" pos:column="75"/></name></expr></argument>,
          <argument><expr><name pos:line="22" pos:column="11">state_str<pos:position pos:line="22" pos:column="20"/></name></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    <return pos:line="23" pos:column="5">return;<pos:position pos:line="23" pos:column="12"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="26" pos:column="3">const<pos:position pos:line="26" pos:column="8"/></specifier> <name pos:line="26" pos:column="9">char<pos:position pos:line="26" pos:column="13"/></name> <modifier pos:line="26" pos:column="14">*<pos:position pos:line="26" pos:column="15"/></modifier></type><name pos:line="26" pos:column="15">reason_str<pos:position pos:line="26" pos:column="25"/></name> <init pos:line="26" pos:column="26">= <expr><literal type="string" pos:line="26" pos:column="28">"N/A"<pos:position pos:line="26" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">snprintf<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">msg<pos:position pos:line="29" pos:column="15"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="17">sizeof<argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">msg<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="30">"Domain state: %s. Reason: %s"<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="62">state_str<pos:position pos:line="29" pos:column="71"/></name></expr></argument>,
           <argument><expr><name pos:line="30" pos:column="12">reason_str<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="32" pos:column="3">int<pos:position pos:line="32" pos:column="6"/></name></type> <name pos:line="32" pos:column="7">severity<pos:position pos:line="32" pos:column="15"/></name></decl>;<pos:position pos:line="32" pos:column="16"/></decl_stmt>
  <switch pos:line="33" pos:column="3">switch <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">state<pos:position pos:line="33" pos:column="16"/></name></expr>)<pos:position pos:line="33" pos:column="17"/></condition> <block pos:line="33" pos:column="18">{
  <case pos:line="34" pos:column="3">case <expr><name pos:line="34" pos:column="8">VIR_DOMAIN_NOSTATE<pos:position pos:line="34" pos:column="26"/></name></expr>:<pos:position pos:line="34" pos:column="27"/></case>
  <case pos:line="35" pos:column="3">case <expr><name pos:line="35" pos:column="8">VIR_DOMAIN_RUNNING<pos:position pos:line="35" pos:column="26"/></name></expr>:<pos:position pos:line="35" pos:column="27"/></case>
  <case pos:line="36" pos:column="3">case <expr><name pos:line="36" pos:column="8">VIR_DOMAIN_SHUTDOWN<pos:position pos:line="36" pos:column="27"/></name></expr>:<pos:position pos:line="36" pos:column="28"/></case>
  <case pos:line="37" pos:column="3">case <expr><name pos:line="37" pos:column="8">VIR_DOMAIN_SHUTOFF<pos:position pos:line="37" pos:column="26"/></name></expr>:<pos:position pos:line="37" pos:column="27"/></case>
    <expr_stmt><expr><name pos:line="38" pos:column="5">severity<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">NOTIF_OKAY<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">VIR_DOMAIN_BLOCKED<pos:position pos:line="40" pos:column="26"/></name></expr>:<pos:position pos:line="40" pos:column="27"/></case>
  <case pos:line="41" pos:column="3">case <expr><name pos:line="41" pos:column="8">VIR_DOMAIN_PAUSED<pos:position pos:line="41" pos:column="25"/></name></expr>:<pos:position pos:line="41" pos:column="26"/></case>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">DOM_STATE_PMSUSPENDED<pos:position pos:line="42" pos:column="29"/></name></cpp:ifdef>
  <case pos:line="43" pos:column="3">case <expr><name pos:line="43" pos:column="8">VIR_DOMAIN_PMSUSPENDED<pos:position pos:line="43" pos:column="30"/></name></expr>:<pos:position pos:line="43" pos:column="31"/></case>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="45" pos:column="5">severity<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">NOTIF_WARNING<pos:position pos:line="45" pos:column="29"/></name></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
    <break pos:line="46" pos:column="5">break;<pos:position pos:line="46" pos:column="11"/></break>
  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">VIR_DOMAIN_CRASHED<pos:position pos:line="47" pos:column="26"/></name></expr>:<pos:position pos:line="47" pos:column="27"/></case>
    <expr_stmt><expr><name pos:line="48" pos:column="5">severity<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">NOTIF_FAILURE<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
    <break pos:line="49" pos:column="5">break;<pos:position pos:line="49" pos:column="11"/></break>
  <default pos:line="50" pos:column="3">default:<pos:position pos:line="50" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ERROR<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">PLUGIN_NAME<pos:position pos:line="51" pos:column="22"/></name> <literal type="string" pos:line="51" pos:column="23">": Unrecognized domain state (%d)"<pos:position pos:line="51" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="59">state<pos:position pos:line="51" pos:column="64"/></name></expr></argument>)<pos:position pos:line="51" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="66"/></expr_stmt>
    <return pos:line="52" pos:column="5">return;<pos:position pos:line="52" pos:column="12"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></switch>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">submit_notif<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><name pos:line="54" pos:column="16">dom<pos:position pos:line="54" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="21">severity<pos:position pos:line="54" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="31">msg<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="36">"domain_state"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="52">NULL<pos:position pos:line="54" pos:column="56"/></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="58"/></expr_stmt>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
