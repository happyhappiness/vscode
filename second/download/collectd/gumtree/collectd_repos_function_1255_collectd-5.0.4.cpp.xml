<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1255_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cx_handle_single_value_xpath<pos:position pos:line="1" pos:column="40"/></name> <parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">xmlXPathContextPtr<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">xpath_ctx<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="72">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">cx_xpath_t<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">xpath<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">data_set_t<pos:position pos:line="3" pos:column="21"/></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">ds<pos:position pos:line="3" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="27">value_list_t<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">vl<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">int<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">index<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="55"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">xmlXPathObjectPtr<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">values_node_obj<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">xmlNodeSetPtr<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">values_node<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">tmp_size<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">node_value<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">values_node_obj<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <macro><name pos:line="10" pos:column="21">cx_evaluate_xpath<pos:position pos:line="10" pos:column="38"/></name> <argument_list pos:line="10" pos:column="39">(<argument pos:line="10" pos:column="40">xpath_ctx<pos:position pos:line="10" pos:column="49"/></argument>, <argument pos:line="10" pos:column="51">BAD_CAST xpath-&gt;values[index].path<pos:position pos:line="10" pos:column="85"/></argument>)<pos:position pos:line="10" pos:column="86"/></argument_list></macro></expr>;<pos:position pos:line="10" pos:column="87"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">values_node_obj<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">==<pos:position pos:line="11" pos:column="25"/></operator> <name pos:line="11" pos:column="26">NULL<pos:position pos:line="11" pos:column="30"/></name></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><operator pos:line="12" pos:column="13">-<pos:position pos:line="12" pos:column="14"/></operator><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal><operator pos:line="12" pos:column="15">)<pos:position pos:line="12" pos:column="16"/></operator></expr>;<pos:position pos:line="12" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="12" pos:column="18">/* Error already logged. */</comment>

  <expr_stmt><expr><name pos:line="14" pos:column="3">values_node<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <name><name pos:line="14" pos:column="17">values_node_obj<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">nodesetval<pos:position pos:line="14" pos:column="44"/></name></name></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">tmp_size<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">values_node<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">)<pos:position pos:line="15" pos:column="27"/></operator></expr> ?<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <expr><name><name pos:line="15" pos:column="30">values_node<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">-&gt;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="43">nodeNr<pos:position pos:line="15" pos:column="49"/></name></name></expr> <pos:position pos:line="15" pos:column="50"/></then><else pos:line="15" pos:column="50">: <expr><literal type="number" pos:line="15" pos:column="52">0<pos:position pos:line="15" pos:column="53"/></literal></expr></else></ternary></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">tmp_size<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">==<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="19">0<pos:position pos:line="17" pos:column="20"/></literal></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">WARNING<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"curl_xml plugin: "<pos:position pos:line="19" pos:column="33"/></literal>
        <literal type="string" pos:line="20" pos:column="9">"relative xpath expression \"%s\" doesn't match any of the nodes. "<pos:position pos:line="20" pos:column="76"/></literal>
        <literal type="string" pos:line="21" pos:column="9">"Skipping..."<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="24">xpath<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">-&gt;<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="31">values<pos:position pos:line="21" pos:column="37"/></name><index pos:line="21" pos:column="37">[<expr><name pos:line="21" pos:column="38">index<pos:position pos:line="21" pos:column="43"/></name></expr>]<pos:position pos:line="21" pos:column="44"/></index></name><operator pos:line="21" pos:column="44">.<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">path<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">xmlXPathFreeObject<pos:position pos:line="22" pos:column="23"/></name> <argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">values_node_obj<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><operator pos:line="23" pos:column="13">-<pos:position pos:line="23" pos:column="14"/></operator><literal type="number" pos:line="23" pos:column="14">1<pos:position pos:line="23" pos:column="15"/></literal><operator pos:line="23" pos:column="15">)<pos:position pos:line="23" pos:column="16"/></operator></expr>;<pos:position pos:line="23" pos:column="17"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">tmp_size<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">&gt;<pos:position pos:line="26" pos:column="20"/></operator> <literal type="number" pos:line="26" pos:column="18">1<pos:position pos:line="26" pos:column="19"/></literal></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">WARNING<pos:position pos:line="28" pos:column="12"/></name> <argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="string" pos:line="28" pos:column="14">"curl_xml plugin: "<pos:position pos:line="28" pos:column="33"/></literal>
        <literal type="string" pos:line="29" pos:column="9">"relative xpath expression \"%s\" is expected to return "<pos:position pos:line="29" pos:column="66"/></literal>
        <literal type="string" pos:line="30" pos:column="9">"only one node. Skipping..."<pos:position pos:line="30" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="39">xpath<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">values<pos:position pos:line="30" pos:column="52"/></name><index pos:line="30" pos:column="52">[<expr><name pos:line="30" pos:column="53">index<pos:position pos:line="30" pos:column="58"/></name></expr>]<pos:position pos:line="30" pos:column="59"/></index></name><operator pos:line="30" pos:column="59">.<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="60">path<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">xmlXPathFreeObject<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">values_node_obj<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><operator pos:line="32" pos:column="13">-<pos:position pos:line="32" pos:column="14"/></operator><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal><operator pos:line="32" pos:column="15">)<pos:position pos:line="32" pos:column="16"/></operator></expr>;<pos:position pos:line="32" pos:column="17"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/* ignoring the element if other than textnode/attribute*/</comment>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><call><name pos:line="36" pos:column="7">cx_if_not_text_node<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name><name pos:line="36" pos:column="27">values_node<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">nodeTab<pos:position pos:line="36" pos:column="47"/></name><index pos:line="36" pos:column="47">[<expr><literal type="number" pos:line="36" pos:column="48">0<pos:position pos:line="36" pos:column="49"/></literal></expr>]<pos:position pos:line="36" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="52"/></condition><then pos:line="36" pos:column="52">
  <block pos:line="37" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">WARNING<pos:position pos:line="38" pos:column="12"/></name> <argument_list pos:line="38" pos:column="13">(<argument><expr><literal type="string" pos:line="38" pos:column="14">"curl_xml plugin: "<pos:position pos:line="38" pos:column="33"/></literal>
        <literal type="string" pos:line="39" pos:column="9">"relative xpath expression \"%s\" is expected to return "<pos:position pos:line="39" pos:column="66"/></literal>
        <literal type="string" pos:line="40" pos:column="9">"only text/attribute node which is not the case. Skipping..."<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>, 
        <argument><expr><name><name pos:line="41" pos:column="9">xpath<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">-&gt;<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="16">values<pos:position pos:line="41" pos:column="22"/></name><index pos:line="41" pos:column="22">[<expr><name pos:line="41" pos:column="23">index<pos:position pos:line="41" pos:column="28"/></name></expr>]<pos:position pos:line="41" pos:column="29"/></index></name><operator pos:line="41" pos:column="29">.<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">path<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">xmlXPathFreeObject<pos:position pos:line="42" pos:column="23"/></name> <argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">values_node_obj<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><operator pos:line="43" pos:column="12">(<pos:position pos:line="43" pos:column="13"/></operator><operator pos:line="43" pos:column="13">-<pos:position pos:line="43" pos:column="14"/></operator><literal type="number" pos:line="43" pos:column="14">1<pos:position pos:line="43" pos:column="15"/></literal><operator pos:line="43" pos:column="15">)<pos:position pos:line="43" pos:column="16"/></operator></expr>;<pos:position pos:line="43" pos:column="17"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="46" pos:column="3">node_value<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">char<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">*<pos:position pos:line="46" pos:column="23"/></operator><operator pos:line="46" pos:column="23">)<pos:position pos:line="46" pos:column="24"/></operator> <call><name pos:line="46" pos:column="25">xmlNodeGetContent<pos:position pos:line="46" pos:column="42"/></name><argument_list pos:line="46" pos:column="42">(<argument><expr><name><name pos:line="46" pos:column="43">values_node<pos:position pos:line="46" pos:column="54"/></name><operator pos:line="46" pos:column="54">-&gt;<pos:position pos:line="46" pos:column="59"/></operator><name pos:line="46" pos:column="56">nodeTab<pos:position pos:line="46" pos:column="63"/></name><index pos:line="46" pos:column="63">[<expr><literal type="number" pos:line="46" pos:column="64">0<pos:position pos:line="46" pos:column="65"/></literal></expr>]<pos:position pos:line="46" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="68"/></expr_stmt>
  <switch pos:line="47" pos:column="3">switch <condition pos:line="47" pos:column="10">(<expr><name><name pos:line="47" pos:column="11">ds<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">ds<pos:position pos:line="47" pos:column="17"/></name><index pos:line="47" pos:column="17">[<expr><name pos:line="47" pos:column="18">index<pos:position pos:line="47" pos:column="23"/></name></expr>]<pos:position pos:line="47" pos:column="24"/></index></name><operator pos:line="47" pos:column="24">.<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">type<pos:position pos:line="47" pos:column="29"/></name></expr>)<pos:position pos:line="47" pos:column="30"/></condition>
  <block pos:line="48" pos:column="3">{
    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">DS_TYPE_COUNTER<pos:position pos:line="49" pos:column="25"/></name></expr>:<pos:position pos:line="49" pos:column="26"/></case>
      <expr_stmt><expr><name><name pos:line="50" pos:column="7">vl<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">-&gt;<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="11">values<pos:position pos:line="50" pos:column="17"/></name><index pos:line="50" pos:column="17">[<expr><name pos:line="50" pos:column="18">index<pos:position pos:line="50" pos:column="23"/></name></expr>]<pos:position pos:line="50" pos:column="24"/></index></name><operator pos:line="50" pos:column="24">.<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">counter<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <operator pos:line="50" pos:column="35">(<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="36">counter_t<pos:position pos:line="50" pos:column="45"/></name><operator pos:line="50" pos:column="45">)<pos:position pos:line="50" pos:column="46"/></operator> <call><name pos:line="50" pos:column="47">strtoull<pos:position pos:line="50" pos:column="55"/></name> <argument_list pos:line="50" pos:column="56">(<argument><expr><name pos:line="50" pos:column="57">node_value<pos:position pos:line="50" pos:column="67"/></name></expr></argument>,
          <comment type="block" pos:line="51" pos:column="11">/* endptr = */</comment> <argument><expr><name pos:line="51" pos:column="26">NULL<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <comment type="block" pos:line="51" pos:column="32">/* base = */</comment> <argument><expr><literal type="number" pos:line="51" pos:column="45">0<pos:position pos:line="51" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>
      <break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break>
    <case pos:line="53" pos:column="5">case <expr><name pos:line="53" pos:column="10">DS_TYPE_DERIVE<pos:position pos:line="53" pos:column="24"/></name></expr>:<pos:position pos:line="53" pos:column="25"/></case>
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">vl<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">values<pos:position pos:line="54" pos:column="17"/></name><index pos:line="54" pos:column="17">[<expr><name pos:line="54" pos:column="18">index<pos:position pos:line="54" pos:column="23"/></name></expr>]<pos:position pos:line="54" pos:column="24"/></index></name><operator pos:line="54" pos:column="24">.<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="25">derive<pos:position pos:line="54" pos:column="31"/></name> <operator pos:line="54" pos:column="32">=<pos:position pos:line="54" pos:column="33"/></operator> <operator pos:line="54" pos:column="34">(<pos:position pos:line="54" pos:column="35"/></operator><name pos:line="54" pos:column="35">derive_t<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">)<pos:position pos:line="54" pos:column="44"/></operator> <call><name pos:line="54" pos:column="45">strtoll<pos:position pos:line="54" pos:column="52"/></name> <argument_list pos:line="54" pos:column="53">(<argument><expr><name pos:line="54" pos:column="54">node_value<pos:position pos:line="54" pos:column="64"/></name></expr></argument>,
          <comment type="block" pos:line="55" pos:column="11">/* endptr = */</comment> <argument><expr><name pos:line="55" pos:column="26">NULL<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <comment type="block" pos:line="55" pos:column="32">/* base = */</comment> <argument><expr><literal type="number" pos:line="55" pos:column="45">0<pos:position pos:line="55" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
      <break pos:line="56" pos:column="7">break;<pos:position pos:line="56" pos:column="13"/></break>
    <case pos:line="57" pos:column="5">case <expr><name pos:line="57" pos:column="10">DS_TYPE_ABSOLUTE<pos:position pos:line="57" pos:column="26"/></name></expr>:<pos:position pos:line="57" pos:column="27"/></case>
      <expr_stmt><expr><name><name pos:line="58" pos:column="7">vl<pos:position pos:line="58" pos:column="9"/></name><operator pos:line="58" pos:column="9">-&gt;<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="11">values<pos:position pos:line="58" pos:column="17"/></name><index pos:line="58" pos:column="17">[<expr><name pos:line="58" pos:column="18">index<pos:position pos:line="58" pos:column="23"/></name></expr>]<pos:position pos:line="58" pos:column="24"/></index></name><operator pos:line="58" pos:column="24">.<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="25">absolute<pos:position pos:line="58" pos:column="33"/></name> <operator pos:line="58" pos:column="34">=<pos:position pos:line="58" pos:column="35"/></operator> <operator pos:line="58" pos:column="36">(<pos:position pos:line="58" pos:column="37"/></operator><name pos:line="58" pos:column="37">absolute_t<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">)<pos:position pos:line="58" pos:column="48"/></operator> <call><name pos:line="58" pos:column="49">strtoull<pos:position pos:line="58" pos:column="57"/></name> <argument_list pos:line="58" pos:column="58">(<argument><expr><name pos:line="58" pos:column="59">node_value<pos:position pos:line="58" pos:column="69"/></name></expr></argument>,
          <comment type="block" pos:line="59" pos:column="11">/* endptr = */</comment> <argument><expr><name pos:line="59" pos:column="26">NULL<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <comment type="block" pos:line="59" pos:column="32">/* base = */</comment> <argument><expr><literal type="number" pos:line="59" pos:column="45">0<pos:position pos:line="59" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">DS_TYPE_GAUGE<pos:position pos:line="61" pos:column="23"/></name></expr>:<pos:position pos:line="61" pos:column="24"/></case> 
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">vl<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">values<pos:position pos:line="62" pos:column="17"/></name><index pos:line="62" pos:column="17">[<expr><name pos:line="62" pos:column="18">index<pos:position pos:line="62" pos:column="23"/></name></expr>]<pos:position pos:line="62" pos:column="24"/></index></name><operator pos:line="62" pos:column="24">.<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="25">gauge<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <operator pos:line="62" pos:column="33">(<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="34">gauge_t<pos:position pos:line="62" pos:column="41"/></name><operator pos:line="62" pos:column="41">)<pos:position pos:line="62" pos:column="42"/></operator> <call><name pos:line="62" pos:column="43">strtod<pos:position pos:line="62" pos:column="49"/></name> <argument_list pos:line="62" pos:column="50">(<argument><expr><name pos:line="62" pos:column="51">node_value<pos:position pos:line="62" pos:column="61"/></name></expr></argument>,
          <comment type="block" pos:line="63" pos:column="11">/* endptr = */</comment> <argument><expr><name pos:line="63" pos:column="26">NULL<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></switch>

  <comment type="block" pos:line="66" pos:column="3">/* free up object */</comment>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">xmlXPathFreeObject<pos:position pos:line="67" pos:column="21"/></name> <argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">values_node_obj<pos:position pos:line="67" pos:column="38"/></name></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="69" pos:column="3">/* We have reached here which means that
   * we have got something to work */</comment>
  <return pos:line="71" pos:column="3">return <expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><literal type="number" pos:line="71" pos:column="11">0<pos:position pos:line="71" pos:column="12"/></literal><operator pos:line="71" pos:column="12">)<pos:position pos:line="71" pos:column="13"/></operator></expr>;<pos:position pos:line="71" pos:column="14"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
