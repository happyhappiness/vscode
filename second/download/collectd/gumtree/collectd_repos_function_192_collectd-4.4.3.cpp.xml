<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_192_collectd-4.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">us_server_thread<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>  <name pos:line="3" pos:column="14">status<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">remote_fd<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">pthread_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">th<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">pthread_attr_t<pos:position pos:line="6" pos:column="23"/></name></type> <name pos:line="6" pos:column="24">th_attr<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">us_open_socket<pos:position pos:line="8" pos:column="27"/></name> <argument_list pos:line="8" pos:column="28">()<pos:position pos:line="8" pos:column="30"/></argument_list></call> <operator pos:line="8" pos:column="31">!=<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="34">0<pos:position pos:line="8" pos:column="35"/></literal></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">pthread_exit<pos:position pos:line="9" pos:column="29"/></name> <argument_list pos:line="9" pos:column="30">(<argument><expr><operator pos:line="9" pos:column="31">(<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">void<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">*<pos:position pos:line="9" pos:column="38"/></operator><operator pos:line="9" pos:column="38">)<pos:position pos:line="9" pos:column="39"/></operator> <literal type="number" pos:line="9" pos:column="40">1<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt></block></then></if>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">loop<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>)<pos:position pos:line="11" pos:column="26"/></condition>
	<block pos:line="12" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">DEBUG<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><literal type="string" pos:line="13" pos:column="24">"unixsock plugin: Calling accept.."<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">status<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <call><name pos:line="14" pos:column="26">accept<pos:position pos:line="14" pos:column="32"/></name> <argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">sock_fd<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">NULL<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">NULL<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">status<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">&lt;<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32">
		<block pos:line="16" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">char<pos:position pos:line="17" pos:column="29"/></name></type> <name><name pos:line="17" pos:column="30">errbuf<pos:position pos:line="17" pos:column="36"/></name><index pos:line="17" pos:column="36">[<expr><literal type="number" pos:line="17" pos:column="37">1024<pos:position pos:line="17" pos:column="41"/></literal></expr>]<pos:position pos:line="17" pos:column="42"/></index></name></decl>;<pos:position pos:line="17" pos:column="43"/></decl_stmt>

			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name pos:line="19" pos:column="29">errno<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">==<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">EINTR<pos:position pos:line="19" pos:column="43"/></name></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
				<block type="pseudo"><continue pos:line="20" pos:column="33">continue;<pos:position pos:line="20" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="22" pos:column="25">ERROR<pos:position pos:line="22" pos:column="30"/></name> <argument_list pos:line="22" pos:column="31">(<argument><expr><literal type="string" pos:line="22" pos:column="32">"unixsock plugin: accept failed: %s"<pos:position pos:line="22" pos:column="68"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="23" pos:column="41">sstrerror<pos:position pos:line="23" pos:column="50"/></name> <argument_list pos:line="23" pos:column="51">(<argument><expr><name pos:line="23" pos:column="52">errno<pos:position pos:line="23" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="59">errbuf<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="67">sizeof <argument_list pos:line="23" pos:column="74">(<argument><expr><name pos:line="23" pos:column="75">errbuf<pos:position pos:line="23" pos:column="81"/></name></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">close<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">sock_fd<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">sock_fd<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <operator pos:line="25" pos:column="35">-<pos:position pos:line="25" pos:column="36"/></operator><literal type="number" pos:line="25" pos:column="36">1<pos:position pos:line="25" pos:column="37"/></literal></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">pthread_exit<pos:position pos:line="26" pos:column="37"/></name> <argument_list pos:line="26" pos:column="38">(<argument><expr><operator pos:line="26" pos:column="39">(<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">void<pos:position pos:line="26" pos:column="44"/></name> <operator pos:line="26" pos:column="45">*<pos:position pos:line="26" pos:column="46"/></operator><operator pos:line="26" pos:column="46">)<pos:position pos:line="26" pos:column="47"/></operator> <literal type="number" pos:line="26" pos:column="48">1<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="29" pos:column="17">remote_fd<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">int<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">*<pos:position pos:line="29" pos:column="35"/></operator><operator pos:line="29" pos:column="35">)<pos:position pos:line="29" pos:column="36"/></operator> <call><name pos:line="29" pos:column="37">malloc<pos:position pos:line="29" pos:column="43"/></name> <argument_list pos:line="29" pos:column="44">(<argument><expr><sizeof pos:line="29" pos:column="45">sizeof <argument_list pos:line="29" pos:column="52">(<argument><expr><name pos:line="29" pos:column="53">int<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">remote_fd<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">==<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">NULL<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
		<block pos:line="31" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">char<pos:position pos:line="32" pos:column="29"/></name></type> <name><name pos:line="32" pos:column="30">errbuf<pos:position pos:line="32" pos:column="36"/></name><index pos:line="32" pos:column="36">[<expr><literal type="number" pos:line="32" pos:column="37">1024<pos:position pos:line="32" pos:column="41"/></literal></expr>]<pos:position pos:line="32" pos:column="42"/></index></name></decl>;<pos:position pos:line="32" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">WARNING<pos:position pos:line="33" pos:column="32"/></name> <argument_list pos:line="33" pos:column="33">(<argument><expr><literal type="string" pos:line="33" pos:column="34">"unixsock plugin: malloc failed: %s"<pos:position pos:line="33" pos:column="70"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="34" pos:column="41">sstrerror<pos:position pos:line="34" pos:column="50"/></name> <argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">errno<pos:position pos:line="34" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">errbuf<pos:position pos:line="34" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="67">sizeof <argument_list pos:line="34" pos:column="74">(<argument><expr><name pos:line="34" pos:column="75">errbuf<pos:position pos:line="34" pos:column="81"/></name></expr></argument>)<pos:position pos:line="34" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">close<pos:position pos:line="35" pos:column="30"/></name> <argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">status<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="38" pos:column="17">*<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">remote_fd<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="30">status<pos:position pos:line="38" pos:column="36"/></name></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="40" pos:column="17">DEBUG<pos:position pos:line="40" pos:column="22"/></name> <argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="string" pos:line="40" pos:column="24">"Spawning child to handle connection on fd #%i"<pos:position pos:line="40" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="73">*<pos:position pos:line="40" pos:column="74"/></operator><name pos:line="40" pos:column="74">remote_fd<pos:position pos:line="40" pos:column="83"/></name></expr></argument>)<pos:position pos:line="40" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="85"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="42" pos:column="17">pthread_attr_init<pos:position pos:line="42" pos:column="34"/></name> <argument_list pos:line="42" pos:column="35">(<argument><expr><operator pos:line="42" pos:column="36">&amp;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="37">th_attr<pos:position pos:line="42" pos:column="44"/></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">pthread_attr_setdetachstate<pos:position pos:line="43" pos:column="44"/></name> <argument_list pos:line="43" pos:column="45">(<argument><expr><operator pos:line="43" pos:column="46">&amp;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="47">th_attr<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="56">PTHREAD_CREATE_DETACHED<pos:position pos:line="43" pos:column="79"/></name></expr></argument>)<pos:position pos:line="43" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="81"/></expr_stmt>

		<expr_stmt><expr><name pos:line="45" pos:column="17">status<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <call><name pos:line="45" pos:column="26">pthread_create<pos:position pos:line="45" pos:column="40"/></name> <argument_list pos:line="45" pos:column="41">(<argument><expr><operator pos:line="45" pos:column="42">&amp;<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="43">th<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="47">&amp;<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="48">th_attr<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="57">us_handle_client<pos:position pos:line="45" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="75">(<pos:position pos:line="45" pos:column="76"/></operator><name pos:line="45" pos:column="76">void<pos:position pos:line="45" pos:column="80"/></name> <operator pos:line="45" pos:column="81">*<pos:position pos:line="45" pos:column="82"/></operator><operator pos:line="45" pos:column="82">)<pos:position pos:line="45" pos:column="83"/></operator> <name pos:line="45" pos:column="84">remote_fd<pos:position pos:line="45" pos:column="93"/></name></expr></argument>)<pos:position pos:line="45" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="95"/></expr_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">status<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">!=<pos:position pos:line="46" pos:column="30"/></operator> <literal type="number" pos:line="46" pos:column="31">0<pos:position pos:line="46" pos:column="32"/></literal></expr>)<pos:position pos:line="46" pos:column="33"/></condition><then pos:line="46" pos:column="33">
		<block pos:line="47" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">char<pos:position pos:line="48" pos:column="29"/></name></type> <name><name pos:line="48" pos:column="30">errbuf<pos:position pos:line="48" pos:column="36"/></name><index pos:line="48" pos:column="36">[<expr><literal type="number" pos:line="48" pos:column="37">1024<pos:position pos:line="48" pos:column="41"/></literal></expr>]<pos:position pos:line="48" pos:column="42"/></index></name></decl>;<pos:position pos:line="48" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">WARNING<pos:position pos:line="49" pos:column="32"/></name> <argument_list pos:line="49" pos:column="33">(<argument><expr><literal type="string" pos:line="49" pos:column="34">"unixsock plugin: pthread_create failed: %s"<pos:position pos:line="49" pos:column="78"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="50" pos:column="41">sstrerror<pos:position pos:line="50" pos:column="50"/></name> <argument_list pos:line="50" pos:column="51">(<argument><expr><name pos:line="50" pos:column="52">errno<pos:position pos:line="50" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="59">errbuf<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="67">sizeof <argument_list pos:line="50" pos:column="74">(<argument><expr><name pos:line="50" pos:column="75">errbuf<pos:position pos:line="50" pos:column="81"/></name></expr></argument>)<pos:position pos:line="50" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">close<pos:position pos:line="51" pos:column="30"/></name> <argument_list pos:line="51" pos:column="31">(<argument><expr><operator pos:line="51" pos:column="32">*<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">remote_fd<pos:position pos:line="51" pos:column="42"/></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">free<pos:position pos:line="52" pos:column="29"/></name> <argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">remote_fd<pos:position pos:line="52" pos:column="40"/></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
			<continue pos:line="53" pos:column="25">continue;<pos:position pos:line="53" pos:column="34"/></continue>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></while> <comment type="block" pos:line="55" pos:column="11">/* while (loop) */</comment>

	<expr_stmt><expr><call><name pos:line="57" pos:column="9">close<pos:position pos:line="57" pos:column="14"/></name> <argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">sock_fd<pos:position pos:line="57" pos:column="23"/></name></expr></argument>)<pos:position pos:line="57" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="58" pos:column="9">sock_fd<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <operator pos:line="58" pos:column="19">-<pos:position pos:line="58" pos:column="20"/></operator><literal type="number" pos:line="58" pos:column="20">1<pos:position pos:line="58" pos:column="21"/></literal></expr>;<pos:position pos:line="58" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="60" pos:column="9">status<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <call><name pos:line="60" pos:column="18">unlink<pos:position pos:line="60" pos:column="24"/></name> <argument_list pos:line="60" pos:column="25">(<argument><expr><ternary><condition><expr><operator pos:line="60" pos:column="26">(<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="27">sock_file<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">!=<pos:position pos:line="60" pos:column="39"/></operator> <name pos:line="60" pos:column="40">NULL<pos:position pos:line="60" pos:column="44"/></name><operator pos:line="60" pos:column="44">)<pos:position pos:line="60" pos:column="45"/></operator></expr> ?<pos:position pos:line="60" pos:column="47"/></condition><then pos:line="60" pos:column="47"> <expr><name pos:line="60" pos:column="48">sock_file<pos:position pos:line="60" pos:column="57"/></name></expr> <pos:position pos:line="60" pos:column="58"/></then><else pos:line="60" pos:column="58">: <expr><name pos:line="60" pos:column="60">US_DEFAULT_PATH<pos:position pos:line="60" pos:column="75"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="60" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="77"/></expr_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">status<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">!=<pos:position pos:line="61" pos:column="22"/></operator> <literal type="number" pos:line="61" pos:column="23">0<pos:position pos:line="61" pos:column="24"/></literal></expr>)<pos:position pos:line="61" pos:column="25"/></condition><then pos:line="61" pos:column="25">
	<block pos:line="62" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="63" pos:column="17">char<pos:position pos:line="63" pos:column="21"/></name></type> <name><name pos:line="63" pos:column="22">errbuf<pos:position pos:line="63" pos:column="28"/></name><index pos:line="63" pos:column="28">[<expr><literal type="number" pos:line="63" pos:column="29">1024<pos:position pos:line="63" pos:column="33"/></literal></expr>]<pos:position pos:line="63" pos:column="34"/></index></name></decl>;<pos:position pos:line="63" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">NOTICE<pos:position pos:line="64" pos:column="23"/></name> <argument_list pos:line="64" pos:column="24">(<argument><expr><literal type="string" pos:line="64" pos:column="25">"unixsock plugin: unlink (%s) failed: %s"<pos:position pos:line="64" pos:column="66"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="65" pos:column="33">(<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="34">sock_file<pos:position pos:line="65" pos:column="43"/></name> <operator pos:line="65" pos:column="44">!=<pos:position pos:line="65" pos:column="46"/></operator> <name pos:line="65" pos:column="47">NULL<pos:position pos:line="65" pos:column="51"/></name><operator pos:line="65" pos:column="51">)<pos:position pos:line="65" pos:column="52"/></operator></expr> ?<pos:position pos:line="65" pos:column="54"/></condition><then pos:line="65" pos:column="54"> <expr><name pos:line="65" pos:column="55">sock_file<pos:position pos:line="65" pos:column="64"/></name></expr> <pos:position pos:line="65" pos:column="65"/></then><else pos:line="65" pos:column="65">: <expr><name pos:line="65" pos:column="67">US_DEFAULT_PATH<pos:position pos:line="65" pos:column="82"/></name></expr></else></ternary></expr></argument>,
				<argument><expr><call><name pos:line="66" pos:column="33">sstrerror<pos:position pos:line="66" pos:column="42"/></name> <argument_list pos:line="66" pos:column="43">(<argument><expr><name pos:line="66" pos:column="44">errno<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">errbuf<pos:position pos:line="66" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="59">sizeof <argument_list pos:line="66" pos:column="66">(<argument><expr><name pos:line="66" pos:column="67">errbuf<pos:position pos:line="66" pos:column="73"/></name></expr></argument>)<pos:position pos:line="66" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>

	<return pos:line="69" pos:column="9">return <expr><operator pos:line="69" pos:column="16">(<pos:position pos:line="69" pos:column="17"/></operator><operator pos:line="69" pos:column="17">(<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">void<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">*<pos:position pos:line="69" pos:column="24"/></operator><operator pos:line="69" pos:column="24">)<pos:position pos:line="69" pos:column="25"/></operator> <literal type="number" pos:line="69" pos:column="26">0<pos:position pos:line="69" pos:column="27"/></literal><operator pos:line="69" pos:column="27">)<pos:position pos:line="69" pos:column="28"/></operator></expr>;<pos:position pos:line="69" pos:column="29"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
