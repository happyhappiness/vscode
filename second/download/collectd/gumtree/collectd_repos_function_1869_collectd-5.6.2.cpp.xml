<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1869_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mb_config_set_host_address<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">mb_host_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">host<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="56">/* {{{ */</comment>
                                      <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">address<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <block pos:line="2" pos:column="60">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">ai_list<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">host<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">)<pos:position pos:line="6" pos:column="21"/></operator> <operator pos:line="6" pos:column="22">||<pos:position pos:line="6" pos:column="24"/></operator> <operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">address<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">==<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="37">NULL<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator></expr>)<pos:position pos:line="6" pos:column="43"/></condition><then pos:line="6" pos:column="43">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">addrinfo<pos:position pos:line="9" pos:column="18"/></name></name></type> <name pos:line="9" pos:column="19">ai_hints<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><block pos:line="9" pos:column="30">{
      <comment type="block" pos:line="10" pos:column="7">/* XXX: libmodbus can only handle IPv4 addresses. */</comment>
      <expr><operator pos:line="11" pos:column="7">.<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">ai_family<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">AF_INET<pos:position pos:line="11" pos:column="27"/></name></expr>,
      <expr><operator pos:line="12" pos:column="7">.<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">ai_flags<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">AI_ADDRCONFIG<pos:position pos:line="12" pos:column="32"/></name></expr>}<pos:position pos:line="12" pos:column="33"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">status<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">getaddrinfo<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">address<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <comment type="block" pos:line="14" pos:column="33">/* service = */</comment> <argument><expr><name pos:line="14" pos:column="49">NULL<pos:position pos:line="14" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="55">&amp;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="56">ai_hints<pos:position pos:line="14" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="66">&amp;<pos:position pos:line="14" pos:column="71"/></operator><name pos:line="14" pos:column="67">ai_list<pos:position pos:line="14" pos:column="74"/></name></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="76"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name></type> <name><name pos:line="16" pos:column="10">errbuf<pos:position pos:line="16" pos:column="16"/></name><index pos:line="16" pos:column="16">[<expr><literal type="number" pos:line="16" pos:column="17">1024<pos:position pos:line="16" pos:column="21"/></literal></expr>]<pos:position pos:line="16" pos:column="22"/></index></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"Modbus plugin: getaddrinfo failed: %s"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">status<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">==<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">EAI_SYSTEM<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">)<pos:position pos:line="18" pos:column="33"/></operator></expr> ?<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <expr><call><name pos:line="18" pos:column="36">sstrerror<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">errno<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">errbuf<pos:position pos:line="18" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="61">sizeof<argument_list pos:line="18" pos:column="67">(<argument><expr><name pos:line="18" pos:column="68">errbuf<pos:position pos:line="18" pos:column="74"/></name></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>
                                 <pos:position pos:line="19" pos:column="34"/></then><else pos:line="19" pos:column="34">: <expr><call><name pos:line="19" pos:column="36">gai_strerror<pos:position pos:line="19" pos:column="48"/></name><argument_list pos:line="19" pos:column="48">(<argument><expr><name pos:line="19" pos:column="49">status<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">)<pos:position pos:line="20" pos:column="20"/></operator></expr>;<pos:position pos:line="20" pos:column="21"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <for pos:line="23" pos:column="3">for <control pos:line="23" pos:column="7">(<init><decl><type><name><name pos:line="23" pos:column="8">struct<pos:position pos:line="23" pos:column="14"/></name> <name pos:line="23" pos:column="15">addrinfo<pos:position pos:line="23" pos:column="23"/></name></name> <modifier pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></modifier><name pos:line="23" pos:column="25">ai_ptr<pos:position pos:line="23" pos:column="31"/></name></type> <init pos:line="23" pos:column="32">= <expr><name pos:line="23" pos:column="34">ai_list<pos:position pos:line="23" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="42"/></init> <condition><expr><name pos:line="23" pos:column="43">ai_ptr<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">!=<pos:position pos:line="23" pos:column="52"/></operator> <name pos:line="23" pos:column="53">NULL<pos:position pos:line="23" pos:column="57"/></name></expr>;<pos:position pos:line="23" pos:column="58"/></condition>
       <incr><expr><name pos:line="24" pos:column="8">ai_ptr<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <name><name pos:line="24" pos:column="17">ai_ptr<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">ai_next<pos:position pos:line="24" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="24" pos:column="33"/></control> <block pos:line="24" pos:column="34">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">status<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <call><name pos:line="25" pos:column="14">getnameinfo<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name><name pos:line="25" pos:column="26">ai_ptr<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">ai_addr<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="43">ai_ptr<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">-&gt;<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="51">ai_addrlen<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="63">host<pos:position pos:line="25" pos:column="67"/></name><operator pos:line="25" pos:column="67">-&gt;<pos:position pos:line="25" pos:column="72"/></operator><name pos:line="25" pos:column="69">node<pos:position pos:line="25" pos:column="73"/></name></name></expr></argument>,
                         <argument><expr><sizeof pos:line="26" pos:column="26">sizeof<argument_list pos:line="26" pos:column="32">(<argument><expr><name><name pos:line="26" pos:column="33">host<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">node<pos:position pos:line="26" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></sizeof></expr></argument>,
                         <comment type="block" pos:line="27" pos:column="26">/* service = */</comment> <argument><expr><name pos:line="27" pos:column="42">NULL<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <comment type="block" pos:line="27" pos:column="48">/* length = */</comment> <argument><expr><literal type="number" pos:line="27" pos:column="63">0<pos:position pos:line="27" pos:column="64"/></literal></expr></argument>,
                         <comment type="block" pos:line="28" pos:column="26">/* flags = */</comment> <argument><expr><name pos:line="28" pos:column="40">NI_NUMERICHOST<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">status<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <literal type="number" pos:line="29" pos:column="19">0<pos:position pos:line="29" pos:column="20"/></literal></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
      <block type="pseudo"><break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></for> <comment type="block" pos:line="31" pos:column="5">/* for (ai_ptr) */</comment>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">freeaddrinfo<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">ai_list<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>

  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">status<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="5">ERROR<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><literal type="string" pos:line="36" pos:column="11">"Modbus plugin: Unable to translate node name: \"%s\""<pos:position pos:line="36" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="67">address<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt></block></then>
  <else pos:line="37" pos:column="3">else <comment type="block" pos:line="37" pos:column="8">/* if (status == 0) */</comment>
  <block pos:line="38" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">DEBUG<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><literal type="string" pos:line="39" pos:column="11">"Modbus plugin: mb_config_set_host_address: %s -&gt; %s"<pos:position pos:line="39" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="66">address<pos:position pos:line="39" pos:column="73"/></name></expr></argument>,
          <argument><expr><name><name pos:line="40" pos:column="11">host<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">node<pos:position pos:line="40" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></else></if>

  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><name pos:line="43" pos:column="11">status<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">)<pos:position pos:line="43" pos:column="18"/></operator></expr>;<pos:position pos:line="43" pos:column="19"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
