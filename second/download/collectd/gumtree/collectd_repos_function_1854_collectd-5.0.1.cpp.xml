<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1854_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lcc_receive<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">lcc_connection_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">c<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="46">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">lcc_response_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">ret_res<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">lcc_response_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">res<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ptr<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">buffer<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><literal type="number" pos:line="6" pos:column="15">4096<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><operator pos:line="9" pos:column="11">&amp;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="12">res<pos:position pos:line="9" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="20">sizeof <argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">res<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Read the first line, containing the status and a message */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">ptr<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">fgets<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">buffer<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="24">sizeof <argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">buffer<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="41">c<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">-&gt;<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="44">fh<pos:position pos:line="12" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">ptr<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <name pos:line="13" pos:column="14">NULL<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">lcc_set_errno<pos:position pos:line="15" pos:column="18"/></name> <argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">c<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">errno<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">lcc_chomp<pos:position pos:line="18" pos:column="12"/></name> <argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">buffer<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">LCC_DEBUG<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"receive: &lt;-- %s\n"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">buffer<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* Convert the leading status to an integer and make `ptr' to point to the
   * beginning of the message. */</comment>
  <expr_stmt><expr><name pos:line="23" pos:column="3">ptr<pos:position pos:line="23" pos:column="6"/></name> <operator pos:line="23" pos:column="7">=<pos:position pos:line="23" pos:column="8"/></operator> <name pos:line="23" pos:column="9">NULL<pos:position pos:line="23" pos:column="13"/></name></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">errno<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <literal type="number" pos:line="24" pos:column="11">0<pos:position pos:line="24" pos:column="12"/></literal></expr>;<pos:position pos:line="24" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">res<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">.<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">status<pos:position pos:line="25" pos:column="13"/></name></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">strtol<pos:position pos:line="25" pos:column="22"/></name> <argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">buffer<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="33">ptr<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="38">0<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><operator pos:line="26" pos:column="7">(<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">errno<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal><operator pos:line="26" pos:column="18">)<pos:position pos:line="26" pos:column="19"/></operator> <operator pos:line="26" pos:column="20">||<pos:position pos:line="26" pos:column="22"/></operator> <operator pos:line="26" pos:column="23">(<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">ptr<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">==<pos:position pos:line="26" pos:column="30"/></operator> <operator pos:line="26" pos:column="31">&amp;<pos:position pos:line="26" pos:column="36"/></operator><name><name pos:line="26" pos:column="32">buffer<pos:position pos:line="26" pos:column="38"/></name><index pos:line="26" pos:column="38">[<expr><literal type="number" pos:line="26" pos:column="39">0<pos:position pos:line="26" pos:column="40"/></literal></expr>]<pos:position pos:line="26" pos:column="41"/></index></name><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">lcc_set_errno<pos:position pos:line="28" pos:column="18"/></name> <argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">c<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="23">errno<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><operator pos:line="29" pos:column="13">-<pos:position pos:line="29" pos:column="14"/></operator><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal><operator pos:line="29" pos:column="15">)<pos:position pos:line="29" pos:column="16"/></operator></expr>;<pos:position pos:line="29" pos:column="17"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="32" pos:column="3">/* Skip white spaces after the status number */</comment>
  <while pos:line="33" pos:column="3">while <condition pos:line="33" pos:column="9">(<expr><operator pos:line="33" pos:column="10">(<pos:position pos:line="33" pos:column="11"/></operator><operator pos:line="33" pos:column="11">*<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">ptr<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">==<pos:position pos:line="33" pos:column="18"/></operator> <literal type="char" pos:line="33" pos:column="19">' '<pos:position pos:line="33" pos:column="22"/></literal><operator pos:line="33" pos:column="22">)<pos:position pos:line="33" pos:column="23"/></operator> <operator pos:line="33" pos:column="24">||<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator><operator pos:line="33" pos:column="28">*<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">ptr<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">==<pos:position pos:line="33" pos:column="35"/></operator> <literal type="char" pos:line="33" pos:column="36">'\t'<pos:position pos:line="33" pos:column="40"/></literal><operator pos:line="33" pos:column="40">)<pos:position pos:line="33" pos:column="41"/></operator></expr>)<pos:position pos:line="33" pos:column="42"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="5">ptr<pos:position pos:line="34" pos:column="8"/></name><operator pos:line="34" pos:column="8">++<pos:position pos:line="34" pos:column="10"/></operator></expr>;<pos:position pos:line="34" pos:column="11"/></expr_stmt></block></while>

  <comment type="block" pos:line="36" pos:column="3">/* Now copy the message. */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">strncpy<pos:position pos:line="37" pos:column="10"/></name> <argument_list pos:line="37" pos:column="11">(<argument><expr><name><name pos:line="37" pos:column="12">res<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">message<pos:position pos:line="37" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="25">ptr<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="30">sizeof <argument_list pos:line="37" pos:column="37">(<argument><expr><name><name pos:line="37" pos:column="38">res<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">message<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">res<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">.<pos:position pos:line="38" pos:column="7"/></operator><name pos:line="38" pos:column="7">message<pos:position pos:line="38" pos:column="14"/></name><index pos:line="38" pos:column="14">[<expr><sizeof pos:line="38" pos:column="15">sizeof <argument_list pos:line="38" pos:column="22">(<argument><expr><name><name pos:line="38" pos:column="23">res<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">.<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">message<pos:position pos:line="38" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></sizeof> <operator pos:line="38" pos:column="36">-<pos:position pos:line="38" pos:column="37"/></operator> <literal type="number" pos:line="38" pos:column="38">1<pos:position pos:line="38" pos:column="39"/></literal></expr>]<pos:position pos:line="38" pos:column="40"/></index></name> <operator pos:line="38" pos:column="41">=<pos:position pos:line="38" pos:column="42"/></operator> <literal type="number" pos:line="38" pos:column="43">0<pos:position pos:line="38" pos:column="44"/></literal></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* Error or no lines follow: We're done. */</comment>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name><name pos:line="41" pos:column="7">res<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">.<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="11">status<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">&lt;=<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="21">0<pos:position pos:line="41" pos:column="22"/></literal></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23">
  <block pos:line="42" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memcpy<pos:position pos:line="43" pos:column="11"/></name> <argument_list pos:line="43" pos:column="12">(<argument><expr><name pos:line="43" pos:column="13">ret_res<pos:position pos:line="43" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="22">&amp;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="23">res<pos:position pos:line="43" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="28">sizeof <argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">res<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><operator pos:line="44" pos:column="12">(<pos:position pos:line="44" pos:column="13"/></operator><literal type="number" pos:line="44" pos:column="13">0<pos:position pos:line="44" pos:column="14"/></literal><operator pos:line="44" pos:column="14">)<pos:position pos:line="44" pos:column="15"/></operator></expr>;<pos:position pos:line="44" pos:column="16"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* Allocate space for the char-pointers */</comment>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">res<pos:position pos:line="48" pos:column="6"/></name><operator pos:line="48" pos:column="6">.<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">lines_num<pos:position pos:line="48" pos:column="16"/></name></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <operator pos:line="48" pos:column="19">(<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">size_t<pos:position pos:line="48" pos:column="26"/></name><operator pos:line="48" pos:column="26">)<pos:position pos:line="48" pos:column="27"/></operator> <name><name pos:line="48" pos:column="28">res<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">.<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="32">status<pos:position pos:line="48" pos:column="38"/></name></name></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">res<pos:position pos:line="49" pos:column="6"/></name><operator pos:line="49" pos:column="6">.<pos:position pos:line="49" pos:column="7"/></operator><name pos:line="49" pos:column="7">status<pos:position pos:line="49" pos:column="13"/></name></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">res<pos:position pos:line="50" pos:column="6"/></name><operator pos:line="50" pos:column="6">.<pos:position pos:line="50" pos:column="7"/></operator><name pos:line="50" pos:column="7">lines<pos:position pos:line="50" pos:column="12"/></name></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <operator pos:line="50" pos:column="15">(<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">char<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><operator pos:line="50" pos:column="22">*<pos:position pos:line="50" pos:column="23"/></operator><operator pos:line="50" pos:column="23">)<pos:position pos:line="50" pos:column="24"/></operator> <call><name pos:line="50" pos:column="25">malloc<pos:position pos:line="50" pos:column="31"/></name> <argument_list pos:line="50" pos:column="32">(<argument><expr><name><name pos:line="50" pos:column="33">res<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">.<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="37">lines_num<pos:position pos:line="50" pos:column="46"/></name></name> <operator pos:line="50" pos:column="47">*<pos:position pos:line="50" pos:column="48"/></operator> <sizeof pos:line="50" pos:column="49">sizeof <argument_list pos:line="50" pos:column="56">(<argument><expr><name pos:line="50" pos:column="57">char<pos:position pos:line="50" pos:column="61"/></name> <operator pos:line="50" pos:column="62">*<pos:position pos:line="50" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><name><name pos:line="51" pos:column="7">res<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">.<pos:position pos:line="51" pos:column="11"/></operator><name pos:line="51" pos:column="11">lines<pos:position pos:line="51" pos:column="16"/></name></name> <operator pos:line="51" pos:column="17">==<pos:position pos:line="51" pos:column="19"/></operator> <name pos:line="51" pos:column="20">NULL<pos:position pos:line="51" pos:column="24"/></name></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25">
  <block pos:line="52" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">lcc_set_errno<pos:position pos:line="53" pos:column="18"/></name> <argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">c<pos:position pos:line="53" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="23">ENOMEM<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
    <return pos:line="54" pos:column="5">return <expr><operator pos:line="54" pos:column="12">(<pos:position pos:line="54" pos:column="13"/></operator><operator pos:line="54" pos:column="13">-<pos:position pos:line="54" pos:column="14"/></operator><literal type="number" pos:line="54" pos:column="14">1<pos:position pos:line="54" pos:column="15"/></literal><operator pos:line="54" pos:column="15">)<pos:position pos:line="54" pos:column="16"/></operator></expr>;<pos:position pos:line="54" pos:column="17"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="57" pos:column="3">/* Now receive all the lines */</comment>
  <for pos:line="58" pos:column="3">for <control pos:line="58" pos:column="7">(<init><expr><name pos:line="58" pos:column="8">i<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <literal type="number" pos:line="58" pos:column="12">0<pos:position pos:line="58" pos:column="13"/></literal></expr>;<pos:position pos:line="58" pos:column="14"/></init> <condition><expr><name pos:line="58" pos:column="15">i<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&lt;<pos:position pos:line="58" pos:column="21"/></operator> <name><name pos:line="58" pos:column="19">res<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">.<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">lines_num<pos:position pos:line="58" pos:column="32"/></name></name></expr>;<pos:position pos:line="58" pos:column="33"/></condition> <incr><expr><name pos:line="58" pos:column="34">i<pos:position pos:line="58" pos:column="35"/></name><operator pos:line="58" pos:column="35">++<pos:position pos:line="58" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="38"/></control>
  <block pos:line="59" pos:column="3">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">ptr<pos:position pos:line="60" pos:column="8"/></name> <operator pos:line="60" pos:column="9">=<pos:position pos:line="60" pos:column="10"/></operator> <call><name pos:line="60" pos:column="11">fgets<pos:position pos:line="60" pos:column="16"/></name> <argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">buffer<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="26">sizeof <argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">buffer<pos:position pos:line="60" pos:column="40"/></name></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="43">c<pos:position pos:line="60" pos:column="44"/></name><operator pos:line="60" pos:column="44">-&gt;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="46">fh<pos:position pos:line="60" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">ptr<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">==<pos:position pos:line="61" pos:column="15"/></operator> <name pos:line="61" pos:column="16">NULL<pos:position pos:line="61" pos:column="20"/></name></expr>)<pos:position pos:line="61" pos:column="21"/></condition><then pos:line="61" pos:column="21">
    <block pos:line="62" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">lcc_set_errno<pos:position pos:line="63" pos:column="20"/></name> <argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">c<pos:position pos:line="63" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="25">errno<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>
      <break pos:line="64" pos:column="7">break;<pos:position pos:line="64" pos:column="13"/></break>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">lcc_chomp<pos:position pos:line="66" pos:column="14"/></name> <argument_list pos:line="66" pos:column="15">(<argument><expr><name pos:line="66" pos:column="16">buffer<pos:position pos:line="66" pos:column="22"/></name></expr></argument>)<pos:position pos:line="66" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">LCC_DEBUG<pos:position pos:line="67" pos:column="14"/></name> <argument_list pos:line="67" pos:column="15">(<argument><expr><literal type="string" pos:line="67" pos:column="16">"receive: &lt;-- %s\n"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="37">buffer<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="69" pos:column="5">res<pos:position pos:line="69" pos:column="8"/></name><operator pos:line="69" pos:column="8">.<pos:position pos:line="69" pos:column="9"/></operator><name pos:line="69" pos:column="9">lines<pos:position pos:line="69" pos:column="14"/></name><index pos:line="69" pos:column="14">[<expr><name pos:line="69" pos:column="15">i<pos:position pos:line="69" pos:column="16"/></name></expr>]<pos:position pos:line="69" pos:column="17"/></index></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <call><name pos:line="69" pos:column="20">strdup<pos:position pos:line="69" pos:column="26"/></name> <argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">buffer<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name><name pos:line="70" pos:column="9">res<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">.<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">lines<pos:position pos:line="70" pos:column="18"/></name><index pos:line="70" pos:column="18">[<expr><name pos:line="70" pos:column="19">i<pos:position pos:line="70" pos:column="20"/></name></expr>]<pos:position pos:line="70" pos:column="21"/></index></name> <operator pos:line="70" pos:column="22">==<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">NULL<pos:position pos:line="70" pos:column="29"/></name></expr>)<pos:position pos:line="70" pos:column="30"/></condition><then pos:line="70" pos:column="30">
    <block pos:line="71" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">lcc_set_errno<pos:position pos:line="72" pos:column="20"/></name> <argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">c<pos:position pos:line="72" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="25">ENOMEM<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
      <break pos:line="73" pos:column="7">break;<pos:position pos:line="73" pos:column="13"/></break>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
  }<pos:position pos:line="75" pos:column="4"/></block></for>

  <comment type="block" pos:line="77" pos:column="3">/* Check if the for-loop exited with an error. */</comment>
  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><name pos:line="78" pos:column="7">i<pos:position pos:line="78" pos:column="8"/></name> <operator pos:line="78" pos:column="9">&lt;<pos:position pos:line="78" pos:column="13"/></operator> <name><name pos:line="78" pos:column="11">res<pos:position pos:line="78" pos:column="14"/></name><operator pos:line="78" pos:column="14">.<pos:position pos:line="78" pos:column="15"/></operator><name pos:line="78" pos:column="15">lines_num<pos:position pos:line="78" pos:column="24"/></name></name></expr>)<pos:position pos:line="78" pos:column="25"/></condition><then pos:line="78" pos:column="25">
  <block pos:line="79" pos:column="3">{
    <while pos:line="80" pos:column="5">while <condition pos:line="80" pos:column="11">(<expr><name pos:line="80" pos:column="12">i<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">&gt;<pos:position pos:line="80" pos:column="18"/></operator> <literal type="number" pos:line="80" pos:column="16">0<pos:position pos:line="80" pos:column="17"/></literal></expr>)<pos:position pos:line="80" pos:column="18"/></condition>
    <block pos:line="81" pos:column="5">{
      <expr_stmt><expr><name pos:line="82" pos:column="7">i<pos:position pos:line="82" pos:column="8"/></name><operator pos:line="82" pos:column="8">--<pos:position pos:line="82" pos:column="10"/></operator></expr>;<pos:position pos:line="82" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">free<pos:position pos:line="83" pos:column="11"/></name> <argument_list pos:line="83" pos:column="12">(<argument><expr><name><name pos:line="83" pos:column="13">res<pos:position pos:line="83" pos:column="16"/></name><operator pos:line="83" pos:column="16">.<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="17">lines<pos:position pos:line="83" pos:column="22"/></name><index pos:line="83" pos:column="22">[<expr><name pos:line="83" pos:column="23">i<pos:position pos:line="83" pos:column="24"/></name></expr>]<pos:position pos:line="83" pos:column="25"/></index></name></expr></argument>)<pos:position pos:line="83" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">free<pos:position pos:line="85" pos:column="9"/></name> <argument_list pos:line="85" pos:column="10">(<argument><expr><name><name pos:line="85" pos:column="11">res<pos:position pos:line="85" pos:column="14"/></name><operator pos:line="85" pos:column="14">.<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="15">lines<pos:position pos:line="85" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="22"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><operator pos:line="86" pos:column="12">(<pos:position pos:line="86" pos:column="13"/></operator><operator pos:line="86" pos:column="13">-<pos:position pos:line="86" pos:column="14"/></operator><literal type="number" pos:line="86" pos:column="14">1<pos:position pos:line="86" pos:column="15"/></literal><operator pos:line="86" pos:column="15">)<pos:position pos:line="86" pos:column="16"/></operator></expr>;<pos:position pos:line="86" pos:column="17"/></return>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="89" pos:column="3">memcpy<pos:position pos:line="89" pos:column="9"/></name> <argument_list pos:line="89" pos:column="10">(<argument><expr><name pos:line="89" pos:column="11">ret_res<pos:position pos:line="89" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="20">&amp;<pos:position pos:line="89" pos:column="25"/></operator><name pos:line="89" pos:column="21">res<pos:position pos:line="89" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="89" pos:column="26">sizeof <argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">res<pos:position pos:line="89" pos:column="37"/></name></expr></argument>)<pos:position pos:line="89" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="89" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt>
  <return pos:line="90" pos:column="3">return <expr><operator pos:line="90" pos:column="10">(<pos:position pos:line="90" pos:column="11"/></operator><literal type="number" pos:line="90" pos:column="11">0<pos:position pos:line="90" pos:column="12"/></literal><operator pos:line="90" pos:column="12">)<pos:position pos:line="90" pos:column="13"/></operator></expr>;<pos:position pos:line="90" pos:column="14"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
