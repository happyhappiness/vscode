<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_339_collectd-4.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">handle_ipv6<pos:position pos:line="2" pos:column="12"/></name> <parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">struct<pos:position pos:line="2" pos:column="20"/></name> <name pos:line="2" pos:column="21">ip6_hdr<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">ipv6<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">len<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">PCAP_SNAPLEN<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">int<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">offset<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nexthdr<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">in6_addr<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">s_addr<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">in6_addr<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">d_addr<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">uint16_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">payload_len<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><literal type="number" pos:line="12" pos:column="9">0<pos:position pos:line="12" pos:column="10"/></literal> <operator pos:line="12" pos:column="11">&gt;<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="13">len<pos:position pos:line="12" pos:column="16"/></name></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17">
	<block type="pseudo"><return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal><operator pos:line="13" pos:column="18">)<pos:position pos:line="13" pos:column="19"/></operator></expr>;<pos:position pos:line="13" pos:column="20"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">offset<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <sizeof pos:line="15" pos:column="14">sizeof <argument_list pos:line="15" pos:column="21">(<argument><expr pos:line="15" pos:column="22">struct <name pos:line="15" pos:column="29">ip6_hdr<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">nexthdr<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name><name pos:line="16" pos:column="15">ipv6<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">ip6_nxt<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">s_addr<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <name><name pos:line="17" pos:column="14">ipv6<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">ip6_src<pos:position pos:line="17" pos:column="27"/></name></name></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">d_addr<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <name><name pos:line="18" pos:column="14">ipv6<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">ip6_dst<pos:position pos:line="18" pos:column="27"/></name></name></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">payload_len<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">ntohs<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><name><name pos:line="19" pos:column="26">ipv6<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">ip6_plen<pos:position pos:line="19" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">ignore_list_match<pos:position pos:line="21" pos:column="26"/></name> <argument_list pos:line="21" pos:column="27">(<argument><expr><operator pos:line="21" pos:column="28">&amp;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="29">s_addr<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37">
	    <block type="pseudo"><return pos:line="22" pos:column="13">return <expr><operator pos:line="22" pos:column="20">(<pos:position pos:line="22" pos:column="21"/></operator><literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal><operator pos:line="22" pos:column="22">)<pos:position pos:line="22" pos:column="23"/></operator></expr>;<pos:position pos:line="22" pos:column="24"/></return></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* Parse extension headers. This only handles the standard headers, as
     * defined in RFC 2460, correctly. Fragments are discarded. */</comment>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">IPPROTO_ROUTING<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">==<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">nexthdr<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator> <comment type="block" pos:line="26" pos:column="41">/* routing header */</comment>
	    <operator pos:line="27" pos:column="13">||<pos:position pos:line="27" pos:column="15"/></operator> <operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">IPPROTO_HOPOPTS<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">==<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">nexthdr<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator> <comment type="block" pos:line="27" pos:column="45">/* Hop-by-Hop options. */</comment>
	    <operator pos:line="28" pos:column="13">||<pos:position pos:line="28" pos:column="15"/></operator> <operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">IPPROTO_FRAGMENT<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">==<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="37">nexthdr<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">)<pos:position pos:line="28" pos:column="45"/></operator> <comment type="block" pos:line="28" pos:column="46">/* fragmentation header. */</comment>
	    <operator pos:line="29" pos:column="13">||<pos:position pos:line="29" pos:column="15"/></operator> <operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">IPPROTO_DSTOPTS<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">==<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="36">nexthdr<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">)<pos:position pos:line="29" pos:column="44"/></operator> <comment type="block" pos:line="29" pos:column="45">/* destination options. */</comment>
	    <operator pos:line="30" pos:column="13">||<pos:position pos:line="30" pos:column="15"/></operator> <operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">IPPROTO_DSTOPTS<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">==<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">nexthdr<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">)<pos:position pos:line="30" pos:column="44"/></operator> <comment type="block" pos:line="30" pos:column="45">/* destination options. */</comment>
	    <operator pos:line="31" pos:column="13">||<pos:position pos:line="31" pos:column="15"/></operator> <operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">IPPROTO_AH<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">==<pos:position pos:line="31" pos:column="30"/></operator> <name pos:line="31" pos:column="31">nexthdr<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">)<pos:position pos:line="31" pos:column="39"/></operator> <comment type="block" pos:line="31" pos:column="40">/* destination options. */</comment>
	    <operator pos:line="32" pos:column="13">||<pos:position pos:line="32" pos:column="15"/></operator> <operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">IPPROTO_ESP<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">==<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="32">nexthdr<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">)<pos:position pos:line="32" pos:column="40"/></operator></expr>)<pos:position pos:line="32" pos:column="41"/></condition> <comment type="block" pos:line="32" pos:column="42">/* encapsulating security payload. */</comment>
    <block pos:line="33" pos:column="5">{
	<decl_stmt><decl><type><name><name pos:line="34" pos:column="9">struct<pos:position pos:line="34" pos:column="15"/></name> <name pos:line="34" pos:column="16">ip6_ext<pos:position pos:line="34" pos:column="23"/></name></name></type> <name pos:line="34" pos:column="24">ext_hdr<pos:position pos:line="34" pos:column="31"/></name></decl>;<pos:position pos:line="34" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">uint16_t<pos:position pos:line="35" pos:column="17"/></name></type> <name pos:line="35" pos:column="18">ext_hdr_len<pos:position pos:line="35" pos:column="29"/></name></decl>;<pos:position pos:line="35" pos:column="30"/></decl_stmt>

	<comment type="block" pos:line="37" pos:column="9">/* Catch broken packets */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">(<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">offset<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">+<pos:position pos:line="38" pos:column="22"/></operator> <sizeof pos:line="38" pos:column="23">sizeof <argument_list pos:line="38" pos:column="30">(<argument><expr pos:line="38" pos:column="31">struct <name pos:line="38" pos:column="38">ip6_ext<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></sizeof><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator> <operator pos:line="38" pos:column="48">&gt;<pos:position pos:line="38" pos:column="52"/></operator> <operator pos:line="38" pos:column="50">(<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="51">unsigned<pos:position pos:line="38" pos:column="59"/></name> <name pos:line="38" pos:column="60">int<pos:position pos:line="38" pos:column="63"/></name><operator pos:line="38" pos:column="63">)<pos:position pos:line="38" pos:column="64"/></operator><name pos:line="38" pos:column="64">len<pos:position pos:line="38" pos:column="67"/></name></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68">
	    <block type="pseudo"><return pos:line="39" pos:column="13">return <expr><operator pos:line="39" pos:column="20">(<pos:position pos:line="39" pos:column="21"/></operator><literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal><operator pos:line="39" pos:column="22">)<pos:position pos:line="39" pos:column="23"/></operator></expr>;<pos:position pos:line="39" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="41" pos:column="9">/* Cannot handle fragments. */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">IPPROTO_FRAGMENT<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">==<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="33">nexthdr<pos:position pos:line="42" pos:column="40"/></name></expr>)<pos:position pos:line="42" pos:column="41"/></condition><then pos:line="42" pos:column="41">
	    <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><operator pos:line="43" pos:column="20">(<pos:position pos:line="43" pos:column="21"/></operator><literal type="number" pos:line="43" pos:column="21">0<pos:position pos:line="43" pos:column="22"/></literal><operator pos:line="43" pos:column="22">)<pos:position pos:line="43" pos:column="23"/></operator></expr>;<pos:position pos:line="43" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="45" pos:column="9">memcpy<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><operator pos:line="45" pos:column="17">&amp;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="18">ext_hdr<pos:position pos:line="45" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="27">(<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="28">char<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></operator><operator pos:line="45" pos:column="34">)<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="36">ipv6<pos:position pos:line="45" pos:column="40"/></name> <operator pos:line="45" pos:column="41">+<pos:position pos:line="45" pos:column="42"/></operator> <name pos:line="45" pos:column="43">offset<pos:position pos:line="45" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="51">sizeof <argument_list pos:line="45" pos:column="58">(<argument><expr pos:line="45" pos:column="59">struct <name pos:line="45" pos:column="66">ip6_ext<pos:position pos:line="45" pos:column="73"/></name></expr></argument>)<pos:position pos:line="45" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><name pos:line="46" pos:column="9">nexthdr<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <name><name pos:line="46" pos:column="19">ext_hdr<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">.<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">ip6e_nxt<pos:position pos:line="46" pos:column="35"/></name></name></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">ext_hdr_len<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <operator pos:line="47" pos:column="23">(<pos:position pos:line="47" pos:column="24"/></operator><literal type="number" pos:line="47" pos:column="24">8<pos:position pos:line="47" pos:column="25"/></literal> <operator pos:line="47" pos:column="26">*<pos:position pos:line="47" pos:column="27"/></operator> <operator pos:line="47" pos:column="28">(<pos:position pos:line="47" pos:column="29"/></operator><call><name pos:line="47" pos:column="29">ntohs<pos:position pos:line="47" pos:column="34"/></name> <argument_list pos:line="47" pos:column="35">(<argument><expr><name><name pos:line="47" pos:column="36">ext_hdr<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">.<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">ip6e_len<pos:position pos:line="47" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call> <operator pos:line="47" pos:column="54">+<pos:position pos:line="47" pos:column="55"/></operator> <literal type="number" pos:line="47" pos:column="56">1<pos:position pos:line="47" pos:column="57"/></literal><operator pos:line="47" pos:column="57">)<pos:position pos:line="47" pos:column="58"/></operator><operator pos:line="47" pos:column="58">)<pos:position pos:line="47" pos:column="59"/></operator></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt>

	<comment type="block" pos:line="49" pos:column="9">/* This header is longer than the packets payload.. WTF? */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">ext_hdr_len<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">&gt;<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="27">payload_len<pos:position pos:line="50" pos:column="38"/></name></expr>)<pos:position pos:line="50" pos:column="39"/></condition><then pos:line="50" pos:column="39">
	    <block type="pseudo"><return pos:line="51" pos:column="13">return <expr><operator pos:line="51" pos:column="20">(<pos:position pos:line="51" pos:column="21"/></operator><literal type="number" pos:line="51" pos:column="21">0<pos:position pos:line="51" pos:column="22"/></literal><operator pos:line="51" pos:column="22">)<pos:position pos:line="51" pos:column="23"/></operator></expr>;<pos:position pos:line="51" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="53" pos:column="9">offset<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">+=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">ext_hdr_len<pos:position pos:line="53" pos:column="30"/></name></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="54" pos:column="9">payload_len<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">-=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">ext_hdr_len<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></while> <comment type="block" pos:line="55" pos:column="7">/* while */</comment>

    <comment type="block" pos:line="57" pos:column="5">/* Catch broken and empty packets */</comment>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">(<pos:position pos:line="58" pos:column="10"/></operator><operator pos:line="58" pos:column="10">(<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="11">offset<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">+<pos:position pos:line="58" pos:column="19"/></operator> <name pos:line="58" pos:column="20">payload_len<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">)<pos:position pos:line="58" pos:column="32"/></operator> <operator pos:line="58" pos:column="33">&gt;<pos:position pos:line="58" pos:column="37"/></operator> <operator pos:line="58" pos:column="35">(<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="36">unsigned<pos:position pos:line="58" pos:column="44"/></name> <name pos:line="58" pos:column="45">int<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">)<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="49">len<pos:position pos:line="58" pos:column="52"/></name><operator pos:line="58" pos:column="52">)<pos:position pos:line="58" pos:column="53"/></operator>
	    <operator pos:line="59" pos:column="13">||<pos:position pos:line="59" pos:column="15"/></operator> <operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="17">payload_len<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">==<pos:position pos:line="59" pos:column="31"/></operator> <literal type="number" pos:line="59" pos:column="32">0<pos:position pos:line="59" pos:column="33"/></literal><operator pos:line="59" pos:column="33">)<pos:position pos:line="59" pos:column="34"/></operator>
	    <operator pos:line="60" pos:column="13">||<pos:position pos:line="60" pos:column="15"/></operator> <operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">payload_len<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">&gt;<pos:position pos:line="60" pos:column="33"/></operator> <name pos:line="60" pos:column="31">PCAP_SNAPLEN<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">)<pos:position pos:line="60" pos:column="44"/></operator></expr>)<pos:position pos:line="60" pos:column="45"/></condition><then pos:line="60" pos:column="45">
	<block type="pseudo"><return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">(<pos:position pos:line="61" pos:column="17"/></operator><literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal><operator pos:line="61" pos:column="18">)<pos:position pos:line="61" pos:column="19"/></operator></expr>;<pos:position pos:line="61" pos:column="20"/></return></block></then></if>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">IPPROTO_UDP<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">!=<pos:position pos:line="63" pos:column="23"/></operator> <name pos:line="63" pos:column="24">nexthdr<pos:position pos:line="63" pos:column="31"/></name></expr>)<pos:position pos:line="63" pos:column="32"/></condition><then pos:line="63" pos:column="32">
	<block type="pseudo"><return pos:line="64" pos:column="9">return <expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><literal type="number" pos:line="64" pos:column="17">0<pos:position pos:line="64" pos:column="18"/></literal><operator pos:line="64" pos:column="18">)<pos:position pos:line="64" pos:column="19"/></operator></expr>;<pos:position pos:line="64" pos:column="20"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">memcpy<pos:position pos:line="66" pos:column="11"/></name> <argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">buf<pos:position pos:line="66" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="18">(<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="19">char<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">*<pos:position pos:line="66" pos:column="25"/></operator><operator pos:line="66" pos:column="25">)<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">ipv6<pos:position pos:line="66" pos:column="31"/></name> <operator pos:line="66" pos:column="32">+<pos:position pos:line="66" pos:column="33"/></operator> <name pos:line="66" pos:column="34">offset<pos:position pos:line="66" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="42">payload_len<pos:position pos:line="66" pos:column="53"/></name></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><call><name pos:line="67" pos:column="9">handle_udp<pos:position pos:line="67" pos:column="19"/></name> <argument_list pos:line="67" pos:column="20">(<argument><expr><operator pos:line="67" pos:column="21">(<pos:position pos:line="67" pos:column="22"/></operator>struct <name pos:line="67" pos:column="29">udphdr<pos:position pos:line="67" pos:column="35"/></name> <operator pos:line="67" pos:column="36">*<pos:position pos:line="67" pos:column="37"/></operator><operator pos:line="67" pos:column="37">)<pos:position pos:line="67" pos:column="38"/></operator> <name pos:line="67" pos:column="39">buf<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">payload_len<pos:position pos:line="67" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="57">&amp;<pos:position pos:line="67" pos:column="62"/></operator><name pos:line="67" pos:column="58">s_addr<pos:position pos:line="67" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="66">&amp;<pos:position pos:line="67" pos:column="71"/></operator><name pos:line="67" pos:column="67">d_addr<pos:position pos:line="67" pos:column="73"/></name></expr></argument>)<pos:position pos:line="67" pos:column="74"/></argument_list></call> <operator pos:line="67" pos:column="75">==<pos:position pos:line="67" pos:column="77"/></operator> <literal type="number" pos:line="67" pos:column="78">0<pos:position pos:line="67" pos:column="79"/></literal></expr>)<pos:position pos:line="67" pos:column="80"/></condition><then pos:line="67" pos:column="80">
	<block type="pseudo"><return pos:line="68" pos:column="9">return <expr><operator pos:line="68" pos:column="16">(<pos:position pos:line="68" pos:column="17"/></operator><literal type="number" pos:line="68" pos:column="17">0<pos:position pos:line="68" pos:column="18"/></literal><operator pos:line="68" pos:column="18">)<pos:position pos:line="68" pos:column="19"/></operator></expr>;<pos:position pos:line="68" pos:column="20"/></return></block></then></if>

    <return pos:line="70" pos:column="5">return <expr><operator pos:line="70" pos:column="12">(<pos:position pos:line="70" pos:column="13"/></operator><literal type="number" pos:line="70" pos:column="13">1<pos:position pos:line="70" pos:column="14"/></literal><operator pos:line="70" pos:column="14">)<pos:position pos:line="70" pos:column="15"/></operator></expr>;<pos:position pos:line="70" pos:column="16"/></return> <comment type="block" pos:line="70" pos:column="17">/* Success */</comment>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
