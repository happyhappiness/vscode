<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_799_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">kairosdb_escape_string<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">buffer_size<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="69">/* {{{ */</comment>
                                  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">string<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list> <block pos:line="2" pos:column="55">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">dst_pos<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">buffer<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">==<pos:position pos:line="5" pos:column="17"/></operator> <name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">)<pos:position pos:line="5" pos:column="23"/></operator> <operator pos:line="5" pos:column="24">||<pos:position pos:line="5" pos:column="26"/></operator> <operator pos:line="5" pos:column="27">(<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">string<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">==<pos:position pos:line="5" pos:column="37"/></operator> <name pos:line="5" pos:column="38">NULL<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">)<pos:position pos:line="5" pos:column="43"/></operator></expr>)<pos:position pos:line="5" pos:column="44"/></condition><then pos:line="5" pos:column="44">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">EINVAL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">buffer_size<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&lt;<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="21">3<pos:position pos:line="8" pos:column="22"/></literal></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">ENOMEM<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">dst_pos<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>

<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">BUFFER_ADD<pos:position pos:line="13" pos:column="19"/></name><parameter_list pos:line="13" pos:column="19">(<parameter><type><name pos:line="13" pos:column="20">c<pos:position pos:line="13" pos:column="21"/></name></type></parameter>)<pos:position pos:line="13" pos:column="22"/></parameter_list></cpp:macro>                                                          \
  <cpp:value pos:line="14" pos:column="3">do {                                                                         \
    if (dst_pos &gt;= (buffer_size - 1)) {                                        \
      buffer[buffer_size - 1] = 0;                                             \
      return -ENOMEM;                                                          \
    }                                                                          \
    buffer[dst_pos] = (c);                                                     \
    dst_pos++;                                                                 \
  } while (0)<pos:position pos:line="21" pos:column="14"/></cpp:value></cpp:define>

  <comment type="block" pos:line="23" pos:column="3">/* Escape special characters */</comment>
  <comment type="block" pos:line="24" pos:column="3">/* authorize -_. and alpha num but also escapes " */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">BUFFER_ADD<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="char" pos:line="25" pos:column="14">'"'<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
  <for pos:line="26" pos:column="3">for <control pos:line="26" pos:column="7">(<init><decl><type><name pos:line="26" pos:column="8">size_t<pos:position pos:line="26" pos:column="14"/></name></type> <name pos:line="26" pos:column="15">src_pos<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="27"/></init> <condition><expr><name><name pos:line="26" pos:column="28">string<pos:position pos:line="26" pos:column="34"/></name><index pos:line="26" pos:column="34">[<expr><name pos:line="26" pos:column="35">src_pos<pos:position pos:line="26" pos:column="42"/></name></expr>]<pos:position pos:line="26" pos:column="43"/></index></name> <operator pos:line="26" pos:column="44">!=<pos:position pos:line="26" pos:column="46"/></operator> <literal type="number" pos:line="26" pos:column="47">0<pos:position pos:line="26" pos:column="48"/></literal></expr>;<pos:position pos:line="26" pos:column="49"/></condition> <incr><expr><name pos:line="26" pos:column="50">src_pos<pos:position pos:line="26" pos:column="57"/></name><operator pos:line="26" pos:column="57">++<pos:position pos:line="26" pos:column="59"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="60"/></control> <block pos:line="26" pos:column="61">{
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">isalnum<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name><name pos:line="27" pos:column="17">string<pos:position pos:line="27" pos:column="23"/></name><index pos:line="27" pos:column="23">[<expr><name pos:line="27" pos:column="24">src_pos<pos:position pos:line="27" pos:column="31"/></name></expr>]<pos:position pos:line="27" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call> <operator pos:line="27" pos:column="34">||<pos:position pos:line="27" pos:column="36"/></operator> <literal type="number" pos:line="27" pos:column="37">0x2d<pos:position pos:line="27" pos:column="41"/></literal> <operator pos:line="27" pos:column="42">==<pos:position pos:line="27" pos:column="44"/></operator> <name><name pos:line="27" pos:column="45">string<pos:position pos:line="27" pos:column="51"/></name><index pos:line="27" pos:column="51">[<expr><name pos:line="27" pos:column="52">src_pos<pos:position pos:line="27" pos:column="59"/></name></expr>]<pos:position pos:line="27" pos:column="60"/></index></name> <operator pos:line="27" pos:column="61">||<pos:position pos:line="27" pos:column="63"/></operator>
        <literal type="number" pos:line="28" pos:column="9">0x2e<pos:position pos:line="28" pos:column="13"/></literal> <operator pos:line="28" pos:column="14">==<pos:position pos:line="28" pos:column="16"/></operator> <name><name pos:line="28" pos:column="17">string<pos:position pos:line="28" pos:column="23"/></name><index pos:line="28" pos:column="23">[<expr><name pos:line="28" pos:column="24">src_pos<pos:position pos:line="28" pos:column="31"/></name></expr>]<pos:position pos:line="28" pos:column="32"/></index></name> <operator pos:line="28" pos:column="33">||<pos:position pos:line="28" pos:column="35"/></operator> <literal type="number" pos:line="28" pos:column="36">0x5f<pos:position pos:line="28" pos:column="40"/></literal> <operator pos:line="28" pos:column="41">==<pos:position pos:line="28" pos:column="43"/></operator> <name><name pos:line="28" pos:column="44">string<pos:position pos:line="28" pos:column="50"/></name><index pos:line="28" pos:column="50">[<expr><name pos:line="28" pos:column="51">src_pos<pos:position pos:line="28" pos:column="58"/></name></expr>]<pos:position pos:line="28" pos:column="59"/></index></name></expr>)<pos:position pos:line="28" pos:column="60"/></condition><then pos:line="28" pos:column="60">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="7">BUFFER_ADD<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><call><name pos:line="29" pos:column="18">tolower<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name><name pos:line="29" pos:column="26">string<pos:position pos:line="29" pos:column="32"/></name><index pos:line="29" pos:column="32">[<expr><name pos:line="29" pos:column="33">src_pos<pos:position pos:line="29" pos:column="40"/></name></expr>]<pos:position pos:line="29" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt></block></then></if>
  }<pos:position pos:line="30" pos:column="4"/></block></for> <comment type="block" pos:line="30" pos:column="5">/* for */</comment>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">BUFFER_ADD<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><literal type="char" pos:line="31" pos:column="14">'"'<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">buffer<pos:position pos:line="32" pos:column="9"/></name><index pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">dst_pos<pos:position pos:line="32" pos:column="17"/></name></expr>]<pos:position pos:line="32" pos:column="18"/></index></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="21">0<pos:position pos:line="32" pos:column="22"/></literal></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>

<cpp:undef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">undef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">BUFFER_ADD<pos:position pos:line="34" pos:column="18"/></name></cpp:undef>

  <return pos:line="36" pos:column="3">return <expr><literal type="number" pos:line="36" pos:column="10">0<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
