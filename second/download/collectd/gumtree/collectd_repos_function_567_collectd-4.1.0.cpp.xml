<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_567_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_shutdown<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">DEBUG<pos:position pos:line="3" pos:column="14"/></name> <argument_list pos:line="3" pos:column="15">(<argument><expr><literal type="string" pos:line="3" pos:column="16">"Shutting down."<pos:position pos:line="3" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">listen_loop<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">++<pos:position pos:line="5" pos:column="22"/></operator></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">listen_thread<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">!=<pos:position pos:line="7" pos:column="29"/></operator> <operator pos:line="7" pos:column="30">(<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">pthread_t<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">)<pos:position pos:line="7" pos:column="41"/></operator> <literal type="number" pos:line="7" pos:column="42">0<pos:position pos:line="7" pos:column="43"/></literal></expr>)<pos:position pos:line="7" pos:column="44"/></condition><then pos:line="7" pos:column="44">
	<block pos:line="8" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">pthread_kill<pos:position pos:line="9" pos:column="29"/></name> <argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">listen_thread<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">SIGTERM<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">pthread_join<pos:position pos:line="10" pos:column="29"/></name> <argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">listen_thread<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">NULL<pos:position pos:line="10" pos:column="50"/></name></expr></argument> <comment type="block" pos:line="10" pos:column="51">/* no return value */</comment>)<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">listen_thread<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">=<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="33">(<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">pthread_t<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">)<pos:position pos:line="11" pos:column="44"/></operator> <literal type="number" pos:line="11" pos:column="45">0<pos:position pos:line="11" pos:column="46"/></literal></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">listen_thread<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">cache_tree<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">!=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">NULL<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">void<pos:position pos:line="18" pos:column="21"/></name> <modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type><name pos:line="18" pos:column="23">key<pos:position pos:line="18" pos:column="26"/></name></decl>;<pos:position pos:line="18" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">void<pos:position pos:line="19" pos:column="21"/></name> <modifier pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></modifier></type><name pos:line="19" pos:column="23">value<pos:position pos:line="19" pos:column="28"/></name></decl>;<pos:position pos:line="19" pos:column="29"/></decl_stmt>

		<while pos:line="21" pos:column="17">while <condition pos:line="21" pos:column="23">(<expr><call><name pos:line="21" pos:column="24">avl_pick<pos:position pos:line="21" pos:column="32"/></name> <argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">cache_tree<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">key<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="52">&amp;<pos:position pos:line="21" pos:column="57"/></operator><name pos:line="21" pos:column="53">value<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call> <operator pos:line="21" pos:column="60">==<pos:position pos:line="21" pos:column="62"/></operator> <literal type="number" pos:line="21" pos:column="63">0<pos:position pos:line="21" pos:column="64"/></literal></expr>)<pos:position pos:line="21" pos:column="65"/></condition>
		<block pos:line="22" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">sfree<pos:position pos:line="23" pos:column="30"/></name> <argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">key<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">sfree<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">value<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">avl_destroy<pos:position pos:line="26" pos:column="28"/></name> <argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">cache_tree<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">cache_tree<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">=<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="30">NULL<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="30" pos:column="9">/* TODO: Close `sending_sockets' */</comment>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">plugin_unregister_config<pos:position pos:line="32" pos:column="33"/></name> <argument_list pos:line="32" pos:column="34">(<argument><expr><literal type="string" pos:line="32" pos:column="35">"network"<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">plugin_unregister_init<pos:position pos:line="33" pos:column="31"/></name> <argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="string" pos:line="33" pos:column="33">"network"<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">plugin_unregister_write<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><literal type="string" pos:line="34" pos:column="34">"network"<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">plugin_unregister_shutdown<pos:position pos:line="35" pos:column="35"/></name> <argument_list pos:line="35" pos:column="36">(<argument><expr><literal type="string" pos:line="35" pos:column="37">"network"<pos:position pos:line="35" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>

	<return pos:line="37" pos:column="9">return <expr><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal><operator pos:line="37" pos:column="18">)<pos:position pos:line="37" pos:column="19"/></operator></expr>;<pos:position pos:line="37" pos:column="20"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
