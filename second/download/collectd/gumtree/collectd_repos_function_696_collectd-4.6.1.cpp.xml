<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_696_collectd-4.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_putnotif<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">FILE<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">fh<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buffer<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">command<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">notification_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">n<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">fh<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">==<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">NULL<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">)<pos:position pos:line="7" pos:column="19"/></operator> <operator pos:line="7" pos:column="20">||<pos:position pos:line="7" pos:column="22"/></operator> <operator pos:line="7" pos:column="23">(<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="24">buffer<pos:position pos:line="7" pos:column="30"/></name> <operator pos:line="7" pos:column="31">==<pos:position pos:line="7" pos:column="33"/></operator> <name pos:line="7" pos:column="34">NULL<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">)<pos:position pos:line="7" pos:column="39"/></operator></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><operator pos:line="8" pos:column="13">-<pos:position pos:line="8" pos:column="14"/></operator><literal type="number" pos:line="8" pos:column="14">1<pos:position pos:line="8" pos:column="15"/></literal><operator pos:line="8" pos:column="15">)<pos:position pos:line="8" pos:column="16"/></operator></expr>;<pos:position pos:line="8" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DEBUG<pos:position pos:line="10" pos:column="8"/></name> <argument_list pos:line="10" pos:column="9">(<argument><expr><literal type="string" pos:line="10" pos:column="10">"utils_cmd_putnotif: handle_putnotif (fh = %p, buffer = %s);"<pos:position pos:line="10" pos:column="71"/></literal></expr></argument>,
      <argument><expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">void<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">)<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">fh<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">buffer<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">command<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">status<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">parse_string<pos:position pos:line="14" pos:column="24"/></name> <argument_list pos:line="14" pos:column="25">(<argument><expr><operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="27">buffer<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="35">&amp;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="36">command<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">print_to_socket<pos:position pos:line="17" pos:column="20"/></name> <argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">fh<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"-1 Cannot parse command.\n"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><operator pos:line="18" pos:column="13">-<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal><operator pos:line="18" pos:column="15">)<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">assert<pos:position pos:line="20" pos:column="9"/></name> <argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">command<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">!=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><call><name pos:line="22" pos:column="7">strcasecmp<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><literal type="string" pos:line="22" pos:column="19">"PUTNOTIF"<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">command<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call> <operator pos:line="22" pos:column="40">!=<pos:position pos:line="22" pos:column="42"/></operator> <literal type="number" pos:line="22" pos:column="43">0<pos:position pos:line="22" pos:column="44"/></literal></expr>)<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45">
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">print_to_socket<pos:position pos:line="24" pos:column="20"/></name> <argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">fh<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="26">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="24" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="60">command<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">memset<pos:position pos:line="28" pos:column="9"/></name> <argument_list pos:line="28" pos:column="10">(<argument><expr><operator pos:line="28" pos:column="11">&amp;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="12">n<pos:position pos:line="28" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="15">'\0'<pos:position pos:line="28" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="21">sizeof <argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">n<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">status<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <literal type="number" pos:line="30" pos:column="12">0<pos:position pos:line="30" pos:column="13"/></literal></expr>;<pos:position pos:line="30" pos:column="14"/></expr_stmt>
  <while pos:line="31" pos:column="3">while <condition pos:line="31" pos:column="9">(<expr><operator pos:line="31" pos:column="10">*<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">buffer<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">!=<pos:position pos:line="31" pos:column="20"/></operator> <literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition>
  <block pos:line="32" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">char<pos:position pos:line="33" pos:column="9"/></name> <modifier pos:line="33" pos:column="10">*<pos:position pos:line="33" pos:column="11"/></modifier></type><name pos:line="33" pos:column="11">key<pos:position pos:line="33" pos:column="14"/></name></decl>;<pos:position pos:line="33" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name> <modifier pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></modifier></type><name pos:line="34" pos:column="11">value<pos:position pos:line="34" pos:column="16"/></name></decl>;<pos:position pos:line="34" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">status<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">parse_option<pos:position pos:line="36" pos:column="26"/></name> <argument_list pos:line="36" pos:column="27">(<argument><expr><operator pos:line="36" pos:column="28">&amp;<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="29">buffer<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="37">&amp;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="38">key<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="43">&amp;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="44">value<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">!=<pos:position pos:line="37" pos:column="18"/></operator> <literal type="number" pos:line="37" pos:column="19">0<pos:position pos:line="37" pos:column="20"/></literal></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">print_to_socket<pos:position pos:line="39" pos:column="22"/></name> <argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">fh<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="28">"-1 Malformed option.\n"<pos:position pos:line="39" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
      <break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="43" pos:column="5">status<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">set_option<pos:position pos:line="43" pos:column="24"/></name> <argument_list pos:line="43" pos:column="25">(<argument><expr><operator pos:line="43" pos:column="26">&amp;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="27">n<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">key<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">value<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">status<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">!=<pos:position pos:line="44" pos:column="18"/></operator> <literal type="number" pos:line="44" pos:column="19">0<pos:position pos:line="44" pos:column="20"/></literal></expr>)<pos:position pos:line="44" pos:column="21"/></condition><then pos:line="44" pos:column="21">
    <block pos:line="45" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">print_to_socket<pos:position pos:line="46" pos:column="22"/></name> <argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">fh<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="28">"-1 Error parsing option `%s'\n"<pos:position pos:line="46" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="62">key<pos:position pos:line="46" pos:column="65"/></name></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="67"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block></while> <comment type="block" pos:line="49" pos:column="5">/* for (i) */</comment>

  <comment type="block" pos:line="51" pos:column="3">/* Check for required fields and complain if anything is missing. */</comment>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><operator pos:line="52" pos:column="7">(<pos:position pos:line="52" pos:column="8"/></operator><name pos:line="52" pos:column="8">status<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">==<pos:position pos:line="52" pos:column="17"/></operator> <literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal><operator pos:line="52" pos:column="19">)<pos:position pos:line="52" pos:column="20"/></operator> <operator pos:line="52" pos:column="21">&amp;&amp;<pos:position pos:line="52" pos:column="31"/></operator> <operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><name><name pos:line="52" pos:column="25">n<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">severity<pos:position pos:line="52" pos:column="35"/></name></name> <operator pos:line="52" pos:column="36">==<pos:position pos:line="52" pos:column="38"/></operator> <literal type="number" pos:line="52" pos:column="39">0<pos:position pos:line="52" pos:column="40"/></literal><operator pos:line="52" pos:column="40">)<pos:position pos:line="52" pos:column="41"/></operator></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42">
  <block pos:line="53" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">print_to_socket<pos:position pos:line="54" pos:column="20"/></name> <argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">fh<pos:position pos:line="54" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="26">"-1 Option `severity' missing.\n"<pos:position pos:line="54" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">status<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <operator pos:line="55" pos:column="14">-<pos:position pos:line="55" pos:column="15"/></operator><literal type="number" pos:line="55" pos:column="15">1<pos:position pos:line="55" pos:column="16"/></literal></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><operator pos:line="57" pos:column="7">(<pos:position pos:line="57" pos:column="8"/></operator><name pos:line="57" pos:column="8">status<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">==<pos:position pos:line="57" pos:column="17"/></operator> <literal type="number" pos:line="57" pos:column="18">0<pos:position pos:line="57" pos:column="19"/></literal><operator pos:line="57" pos:column="19">)<pos:position pos:line="57" pos:column="20"/></operator> <operator pos:line="57" pos:column="21">&amp;&amp;<pos:position pos:line="57" pos:column="31"/></operator> <operator pos:line="57" pos:column="24">(<pos:position pos:line="57" pos:column="25"/></operator><name><name pos:line="57" pos:column="25">n<pos:position pos:line="57" pos:column="26"/></name><operator pos:line="57" pos:column="26">.<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="27">time<pos:position pos:line="57" pos:column="31"/></name></name> <operator pos:line="57" pos:column="32">==<pos:position pos:line="57" pos:column="34"/></operator> <literal type="number" pos:line="57" pos:column="35">0<pos:position pos:line="57" pos:column="36"/></literal><operator pos:line="57" pos:column="36">)<pos:position pos:line="57" pos:column="37"/></operator></expr>)<pos:position pos:line="57" pos:column="38"/></condition><then pos:line="57" pos:column="38">
  <block pos:line="58" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">print_to_socket<pos:position pos:line="59" pos:column="20"/></name> <argument_list pos:line="59" pos:column="21">(<argument><expr><name pos:line="59" pos:column="22">fh<pos:position pos:line="59" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="26">"-1 Option `time' missing.\n"<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">status<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <operator pos:line="60" pos:column="14">-<pos:position pos:line="60" pos:column="15"/></operator><literal type="number" pos:line="60" pos:column="15">1<pos:position pos:line="60" pos:column="16"/></literal></expr>;<pos:position pos:line="60" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><operator pos:line="62" pos:column="7">(<pos:position pos:line="62" pos:column="8"/></operator><name pos:line="62" pos:column="8">status<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">==<pos:position pos:line="62" pos:column="17"/></operator> <literal type="number" pos:line="62" pos:column="18">0<pos:position pos:line="62" pos:column="19"/></literal><operator pos:line="62" pos:column="19">)<pos:position pos:line="62" pos:column="20"/></operator> <operator pos:line="62" pos:column="21">&amp;&amp;<pos:position pos:line="62" pos:column="31"/></operator> <operator pos:line="62" pos:column="24">(<pos:position pos:line="62" pos:column="25"/></operator><call><name pos:line="62" pos:column="25">strlen<pos:position pos:line="62" pos:column="31"/></name> <argument_list pos:line="62" pos:column="32">(<argument><expr><name><name pos:line="62" pos:column="33">n<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">.<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="35">message<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call> <operator pos:line="62" pos:column="44">==<pos:position pos:line="62" pos:column="46"/></operator> <literal type="number" pos:line="62" pos:column="47">0<pos:position pos:line="62" pos:column="48"/></literal><operator pos:line="62" pos:column="48">)<pos:position pos:line="62" pos:column="49"/></operator></expr>)<pos:position pos:line="62" pos:column="50"/></condition><then pos:line="62" pos:column="50">
  <block pos:line="63" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">print_to_socket<pos:position pos:line="64" pos:column="20"/></name> <argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">fh<pos:position pos:line="64" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="26">"-1 No message or message of length 0 given.\n"<pos:position pos:line="64" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">status<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <operator pos:line="65" pos:column="14">-<pos:position pos:line="65" pos:column="15"/></operator><literal type="number" pos:line="65" pos:column="15">1<pos:position pos:line="65" pos:column="16"/></literal></expr>;<pos:position pos:line="65" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="68" pos:column="3">/* If status is still zero the notification is fine and we can finally
   * dispatch it. */</comment>
  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><name pos:line="70" pos:column="7">status<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">==<pos:position pos:line="70" pos:column="16"/></operator> <literal type="number" pos:line="70" pos:column="17">0<pos:position pos:line="70" pos:column="18"/></literal></expr>)<pos:position pos:line="70" pos:column="19"/></condition><then pos:line="70" pos:column="19">
  <block pos:line="71" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">plugin_dispatch_notification<pos:position pos:line="72" pos:column="33"/></name> <argument_list pos:line="72" pos:column="34">(<argument><expr><operator pos:line="72" pos:column="35">&amp;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="36">n<pos:position pos:line="72" pos:column="37"/></name></expr></argument>)<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">print_to_socket<pos:position pos:line="73" pos:column="20"/></name> <argument_list pos:line="73" pos:column="21">(<argument><expr><name pos:line="73" pos:column="22">fh<pos:position pos:line="73" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="26">"0 Success\n"<pos:position pos:line="73" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <return pos:line="76" pos:column="3">return <expr><operator pos:line="76" pos:column="10">(<pos:position pos:line="76" pos:column="11"/></operator><literal type="number" pos:line="76" pos:column="11">0<pos:position pos:line="76" pos:column="12"/></literal><operator pos:line="76" pos:column="12">)<pos:position pos:line="76" pos:column="13"/></operator></expr>;<pos:position pos:line="76" pos:column="14"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
