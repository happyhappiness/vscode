<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_544_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">MPL3115_init_sensor<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">__s32<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">res<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">__s8<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">offset<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">errbuf<pos:position pos:line="5" pos:column="16"/></name><index pos:line="5" pos:column="16">[<expr><literal type="number" pos:line="5" pos:column="17">1024<pos:position pos:line="5" pos:column="21"/></literal></expr>]<pos:position pos:line="5" pos:column="22"/></index></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* Reset the sensor. It will reset immediately without ACKing */</comment>
    <comment type="block" pos:line="8" pos:column="5">/* the transaction, so no error handling here. */</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">i2c_smbus_write_byte_data<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">i2c_bus_fd<pos:position pos:line="9" pos:column="41"/></name></expr></argument>,
                              <argument><expr><name pos:line="10" pos:column="31">MPL3115_REG_CTRL_REG1<pos:position pos:line="10" pos:column="52"/></name></expr></argument>,
                              <argument><expr><name pos:line="11" pos:column="31">MPL3115_CTRL_REG1_RST<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* wait some time for the reset to finish */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">usleep<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">100000<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* now it should be in standby already so we can go and configure it */</comment>

    <comment type="block" pos:line="18" pos:column="5">/*  Set temperature offset. */</comment>
    <comment type="block" pos:line="19" pos:column="5">/*  result = ADCtemp + offset [C] */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">offset<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call pos:line="20" pos:column="14">(<name pos:line="20" pos:column="15">__s8<pos:position pos:line="20" pos:column="19"/></name>) <argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">config_temp_offset<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></operator> <literal type="number" pos:line="20" pos:column="43">16.0<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">res<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">i2c_smbus_write_byte_data<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">i2c_bus_fd<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">MPL3115_REG_OFF_T<pos:position pos:line="21" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="68">offset<pos:position pos:line="21" pos:column="74"/></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">res<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&lt;<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="15">0<pos:position pos:line="22" pos:column="16"/></literal></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17">
    <block pos:line="23" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">ERROR<pos:position pos:line="24" pos:column="14"/></name> <argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="string" pos:line="24" pos:column="16">"barometer: MPL3115_init_sensor - problem setting temp offset: %s"<pos:position pos:line="24" pos:column="82"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="25" pos:column="16">sstrerror<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">errno<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">errbuf<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="42">sizeof <argument_list pos:line="25" pos:column="49">(<argument><expr><name pos:line="25" pos:column="50">errbuf<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">-<pos:position pos:line="26" pos:column="17"/></operator><literal type="number" pos:line="26" pos:column="17">1<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/*  Set pressure offset. */</comment>
    <comment type="block" pos:line="30" pos:column="5">/*  result = ADCpress + offset [hPa] */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">offset<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call pos:line="31" pos:column="14">(<name pos:line="31" pos:column="15">__s8<pos:position pos:line="31" pos:column="19"/></name>) <argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">config_press_offset<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">*<pos:position pos:line="31" pos:column="43"/></operator> <literal type="number" pos:line="31" pos:column="44">100.0<pos:position pos:line="31" pos:column="49"/></literal> <operator pos:line="31" pos:column="50">/<pos:position pos:line="31" pos:column="51"/></operator> <literal type="number" pos:line="31" pos:column="52">4.0<pos:position pos:line="31" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">res<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">i2c_smbus_write_byte_data<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">i2c_bus_fd<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">MPL3115_REG_OFF_P<pos:position pos:line="32" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="68">offset<pos:position pos:line="32" pos:column="74"/></name></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="76"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">res<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">&lt;<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17">
    <block pos:line="34" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">ERROR<pos:position pos:line="35" pos:column="14"/></name> <argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="string" pos:line="35" pos:column="16">"barometer: MPL3115_init_sensor - problem setting pressure offset: %s"<pos:position pos:line="35" pos:column="86"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="36" pos:column="16">sstrerror<pos:position pos:line="36" pos:column="25"/></name> <argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">errno<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">errbuf<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="42">sizeof <argument_list pos:line="36" pos:column="49">(<argument><expr><name pos:line="36" pos:column="50">errbuf<pos:position pos:line="36" pos:column="56"/></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><operator pos:line="37" pos:column="16">-<pos:position pos:line="37" pos:column="17"/></operator><literal type="number" pos:line="37" pos:column="17">1<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/* Enable Data Flags in PT_DATA_CFG - flags on both pressure and temp */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">res<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <call><name pos:line="41" pos:column="11">i2c_smbus_write_byte_data<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">i2c_bus_fd<pos:position pos:line="41" pos:column="47"/></name></expr></argument>,
                                    <argument><expr><name pos:line="42" pos:column="37">MPL3115_REG_PT_DATA_CFG<pos:position pos:line="42" pos:column="60"/></name></expr></argument>,
                                    <argument><expr><name pos:line="43" pos:column="37">MPL3115_PT_DATA_DREM<pos:position pos:line="43" pos:column="57"/></name>        \
                                    <operator pos:line="44" pos:column="37">|<pos:position pos:line="44" pos:column="38"/></operator> <name pos:line="44" pos:column="39">MPL3115_PT_DATA_PDEF<pos:position pos:line="44" pos:column="59"/></name>      \
                                    <operator pos:line="45" pos:column="37">|<pos:position pos:line="45" pos:column="38"/></operator> <name pos:line="45" pos:column="39">MPL3115_PT_DATA_TDEF<pos:position pos:line="45" pos:column="59"/></name></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="61"/></expr_stmt>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">res<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">&lt;<pos:position pos:line="46" pos:column="17"/></operator> <literal type="number" pos:line="46" pos:column="15">0<pos:position pos:line="46" pos:column="16"/></literal></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17">
    <block pos:line="47" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">ERROR<pos:position pos:line="48" pos:column="14"/></name> <argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="string" pos:line="48" pos:column="16">"barometer: MPL3115_init_sensor - problem setting PT_DATA_CFG: %s"<pos:position pos:line="48" pos:column="82"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="49" pos:column="16">sstrerror<pos:position pos:line="49" pos:column="25"/></name> <argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">errno<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">errbuf<pos:position pos:line="49" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="42">sizeof <argument_list pos:line="49" pos:column="49">(<argument><expr><name pos:line="49" pos:column="50">errbuf<pos:position pos:line="49" pos:column="56"/></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="60"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><operator pos:line="50" pos:column="16">-<pos:position pos:line="50" pos:column="17"/></operator><literal type="number" pos:line="50" pos:column="17">1<pos:position pos:line="50" pos:column="18"/></literal></expr>;<pos:position pos:line="50" pos:column="19"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="53" pos:column="5">/* Set to barometer with an OSR */</comment>
    <expr_stmt><expr><name pos:line="54" pos:column="5">res<pos:position pos:line="54" pos:column="8"/></name> <operator pos:line="54" pos:column="9">=<pos:position pos:line="54" pos:column="10"/></operator> <call><name pos:line="54" pos:column="11">i2c_smbus_write_byte_data<pos:position pos:line="54" pos:column="36"/></name><argument_list pos:line="54" pos:column="36">(<argument><expr><name pos:line="54" pos:column="37">i2c_bus_fd<pos:position pos:line="54" pos:column="47"/></name></expr></argument>,
                                    <argument><expr><name pos:line="55" pos:column="37">MPL3115_REG_CTRL_REG1<pos:position pos:line="55" pos:column="58"/></name></expr></argument>,
                                    <argument><expr><name pos:line="56" pos:column="37">mpl3115_oversample<pos:position pos:line="56" pos:column="55"/></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">res<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">&lt;<pos:position pos:line="57" pos:column="17"/></operator> <literal type="number" pos:line="57" pos:column="15">0<pos:position pos:line="57" pos:column="16"/></literal></expr>)<pos:position pos:line="57" pos:column="17"/></condition><then pos:line="57" pos:column="17">
    <block pos:line="58" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">ERROR<pos:position pos:line="59" pos:column="14"/></name> <argument_list pos:line="59" pos:column="15">(<argument><expr><literal type="string" pos:line="59" pos:column="16">"barometer: MPL3115_init_sensor - problem configuring CTRL_REG1: %s"<pos:position pos:line="59" pos:column="84"/></literal></expr></argument>,
               <argument><expr><call><name pos:line="60" pos:column="16">sstrerror<pos:position pos:line="60" pos:column="25"/></name> <argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">errno<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">errbuf<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="42">sizeof <argument_list pos:line="60" pos:column="49">(<argument><expr><name pos:line="60" pos:column="50">errbuf<pos:position pos:line="60" pos:column="56"/></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="60"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">-<pos:position pos:line="61" pos:column="17"/></operator><literal type="number" pos:line="61" pos:column="17">1<pos:position pos:line="61" pos:column="18"/></literal></expr>;<pos:position pos:line="61" pos:column="19"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <return pos:line="64" pos:column="5">return <expr><literal type="number" pos:line="64" pos:column="12">0<pos:position pos:line="64" pos:column="13"/></literal></expr>;<pos:position pos:line="64" pos:column="14"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
