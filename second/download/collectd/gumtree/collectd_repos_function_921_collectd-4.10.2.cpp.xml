<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_921_collectd-4.10.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">tss2_get_socket<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">FILE<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier><modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">ret_read_fh<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">FILE<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">ret_write_fh<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * Returns connected file objects or establishes the connection
	 * if it's not already present
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">addrinfo<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">ai_hints<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">addrinfo<pos:position pos:line="8" pos:column="24"/></name></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">ai_head<pos:position pos:line="8" pos:column="33"/></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">addrinfo<pos:position pos:line="9" pos:column="24"/></name></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">ai_ptr<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">sd<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><operator pos:line="10" pos:column="18">-<pos:position pos:line="10" pos:column="19"/></operator><literal type="number" pos:line="10" pos:column="19">1<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">status<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* Check if we already got opened connections */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">global_read_fh<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">!=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">NULL<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">)<pos:position pos:line="14" pos:column="37"/></operator> <operator pos:line="14" pos:column="38">&amp;&amp;<pos:position pos:line="14" pos:column="48"/></operator> <operator pos:line="14" pos:column="41">(<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">global_write_fh<pos:position pos:line="14" pos:column="57"/></name> <operator pos:line="14" pos:column="58">!=<pos:position pos:line="14" pos:column="60"/></operator> <name pos:line="14" pos:column="61">NULL<pos:position pos:line="14" pos:column="65"/></name><operator pos:line="14" pos:column="65">)<pos:position pos:line="14" pos:column="66"/></operator></expr>)<pos:position pos:line="14" pos:column="67"/></condition><then pos:line="14" pos:column="67">
	<block pos:line="15" pos:column="9">{
		<comment type="block" pos:line="16" pos:column="17">/* If so, use them */</comment>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">ret_read_fh<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">!=<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="36">NULL<pos:position pos:line="17" pos:column="40"/></name></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">ret_read_fh<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">=<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">global_read_fh<pos:position pos:line="18" pos:column="54"/></name></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">ret_write_fh<pos:position pos:line="19" pos:column="33"/></name> <operator pos:line="19" pos:column="34">!=<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="37">NULL<pos:position pos:line="19" pos:column="41"/></name></expr>)<pos:position pos:line="19" pos:column="42"/></condition><then pos:line="19" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">ret_write_fh<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">=<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="41">global_write_fh<pos:position pos:line="20" pos:column="56"/></name></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt></block></then></if>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><literal type="number" pos:line="21" pos:column="25">0<pos:position pos:line="21" pos:column="26"/></literal><operator pos:line="21" pos:column="26">)<pos:position pos:line="21" pos:column="27"/></operator></expr>;<pos:position pos:line="21" pos:column="28"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="24" pos:column="9">/* Get all addrs for this hostname */</comment>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">memset<pos:position pos:line="25" pos:column="15"/></name> <argument_list pos:line="25" pos:column="16">(<argument><expr><operator pos:line="25" pos:column="17">&amp;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="18">ai_hints<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="28">0<pos:position pos:line="25" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="31">sizeof <argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">ai_hints<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="26" pos:column="21"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">ai_hints<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">.<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">ai_flags<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">|=<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="30">AI_ADDRCONFIG<pos:position pos:line="27" pos:column="43"/></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">ai_hints<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">.<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">ai_family<pos:position pos:line="29" pos:column="27"/></name></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">AF_UNSPEC<pos:position pos:line="29" pos:column="39"/></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">ai_hints<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">.<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">ai_socktype<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">SOCK_STREAM<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="32" pos:column="9">status<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">getaddrinfo<pos:position pos:line="32" pos:column="29"/></name> <argument_list pos:line="32" pos:column="30">(<argument><expr><ternary><condition><expr><operator pos:line="32" pos:column="31">(<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="32">config_host<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">!=<pos:position pos:line="32" pos:column="46"/></operator> <name pos:line="32" pos:column="47">NULL<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">)<pos:position pos:line="32" pos:column="52"/></operator></expr> ?<pos:position pos:line="32" pos:column="54"/></condition><then pos:line="32" pos:column="54"> <expr><name pos:line="32" pos:column="55">config_host<pos:position pos:line="32" pos:column="66"/></name></expr> <pos:position pos:line="32" pos:column="67"/></then><else pos:line="32" pos:column="67">: <expr><name pos:line="32" pos:column="69">DEFAULT_HOST<pos:position pos:line="32" pos:column="81"/></name></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator pos:line="33" pos:column="25">(<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">config_port<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">!=<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="41">NULL<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator></expr> ?<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <expr><name pos:line="33" pos:column="49">config_port<pos:position pos:line="33" pos:column="60"/></name></expr> <pos:position pos:line="33" pos:column="61"/></then><else pos:line="33" pos:column="61">: <expr><name pos:line="33" pos:column="63">DEFAULT_PORT<pos:position pos:line="33" pos:column="75"/></name></expr></else></ternary></expr></argument>,
			<argument><expr><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="26">ai_hints<pos:position pos:line="34" pos:column="34"/></name></expr></argument>,
			<argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="26">ai_head<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">status<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">!=<pos:position pos:line="36" pos:column="22"/></operator> <literal type="number" pos:line="36" pos:column="23">0<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25">
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">ERROR<pos:position pos:line="38" pos:column="22"/></name> <argument_list pos:line="38" pos:column="23">(<argument><expr><literal type="string" pos:line="38" pos:column="24">"teamspeak2 plugin: getaddrinfo failed: %s"<pos:position pos:line="38" pos:column="67"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="39" pos:column="33">gai_strerror<pos:position pos:line="39" pos:column="45"/></name> <argument_list pos:line="39" pos:column="46">(<argument><expr><name pos:line="39" pos:column="47">status<pos:position pos:line="39" pos:column="53"/></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator><operator pos:line="40" pos:column="25">-<pos:position pos:line="40" pos:column="26"/></operator><literal type="number" pos:line="40" pos:column="26">1<pos:position pos:line="40" pos:column="27"/></literal><operator pos:line="40" pos:column="27">)<pos:position pos:line="40" pos:column="28"/></operator></expr>;<pos:position pos:line="40" pos:column="29"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* Try all given hosts until we can connect to one */</comment>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">ai_ptr<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">ai_head<pos:position pos:line="44" pos:column="30"/></name></expr>;<pos:position pos:line="44" pos:column="31"/></init> <condition><expr><name pos:line="44" pos:column="32">ai_ptr<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">!=<pos:position pos:line="44" pos:column="41"/></operator> <name pos:line="44" pos:column="42">NULL<pos:position pos:line="44" pos:column="46"/></name></expr>;<pos:position pos:line="44" pos:column="47"/></condition> <incr><expr><name pos:line="44" pos:column="48">ai_ptr<pos:position pos:line="44" pos:column="54"/></name> <operator pos:line="44" pos:column="55">=<pos:position pos:line="44" pos:column="56"/></operator> <name><name pos:line="44" pos:column="57">ai_ptr<pos:position pos:line="44" pos:column="63"/></name><operator pos:line="44" pos:column="63">-&gt;<pos:position pos:line="44" pos:column="68"/></operator><name pos:line="44" pos:column="65">ai_next<pos:position pos:line="44" pos:column="72"/></name></name></expr></incr>)<pos:position pos:line="44" pos:column="73"/></control>
	<block pos:line="45" pos:column="9">{
		<comment type="block" pos:line="46" pos:column="17">/* Create socket */</comment>
		<expr_stmt><expr><name pos:line="47" pos:column="17">sd<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <call><name pos:line="47" pos:column="22">socket<pos:position pos:line="47" pos:column="28"/></name> <argument_list pos:line="47" pos:column="29">(<argument><expr><name><name pos:line="47" pos:column="30">ai_ptr<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">ai_family<pos:position pos:line="47" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="49">ai_ptr<pos:position pos:line="47" pos:column="55"/></name><operator pos:line="47" pos:column="55">-&gt;<pos:position pos:line="47" pos:column="60"/></operator><name pos:line="47" pos:column="57">ai_socktype<pos:position pos:line="47" pos:column="68"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="48" pos:column="33">ai_ptr<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">-&gt;<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="41">ai_protocol<pos:position pos:line="48" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">sd<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">&lt;<pos:position pos:line="49" pos:column="28"/></operator> <literal type="number" pos:line="49" pos:column="26">0<pos:position pos:line="49" pos:column="27"/></literal></expr>)<pos:position pos:line="49" pos:column="28"/></condition><then pos:line="49" pos:column="28">
		<block pos:line="50" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">char<pos:position pos:line="51" pos:column="29"/></name></type> <name><name pos:line="51" pos:column="30">errbuf<pos:position pos:line="51" pos:column="36"/></name><index pos:line="51" pos:column="36">[<expr><literal type="number" pos:line="51" pos:column="37">1024<pos:position pos:line="51" pos:column="41"/></literal></expr>]<pos:position pos:line="51" pos:column="42"/></index></name></decl>;<pos:position pos:line="51" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">WARNING<pos:position pos:line="52" pos:column="32"/></name> <argument_list pos:line="52" pos:column="33">(<argument><expr><literal type="string" pos:line="52" pos:column="34">"teamspeak2 plugin: socket failed: %s"<pos:position pos:line="52" pos:column="72"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="53" pos:column="41">sstrerror<pos:position pos:line="53" pos:column="50"/></name> <argument_list pos:line="53" pos:column="51">(<argument><expr><name pos:line="53" pos:column="52">errno<pos:position pos:line="53" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="59">errbuf<pos:position pos:line="53" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="67">sizeof <argument_list pos:line="53" pos:column="74">(<argument><expr><name pos:line="53" pos:column="75">errbuf<pos:position pos:line="53" pos:column="81"/></name></expr></argument>)<pos:position pos:line="53" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="85"/></expr_stmt>
			<continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="57" pos:column="17">/* Try to connect */</comment>
		<expr_stmt><expr><name pos:line="58" pos:column="17">status<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <call><name pos:line="58" pos:column="26">connect<pos:position pos:line="58" pos:column="33"/></name> <argument_list pos:line="58" pos:column="34">(<argument><expr><name pos:line="58" pos:column="35">sd<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="39">ai_ptr<pos:position pos:line="58" pos:column="45"/></name><operator pos:line="58" pos:column="45">-&gt;<pos:position pos:line="58" pos:column="50"/></operator><name pos:line="58" pos:column="47">ai_addr<pos:position pos:line="58" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="56">ai_ptr<pos:position pos:line="58" pos:column="62"/></name><operator pos:line="58" pos:column="62">-&gt;<pos:position pos:line="58" pos:column="67"/></operator><name pos:line="58" pos:column="64">ai_addrlen<pos:position pos:line="58" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="76"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">status<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">!=<pos:position pos:line="59" pos:column="30"/></operator> <literal type="number" pos:line="59" pos:column="31">0<pos:position pos:line="59" pos:column="32"/></literal></expr>)<pos:position pos:line="59" pos:column="33"/></condition><then pos:line="59" pos:column="33">
		<block pos:line="60" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="61" pos:column="25">char<pos:position pos:line="61" pos:column="29"/></name></type> <name><name pos:line="61" pos:column="30">errbuf<pos:position pos:line="61" pos:column="36"/></name><index pos:line="61" pos:column="36">[<expr><literal type="number" pos:line="61" pos:column="37">1024<pos:position pos:line="61" pos:column="41"/></literal></expr>]<pos:position pos:line="61" pos:column="42"/></index></name></decl>;<pos:position pos:line="61" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">WARNING<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><literal type="string" pos:line="62" pos:column="34">"teamspeak2 plugin: connect failed: %s"<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="63" pos:column="41">sstrerror<pos:position pos:line="63" pos:column="50"/></name> <argument_list pos:line="63" pos:column="51">(<argument><expr><name pos:line="63" pos:column="52">errno<pos:position pos:line="63" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="59">errbuf<pos:position pos:line="63" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="67">sizeof <argument_list pos:line="63" pos:column="74">(<argument><expr><name pos:line="63" pos:column="75">errbuf<pos:position pos:line="63" pos:column="81"/></name></expr></argument>)<pos:position pos:line="63" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">close<pos:position pos:line="64" pos:column="30"/></name> <argument_list pos:line="64" pos:column="31">(<argument><expr><name pos:line="64" pos:column="32">sd<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt>
			<continue pos:line="65" pos:column="25">continue;<pos:position pos:line="65" pos:column="34"/></continue>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="68" pos:column="17">/*
		 * Success, we can break. Don't need more than one connection
		 */</comment>
		<break pos:line="71" pos:column="17">break;<pos:position pos:line="71" pos:column="23"/></break>
	}<pos:position pos:line="72" pos:column="10"/></block></for> <comment type="block" pos:line="72" pos:column="11">/* for (ai_ptr) */</comment>

	<expr_stmt><expr><call><name pos:line="74" pos:column="9">freeaddrinfo<pos:position pos:line="74" pos:column="21"/></name> <argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">ai_head<pos:position pos:line="74" pos:column="30"/></name></expr></argument>)<pos:position pos:line="74" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="76" pos:column="9">/* Check if we really got connected */</comment>
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">sd<pos:position pos:line="77" pos:column="15"/></name> <operator pos:line="77" pos:column="16">&lt;<pos:position pos:line="77" pos:column="20"/></operator> <literal type="number" pos:line="77" pos:column="18">0<pos:position pos:line="77" pos:column="19"/></literal></expr>)<pos:position pos:line="77" pos:column="20"/></condition><then pos:line="77" pos:column="20">
		<block type="pseudo"><return pos:line="78" pos:column="17">return <expr><operator pos:line="78" pos:column="24">(<pos:position pos:line="78" pos:column="25"/></operator><operator pos:line="78" pos:column="25">-<pos:position pos:line="78" pos:column="26"/></operator><literal type="number" pos:line="78" pos:column="26">1<pos:position pos:line="78" pos:column="27"/></literal><operator pos:line="78" pos:column="27">)<pos:position pos:line="78" pos:column="28"/></operator></expr>;<pos:position pos:line="78" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="80" pos:column="9">/* Create file objects from sockets */</comment>
	<expr_stmt><expr><name pos:line="81" pos:column="9">global_read_fh<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">=<pos:position pos:line="81" pos:column="25"/></operator> <call><name pos:line="81" pos:column="26">fdopen<pos:position pos:line="81" pos:column="32"/></name> <argument_list pos:line="81" pos:column="33">(<argument><expr><name pos:line="81" pos:column="34">sd<pos:position pos:line="81" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="38">"r"<pos:position pos:line="81" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="43"/></expr_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">global_read_fh<pos:position pos:line="82" pos:column="27"/></name> <operator pos:line="82" pos:column="28">==<pos:position pos:line="82" pos:column="30"/></operator> <name pos:line="82" pos:column="31">NULL<pos:position pos:line="82" pos:column="35"/></name></expr>)<pos:position pos:line="82" pos:column="36"/></condition><then pos:line="82" pos:column="36">
	<block pos:line="83" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">char<pos:position pos:line="84" pos:column="21"/></name></type> <name><name pos:line="84" pos:column="22">errbuf<pos:position pos:line="84" pos:column="28"/></name><index pos:line="84" pos:column="28">[<expr><literal type="number" pos:line="84" pos:column="29">1024<pos:position pos:line="84" pos:column="33"/></literal></expr>]<pos:position pos:line="84" pos:column="34"/></index></name></decl>;<pos:position pos:line="84" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">ERROR<pos:position pos:line="85" pos:column="22"/></name> <argument_list pos:line="85" pos:column="23">(<argument><expr><literal type="string" pos:line="85" pos:column="24">"teamspeak2 plugin: fdopen failed: %s"<pos:position pos:line="85" pos:column="62"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="86" pos:column="33">sstrerror<pos:position pos:line="86" pos:column="42"/></name> <argument_list pos:line="86" pos:column="43">(<argument><expr><name pos:line="86" pos:column="44">errno<pos:position pos:line="86" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="51">errbuf<pos:position pos:line="86" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="59">sizeof <argument_list pos:line="86" pos:column="66">(<argument><expr><name pos:line="86" pos:column="67">errbuf<pos:position pos:line="86" pos:column="73"/></name></expr></argument>)<pos:position pos:line="86" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="86" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">close<pos:position pos:line="87" pos:column="22"/></name> <argument_list pos:line="87" pos:column="23">(<argument><expr><name pos:line="87" pos:column="24">sd<pos:position pos:line="87" pos:column="26"/></name></expr></argument>)<pos:position pos:line="87" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="28"/></expr_stmt>
		<return pos:line="88" pos:column="17">return <expr><operator pos:line="88" pos:column="24">(<pos:position pos:line="88" pos:column="25"/></operator><operator pos:line="88" pos:column="25">-<pos:position pos:line="88" pos:column="26"/></operator><literal type="number" pos:line="88" pos:column="26">1<pos:position pos:line="88" pos:column="27"/></literal><operator pos:line="88" pos:column="27">)<pos:position pos:line="88" pos:column="28"/></operator></expr>;<pos:position pos:line="88" pos:column="29"/></return>
	}<pos:position pos:line="89" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="91" pos:column="9">global_write_fh<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">=<pos:position pos:line="91" pos:column="26"/></operator> <call><name pos:line="91" pos:column="27">fdopen<pos:position pos:line="91" pos:column="33"/></name> <argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">sd<pos:position pos:line="91" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="39">"w"<pos:position pos:line="91" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="44"/></expr_stmt>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">global_write_fh<pos:position pos:line="92" pos:column="28"/></name> <operator pos:line="92" pos:column="29">==<pos:position pos:line="92" pos:column="31"/></operator> <name pos:line="92" pos:column="32">NULL<pos:position pos:line="92" pos:column="36"/></name></expr>)<pos:position pos:line="92" pos:column="37"/></condition><then pos:line="92" pos:column="37">
	<block pos:line="93" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">char<pos:position pos:line="94" pos:column="21"/></name></type> <name><name pos:line="94" pos:column="22">errbuf<pos:position pos:line="94" pos:column="28"/></name><index pos:line="94" pos:column="28">[<expr><literal type="number" pos:line="94" pos:column="29">1024<pos:position pos:line="94" pos:column="33"/></literal></expr>]<pos:position pos:line="94" pos:column="34"/></index></name></decl>;<pos:position pos:line="94" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">ERROR<pos:position pos:line="95" pos:column="22"/></name> <argument_list pos:line="95" pos:column="23">(<argument><expr><literal type="string" pos:line="95" pos:column="24">"teamspeak2 plugin: fdopen failed: %s"<pos:position pos:line="95" pos:column="62"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="96" pos:column="33">sstrerror<pos:position pos:line="96" pos:column="42"/></name> <argument_list pos:line="96" pos:column="43">(<argument><expr><name pos:line="96" pos:column="44">errno<pos:position pos:line="96" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="51">errbuf<pos:position pos:line="96" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="59">sizeof <argument_list pos:line="96" pos:column="66">(<argument><expr><name pos:line="96" pos:column="67">errbuf<pos:position pos:line="96" pos:column="73"/></name></expr></argument>)<pos:position pos:line="96" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="96" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">tss2_close_socket<pos:position pos:line="97" pos:column="34"/></name> <argument_list pos:line="97" pos:column="35">()<pos:position pos:line="97" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="38"/></expr_stmt>
		<return pos:line="98" pos:column="17">return <expr><operator pos:line="98" pos:column="24">(<pos:position pos:line="98" pos:column="25"/></operator><operator pos:line="98" pos:column="25">-<pos:position pos:line="98" pos:column="26"/></operator><literal type="number" pos:line="98" pos:column="26">1<pos:position pos:line="98" pos:column="27"/></literal><operator pos:line="98" pos:column="27">)<pos:position pos:line="98" pos:column="28"/></operator></expr>;<pos:position pos:line="98" pos:column="29"/></return>
	}<pos:position pos:line="99" pos:column="10"/></block></then></if>

	<block pos:line="101" pos:column="9">{ <comment type="block" pos:line="101" pos:column="11">/* Check that the server correctly identifies itself. */</comment>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">char<pos:position pos:line="102" pos:column="21"/></name></type> <name><name pos:line="102" pos:column="22">buffer<pos:position pos:line="102" pos:column="28"/></name><index pos:line="102" pos:column="28">[<expr><literal type="number" pos:line="102" pos:column="29">4096<pos:position pos:line="102" pos:column="33"/></literal></expr>]<pos:position pos:line="102" pos:column="34"/></index></name></decl>;<pos:position pos:line="102" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">char<pos:position pos:line="103" pos:column="21"/></name> <modifier pos:line="103" pos:column="22">*<pos:position pos:line="103" pos:column="23"/></modifier></type><name pos:line="103" pos:column="23">buffer_ptr<pos:position pos:line="103" pos:column="33"/></name></decl>;<pos:position pos:line="103" pos:column="34"/></decl_stmt>

		<expr_stmt><expr><name pos:line="105" pos:column="17">buffer_ptr<pos:position pos:line="105" pos:column="27"/></name> <operator pos:line="105" pos:column="28">=<pos:position pos:line="105" pos:column="29"/></operator> <call><name pos:line="105" pos:column="30">fgets<pos:position pos:line="105" pos:column="35"/></name> <argument_list pos:line="105" pos:column="36">(<argument><expr><name pos:line="105" pos:column="37">buffer<pos:position pos:line="105" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="105" pos:column="45">sizeof <argument_list pos:line="105" pos:column="52">(<argument><expr><name pos:line="105" pos:column="53">buffer<pos:position pos:line="105" pos:column="59"/></name></expr></argument>)<pos:position pos:line="105" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="105" pos:column="62">global_read_fh<pos:position pos:line="105" pos:column="76"/></name></expr></argument>)<pos:position pos:line="105" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="106" pos:column="17">buffer<pos:position pos:line="106" pos:column="23"/></name><index pos:line="106" pos:column="23">[<expr><sizeof pos:line="106" pos:column="24">sizeof <argument_list pos:line="106" pos:column="31">(<argument><expr><name pos:line="106" pos:column="32">buffer<pos:position pos:line="106" pos:column="38"/></name></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></sizeof> <operator pos:line="106" pos:column="40">-<pos:position pos:line="106" pos:column="41"/></operator> <literal type="number" pos:line="106" pos:column="42">1<pos:position pos:line="106" pos:column="43"/></literal></expr>]<pos:position pos:line="106" pos:column="44"/></index></name> <operator pos:line="106" pos:column="45">=<pos:position pos:line="106" pos:column="46"/></operator> <literal type="number" pos:line="106" pos:column="47">0<pos:position pos:line="106" pos:column="48"/></literal></expr>;<pos:position pos:line="106" pos:column="49"/></expr_stmt>

		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><call><name pos:line="108" pos:column="21">memcmp<pos:position pos:line="108" pos:column="27"/></name> <argument_list pos:line="108" pos:column="28">(<argument><expr><literal type="string" pos:line="108" pos:column="29">"[TS]\r\n"<pos:position pos:line="108" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="41">buffer<pos:position pos:line="108" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="49">6<pos:position pos:line="108" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="51"/></argument_list></call> <operator pos:line="108" pos:column="52">!=<pos:position pos:line="108" pos:column="54"/></operator> <literal type="number" pos:line="108" pos:column="55">0<pos:position pos:line="108" pos:column="56"/></literal></expr>)<pos:position pos:line="108" pos:column="57"/></condition><then pos:line="108" pos:column="57">
		<block pos:line="109" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">ERROR<pos:position pos:line="110" pos:column="30"/></name> <argument_list pos:line="110" pos:column="31">(<argument><expr><literal type="string" pos:line="110" pos:column="32">"teamspeak2 plugin: Unexpected response when connecting "<pos:position pos:line="110" pos:column="89"/></literal>
					<literal type="string" pos:line="111" pos:column="41">"to server. Expected ``[TS]'', got ``%s''."<pos:position pos:line="111" pos:column="84"/></literal></expr></argument>,
					<argument><expr><name pos:line="112" pos:column="41">buffer<pos:position pos:line="112" pos:column="47"/></name></expr></argument>)<pos:position pos:line="112" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">tss2_close_socket<pos:position pos:line="113" pos:column="42"/></name> <argument_list pos:line="113" pos:column="43">()<pos:position pos:line="113" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="46"/></expr_stmt>
			<return pos:line="114" pos:column="25">return <expr><operator pos:line="114" pos:column="32">(<pos:position pos:line="114" pos:column="33"/></operator><operator pos:line="114" pos:column="33">-<pos:position pos:line="114" pos:column="34"/></operator><literal type="number" pos:line="114" pos:column="34">1<pos:position pos:line="114" pos:column="35"/></literal><operator pos:line="114" pos:column="35">)<pos:position pos:line="114" pos:column="36"/></operator></expr>;<pos:position pos:line="114" pos:column="37"/></return>
		}<pos:position pos:line="115" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="116" pos:column="17">DEBUG<pos:position pos:line="116" pos:column="22"/></name> <argument_list pos:line="116" pos:column="23">(<argument><expr><literal type="string" pos:line="116" pos:column="24">"teamspeak2 plugin: Server send correct banner, connected!"<pos:position pos:line="116" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="85"/></expr_stmt>
	}<pos:position pos:line="117" pos:column="10"/></block>

	<comment type="block" pos:line="119" pos:column="9">/* Copy the new filehandles to the given pointers */</comment>
	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">ret_read_fh<pos:position pos:line="120" pos:column="24"/></name> <operator pos:line="120" pos:column="25">!=<pos:position pos:line="120" pos:column="27"/></operator> <name pos:line="120" pos:column="28">NULL<pos:position pos:line="120" pos:column="32"/></name></expr>)<pos:position pos:line="120" pos:column="33"/></condition><then pos:line="120" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="121" pos:column="17">*<pos:position pos:line="121" pos:column="18"/></operator><name pos:line="121" pos:column="18">ret_read_fh<pos:position pos:line="121" pos:column="29"/></name> <operator pos:line="121" pos:column="30">=<pos:position pos:line="121" pos:column="31"/></operator> <name pos:line="121" pos:column="32">global_read_fh<pos:position pos:line="121" pos:column="46"/></name></expr>;<pos:position pos:line="121" pos:column="47"/></expr_stmt></block></then></if>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name pos:line="122" pos:column="13">ret_write_fh<pos:position pos:line="122" pos:column="25"/></name> <operator pos:line="122" pos:column="26">!=<pos:position pos:line="122" pos:column="28"/></operator> <name pos:line="122" pos:column="29">NULL<pos:position pos:line="122" pos:column="33"/></name></expr>)<pos:position pos:line="122" pos:column="34"/></condition><then pos:line="122" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="123" pos:column="17">*<pos:position pos:line="123" pos:column="18"/></operator><name pos:line="123" pos:column="18">ret_write_fh<pos:position pos:line="123" pos:column="30"/></name> <operator pos:line="123" pos:column="31">=<pos:position pos:line="123" pos:column="32"/></operator> <name pos:line="123" pos:column="33">global_write_fh<pos:position pos:line="123" pos:column="48"/></name></expr>;<pos:position pos:line="123" pos:column="49"/></expr_stmt></block></then></if>
	<return pos:line="124" pos:column="9">return <expr><operator pos:line="124" pos:column="16">(<pos:position pos:line="124" pos:column="17"/></operator><literal type="number" pos:line="124" pos:column="17">0<pos:position pos:line="124" pos:column="18"/></literal><operator pos:line="124" pos:column="18">)<pos:position pos:line="124" pos:column="19"/></operator></expr>;<pos:position pos:line="124" pos:column="20"/></return>
}<pos:position pos:line="125" pos:column="2"/></block></function></unit>
