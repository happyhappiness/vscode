<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2339_collectd-5.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ignorelist_set_invert<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">ignorelist_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">il<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">invert<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list> <block pos:line="1" pos:column="58">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">il<pos:position pos:line="2" pos:column="9"/></name> <operator pos:line="2" pos:column="10">==<pos:position pos:line="2" pos:column="12"/></operator> <name pos:line="2" pos:column="13">NULL<pos:position pos:line="2" pos:column="17"/></name></expr>)<pos:position pos:line="2" pos:column="18"/></condition><then pos:line="2" pos:column="18"> <block pos:line="2" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">DEBUG<pos:position pos:line="3" pos:column="10"/></name><argument_list pos:line="3" pos:column="10">(<argument><expr><literal type="string" pos:line="3" pos:column="11">"ignore call with ignorelist_t == NULL"<pos:position pos:line="3" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="52"/></expr_stmt>
    <return pos:line="4" pos:column="5">return;<pos:position pos:line="4" pos:column="12"/></return>
  }<pos:position pos:line="5" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">il<pos:position pos:line="7" pos:column="5"/></name><operator pos:line="7" pos:column="5">-&gt;<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="7">ignore<pos:position pos:line="7" pos:column="13"/></name></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="7" pos:column="16">invert<pos:position pos:line="7" pos:column="22"/></name></expr> ?<pos:position pos:line="7" pos:column="24"/></condition><then pos:line="7" pos:column="24"> <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr> <pos:position pos:line="7" pos:column="27"/></then><else pos:line="7" pos:column="27">: <expr><literal type="number" pos:line="7" pos:column="29">1<pos:position pos:line="7" pos:column="30"/></literal></expr></else></ternary></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
