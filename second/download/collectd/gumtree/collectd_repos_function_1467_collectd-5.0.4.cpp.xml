<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1467_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mb_read_data<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">mb_host_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">host<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">mb_slave_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">slave<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="62">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">mb_data_t<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">data<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">uint16_t<pos:position pos:line="4" pos:column="11"/></name></type> <name><name pos:line="4" pos:column="12">values<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">2<pos:position pos:line="4" pos:column="20"/></literal></expr>]<pos:position pos:line="4" pos:column="21"/></index></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">values_num<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">data_set_t<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">ds<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">host<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">)<pos:position pos:line="10" pos:column="21"/></operator> <operator pos:line="10" pos:column="22">||<pos:position pos:line="10" pos:column="24"/></operator> <operator pos:line="10" pos:column="25">(<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">slave<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">==<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="35">NULL<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">)<pos:position pos:line="10" pos:column="40"/></operator> <operator pos:line="10" pos:column="41">||<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="44">(<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">data<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">==<pos:position pos:line="10" pos:column="52"/></operator> <name pos:line="10" pos:column="53">NULL<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">)<pos:position pos:line="10" pos:column="58"/></operator></expr>)<pos:position pos:line="10" pos:column="59"/></condition><then pos:line="10" pos:column="59">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">EINVAL<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator></expr>;<pos:position pos:line="11" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">ds<pos:position pos:line="13" pos:column="5"/></name> <operator pos:line="13" pos:column="6">=<pos:position pos:line="13" pos:column="7"/></operator> <call><name pos:line="13" pos:column="8">plugin_get_ds<pos:position pos:line="13" pos:column="21"/></name> <argument_list pos:line="13" pos:column="22">(<argument><expr><name><name pos:line="13" pos:column="23">data<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">type<pos:position pos:line="13" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">ds<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">==<pos:position pos:line="14" pos:column="12"/></operator> <name pos:line="14" pos:column="13">NULL<pos:position pos:line="14" pos:column="17"/></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ERROR<pos:position pos:line="16" pos:column="10"/></name> <argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"Modbus plugin: Type \"%s\" is not defined."<pos:position pos:line="16" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="58">data<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">-&gt;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="64">type<pos:position pos:line="16" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><operator pos:line="17" pos:column="13">-<pos:position pos:line="17" pos:column="14"/></operator><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal><operator pos:line="17" pos:column="15">)<pos:position pos:line="17" pos:column="16"/></operator></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name><name pos:line="20" pos:column="7">ds<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">ds_num<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">!=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">1<pos:position pos:line="20" pos:column="22"/></literal></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23">
  <block pos:line="21" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name> <argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="string" pos:line="22" pos:column="12">"Modbus plugin: The type \"%s\" has %i data sources. "<pos:position pos:line="22" pos:column="66"/></literal>
        <literal type="string" pos:line="23" pos:column="9">"I can only handle data sets with only one data source."<pos:position pos:line="23" pos:column="65"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="24" pos:column="9">data<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">-&gt;<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="15">type<pos:position pos:line="24" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="21">ds<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">ds_num<pos:position pos:line="24" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">(<pos:position pos:line="28" pos:column="8"/></operator><name><name pos:line="28" pos:column="8">ds<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">ds<pos:position pos:line="28" pos:column="14"/></name><index pos:line="28" pos:column="14">[<expr><literal type="number" pos:line="28" pos:column="15">0<pos:position pos:line="28" pos:column="16"/></literal></expr>]<pos:position pos:line="28" pos:column="17"/></index></name><operator pos:line="28" pos:column="17">.<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">type<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">!=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">DS_TYPE_GAUGE<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator>
      <operator pos:line="29" pos:column="7">&amp;&amp;<pos:position pos:line="29" pos:column="17"/></operator> <operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><name><name pos:line="29" pos:column="11">data<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">register_type<pos:position pos:line="29" pos:column="30"/></name></name> <operator pos:line="29" pos:column="31">!=<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">REG_TYPE_UINT32<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">)<pos:position pos:line="29" pos:column="50"/></operator></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51">
  <block pos:line="30" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">NOTICE<pos:position pos:line="31" pos:column="11"/></name> <argument_list pos:line="31" pos:column="12">(<argument><expr><literal type="string" pos:line="31" pos:column="13">"Modbus plugin: The data source of type \"%s\" is %s, not gauge. "<pos:position pos:line="31" pos:column="79"/></literal>
        <literal type="string" pos:line="32" pos:column="9">"This will most likely result in problems, because the register type "<pos:position pos:line="32" pos:column="79"/></literal>
        <literal type="string" pos:line="33" pos:column="9">"is not UINT32."<pos:position pos:line="33" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="27">data<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">-&gt;<pos:position pos:line="33" pos:column="36"/></operator><name pos:line="33" pos:column="33">type<pos:position pos:line="33" pos:column="37"/></name></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="39">DS_TYPE_TO_STRING<pos:position pos:line="33" pos:column="56"/></name> <argument_list pos:line="33" pos:column="57">(<argument><expr><name><name pos:line="33" pos:column="58">ds<pos:position pos:line="33" pos:column="60"/></name><operator pos:line="33" pos:column="60">-&gt;<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="62">ds<pos:position pos:line="33" pos:column="64"/></name><index pos:line="33" pos:column="64">[<expr><literal type="number" pos:line="33" pos:column="65">0<pos:position pos:line="33" pos:column="66"/></literal></expr>]<pos:position pos:line="33" pos:column="67"/></index></name><operator pos:line="33" pos:column="67">.<pos:position pos:line="33" pos:column="68"/></operator><name pos:line="33" pos:column="68">type<pos:position pos:line="33" pos:column="72"/></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">memset<pos:position pos:line="36" pos:column="9"/></name> <argument_list pos:line="36" pos:column="10">(<argument><expr><name pos:line="36" pos:column="11">values<pos:position pos:line="36" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="22">sizeof <argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">values<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">(<pos:position pos:line="37" pos:column="8"/></operator><name><name pos:line="37" pos:column="8">data<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">register_type<pos:position pos:line="37" pos:column="27"/></name></name> <operator pos:line="37" pos:column="28">==<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">REG_TYPE_UINT32<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">)<pos:position pos:line="37" pos:column="47"/></operator>
      <operator pos:line="38" pos:column="7">||<pos:position pos:line="38" pos:column="9"/></operator> <operator pos:line="38" pos:column="10">(<pos:position pos:line="38" pos:column="11"/></operator><name><name pos:line="38" pos:column="11">data<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">register_type<pos:position pos:line="38" pos:column="30"/></name></name> <operator pos:line="38" pos:column="31">==<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">REG_TYPE_FLOAT<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">)<pos:position pos:line="38" pos:column="49"/></operator></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="5">values_num<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">2<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt></block></then>
  <else pos:line="40" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="5">values_num<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">1<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt></block></else></if>

<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if<pos:position pos:line="43" pos:column="4"/></cpp:directive> <expr><name pos:line="43" pos:column="5">LEGACY_LIBMODBUS<pos:position pos:line="43" pos:column="21"/></name></expr></cpp:if>
  <comment type="block" pos:line="44" pos:column="3">/* Version 2.0.3: Pass the connection struct as a pointer and pass the slave
   * id to each call of "read_holding_registers". */</comment>
<cpp:define pos:line="46" pos:column="1"># <cpp:directive pos:line="46" pos:column="3">define<pos:position pos:line="46" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="46" pos:column="10">modbus_read_registers<pos:position pos:line="46" pos:column="31"/></name><parameter_list pos:line="46" pos:column="31">(<parameter><type><name pos:line="46" pos:column="32">ctx<pos:position pos:line="46" pos:column="35"/></name></type></parameter>, <parameter><type><name pos:line="46" pos:column="37">addr<pos:position pos:line="46" pos:column="41"/></name></type></parameter>, <parameter><type><name pos:line="46" pos:column="43">nb<pos:position pos:line="46" pos:column="45"/></name></type></parameter>, <parameter><type><name pos:line="46" pos:column="47">dest<pos:position pos:line="46" pos:column="51"/></name></type></parameter>)<pos:position pos:line="46" pos:column="52"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="47" pos:column="3">read_holding_registers (&amp;(ctx), slave-&gt;id, (addr), (nb), (dest))<pos:position pos:line="47" pos:column="67"/></cpp:value></cpp:define>
<cpp:else pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">else<pos:position pos:line="48" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="48" pos:column="7">/* if !LEGACY_LIBMODBUS */</comment>
  <comment type="block" pos:line="49" pos:column="3">/* Version 2.9.2: Set the slave id once before querying the registers. */</comment>
  <expr_stmt><expr><name pos:line="50" pos:column="3">status<pos:position pos:line="50" pos:column="9"/></name> <operator pos:line="50" pos:column="10">=<pos:position pos:line="50" pos:column="11"/></operator> <call><name pos:line="50" pos:column="12">modbus_set_slave<pos:position pos:line="50" pos:column="28"/></name> <argument_list pos:line="50" pos:column="29">(<argument><expr><name><name pos:line="50" pos:column="30">host<pos:position pos:line="50" pos:column="34"/></name><operator pos:line="50" pos:column="34">-&gt;<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="36">connection<pos:position pos:line="50" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="48">slave<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">-&gt;<pos:position pos:line="50" pos:column="58"/></operator><name pos:line="50" pos:column="55">id<pos:position pos:line="50" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="59"/></expr_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><name pos:line="51" pos:column="7">status<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">!=<pos:position pos:line="51" pos:column="16"/></operator> <literal type="number" pos:line="51" pos:column="17">0<pos:position pos:line="51" pos:column="18"/></literal></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19">
  <block pos:line="52" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">ERROR<pos:position pos:line="53" pos:column="10"/></name> <argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="string" pos:line="53" pos:column="12">"Modbus plugin: modbus_set_slave (%i) failed with status %i."<pos:position pos:line="53" pos:column="73"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="54" pos:column="9">slave<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">id<pos:position pos:line="54" pos:column="18"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="20">status<pos:position pos:line="54" pos:column="26"/></name></expr></argument>)<pos:position pos:line="54" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><operator pos:line="55" pos:column="12">(<pos:position pos:line="55" pos:column="13"/></operator><operator pos:line="55" pos:column="13">-<pos:position pos:line="55" pos:column="14"/></operator><literal type="number" pos:line="55" pos:column="14">1<pos:position pos:line="55" pos:column="15"/></literal><operator pos:line="55" pos:column="15">)<pos:position pos:line="55" pos:column="16"/></operator></expr>;<pos:position pos:line="55" pos:column="17"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

  <for pos:line="59" pos:column="3">for <control pos:line="59" pos:column="7">(<init><expr><name pos:line="59" pos:column="8">i<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <literal type="number" pos:line="59" pos:column="12">0<pos:position pos:line="59" pos:column="13"/></literal></expr>;<pos:position pos:line="59" pos:column="14"/></init> <condition><expr><name pos:line="59" pos:column="15">i<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">&lt;<pos:position pos:line="59" pos:column="21"/></operator> <literal type="number" pos:line="59" pos:column="19">2<pos:position pos:line="59" pos:column="20"/></literal></expr>;<pos:position pos:line="59" pos:column="21"/></condition> <incr><expr><name pos:line="59" pos:column="22">i<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">++<pos:position pos:line="59" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="26"/></control>
  <block pos:line="60" pos:column="3">{
    <expr_stmt><expr><name pos:line="61" pos:column="5">status<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">modbus_read_registers<pos:position pos:line="61" pos:column="35"/></name> <argument_list pos:line="61" pos:column="36">(<argument><expr><name><name pos:line="61" pos:column="37">host<pos:position pos:line="61" pos:column="41"/></name><operator pos:line="61" pos:column="41">-&gt;<pos:position pos:line="61" pos:column="46"/></operator><name pos:line="61" pos:column="43">connection<pos:position pos:line="61" pos:column="53"/></name></name></expr></argument>,
        <comment type="block" pos:line="62" pos:column="9">/* start_addr = */</comment> <argument><expr><name><name pos:line="62" pos:column="28">data<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">-&gt;<pos:position pos:line="62" pos:column="37"/></operator><name pos:line="62" pos:column="34">register_base<pos:position pos:line="62" pos:column="47"/></name></name></expr></argument>,
        <comment type="block" pos:line="63" pos:column="9">/* num_registers = */</comment> <argument><expr><name pos:line="63" pos:column="31">values_num<pos:position pos:line="63" pos:column="41"/></name></expr></argument>, <comment type="block" pos:line="63" pos:column="43">/* buffer = */</comment> <argument><expr><name pos:line="63" pos:column="58">values<pos:position pos:line="63" pos:column="64"/></name></expr></argument>)<pos:position pos:line="63" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="66"/></expr_stmt>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">status<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">&gt;<pos:position pos:line="64" pos:column="20"/></operator> <literal type="number" pos:line="64" pos:column="18">0<pos:position pos:line="64" pos:column="19"/></literal></expr>)<pos:position pos:line="64" pos:column="20"/></condition><then pos:line="64" pos:column="20">
      <block type="pseudo"><break pos:line="65" pos:column="7">break;<pos:position pos:line="65" pos:column="13"/></break></block></then></if>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name><name pos:line="67" pos:column="9">host<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">is_connected<pos:position pos:line="67" pos:column="27"/></name></name></expr>)<pos:position pos:line="67" pos:column="28"/></condition><then pos:line="67" pos:column="28">
    <block pos:line="68" pos:column="5">{
<cpp:if pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">if<pos:position pos:line="69" pos:column="4"/></cpp:directive> <expr><name pos:line="69" pos:column="5">LEGACY_LIBMODBUS<pos:position pos:line="69" pos:column="21"/></name></expr></cpp:if>
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">modbus_close<pos:position pos:line="70" pos:column="19"/></name> <argument_list pos:line="70" pos:column="20">(<argument><expr><operator pos:line="70" pos:column="21">&amp;<pos:position pos:line="70" pos:column="26"/></operator><name><name pos:line="70" pos:column="22">host<pos:position pos:line="70" pos:column="26"/></name><operator pos:line="70" pos:column="26">-&gt;<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="28">connection<pos:position pos:line="70" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="71" pos:column="7">host<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">is_connected<pos:position pos:line="71" pos:column="25"/></name></name> <operator pos:line="71" pos:column="26">=<pos:position pos:line="71" pos:column="27"/></operator> <literal type="number" pos:line="71" pos:column="28">0<pos:position pos:line="71" pos:column="29"/></literal></expr>;<pos:position pos:line="71" pos:column="30"/></expr_stmt>
<cpp:else pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">else<pos:position pos:line="72" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">modbus_close<pos:position pos:line="73" pos:column="19"/></name> <argument_list pos:line="73" pos:column="20">(<argument><expr><name><name pos:line="73" pos:column="21">host<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">-&gt;<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="27">connection<pos:position pos:line="73" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">modbus_free<pos:position pos:line="74" pos:column="18"/></name> <argument_list pos:line="74" pos:column="19">(<argument><expr><name><name pos:line="74" pos:column="20">host<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">-&gt;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="26">connection<pos:position pos:line="74" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="75" pos:column="7">host<pos:position pos:line="75" pos:column="11"/></name><operator pos:line="75" pos:column="11">-&gt;<pos:position pos:line="75" pos:column="16"/></operator><name pos:line="75" pos:column="13">connection<pos:position pos:line="75" pos:column="23"/></name></name> <operator pos:line="75" pos:column="24">=<pos:position pos:line="75" pos:column="25"/></operator> <name pos:line="75" pos:column="26">NULL<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="79" pos:column="5">/* If we already tried reconnecting this round, give up. */</comment>
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name><name pos:line="80" pos:column="9">host<pos:position pos:line="80" pos:column="13"/></name><operator pos:line="80" pos:column="13">-&gt;<pos:position pos:line="80" pos:column="18"/></operator><name pos:line="80" pos:column="15">have_reconnected<pos:position pos:line="80" pos:column="31"/></name></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition><then pos:line="80" pos:column="32">
    <block pos:line="81" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">ERROR<pos:position pos:line="82" pos:column="12"/></name> <argument_list pos:line="82" pos:column="13">(<argument><expr><literal type="string" pos:line="82" pos:column="14">"Modbus plugin: modbus_read_registers (%s) failed. "<pos:position pos:line="82" pos:column="66"/></literal>
          <literal type="string" pos:line="83" pos:column="11">"Reconnecting has already been tried. Giving up."<pos:position pos:line="83" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="62">host<pos:position pos:line="83" pos:column="66"/></name><operator pos:line="83" pos:column="66">-&gt;<pos:position pos:line="83" pos:column="71"/></operator><name pos:line="83" pos:column="68">host<pos:position pos:line="83" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="74"/></expr_stmt>
      <return pos:line="84" pos:column="7">return <expr><operator pos:line="84" pos:column="14">(<pos:position pos:line="84" pos:column="15"/></operator><operator pos:line="84" pos:column="15">-<pos:position pos:line="84" pos:column="16"/></operator><literal type="number" pos:line="84" pos:column="16">1<pos:position pos:line="84" pos:column="17"/></literal><operator pos:line="84" pos:column="17">)<pos:position pos:line="84" pos:column="18"/></operator></expr>;<pos:position pos:line="84" pos:column="19"/></return>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="87" pos:column="5">/* Maybe the device closed the connection during the waiting interval.
     * Try re-establishing the connection. */</comment>
    <expr_stmt><expr><name pos:line="89" pos:column="5">status<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <call><name pos:line="89" pos:column="14">mb_init_connection<pos:position pos:line="89" pos:column="32"/></name> <argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">host<pos:position pos:line="89" pos:column="38"/></name></expr></argument>)<pos:position pos:line="89" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">status<pos:position pos:line="90" pos:column="15"/></name> <operator pos:line="90" pos:column="16">!=<pos:position pos:line="90" pos:column="18"/></operator> <literal type="number" pos:line="90" pos:column="19">0<pos:position pos:line="90" pos:column="20"/></literal></expr>)<pos:position pos:line="90" pos:column="21"/></condition><then pos:line="90" pos:column="21">
    <block pos:line="91" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">ERROR<pos:position pos:line="92" pos:column="12"/></name> <argument_list pos:line="92" pos:column="13">(<argument><expr><literal type="string" pos:line="92" pos:column="14">"Modbus plugin: modbus_read_registers (%s) failed. "<pos:position pos:line="92" pos:column="66"/></literal>
          <literal type="string" pos:line="93" pos:column="11">"While trying to reconnect, connecting to \"%s\" failed. "<pos:position pos:line="93" pos:column="69"/></literal>
          <literal type="string" pos:line="94" pos:column="11">"Giving up."<pos:position pos:line="94" pos:column="23"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="95" pos:column="11">host<pos:position pos:line="95" pos:column="15"/></name><operator pos:line="95" pos:column="15">-&gt;<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="17">host<pos:position pos:line="95" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="23">host<pos:position pos:line="95" pos:column="27"/></name><operator pos:line="95" pos:column="27">-&gt;<pos:position pos:line="95" pos:column="32"/></operator><name pos:line="95" pos:column="29">node<pos:position pos:line="95" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="35"/></expr_stmt>
      <return pos:line="96" pos:column="7">return <expr><operator pos:line="96" pos:column="14">(<pos:position pos:line="96" pos:column="15"/></operator><operator pos:line="96" pos:column="15">-<pos:position pos:line="96" pos:column="16"/></operator><literal type="number" pos:line="96" pos:column="16">1<pos:position pos:line="96" pos:column="17"/></literal><operator pos:line="96" pos:column="17">)<pos:position pos:line="96" pos:column="18"/></operator></expr>;<pos:position pos:line="96" pos:column="19"/></return>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="99" pos:column="5">DEBUG<pos:position pos:line="99" pos:column="10"/></name> <argument_list pos:line="99" pos:column="11">(<argument><expr><literal type="string" pos:line="99" pos:column="12">"Modbus plugin: Re-established connection to %s"<pos:position pos:line="99" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="62">host<pos:position pos:line="99" pos:column="66"/></name><operator pos:line="99" pos:column="66">-&gt;<pos:position pos:line="99" pos:column="71"/></operator><name pos:line="99" pos:column="68">host<pos:position pos:line="99" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="101" pos:column="5">/* try again */</comment>
    <continue pos:line="102" pos:column="5">continue;<pos:position pos:line="102" pos:column="14"/></continue>
  }<pos:position pos:line="103" pos:column="4"/></block></for> <comment type="block" pos:line="103" pos:column="5">/* for (i = 0, 1) */</comment>

  <expr_stmt><expr><call><name pos:line="105" pos:column="3">DEBUG<pos:position pos:line="105" pos:column="8"/></name> <argument_list pos:line="105" pos:column="9">(<argument><expr><literal type="string" pos:line="105" pos:column="10">"Modbus plugin: mb_read_data: Success! "<pos:position pos:line="105" pos:column="50"/></literal>
      <literal type="string" pos:line="106" pos:column="7">"modbus_read_registers returned with status %i."<pos:position pos:line="106" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="57">status<pos:position pos:line="106" pos:column="63"/></name></expr></argument>)<pos:position pos:line="106" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="65"/></expr_stmt>

  <if pos:line="108" pos:column="3">if <condition pos:line="108" pos:column="6">(<expr><name><name pos:line="108" pos:column="7">data<pos:position pos:line="108" pos:column="11"/></name><operator pos:line="108" pos:column="11">-&gt;<pos:position pos:line="108" pos:column="16"/></operator><name pos:line="108" pos:column="13">register_type<pos:position pos:line="108" pos:column="26"/></name></name> <operator pos:line="108" pos:column="27">==<pos:position pos:line="108" pos:column="29"/></operator> <name pos:line="108" pos:column="30">REG_TYPE_FLOAT<pos:position pos:line="108" pos:column="44"/></name></expr>)<pos:position pos:line="108" pos:column="45"/></condition><then pos:line="108" pos:column="45">
  <block pos:line="109" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="110" pos:column="5">float<pos:position pos:line="110" pos:column="10"/></name></type> <name pos:line="110" pos:column="11">float_value<pos:position pos:line="110" pos:column="22"/></name></decl>;<pos:position pos:line="110" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="111" pos:column="5">value_t<pos:position pos:line="111" pos:column="12"/></name></type> <name pos:line="111" pos:column="13">vt<pos:position pos:line="111" pos:column="15"/></name></decl>;<pos:position pos:line="111" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="113" pos:column="5">float_value<pos:position pos:line="113" pos:column="16"/></name> <operator pos:line="113" pos:column="17">=<pos:position pos:line="113" pos:column="18"/></operator> <call><name pos:line="113" pos:column="19">mb_register_to_float<pos:position pos:line="113" pos:column="39"/></name> <argument_list pos:line="113" pos:column="40">(<argument><expr><name><name pos:line="113" pos:column="41">values<pos:position pos:line="113" pos:column="47"/></name><index pos:line="113" pos:column="47">[<expr><literal type="number" pos:line="113" pos:column="48">0<pos:position pos:line="113" pos:column="49"/></literal></expr>]<pos:position pos:line="113" pos:column="50"/></index></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="52">values<pos:position pos:line="113" pos:column="58"/></name><index pos:line="113" pos:column="58">[<expr><literal type="number" pos:line="113" pos:column="59">1<pos:position pos:line="113" pos:column="60"/></literal></expr>]<pos:position pos:line="113" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="113" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">DEBUG<pos:position pos:line="114" pos:column="10"/></name> <argument_list pos:line="114" pos:column="11">(<argument><expr><literal type="string" pos:line="114" pos:column="12">"Modbus plugin: mb_read_data: "<pos:position pos:line="114" pos:column="43"/></literal>
        <literal type="string" pos:line="115" pos:column="9">"Returned float value is %g"<pos:position pos:line="115" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="115" pos:column="39">(<pos:position pos:line="115" pos:column="40"/></operator><name pos:line="115" pos:column="40">double<pos:position pos:line="115" pos:column="46"/></name><operator pos:line="115" pos:column="46">)<pos:position pos:line="115" pos:column="47"/></operator> <name pos:line="115" pos:column="48">float_value<pos:position pos:line="115" pos:column="59"/></name></expr></argument>)<pos:position pos:line="115" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="61"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="117" pos:column="5">CAST_TO_VALUE_T<pos:position pos:line="117" pos:column="20"/></name> <argument_list pos:line="117" pos:column="21">(<argument><expr><name pos:line="117" pos:column="22">ds<pos:position pos:line="117" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="26">vt<pos:position pos:line="117" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="30">float_value<pos:position pos:line="117" pos:column="41"/></name></expr></argument>)<pos:position pos:line="117" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">mb_submit<pos:position pos:line="118" pos:column="14"/></name> <argument_list pos:line="118" pos:column="15">(<argument><expr><name pos:line="118" pos:column="16">host<pos:position pos:line="118" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="22">slave<pos:position pos:line="118" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="29">data<pos:position pos:line="118" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="35">vt<pos:position pos:line="118" pos:column="37"/></name></expr></argument>)<pos:position pos:line="118" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="119" pos:column="4"/></block></then>
  <elseif pos:line="120" pos:column="3">else <if pos:line="120" pos:column="8">if <condition pos:line="120" pos:column="11">(<expr><name><name pos:line="120" pos:column="12">data<pos:position pos:line="120" pos:column="16"/></name><operator pos:line="120" pos:column="16">-&gt;<pos:position pos:line="120" pos:column="21"/></operator><name pos:line="120" pos:column="18">register_type<pos:position pos:line="120" pos:column="31"/></name></name> <operator pos:line="120" pos:column="32">==<pos:position pos:line="120" pos:column="34"/></operator> <name pos:line="120" pos:column="35">REG_TYPE_UINT32<pos:position pos:line="120" pos:column="50"/></name></expr>)<pos:position pos:line="120" pos:column="51"/></condition><then pos:line="120" pos:column="51">
  <block pos:line="121" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">uint32_t<pos:position pos:line="122" pos:column="13"/></name></type> <name pos:line="122" pos:column="14">v32<pos:position pos:line="122" pos:column="17"/></name></decl>;<pos:position pos:line="122" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="123" pos:column="5">value_t<pos:position pos:line="123" pos:column="12"/></name></type> <name pos:line="123" pos:column="13">vt<pos:position pos:line="123" pos:column="15"/></name></decl>;<pos:position pos:line="123" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="125" pos:column="5">v32<pos:position pos:line="125" pos:column="8"/></name> <operator pos:line="125" pos:column="9">=<pos:position pos:line="125" pos:column="10"/></operator> <operator pos:line="125" pos:column="11">(<pos:position pos:line="125" pos:column="12"/></operator><name><name pos:line="125" pos:column="12">values<pos:position pos:line="125" pos:column="18"/></name><index pos:line="125" pos:column="18">[<expr><literal type="number" pos:line="125" pos:column="19">0<pos:position pos:line="125" pos:column="20"/></literal></expr>]<pos:position pos:line="125" pos:column="21"/></index></name> <operator pos:line="125" pos:column="22">&lt;&lt;<pos:position pos:line="125" pos:column="30"/></operator> <literal type="number" pos:line="125" pos:column="25">16<pos:position pos:line="125" pos:column="27"/></literal><operator pos:line="125" pos:column="27">)<pos:position pos:line="125" pos:column="28"/></operator> <operator pos:line="125" pos:column="29">|<pos:position pos:line="125" pos:column="30"/></operator> <name><name pos:line="125" pos:column="31">values<pos:position pos:line="125" pos:column="37"/></name><index pos:line="125" pos:column="37">[<expr><literal type="number" pos:line="125" pos:column="38">1<pos:position pos:line="125" pos:column="39"/></literal></expr>]<pos:position pos:line="125" pos:column="40"/></index></name></expr>;<pos:position pos:line="125" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">DEBUG<pos:position pos:line="126" pos:column="10"/></name> <argument_list pos:line="126" pos:column="11">(<argument><expr><literal type="string" pos:line="126" pos:column="12">"Modbus plugin: mb_read_data: "<pos:position pos:line="126" pos:column="43"/></literal>
        <literal type="string" pos:line="127" pos:column="9">"Returned uint32 value is %"<pos:position pos:line="127" pos:column="37"/></literal><name pos:line="127" pos:column="37">PRIu32<pos:position pos:line="127" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="45">v32<pos:position pos:line="127" pos:column="48"/></name></expr></argument>)<pos:position pos:line="127" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="129" pos:column="5">CAST_TO_VALUE_T<pos:position pos:line="129" pos:column="20"/></name> <argument_list pos:line="129" pos:column="21">(<argument><expr><name pos:line="129" pos:column="22">ds<pos:position pos:line="129" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="26">vt<pos:position pos:line="129" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="30">v32<pos:position pos:line="129" pos:column="33"/></name></expr></argument>)<pos:position pos:line="129" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">mb_submit<pos:position pos:line="130" pos:column="14"/></name> <argument_list pos:line="130" pos:column="15">(<argument><expr><name pos:line="130" pos:column="16">host<pos:position pos:line="130" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="22">slave<pos:position pos:line="130" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="29">data<pos:position pos:line="130" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="35">vt<pos:position pos:line="130" pos:column="37"/></name></expr></argument>)<pos:position pos:line="130" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="131" pos:column="4"/></block></then></if></elseif>
  <else pos:line="132" pos:column="3">else <comment type="block" pos:line="132" pos:column="8">/* if (data-&gt;register_type == REG_TYPE_UINT16) */</comment>
  <block pos:line="133" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="134" pos:column="5">value_t<pos:position pos:line="134" pos:column="12"/></name></type> <name pos:line="134" pos:column="13">vt<pos:position pos:line="134" pos:column="15"/></name></decl>;<pos:position pos:line="134" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="136" pos:column="5">DEBUG<pos:position pos:line="136" pos:column="10"/></name> <argument_list pos:line="136" pos:column="11">(<argument><expr><literal type="string" pos:line="136" pos:column="12">"Modbus plugin: mb_read_data: "<pos:position pos:line="136" pos:column="43"/></literal>
        <literal type="string" pos:line="137" pos:column="9">"Returned uint16 value is %"<pos:position pos:line="137" pos:column="37"/></literal><name pos:line="137" pos:column="37">PRIu16<pos:position pos:line="137" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="45">values<pos:position pos:line="137" pos:column="51"/></name><index pos:line="137" pos:column="51">[<expr><literal type="number" pos:line="137" pos:column="52">0<pos:position pos:line="137" pos:column="53"/></literal></expr>]<pos:position pos:line="137" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="137" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="139" pos:column="5">CAST_TO_VALUE_T<pos:position pos:line="139" pos:column="20"/></name> <argument_list pos:line="139" pos:column="21">(<argument><expr><name pos:line="139" pos:column="22">ds<pos:position pos:line="139" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="26">vt<pos:position pos:line="139" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="30">values<pos:position pos:line="139" pos:column="36"/></name><index pos:line="139" pos:column="36">[<expr><literal type="number" pos:line="139" pos:column="37">0<pos:position pos:line="139" pos:column="38"/></literal></expr>]<pos:position pos:line="139" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="139" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">mb_submit<pos:position pos:line="140" pos:column="14"/></name> <argument_list pos:line="140" pos:column="15">(<argument><expr><name pos:line="140" pos:column="16">host<pos:position pos:line="140" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="22">slave<pos:position pos:line="140" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="29">data<pos:position pos:line="140" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="35">vt<pos:position pos:line="140" pos:column="37"/></name></expr></argument>)<pos:position pos:line="140" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="141" pos:column="4"/></block></else></if>

  <return pos:line="143" pos:column="3">return <expr><operator pos:line="143" pos:column="10">(<pos:position pos:line="143" pos:column="11"/></operator><literal type="number" pos:line="143" pos:column="11">0<pos:position pos:line="143" pos:column="12"/></literal><operator pos:line="143" pos:column="12">)<pos:position pos:line="143" pos:column="13"/></operator></expr>;<pos:position pos:line="143" pos:column="14"/></return>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
