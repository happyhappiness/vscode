<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_694_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">yyensure_buffer_stack<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">num_to_alloc<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><operator pos:line="5" pos:column="14">(<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">yy_buffer_stack<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32"> <block pos:line="5" pos:column="33">{

		<comment type="block" pos:line="7" pos:column="17">/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */</comment>
		<expr_stmt><expr><name pos:line="11" pos:column="17">num_to_alloc<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">=<pos:position pos:line="11" pos:column="31"/></operator> <literal type="number" pos:line="11" pos:column="32">1<pos:position pos:line="11" pos:column="33"/></literal></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">yy_buffer_stack<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator> <operator pos:line="12" pos:column="35">=<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">(<pos:position pos:line="12" pos:column="38"/></operator>struct <name pos:line="12" pos:column="45">yy_buffer_state<pos:position pos:line="12" pos:column="60"/></name><operator pos:line="12" pos:column="60">*<pos:position pos:line="12" pos:column="61"/></operator><operator pos:line="12" pos:column="61">*<pos:position pos:line="12" pos:column="62"/></operator><operator pos:line="12" pos:column="62">)<pos:position pos:line="12" pos:column="63"/></operator><call><name pos:line="12" pos:column="63">yyalloc<pos:position pos:line="12" pos:column="70"/></name>
								<argument_list pos:line="13" pos:column="65">(<argument><expr><name pos:line="13" pos:column="66">num_to_alloc<pos:position pos:line="13" pos:column="78"/></name> <operator pos:line="13" pos:column="79">*<pos:position pos:line="13" pos:column="80"/></operator> <sizeof pos:line="13" pos:column="81">sizeof<argument_list pos:line="13" pos:column="87">(<argument><expr pos:line="13" pos:column="88">struct <name pos:line="13" pos:column="95">yy_buffer_state<pos:position pos:line="13" pos:column="110"/></name><operator pos:line="13" pos:column="110">*<pos:position pos:line="13" pos:column="111"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="112"/></argument_list></sizeof></expr></argument>
								)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="67"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">( <expr><operator pos:line="15" pos:column="22">!<pos:position pos:line="15" pos:column="23"/></operator> <operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">yy_buffer_stack<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">)<pos:position pos:line="15" pos:column="41"/></operator></expr> )<pos:position pos:line="15" pos:column="43"/></condition><then pos:line="15" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">( <argument><expr><literal type="string" pos:line="16" pos:column="41">"out of dynamic memory in yyensure_buffer_stack()"<pos:position pos:line="16" pos:column="91"/></literal></expr></argument> )<pos:position pos:line="16" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="94"/></expr_stmt></block></then></if>
								  
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">memset<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">yy_buffer_stack<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">)<pos:position pos:line="18" pos:column="41"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="43">0<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">num_to_alloc<pos:position pos:line="18" pos:column="58"/></name> <operator pos:line="18" pos:column="59">*<pos:position pos:line="18" pos:column="60"/></operator> <sizeof pos:line="18" pos:column="61">sizeof<argument_list pos:line="18" pos:column="67">(<argument><expr pos:line="18" pos:column="68">struct <name pos:line="18" pos:column="75">yy_buffer_state<pos:position pos:line="18" pos:column="90"/></name><operator pos:line="18" pos:column="90">*<pos:position pos:line="18" pos:column="91"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="92"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="94"/></expr_stmt>
				
		<expr_stmt><expr><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">yy_buffer_stack_max<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">)<pos:position pos:line="20" pos:column="38"/></operator> <operator pos:line="20" pos:column="39">=<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="41">num_to_alloc<pos:position pos:line="20" pos:column="53"/></name></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">yy_buffer_stack_top<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator> <operator pos:line="21" pos:column="39">=<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="41">0<pos:position pos:line="21" pos:column="42"/></literal></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<return pos:line="22" pos:column="17">return;<pos:position pos:line="22" pos:column="24"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">yy_buffer_stack_top<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">)<pos:position pos:line="25" pos:column="34"/></operator> <operator pos:line="25" pos:column="35">&gt;=<pos:position pos:line="25" pos:column="40"/></operator> <operator pos:line="25" pos:column="38">(<pos:position pos:line="25" pos:column="39"/></operator><operator pos:line="25" pos:column="39">(<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="40">yy_buffer_stack_max<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">)<pos:position pos:line="25" pos:column="60"/></operator><operator pos:line="25" pos:column="60">)<pos:position pos:line="25" pos:column="61"/></operator> <operator pos:line="25" pos:column="62">-<pos:position pos:line="25" pos:column="63"/></operator> <literal type="number" pos:line="25" pos:column="64">1<pos:position pos:line="25" pos:column="65"/></literal></expr>)<pos:position pos:line="25" pos:column="66"/></condition><then><block pos:line="25" pos:column="66">{

		<comment type="block" pos:line="27" pos:column="17">/* Increase the buffer to prepare for a possible push. */</comment>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">grow_size<pos:position pos:line="28" pos:column="30"/></name> <init pos:line="28" pos:column="31">= <expr><literal type="number" pos:line="28" pos:column="33">8<pos:position pos:line="28" pos:column="34"/></literal></expr></init></decl> <comment type="block" pos:line="28" pos:column="35">/* arbitrary grow size */</comment>;<pos:position pos:line="28" pos:column="61"/></decl_stmt>

		<expr_stmt><expr><name pos:line="30" pos:column="17">num_to_alloc<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <operator pos:line="30" pos:column="32">(<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">yy_buffer_stack_max<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">)<pos:position pos:line="30" pos:column="53"/></operator> <operator pos:line="30" pos:column="54">+<pos:position pos:line="30" pos:column="55"/></operator> <name pos:line="30" pos:column="56">grow_size<pos:position pos:line="30" pos:column="65"/></name></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">yy_buffer_stack<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">)<pos:position pos:line="31" pos:column="34"/></operator> <operator pos:line="31" pos:column="35">=<pos:position pos:line="31" pos:column="36"/></operator> <operator pos:line="31" pos:column="37">(<pos:position pos:line="31" pos:column="38"/></operator>struct <name pos:line="31" pos:column="45">yy_buffer_state<pos:position pos:line="31" pos:column="60"/></name><operator pos:line="31" pos:column="60">*<pos:position pos:line="31" pos:column="61"/></operator><operator pos:line="31" pos:column="61">*<pos:position pos:line="31" pos:column="62"/></operator><operator pos:line="31" pos:column="62">)<pos:position pos:line="31" pos:column="63"/></operator><call><name pos:line="31" pos:column="63">yyrealloc<pos:position pos:line="31" pos:column="72"/></name>
								<argument_list pos:line="32" pos:column="65">(<argument><expr><operator pos:line="32" pos:column="66">(<pos:position pos:line="32" pos:column="67"/></operator><name pos:line="32" pos:column="67">yy_buffer_stack<pos:position pos:line="32" pos:column="82"/></name><operator pos:line="32" pos:column="82">)<pos:position pos:line="32" pos:column="83"/></operator></expr></argument>,
								<argument><expr><name pos:line="33" pos:column="65">num_to_alloc<pos:position pos:line="33" pos:column="77"/></name> <operator pos:line="33" pos:column="78">*<pos:position pos:line="33" pos:column="79"/></operator> <sizeof pos:line="33" pos:column="80">sizeof<argument_list pos:line="33" pos:column="86">(<argument><expr pos:line="33" pos:column="87">struct <name pos:line="33" pos:column="94">yy_buffer_state<pos:position pos:line="33" pos:column="109"/></name><operator pos:line="33" pos:column="109">*<pos:position pos:line="33" pos:column="110"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="111"/></argument_list></sizeof></expr></argument>
								)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">( <expr><operator pos:line="35" pos:column="22">!<pos:position pos:line="35" pos:column="23"/></operator> <operator pos:line="35" pos:column="24">(<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">yy_buffer_stack<pos:position pos:line="35" pos:column="40"/></name><operator pos:line="35" pos:column="40">)<pos:position pos:line="35" pos:column="41"/></operator></expr> )<pos:position pos:line="35" pos:column="43"/></condition><then pos:line="35" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">( <argument><expr><literal type="string" pos:line="36" pos:column="41">"out of dynamic memory in yyensure_buffer_stack()"<pos:position pos:line="36" pos:column="91"/></literal></expr></argument> )<pos:position pos:line="36" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="94"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="38" pos:column="17">/* zero only the new slots.*/</comment>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">memset<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">yy_buffer_stack<pos:position pos:line="39" pos:column="40"/></name><operator pos:line="39" pos:column="40">)<pos:position pos:line="39" pos:column="41"/></operator> <operator pos:line="39" pos:column="42">+<pos:position pos:line="39" pos:column="43"/></operator> <operator pos:line="39" pos:column="44">(<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="45">yy_buffer_stack_max<pos:position pos:line="39" pos:column="64"/></name><operator pos:line="39" pos:column="64">)<pos:position pos:line="39" pos:column="65"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="67">0<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="70">grow_size<pos:position pos:line="39" pos:column="79"/></name> <operator pos:line="39" pos:column="80">*<pos:position pos:line="39" pos:column="81"/></operator> <sizeof pos:line="39" pos:column="82">sizeof<argument_list pos:line="39" pos:column="88">(<argument><expr pos:line="39" pos:column="89">struct <name pos:line="39" pos:column="96">yy_buffer_state<pos:position pos:line="39" pos:column="111"/></name><operator pos:line="39" pos:column="111">*<pos:position pos:line="39" pos:column="112"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="113"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="115"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="40" pos:column="17">(<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">yy_buffer_stack_max<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">)<pos:position pos:line="40" pos:column="38"/></operator> <operator pos:line="40" pos:column="39">=<pos:position pos:line="40" pos:column="40"/></operator> <name pos:line="40" pos:column="41">num_to_alloc<pos:position pos:line="40" pos:column="53"/></name></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
