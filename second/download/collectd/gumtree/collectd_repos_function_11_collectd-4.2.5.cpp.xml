<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_11_collectd-4.2.5.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">error_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name pos:line="2" pos:column="1">argz_insert<pos:position pos:line="2" pos:column="12"/></name> <argument_list pos:line="2" pos:column="13">(<argument><expr><name pos:line="2" pos:column="14">pargz<pos:position pos:line="2" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="21">pargz_len<pos:position pos:line="2" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="32">before<pos:position pos:line="2" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="40">entry<pos:position pos:line="2" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2" pos:column="46"/></argument_list>
     <name pos:line="3" pos:column="6">char<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><name pos:line="3" pos:column="13">pargz<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">size_t<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">pargz_len<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5" pos:column="6">char<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">before<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="6" pos:column="6">const<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">entry<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><name pos:line="8" pos:column="11">pargz<pos:position pos:line="8" pos:column="16"/></name></expr></argument>)<pos:position pos:line="8" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">pargz_len<pos:position pos:line="9" pos:column="20"/></name></expr></argument>)<pos:position pos:line="9" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">assert<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">entry<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&amp;&amp;<pos:position pos:line="10" pos:column="27"/></operator> <operator pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">entry<pos:position pos:line="10" pos:column="26"/></name></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* No BEFORE address indicates ENTRY should be inserted after the
     current last element.  */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">before<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><call><name pos:line="15" pos:column="12">argz_append<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">pargz<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">pargz_len<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">entry<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="50">1<pos:position pos:line="15" pos:column="51"/></literal><operator pos:line="15" pos:column="51">+<pos:position pos:line="15" pos:column="52"/></operator> <call><name pos:line="15" pos:column="53">LT_STRLEN<pos:position pos:line="15" pos:column="62"/></name> <argument_list pos:line="15" pos:column="63">(<argument><expr><name pos:line="15" pos:column="64">entry<pos:position pos:line="15" pos:column="69"/></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></return></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* This probably indicates a programmer error, but to preserve
     semantics, scan back to the start of an entry if BEFORE points
     into the middle of it.  */</comment>
  <while pos:line="20" pos:column="3">while <condition pos:line="20" pos:column="9">(<expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">before<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">&gt;<pos:position pos:line="20" pos:column="22"/></operator> <operator pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">pargz<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator> <operator pos:line="20" pos:column="28">&amp;&amp;<pos:position pos:line="20" pos:column="38"/></operator> <operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name><name pos:line="20" pos:column="32">before<pos:position pos:line="20" pos:column="38"/></name><index pos:line="20" pos:column="38">[<expr><operator pos:line="20" pos:column="39">-<pos:position pos:line="20" pos:column="40"/></operator><literal type="number" pos:line="20" pos:column="40">1<pos:position pos:line="20" pos:column="41"/></literal></expr>]<pos:position pos:line="20" pos:column="42"/></index></name> <operator pos:line="20" pos:column="43">!=<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="46">LT_EOS_CHAR<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">)<pos:position pos:line="20" pos:column="58"/></operator></expr>)<pos:position pos:line="20" pos:column="59"/></condition>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="5">--<pos:position pos:line="21" pos:column="7"/></operator><name pos:line="21" pos:column="7">before<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></expr_stmt></block></while>

  <block pos:line="23" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">size_t<pos:position pos:line="24" pos:column="11"/></name></type> <name pos:line="24" pos:column="12">entry_len<pos:position pos:line="24" pos:column="21"/></name>	<init pos:line="24" pos:column="25">= <expr><literal type="number" pos:line="24" pos:column="27">1<pos:position pos:line="24" pos:column="28"/></literal><operator pos:line="24" pos:column="28">+<pos:position pos:line="24" pos:column="29"/></operator> <call><name pos:line="24" pos:column="30">LT_STRLEN<pos:position pos:line="24" pos:column="39"/></name> <argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">entry<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">size_t<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">argz_len<pos:position pos:line="25" pos:column="20"/></name>	<init pos:line="25" pos:column="25">= <expr><operator pos:line="25" pos:column="27">*<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="28">pargz_len<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">+<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">entry_len<pos:position pos:line="25" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">size_t<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">offset<pos:position pos:line="26" pos:column="18"/></name>	<init pos:line="26" pos:column="25">= <expr><name pos:line="26" pos:column="27">before<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">-<pos:position pos:line="26" pos:column="35"/></operator> <operator pos:line="26" pos:column="36">*<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">pargz<pos:position pos:line="26" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name>   <modifier pos:line="27" pos:column="12">*<pos:position pos:line="27" pos:column="13"/></modifier></type><name pos:line="27" pos:column="13">argz<pos:position pos:line="27" pos:column="17"/></name>	<init pos:line="27" pos:column="25">= <expr><call><name pos:line="27" pos:column="27">LT_DLREALLOC<pos:position pos:line="27" pos:column="39"/></name> <argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">char<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="47">*<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">pargz<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">argz_len<pos:position pos:line="27" pos:column="63"/></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="65"/></decl_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">argz<pos:position pos:line="29" pos:column="14"/></name></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15">
      <block type="pseudo"><return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">ENOMEM<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* Make BEFORE point to the equivalent offset in ARGZ that it
       used to have in *PARGZ incase realloc() moved the block.  */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">before<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <name pos:line="34" pos:column="14">argz<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">+<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">offset<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* Move the ARGZ entries starting at BEFORE up into the new
       space at the end -- making room to copy ENTRY into the
       resulting gap.  */</comment>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">memmove<pos:position pos:line="39" pos:column="12"/></name> <argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">before<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">+<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">entry_len<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="34">before<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="42">*<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="43">pargz_len<pos:position pos:line="39" pos:column="52"/></name> <operator pos:line="39" pos:column="53">-<pos:position pos:line="39" pos:column="54"/></operator> <name pos:line="39" pos:column="55">offset<pos:position pos:line="39" pos:column="61"/></name></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">memcpy<pos:position pos:line="40" pos:column="11"/></name>  <argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">before<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="22">entry<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">entry_len<pos:position pos:line="40" pos:column="38"/></name></expr></argument>)<pos:position pos:line="40" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* Assign new values.  */</comment>
    <expr_stmt><expr><operator pos:line="43" pos:column="5">*<pos:position pos:line="43" pos:column="6"/></operator><name pos:line="43" pos:column="6">pargz<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">argz<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="44" pos:column="5">*<pos:position pos:line="44" pos:column="6"/></operator><name pos:line="44" pos:column="6">pargz_len<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">argz_len<pos:position pos:line="44" pos:column="26"/></name></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block>

  <return pos:line="47" pos:column="3">return <expr><literal type="number" pos:line="47" pos:column="10">0<pos:position pos:line="47" pos:column="11"/></literal></expr>;<pos:position pos:line="47" pos:column="12"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></unit>
