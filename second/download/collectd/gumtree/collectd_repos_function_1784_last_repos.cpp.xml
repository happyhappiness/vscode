<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1784_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dpdk_helper_cmd_wait<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">dpdk_helper_ctx_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">phc<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">pid_t<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">ppid<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list> <block pos:line="1" pos:column="69">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">DPDK_CHILD_TRACE<pos:position pos:line="2" pos:column="19"/></name><argument_list pos:line="2" pos:column="19">(<argument><expr><name><name pos:line="2" pos:column="20">phc<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">-&gt;<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="25">shm_name<pos:position pos:line="2" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="2" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="35"/></expr_stmt>

  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">timespec<pos:position pos:line="4" pos:column="18"/></name></name></type> <name pos:line="4" pos:column="19">ts<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">cdtime_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">now<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><call><name pos:line="5" pos:column="18">cdtime<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">()<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">cdtime_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">cmd_wait_time<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><call><name pos:line="6" pos:column="28">MS_TO_CDTIME_T<pos:position pos:line="6" pos:column="42"/></name><argument_list pos:line="6" pos:column="42">(<argument><expr><literal type="number" pos:line="6" pos:column="43">1500<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call> <operator pos:line="6" pos:column="49">+<pos:position pos:line="6" pos:column="50"/></operator> <name><name pos:line="6" pos:column="51">phc<pos:position pos:line="6" pos:column="54"/></name><operator pos:line="6" pos:column="54">-&gt;<pos:position pos:line="6" pos:column="59"/></operator><name pos:line="6" pos:column="56">cmd_wait_time<pos:position pos:line="6" pos:column="69"/></name></name> <operator pos:line="6" pos:column="70">*<pos:position pos:line="6" pos:column="71"/></operator> <literal type="number" pos:line="6" pos:column="72">2<pos:position pos:line="6" pos:column="73"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="74"/></decl_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">ts<pos:position pos:line="7" pos:column="5"/></name> <operator pos:line="7" pos:column="6">=<pos:position pos:line="7" pos:column="7"/></operator> <call><name pos:line="7" pos:column="8">CDTIME_T_TO_TIMESPEC<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">now<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">+<pos:position pos:line="7" pos:column="34"/></operator> <name pos:line="7" pos:column="35">cmd_wait_time<pos:position pos:line="7" pos:column="48"/></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">ret<pos:position pos:line="9" pos:column="10"/></name> <init pos:line="9" pos:column="11">= <expr><call><name pos:line="9" pos:column="13">sem_timedwait<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><operator pos:line="9" pos:column="27">&amp;<pos:position pos:line="9" pos:column="32"/></operator><name><name pos:line="9" pos:column="28">phc<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">sema_cmd_start<pos:position pos:line="9" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="49">&amp;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="50">ts<pos:position pos:line="9" pos:column="52"/></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="54"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DPDK_CHILD_LOG<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><literal type="string" pos:line="10" pos:column="18">"%s:%s:%d pid=%lu got sema_cmd_start (ret=%d, errno=%d)\n"<pos:position pos:line="10" pos:column="76"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="11" pos:column="18">phc<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">shm_name<pos:position pos:line="11" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">__FUNCTION__<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="47">__LINE__<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="57">(<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="58">long<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">)<pos:position pos:line="11" pos:column="63"/></operator><call><name pos:line="11" pos:column="63">getpid<pos:position pos:line="11" pos:column="69"/></name><argument_list pos:line="11" pos:column="69">()<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="73">ret<pos:position pos:line="11" pos:column="76"/></name></expr></argument>,
                 <argument><expr><name pos:line="12" pos:column="18">errno<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name><name pos:line="14" pos:column="7">phc<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">cmd<pos:position pos:line="14" pos:column="15"/></name></name> <operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">DPDK_CMD_QUIT<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33"> <block pos:line="14" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"%s:%s:%d pid=%lu exiting\n"<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="50">phc<pos:position pos:line="15" pos:column="53"/></name><operator pos:line="15" pos:column="53">-&gt;<pos:position pos:line="15" pos:column="58"/></operator><name pos:line="15" pos:column="55">shm_name<pos:position pos:line="15" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">__FUNCTION__<pos:position pos:line="15" pos:column="77"/></name></expr></argument>,
                   <argument><expr><name pos:line="16" pos:column="20">__LINE__<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="30">(<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">long<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">)<pos:position pos:line="16" pos:column="36"/></operator><call><name pos:line="16" pos:column="36">getpid<pos:position pos:line="16" pos:column="42"/></name><argument_list pos:line="16" pos:column="42">()<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">exit<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><literal type="number" pos:line="17" pos:column="10">0<pos:position pos:line="17" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then> <elseif pos:line="18" pos:column="5">else <if pos:line="18" pos:column="10">if <condition pos:line="18" pos:column="13">(<expr><name pos:line="18" pos:column="14">ret<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <operator pos:line="18" pos:column="21">-<pos:position pos:line="18" pos:column="22"/></operator><literal type="number" pos:line="18" pos:column="22">1<pos:position pos:line="18" pos:column="23"/></literal> <operator pos:line="18" pos:column="24">&amp;&amp;<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="27">errno<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">==<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="36">ETIMEDOUT<pos:position pos:line="18" pos:column="45"/></name></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46"> <block pos:line="18" pos:column="47">{
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">phc<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">status<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">DPDK_HELPER_ALIVE_SENDING_EVENTS<pos:position pos:line="19" pos:column="56"/></name></expr>)<pos:position pos:line="19" pos:column="57"/></condition><then pos:line="19" pos:column="57"> <block pos:line="19" pos:column="58">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><literal type="string" pos:line="20" pos:column="22">"%s:dpdk_helper_cmd_wait: sem timedwait()"<pos:position pos:line="20" pos:column="64"/></literal>
                     <literal type="string" pos:line="21" pos:column="22">" timeout, did collectd terminate?\n"<pos:position pos:line="21" pos:column="59"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="22" pos:column="22">phc<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">-&gt;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="27">shm_name<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">dpdk_helper_exit<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">phc<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="29">DPDK_HELPER_GRACEFUL_QUIT<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if></elseif></if>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">COLLECT_DEBUG<pos:position pos:line="26" pos:column="18"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">int<pos:position pos:line="27" pos:column="6"/></name></type> <name pos:line="27" pos:column="7">val<pos:position pos:line="27" pos:column="10"/></name> <init pos:line="27" pos:column="11">= <expr><literal type="number" pos:line="27" pos:column="13">0<pos:position pos:line="27" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="15"/></decl_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">sem_getvalue<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><operator pos:line="28" pos:column="20">&amp;<pos:position pos:line="28" pos:column="25"/></operator><name><name pos:line="28" pos:column="21">phc<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">-&gt;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="26">sema_cmd_start<pos:position pos:line="28" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="42">&amp;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="43">val<pos:position pos:line="28" pos:column="46"/></name></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></call> <operator pos:line="28" pos:column="48">==<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="51">0<pos:position pos:line="28" pos:column="52"/></literal></expr>)<pos:position pos:line="28" pos:column="53"/></condition><then pos:line="28" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="string" pos:line="29" pos:column="20">"%s:%s:%d pid=%lu wait sema_cmd_start (value=%d)\n"<pos:position pos:line="29" pos:column="71"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="30" pos:column="20">phc<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">shm_name<pos:position pos:line="30" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">__FUNCTION__<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">__LINE__<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="59">(<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="60">long<pos:position pos:line="30" pos:column="64"/></name><operator pos:line="30" pos:column="64">)<pos:position pos:line="30" pos:column="65"/></operator><call><name pos:line="30" pos:column="65">getpid<pos:position pos:line="30" pos:column="71"/></name><argument_list pos:line="30" pos:column="71">()<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="75">val<pos:position pos:line="30" pos:column="78"/></name></expr></argument>)<pos:position pos:line="30" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="80"/></expr_stmt></block></then></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="33" pos:column="3">/* Parent PID change means collectd died so quit the helper process. */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">ppid<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">!=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">getppid<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">()<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25"> <block pos:line="34" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="string" pos:line="35" pos:column="20">"dpdk_helper_cmd_wait: parent PID changed, quitting.\n"<pos:position pos:line="35" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">dpdk_helper_exit<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">phc<pos:position pos:line="36" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="27">DPDK_HELPER_GRACEFUL_QUIT<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="39" pos:column="3">/* Checking for DPDK primary process. */</comment>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><operator pos:line="40" pos:column="7">!<pos:position pos:line="40" pos:column="8"/></operator><call><name pos:line="40" pos:column="8">rte_eal_primary_proc_alive<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name><name pos:line="40" pos:column="35">phc<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">-&gt;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="40">eal_config<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">.<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="51">file_prefix<pos:position pos:line="40" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64"> <block pos:line="40" pos:column="65">{
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">phc<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">eal_initialized<pos:position pos:line="41" pos:column="29"/></name></name></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30"> <block pos:line="41" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(
          <argument><expr><literal type="string" pos:line="43" pos:column="11">"%s:dpdk_helper_cmd_wait: no primary alive but EAL initialized:"<pos:position pos:line="43" pos:column="75"/></literal>
          <literal type="string" pos:line="44" pos:column="11">" quitting.\n"<pos:position pos:line="44" pos:column="25"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="45" pos:column="11">phc<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">shm_name<pos:position pos:line="45" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">dpdk_helper_exit<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">phc<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">DPDK_HELPER_NOT_INITIALIZED<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="49" pos:column="5">phc<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">-&gt;<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="10">status<pos:position pos:line="49" pos:column="16"/></name></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">DPDK_HELPER_WAITING_ON_PRIMARY<pos:position pos:line="49" pos:column="49"/></name></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="string" pos:line="50" pos:column="20">"%s:%s:%d DPDK_HELPER_WAITING_ON_PRIMARY\n"<pos:position pos:line="50" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="65">phc<pos:position pos:line="50" pos:column="68"/></name><operator pos:line="50" pos:column="68">-&gt;<pos:position pos:line="50" pos:column="73"/></operator><name pos:line="50" pos:column="70">shm_name<pos:position pos:line="50" pos:column="78"/></name></name></expr></argument>,
                   <argument><expr><name pos:line="51" pos:column="20">__FUNCTION__<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="34">__LINE__<pos:position pos:line="51" pos:column="42"/></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>

    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><operator pos:line="56" pos:column="7">!<pos:position pos:line="56" pos:column="8"/></operator><name><name pos:line="56" pos:column="8">phc<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">eal_initialized<pos:position pos:line="56" pos:column="28"/></name></name></expr>)<pos:position pos:line="56" pos:column="29"/></condition><then pos:line="56" pos:column="29"> <block pos:line="56" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">int<pos:position pos:line="57" pos:column="8"/></name></type> <name pos:line="57" pos:column="9">ret<pos:position pos:line="57" pos:column="12"/></name> <init pos:line="57" pos:column="13">= <expr><call><name pos:line="57" pos:column="15">dpdk_helper_eal_init<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">phc<pos:position pos:line="57" pos:column="39"/></name></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="41"/></decl_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">ret<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">!=<pos:position pos:line="58" pos:column="15"/></operator> <literal type="number" pos:line="58" pos:column="16">0<pos:position pos:line="58" pos:column="17"/></literal></expr>)<pos:position pos:line="58" pos:column="18"/></condition><then pos:line="58" pos:column="18"> <block pos:line="58" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">DPDK_CHILD_LOG<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><literal type="string" pos:line="59" pos:column="22">"Error initializing EAL\n"<pos:position pos:line="59" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">dpdk_helper_exit<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">phc<pos:position pos:line="60" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="29">DPDK_HELPER_NOT_INITIALIZED<pos:position pos:line="60" pos:column="56"/></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">phc<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">-&gt;<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="10">status<pos:position pos:line="62" pos:column="16"/></name></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">DPDK_HELPER_ALIVE_SENDING_EVENTS<pos:position pos:line="62" pos:column="51"/></name></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">DPDK_CHILD_LOG<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><literal type="string" pos:line="63" pos:column="20">"%s:%s:%d DPDK_HELPER_ALIVE_SENDING_EVENTS\n"<pos:position pos:line="63" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="67">phc<pos:position pos:line="63" pos:column="70"/></name><operator pos:line="63" pos:column="70">-&gt;<pos:position pos:line="63" pos:column="75"/></operator><name pos:line="63" pos:column="72">shm_name<pos:position pos:line="63" pos:column="80"/></name></name></expr></argument>,
                   <argument><expr><name pos:line="64" pos:column="20">__FUNCTION__<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="34">__LINE__<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt>
    <return pos:line="65" pos:column="5">return <expr><operator pos:line="65" pos:column="12">-<pos:position pos:line="65" pos:column="13"/></operator><literal type="number" pos:line="65" pos:column="13">1<pos:position pos:line="65" pos:column="14"/></literal></expr>;<pos:position pos:line="65" pos:column="15"/></return>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <return pos:line="68" pos:column="3">return <expr><literal type="number" pos:line="68" pos:column="10">0<pos:position pos:line="68" pos:column="11"/></literal></expr>;<pos:position pos:line="68" pos:column="12"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
