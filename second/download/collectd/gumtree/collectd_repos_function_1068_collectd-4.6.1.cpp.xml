<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1068_collectd-4.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_read_all_once<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">llentry_t<pos:position pos:line="3" pos:column="18"/></name>   <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">le<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">read_func_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">rf<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">return_status<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">list_read<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">NULL<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
	<block pos:line="9" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">NOTICE<pos:position pos:line="10" pos:column="23"/></name> <argument_list pos:line="10" pos:column="24">(<argument><expr><literal type="string" pos:line="10" pos:column="25">"No read-functions are registered."<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal><operator pos:line="11" pos:column="26">)<pos:position pos:line="11" pos:column="27"/></operator></expr>;<pos:position pos:line="11" pos:column="28"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><expr><name pos:line="14" pos:column="14">le<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">llist_head<pos:position pos:line="14" pos:column="29"/></name> <argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">list_read<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></init>
	     <condition><expr><name pos:line="15" pos:column="14">le<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">!=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">NULL<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></condition>
	     <incr><expr><name pos:line="16" pos:column="14">le<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name><name pos:line="16" pos:column="19">le<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">next<pos:position pos:line="16" pos:column="27"/></name></name></expr></incr>)<pos:position pos:line="16" pos:column="28"/></control>
	<block pos:line="17" pos:column="9">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">rf<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">read_func_t<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><operator pos:line="18" pos:column="36">)<pos:position pos:line="18" pos:column="37"/></operator> <name><name pos:line="18" pos:column="38">le<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">value<pos:position pos:line="18" pos:column="47"/></name></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">status<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name><name pos:line="19" pos:column="26">rf<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">callback<pos:position pos:line="19" pos:column="38"/></name></name> <argument_list pos:line="19" pos:column="39">()<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">status<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">!=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
		<block pos:line="21" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">NOTICE<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><literal type="string" pos:line="22" pos:column="33">"read-function of plugin `%s' failed."<pos:position pos:line="22" pos:column="71"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="23" pos:column="33">le<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">key<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">return_status<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">=<pos:position pos:line="24" pos:column="40"/></operator> <operator pos:line="24" pos:column="41">-<pos:position pos:line="24" pos:column="42"/></operator><literal type="number" pos:line="24" pos:column="42">1<pos:position pos:line="24" pos:column="43"/></literal></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></for>

	<return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">return_status<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">)<pos:position pos:line="28" pos:column="31"/></operator></expr>;<pos:position pos:line="28" pos:column="32"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
