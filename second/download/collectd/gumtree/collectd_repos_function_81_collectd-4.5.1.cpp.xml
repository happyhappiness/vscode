<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_81_collectd-4.5.1.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">lt_dlpath_insertdir<pos:position pos:line="2" pos:column="20"/></name> <argument_list pos:line="2" pos:column="21">(<argument><expr><name pos:line="2" pos:column="22">ppath<pos:position pos:line="2" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="29">before<pos:position pos:line="2" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="37">dir<pos:position pos:line="2" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2" pos:column="41"/></argument_list>
     <name pos:line="3" pos:column="6">char<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><name pos:line="3" pos:column="13">ppath<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">char<pos:position pos:line="4" pos:column="10"/></name> <modifier pos:line="4" pos:column="11">*<pos:position pos:line="4" pos:column="12"/></modifier></type><name pos:line="4" pos:column="12">before<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="5" pos:column="6">const<pos:position pos:line="5" pos:column="11"/></specifier> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">dir<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type>    <name pos:line="7" pos:column="10">errors<pos:position pos:line="7" pos:column="16"/></name>		<init pos:line="7" pos:column="25">= <expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name>  <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">canonical<pos:position pos:line="8" pos:column="19"/></name>	<init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name>  <modifier pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></modifier></type><name pos:line="9" pos:column="10">argz<pos:position pos:line="9" pos:column="14"/></name>		<init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">argz_len<pos:position pos:line="10" pos:column="18"/></name>	<init pos:line="10" pos:column="25">= <expr><literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">ppath<pos:position pos:line="12" pos:column="16"/></name></expr></argument>)<pos:position pos:line="12" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">dir<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&amp;&amp;<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="18">*<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">dir<pos:position pos:line="13" pos:column="22"/></name></expr></argument>)<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">canonicalize_path<pos:position pos:line="15" pos:column="24"/></name> <argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">dir<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">canonical<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call> <operator pos:line="15" pos:column="43">!=<pos:position pos:line="15" pos:column="45"/></operator> <literal type="number" pos:line="15" pos:column="46">0<pos:position pos:line="15" pos:column="47"/></literal></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48">
    <block pos:line="16" pos:column="5">{
      <expr_stmt><expr><operator pos:line="17" pos:column="7">++<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">errors<pos:position pos:line="17" pos:column="15"/></name></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
      <goto pos:line="18" pos:column="7">goto <name pos:line="18" pos:column="12">cleanup<pos:position pos:line="18" pos:column="19"/></name>;<pos:position pos:line="18" pos:column="20"/></goto>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">assert<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">canonical<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">&amp;&amp;<pos:position pos:line="21" pos:column="31"/></operator> <operator pos:line="21" pos:column="24">*<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">canonical<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* If *PPATH is empty, set it to DIR.  */</comment>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><operator pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">ppath<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
    <block pos:line="25" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">assert<pos:position pos:line="26" pos:column="13"/></name> <argument_list pos:line="26" pos:column="14">(<argument><expr><operator pos:line="26" pos:column="15">!<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">before<pos:position pos:line="26" pos:column="22"/></name></expr></argument>)<pos:position pos:line="26" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="26" pos:column="33">/* BEFORE cannot be set without PPATH.  */</comment>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">assert<pos:position pos:line="27" pos:column="13"/></name> <argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">dir<pos:position pos:line="27" pos:column="18"/></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>		<comment type="block" pos:line="27" pos:column="33">/* Without DIR, don't call this function!  */</comment>

      <expr_stmt><expr><operator pos:line="29" pos:column="7">*<pos:position pos:line="29" pos:column="8"/></operator><name pos:line="29" pos:column="8">ppath<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">lt_estrdup<pos:position pos:line="29" pos:column="26"/></name> <argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">dir<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><operator pos:line="30" pos:column="11">*<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">ppath<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">==<pos:position pos:line="30" pos:column="20"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
	<block type="pseudo"><expr_stmt><expr><operator pos:line="31" pos:column="9">++<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">errors<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt></block></then></if>

      <return pos:line="33" pos:column="7">return <expr><name pos:line="33" pos:column="14">errors<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">assert<pos:position pos:line="36" pos:column="9"/></name> <argument_list pos:line="36" pos:column="10">(<argument><expr><name pos:line="36" pos:column="11">ppath<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">&amp;&amp;<pos:position pos:line="36" pos:column="27"/></operator> <operator pos:line="36" pos:column="20">*<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">ppath<pos:position pos:line="36" pos:column="26"/></name></expr></argument>)<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><call><name pos:line="38" pos:column="7">argzize_path<pos:position pos:line="38" pos:column="19"/></name> <argument_list pos:line="38" pos:column="20">(<argument><expr><operator pos:line="38" pos:column="21">*<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">ppath<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="30">argz<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="37">argz_len<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call> <operator pos:line="38" pos:column="47">!=<pos:position pos:line="38" pos:column="49"/></operator> <literal type="number" pos:line="38" pos:column="50">0<pos:position pos:line="38" pos:column="51"/></literal></expr>)<pos:position pos:line="38" pos:column="52"/></condition><then pos:line="38" pos:column="52">
    <block pos:line="39" pos:column="5">{
      <expr_stmt><expr><operator pos:line="40" pos:column="7">++<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="9">errors<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>
      <goto pos:line="41" pos:column="7">goto <name pos:line="41" pos:column="12">cleanup<pos:position pos:line="41" pos:column="19"/></name>;<pos:position pos:line="41" pos:column="20"/></goto>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="44" pos:column="3">/* Convert BEFORE into an equivalent offset into ARGZ.  This only works
     if *PPATH is already canonicalized, and hence does not change length
     with respect to ARGZ.  We canonicalize each entry as it is added to
     the search path, and don't call this function with (uncanonicalized)
     user paths, so this is a fair assumption.  */</comment>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name pos:line="49" pos:column="7">before<pos:position pos:line="49" pos:column="13"/></name></expr>)<pos:position pos:line="49" pos:column="14"/></condition><then pos:line="49" pos:column="14">
    <block pos:line="50" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">assert<pos:position pos:line="51" pos:column="13"/></name> <argument_list pos:line="51" pos:column="14">(<argument><expr><operator pos:line="51" pos:column="15">*<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">ppath<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">&lt;=<pos:position pos:line="51" pos:column="27"/></operator> <name pos:line="51" pos:column="25">before<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">assert<pos:position pos:line="52" pos:column="13"/></name> <argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">before<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">-<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">*<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">ppath<pos:position pos:line="52" pos:column="30"/></name> <operator pos:line="52" pos:column="31">&lt;=<pos:position pos:line="52" pos:column="36"/></operator> <call><name pos:line="52" pos:column="34">strlen<pos:position pos:line="52" pos:column="40"/></name> <argument_list pos:line="52" pos:column="41">(<argument><expr><operator pos:line="52" pos:column="42">*<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="43">ppath<pos:position pos:line="52" pos:column="48"/></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>

      <expr_stmt><expr><name pos:line="54" pos:column="7">before<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <name pos:line="54" pos:column="16">before<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">-<pos:position pos:line="54" pos:column="24"/></operator> <operator pos:line="54" pos:column="25">*<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">ppath<pos:position pos:line="54" pos:column="31"/></name> <operator pos:line="54" pos:column="32">+<pos:position pos:line="54" pos:column="33"/></operator> <name pos:line="54" pos:column="34">argz<pos:position pos:line="54" pos:column="38"/></name></expr>;<pos:position pos:line="54" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><call><name pos:line="57" pos:column="7">lt_argz_insert<pos:position pos:line="57" pos:column="21"/></name> <argument_list pos:line="57" pos:column="22">(<argument><expr><operator pos:line="57" pos:column="23">&amp;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="24">argz<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="30">&amp;<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="31">argz_len<pos:position pos:line="57" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="41">before<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="49">dir<pos:position pos:line="57" pos:column="52"/></name></expr></argument>)<pos:position pos:line="57" pos:column="53"/></argument_list></call> <operator pos:line="57" pos:column="54">!=<pos:position pos:line="57" pos:column="56"/></operator> <literal type="number" pos:line="57" pos:column="57">0<pos:position pos:line="57" pos:column="58"/></literal></expr>)<pos:position pos:line="57" pos:column="59"/></condition><then pos:line="57" pos:column="59">
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><operator pos:line="59" pos:column="7">++<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">errors<pos:position pos:line="59" pos:column="15"/></name></expr>;<pos:position pos:line="59" pos:column="16"/></expr_stmt>
      <goto pos:line="60" pos:column="7">goto <name pos:line="60" pos:column="12">cleanup<pos:position pos:line="60" pos:column="19"/></name>;<pos:position pos:line="60" pos:column="20"/></goto>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="63" pos:column="3">argz_stringify<pos:position pos:line="63" pos:column="17"/></name> <argument_list pos:line="63" pos:column="18">(<argument><expr><name pos:line="63" pos:column="19">argz<pos:position pos:line="63" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="25">argz_len<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="35">LT_PATHSEP_CHAR<pos:position pos:line="63" pos:column="50"/></name></expr></argument>)<pos:position pos:line="63" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">LT_DLMEM_REASSIGN<pos:position pos:line="64" pos:column="20"/></name> <argument_list pos:line="64" pos:column="21">(<argument><expr><operator pos:line="64" pos:column="22">*<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="23">ppath<pos:position pos:line="64" pos:column="28"/></name></expr></argument>,  <argument><expr><name pos:line="64" pos:column="31">argz<pos:position pos:line="64" pos:column="35"/></name></expr></argument>)<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>

 <label><name pos:line="66" pos:column="2">cleanup<pos:position pos:line="66" pos:column="9"/></name>:<pos:position pos:line="66" pos:column="10"/></label>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">LT_DLFREE<pos:position pos:line="67" pos:column="12"/></name> <argument_list pos:line="67" pos:column="13">(<argument><expr><name pos:line="67" pos:column="14">canonical<pos:position pos:line="67" pos:column="23"/></name></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">LT_DLFREE<pos:position pos:line="68" pos:column="12"/></name> <argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">argz<pos:position pos:line="68" pos:column="18"/></name></expr></argument>)<pos:position pos:line="68" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="20"/></expr_stmt>

  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">errors<pos:position pos:line="70" pos:column="16"/></name></expr>;<pos:position pos:line="70" pos:column="17"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></unit>
