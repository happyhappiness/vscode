<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_318_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mr_free_regex<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">mr_regex_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">r<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <comment type="block" pos:line="1" pos:column="43">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">r<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">==<pos:position pos:line="3" pos:column="17"/></operator> <name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr>)<pos:position pos:line="3" pos:column="23"/></condition><then pos:line="3" pos:column="23">
		<block type="pseudo"><return pos:line="4" pos:column="17">return;<pos:position pos:line="4" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">regfree<pos:position pos:line="6" pos:column="16"/></name> <argument_list pos:line="6" pos:column="17">(<argument><expr><operator pos:line="6" pos:column="18">&amp;<pos:position pos:line="6" pos:column="23"/></operator><name><name pos:line="6" pos:column="19">r<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">re<pos:position pos:line="6" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator><name><name pos:line="7" pos:column="18">r<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">re<pos:position pos:line="7" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="28">sizeof <argument_list pos:line="7" pos:column="35">(<argument><expr><name><name pos:line="7" pos:column="36">r<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">re<pos:position pos:line="7" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">free<pos:position pos:line="8" pos:column="13"/></name> <argument_list pos:line="8" pos:column="14">(<argument><expr><name><name pos:line="8" pos:column="15">r<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">re_str<pos:position pos:line="8" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">r<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">next<pos:position pos:line="10" pos:column="20"/></name></name> <operator pos:line="10" pos:column="21">!=<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">mr_free_regex<pos:position pos:line="11" pos:column="30"/></name> <argument_list pos:line="11" pos:column="31">(<argument><expr><name><name pos:line="11" pos:column="32">r<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">next<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt></block></then></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
