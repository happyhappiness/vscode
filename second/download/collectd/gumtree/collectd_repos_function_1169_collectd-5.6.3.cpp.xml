<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1169_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">logfile_print<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">msg<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">severity<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">cdtime_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">timestamp_time<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <block pos:line="2" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">fh<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">_Bool<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">do_close<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">tm<pos:position pos:line="5" pos:column="12"/></name></name></type> <name pos:line="5" pos:column="13">timestamp_tm<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">timestamp_str<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">64<pos:position pos:line="6" pos:column="24"/></literal></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">level_str<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><literal type="number" pos:line="7" pos:column="18">16<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name> <init pos:line="7" pos:column="22">= <expr><literal type="string" pos:line="7" pos:column="24">""<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">print_severity<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <block pos:line="9" pos:column="23">{
    <switch pos:line="10" pos:column="5">switch <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">severity<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition> <block pos:line="10" pos:column="23">{
    <case pos:line="11" pos:column="5">case <expr><name pos:line="11" pos:column="10">LOG_ERR<pos:position pos:line="11" pos:column="17"/></name></expr>:<pos:position pos:line="11" pos:column="18"/></case>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">snprintf<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">level_str<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="27">sizeof<argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">level_str<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="46">"[error] "<pos:position pos:line="12" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
      <break pos:line="13" pos:column="7">break;<pos:position pos:line="13" pos:column="13"/></break>
    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">LOG_WARNING<pos:position pos:line="14" pos:column="21"/></name></expr>:<pos:position pos:line="14" pos:column="22"/></case>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">snprintf<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">level_str<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="27">sizeof<argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">level_str<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="46">"[warning] "<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
      <break pos:line="16" pos:column="7">break;<pos:position pos:line="16" pos:column="13"/></break>
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">LOG_NOTICE<pos:position pos:line="17" pos:column="20"/></name></expr>:<pos:position pos:line="17" pos:column="21"/></case>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">snprintf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">level_str<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof<argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">level_str<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="46">"[notice] "<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt>
      <break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break>
    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">LOG_INFO<pos:position pos:line="20" pos:column="18"/></name></expr>:<pos:position pos:line="20" pos:column="19"/></case>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">snprintf<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">level_str<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="27">sizeof<argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">level_str<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="46">"[info] "<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
      <break pos:line="22" pos:column="7">break;<pos:position pos:line="22" pos:column="13"/></break>
    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">LOG_DEBUG<pos:position pos:line="23" pos:column="19"/></name></expr>:<pos:position pos:line="23" pos:column="20"/></case>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">snprintf<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">level_str<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="27">sizeof<argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">level_str<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="46">"[debug] "<pos:position pos:line="24" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
      <break pos:line="25" pos:column="7">break;<pos:position pos:line="25" pos:column="13"/></break>
    <default pos:line="26" pos:column="5">default:<pos:position pos:line="26" pos:column="13"/></default>
      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break>
    }<pos:position pos:line="28" pos:column="6"/></block></switch>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">print_timestamp<pos:position pos:line="31" pos:column="22"/></name></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23"> <block pos:line="31" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">time_t<pos:position pos:line="32" pos:column="11"/></name></type> <name pos:line="32" pos:column="12">tt<pos:position pos:line="32" pos:column="14"/></name> <init pos:line="32" pos:column="15">= <expr><call><name pos:line="32" pos:column="17">CDTIME_T_TO_TIME_T<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">timestamp_time<pos:position pos:line="32" pos:column="50"/></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">localtime_r<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><operator pos:line="33" pos:column="17">&amp;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="18">tt<pos:position pos:line="33" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="23">timestamp_tm<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">strftime<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">timestamp_str<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="29">sizeof<argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">timestamp_str<pos:position pos:line="35" pos:column="49"/></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="52">"%Y-%m-%d %H:%M:%S"<pos:position pos:line="35" pos:column="71"/></literal></expr></argument>,
             <argument><expr><operator pos:line="36" pos:column="14">&amp;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="15">timestamp_tm<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">timestamp_str<pos:position pos:line="37" pos:column="18"/></name><index pos:line="37" pos:column="18">[<expr><sizeof pos:line="37" pos:column="19">sizeof<argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">timestamp_str<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></sizeof> <operator pos:line="37" pos:column="41">-<pos:position pos:line="37" pos:column="42"/></operator> <literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr>]<pos:position pos:line="37" pos:column="45"/></index></name> <operator pos:line="37" pos:column="46">=<pos:position pos:line="37" pos:column="47"/></operator> <literal type="char" pos:line="37" pos:column="48">'\0'<pos:position pos:line="37" pos:column="52"/></literal></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">pthread_mutex_lock<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><operator pos:line="40" pos:column="22">&amp;<pos:position pos:line="40" pos:column="27"/></operator><name pos:line="40" pos:column="23">file_lock<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">log_file<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">==<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">NULL<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
    <expr_stmt><expr><name pos:line="43" pos:column="5">fh<pos:position pos:line="43" pos:column="7"/></name> <operator pos:line="43" pos:column="8">=<pos:position pos:line="43" pos:column="9"/></operator> <name pos:line="43" pos:column="10">stderr<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></then> <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><call><name pos:line="44" pos:column="14">strcasecmp<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">log_file<pos:position pos:line="44" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="35">"stderr"<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call> <operator pos:line="44" pos:column="45">==<pos:position pos:line="44" pos:column="47"/></operator> <literal type="number" pos:line="44" pos:column="48">0<pos:position pos:line="44" pos:column="49"/></literal></expr>)<pos:position pos:line="44" pos:column="50"/></condition><then pos:line="44" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="5">fh<pos:position pos:line="45" pos:column="7"/></name> <operator pos:line="45" pos:column="8">=<pos:position pos:line="45" pos:column="9"/></operator> <name pos:line="45" pos:column="10">stderr<pos:position pos:line="45" pos:column="16"/></name></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="46" pos:column="3">else <if pos:line="46" pos:column="8">if <condition pos:line="46" pos:column="11">(<expr><call><name pos:line="46" pos:column="12">strcasecmp<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">log_file<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="33">"stdout"<pos:position pos:line="46" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call> <operator pos:line="46" pos:column="43">==<pos:position pos:line="46" pos:column="45"/></operator> <literal type="number" pos:line="46" pos:column="46">0<pos:position pos:line="46" pos:column="47"/></literal></expr>)<pos:position pos:line="46" pos:column="48"/></condition><then pos:line="46" pos:column="48">
    <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="5">fh<pos:position pos:line="47" pos:column="7"/></name> <operator pos:line="47" pos:column="8">=<pos:position pos:line="47" pos:column="9"/></operator> <name pos:line="47" pos:column="10">stdout<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt></block></then></if></elseif>
  <else pos:line="48" pos:column="3">else <block pos:line="48" pos:column="8">{
    <expr_stmt><expr><name pos:line="49" pos:column="5">fh<pos:position pos:line="49" pos:column="7"/></name> <operator pos:line="49" pos:column="8">=<pos:position pos:line="49" pos:column="9"/></operator> <call><name pos:line="49" pos:column="10">fopen<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><name pos:line="49" pos:column="16">log_file<pos:position pos:line="49" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="26">"a"<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">do_close<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <literal type="number" pos:line="50" pos:column="16">1<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></else></if>

  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">fh<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">==<pos:position pos:line="53" pos:column="12"/></operator> <name pos:line="53" pos:column="13">NULL<pos:position pos:line="53" pos:column="17"/></name></expr>)<pos:position pos:line="53" pos:column="18"/></condition><then pos:line="53" pos:column="18"> <block pos:line="53" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">char<pos:position pos:line="54" pos:column="9"/></name></type> <name><name pos:line="54" pos:column="10">errbuf<pos:position pos:line="54" pos:column="16"/></name><index pos:line="54" pos:column="16">[<expr><literal type="number" pos:line="54" pos:column="17">1024<pos:position pos:line="54" pos:column="21"/></literal></expr>]<pos:position pos:line="54" pos:column="22"/></index></name></decl>;<pos:position pos:line="54" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">fprintf<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">stderr<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="21">"logfile plugin: fopen (%s) failed: %s\n"<pos:position pos:line="55" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="64">log_file<pos:position pos:line="55" pos:column="72"/></name></expr></argument>,
            <argument><expr><call><name pos:line="56" pos:column="13">sstrerror<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name pos:line="56" pos:column="23">errno<pos:position pos:line="56" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="30">errbuf<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="38">sizeof<argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">errbuf<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then> <else pos:line="57" pos:column="5">else <block pos:line="57" pos:column="10">{
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">print_timestamp<pos:position pos:line="58" pos:column="24"/></name></expr>)<pos:position pos:line="58" pos:column="25"/></condition><then pos:line="58" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="7">fprintf<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><name pos:line="59" pos:column="15">fh<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="19">"[%s] %s%s\n"<pos:position pos:line="59" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">timestamp_str<pos:position pos:line="59" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="49">level_str<pos:position pos:line="59" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="60">msg<pos:position pos:line="59" pos:column="63"/></name></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="65"/></expr_stmt></block></then>
    <else pos:line="60" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="7">fprintf<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">fh<pos:position pos:line="61" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"%s%s\n"<pos:position pos:line="61" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="29">level_str<pos:position pos:line="61" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">msg<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt></block></else></if>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">do_close<pos:position pos:line="63" pos:column="17"/></name></expr>)<pos:position pos:line="63" pos:column="18"/></condition><then pos:line="63" pos:column="18"> <block pos:line="63" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">fclose<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">fh<pos:position pos:line="64" pos:column="16"/></name></expr></argument>)<pos:position pos:line="64" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then> <else pos:line="65" pos:column="7">else <block pos:line="65" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">fflush<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">fh<pos:position pos:line="66" pos:column="16"/></name></expr></argument>)<pos:position pos:line="66" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>
  }<pos:position pos:line="68" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">pthread_mutex_unlock<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><operator pos:line="70" pos:column="24">&amp;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="25">file_lock<pos:position pos:line="70" pos:column="34"/></name></expr></argument>)<pos:position pos:line="70" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt>

  <return pos:line="72" pos:column="3">return;<pos:position pos:line="72" pos:column="10"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
