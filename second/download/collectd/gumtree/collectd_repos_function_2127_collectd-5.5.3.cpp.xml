<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2127_collectd-5.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">lcc_server_set_interface<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">lcc_server_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">srv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">interface<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list> <comment type="block" pos:line="1" pos:column="73">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">if_index<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">srv<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">==<pos:position pos:line="6" pos:column="14"/></operator> <name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">)<pos:position pos:line="6" pos:column="20"/></operator> <operator pos:line="6" pos:column="21">||<pos:position pos:line="6" pos:column="23"/></operator> <operator pos:line="6" pos:column="24">(<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">interface<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">==<pos:position pos:line="6" pos:column="37"/></operator> <name pos:line="6" pos:column="38">NULL<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">)<pos:position pos:line="6" pos:column="43"/></operator></expr>)<pos:position pos:line="6" pos:column="44"/></condition><then pos:line="6" pos:column="44">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">if_index<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">if_nametoindex<pos:position pos:line="9" pos:column="28"/></name> <argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">interface<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">if_index<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">ENOENT<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator></expr>;<pos:position pos:line="11" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* IPv4 multicast */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name><name pos:line="14" pos:column="7">srv<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">sa<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">sa_family<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">==<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">AF_INET<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
  <block pos:line="15" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">struct<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">sockaddr_in<pos:position pos:line="16" pos:column="23"/></name></name> <modifier pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></modifier></type><name pos:line="16" pos:column="25">addr<pos:position pos:line="16" pos:column="29"/></name> <init pos:line="16" pos:column="30">= <expr><operator pos:line="16" pos:column="32">(<pos:position pos:line="16" pos:column="33"/></operator>struct <name pos:line="16" pos:column="40">sockaddr_in<pos:position pos:line="16" pos:column="51"/></name> <operator pos:line="16" pos:column="52">*<pos:position pos:line="16" pos:column="53"/></operator><operator pos:line="16" pos:column="53">)<pos:position pos:line="16" pos:column="54"/></operator> <name><name pos:line="16" pos:column="55">srv<pos:position pos:line="16" pos:column="58"/></name><operator pos:line="16" pos:column="58">-&gt;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="60">sa<pos:position pos:line="16" pos:column="62"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="63"/></decl_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">IN_MULTICAST<pos:position pos:line="18" pos:column="21"/></name> <argument_list pos:line="18" pos:column="22">(<argument><expr><call><name pos:line="18" pos:column="23">ntohl<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name><name pos:line="18" pos:column="30">addr<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">sin_addr<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">s_addr<pos:position pos:line="18" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="54"/></condition><then pos:line="18" pos:column="54">
    <block pos:line="19" pos:column="5">{
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="20" pos:column="37"/></name></expr></cpp:if>
      <comment type="block" pos:line="21" pos:column="7">/* If possible, use the "ip_mreqn" structure which has
       * an "interface index" member. Using the interface
       * index is preferred here, because of its similarity
       * to the way IPv6 handles this. Unfortunately, it
       * appears not to be portable. */</comment>
      <decl_stmt><decl><type><name><name pos:line="26" pos:column="7">struct<pos:position pos:line="26" pos:column="13"/></name> <name pos:line="26" pos:column="14">ip_mreqn<pos:position pos:line="26" pos:column="22"/></name></name></type> <name pos:line="26" pos:column="23">mreq<pos:position pos:line="26" pos:column="27"/></name></decl>;<pos:position pos:line="26" pos:column="28"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="28" pos:column="7">memset<pos:position pos:line="28" pos:column="13"/></name> <argument_list pos:line="28" pos:column="14">(<argument><expr><operator pos:line="28" pos:column="15">&amp;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="16">mreq<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="25">sizeof <argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">mreq<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">mreq<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">imr_multiaddr<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">s_addr<pos:position pos:line="29" pos:column="32"/></name></name> <operator pos:line="29" pos:column="33">=<pos:position pos:line="29" pos:column="34"/></operator> <name><name pos:line="29" pos:column="35">addr<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">-&gt;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="41">sin_addr<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">.<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="50">s_addr<pos:position pos:line="29" pos:column="56"/></name></name></expr>;<pos:position pos:line="29" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">mreq<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">imr_address<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">.<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">s_addr<pos:position pos:line="30" pos:column="30"/></name></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <call><name pos:line="30" pos:column="33">ntohl<pos:position pos:line="30" pos:column="38"/></name> <argument_list pos:line="30" pos:column="39">(<argument><expr><name pos:line="30" pos:column="40">INADDR_ANY<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="31" pos:column="7">mreq<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">imr_ifindex<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">if_index<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name><name pos:line="33" pos:column="7">struct<pos:position pos:line="33" pos:column="13"/></name> <name pos:line="33" pos:column="14">ip_mreq<pos:position pos:line="33" pos:column="21"/></name></name></type> <name pos:line="33" pos:column="22">mreq<pos:position pos:line="33" pos:column="26"/></name></decl>;<pos:position pos:line="33" pos:column="27"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="35" pos:column="7">memset<pos:position pos:line="35" pos:column="13"/></name> <argument_list pos:line="35" pos:column="14">(<argument><expr><operator pos:line="35" pos:column="15">&amp;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="16">mreq<pos:position pos:line="35" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="25">sizeof <argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">mreq<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">mreq<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">imr_multiaddr<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">.<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">s_addr<pos:position pos:line="36" pos:column="32"/></name></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <name><name pos:line="36" pos:column="35">addr<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-&gt;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="41">sin_addr<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">.<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">s_addr<pos:position pos:line="36" pos:column="56"/></name></name></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">mreq<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">imr_interface<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">.<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">s_addr<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <call><name pos:line="37" pos:column="35">ntohl<pos:position pos:line="37" pos:column="40"/></name> <argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">INADDR_ANY<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">setsockopt<pos:position pos:line="40" pos:column="26"/></name> <argument_list pos:line="40" pos:column="27">(<argument><expr><name><name pos:line="40" pos:column="28">srv<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">fd<pos:position pos:line="40" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="37">IPPROTO_IP<pos:position pos:line="40" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="49">IP_MULTICAST_IF<pos:position pos:line="40" pos:column="64"/></name></expr></argument>,
          <argument><expr><operator pos:line="41" pos:column="11">&amp;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="12">mreq<pos:position pos:line="41" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="18">sizeof <argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">mreq<pos:position pos:line="41" pos:column="30"/></name></expr></argument>)<pos:position pos:line="41" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">status<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">!=<pos:position pos:line="42" pos:column="20"/></operator> <literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23">
        <block type="pseudo"><return pos:line="43" pos:column="9">return <expr><operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">status<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">)<pos:position pos:line="43" pos:column="24"/></operator></expr>;<pos:position pos:line="43" pos:column="25"/></return></block></then></if>

      <return pos:line="45" pos:column="7">return <expr><operator pos:line="45" pos:column="14">(<pos:position pos:line="45" pos:column="15"/></operator><literal type="number" pos:line="45" pos:column="15">0<pos:position pos:line="45" pos:column="16"/></literal><operator pos:line="45" pos:column="16">)<pos:position pos:line="45" pos:column="17"/></operator></expr>;<pos:position pos:line="45" pos:column="18"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="49" pos:column="3">/* IPv6 multicast */</comment>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name><name pos:line="50" pos:column="7">srv<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">sa<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">-&gt;<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="16">sa_family<pos:position pos:line="50" pos:column="25"/></name></name> <operator pos:line="50" pos:column="26">==<pos:position pos:line="50" pos:column="28"/></operator> <name pos:line="50" pos:column="29">AF_INET6<pos:position pos:line="50" pos:column="37"/></name></expr>)<pos:position pos:line="50" pos:column="38"/></condition><then pos:line="50" pos:column="38">
  <block pos:line="51" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="52" pos:column="5">struct<pos:position pos:line="52" pos:column="11"/></name> <name pos:line="52" pos:column="12">sockaddr_in6<pos:position pos:line="52" pos:column="24"/></name></name> <modifier pos:line="52" pos:column="25">*<pos:position pos:line="52" pos:column="26"/></modifier></type><name pos:line="52" pos:column="26">addr<pos:position pos:line="52" pos:column="30"/></name> <init pos:line="52" pos:column="31">= <expr><operator pos:line="52" pos:column="33">(<pos:position pos:line="52" pos:column="34"/></operator>struct <name pos:line="52" pos:column="41">sockaddr_in6<pos:position pos:line="52" pos:column="53"/></name> <operator pos:line="52" pos:column="54">*<pos:position pos:line="52" pos:column="55"/></operator><operator pos:line="52" pos:column="55">)<pos:position pos:line="52" pos:column="56"/></operator> <name><name pos:line="52" pos:column="57">srv<pos:position pos:line="52" pos:column="60"/></name><operator pos:line="52" pos:column="60">-&gt;<pos:position pos:line="52" pos:column="65"/></operator><name pos:line="52" pos:column="62">sa<pos:position pos:line="52" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="52" pos:column="65"/></decl_stmt>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><call><name pos:line="54" pos:column="9">IN6_IS_ADDR_MULTICAST<pos:position pos:line="54" pos:column="30"/></name> <argument_list pos:line="54" pos:column="31">(<argument><expr><operator pos:line="54" pos:column="32">&amp;<pos:position pos:line="54" pos:column="37"/></operator><name><name pos:line="54" pos:column="33">addr<pos:position pos:line="54" pos:column="37"/></name><operator pos:line="54" pos:column="37">-&gt;<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="39">sin6_addr<pos:position pos:line="54" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="50"/></condition><then pos:line="54" pos:column="50">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">status<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <call><name pos:line="56" pos:column="16">setsockopt<pos:position pos:line="56" pos:column="26"/></name> <argument_list pos:line="56" pos:column="27">(<argument><expr><name><name pos:line="56" pos:column="28">srv<pos:position pos:line="56" pos:column="31"/></name><operator pos:line="56" pos:column="31">-&gt;<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="33">fd<pos:position pos:line="56" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="37">IPPROTO_IPV6<pos:position pos:line="56" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">IPV6_MULTICAST_IF<pos:position pos:line="56" pos:column="68"/></name></expr></argument>,
          <argument><expr><operator pos:line="57" pos:column="11">&amp;<pos:position pos:line="57" pos:column="16"/></operator><name pos:line="57" pos:column="12">if_index<pos:position pos:line="57" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="22">sizeof <argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">if_index<pos:position pos:line="57" pos:column="38"/></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><name pos:line="58" pos:column="11">status<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">!=<pos:position pos:line="58" pos:column="20"/></operator> <literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal></expr>)<pos:position pos:line="58" pos:column="23"/></condition><then pos:line="58" pos:column="23">
        <block type="pseudo"><return pos:line="59" pos:column="9">return <expr><operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="17">status<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">)<pos:position pos:line="59" pos:column="24"/></operator></expr>;<pos:position pos:line="59" pos:column="25"/></return></block></then></if>

      <return pos:line="61" pos:column="7">return <expr><operator pos:line="61" pos:column="14">(<pos:position pos:line="61" pos:column="15"/></operator><literal type="number" pos:line="61" pos:column="15">0<pos:position pos:line="61" pos:column="16"/></literal><operator pos:line="61" pos:column="16">)<pos:position pos:line="61" pos:column="17"/></operator></expr>;<pos:position pos:line="61" pos:column="18"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* else: Not a multicast interface. */</comment>
<cpp:if pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">if<pos:position pos:line="66" pos:column="4"/></cpp:directive> <expr><call><name pos:line="66" pos:column="5">defined<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">SO_BINDTODEVICE<pos:position pos:line="66" pos:column="28"/></name></expr></argument>)<pos:position pos:line="66" pos:column="29"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name pos:line="67" pos:column="3">status<pos:position pos:line="67" pos:column="9"/></name> <operator pos:line="67" pos:column="10">=<pos:position pos:line="67" pos:column="11"/></operator> <call><name pos:line="67" pos:column="12">setsockopt<pos:position pos:line="67" pos:column="22"/></name> <argument_list pos:line="67" pos:column="23">(<argument><expr><name><name pos:line="67" pos:column="24">srv<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">fd<pos:position pos:line="67" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="33">SOL_SOCKET<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="45">SO_BINDTODEVICE<pos:position pos:line="67" pos:column="60"/></name></expr></argument>,
      <argument><expr><name pos:line="68" pos:column="7">interface<pos:position pos:line="68" pos:column="16"/></name></expr></argument>, <argument><expr><call><name pos:line="68" pos:column="18">strlen<pos:position pos:line="68" pos:column="24"/></name> <argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">interface<pos:position pos:line="68" pos:column="35"/></name></expr></argument>)<pos:position pos:line="68" pos:column="36"/></argument_list></call> <operator pos:line="68" pos:column="37">+<pos:position pos:line="68" pos:column="38"/></operator> <literal type="number" pos:line="68" pos:column="39">1<pos:position pos:line="68" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">status<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">!=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>)<pos:position pos:line="69" pos:column="19"/></condition><then pos:line="69" pos:column="19">
    <block type="pseudo"><return pos:line="70" pos:column="5">return <expr><operator pos:line="70" pos:column="12">(<pos:position pos:line="70" pos:column="13"/></operator><operator pos:line="70" pos:column="13">-<pos:position pos:line="70" pos:column="14"/></operator><literal type="number" pos:line="70" pos:column="14">1<pos:position pos:line="70" pos:column="15"/></literal><operator pos:line="70" pos:column="15">)<pos:position pos:line="70" pos:column="16"/></operator></expr>;<pos:position pos:line="70" pos:column="17"/></return></block></then></if>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="73" pos:column="3">return <expr><operator pos:line="73" pos:column="10">(<pos:position pos:line="73" pos:column="11"/></operator><literal type="number" pos:line="73" pos:column="11">0<pos:position pos:line="73" pos:column="12"/></literal><operator pos:line="73" pos:column="12">)<pos:position pos:line="73" pos:column="13"/></operator></expr>;<pos:position pos:line="73" pos:column="14"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
