<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_620_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_vasprintf<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier><modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">str<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">fmt<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">va_list<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">args<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <block pos:line="1" pos:column="68">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">size<pos:position pos:line="2" pos:column="11"/></name> <init pos:line="2" pos:column="12">= <expr><literal type="number" pos:line="2" pos:column="14">0<pos:position pos:line="2" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">va_list<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">tmpa<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <comment type="line" pos:line="4" pos:column="3">// copy</comment>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">va_copy<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><name pos:line="5" pos:column="11">tmpa<pos:position pos:line="5" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="17">args<pos:position pos:line="5" pos:column="21"/></name></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>
  <comment type="line" pos:line="6" pos:column="3">// apply variadic arguments to</comment>
  <comment type="line" pos:line="7" pos:column="3">// sprintf with format to get size</comment>
  <expr_stmt><expr><name pos:line="8" pos:column="3">size<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">vsnprintf<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="26">size<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">fmt<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">tmpa<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
  <comment type="line" pos:line="9" pos:column="3">// toss args</comment>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">va_end<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">tmpa<pos:position pos:line="10" pos:column="14"/></name></expr></argument>)<pos:position pos:line="10" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
  <comment type="line" pos:line="11" pos:column="3">// return -1 to be compliant if</comment>
  <comment type="line" pos:line="12" pos:column="3">// size is less than 0</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">size<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <comment type="line" pos:line="16" pos:column="3">// alloc with size plus 1 for `\0'</comment>
  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">str<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">char<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></operator><operator pos:line="17" pos:column="17">)<pos:position pos:line="17" pos:column="18"/></operator><call><name pos:line="17" pos:column="18">malloc<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">size<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">+<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">1<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
  <comment type="line" pos:line="18" pos:column="3">// return -1 to be compliant</comment>
  <comment type="line" pos:line="19" pos:column="3">// if pointer is `NULL'</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">NULL<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">==<pos:position pos:line="20" pos:column="14"/></operator> <operator pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">str<pos:position pos:line="20" pos:column="19"/></name></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20"> <block pos:line="20" pos:column="21">{
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <comment type="line" pos:line="23" pos:column="3">// format string with original</comment>
  <comment type="line" pos:line="24" pos:column="3">// variadic arguments and set new size</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">size<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <call><name pos:line="25" pos:column="10">vsprintf<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><operator pos:line="25" pos:column="19">*<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">str<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="25">fmt<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">args<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">size<pos:position pos:line="26" pos:column="14"/></name></expr>;<pos:position pos:line="26" pos:column="15"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
