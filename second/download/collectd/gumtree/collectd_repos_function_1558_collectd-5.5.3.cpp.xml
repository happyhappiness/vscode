<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1558_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_connect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">cconn<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">io<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">sockaddr_un<pos:position pos:line="3" pos:column="23"/></name></name></type> <name pos:line="3" pos:column="24">address<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">flags<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">fd<pos:position pos:line="4" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="20">err<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <if pos:line="5" pos:column="5">if<condition pos:line="5" pos:column="7">(<expr><name><name pos:line="5" pos:column="8">io<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">state<pos:position pos:line="5" pos:column="17"/></name></name> <operator pos:line="5" pos:column="18">!=<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">CSTATE_UNCONNECTED<pos:position pos:line="5" pos:column="39"/></name></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
    <block pos:line="6" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">ERROR<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="string" pos:line="7" pos:column="15">"ceph plugin: cconn_connect: io-&gt;state != CSTATE_UNCONNECTED"<pos:position pos:line="7" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="78"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><operator pos:line="8" pos:column="16">-<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">EDOM<pos:position pos:line="8" pos:column="21"/></name></expr>;<pos:position pos:line="8" pos:column="22"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="10" pos:column="5">fd<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">socket<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">PF_UNIX<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">SOCK_STREAM<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="39">0<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><name pos:line="11" pos:column="8">fd<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&lt;<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15">
    <block pos:line="12" pos:column="5">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">err<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <operator pos:line="13" pos:column="15">-<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">errno<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">ERROR<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><literal type="string" pos:line="14" pos:column="15">"ceph plugin: cconn_connect: socket(PF_UNIX, SOCK_STREAM, 0) "<pos:position pos:line="14" pos:column="77"/></literal>
            <literal type="string" pos:line="15" pos:column="13">"failed: error %d"<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">err<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">err<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">memset<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><operator pos:line="18" pos:column="12">&amp;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="13">address<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="25">sizeof<argument_list pos:line="18" pos:column="31">(<argument><expr pos:line="18" pos:column="32">struct <name pos:line="18" pos:column="39">sockaddr_un<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">address<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">sun_family<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">AF_UNIX<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">snprintf<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name><name pos:line="20" pos:column="14">address<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">.<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">sun_path<pos:position pos:line="20" pos:column="30"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="32">sizeof<argument_list pos:line="20" pos:column="38">(<argument><expr><name><name pos:line="20" pos:column="39">address<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">.<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">sun_path<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="58">"%s"<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="21" pos:column="13">io<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">d<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">asok_path<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">err<pos:position pos:line="22" pos:column="23"/></name></expr></argument>,
        <argument><expr><call><name pos:line="23" pos:column="9">connect<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">fd<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator>struct <name pos:line="23" pos:column="29">sockaddr<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">*<pos:position pos:line="23" pos:column="39"/></operator><operator pos:line="23" pos:column="39">)<pos:position pos:line="23" pos:column="40"/></operator> <operator pos:line="23" pos:column="41">&amp;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="42">address<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="51">sizeof<argument_list pos:line="23" pos:column="57">(<argument><expr pos:line="23" pos:column="58">struct <name pos:line="23" pos:column="65">sockaddr_un<pos:position pos:line="23" pos:column="76"/></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><name pos:line="24" pos:column="8">err<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">&lt;<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16">
    <block pos:line="25" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ERROR<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><literal type="string" pos:line="26" pos:column="15">"ceph plugin: cconn_connect: connect(%d) failed: error %d"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>,
            <argument><expr><name pos:line="27" pos:column="13">fd<pos:position pos:line="27" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="17">err<pos:position pos:line="27" pos:column="20"/></name></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">close<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">fd<pos:position pos:line="28" pos:column="17"/></name></expr></argument>)<pos:position pos:line="28" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">err<pos:position pos:line="29" pos:column="19"/></name></expr>;<pos:position pos:line="29" pos:column="20"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="32" pos:column="5">flags<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">fcntl<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">fd<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="23">F_GETFL<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="32">0<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><call><name pos:line="33" pos:column="8">fcntl<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">fd<pos:position pos:line="33" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="18">F_SETFL<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">flags<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">|<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="35">O_NONBLOCK<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call> <operator pos:line="33" pos:column="47">!=<pos:position pos:line="33" pos:column="49"/></operator> <literal type="number" pos:line="33" pos:column="50">0<pos:position pos:line="33" pos:column="51"/></literal></expr>)<pos:position pos:line="33" pos:column="52"/></condition><then pos:line="33" pos:column="52">
    <block pos:line="34" pos:column="5">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">err<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <operator pos:line="35" pos:column="15">-<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">errno<pos:position pos:line="35" pos:column="21"/></name></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">ERROR<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><literal type="string" pos:line="36" pos:column="15">"ceph plugin: cconn_connect: fcntl(%d, O_NONBLOCK) error %d"<pos:position pos:line="36" pos:column="75"/></literal></expr></argument>,
            <argument><expr><name pos:line="37" pos:column="13">fd<pos:position pos:line="37" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="17">err<pos:position pos:line="37" pos:column="20"/></name></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">close<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">fd<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">err<pos:position pos:line="39" pos:column="19"/></name></expr>;<pos:position pos:line="39" pos:column="20"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">io<pos:position pos:line="41" pos:column="7"/></name><operator pos:line="41" pos:column="7">-&gt;<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="9">asok<pos:position pos:line="41" pos:column="13"/></name></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">fd<pos:position pos:line="41" pos:column="18"/></name></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">io<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">state<pos:position pos:line="42" pos:column="14"/></name></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">CSTATE_WRITE_REQUEST<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="43" pos:column="5">io<pos:position pos:line="43" pos:column="7"/></name><operator pos:line="43" pos:column="7">-&gt;<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="9">amt<pos:position pos:line="43" pos:column="12"/></name></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <literal type="number" pos:line="43" pos:column="15">0<pos:position pos:line="43" pos:column="16"/></literal></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">io<pos:position pos:line="44" pos:column="7"/></name><operator pos:line="44" pos:column="7">-&gt;<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="9">json_len<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <literal type="number" pos:line="44" pos:column="20">0<pos:position pos:line="44" pos:column="21"/></literal></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">io<pos:position pos:line="45" pos:column="7"/></name><operator pos:line="45" pos:column="7">-&gt;<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="9">json<pos:position pos:line="45" pos:column="13"/></name></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">NULL<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr>;<pos:position pos:line="46" pos:column="14"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
