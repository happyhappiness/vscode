<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2579_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">destroy_read_heap<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list> <comment type="block" pos:line="1" pos:column="37">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">read_heap<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">==<pos:position pos:line="3" pos:column="19"/></operator> <name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr>)<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25">
    <block type="pseudo"><return pos:line="4" pos:column="5">return;<pos:position pos:line="4" pos:column="12"/></return></block></then></if>

  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><literal type="number" pos:line="6" pos:column="10">42<pos:position pos:line="6" pos:column="12"/></literal></expr>)<pos:position pos:line="6" pos:column="13"/></condition> <block pos:line="6" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">read_func_t<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">rf<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">rf<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">c_heap_get_root<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">read_heap<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">rf<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">==<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">NULL<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20">
      <block type="pseudo"><break pos:line="11" pos:column="7">break;<pos:position pos:line="11" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">sfree<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name><name pos:line="12" pos:column="11">rf<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">rf_name<pos:position pos:line="12" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">destroy_callback<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">callback_func_t<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">rf<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">c_heap_destroy<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">read_heap<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">read_heap<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">NULL<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
