<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2521_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_encrypt_aes256<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">data<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">data_size<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">lcc_network_parse_options_t<pos:position pos:line="2" pos:column="60"/></name> <specifier pos:line="2" pos:column="61">const<pos:position pos:line="2" pos:column="66"/></specifier> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">opts<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list> <block pos:line="2" pos:column="74">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name><name pos:line="3" pos:column="7">opts<pos:position pos:line="3" pos:column="11"/></name><operator pos:line="3" pos:column="11">-&gt;<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="13">password_lookup<pos:position pos:line="3" pos:column="28"/></name></name> <operator pos:line="3" pos:column="29">==<pos:position pos:line="3" pos:column="31"/></operator> <name pos:line="3" pos:column="32">NULL<pos:position pos:line="3" pos:column="36"/></name></expr>)<pos:position pos:line="3" pos:column="37"/></condition><then pos:line="3" pos:column="37"> <block pos:line="3" pos:column="38">{
    <comment type="block" pos:line="4" pos:column="5">/* Without a password source it's (hopefully) impossible to decrypt the
     * network packet. */</comment>
    <return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">ENOENT<pos:position pos:line="6" pos:column="18"/></name></expr>;<pos:position pos:line="6" pos:column="19"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">buffer_t<pos:position pos:line="9" pos:column="11"/></name> <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">b<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><operator pos:line="9" pos:column="17">&amp;<pos:position pos:line="9" pos:column="22"/></operator><operator pos:line="9" pos:column="18">(<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">buffer_t<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">)<pos:position pos:line="9" pos:column="28"/></operator><block pos:line="9" pos:column="28">{
      <expr><operator pos:line="10" pos:column="7">.<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">data<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">data<pos:position pos:line="10" pos:column="19"/></name></expr>, <expr><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">len<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">data_size<pos:position pos:line="10" pos:column="37"/></name></expr>,
  }<pos:position pos:line="11" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="5"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">uint16_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">username_len<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">buffer_uint16<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">b<pos:position pos:line="14" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">username_len<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">EINVAL<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></return></block></then></if>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">size_t<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">)<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">username_len<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&gt;<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="30">data_size<pos:position pos:line="16" pos:column="39"/></name></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">ENOMEM<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return></block></then></if>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">username<pos:position pos:line="18" pos:column="16"/></name><index pos:line="18" pos:column="16">[<expr><operator pos:line="18" pos:column="17">(<pos:position pos:line="18" pos:column="18"/></operator><operator pos:line="18" pos:column="18">(<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">size_t<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">username_len<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">)<pos:position pos:line="18" pos:column="39"/></operator> <operator pos:line="18" pos:column="40">+<pos:position pos:line="18" pos:column="41"/></operator> <literal type="number" pos:line="18" pos:column="42">1<pos:position pos:line="18" pos:column="43"/></literal></expr>]<pos:position pos:line="18" pos:column="44"/></index></name></decl>;<pos:position pos:line="18" pos:column="45"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memset<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">username<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="23">sizeof<argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">username<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">buffer_next<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">b<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">username<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">size_t<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">username_len<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="54"/></condition><then pos:line="20" pos:column="54">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">EINVAL<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="23" pos:column="3">char<pos:position pos:line="23" pos:column="7"/></name> <specifier pos:line="23" pos:column="8">const<pos:position pos:line="23" pos:column="13"/></specifier> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">password<pos:position pos:line="23" pos:column="23"/></name> <init pos:line="23" pos:column="24">= <expr><call><name><name pos:line="23" pos:column="26">opts<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">-&gt;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="32">password_lookup<pos:position pos:line="23" pos:column="47"/></name></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">username<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="58"/></decl_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><operator pos:line="24" pos:column="7">!<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">password<pos:position pos:line="24" pos:column="16"/></name></expr>)<pos:position pos:line="24" pos:column="17"/></condition><then pos:line="24" pos:column="17">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">ENOENT<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="27" pos:column="3">uint8_t<pos:position pos:line="27" pos:column="10"/></name></type> <name><name pos:line="27" pos:column="11">iv<pos:position pos:line="27" pos:column="13"/></name><index pos:line="27" pos:column="13">[<expr><literal type="number" pos:line="27" pos:column="14">16<pos:position pos:line="27" pos:column="16"/></literal></expr>]<pos:position pos:line="27" pos:column="17"/></index></name></decl>;<pos:position pos:line="27" pos:column="18"/></decl_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">buffer_next<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">b<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="22">iv<pos:position pos:line="28" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="26">sizeof<argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">iv<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38">
    <block type="pseudo"><return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">EINVAL<pos:position pos:line="29" pos:column="18"/></name></expr>;<pos:position pos:line="29" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="31" pos:column="3">int<pos:position pos:line="31" pos:column="6"/></name></type> <name pos:line="31" pos:column="7">status<pos:position pos:line="31" pos:column="13"/></name> <init pos:line="31" pos:column="14">= <expr><call><name pos:line="31" pos:column="16">decrypt_aes256<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">b<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">iv<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="38">sizeof<argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">iv<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">password<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="60"/></decl_stmt>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">status<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">!=<pos:position pos:line="32" pos:column="16"/></operator> <literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">status<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="35" pos:column="3">uint8_t<pos:position pos:line="35" pos:column="10"/></name></type> <name><name pos:line="35" pos:column="11">hash_provided<pos:position pos:line="35" pos:column="24"/></name><index pos:line="35" pos:column="24">[<expr><literal type="number" pos:line="35" pos:column="25">20<pos:position pos:line="35" pos:column="27"/></literal></expr>]<pos:position pos:line="35" pos:column="28"/></index></name></decl>;<pos:position pos:line="35" pos:column="29"/></decl_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><call><name pos:line="36" pos:column="7">buffer_next<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">b<pos:position pos:line="36" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="22">hash_provided<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="37">sizeof<argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">hash_provided<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="60"/></condition><then pos:line="36" pos:column="60"> <block pos:line="36" pos:column="61">{
    <return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">-<pos:position pos:line="37" pos:column="13"/></operator><literal type="number" pos:line="37" pos:column="13">1<pos:position pos:line="37" pos:column="14"/></literal></expr>;<pos:position pos:line="37" pos:column="15"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="40" pos:column="3">uint8_t<pos:position pos:line="40" pos:column="10"/></name></type> <name><name pos:line="40" pos:column="11">hash_calculated<pos:position pos:line="40" pos:column="26"/></name><index pos:line="40" pos:column="26">[<expr><literal type="number" pos:line="40" pos:column="27">20<pos:position pos:line="40" pos:column="29"/></literal></expr>]<pos:position pos:line="40" pos:column="30"/></index></name></decl>;<pos:position pos:line="40" pos:column="31"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">gcry_md_hash_buffer<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">GCRY_MD_SHA1<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">hash_calculated<pos:position pos:line="41" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="54">b<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">-&gt;<pos:position pos:line="41" pos:column="60"/></operator><name pos:line="41" pos:column="57">data<pos:position pos:line="41" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="63">b<pos:position pos:line="41" pos:column="64"/></name><operator pos:line="41" pos:column="64">-&gt;<pos:position pos:line="41" pos:column="69"/></operator><name pos:line="41" pos:column="66">len<pos:position pos:line="41" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="71"/></expr_stmt>

  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><call><name pos:line="43" pos:column="7">memcmp<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name pos:line="43" pos:column="14">hash_provided<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">hash_calculated<pos:position pos:line="43" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="46">sizeof<argument_list pos:line="43" pos:column="52">(<argument><expr><name pos:line="43" pos:column="53">hash_provided<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call> <operator pos:line="43" pos:column="69">!=<pos:position pos:line="43" pos:column="71"/></operator> <literal type="number" pos:line="43" pos:column="72">0<pos:position pos:line="43" pos:column="73"/></literal></expr>)<pos:position pos:line="43" pos:column="74"/></condition><then pos:line="43" pos:column="74"> <block pos:line="43" pos:column="75">{
    <return pos:line="44" pos:column="5">return <expr><operator pos:line="44" pos:column="12">-<pos:position pos:line="44" pos:column="13"/></operator><literal type="number" pos:line="44" pos:column="13">1<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <return pos:line="47" pos:column="3">return <expr><call><name pos:line="47" pos:column="10">network_parse<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name><name pos:line="47" pos:column="24">b<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">data<pos:position pos:line="47" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="33">b<pos:position pos:line="47" pos:column="34"/></name><operator pos:line="47" pos:column="34">-&gt;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="36">len<pos:position pos:line="47" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="41">ENCRYPT<pos:position pos:line="47" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">opts<pos:position pos:line="47" pos:column="54"/></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
