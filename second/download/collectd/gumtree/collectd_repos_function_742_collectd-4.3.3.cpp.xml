<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_742_collectd-4.3.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">plugin_log<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">int<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">level<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">format<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="49">...<pos:position pos:line="1" pos:column="52"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">msg<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">512<pos:position pos:line="3" pos:column="21"/></literal></expr>]<pos:position pos:line="3" pos:column="22"/></index></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">va_list<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">ap<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<function_decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name></type> (<modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier><name pos:line="6" pos:column="16">callback<pos:position pos:line="6" pos:column="24"/></name>) <parameter_list pos:line="6" pos:column="26">(<parameter><decl><type><name pos:line="6" pos:column="27">int<pos:position pos:line="6" pos:column="30"/></name></type></decl></parameter>, <parameter><decl><type><specifier pos:line="6" pos:column="32">const<pos:position pos:line="6" pos:column="37"/></specifier> <name pos:line="6" pos:column="38">char<pos:position pos:line="6" pos:column="42"/></name> <modifier pos:line="6" pos:column="43">*<pos:position pos:line="6" pos:column="44"/></modifier></type></decl></parameter>)<pos:position pos:line="6" pos:column="45"/></parameter_list>;<pos:position pos:line="6" pos:column="46"/></function_decl>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">llentry_t<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">le<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">list_log<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">==<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">NULL<pos:position pos:line="9" pos:column="29"/></name></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30">
		<block type="pseudo"><return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><operator pos:line="12" pos:column="5">!<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">COLLECT_DEBUG<pos:position pos:line="12" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">level<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&gt;=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="22">LOG_DEBUG<pos:position pos:line="13" pos:column="31"/></name></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32">
		<block type="pseudo"><return pos:line="14" pos:column="17">return;<pos:position pos:line="14" pos:column="24"/></return></block></then></if>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">va_start<pos:position pos:line="17" pos:column="17"/></name> <argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">ap<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">format<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">vsnprintf<pos:position pos:line="18" pos:column="18"/></name> <argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">msg<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="25">512<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">format<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">ap<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">msg<pos:position pos:line="19" pos:column="12"/></name><index pos:line="19" pos:column="12">[<expr><literal type="number" pos:line="19" pos:column="13">511<pos:position pos:line="19" pos:column="16"/></literal></expr>]<pos:position pos:line="19" pos:column="17"/></index></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <literal type="char" pos:line="19" pos:column="20">'\0'<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">va_end<pos:position pos:line="20" pos:column="15"/></name> <argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">ap<pos:position pos:line="20" pos:column="19"/></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><name pos:line="22" pos:column="9">le<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">llist_head<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">list_log<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">le<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">!=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">NULL<pos:position pos:line="23" pos:column="26"/></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition>
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">callback<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <operator pos:line="25" pos:column="28">(<pos:position pos:line="25" pos:column="29"/></operator><call><call><name pos:line="25" pos:column="29">void<pos:position pos:line="25" pos:column="33"/></name> <argument_list pos:line="25" pos:column="34">(<argument><expr><operator pos:line="25" pos:column="35">*<pos:position pos:line="25" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call> <argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">int<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><specifier pos:line="25" pos:column="44">const<pos:position pos:line="25" pos:column="49"/></specifier> <name pos:line="25" pos:column="50">char<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">*<pos:position pos:line="25" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call><operator pos:line="25" pos:column="57">)<pos:position pos:line="25" pos:column="58"/></operator> <name><name pos:line="25" pos:column="59">le<pos:position pos:line="25" pos:column="61"/></name><operator pos:line="25" pos:column="61">-&gt;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="63">value<pos:position pos:line="25" pos:column="68"/></name></name></expr>;<pos:position pos:line="25" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call pos:line="26" pos:column="17">(<modifier pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></modifier><name pos:line="26" pos:column="19">callback<pos:position pos:line="26" pos:column="27"/></name>) <argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">level<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">msg<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">le<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name><name pos:line="28" pos:column="22">le<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">-&gt;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="26">next<pos:position pos:line="28" pos:column="30"/></name></name></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></while>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
