<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_999_collectd-4.7.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">c_heap_insert<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">c_heap_t<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">h<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">ptr<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">(<pos:position pos:line="3" pos:column="8"/></operator><name pos:line="3" pos:column="8">h<pos:position pos:line="3" pos:column="9"/></name> <operator pos:line="3" pos:column="10">==<pos:position pos:line="3" pos:column="12"/></operator> <name pos:line="3" pos:column="13">NULL<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">)<pos:position pos:line="3" pos:column="18"/></operator> <operator pos:line="3" pos:column="19">||<pos:position pos:line="3" pos:column="21"/></operator> <operator pos:line="3" pos:column="22">(<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">ptr<pos:position pos:line="3" pos:column="26"/></name> <operator pos:line="3" pos:column="27">==<pos:position pos:line="3" pos:column="29"/></operator> <name pos:line="3" pos:column="30">NULL<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">)<pos:position pos:line="3" pos:column="35"/></operator></expr>)<pos:position pos:line="3" pos:column="36"/></condition><then pos:line="3" pos:column="36">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><operator pos:line="4" pos:column="12">(<pos:position pos:line="4" pos:column="13"/></operator><operator pos:line="4" pos:column="13">-<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">EINVAL<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">)<pos:position pos:line="4" pos:column="21"/></operator></expr>;<pos:position pos:line="4" pos:column="22"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">pthread_mutex_lock<pos:position pos:line="6" pos:column="21"/></name> <argument_list pos:line="6" pos:column="22">(<argument><expr><operator pos:line="6" pos:column="23">&amp;<pos:position pos:line="6" pos:column="28"/></operator><name><name pos:line="6" pos:column="24">h<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">lock<pos:position pos:line="6" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><name><name pos:line="8" pos:column="11">h<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">list_len<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">&lt;=<pos:position pos:line="8" pos:column="28"/></operator> <name><name pos:line="8" pos:column="26">h<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">list_size<pos:position pos:line="8" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">h<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">-&gt;<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="10">list_len<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <name><name pos:line="9" pos:column="22">h<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">list_size<pos:position pos:line="9" pos:column="34"/></name></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
  <block pos:line="10" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">void<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier><modifier pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></modifier></type><name pos:line="11" pos:column="12">tmp<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">tmp<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">realloc<pos:position pos:line="13" pos:column="18"/></name> <argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">h<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">list<pos:position pos:line="13" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="29">(<pos:position pos:line="13" pos:column="30"/></operator><name><name pos:line="13" pos:column="30">h<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">list_size<pos:position pos:line="13" pos:column="42"/></name></name> <operator pos:line="13" pos:column="43">+<pos:position pos:line="13" pos:column="44"/></operator> <literal type="number" pos:line="13" pos:column="45">16<pos:position pos:line="13" pos:column="47"/></literal><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">*<pos:position pos:line="13" pos:column="50"/></operator> <sizeof pos:line="13" pos:column="51">sizeof <argument_list pos:line="13" pos:column="58">(<argument><expr><operator pos:line="13" pos:column="59">*<pos:position pos:line="13" pos:column="60"/></operator><name><name pos:line="13" pos:column="60">h<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">-&gt;<pos:position pos:line="13" pos:column="66"/></operator><name pos:line="13" pos:column="63">list<pos:position pos:line="13" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">tmp<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">==<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">NULL<pos:position pos:line="14" pos:column="20"/></name></expr>)<pos:position pos:line="14" pos:column="21"/></condition><then pos:line="14" pos:column="21">
    <block pos:line="15" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">pthread_mutex_unlock<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name><name pos:line="16" pos:column="30">h<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">lock<pos:position pos:line="16" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><operator pos:line="17" pos:column="15">-<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">ENOMEM<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">)<pos:position pos:line="17" pos:column="23"/></operator></expr>;<pos:position pos:line="17" pos:column="24"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="20" pos:column="5">h<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">-&gt;<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="8">list<pos:position pos:line="20" pos:column="12"/></name></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">tmp<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">h<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">list_size<pos:position pos:line="21" pos:column="17"/></name></name> <operator pos:line="21" pos:column="18">+=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="21">16<pos:position pos:line="21" pos:column="23"/></literal></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* Insert the new node as a leaf. */</comment>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">h<pos:position pos:line="25" pos:column="4"/></name><operator pos:line="25" pos:column="4">-&gt;<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="6">list<pos:position pos:line="25" pos:column="10"/></name><index pos:line="25" pos:column="10">[<expr><name><name pos:line="25" pos:column="11">h<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">list_len<pos:position pos:line="25" pos:column="22"/></name></name></expr>]<pos:position pos:line="25" pos:column="23"/></index></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">ptr<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">h<pos:position pos:line="26" pos:column="4"/></name><operator pos:line="26" pos:column="4">-&gt;<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="6">list_len<pos:position pos:line="26" pos:column="14"/></name></name><operator pos:line="26" pos:column="14">++<pos:position pos:line="26" pos:column="16"/></operator></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Reorganize the heap from bottom up. */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">reheap<pos:position pos:line="29" pos:column="9"/></name> <argument_list pos:line="29" pos:column="10">(<argument><expr><name pos:line="29" pos:column="11">h<pos:position pos:line="29" pos:column="12"/></name></expr></argument>, <comment type="block" pos:line="29" pos:column="14">/* parent of this node = */</comment> <argument><expr><operator pos:line="29" pos:column="42">(<pos:position pos:line="29" pos:column="43"/></operator><name><name pos:line="29" pos:column="43">h<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">list_len<pos:position pos:line="29" pos:column="54"/></name></name> <operator pos:line="29" pos:column="55">-<pos:position pos:line="29" pos:column="56"/></operator> <literal type="number" pos:line="29" pos:column="57">1<pos:position pos:line="29" pos:column="58"/></literal><operator pos:line="29" pos:column="58">)<pos:position pos:line="29" pos:column="59"/></operator> <operator pos:line="29" pos:column="60">/<pos:position pos:line="29" pos:column="61"/></operator> <literal type="number" pos:line="29" pos:column="62">2<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="65">DIR_UP<pos:position pos:line="29" pos:column="71"/></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="73"/></expr_stmt>
  
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">pthread_mutex_unlock<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator><name><name pos:line="31" pos:column="26">h<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">-&gt;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="29">lock<pos:position pos:line="31" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
  <return pos:line="32" pos:column="3">return <expr><operator pos:line="32" pos:column="10">(<pos:position pos:line="32" pos:column="11"/></operator><literal type="number" pos:line="32" pos:column="11">0<pos:position pos:line="32" pos:column="12"/></literal><operator pos:line="32" pos:column="12">)<pos:position pos:line="32" pos:column="13"/></operator></expr>;<pos:position pos:line="32" pos:column="14"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
