<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1668_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">collectd_argc<pos:position pos:line="2" pos:column="20"/></name> <init pos:line="2" pos:column="21">= <expr><literal type="number" pos:line="2" pos:column="23">0<pos:position pos:line="2" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">collectd<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">collectd_argv<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">sigaction<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">sa<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name> <init pos:line="8" pos:column="9">= <expr><literal type="number" pos:line="8" pos:column="11">0<pos:position pos:line="8" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* parse command line options */</comment>
  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><literal type="number" pos:line="11" pos:column="10">42<pos:position pos:line="11" pos:column="12"/></literal></expr>)<pos:position pos:line="11" pos:column="13"/></condition> <block pos:line="11" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">c<pos:position pos:line="12" pos:column="10"/></name> <init pos:line="12" pos:column="11">= <expr><call><name pos:line="12" pos:column="13">getopt<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">argc<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">argv<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"hc:P:"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="41"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">-<pos:position pos:line="14" pos:column="10"/></operator><literal type="number" pos:line="14" pos:column="10">1<pos:position pos:line="14" pos:column="11"/></literal> <operator pos:line="14" pos:column="12">==<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">c<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17">
      <block type="pseudo"><break pos:line="15" pos:column="7">break;<pos:position pos:line="15" pos:column="13"/></break></block></then></if>

    <switch pos:line="17" pos:column="5">switch <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">c<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition> <block pos:line="17" pos:column="16">{
    <case pos:line="18" pos:column="5">case <expr><literal type="char" pos:line="18" pos:column="10">'c'<pos:position pos:line="18" pos:column="13"/></literal></expr>:<pos:position pos:line="18" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="19" pos:column="7">collectd<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">optarg<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
      <break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break>
    <case pos:line="21" pos:column="5">case <expr><literal type="char" pos:line="21" pos:column="10">'P'<pos:position pos:line="21" pos:column="13"/></literal></expr>:<pos:position pos:line="21" pos:column="14"/></case>
      <expr_stmt><expr><name pos:line="22" pos:column="7">pidfile<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">optarg<pos:position pos:line="22" pos:column="23"/></name></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
      <break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break>
    <case pos:line="24" pos:column="5">case <expr><literal type="char" pos:line="24" pos:column="10">'h'<pos:position pos:line="24" pos:column="13"/></literal></expr>:<pos:position pos:line="24" pos:column="14"/></case>
    <default pos:line="25" pos:column="5">default:<pos:position pos:line="25" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">exit_usage<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name><name pos:line="26" pos:column="18">argv<pos:position pos:line="26" pos:column="22"/></name><index pos:line="26" pos:column="22">[<expr><literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>]<pos:position pos:line="26" pos:column="25"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></switch>
  }<pos:position pos:line="28" pos:column="4"/></block></while>

  <for pos:line="30" pos:column="3">for <control pos:line="30" pos:column="7">(<init><expr><name pos:line="30" pos:column="8">i<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <name pos:line="30" pos:column="12">optind<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></init> <condition><expr><name pos:line="30" pos:column="20">i<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&lt;<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="24">argc<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></condition> <incr><expr><operator pos:line="30" pos:column="30">++<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">i<pos:position pos:line="30" pos:column="33"/></name></expr></incr>)<pos:position pos:line="30" pos:column="34"/></control>
    <block type="pseudo"><if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><literal type="number" pos:line="31" pos:column="9">0<pos:position pos:line="31" pos:column="10"/></literal> <operator pos:line="31" pos:column="11">==<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">strcmp<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name><name pos:line="31" pos:column="21">argv<pos:position pos:line="31" pos:column="25"/></name><index pos:line="31" pos:column="25">[<expr><name pos:line="31" pos:column="26">i<pos:position pos:line="31" pos:column="27"/></name></expr>]<pos:position pos:line="31" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="30">"-f"<pos:position pos:line="31" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="36"/></condition><then pos:line="31" pos:column="36">
      <block type="pseudo"><break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break></block></then></if></block></for>

  <comment type="block" pos:line="34" pos:column="3">/* i &lt; argc =&gt; -f already present */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">collectd_argc<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="19">1<pos:position pos:line="35" pos:column="20"/></literal> <operator pos:line="35" pos:column="21">+<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">argc<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">-<pos:position pos:line="35" pos:column="29"/></operator> <name pos:line="35" pos:column="30">optind<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">+<pos:position pos:line="35" pos:column="38"/></operator> <operator pos:line="35" pos:column="39">(<pos:position pos:line="35" pos:column="40"/></operator><ternary><condition><expr><operator pos:line="35" pos:column="40">(<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="41">i<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">&lt;<pos:position pos:line="35" pos:column="47"/></operator> <name pos:line="35" pos:column="45">argc<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">)<pos:position pos:line="35" pos:column="50"/></operator></expr> ?<pos:position pos:line="35" pos:column="52"/></condition><then pos:line="35" pos:column="52"> <expr><literal type="number" pos:line="35" pos:column="53">0<pos:position pos:line="35" pos:column="54"/></literal></expr> <pos:position pos:line="35" pos:column="55"/></then><else pos:line="35" pos:column="55">: <expr><literal type="number" pos:line="35" pos:column="57">1<pos:position pos:line="35" pos:column="58"/></literal></expr></else></ternary><operator pos:line="35" pos:column="58">)<pos:position pos:line="35" pos:column="59"/></operator></expr>;<pos:position pos:line="35" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="36" pos:column="3">collectd_argv<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <operator pos:line="36" pos:column="19">(<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">char<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">*<pos:position pos:line="36" pos:column="26"/></operator><operator pos:line="36" pos:column="26">*<pos:position pos:line="36" pos:column="27"/></operator><operator pos:line="36" pos:column="27">)<pos:position pos:line="36" pos:column="28"/></operator><call><name pos:line="36" pos:column="28">calloc<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">collectd_argc<pos:position pos:line="36" pos:column="48"/></name> <operator pos:line="36" pos:column="49">+<pos:position pos:line="36" pos:column="50"/></operator> <literal type="number" pos:line="36" pos:column="51">1<pos:position pos:line="36" pos:column="52"/></literal></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="54">sizeof<argument_list pos:line="36" pos:column="60">(<argument><expr><name pos:line="36" pos:column="61">char<pos:position pos:line="36" pos:column="65"/></name> <operator pos:line="36" pos:column="66">*<pos:position pos:line="36" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="70"/></expr_stmt>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">NULL<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">==<pos:position pos:line="38" pos:column="14"/></operator> <name pos:line="38" pos:column="15">collectd_argv<pos:position pos:line="38" pos:column="28"/></name></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29"> <block pos:line="38" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">fprintf<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">stderr<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="21">"Out of memory."<pos:position pos:line="39" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><literal type="number" pos:line="40" pos:column="12">3<pos:position pos:line="40" pos:column="13"/></literal></expr>;<pos:position pos:line="40" pos:column="14"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="43" pos:column="3">collectd_argv<pos:position pos:line="43" pos:column="16"/></name><index pos:line="43" pos:column="16">[<expr><literal type="number" pos:line="43" pos:column="17">0<pos:position pos:line="43" pos:column="18"/></literal></expr>]<pos:position pos:line="43" pos:column="19"/></index></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <ternary><condition><expr><operator pos:line="43" pos:column="22">(<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">NULL<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">==<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">collectd<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">)<pos:position pos:line="43" pos:column="40"/></operator></expr> ?<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42"> <expr><literal type="string" pos:line="43" pos:column="43">"collectd"<pos:position pos:line="43" pos:column="53"/></literal></expr> <pos:position pos:line="43" pos:column="54"/></then><else pos:line="43" pos:column="54">: <expr><name pos:line="43" pos:column="56">collectd<pos:position pos:line="43" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name pos:line="45" pos:column="7">i<pos:position pos:line="45" pos:column="8"/></name> <operator pos:line="45" pos:column="9">==<pos:position pos:line="45" pos:column="11"/></operator> <name pos:line="45" pos:column="12">argc<pos:position pos:line="45" pos:column="16"/></name></expr>)<pos:position pos:line="45" pos:column="17"/></condition><then pos:line="45" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="5">collectd_argv<pos:position pos:line="46" pos:column="18"/></name><index pos:line="46" pos:column="18">[<expr><name pos:line="46" pos:column="19">collectd_argc<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">-<pos:position pos:line="46" pos:column="34"/></operator> <literal type="number" pos:line="46" pos:column="35">1<pos:position pos:line="46" pos:column="36"/></literal></expr>]<pos:position pos:line="46" pos:column="37"/></index></name> <operator pos:line="46" pos:column="38">=<pos:position pos:line="46" pos:column="39"/></operator> <literal type="string" pos:line="46" pos:column="40">"-f"<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt></block></then></if>

  <for pos:line="48" pos:column="3">for <control pos:line="48" pos:column="7">(<init><expr><name pos:line="48" pos:column="8">i<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <name pos:line="48" pos:column="12">optind<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></init> <condition><expr><name pos:line="48" pos:column="20">i<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">&lt;<pos:position pos:line="48" pos:column="26"/></operator> <name pos:line="48" pos:column="24">argc<pos:position pos:line="48" pos:column="28"/></name></expr>;<pos:position pos:line="48" pos:column="29"/></condition> <incr><expr><operator pos:line="48" pos:column="30">++<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="32">i<pos:position pos:line="48" pos:column="33"/></name></expr></incr>)<pos:position pos:line="48" pos:column="34"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="5">collectd_argv<pos:position pos:line="49" pos:column="18"/></name><index pos:line="49" pos:column="18">[<expr><name pos:line="49" pos:column="19">i<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">-<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="23">optind<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">+<pos:position pos:line="49" pos:column="31"/></operator> <literal type="number" pos:line="49" pos:column="32">1<pos:position pos:line="49" pos:column="33"/></literal></expr>]<pos:position pos:line="49" pos:column="34"/></index></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <name><name pos:line="49" pos:column="37">argv<pos:position pos:line="49" pos:column="41"/></name><index pos:line="49" pos:column="41">[<expr><name pos:line="49" pos:column="42">i<pos:position pos:line="49" pos:column="43"/></name></expr>]<pos:position pos:line="49" pos:column="44"/></index></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt></block></for>

  <expr_stmt><expr><name><name pos:line="51" pos:column="3">collectd_argv<pos:position pos:line="51" pos:column="16"/></name><index pos:line="51" pos:column="16">[<expr><name pos:line="51" pos:column="17">collectd_argc<pos:position pos:line="51" pos:column="30"/></name></expr>]<pos:position pos:line="51" pos:column="31"/></index></name> <operator pos:line="51" pos:column="32">=<pos:position pos:line="51" pos:column="33"/></operator> <name pos:line="51" pos:column="34">NULL<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">openlog<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><literal type="string" pos:line="53" pos:column="11">"collectdmon"<pos:position pos:line="53" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="26">LOG_CONS<pos:position pos:line="53" pos:column="34"/></name> <operator pos:line="53" pos:column="35">|<pos:position pos:line="53" pos:column="36"/></operator> <name pos:line="53" pos:column="37">LOG_PID<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="46">LOG_DAEMON<pos:position pos:line="53" pos:column="56"/></name></expr></argument>)<pos:position pos:line="53" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="58"/></expr_stmt>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><operator pos:line="55" pos:column="7">-<pos:position pos:line="55" pos:column="8"/></operator><literal type="number" pos:line="55" pos:column="8">1<pos:position pos:line="55" pos:column="9"/></literal> <operator pos:line="55" pos:column="10">==<pos:position pos:line="55" pos:column="12"/></operator> <call><name pos:line="55" pos:column="13">daemonize<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">()<pos:position pos:line="55" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="25"/></condition><then pos:line="55" pos:column="25"> <block pos:line="55" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">free<pos:position pos:line="56" pos:column="9"/></name><argument_list pos:line="56" pos:column="9">(<argument><expr><name pos:line="56" pos:column="10">collectd_argv<pos:position pos:line="56" pos:column="23"/></name></expr></argument>)<pos:position pos:line="56" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><literal type="number" pos:line="57" pos:column="12">1<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="60" pos:column="3">sa<pos:position pos:line="60" pos:column="5"/></name><operator pos:line="60" pos:column="5">.<pos:position pos:line="60" pos:column="6"/></operator><name pos:line="60" pos:column="6">sa_handler<pos:position pos:line="60" pos:column="16"/></name></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name pos:line="60" pos:column="19">sig_int_term_handler<pos:position pos:line="60" pos:column="39"/></name></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="61" pos:column="3">sa<pos:position pos:line="61" pos:column="5"/></name><operator pos:line="61" pos:column="5">.<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">sa_flags<pos:position pos:line="61" pos:column="14"/></name></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal></expr>;<pos:position pos:line="61" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">sigemptyset<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><operator pos:line="62" pos:column="15">&amp;<pos:position pos:line="62" pos:column="20"/></operator><name><name pos:line="62" pos:column="16">sa<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">.<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">sa_mask<pos:position pos:line="62" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>

  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><literal type="number" pos:line="64" pos:column="7">0<pos:position pos:line="64" pos:column="8"/></literal> <operator pos:line="64" pos:column="9">!=<pos:position pos:line="64" pos:column="11"/></operator> <call><name pos:line="64" pos:column="12">sigaction<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">SIGINT<pos:position pos:line="64" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="30">&amp;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="31">sa<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="35">NULL<pos:position pos:line="64" pos:column="39"/></name></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="41"/></condition><then pos:line="64" pos:column="41"> <block pos:line="64" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">syslog<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name pos:line="65" pos:column="12">LOG_ERR<pos:position pos:line="65" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="21">"Error: sigaction() failed: %s"<pos:position pos:line="65" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="54">strerror<pos:position pos:line="65" pos:column="62"/></name><argument_list pos:line="65" pos:column="62">(<argument><expr><name pos:line="65" pos:column="63">errno<pos:position pos:line="65" pos:column="68"/></name></expr></argument>)<pos:position pos:line="65" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">free<pos:position pos:line="66" pos:column="9"/></name><argument_list pos:line="66" pos:column="9">(<argument><expr><name pos:line="66" pos:column="10">collectd_argv<pos:position pos:line="66" pos:column="23"/></name></expr></argument>)<pos:position pos:line="66" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt>
    <return pos:line="67" pos:column="5">return <expr><literal type="number" pos:line="67" pos:column="12">1<pos:position pos:line="67" pos:column="13"/></literal></expr>;<pos:position pos:line="67" pos:column="14"/></return>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>

  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><literal type="number" pos:line="70" pos:column="7">0<pos:position pos:line="70" pos:column="8"/></literal> <operator pos:line="70" pos:column="9">!=<pos:position pos:line="70" pos:column="11"/></operator> <call><name pos:line="70" pos:column="12">sigaction<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name pos:line="70" pos:column="22">SIGTERM<pos:position pos:line="70" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="31">&amp;<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="32">sa<pos:position pos:line="70" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="36">NULL<pos:position pos:line="70" pos:column="40"/></name></expr></argument>)<pos:position pos:line="70" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="42"/></condition><then pos:line="70" pos:column="42"> <block pos:line="70" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">syslog<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><name pos:line="71" pos:column="12">LOG_ERR<pos:position pos:line="71" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="21">"Error: sigaction() failed: %s"<pos:position pos:line="71" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="71" pos:column="54">strerror<pos:position pos:line="71" pos:column="62"/></name><argument_list pos:line="71" pos:column="62">(<argument><expr><name pos:line="71" pos:column="63">errno<pos:position pos:line="71" pos:column="68"/></name></expr></argument>)<pos:position pos:line="71" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">free<pos:position pos:line="72" pos:column="9"/></name><argument_list pos:line="72" pos:column="9">(<argument><expr><name pos:line="72" pos:column="10">collectd_argv<pos:position pos:line="72" pos:column="23"/></name></expr></argument>)<pos:position pos:line="72" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><literal type="number" pos:line="73" pos:column="12">1<pos:position pos:line="73" pos:column="13"/></literal></expr>;<pos:position pos:line="73" pos:column="14"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="76" pos:column="3">sa<pos:position pos:line="76" pos:column="5"/></name><operator pos:line="76" pos:column="5">.<pos:position pos:line="76" pos:column="6"/></operator><name pos:line="76" pos:column="6">sa_handler<pos:position pos:line="76" pos:column="16"/></name></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">sig_hup_handler<pos:position pos:line="76" pos:column="34"/></name></expr>;<pos:position pos:line="76" pos:column="35"/></expr_stmt>

  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><literal type="number" pos:line="78" pos:column="7">0<pos:position pos:line="78" pos:column="8"/></literal> <operator pos:line="78" pos:column="9">!=<pos:position pos:line="78" pos:column="11"/></operator> <call><name pos:line="78" pos:column="12">sigaction<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><name pos:line="78" pos:column="22">SIGHUP<pos:position pos:line="78" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="30">&amp;<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="31">sa<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="35">NULL<pos:position pos:line="78" pos:column="39"/></name></expr></argument>)<pos:position pos:line="78" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="41"/></condition><then pos:line="78" pos:column="41"> <block pos:line="78" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">syslog<pos:position pos:line="79" pos:column="11"/></name><argument_list pos:line="79" pos:column="11">(<argument><expr><name pos:line="79" pos:column="12">LOG_ERR<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="21">"Error: sigaction() failed: %s"<pos:position pos:line="79" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="79" pos:column="54">strerror<pos:position pos:line="79" pos:column="62"/></name><argument_list pos:line="79" pos:column="62">(<argument><expr><name pos:line="79" pos:column="63">errno<pos:position pos:line="79" pos:column="68"/></name></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">free<pos:position pos:line="80" pos:column="9"/></name><argument_list pos:line="80" pos:column="9">(<argument><expr><name pos:line="80" pos:column="10">collectd_argv<pos:position pos:line="80" pos:column="23"/></name></expr></argument>)<pos:position pos:line="80" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="25"/></expr_stmt>
    <return pos:line="81" pos:column="5">return <expr><literal type="number" pos:line="81" pos:column="12">1<pos:position pos:line="81" pos:column="13"/></literal></expr>;<pos:position pos:line="81" pos:column="14"/></return>
  }<pos:position pos:line="82" pos:column="4"/></block></then></if>

  <while pos:line="84" pos:column="3">while <condition pos:line="84" pos:column="9">(<expr><literal type="number" pos:line="84" pos:column="10">0<pos:position pos:line="84" pos:column="11"/></literal> <operator pos:line="84" pos:column="12">==<pos:position pos:line="84" pos:column="14"/></operator> <name pos:line="84" pos:column="15">loop<pos:position pos:line="84" pos:column="19"/></name></expr>)<pos:position pos:line="84" pos:column="20"/></condition> <block pos:line="84" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">int<pos:position pos:line="85" pos:column="8"/></name></type> <name pos:line="85" pos:column="9">status<pos:position pos:line="85" pos:column="15"/></name> <init pos:line="85" pos:column="16">= <expr><literal type="number" pos:line="85" pos:column="18">0<pos:position pos:line="85" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="85" pos:column="20"/></decl_stmt>

    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><literal type="number" pos:line="87" pos:column="9">0<pos:position pos:line="87" pos:column="10"/></literal> <operator pos:line="87" pos:column="11">!=<pos:position pos:line="87" pos:column="13"/></operator> <call><name pos:line="87" pos:column="14">collectd_start<pos:position pos:line="87" pos:column="28"/></name><argument_list pos:line="87" pos:column="28">(<argument><expr><name pos:line="87" pos:column="29">collectd_argv<pos:position pos:line="87" pos:column="42"/></name></expr></argument>)<pos:position pos:line="87" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="44"/></condition><then pos:line="87" pos:column="44"> <block pos:line="87" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="88" pos:column="7">syslog<pos:position pos:line="88" pos:column="13"/></name><argument_list pos:line="88" pos:column="13">(<argument><expr><name pos:line="88" pos:column="14">LOG_ERR<pos:position pos:line="88" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="23">"Error: failed to start collectd."<pos:position pos:line="88" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
      <break pos:line="89" pos:column="7">break;<pos:position pos:line="89" pos:column="13"/></break>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="92" pos:column="5">assert<pos:position pos:line="92" pos:column="11"/></name><argument_list pos:line="92" pos:column="11">(<argument><expr><literal type="number" pos:line="92" pos:column="12">0<pos:position pos:line="92" pos:column="13"/></literal> <operator pos:line="92" pos:column="14">&lt;<pos:position pos:line="92" pos:column="18"/></operator> <name pos:line="92" pos:column="16">collectd_pid<pos:position pos:line="92" pos:column="28"/></name></expr></argument>)<pos:position pos:line="92" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt>
    <while pos:line="93" pos:column="5">while <condition pos:line="93" pos:column="11">(<expr><operator pos:line="93" pos:column="12">(<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">collectd_pid<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">!=<pos:position pos:line="93" pos:column="28"/></operator> <call><name pos:line="93" pos:column="29">waitpid<pos:position pos:line="93" pos:column="36"/></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">collectd_pid<pos:position pos:line="93" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="51">&amp;<pos:position pos:line="93" pos:column="56"/></operator><name pos:line="93" pos:column="52">status<pos:position pos:line="93" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="60">0<pos:position pos:line="93" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="62"/></argument_list></call><operator pos:line="93" pos:column="62">)<pos:position pos:line="93" pos:column="63"/></operator> <operator pos:line="93" pos:column="64">&amp;&amp;<pos:position pos:line="93" pos:column="74"/></operator>
           <operator pos:line="94" pos:column="12">(<pos:position pos:line="94" pos:column="13"/></operator><name pos:line="94" pos:column="13">EINTR<pos:position pos:line="94" pos:column="18"/></name> <operator pos:line="94" pos:column="19">==<pos:position pos:line="94" pos:column="21"/></operator> <name pos:line="94" pos:column="22">errno<pos:position pos:line="94" pos:column="27"/></name><operator pos:line="94" pos:column="27">)<pos:position pos:line="94" pos:column="28"/></operator></expr>)<pos:position pos:line="94" pos:column="29"/></condition>
      <block type="pseudo"><if pos:line="95" pos:column="7">if <condition pos:line="95" pos:column="10">(<expr><operator pos:line="95" pos:column="11">(<pos:position pos:line="95" pos:column="12"/></operator><literal type="number" pos:line="95" pos:column="12">0<pos:position pos:line="95" pos:column="13"/></literal> <operator pos:line="95" pos:column="14">!=<pos:position pos:line="95" pos:column="16"/></operator> <name pos:line="95" pos:column="17">loop<pos:position pos:line="95" pos:column="21"/></name><operator pos:line="95" pos:column="21">)<pos:position pos:line="95" pos:column="22"/></operator> <operator pos:line="95" pos:column="23">||<pos:position pos:line="95" pos:column="25"/></operator> <operator pos:line="95" pos:column="26">(<pos:position pos:line="95" pos:column="27"/></operator><literal type="number" pos:line="95" pos:column="27">0<pos:position pos:line="95" pos:column="28"/></literal> <operator pos:line="95" pos:column="29">!=<pos:position pos:line="95" pos:column="31"/></operator> <name pos:line="95" pos:column="32">restart<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">)<pos:position pos:line="95" pos:column="40"/></operator></expr>)<pos:position pos:line="95" pos:column="41"/></condition><then pos:line="95" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="9">collectd_stop<pos:position pos:line="96" pos:column="22"/></name><argument_list pos:line="96" pos:column="22">()<pos:position pos:line="96" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt></block></then></if></block></while>

    <expr_stmt><expr><name pos:line="98" pos:column="5">collectd_pid<pos:position pos:line="98" pos:column="17"/></name> <operator pos:line="98" pos:column="18">=<pos:position pos:line="98" pos:column="19"/></operator> <literal type="number" pos:line="98" pos:column="20">0<pos:position pos:line="98" pos:column="21"/></literal></expr>;<pos:position pos:line="98" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">log_status<pos:position pos:line="100" pos:column="15"/></name><argument_list pos:line="100" pos:column="15">(<argument><expr><name pos:line="100" pos:column="16">status<pos:position pos:line="100" pos:column="22"/></name></expr></argument>)<pos:position pos:line="100" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">check_respawn<pos:position pos:line="101" pos:column="18"/></name><argument_list pos:line="101" pos:column="18">()<pos:position pos:line="101" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="21"/></expr_stmt>

    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><literal type="number" pos:line="103" pos:column="9">0<pos:position pos:line="103" pos:column="10"/></literal> <operator pos:line="103" pos:column="11">!=<pos:position pos:line="103" pos:column="13"/></operator> <name pos:line="103" pos:column="14">restart<pos:position pos:line="103" pos:column="21"/></name></expr>)<pos:position pos:line="103" pos:column="22"/></condition><then pos:line="103" pos:column="22"> <block pos:line="103" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="104" pos:column="7">syslog<pos:position pos:line="104" pos:column="13"/></name><argument_list pos:line="104" pos:column="13">(<argument><expr><name pos:line="104" pos:column="14">LOG_INFO<pos:position pos:line="104" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="24">"Info: restarting collectd"<pos:position pos:line="104" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="105" pos:column="7">restart<pos:position pos:line="105" pos:column="14"/></name> <operator pos:line="105" pos:column="15">=<pos:position pos:line="105" pos:column="16"/></operator> <literal type="number" pos:line="105" pos:column="17">0<pos:position pos:line="105" pos:column="18"/></literal></expr>;<pos:position pos:line="105" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then> <elseif pos:line="106" pos:column="7">else <if pos:line="106" pos:column="12">if <condition pos:line="106" pos:column="15">(<expr><literal type="number" pos:line="106" pos:column="16">0<pos:position pos:line="106" pos:column="17"/></literal> <operator pos:line="106" pos:column="18">==<pos:position pos:line="106" pos:column="20"/></operator> <name pos:line="106" pos:column="21">loop<pos:position pos:line="106" pos:column="25"/></name></expr>)<pos:position pos:line="106" pos:column="26"/></condition><then pos:line="106" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="7">syslog<pos:position pos:line="107" pos:column="13"/></name><argument_list pos:line="107" pos:column="13">(<argument><expr><name pos:line="107" pos:column="14">LOG_WARNING<pos:position pos:line="107" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="27">"Warning: restarting collectd"<pos:position pos:line="107" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="59"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="108" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="110" pos:column="3">syslog<pos:position pos:line="110" pos:column="9"/></name><argument_list pos:line="110" pos:column="9">(<argument><expr><name pos:line="110" pos:column="10">LOG_INFO<pos:position pos:line="110" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="20">"Info: shutting down collectdmon"<pos:position pos:line="110" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="112" pos:column="3">pidfile_delete<pos:position pos:line="112" pos:column="17"/></name><argument_list pos:line="112" pos:column="17">()<pos:position pos:line="112" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="113" pos:column="3">closelog<pos:position pos:line="113" pos:column="11"/></name><argument_list pos:line="113" pos:column="11">()<pos:position pos:line="113" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="115" pos:column="3">free<pos:position pos:line="115" pos:column="7"/></name><argument_list pos:line="115" pos:column="7">(<argument><expr><name pos:line="115" pos:column="8">collectd_argv<pos:position pos:line="115" pos:column="21"/></name></expr></argument>)<pos:position pos:line="115" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="23"/></expr_stmt>
  <return pos:line="116" pos:column="3">return <expr><literal type="number" pos:line="116" pos:column="10">0<pos:position pos:line="116" pos:column="11"/></literal></expr>;<pos:position pos:line="116" pos:column="12"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
