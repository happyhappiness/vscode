<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1457_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dns_run_pcap_loop<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list> <block pos:line="1" pos:column="36">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">pcap_t<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier></type><name pos:line="2" pos:column="11">pcap_obj<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">pcap_error<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><name pos:line="3" pos:column="19">PCAP_ERRBUF_SIZE<pos:position pos:line="3" pos:column="35"/></name></expr>]<pos:position pos:line="3" pos:column="36"/></index></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">bpf_program<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">fp<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><block pos:line="4" pos:column="27">{<expr><literal type="number" pos:line="4" pos:column="28">0<pos:position pos:line="4" pos:column="29"/></literal></expr>}<pos:position pos:line="4" pos:column="30"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Don't block any signals */</comment>
  <block pos:line="9" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">sigset_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">sigmask<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">sigemptyset<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><operator pos:line="11" pos:column="17">&amp;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="18">sigmask<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">pthread_sigmask<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">SIG_SETMASK<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">sigmask<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">NULL<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block>

  <comment type="block" pos:line="15" pos:column="3">/* Passing `pcap_device == NULL' is okay and the same as passign "any" */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">DEBUG<pos:position pos:line="16" pos:column="8"/></name><argument_list pos:line="16" pos:column="8">(<argument><expr><literal type="string" pos:line="16" pos:column="9">"dns plugin: Creating PCAP object.."<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">pcap_obj<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">pcap_open_live<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><ternary><condition><expr><operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">pcap_device<pos:position pos:line="17" pos:column="41"/></name> <operator pos:line="17" pos:column="42">!=<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">NULL<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">)<pos:position pos:line="17" pos:column="50"/></operator></expr> ?<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52"> <expr><name pos:line="17" pos:column="53">pcap_device<pos:position pos:line="17" pos:column="64"/></name></expr> <pos:position pos:line="17" pos:column="65"/></then><else pos:line="17" pos:column="65">: <expr><literal type="string" pos:line="17" pos:column="67">"any"<pos:position pos:line="17" pos:column="72"/></literal></expr></else></ternary></expr></argument>,
                            <argument><expr><name pos:line="18" pos:column="29">PCAP_SNAPLEN<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="43">0<pos:position pos:line="18" pos:column="44"/></literal></expr></argument> <comment type="block" pos:line="18" pos:column="45">/* Not promiscuous */</comment>,
                            <argument><expr><operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">int<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">)<pos:position pos:line="19" pos:column="34"/></operator><call><name pos:line="19" pos:column="34">CDTIME_T_TO_MS<pos:position pos:line="19" pos:column="48"/></name><argument_list pos:line="19" pos:column="48">(<argument><expr><call><name pos:line="19" pos:column="49">plugin_get_interval<pos:position pos:line="19" pos:column="68"/></name><argument_list pos:line="19" pos:column="68">()<pos:position pos:line="19" pos:column="70"/></argument_list></call> <operator pos:line="19" pos:column="71">/<pos:position pos:line="19" pos:column="72"/></operator> <literal type="number" pos:line="19" pos:column="73">2<pos:position pos:line="19" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr></argument>,
                            <argument><expr><name pos:line="20" pos:column="29">pcap_error<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">pcap_obj<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">==<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">NULL<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24"> <block pos:line="21" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="string" pos:line="22" pos:column="11">"dns plugin: Opening interface `%s' "<pos:position pos:line="22" pos:column="48"/></literal>
          <literal type="string" pos:line="23" pos:column="11">"failed: %s"<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="24" pos:column="11">(<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">pcap_device<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">!=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">NULL<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">)<pos:position pos:line="24" pos:column="32"/></operator></expr> ?<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <expr><name pos:line="24" pos:column="35">pcap_device<pos:position pos:line="24" pos:column="46"/></name></expr> <pos:position pos:line="24" pos:column="47"/></then><else pos:line="24" pos:column="47">: <expr><literal type="string" pos:line="24" pos:column="49">"any"<pos:position pos:line="24" pos:column="54"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">pcap_error<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">PCAP_ERROR<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">)<pos:position pos:line="25" pos:column="24"/></operator></expr>;<pos:position pos:line="25" pos:column="25"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="28" pos:column="3">status<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <call><name pos:line="28" pos:column="12">pcap_compile<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">pcap_obj<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="35">&amp;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="36">fp<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="40">"udp port 53"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="55">1<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="58">0<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">status<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">&lt;<pos:position pos:line="29" pos:column="18"/></operator> <literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18"> <block pos:line="29" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"dns plugin: pcap_compile failed: %s"<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="50">pcap_statustostr<pos:position pos:line="30" pos:column="66"/></name><argument_list pos:line="30" pos:column="66">(<argument><expr><name pos:line="30" pos:column="67">status<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">status<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">)<pos:position pos:line="31" pos:column="20"/></operator></expr>;<pos:position pos:line="31" pos:column="21"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="34" pos:column="3">status<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">pcap_setfilter<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">pcap_obj<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="37">&amp;<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="38">fp<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">status<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">&lt;<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>)<pos:position pos:line="35" pos:column="18"/></condition><then pos:line="35" pos:column="18"> <block pos:line="35" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ERROR<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><literal type="string" pos:line="36" pos:column="11">"dns plugin: pcap_setfilter failed: %s"<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="52">pcap_statustostr<pos:position pos:line="36" pos:column="68"/></name><argument_list pos:line="36" pos:column="68">(<argument><expr><name pos:line="36" pos:column="69">status<pos:position pos:line="36" pos:column="75"/></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">status<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">)<pos:position pos:line="37" pos:column="20"/></operator></expr>;<pos:position pos:line="37" pos:column="21"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">DEBUG<pos:position pos:line="40" pos:column="8"/></name><argument_list pos:line="40" pos:column="8">(<argument><expr><literal type="string" pos:line="40" pos:column="9">"dns plugin: PCAP object created."<pos:position pos:line="40" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">dnstop_set_pcap_obj<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">pcap_obj<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">dnstop_set_callback<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">dns_child_callback<pos:position pos:line="43" pos:column="41"/></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="45" pos:column="3">status<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <call><name pos:line="45" pos:column="12">pcap_loop<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">pcap_obj<pos:position pos:line="45" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="32">-<pos:position pos:line="45" pos:column="33"/></operator><literal type="number" pos:line="45" pos:column="33">1<pos:position pos:line="45" pos:column="34"/></literal></expr></argument> <comment type="block" pos:line="45" pos:column="35">/* loop forever */</comment>,
                     <argument><expr><name pos:line="46" pos:column="22">handle_pcap<pos:position pos:line="46" pos:column="33"/></name></expr></argument> <comment type="block" pos:line="46" pos:column="34">/* callback */</comment>, <argument><expr><name pos:line="46" pos:column="50">NULL<pos:position pos:line="46" pos:column="54"/></name></expr></argument> <comment type="block" pos:line="46" pos:column="55">/* user data */</comment>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">INFO<pos:position pos:line="47" pos:column="7"/></name><argument_list pos:line="47" pos:column="7">(<argument><expr><literal type="string" pos:line="47" pos:column="8">"dns plugin: pcap_loop exited with status %i."<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="56">status<pos:position pos:line="47" pos:column="62"/></name></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
  <comment type="block" pos:line="48" pos:column="3">/* We need to handle "PCAP_ERROR" specially because libpcap currently
   * doesn't return PCAP_ERROR_IFACE_NOT_UP for compatibility reasons. */</comment>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name pos:line="50" pos:column="7">status<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">==<pos:position pos:line="50" pos:column="16"/></operator> <name pos:line="50" pos:column="17">PCAP_ERROR<pos:position pos:line="50" pos:column="27"/></name></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="5">status<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <name pos:line="51" pos:column="14">PCAP_ERROR_IFACE_NOT_UP<pos:position pos:line="51" pos:column="37"/></name></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">pcap_close<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">pcap_obj<pos:position pos:line="53" pos:column="22"/></name></expr></argument>)<pos:position pos:line="53" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
  <return pos:line="54" pos:column="3">return <expr><operator pos:line="54" pos:column="10">(<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="11">status<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">)<pos:position pos:line="54" pos:column="18"/></operator></expr>;<pos:position pos:line="54" pos:column="19"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
