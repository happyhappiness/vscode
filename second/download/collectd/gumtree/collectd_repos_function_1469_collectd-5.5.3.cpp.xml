<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1469_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_config<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">oconfig_item_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">ci<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list> <comment type="block" pos:line="1" pos:column="47">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>		 <name pos:line="3" pos:column="26">i<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">oconfig_item_t<pos:position pos:line="4" pos:column="23"/></name>	<modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">child<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>		 <name pos:line="5" pos:column="26">status<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name><name pos:line="7" pos:column="25">ci<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">children_num<pos:position pos:line="7" pos:column="41"/></name></name></expr>;<pos:position pos:line="7" pos:column="42"/></condition> <incr><expr><name pos:line="7" pos:column="43">i<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">++<pos:position pos:line="7" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="47"/></control>  <block pos:line="7" pos:column="49">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">child<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <operator pos:line="8" pos:column="25">&amp;<pos:position pos:line="8" pos:column="30"/></operator><name><name pos:line="8" pos:column="26">ci<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">children<pos:position pos:line="8" pos:column="38"/></name><index pos:line="8" pos:column="38">[<expr><name pos:line="8" pos:column="39">i<pos:position pos:line="8" pos:column="40"/></name></expr>]<pos:position pos:line="8" pos:column="41"/></index></name></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">strcasecmp<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><literal type="string" pos:line="10" pos:column="32">"Node"<pos:position pos:line="10" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="40">child<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">key<pos:position pos:line="10" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call> <operator pos:line="10" pos:column="52">==<pos:position pos:line="10" pos:column="54"/></operator> <literal type="number" pos:line="10" pos:column="55">0<pos:position pos:line="10" pos:column="56"/></literal></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57"> <block pos:line="10" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">riemann_config_node<pos:position pos:line="11" pos:column="44"/></name> <argument_list pos:line="11" pos:column="45">(<argument><expr><name pos:line="11" pos:column="46">child<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="12" pos:column="18"/></block></then> <elseif pos:line="12" pos:column="19">else <if pos:line="12" pos:column="24">if <condition pos:line="12" pos:column="27">(<expr><call><name pos:line="12" pos:column="28">strcasecmp<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name><name pos:line="12" pos:column="39">child<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">-&gt;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="46">key<pos:position pos:line="12" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="51">"attribute"<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call> <operator pos:line="12" pos:column="64">==<pos:position pos:line="12" pos:column="66"/></operator> <literal type="number" pos:line="12" pos:column="67">0<pos:position pos:line="12" pos:column="68"/></literal></expr>)<pos:position pos:line="12" pos:column="69"/></condition><then pos:line="12" pos:column="69"> <block pos:line="12" pos:column="70">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">char<pos:position pos:line="13" pos:column="29"/></name> <modifier pos:line="13" pos:column="30">*<pos:position pos:line="13" pos:column="31"/></modifier></type><name pos:line="13" pos:column="31">key<pos:position pos:line="13" pos:column="34"/></name> <init pos:line="13" pos:column="35">= <expr><name pos:line="13" pos:column="37">NULL<pos:position pos:line="13" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">char<pos:position pos:line="14" pos:column="29"/></name> <modifier pos:line="14" pos:column="30">*<pos:position pos:line="14" pos:column="31"/></modifier></type><name pos:line="14" pos:column="31">val<pos:position pos:line="14" pos:column="34"/></name> <init pos:line="14" pos:column="35">= <expr><name pos:line="14" pos:column="37">NULL<pos:position pos:line="14" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>

			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name><name pos:line="16" pos:column="29">child<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">values_num<pos:position pos:line="16" pos:column="46"/></name></name> <operator pos:line="16" pos:column="47">!=<pos:position pos:line="16" pos:column="49"/></operator> <literal type="number" pos:line="16" pos:column="50">2<pos:position pos:line="16" pos:column="51"/></literal></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52"> <block pos:line="16" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="17" pos:column="33">WARNING<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><literal type="string" pos:line="17" pos:column="41">"riemann attributes need both a key and a value."<pos:position pos:line="17" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="92"/></expr_stmt>
				<return pos:line="18" pos:column="33">return <expr><operator pos:line="18" pos:column="40">(<pos:position pos:line="18" pos:column="41"/></operator><operator pos:line="18" pos:column="41">-<pos:position pos:line="18" pos:column="42"/></operator><literal type="number" pos:line="18" pos:column="42">1<pos:position pos:line="18" pos:column="43"/></literal><operator pos:line="18" pos:column="43">)<pos:position pos:line="18" pos:column="44"/></operator></expr>;<pos:position pos:line="18" pos:column="45"/></return>
			}<pos:position pos:line="19" pos:column="26"/></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name><name pos:line="20" pos:column="29">child<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">values<pos:position pos:line="20" pos:column="42"/></name><index pos:line="20" pos:column="42">[<expr><literal type="number" pos:line="20" pos:column="43">0<pos:position pos:line="20" pos:column="44"/></literal></expr>]<pos:position pos:line="20" pos:column="45"/></index></name><operator pos:line="20" pos:column="45">.<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">type<pos:position pos:line="20" pos:column="50"/></name> <operator pos:line="20" pos:column="51">!=<pos:position pos:line="20" pos:column="53"/></operator> <name pos:line="20" pos:column="54">OCONFIG_TYPE_STRING<pos:position pos:line="20" pos:column="73"/></name> <operator pos:line="20" pos:column="74">||<pos:position pos:line="20" pos:column="76"/></operator>
			    <name><name pos:line="21" pos:column="29">child<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">values<pos:position pos:line="21" pos:column="42"/></name><index pos:line="21" pos:column="42">[<expr><literal type="number" pos:line="21" pos:column="43">1<pos:position pos:line="21" pos:column="44"/></literal></expr>]<pos:position pos:line="21" pos:column="45"/></index></name><operator pos:line="21" pos:column="45">.<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="46">type<pos:position pos:line="21" pos:column="50"/></name> <operator pos:line="21" pos:column="51">!=<pos:position pos:line="21" pos:column="53"/></operator> <name pos:line="21" pos:column="54">OCONFIG_TYPE_STRING<pos:position pos:line="21" pos:column="73"/></name></expr>)<pos:position pos:line="21" pos:column="74"/></condition><then pos:line="21" pos:column="74"> <block pos:line="21" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">WARNING<pos:position pos:line="22" pos:column="40"/></name><argument_list pos:line="22" pos:column="40">(<argument><expr><literal type="string" pos:line="22" pos:column="41">"riemann attribute needs string arguments."<pos:position pos:line="22" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="86"/></expr_stmt>
				<return pos:line="23" pos:column="33">return <expr><operator pos:line="23" pos:column="40">(<pos:position pos:line="23" pos:column="41"/></operator><operator pos:line="23" pos:column="41">-<pos:position pos:line="23" pos:column="42"/></operator><literal type="number" pos:line="23" pos:column="42">1<pos:position pos:line="23" pos:column="43"/></literal><operator pos:line="23" pos:column="43">)<pos:position pos:line="23" pos:column="44"/></operator></expr>;<pos:position pos:line="23" pos:column="45"/></return>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><operator pos:line="25" pos:column="29">(<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">key<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">=<pos:position pos:line="25" pos:column="35"/></operator> <call><name pos:line="25" pos:column="36">strdup<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name><name pos:line="25" pos:column="43">child<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">values<pos:position pos:line="25" pos:column="56"/></name><index pos:line="25" pos:column="56">[<expr><literal type="number" pos:line="25" pos:column="57">0<pos:position pos:line="25" pos:column="58"/></literal></expr>]<pos:position pos:line="25" pos:column="59"/></index></name><operator pos:line="25" pos:column="59">.<pos:position pos:line="25" pos:column="60"/></operator><name><name pos:line="25" pos:column="60">value<pos:position pos:line="25" pos:column="65"/></name><operator pos:line="25" pos:column="65">.<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="66">string<pos:position pos:line="25" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call><operator pos:line="25" pos:column="73">)<pos:position pos:line="25" pos:column="74"/></operator> <operator pos:line="25" pos:column="75">==<pos:position pos:line="25" pos:column="77"/></operator> <name pos:line="25" pos:column="78">NULL<pos:position pos:line="25" pos:column="82"/></name></expr>)<pos:position pos:line="25" pos:column="83"/></condition><then pos:line="25" pos:column="83"> <block pos:line="25" pos:column="84">{
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">WARNING<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><literal type="string" pos:line="26" pos:column="41">"cannot allocate memory for attribute key."<pos:position pos:line="26" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="86"/></expr_stmt>
				<return pos:line="27" pos:column="33">return <expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><operator pos:line="27" pos:column="41">-<pos:position pos:line="27" pos:column="42"/></operator><literal type="number" pos:line="27" pos:column="42">1<pos:position pos:line="27" pos:column="43"/></literal><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator></expr>;<pos:position pos:line="27" pos:column="45"/></return>
			}<pos:position pos:line="28" pos:column="26"/></block></then></if>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">val<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">=<pos:position pos:line="29" pos:column="35"/></operator> <call><name pos:line="29" pos:column="36">strdup<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name><name pos:line="29" pos:column="43">child<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">values<pos:position pos:line="29" pos:column="56"/></name><index pos:line="29" pos:column="56">[<expr><literal type="number" pos:line="29" pos:column="57">1<pos:position pos:line="29" pos:column="58"/></literal></expr>]<pos:position pos:line="29" pos:column="59"/></index></name><operator pos:line="29" pos:column="59">.<pos:position pos:line="29" pos:column="60"/></operator><name><name pos:line="29" pos:column="60">value<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">.<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="66">string<pos:position pos:line="29" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call><operator pos:line="29" pos:column="73">)<pos:position pos:line="29" pos:column="74"/></operator> <operator pos:line="29" pos:column="75">==<pos:position pos:line="29" pos:column="77"/></operator> <name pos:line="29" pos:column="78">NULL<pos:position pos:line="29" pos:column="82"/></name></expr>)<pos:position pos:line="29" pos:column="83"/></condition><then pos:line="29" pos:column="83"> <block pos:line="29" pos:column="84">{
				<expr_stmt><expr><call><name pos:line="30" pos:column="33">WARNING<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><literal type="string" pos:line="30" pos:column="41">"cannot allocate memory for attribute value."<pos:position pos:line="30" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="88"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">sfree<pos:position pos:line="31" pos:column="38"/></name> <argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">key<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
				<return pos:line="32" pos:column="33">return <expr><operator pos:line="32" pos:column="40">(<pos:position pos:line="32" pos:column="41"/></operator><operator pos:line="32" pos:column="41">-<pos:position pos:line="32" pos:column="42"/></operator><literal type="number" pos:line="32" pos:column="42">1<pos:position pos:line="32" pos:column="43"/></literal><operator pos:line="32" pos:column="43">)<pos:position pos:line="32" pos:column="44"/></operator></expr>;<pos:position pos:line="32" pos:column="45"/></return>
			}<pos:position pos:line="33" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">strarray_add<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="39">riemann_attrs<pos:position pos:line="34" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="54">&amp;<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="55">riemann_attrs_num<pos:position pos:line="34" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="74">key<pos:position pos:line="34" pos:column="77"/></name></expr></argument>)<pos:position pos:line="34" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="79"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">strarray_add<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><operator pos:line="35" pos:column="38">&amp;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="39">riemann_attrs<pos:position pos:line="35" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="54">&amp;<pos:position pos:line="35" pos:column="59"/></operator><name pos:line="35" pos:column="55">riemann_attrs_num<pos:position pos:line="35" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="74">val<pos:position pos:line="35" pos:column="77"/></name></expr></argument>)<pos:position pos:line="35" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="79"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">DEBUG<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><literal type="string" pos:line="36" pos:column="31">"write_riemann: got attr: %s =&gt; %s"<pos:position pos:line="36" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="68">key<pos:position pos:line="36" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">val<pos:position pos:line="36" pos:column="76"/></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">sfree<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">key<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">sfree<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">val<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if></elseif> <elseif pos:line="39" pos:column="19">else <if pos:line="39" pos:column="24">if <condition pos:line="39" pos:column="27">(<expr><call><name pos:line="39" pos:column="28">strcasecmp<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name><name pos:line="39" pos:column="39">child<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">-&gt;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="46">key<pos:position pos:line="39" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="51">"tag"<pos:position pos:line="39" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call> <operator pos:line="39" pos:column="58">==<pos:position pos:line="39" pos:column="60"/></operator> <literal type="number" pos:line="39" pos:column="61">0<pos:position pos:line="39" pos:column="62"/></literal></expr>)<pos:position pos:line="39" pos:column="63"/></condition><then pos:line="39" pos:column="63"> <block pos:line="39" pos:column="64">{
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">char<pos:position pos:line="40" pos:column="29"/></name> <modifier pos:line="40" pos:column="30">*<pos:position pos:line="40" pos:column="31"/></modifier></type><name pos:line="40" pos:column="31">tmp<pos:position pos:line="40" pos:column="34"/></name> <init pos:line="40" pos:column="35">= <expr><name pos:line="40" pos:column="37">NULL<pos:position pos:line="40" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">status<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <call><name pos:line="41" pos:column="34">cf_util_get_string<pos:position pos:line="41" pos:column="52"/></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">child<pos:position pos:line="41" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="60">&amp;<pos:position pos:line="41" pos:column="65"/></operator><name pos:line="41" pos:column="61">tmp<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name pos:line="42" pos:column="29">status<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">!=<pos:position pos:line="42" pos:column="38"/></operator> <literal type="number" pos:line="42" pos:column="39">0<pos:position pos:line="42" pos:column="40"/></literal></expr>)<pos:position pos:line="42" pos:column="41"/></condition><then pos:line="42" pos:column="41">
				<block type="pseudo"><continue pos:line="43" pos:column="33">continue;<pos:position pos:line="43" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="45" pos:column="25">strarray_add<pos:position pos:line="45" pos:column="37"/></name> <argument_list pos:line="45" pos:column="38">(<argument><expr><operator pos:line="45" pos:column="39">&amp;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="40">riemann_tags<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="54">&amp;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="55">riemann_tags_num<pos:position pos:line="45" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="73">tmp<pos:position pos:line="45" pos:column="76"/></name></expr></argument>)<pos:position pos:line="45" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">DEBUG<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><literal type="string" pos:line="46" pos:column="31">"write_riemann plugin: Got tag: %s"<pos:position pos:line="46" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="68">tmp<pos:position pos:line="46" pos:column="71"/></name></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">sfree<pos:position pos:line="47" pos:column="30"/></name> <argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">tmp<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if></elseif> <else pos:line="48" pos:column="19">else <block pos:line="48" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">WARNING<pos:position pos:line="49" pos:column="32"/></name> <argument_list pos:line="49" pos:column="33">(<argument><expr><literal type="string" pos:line="49" pos:column="34">"write_riemann plugin: Ignoring unknown "<pos:position pos:line="49" pos:column="75"/></literal>
				 <literal type="string" pos:line="50" pos:column="34">"configuration option \"%s\" at top level."<pos:position pos:line="50" pos:column="77"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="51" pos:column="34">child<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">key<pos:position pos:line="51" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></else></if>
	}<pos:position pos:line="53" pos:column="10"/></block></for>
	<return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">0<pos:position pos:line="54" pos:column="18"/></literal><operator pos:line="54" pos:column="18">)<pos:position pos:line="54" pos:column="19"/></operator></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
