<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1736_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mb_config_set_host_address<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">mb_host_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">host<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="57">/* {{{ */</comment>
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">address<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">addrinfo<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">ai_list<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ai_ptr<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type>  <name pos:line="6" pos:column="20">ai_hints<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">(<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">host<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">==<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">)<pos:position pos:line="9" pos:column="21"/></operator> <operator pos:line="9" pos:column="22">||<pos:position pos:line="9" pos:column="24"/></operator> <operator pos:line="9" pos:column="25">(<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">address<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">==<pos:position pos:line="9" pos:column="36"/></operator> <name pos:line="9" pos:column="37">NULL<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">)<pos:position pos:line="9" pos:column="42"/></operator></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">EINVAL<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">)<pos:position pos:line="10" pos:column="20"/></operator></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memset<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><operator pos:line="12" pos:column="11">&amp;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="12">ai_hints<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="25">sizeof <argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">ai_hints<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">AI_ADDRCONFIG<pos:position pos:line="13" pos:column="18"/></name></expr></cpp:if>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">ai_hints<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">ai_flags<pos:position pos:line="14" pos:column="20"/></name></name> <operator pos:line="14" pos:column="21">|=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">AI_ADDRCONFIG<pos:position pos:line="14" pos:column="37"/></name></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="16" pos:column="3">/* XXX: libmodbus can only handle IPv4 addresses. */</comment>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">ai_hints<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">.<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">ai_family<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">AF_INET<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">ai_hints<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">ai_addr<pos:position pos:line="18" pos:column="19"/></name></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">NULL<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">ai_hints<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">ai_canonname<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">NULL<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">ai_hints<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">ai_next<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="22" pos:column="3">ai_list<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <name pos:line="22" pos:column="13">NULL<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">status<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">getaddrinfo<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">address<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <comment type="block" pos:line="23" pos:column="34">/* service = */</comment> <argument><expr><name pos:line="23" pos:column="50">NULL<pos:position pos:line="23" pos:column="54"/></name></expr></argument>,
      <argument><expr><operator pos:line="24" pos:column="7">&amp;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="8">ai_hints<pos:position pos:line="24" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="18">&amp;<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="19">ai_list<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">status<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">!=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19">
  <block pos:line="26" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name></type> <name><name pos:line="27" pos:column="10">errbuf<pos:position pos:line="27" pos:column="16"/></name><index pos:line="27" pos:column="16">[<expr><literal type="number" pos:line="27" pos:column="17">1024<pos:position pos:line="27" pos:column="21"/></literal></expr>]<pos:position pos:line="27" pos:column="22"/></index></name></decl>;<pos:position pos:line="27" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ERROR<pos:position pos:line="28" pos:column="10"/></name> <argument_list pos:line="28" pos:column="11">(<argument><expr><literal type="string" pos:line="28" pos:column="12">"Modbus plugin: getaddrinfo failed: %s"<pos:position pos:line="28" pos:column="51"/></literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">status<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">==<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">EAI_SYSTEM<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">)<pos:position pos:line="29" pos:column="31"/></operator></expr>
        ?<pos:position pos:line="30" pos:column="10"/></condition><then pos:line="30" pos:column="10"> <expr><call><name pos:line="30" pos:column="11">sstrerror<pos:position pos:line="30" pos:column="20"/></name> <argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">errno<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="29">errbuf<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="37">sizeof <argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">errbuf<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>
        <pos:position pos:line="31" pos:column="9"/></then><else pos:line="31" pos:column="9">: <expr><call><name pos:line="31" pos:column="11">gai_strerror<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">status<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">)<pos:position pos:line="32" pos:column="20"/></operator></expr>;<pos:position pos:line="32" pos:column="21"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <for pos:line="35" pos:column="3">for <control pos:line="35" pos:column="7">(<init><expr><name pos:line="35" pos:column="8">ai_ptr<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">ai_list<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></init> <condition><expr><name pos:line="35" pos:column="26">ai_ptr<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">!=<pos:position pos:line="35" pos:column="35"/></operator> <name pos:line="35" pos:column="36">NULL<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></condition> <incr><expr><name pos:line="35" pos:column="42">ai_ptr<pos:position pos:line="35" pos:column="48"/></name> <operator pos:line="35" pos:column="49">=<pos:position pos:line="35" pos:column="50"/></operator> <name><name pos:line="35" pos:column="51">ai_ptr<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">-&gt;<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="59">ai_next<pos:position pos:line="35" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="35" pos:column="67"/></control>
  <block pos:line="36" pos:column="3">{
    <expr_stmt><expr><name pos:line="37" pos:column="5">status<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">getnameinfo<pos:position pos:line="37" pos:column="25"/></name> <argument_list pos:line="37" pos:column="26">(<argument><expr><name><name pos:line="37" pos:column="27">ai_ptr<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">ai_addr<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="44">ai_ptr<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-&gt;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="52">ai_addrlen<pos:position pos:line="37" pos:column="62"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="38" pos:column="9">host<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">node<pos:position pos:line="38" pos:column="19"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="21">sizeof <argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">host<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">-&gt;<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="35">node<pos:position pos:line="38" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></sizeof></expr></argument>,
        <comment type="block" pos:line="39" pos:column="9">/* service = */</comment> <argument><expr><name pos:line="39" pos:column="25">NULL<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <comment type="block" pos:line="39" pos:column="31">/* length = */</comment> <argument><expr><literal type="number" pos:line="39" pos:column="46">0<pos:position pos:line="39" pos:column="47"/></literal></expr></argument>,
        <comment type="block" pos:line="40" pos:column="9">/* flags = */</comment> <argument><expr><name pos:line="40" pos:column="23">NI_NUMERICHOST<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">status<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <literal type="number" pos:line="41" pos:column="19">0<pos:position pos:line="41" pos:column="20"/></literal></expr>)<pos:position pos:line="41" pos:column="21"/></condition><then pos:line="41" pos:column="21">
      <block type="pseudo"><break pos:line="42" pos:column="7">break;<pos:position pos:line="42" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="43" pos:column="4"/></block></for> <comment type="block" pos:line="43" pos:column="5">/* for (ai_ptr) */</comment>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">freeaddrinfo<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">ai_list<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>

  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><name pos:line="47" pos:column="7">status<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">!=<pos:position pos:line="47" pos:column="16"/></operator> <literal type="number" pos:line="47" pos:column="17">0<pos:position pos:line="47" pos:column="18"/></literal></expr>)<pos:position pos:line="47" pos:column="19"/></condition><then pos:line="47" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="5">ERROR<pos:position pos:line="48" pos:column="10"/></name> <argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="string" pos:line="48" pos:column="12">"Modbus plugin: Unable to translate node name: \"%s\""<pos:position pos:line="48" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="68">address<pos:position pos:line="48" pos:column="75"/></name></expr></argument>)<pos:position pos:line="48" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="77"/></expr_stmt></block></then>
  <else pos:line="49" pos:column="3">else <comment type="block" pos:line="49" pos:column="8">/* if (status == 0) */</comment>
  <block pos:line="50" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">DEBUG<pos:position pos:line="51" pos:column="10"/></name> <argument_list pos:line="51" pos:column="11">(<argument><expr><literal type="string" pos:line="51" pos:column="12">"Modbus plugin: mb_config_set_host_address: %s -&gt; %s"<pos:position pos:line="51" pos:column="68"/></literal></expr></argument>,
        <argument><expr><name pos:line="52" pos:column="9">address<pos:position pos:line="52" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="18">host<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">-&gt;<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="24">node<pos:position pos:line="52" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></else></if>

  <return pos:line="55" pos:column="3">return <expr><operator pos:line="55" pos:column="10">(<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">status<pos:position pos:line="55" pos:column="17"/></name><operator pos:line="55" pos:column="17">)<pos:position pos:line="55" pos:column="18"/></operator></expr>;<pos:position pos:line="55" pos:column="19"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
