<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_431_collectd-4.7.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ps_list_match<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">name<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">cmdline<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">procstat_t<pos:position pos:line="1" pos:column="76"/></name> <modifier pos:line="1" pos:column="77">*<pos:position pos:line="1" pos:column="78"/></modifier></type><name pos:line="1" pos:column="78">ps<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">HAVE_REGEX_H<pos:position pos:line="3" pos:column="17"/></name></expr></cpp:if>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">ps<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">-&gt;<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="17">re<pos:position pos:line="4" pos:column="19"/></name></name> <operator pos:line="4" pos:column="20">!=<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28">
	<block pos:line="5" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">status<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">str<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="9" pos:column="17">str<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">cmdline<pos:position pos:line="9" pos:column="30"/></name></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">(<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">str<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">NULL<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">)<pos:position pos:line="10" pos:column="34"/></operator> <operator pos:line="10" pos:column="35">||<pos:position pos:line="10" pos:column="37"/></operator> <operator pos:line="10" pos:column="38">(<pos:position pos:line="10" pos:column="39"/></operator><name><name pos:line="10" pos:column="39">str<pos:position pos:line="10" pos:column="42"/></name><index pos:line="10" pos:column="42">[<expr><literal type="number" pos:line="10" pos:column="43">0<pos:position pos:line="10" pos:column="44"/></literal></expr>]<pos:position pos:line="10" pos:column="45"/></index></name> <operator pos:line="10" pos:column="46">==<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="49">0<pos:position pos:line="10" pos:column="50"/></literal><operator pos:line="10" pos:column="50">)<pos:position pos:line="10" pos:column="51"/></operator></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">str<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">name<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="13" pos:column="17">assert<pos:position pos:line="13" pos:column="23"/></name> <argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">str<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">!=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>

		<expr_stmt><expr><name pos:line="15" pos:column="17">status<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <call><name pos:line="15" pos:column="26">regexec<pos:position pos:line="15" pos:column="33"/></name> <argument_list pos:line="15" pos:column="34">(<argument><expr><name><name pos:line="15" pos:column="35">ps<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">-&gt;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="39">re<pos:position pos:line="15" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">str<pos:position pos:line="15" pos:column="46"/></name></expr></argument>,
				<comment type="block" pos:line="16" pos:column="33">/* nmatch = */</comment> <argument><expr><literal type="number" pos:line="16" pos:column="48">0<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>,
				<comment type="block" pos:line="17" pos:column="33">/* pmatch = */</comment> <argument><expr><name pos:line="17" pos:column="48">NULL<pos:position pos:line="17" pos:column="52"/></name></expr></argument>,
				<comment type="block" pos:line="18" pos:column="33">/* eflags = */</comment> <argument><expr><literal type="number" pos:line="18" pos:column="48">0<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">status<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">==<pos:position pos:line="19" pos:column="30"/></operator> <literal type="number" pos:line="19" pos:column="31">0<pos:position pos:line="19" pos:column="32"/></literal></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
			<block type="pseudo"><return pos:line="20" pos:column="25">return <expr><operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator></expr>;<pos:position pos:line="20" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then>
	<elseif pos:line="22" pos:column="9">else
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">strcmp<pos:position pos:line="24" pos:column="19"/></name> <argument_list pos:line="24" pos:column="20">(<argument><expr><name><name pos:line="24" pos:column="21">ps<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">name<pos:position pos:line="24" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">name<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call> <operator pos:line="24" pos:column="37">==<pos:position pos:line="24" pos:column="39"/></operator> <literal type="number" pos:line="24" pos:column="40">0<pos:position pos:line="24" pos:column="41"/></literal></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal><operator pos:line="25" pos:column="26">)<pos:position pos:line="25" pos:column="27"/></operator></expr>;<pos:position pos:line="25" pos:column="28"/></return></block></then></if></elseif></if>

	<return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal><operator pos:line="27" pos:column="18">)<pos:position pos:line="27" pos:column="19"/></operator></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
