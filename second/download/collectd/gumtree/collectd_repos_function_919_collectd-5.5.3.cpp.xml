<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_919_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">zookeeper_connect<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">sk<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator><literal type="number" pos:line="3" pos:column="19">1<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">addrinfo<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">ai_hints<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">ai<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">addrinfo<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">ai_list<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">host<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">port<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">memset<pos:position pos:line="11" pos:column="15"/></name> <argument_list pos:line="11" pos:column="16">(<argument><expr><operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">void<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></operator><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="26">&amp;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="27">ai_hints<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="37">'\0'<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="43">sizeof <argument_list pos:line="11" pos:column="50">(<argument><expr><name pos:line="11" pos:column="51">ai_hints<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">ai_hints<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">ai_family<pos:position pos:line="12" pos:column="27"/></name></name>   <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="32">AF_UNSPEC<pos:position pos:line="12" pos:column="41"/></name></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">ai_hints<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">.<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">ai_socktype<pos:position pos:line="13" pos:column="29"/></name></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">SOCK_STREAM<pos:position pos:line="13" pos:column="43"/></name></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">host<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">zk_host<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">!=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">NULL<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">)<pos:position pos:line="15" pos:column="33"/></operator></expr> ?<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <expr><name pos:line="15" pos:column="36">zk_host<pos:position pos:line="15" pos:column="43"/></name></expr> <pos:position pos:line="15" pos:column="44"/></then><else pos:line="15" pos:column="44">: <expr><name pos:line="15" pos:column="46">ZOOKEEPER_DEF_HOST<pos:position pos:line="15" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">port<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">zk_port<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">!=<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">NULL<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">)<pos:position pos:line="16" pos:column="33"/></operator></expr> ?<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <expr><name pos:line="16" pos:column="36">zk_port<pos:position pos:line="16" pos:column="43"/></name></expr> <pos:position pos:line="16" pos:column="44"/></then><else pos:line="16" pos:column="44">: <expr><name pos:line="16" pos:column="46">ZOOKEEPER_DEF_PORT<pos:position pos:line="16" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">status<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">getaddrinfo<pos:position pos:line="17" pos:column="29"/></name> <argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">host<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">port<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">ai_hints<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="54">&amp;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="55">ai_list<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">status<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">!=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="23">0<pos:position pos:line="18" pos:column="24"/></literal></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25">
	<block pos:line="19" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name></type> <name><name pos:line="20" pos:column="22">errbuf<pos:position pos:line="20" pos:column="28"/></name><index pos:line="20" pos:column="28">[<expr><literal type="number" pos:line="20" pos:column="29">1024<pos:position pos:line="20" pos:column="33"/></literal></expr>]<pos:position pos:line="20" pos:column="34"/></index></name></decl>;<pos:position pos:line="20" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">INFO<pos:position pos:line="21" pos:column="21"/></name> <argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="string" pos:line="21" pos:column="23">"getaddrinfo failed: %s"<pos:position pos:line="21" pos:column="47"/></literal></expr></argument>,
			  <argument><expr><ternary><condition><expr><operator pos:line="22" pos:column="27">(<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">status<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">==<pos:position pos:line="22" pos:column="37"/></operator> <name pos:line="22" pos:column="38">EAI_SYSTEM<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator></expr>
			  ?<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <expr><call><name pos:line="23" pos:column="29">sstrerror<pos:position pos:line="23" pos:column="38"/></name> <argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">errno<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">errbuf<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="55">sizeof <argument_list pos:line="23" pos:column="62">(<argument><expr><name pos:line="23" pos:column="63">errbuf<pos:position pos:line="23" pos:column="69"/></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>
			  <pos:position pos:line="24" pos:column="6"/></then><else pos:line="24" pos:column="27">: <expr><call><name pos:line="24" pos:column="29">gai_strerror<pos:position pos:line="24" pos:column="41"/></name> <argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">status<pos:position pos:line="24" pos:column="49"/></name></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><operator pos:line="25" pos:column="25">-<pos:position pos:line="25" pos:column="26"/></operator><literal type="number" pos:line="25" pos:column="26">1<pos:position pos:line="25" pos:column="27"/></literal><operator pos:line="25" pos:column="27">)<pos:position pos:line="25" pos:column="28"/></operator></expr>;<pos:position pos:line="25" pos:column="29"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">ai<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">ai_list<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></init> <condition><expr><name pos:line="28" pos:column="28">ai<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">!=<pos:position pos:line="28" pos:column="33"/></operator> <name pos:line="28" pos:column="34">NULL<pos:position pos:line="28" pos:column="38"/></name></expr>;<pos:position pos:line="28" pos:column="39"/></condition> <incr><expr><name pos:line="28" pos:column="40">ai<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">=<pos:position pos:line="28" pos:column="44"/></operator> <name><name pos:line="28" pos:column="45">ai<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">-&gt;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="49">ai_next<pos:position pos:line="28" pos:column="56"/></name></name></expr></incr>)<pos:position pos:line="28" pos:column="57"/></control>
	<block pos:line="29" pos:column="9">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">sk<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">socket<pos:position pos:line="30" pos:column="28"/></name> <argument_list pos:line="30" pos:column="29">(<argument><expr><name><name pos:line="30" pos:column="30">ai<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">ai_family<pos:position pos:line="30" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="45">SOCK_STREAM<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="58">0<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">sk<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">&lt;<pos:position pos:line="31" pos:column="28"/></operator> <literal type="number" pos:line="31" pos:column="26">0<pos:position pos:line="31" pos:column="27"/></literal></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28">
		<block pos:line="32" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">char<pos:position pos:line="33" pos:column="29"/></name></type> <name><name pos:line="33" pos:column="30">errbuf<pos:position pos:line="33" pos:column="36"/></name><index pos:line="33" pos:column="36">[<expr><literal type="number" pos:line="33" pos:column="37">1024<pos:position pos:line="33" pos:column="41"/></literal></expr>]<pos:position pos:line="33" pos:column="42"/></index></name></decl>;<pos:position pos:line="33" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">WARNING<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><literal type="string" pos:line="34" pos:column="34">"zookeeper: socket(2) failed: %s"<pos:position pos:line="34" pos:column="67"/></literal></expr></argument>,
					 <argument><expr><call><name pos:line="35" pos:column="42">sstrerror<pos:position pos:line="35" pos:column="51"/></name> <argument_list pos:line="35" pos:column="52">(<argument><expr><name pos:line="35" pos:column="53">errno<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">errbuf<pos:position pos:line="35" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="68">sizeof<argument_list pos:line="35" pos:column="74">(<argument><expr><name pos:line="35" pos:column="75">errbuf<pos:position pos:line="35" pos:column="81"/></name></expr></argument>)<pos:position pos:line="35" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="85"/></expr_stmt>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="38" pos:column="17">status<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="26">(<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">int<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">)<pos:position pos:line="38" pos:column="31"/></operator> <call><name pos:line="38" pos:column="32">connect<pos:position pos:line="38" pos:column="39"/></name> <argument_list pos:line="38" pos:column="40">(<argument><expr><name pos:line="38" pos:column="41">sk<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="45">ai<pos:position pos:line="38" pos:column="47"/></name><operator pos:line="38" pos:column="47">-&gt;<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="49">ai_addr<pos:position pos:line="38" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="58">ai<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">-&gt;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="62">ai_addrlen<pos:position pos:line="38" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">status<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">!=<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="31">0<pos:position pos:line="39" pos:column="32"/></literal></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33">
		<block pos:line="40" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">char<pos:position pos:line="41" pos:column="29"/></name></type> <name><name pos:line="41" pos:column="30">errbuf<pos:position pos:line="41" pos:column="36"/></name><index pos:line="41" pos:column="36">[<expr><literal type="number" pos:line="41" pos:column="37">1024<pos:position pos:line="41" pos:column="41"/></literal></expr>]<pos:position pos:line="41" pos:column="42"/></index></name></decl>;<pos:position pos:line="41" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">close<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">sk<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="43" pos:column="25">sk<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <operator pos:line="43" pos:column="30">-<pos:position pos:line="43" pos:column="31"/></operator><literal type="number" pos:line="43" pos:column="31">1<pos:position pos:line="43" pos:column="32"/></literal></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">WARNING<pos:position pos:line="44" pos:column="32"/></name> <argument_list pos:line="44" pos:column="33">(<argument><expr><literal type="string" pos:line="44" pos:column="34">"zookeeper: connect(2) failed: %s"<pos:position pos:line="44" pos:column="68"/></literal></expr></argument>,
					 <argument><expr><call><name pos:line="45" pos:column="42">sstrerror<pos:position pos:line="45" pos:column="51"/></name> <argument_list pos:line="45" pos:column="52">(<argument><expr><name pos:line="45" pos:column="53">errno<pos:position pos:line="45" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="60">errbuf<pos:position pos:line="45" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="68">sizeof<argument_list pos:line="45" pos:column="74">(<argument><expr><name pos:line="45" pos:column="75">errbuf<pos:position pos:line="45" pos:column="81"/></name></expr></argument>)<pos:position pos:line="45" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="85"/></expr_stmt>
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="49" pos:column="17">/* connected */</comment>
		<break pos:line="50" pos:column="17">break;<pos:position pos:line="50" pos:column="23"/></break>
	}<pos:position pos:line="51" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">freeaddrinfo<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">ai_list<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
	<return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="17">sk<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">)<pos:position pos:line="54" pos:column="20"/></operator></expr>;<pos:position pos:line="54" pos:column="21"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
