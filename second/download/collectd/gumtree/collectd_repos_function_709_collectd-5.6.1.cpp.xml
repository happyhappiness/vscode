<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_709_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mic_read_power<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">mic<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">U32<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">MicPwrUsage<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">power_use<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">ret<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">MicGetPowerUsage<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">mic_handle<pos:position pos:line="6" pos:column="42"/></name></expr></argument>,<argument><expr><operator pos:line="6" pos:column="43">&amp;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="44">power_use<pos:position pos:line="6" pos:column="53"/></name></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">!=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">MIC_ACCESS_API_SUCCESS<pos:position pos:line="7" pos:column="42"/></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block pos:line="7" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">ERROR<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><literal type="string" pos:line="8" pos:column="23">"mic plugin: Problem getting Power Usage: %s"<pos:position pos:line="8" pos:column="68"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="9" pos:column="25">MicGetErrorString<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">ret<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="49"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal><operator pos:line="10" pos:column="26">)<pos:position pos:line="10" pos:column="27"/></operator></expr>;<pos:position pos:line="10" pos:column="28"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* power is in uWatts, current in mA, voltage in uVolts..   convert to
	 * base unit */</comment>
	<cpp:define pos:line="15" pos:column="9">#<cpp:directive pos:line="15" pos:column="10">define<pos:position pos:line="15" pos:column="16"/></cpp:directive> <cpp:macro><name pos:line="15" pos:column="17">SUB_POWER<pos:position pos:line="15" pos:column="26"/></name><parameter_list pos:line="15" pos:column="26">(<parameter><type><name pos:line="15" pos:column="27">name<pos:position pos:line="15" pos:column="31"/></name></type></parameter>)<pos:position pos:line="15" pos:column="32"/></parameter_list></cpp:macro> <cpp:value pos:line="15" pos:column="33">do { if (ignorelist_match(power_ignore,#name)==0) \
		mic_submit_power(mic,"power",#name,(gauge_t)power_use.name.prr*0.000001); \
	} while(0)<pos:position pos:line="17" pos:column="19"/></cpp:value></cpp:define>
	<cpp:define pos:line="18" pos:column="9">#<cpp:directive pos:line="18" pos:column="10">define<pos:position pos:line="18" pos:column="16"/></cpp:directive> <cpp:macro><name pos:line="18" pos:column="17">SUB_VOLTS<pos:position pos:line="18" pos:column="26"/></name><parameter_list pos:line="18" pos:column="26">(<parameter><type><name pos:line="18" pos:column="27">name<pos:position pos:line="18" pos:column="31"/></name></type></parameter>)<pos:position pos:line="18" pos:column="32"/></parameter_list></cpp:macro> <cpp:value pos:line="18" pos:column="33">do { if (ignorelist_match(power_ignore,#name)==0) {\
		mic_submit_power(mic,"power",#name,(gauge_t)(power_use.name.pwr*0.000001)); \
		mic_submit_power(mic,"current",#name,(gauge_t)(power_use.name.cur*0.001)); \
		mic_submit_power(mic,"voltage",#name,(gauge_t)(power_use.name.volt*0.000001)); \
	}} while(0)<pos:position pos:line="22" pos:column="20"/></cpp:value></cpp:define>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">SUB_POWER<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">total0<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">SUB_POWER<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">total1<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">SUB_POWER<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">inst<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">SUB_POWER<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">imax<pos:position pos:line="27" pos:column="23"/></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">SUB_POWER<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">pcie<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">SUB_POWER<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">c2x3<pos:position pos:line="29" pos:column="23"/></name></expr></argument>)<pos:position pos:line="29" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">SUB_POWER<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">c2x4<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">SUB_VOLTS<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name pos:line="31" pos:column="19">vccp<pos:position pos:line="31" pos:column="23"/></name></expr></argument>)<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">SUB_VOLTS<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">vddg<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">SUB_VOLTS<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">vddq<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>

	<return pos:line="35" pos:column="9">return <expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal><operator pos:line="35" pos:column="18">)<pos:position pos:line="35" pos:column="19"/></operator></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
