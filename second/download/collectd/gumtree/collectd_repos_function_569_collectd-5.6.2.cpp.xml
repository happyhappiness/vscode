<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_569_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">collectd_barometer_init<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <block pos:line="1" pos:column="42">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">errbuf<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><literal type="number" pos:line="2" pos:column="15">1024<pos:position pos:line="2" pos:column="19"/></literal></expr>]<pos:position pos:line="2" pos:column="20"/></index></name></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4" pos:column="3">DEBUG<pos:position pos:line="4" pos:column="8"/></name><argument_list pos:line="4" pos:column="8">(<argument><expr><literal type="string" pos:line="4" pos:column="9">"barometer: collectd_barometer_init"<pos:position pos:line="4" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="47"/></expr_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">config_device<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">==<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29"> <block pos:line="6" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ERROR<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><literal type="string" pos:line="7" pos:column="11">"barometer: collectd_barometer_init I2C bus device not configured"<pos:position pos:line="7" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="79"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">config_normalize<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&gt;=<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="27">MSLP_INTERNATIONAL<pos:position pos:line="11" pos:column="45"/></name> <operator pos:line="11" pos:column="46">&amp;&amp;<pos:position pos:line="11" pos:column="56"/></operator> <call><name pos:line="11" pos:column="49">isnan<pos:position pos:line="11" pos:column="54"/></name><argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">config_altitude<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="72"/></condition><then pos:line="11" pos:column="72"> <block pos:line="11" pos:column="73">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><literal type="string" pos:line="12" pos:column="11">"barometer: collectd_barometer_init no altitude configured "<pos:position pos:line="12" pos:column="71"/></literal>
          <literal type="string" pos:line="13" pos:column="11">"for mean sea level pressure normalization."<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">config_normalize<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">MSLP_DEU_WETT<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">&amp;&amp;<pos:position pos:line="17" pos:column="51"/></operator> <name pos:line="17" pos:column="44">temp_list<pos:position pos:line="17" pos:column="53"/></name> <operator pos:line="17" pos:column="54">==<pos:position pos:line="17" pos:column="56"/></operator> <name pos:line="17" pos:column="57">NULL<pos:position pos:line="17" pos:column="61"/></name></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"barometer: collectd_barometer_init no temperature reference "<pos:position pos:line="18" pos:column="73"/></literal>
          <literal type="string" pos:line="19" pos:column="11">"configured for mean sea level pressure normalization."<pos:position pos:line="19" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">i2c_bus_fd<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <call><name pos:line="23" pos:column="16">open<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">config_device<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">O_RDWR<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">i2c_bus_fd<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">&lt;<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22"> <block pos:line="24" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">ERROR<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><expr><literal type="string" pos:line="25" pos:column="11">"barometer: collectd_barometer_init problem opening I2C bus device "<pos:position pos:line="25" pos:column="79"/></literal>
          <literal type="string" pos:line="26" pos:column="11">"\"%s\": %s (is loaded mod i2c-dev?)"<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>,
          <argument><expr><name pos:line="27" pos:column="11">config_device<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="26">sstrerror<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">errno<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">errbuf<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="51">sizeof<argument_list pos:line="27" pos:column="57">(<argument><expr><name pos:line="27" pos:column="58">errbuf<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">-<pos:position pos:line="28" pos:column="13"/></operator><literal type="number" pos:line="28" pos:column="13">1<pos:position pos:line="28" pos:column="14"/></literal></expr>;<pos:position pos:line="28" pos:column="15"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="31" pos:column="3">/* detect sensor type - this will also set slave address */</comment>
  <expr_stmt><expr><name pos:line="32" pos:column="3">sensor_type<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <call><name pos:line="32" pos:column="17">detect_sensor_type<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">()<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* init correct sensor type */</comment>
  <switch pos:line="35" pos:column="3">switch <condition pos:line="35" pos:column="10">(<expr><name pos:line="35" pos:column="11">sensor_type<pos:position pos:line="35" pos:column="22"/></name></expr>)<pos:position pos:line="35" pos:column="23"/></condition> <block pos:line="35" pos:column="24">{
  <comment type="block" pos:line="36" pos:column="3">/* MPL3115 */</comment>
  <case pos:line="37" pos:column="3">case <expr><name pos:line="37" pos:column="8">Sensor_MPL3115<pos:position pos:line="37" pos:column="22"/></name></expr>:<pos:position pos:line="37" pos:column="23"/></case> <block pos:line="37" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">MPL3115_adjust_oversampling<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">()<pos:position pos:line="38" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">MPL3115_init_sensor<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">()<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31">
      <block type="pseudo"><return pos:line="41" pos:column="7">return <expr><operator pos:line="41" pos:column="14">-<pos:position pos:line="41" pos:column="15"/></operator><literal type="number" pos:line="41" pos:column="15">1<pos:position pos:line="41" pos:column="16"/></literal></expr>;<pos:position pos:line="41" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">plugin_register_read<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><literal type="string" pos:line="43" pos:column="26">"barometer"<pos:position pos:line="43" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">MPL3115_collectd_barometer_read<pos:position pos:line="43" pos:column="70"/></name></expr></argument>)<pos:position pos:line="43" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block> <break pos:line="44" pos:column="5">break;<pos:position pos:line="44" pos:column="11"/></break>

  <comment type="block" pos:line="46" pos:column="3">/* MPL115 */</comment>
  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">Sensor_MPL115<pos:position pos:line="47" pos:column="21"/></name></expr>:<pos:position pos:line="47" pos:column="22"/></case> <block pos:line="47" pos:column="23">{
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><call><name pos:line="48" pos:column="9">averaging_create<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><operator pos:line="48" pos:column="26">&amp;<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="27">pressure_averaging<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">config_oversample<pos:position pos:line="48" pos:column="64"/></name></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="66"/></condition><then pos:line="48" pos:column="66"> <block pos:line="48" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">ERROR<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(
          <argument><expr><literal type="string" pos:line="50" pos:column="11">"barometer: collectd_barometer_init pressure averaging init failed"<pos:position pos:line="50" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="80"/></expr_stmt>
      <return pos:line="51" pos:column="7">return <expr><operator pos:line="51" pos:column="14">-<pos:position pos:line="51" pos:column="15"/></operator><literal type="number" pos:line="51" pos:column="15">1<pos:position pos:line="51" pos:column="16"/></literal></expr>;<pos:position pos:line="51" pos:column="17"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><call><name pos:line="54" pos:column="9">averaging_create<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><operator pos:line="54" pos:column="26">&amp;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="27">temperature_averaging<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">config_oversample<pos:position pos:line="54" pos:column="67"/></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="69"/></condition><then pos:line="54" pos:column="69"> <block pos:line="54" pos:column="70">{
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">ERROR<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><literal type="string" pos:line="55" pos:column="13">"barometer: collectd_barometer_init temperature averaging init "<pos:position pos:line="55" pos:column="77"/></literal>
            <literal type="string" pos:line="56" pos:column="13">"failed"<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><operator pos:line="57" pos:column="14">-<pos:position pos:line="57" pos:column="15"/></operator><literal type="number" pos:line="57" pos:column="15">1<pos:position pos:line="57" pos:column="16"/></literal></expr>;<pos:position pos:line="57" pos:column="17"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">MPL115_read_coeffs<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">()<pos:position pos:line="60" pos:column="29"/></argument_list></call> <operator pos:line="60" pos:column="30">&lt;<pos:position pos:line="60" pos:column="34"/></operator> <literal type="number" pos:line="60" pos:column="32">0<pos:position pos:line="60" pos:column="33"/></literal></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34">
      <block type="pseudo"><return pos:line="61" pos:column="7">return <expr><operator pos:line="61" pos:column="14">-<pos:position pos:line="61" pos:column="15"/></operator><literal type="number" pos:line="61" pos:column="15">1<pos:position pos:line="61" pos:column="16"/></literal></expr>;<pos:position pos:line="61" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">plugin_register_read<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><literal type="string" pos:line="63" pos:column="26">"barometer"<pos:position pos:line="63" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="39">MPL115_collectd_barometer_read<pos:position pos:line="63" pos:column="69"/></name></expr></argument>)<pos:position pos:line="63" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block> <break pos:line="64" pos:column="5">break;<pos:position pos:line="64" pos:column="11"/></break>

  <comment type="block" pos:line="66" pos:column="3">/* BMP085 */</comment>
  <case pos:line="67" pos:column="3">case <expr><name pos:line="67" pos:column="8">Sensor_BMP085<pos:position pos:line="67" pos:column="21"/></name></expr>:<pos:position pos:line="67" pos:column="22"/></case> <block pos:line="67" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">BMP085_adjust_oversampling<pos:position pos:line="68" pos:column="31"/></name><argument_list pos:line="68" pos:column="31">()<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name pos:line="70" pos:column="9">BMP085_read_coeffs<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">()<pos:position pos:line="70" pos:column="29"/></argument_list></call> <operator pos:line="70" pos:column="30">&lt;<pos:position pos:line="70" pos:column="34"/></operator> <literal type="number" pos:line="70" pos:column="32">0<pos:position pos:line="70" pos:column="33"/></literal></expr>)<pos:position pos:line="70" pos:column="34"/></condition><then pos:line="70" pos:column="34">
      <block type="pseudo"><return pos:line="71" pos:column="7">return <expr><operator pos:line="71" pos:column="14">-<pos:position pos:line="71" pos:column="15"/></operator><literal type="number" pos:line="71" pos:column="15">1<pos:position pos:line="71" pos:column="16"/></literal></expr>;<pos:position pos:line="71" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">plugin_register_read<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><literal type="string" pos:line="73" pos:column="26">"barometer"<pos:position pos:line="73" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="39">BMP085_collectd_barometer_read<pos:position pos:line="73" pos:column="69"/></name></expr></argument>)<pos:position pos:line="73" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="74" pos:column="4"/></block> <break pos:line="74" pos:column="5">break;<pos:position pos:line="74" pos:column="11"/></break>

  <comment type="block" pos:line="76" pos:column="3">/* anything else -&gt; error */</comment>
  <default pos:line="77" pos:column="3">default:<pos:position pos:line="77" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">ERROR<pos:position pos:line="78" pos:column="10"/></name><argument_list pos:line="78" pos:column="10">(<argument><expr><literal type="string" pos:line="78" pos:column="11">"barometer: collectd_barometer_init - no supported sensor found"<pos:position pos:line="78" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="77"/></expr_stmt>
    <return pos:line="79" pos:column="5">return <expr><operator pos:line="79" pos:column="12">-<pos:position pos:line="79" pos:column="13"/></operator><literal type="number" pos:line="79" pos:column="13">1<pos:position pos:line="79" pos:column="14"/></literal></expr>;<pos:position pos:line="79" pos:column="15"/></return>
  }<pos:position pos:line="80" pos:column="4"/></block></switch>

  <expr_stmt><expr><name pos:line="82" pos:column="3">configured<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <literal type="number" pos:line="82" pos:column="16">1<pos:position pos:line="82" pos:column="17"/></literal></expr>;<pos:position pos:line="82" pos:column="18"/></expr_stmt>
  <return pos:line="83" pos:column="3">return <expr><literal type="number" pos:line="83" pos:column="10">0<pos:position pos:line="83" pos:column="11"/></literal></expr>;<pos:position pos:line="83" pos:column="12"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
