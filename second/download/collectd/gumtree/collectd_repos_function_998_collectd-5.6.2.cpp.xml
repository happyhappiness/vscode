<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_998_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">init_pi<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">argc<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">argv<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">dTHXa<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><name pos:line="2" pos:column="9">NULL<pos:position pos:line="2" pos:column="13"/></name></expr></argument>)<pos:position pos:line="2" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="15"/></expr_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">NULL<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">!=<pos:position pos:line="4" pos:column="14"/></operator> <name pos:line="4" pos:column="15">perl_threads<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><literal type="number" pos:line="5" pos:column="12">0<pos:position pos:line="5" pos:column="13"/></literal></expr>;<pos:position pos:line="5" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">log_info<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="string" pos:line="7" pos:column="12">"Initializing Perl interpreter..."<pos:position pos:line="7" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">COLLECT_DEBUG<pos:position pos:line="8" pos:column="18"/></name></expr></cpp:if>
  <block pos:line="9" pos:column="3">{
    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><decl><type><name pos:line="10" pos:column="10">int<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="25">argc<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></condition> <incr><expr><operator pos:line="10" pos:column="31">++<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">i<pos:position pos:line="10" pos:column="34"/></name></expr></incr>)<pos:position pos:line="10" pos:column="35"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="7">log_debug<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><literal type="string" pos:line="11" pos:column="17">"argv[%i] = \"%s\""<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">i<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="41">argv<pos:position pos:line="11" pos:column="45"/></name><index pos:line="11" pos:column="45">[<expr><name pos:line="11" pos:column="46">i<pos:position pos:line="11" pos:column="47"/></name></expr>]<pos:position pos:line="11" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt></block></for>
  }<pos:position pos:line="12" pos:column="4"/></block>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="13" pos:column="8">/* COLLECT_DEBUG */</comment>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><literal type="number" pos:line="15" pos:column="7">0<pos:position pos:line="15" pos:column="8"/></literal> <operator pos:line="15" pos:column="9">!=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">pthread_key_create<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">perl_thr_key<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">c_ithread_destructor<pos:position pos:line="15" pos:column="66"/></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="68"/></condition><then pos:line="15" pos:column="68"> <block pos:line="15" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">log_err<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><literal type="string" pos:line="16" pos:column="13">"init_pi: pthread_key_create failed"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* this must not happen - cowardly giving up if it does */</comment>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">__FreeBSD__<pos:position pos:line="22" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="23" pos:column="3">/* On FreeBSD, PERL_SYS_INIT3 expands to some expression which
   * triggers a "value computed is not used" warning by gcc. */</comment>
  <expr_stmt><expr><operator pos:line="25" pos:column="3">(<pos:position pos:line="25" pos:column="4"/></operator><name pos:line="25" pos:column="4">void<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">)<pos:position pos:line="25" pos:column="9"/></operator>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
      <call><name pos:line="27" pos:column="7">PERL_SYS_INIT3<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="23">argc<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">argv<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="36">&amp;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="37">environ<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><name pos:line="29" pos:column="3">perl_threads<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">smalloc<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><sizeof pos:line="29" pos:column="26">sizeof<argument_list pos:line="29" pos:column="32">(<argument><expr><operator pos:line="29" pos:column="33">*<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="34">perl_threads<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">memset<pos:position pos:line="30" pos:column="9"/></name><argument_list pos:line="30" pos:column="9">(<argument><expr><name pos:line="30" pos:column="10">perl_threads<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="27">sizeof<argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">c_ithread_list_t<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">pthread_mutexattr_init<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><operator pos:line="32" pos:column="26">&amp;<pos:position pos:line="32" pos:column="31"/></operator><name><name pos:line="32" pos:column="27">perl_threads<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">mutexattr<pos:position pos:line="32" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">pthread_mutexattr_settype<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><operator pos:line="33" pos:column="29">&amp;<pos:position pos:line="33" pos:column="34"/></operator><name><name pos:line="33" pos:column="30">perl_threads<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">mutexattr<pos:position pos:line="33" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">PTHREAD_MUTEX_RECURSIVE<pos:position pos:line="33" pos:column="78"/></name></expr></argument>)<pos:position pos:line="33" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">pthread_mutex_init<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><operator pos:line="34" pos:column="22">&amp;<pos:position pos:line="34" pos:column="27"/></operator><name><name pos:line="34" pos:column="23">perl_threads<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">-&gt;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="37">mutex<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="44">&amp;<pos:position pos:line="34" pos:column="49"/></operator><name><name pos:line="34" pos:column="45">perl_threads<pos:position pos:line="34" pos:column="57"/></name><operator pos:line="34" pos:column="57">-&gt;<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="59">mutexattr<pos:position pos:line="34" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="70"/></expr_stmt>
  <comment type="block" pos:line="35" pos:column="3">/* locking the mutex should not be necessary at this point
   * but let's just do it for the sake of completeness */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">pthread_mutex_lock<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><operator pos:line="37" pos:column="22">&amp;<pos:position pos:line="37" pos:column="27"/></operator><name><name pos:line="37" pos:column="23">perl_threads<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">mutex<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="39" pos:column="3">perl_threads<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">head<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <call><name pos:line="39" pos:column="24">c_ithread_create<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">NULL<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">perl_threads<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">tail<pos:position pos:line="40" pos:column="21"/></name></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <name><name pos:line="40" pos:column="24">perl_threads<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">head<pos:position pos:line="40" pos:column="42"/></name></name></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">NULL<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">==<pos:position pos:line="42" pos:column="14"/></operator> <operator pos:line="42" pos:column="15">(<pos:position pos:line="42" pos:column="16"/></operator><name><name pos:line="42" pos:column="16">perl_threads<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">head<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">interp<pos:position pos:line="42" pos:column="42"/></name></name> <operator pos:line="42" pos:column="43">=<pos:position pos:line="42" pos:column="44"/></operator> <call><name pos:line="42" pos:column="45">perl_alloc<pos:position pos:line="42" pos:column="55"/></name><argument_list pos:line="42" pos:column="55">()<pos:position pos:line="42" pos:column="57"/></argument_list></call><operator pos:line="42" pos:column="57">)<pos:position pos:line="42" pos:column="58"/></operator></expr>)<pos:position pos:line="42" pos:column="59"/></condition><then pos:line="42" pos:column="59"> <block pos:line="42" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">log_err<pos:position pos:line="43" pos:column="12"/></name><argument_list pos:line="43" pos:column="12">(<argument><expr><literal type="string" pos:line="43" pos:column="13">"init_pi: Not enough memory."<pos:position pos:line="43" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">exit<pos:position pos:line="44" pos:column="9"/></name><argument_list pos:line="44" pos:column="9">(<argument><expr><literal type="number" pos:line="44" pos:column="10">3<pos:position pos:line="44" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="47" pos:column="3">aTHX<pos:position pos:line="47" pos:column="7"/></name> <operator pos:line="47" pos:column="8">=<pos:position pos:line="47" pos:column="9"/></operator> <name><name pos:line="47" pos:column="10">perl_threads<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">-&gt;<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="24">head<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">interp<pos:position pos:line="47" pos:column="36"/></name></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">pthread_mutex_unlock<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><operator pos:line="48" pos:column="24">&amp;<pos:position pos:line="48" pos:column="29"/></operator><name><name pos:line="48" pos:column="25">perl_threads<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">-&gt;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="39">mutex<pos:position pos:line="48" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">perl_construct<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">aTHX<pos:position pos:line="50" pos:column="22"/></name></expr></argument>)<pos:position pos:line="50" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="52" pos:column="3">PL_exit_flags<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">|=<pos:position pos:line="52" pos:column="19"/></operator> <name pos:line="52" pos:column="20">PERL_EXIT_DESTRUCT_END<pos:position pos:line="52" pos:column="42"/></name></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>

  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><literal type="number" pos:line="54" pos:column="7">0<pos:position pos:line="54" pos:column="8"/></literal> <operator pos:line="54" pos:column="9">!=<pos:position pos:line="54" pos:column="11"/></operator> <macro><name pos:line="54" pos:column="12">perl_parse<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument pos:line="54" pos:column="23">aTHX_ xs_init<pos:position pos:line="54" pos:column="36"/></argument>, <argument pos:line="54" pos:column="38">argc<pos:position pos:line="54" pos:column="42"/></argument>, <argument pos:line="54" pos:column="44">argv<pos:position pos:line="54" pos:column="48"/></argument>, <argument pos:line="54" pos:column="50">NULL<pos:position pos:line="54" pos:column="54"/></argument>)<pos:position pos:line="54" pos:column="55"/></argument_list></macro></expr>)<pos:position pos:line="54" pos:column="56"/></condition><then pos:line="54" pos:column="56"> <block pos:line="54" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">SV<pos:position pos:line="55" pos:column="7"/></name> <modifier pos:line="55" pos:column="8">*<pos:position pos:line="55" pos:column="9"/></modifier></type><name pos:line="55" pos:column="9">err<pos:position pos:line="55" pos:column="12"/></name> <init pos:line="55" pos:column="13">= <expr><call><name pos:line="55" pos:column="15">get_sv<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><literal type="string" pos:line="55" pos:column="22">"@"<pos:position pos:line="55" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="27">1<pos:position pos:line="55" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">log_err<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><literal type="string" pos:line="56" pos:column="13">"init_pi: Unable to bootstrap Collectd: %s"<pos:position pos:line="56" pos:column="56"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="58">SvPV_nolen<pos:position pos:line="56" pos:column="68"/></name><argument_list pos:line="56" pos:column="68">(<argument><expr><name pos:line="56" pos:column="69">err<pos:position pos:line="56" pos:column="72"/></name></expr></argument>)<pos:position pos:line="56" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">perl_destruct<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><name><name pos:line="58" pos:column="19">perl_threads<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">head<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">-&gt;<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="39">interp<pos:position pos:line="58" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">perl_free<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><name><name pos:line="59" pos:column="15">perl_threads<pos:position pos:line="59" pos:column="27"/></name><operator pos:line="59" pos:column="27">-&gt;<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="29">head<pos:position pos:line="59" pos:column="33"/></name><operator pos:line="59" pos:column="33">-&gt;<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="35">interp<pos:position pos:line="59" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">sfree<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">perl_threads<pos:position pos:line="60" pos:column="23"/></name></expr></argument>)<pos:position pos:line="60" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">pthread_key_delete<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">perl_thr_key<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><operator pos:line="63" pos:column="12">-<pos:position pos:line="63" pos:column="13"/></operator><literal type="number" pos:line="63" pos:column="13">1<pos:position pos:line="63" pos:column="14"/></literal></expr>;<pos:position pos:line="63" pos:column="15"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="66" pos:column="3">/* Set $0 to "collectd" because perl_parse() has to set it to "-e". */</comment>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">sv_setpv<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><call><name pos:line="67" pos:column="12">get_sv<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">(<argument><expr><literal type="string" pos:line="67" pos:column="19">"0"<pos:position pos:line="67" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="24">0<pos:position pos:line="67" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="28">"collectd"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="69" pos:column="3">perl_run<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><name pos:line="69" pos:column="12">aTHX<pos:position pos:line="69" pos:column="16"/></name></expr></argument>)<pos:position pos:line="69" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="71" pos:column="3">plugin_register_log<pos:position pos:line="71" pos:column="22"/></name><argument_list pos:line="71" pos:column="22">(<argument><expr><literal type="string" pos:line="71" pos:column="23">"perl"<pos:position pos:line="71" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">perl_log<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <comment type="block" pos:line="71" pos:column="41">/* user_data = */</comment> <argument><expr><name pos:line="71" pos:column="59">NULL<pos:position pos:line="71" pos:column="63"/></name></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">plugin_register_notification<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><literal type="string" pos:line="72" pos:column="32">"perl"<pos:position pos:line="72" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="40">perl_notify<pos:position pos:line="72" pos:column="51"/></name></expr></argument>,
                               <comment type="block" pos:line="73" pos:column="32">/* user_data = */</comment> <argument><expr><name pos:line="73" pos:column="50">NULL<pos:position pos:line="73" pos:column="54"/></name></expr></argument>)<pos:position pos:line="73" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="74" pos:column="3">plugin_register_init<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><literal type="string" pos:line="74" pos:column="24">"perl"<pos:position pos:line="74" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="32">perl_init<pos:position pos:line="74" pos:column="41"/></name></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="76" pos:column="3">plugin_register_read<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><literal type="string" pos:line="76" pos:column="24">"perl"<pos:position pos:line="76" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="32">perl_read<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="78" pos:column="3">plugin_register_write<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><literal type="string" pos:line="78" pos:column="25">"perl"<pos:position pos:line="78" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="33">perl_write<pos:position pos:line="78" pos:column="43"/></name></expr></argument>, <comment type="block" pos:line="78" pos:column="45">/* user_data = */</comment> <argument><expr><name pos:line="78" pos:column="63">NULL<pos:position pos:line="78" pos:column="67"/></name></expr></argument>)<pos:position pos:line="78" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="79" pos:column="3">plugin_register_flush<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><literal type="string" pos:line="79" pos:column="25">"perl"<pos:position pos:line="79" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="33">perl_flush<pos:position pos:line="79" pos:column="43"/></name></expr></argument>, <comment type="block" pos:line="79" pos:column="45">/* user_data = */</comment> <argument><expr><name pos:line="79" pos:column="63">NULL<pos:position pos:line="79" pos:column="67"/></name></expr></argument>)<pos:position pos:line="79" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">plugin_register_shutdown<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><literal type="string" pos:line="80" pos:column="28">"perl"<pos:position pos:line="80" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="36">perl_shutdown<pos:position pos:line="80" pos:column="49"/></name></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="51"/></expr_stmt>
  <return pos:line="81" pos:column="3">return <expr><literal type="number" pos:line="81" pos:column="10">0<pos:position pos:line="81" pos:column="11"/></literal></expr>;<pos:position pos:line="81" pos:column="12"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
