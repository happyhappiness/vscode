<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_804_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">email_config<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">key<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list> <block pos:line="1" pos:column="61">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><literal type="number" pos:line="2" pos:column="7">0<pos:position pos:line="2" pos:column="8"/></literal> <operator pos:line="2" pos:column="9">==<pos:position pos:line="2" pos:column="11"/></operator> <call><name pos:line="2" pos:column="12">strcasecmp<pos:position pos:line="2" pos:column="22"/></name><argument_list pos:line="2" pos:column="22">(<argument><expr><name pos:line="2" pos:column="23">key<pos:position pos:line="2" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2" pos:column="28">"SocketFile"<pos:position pos:line="2" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="2" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="2" pos:column="42"/></condition><then pos:line="2" pos:column="42"> <block pos:line="2" pos:column="43">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">NULL<pos:position pos:line="3" pos:column="13"/></name> <operator pos:line="3" pos:column="14">!=<pos:position pos:line="3" pos:column="16"/></operator> <name pos:line="3" pos:column="17">sock_file<pos:position pos:line="3" pos:column="26"/></name></expr>)<pos:position pos:line="3" pos:column="27"/></condition><then pos:line="3" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="7">free<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">sock_file<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="5" pos:column="5">sock_file<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <call><name pos:line="5" pos:column="17">sstrdup<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">value<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="6" pos:column="4"/></block></then> <elseif pos:line="6" pos:column="5">else <if pos:line="6" pos:column="10">if <condition pos:line="6" pos:column="13">(<expr><literal type="number" pos:line="6" pos:column="14">0<pos:position pos:line="6" pos:column="15"/></literal> <operator pos:line="6" pos:column="16">==<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">strcasecmp<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">key<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="35">"SocketGroup"<pos:position pos:line="6" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50"> <block pos:line="6" pos:column="51">{
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">NULL<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">!=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">sock_group<pos:position pos:line="7" pos:column="27"/></name></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="7">free<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">sock_group<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="9" pos:column="5">sock_group<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">sstrdup<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">value<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if></elseif> <elseif pos:line="10" pos:column="5">else <if pos:line="10" pos:column="10">if <condition pos:line="10" pos:column="13">(<expr><literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">strcasecmp<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">key<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="35">"SocketPerms"<pos:position pos:line="10" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50"> <block pos:line="10" pos:column="51">{
    <comment type="block" pos:line="11" pos:column="5">/* the user is responsible for providing reasonable values */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">sock_perms<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <operator pos:line="12" pos:column="18">(<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">int<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator><call><name pos:line="12" pos:column="23">strtol<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">value<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">NULL<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="43">8<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if></elseif> <elseif pos:line="13" pos:column="5">else <if pos:line="13" pos:column="10">if <condition pos:line="13" pos:column="13">(<expr><literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <call><name pos:line="13" pos:column="19">strcasecmp<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">key<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="35">"MaxConns"<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <block pos:line="13" pos:column="48">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">long<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">int<pos:position pos:line="14" pos:column="13"/></name></type> <name pos:line="14" pos:column="14">tmp<pos:position pos:line="14" pos:column="17"/></name> <init pos:line="14" pos:column="18">= <expr><call><name pos:line="14" pos:column="20">strtol<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">value<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">NULL<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="40">0<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="43"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">tmp<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&lt;<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="15">1<pos:position pos:line="16" pos:column="16"/></literal></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17"> <block pos:line="16" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">fprintf<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">stderr<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"email plugin: `MaxConns' was set to invalid "<pos:position pos:line="17" pos:column="69"/></literal>
                      <literal type="string" pos:line="18" pos:column="23">"value %li, will use default %i.\n"<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>,
              <argument><expr><name pos:line="19" pos:column="15">tmp<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">MAX_CONNS<pos:position pos:line="19" pos:column="29"/></name></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">ERROR<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="string" pos:line="20" pos:column="13">"email plugin: `MaxConns' was set to invalid "<pos:position pos:line="20" pos:column="59"/></literal>
            <literal type="string" pos:line="21" pos:column="13">"value %li, will use default %i.\n"<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>,
            <argument><expr><name pos:line="22" pos:column="13">tmp<pos:position pos:line="22" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="18">MAX_CONNS<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="23" pos:column="7">max_conns<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">MAX_CONNS<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then> <elseif pos:line="24" pos:column="7">else <if pos:line="24" pos:column="12">if <condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">tmp<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&gt;<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="22">MAX_CONNS_LIMIT<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">fprintf<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">stderr<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="23">"email plugin: `MaxConns' was set to invalid "<pos:position pos:line="25" pos:column="69"/></literal>
                      <literal type="string" pos:line="26" pos:column="23">"value %li, will use hardcoded limit %i.\n"<pos:position pos:line="26" pos:column="66"/></literal></expr></argument>,
              <argument><expr><name pos:line="27" pos:column="15">tmp<pos:position pos:line="27" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="20">MAX_CONNS_LIMIT<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">ERROR<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><literal type="string" pos:line="28" pos:column="13">"email plugin: `MaxConns' was set to invalid "<pos:position pos:line="28" pos:column="59"/></literal>
            <literal type="string" pos:line="29" pos:column="13">"value %li, will use hardcoded limit %i.\n"<pos:position pos:line="29" pos:column="56"/></literal></expr></argument>,
            <argument><expr><name pos:line="30" pos:column="13">tmp<pos:position pos:line="30" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="18">MAX_CONNS_LIMIT<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">max_conns<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">MAX_CONNS_LIMIT<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif> <else pos:line="32" pos:column="7">else <block pos:line="32" pos:column="12">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">max_conns<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <operator pos:line="33" pos:column="19">(<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">int<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">)<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">tmp<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if></elseif> <else pos:line="35" pos:column="5">else <block pos:line="35" pos:column="10">{
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">-<pos:position pos:line="36" pos:column="13"/></operator><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr>;<pos:position pos:line="36" pos:column="15"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>
  <return pos:line="38" pos:column="3">return <expr><literal type="number" pos:line="38" pos:column="10">0<pos:position pos:line="38" pos:column="11"/></literal></expr>;<pos:position pos:line="38" pos:column="12"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
