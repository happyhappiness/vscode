<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2412_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">check_capability<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">capability<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <comment type="block" pos:line="1" pos:column="39">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">_LINUX_CAPABILITY_VERSION_3<pos:position pos:line="3" pos:column="35"/></name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">cap_user_header_t<pos:position pos:line="4" pos:column="26"/></name></type> <name pos:line="4" pos:column="27">cap_header<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><call><name pos:line="4" pos:column="40">calloc<pos:position pos:line="4" pos:column="46"/></name><argument_list pos:line="4" pos:column="46">(<argument><expr><literal type="number" pos:line="4" pos:column="47">1<pos:position pos:line="4" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="50">sizeof <argument_list pos:line="4" pos:column="57">(<argument><expr><operator pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">cap_header<pos:position pos:line="4" pos:column="69"/></name></expr></argument>)<pos:position pos:line="4" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="72"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">cap_header<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">==<pos:position pos:line="5" pos:column="26"/></operator> <name pos:line="5" pos:column="27">NULL<pos:position pos:line="5" pos:column="31"/></name></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
	<block pos:line="6" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">ERROR<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="string" pos:line="7" pos:column="23">"check_capability: calloc failed"<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt>
		<return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><operator pos:line="8" pos:column="25">-<pos:position pos:line="8" pos:column="26"/></operator><literal type="number" pos:line="8" pos:column="26">1<pos:position pos:line="8" pos:column="27"/></literal><operator pos:line="8" pos:column="27">)<pos:position pos:line="8" pos:column="28"/></operator></expr>;<pos:position pos:line="8" pos:column="29"/></return>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<decl_stmt><decl><type><name pos:line="11" pos:column="9">cap_user_data_t<pos:position pos:line="11" pos:column="24"/></name></type> <name pos:line="11" pos:column="25">cap_data<pos:position pos:line="11" pos:column="33"/></name> <init pos:line="11" pos:column="34">= <expr><call><name pos:line="11" pos:column="36">calloc<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(<argument><expr><literal type="number" pos:line="11" pos:column="43">1<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="46">sizeof <argument_list pos:line="11" pos:column="53">(<argument><expr><operator pos:line="11" pos:column="54">*<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="55">cap_data<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="66"/></decl_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">cap_data<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><literal type="string" pos:line="14" pos:column="23">"check_capability: calloc failed"<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">sfree<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">cap_header<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal><operator pos:line="16" pos:column="27">)<pos:position pos:line="16" pos:column="28"/></operator></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="19" pos:column="9">cap_header<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">pid<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <call><name pos:line="19" pos:column="27">getpid<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">()<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">cap_header<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">version<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">_LINUX_CAPABILITY_VERSION<pos:position pos:line="20" pos:column="56"/></name></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">capget<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">cap_header<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="32">cap_data<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call> <operator pos:line="21" pos:column="42">&lt;<pos:position pos:line="21" pos:column="46"/></operator> <literal type="number" pos:line="21" pos:column="44">0<pos:position pos:line="21" pos:column="45"/></literal></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
	<block pos:line="22" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">ERROR<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><literal type="string" pos:line="23" pos:column="23">"check_capability: capget failed"<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">sfree<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">cap_header<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">sfree<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">cap_data<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">(<pos:position pos:line="26" pos:column="25"/></operator><operator pos:line="26" pos:column="25">-<pos:position pos:line="26" pos:column="26"/></operator><literal type="number" pos:line="26" pos:column="26">1<pos:position pos:line="26" pos:column="27"/></literal><operator pos:line="26" pos:column="27">)<pos:position pos:line="26" pos:column="28"/></operator></expr>;<pos:position pos:line="26" pos:column="29"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name><name pos:line="29" pos:column="14">cap_data<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">-&gt;<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="24">effective<pos:position pos:line="29" pos:column="33"/></name></name> <operator pos:line="29" pos:column="34">&amp;<pos:position pos:line="29" pos:column="39"/></operator> <operator pos:line="29" pos:column="36">(<pos:position pos:line="29" pos:column="37"/></operator><literal type="number" pos:line="29" pos:column="37">1<pos:position pos:line="29" pos:column="38"/></literal> <operator pos:line="29" pos:column="39">&lt;&lt;<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="42">capability<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator><operator pos:line="29" pos:column="53">)<pos:position pos:line="29" pos:column="54"/></operator> <operator pos:line="29" pos:column="55">==<pos:position pos:line="29" pos:column="57"/></operator> <literal type="number" pos:line="29" pos:column="58">0<pos:position pos:line="29" pos:column="59"/></literal></expr>)<pos:position pos:line="29" pos:column="60"/></condition><then pos:line="29" pos:column="60">
	<block pos:line="30" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">sfree<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">cap_header<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">sfree<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">cap_data<pos:position pos:line="32" pos:column="31"/></name></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><operator pos:line="33" pos:column="24">(<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">-<pos:position pos:line="33" pos:column="26"/></operator><literal type="number" pos:line="33" pos:column="26">1<pos:position pos:line="33" pos:column="27"/></literal><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator></expr>;<pos:position pos:line="33" pos:column="29"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then>
	<else pos:line="35" pos:column="9">else
	<block pos:line="36" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">sfree<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">cap_header<pos:position pos:line="37" pos:column="33"/></name></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">sfree<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">cap_data<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><literal type="number" pos:line="39" pos:column="25">0<pos:position pos:line="39" pos:column="26"/></literal><operator pos:line="39" pos:column="26">)<pos:position pos:line="39" pos:column="27"/></operator></expr>;<pos:position pos:line="39" pos:column="28"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></else></if>
<cpp:else pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">else<pos:position pos:line="41" pos:column="6"/></cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">WARNING<pos:position pos:line="42" pos:column="16"/></name> <argument_list pos:line="42" pos:column="17">(<argument><expr><literal type="string" pos:line="42" pos:column="18">"check_capability: unsupported capability implementation. "<pos:position pos:line="42" pos:column="77"/></literal>
	    <literal type="string" pos:line="43" pos:column="13">"Some plugin(s) may require elevated privileges to work properly."<pos:position pos:line="43" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="81"/></expr_stmt>
	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">0<pos:position pos:line="44" pos:column="18"/></literal><operator pos:line="44" pos:column="18">)<pos:position pos:line="44" pos:column="19"/></operator></expr>;<pos:position pos:line="44" pos:column="20"/></return>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="45" pos:column="8">/* _LINUX_CAPABILITY_VERSION_3 */</comment>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
