<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1160_collectd-4.8.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ted_read_value<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">double<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">ret_power<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">double<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ret_voltage<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">char<pos:position pos:line="3" pos:column="18"/></name></type> <name><name pos:line="3" pos:column="19">receive_buffer<pos:position pos:line="3" pos:column="33"/></name><index pos:line="3" pos:column="33">[<expr><literal type="number" pos:line="3" pos:column="34">300<pos:position pos:line="3" pos:column="37"/></literal></expr>]<pos:position pos:line="3" pos:column="38"/></index></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">char<pos:position pos:line="4" pos:column="18"/></name></type> <name><name pos:line="4" pos:column="19">package_buffer<pos:position pos:line="4" pos:column="33"/></name><index pos:line="4" pos:column="33">[<expr><literal type="number" pos:line="4" pos:column="34">300<pos:position pos:line="4" pos:column="37"/></literal></expr>]<pos:position pos:line="4" pos:column="38"/></index></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">pkt_request<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">1<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name> <init pos:line="5" pos:column="25">= <expr><block pos:line="5" pos:column="27">{<expr><literal type="number" pos:line="5" pos:column="28">0xAA<pos:position pos:line="5" pos:column="32"/></literal></expr>}<pos:position pos:line="5" pos:column="33"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">package_buffer_pos<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">fd_set<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">input<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">timeval<pos:position pos:line="9" pos:column="19"/></name></name></type> <name pos:line="9" pos:column="20">timeout<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">end_flag<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">escape_flag<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">fd<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">&gt;=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Initialize the input set*/</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">FD_ZERO<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><operator pos:line="19" pos:column="14">&amp;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="15">input<pos:position pos:line="19" pos:column="20"/></name></expr></argument>)<pos:position pos:line="19" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">FD_SET<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">fd<pos:position pos:line="20" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="17">&amp;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="18">input<pos:position pos:line="20" pos:column="23"/></name></expr></argument>)<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* Initialize timeout structure, set to 2 seconds */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memset<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><operator pos:line="23" pos:column="13">&amp;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="14">timeout<pos:position pos:line="23" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="26">sizeof <argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">timeout<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">timeout<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">.<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">tv_sec<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">2<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">timeout<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">.<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">tv_usec<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* clear out anything in the buffer */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">tcflush<pos:position pos:line="28" pos:column="12"/></name> <argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">fd<pos:position pos:line="28" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="18">TCIFLUSH<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">status<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">write<pos:position pos:line="30" pos:column="19"/></name> <argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">fd<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="25">pkt_request<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="38">sizeof<argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">pkt_request<pos:position pos:line="30" pos:column="56"/></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">status<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">&lt;=<pos:position pos:line="31" pos:column="21"/></operator> <literal type="number" pos:line="31" pos:column="19">0<pos:position pos:line="31" pos:column="20"/></literal></expr>)<pos:position pos:line="31" pos:column="21"/></condition><then pos:line="31" pos:column="21">
    <block pos:line="32" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">ERROR<pos:position pos:line="33" pos:column="14"/></name> <argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="string" pos:line="33" pos:column="16">"ted plugin: swrite failed."<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><operator pos:line="34" pos:column="17">-<pos:position pos:line="34" pos:column="18"/></operator><literal type="number" pos:line="34" pos:column="18">1<pos:position pos:line="34" pos:column="19"/></literal><operator pos:line="34" pos:column="19">)<pos:position pos:line="34" pos:column="20"/></operator></expr>;<pos:position pos:line="34" pos:column="21"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* Loop until we find the end of the package */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">end_flag<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">escape_flag<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">package_buffer_pos<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <literal type="number" pos:line="40" pos:column="26">0<pos:position pos:line="40" pos:column="27"/></literal></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
    <while pos:line="41" pos:column="5">while <condition pos:line="41" pos:column="11">(<expr><name pos:line="41" pos:column="12">end_flag<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">==<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal></expr>)<pos:position pos:line="41" pos:column="26"/></condition>
    <block pos:line="42" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">ssize_t<pos:position pos:line="43" pos:column="16"/></name></type> <name pos:line="43" pos:column="17">receive_buffer_length<pos:position pos:line="43" pos:column="38"/></name></decl>;<pos:position pos:line="43" pos:column="39"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="44" pos:column="9">ssize_t<pos:position pos:line="44" pos:column="16"/></name></type> <name pos:line="44" pos:column="17">i<pos:position pos:line="44" pos:column="18"/></name></decl>;<pos:position pos:line="44" pos:column="19"/></decl_stmt>

        <comment type="block" pos:line="46" pos:column="9">/* check for timeout or input error*/</comment>
        <expr_stmt><expr><name pos:line="47" pos:column="9">status<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <call><name pos:line="47" pos:column="18">select<pos:position pos:line="47" pos:column="24"/></name> <argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">fd<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">+<pos:position pos:line="47" pos:column="30"/></operator> <literal type="number" pos:line="47" pos:column="31">1<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="34">&amp;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="35">input<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">NULL<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">NULL<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="54">&amp;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="55">timeout<pos:position pos:line="47" pos:column="62"/></name></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">status<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <comment type="block" pos:line="48" pos:column="26">/* Timeout */</comment>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">WARNING<pos:position pos:line="50" pos:column="20"/></name> <argument_list pos:line="50" pos:column="21">(<argument><expr><literal type="string" pos:line="50" pos:column="22">"ted plugin: Timeout while waiting for file descriptor "<pos:position pos:line="50" pos:column="78"/></literal>
                    <literal type="string" pos:line="51" pos:column="21">"to become ready."<pos:position pos:line="51" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
            <return pos:line="52" pos:column="13">return <expr><operator pos:line="52" pos:column="20">(<pos:position pos:line="52" pos:column="21"/></operator><operator pos:line="52" pos:column="21">-<pos:position pos:line="52" pos:column="22"/></operator><literal type="number" pos:line="52" pos:column="22">1<pos:position pos:line="52" pos:column="23"/></literal><operator pos:line="52" pos:column="23">)<pos:position pos:line="52" pos:column="24"/></operator></expr>;<pos:position pos:line="52" pos:column="25"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then>
        <elseif pos:line="54" pos:column="9">else <if pos:line="54" pos:column="14">if <condition pos:line="54" pos:column="17">(<expr><operator pos:line="54" pos:column="18">(<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="19">status<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">&lt;<pos:position pos:line="54" pos:column="30"/></operator> <literal type="number" pos:line="54" pos:column="28">0<pos:position pos:line="54" pos:column="29"/></literal><operator pos:line="54" pos:column="29">)<pos:position pos:line="54" pos:column="30"/></operator> <operator pos:line="54" pos:column="31">&amp;&amp;<pos:position pos:line="54" pos:column="41"/></operator> <operator pos:line="54" pos:column="34">(<pos:position pos:line="54" pos:column="35"/></operator><operator pos:line="54" pos:column="35">(<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="36">errno<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">==<pos:position pos:line="54" pos:column="44"/></operator> <name pos:line="54" pos:column="45">EAGAIN<pos:position pos:line="54" pos:column="51"/></name><operator pos:line="54" pos:column="51">)<pos:position pos:line="54" pos:column="52"/></operator> <operator pos:line="54" pos:column="53">||<pos:position pos:line="54" pos:column="55"/></operator> <operator pos:line="54" pos:column="56">(<pos:position pos:line="54" pos:column="57"/></operator><name pos:line="54" pos:column="57">errno<pos:position pos:line="54" pos:column="62"/></name> <operator pos:line="54" pos:column="63">==<pos:position pos:line="54" pos:column="65"/></operator> <name pos:line="54" pos:column="66">EINTR<pos:position pos:line="54" pos:column="71"/></name><operator pos:line="54" pos:column="71">)<pos:position pos:line="54" pos:column="72"/></operator><operator pos:line="54" pos:column="72">)<pos:position pos:line="54" pos:column="73"/></operator></expr>)<pos:position pos:line="54" pos:column="74"/></condition><then pos:line="54" pos:column="74">
        <block pos:line="55" pos:column="9">{
            <comment type="block" pos:line="56" pos:column="13">/* Some signal or something. Start over.. */</comment>
            <continue pos:line="57" pos:column="13">continue;<pos:position pos:line="57" pos:column="22"/></continue>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="59" pos:column="9">else <if pos:line="59" pos:column="14">if <condition pos:line="59" pos:column="17">(<expr><name pos:line="59" pos:column="18">status<pos:position pos:line="59" pos:column="24"/></name> <operator pos:line="59" pos:column="25">&lt;<pos:position pos:line="59" pos:column="29"/></operator> <literal type="number" pos:line="59" pos:column="27">0<pos:position pos:line="59" pos:column="28"/></literal></expr>)<pos:position pos:line="59" pos:column="29"/></condition><then pos:line="59" pos:column="29">
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">char<pos:position pos:line="61" pos:column="17"/></name></type> <name><name pos:line="61" pos:column="18">errbuf<pos:position pos:line="61" pos:column="24"/></name><index pos:line="61" pos:column="24">[<expr><literal type="number" pos:line="61" pos:column="25">1024<pos:position pos:line="61" pos:column="29"/></literal></expr>]<pos:position pos:line="61" pos:column="30"/></index></name></decl>;<pos:position pos:line="61" pos:column="31"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">ERROR<pos:position pos:line="62" pos:column="18"/></name> <argument_list pos:line="62" pos:column="19">(<argument><expr><literal type="string" pos:line="62" pos:column="20">"ted plugin: select failed: %s"<pos:position pos:line="62" pos:column="51"/></literal></expr></argument>,
                    <argument><expr><call><name pos:line="63" pos:column="21">sstrerror<pos:position pos:line="63" pos:column="30"/></name> <argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">errno<pos:position pos:line="63" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="39">errbuf<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="47">sizeof <argument_list pos:line="63" pos:column="54">(<argument><expr><name pos:line="63" pos:column="55">errbuf<pos:position pos:line="63" pos:column="61"/></name></expr></argument>)<pos:position pos:line="63" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt>
            <return pos:line="64" pos:column="13">return <expr><operator pos:line="64" pos:column="20">(<pos:position pos:line="64" pos:column="21"/></operator><operator pos:line="64" pos:column="21">-<pos:position pos:line="64" pos:column="22"/></operator><literal type="number" pos:line="64" pos:column="22">1<pos:position pos:line="64" pos:column="23"/></literal><operator pos:line="64" pos:column="23">)<pos:position pos:line="64" pos:column="24"/></operator></expr>;<pos:position pos:line="64" pos:column="25"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="67" pos:column="9">receive_buffer_length<pos:position pos:line="67" pos:column="30"/></name> <operator pos:line="67" pos:column="31">=<pos:position pos:line="67" pos:column="32"/></operator> <call><name pos:line="67" pos:column="33">read<pos:position pos:line="67" pos:column="37"/></name> <argument_list pos:line="67" pos:column="38">(<argument><expr><name pos:line="67" pos:column="39">fd<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">receive_buffer<pos:position pos:line="67" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="59">sizeof <argument_list pos:line="67" pos:column="66">(<argument><expr><name pos:line="67" pos:column="67">receive_buffer<pos:position pos:line="67" pos:column="81"/></name></expr></argument>)<pos:position pos:line="67" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="84"/></expr_stmt>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">receive_buffer_length<pos:position pos:line="68" pos:column="34"/></name> <operator pos:line="68" pos:column="35">&lt;<pos:position pos:line="68" pos:column="39"/></operator> <literal type="number" pos:line="68" pos:column="37">0<pos:position pos:line="68" pos:column="38"/></literal></expr>)<pos:position pos:line="68" pos:column="39"/></condition><then pos:line="68" pos:column="39">
        <block pos:line="69" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">char<pos:position pos:line="70" pos:column="17"/></name></type> <name><name pos:line="70" pos:column="18">errbuf<pos:position pos:line="70" pos:column="24"/></name><index pos:line="70" pos:column="24">[<expr><literal type="number" pos:line="70" pos:column="25">1024<pos:position pos:line="70" pos:column="29"/></literal></expr>]<pos:position pos:line="70" pos:column="30"/></index></name></decl>;<pos:position pos:line="70" pos:column="31"/></decl_stmt>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><operator pos:line="71" pos:column="17">(<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">errno<pos:position pos:line="71" pos:column="23"/></name> <operator pos:line="71" pos:column="24">==<pos:position pos:line="71" pos:column="26"/></operator> <name pos:line="71" pos:column="27">EAGAIN<pos:position pos:line="71" pos:column="33"/></name><operator pos:line="71" pos:column="33">)<pos:position pos:line="71" pos:column="34"/></operator> <operator pos:line="71" pos:column="35">||<pos:position pos:line="71" pos:column="37"/></operator> <operator pos:line="71" pos:column="38">(<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="39">errno<pos:position pos:line="71" pos:column="44"/></name> <operator pos:line="71" pos:column="45">==<pos:position pos:line="71" pos:column="47"/></operator> <name pos:line="71" pos:column="48">EINTR<pos:position pos:line="71" pos:column="53"/></name><operator pos:line="71" pos:column="53">)<pos:position pos:line="71" pos:column="54"/></operator></expr>)<pos:position pos:line="71" pos:column="55"/></condition><then pos:line="71" pos:column="55">
                <block type="pseudo"><continue pos:line="72" pos:column="17">continue;<pos:position pos:line="72" pos:column="26"/></continue></block></then></if>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">ERROR<pos:position pos:line="73" pos:column="18"/></name> <argument_list pos:line="73" pos:column="19">(<argument><expr><literal type="string" pos:line="73" pos:column="20">"ted plugin: read(2) failed: %s"<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>,
                    <argument><expr><call><name pos:line="74" pos:column="21">sstrerror<pos:position pos:line="74" pos:column="30"/></name> <argument_list pos:line="74" pos:column="31">(<argument><expr><name pos:line="74" pos:column="32">errno<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="39">errbuf<pos:position pos:line="74" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="47">sizeof <argument_list pos:line="74" pos:column="54">(<argument><expr><name pos:line="74" pos:column="55">errbuf<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="65"/></expr_stmt>
            <return pos:line="75" pos:column="13">return <expr><operator pos:line="75" pos:column="20">(<pos:position pos:line="75" pos:column="21"/></operator><operator pos:line="75" pos:column="21">-<pos:position pos:line="75" pos:column="22"/></operator><literal type="number" pos:line="75" pos:column="22">1<pos:position pos:line="75" pos:column="23"/></literal><operator pos:line="75" pos:column="23">)<pos:position pos:line="75" pos:column="24"/></operator></expr>;<pos:position pos:line="75" pos:column="25"/></return>
        }<pos:position pos:line="76" pos:column="10"/></block></then>
        <elseif pos:line="77" pos:column="9">else <if pos:line="77" pos:column="14">if <condition pos:line="77" pos:column="17">(<expr><name pos:line="77" pos:column="18">receive_buffer_length<pos:position pos:line="77" pos:column="39"/></name> <operator pos:line="77" pos:column="40">==<pos:position pos:line="77" pos:column="42"/></operator> <literal type="number" pos:line="77" pos:column="43">0<pos:position pos:line="77" pos:column="44"/></literal></expr>)<pos:position pos:line="77" pos:column="45"/></condition><then pos:line="77" pos:column="45">
        <block pos:line="78" pos:column="9">{
            <comment type="block" pos:line="79" pos:column="13">/* Should we close the FD in this case? */</comment>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">WARNING<pos:position pos:line="80" pos:column="20"/></name> <argument_list pos:line="80" pos:column="21">(<argument><expr><literal type="string" pos:line="80" pos:column="22">"ted plugin: Received EOF from file descriptor."<pos:position pos:line="80" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="72"/></expr_stmt>
            <return pos:line="81" pos:column="13">return <expr><operator pos:line="81" pos:column="20">(<pos:position pos:line="81" pos:column="21"/></operator><operator pos:line="81" pos:column="21">-<pos:position pos:line="81" pos:column="22"/></operator><literal type="number" pos:line="81" pos:column="22">1<pos:position pos:line="81" pos:column="23"/></literal><operator pos:line="81" pos:column="23">)<pos:position pos:line="81" pos:column="24"/></operator></expr>;<pos:position pos:line="81" pos:column="25"/></return>
        }<pos:position pos:line="82" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="83" pos:column="9">else <if pos:line="83" pos:column="14">if <condition pos:line="83" pos:column="17">(<expr><name pos:line="83" pos:column="18">receive_buffer_length<pos:position pos:line="83" pos:column="39"/></name> <operator pos:line="83" pos:column="40">&gt;<pos:position pos:line="83" pos:column="44"/></operator> <sizeof pos:line="83" pos:column="42">sizeof <argument_list pos:line="83" pos:column="49">(<argument><expr><name pos:line="83" pos:column="50">receive_buffer<pos:position pos:line="83" pos:column="64"/></name></expr></argument>)<pos:position pos:line="83" pos:column="65"/></argument_list></sizeof></expr>)<pos:position pos:line="83" pos:column="66"/></condition><then pos:line="83" pos:column="66">
        <block pos:line="84" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">ERROR<pos:position pos:line="85" pos:column="18"/></name> <argument_list pos:line="85" pos:column="19">(<argument><expr><literal type="string" pos:line="85" pos:column="20">"ted plugin: read(2) returned invalid value %zi."<pos:position pos:line="85" pos:column="69"/></literal></expr></argument>,
                    <argument><expr><name pos:line="86" pos:column="21">receive_buffer_length<pos:position pos:line="86" pos:column="42"/></name></expr></argument>)<pos:position pos:line="86" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="44"/></expr_stmt>
            <return pos:line="87" pos:column="13">return <expr><operator pos:line="87" pos:column="20">(<pos:position pos:line="87" pos:column="21"/></operator><operator pos:line="87" pos:column="21">-<pos:position pos:line="87" pos:column="22"/></operator><literal type="number" pos:line="87" pos:column="22">1<pos:position pos:line="87" pos:column="23"/></literal><operator pos:line="87" pos:column="23">)<pos:position pos:line="87" pos:column="24"/></operator></expr>;<pos:position pos:line="87" pos:column="25"/></return>
        }<pos:position pos:line="88" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="90" pos:column="9">/*
         * packet filter loop
         *
         * Handle escape sequences in `receive_buffer' and put the
         * result in `package_buffer'.
         */</comment>
        <comment type="block" pos:line="96" pos:column="9">/* We need to see the begin sequence first. When we receive `ESCAPE
         * PKT_BEGIN', we set `package_buffer_pos' to zero to signal that
         * the beginning of the package has been found. */</comment>

        <expr_stmt><expr><name pos:line="100" pos:column="9">escape_flag<pos:position pos:line="100" pos:column="20"/></name> <operator pos:line="100" pos:column="21">=<pos:position pos:line="100" pos:column="22"/></operator> <literal type="number" pos:line="100" pos:column="23">0<pos:position pos:line="100" pos:column="24"/></literal></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt>
        <for pos:line="101" pos:column="9">for <control pos:line="101" pos:column="13">(<init><expr><name pos:line="101" pos:column="14">i<pos:position pos:line="101" pos:column="15"/></name> <operator pos:line="101" pos:column="16">=<pos:position pos:line="101" pos:column="17"/></operator> <literal type="number" pos:line="101" pos:column="18">0<pos:position pos:line="101" pos:column="19"/></literal></expr>;<pos:position pos:line="101" pos:column="20"/></init> <condition><expr><name pos:line="101" pos:column="21">i<pos:position pos:line="101" pos:column="22"/></name> <operator pos:line="101" pos:column="23">&lt;<pos:position pos:line="101" pos:column="27"/></operator> <name pos:line="101" pos:column="25">receive_buffer_length<pos:position pos:line="101" pos:column="46"/></name></expr>;<pos:position pos:line="101" pos:column="47"/></condition> <incr><expr><name pos:line="101" pos:column="48">i<pos:position pos:line="101" pos:column="49"/></name><operator pos:line="101" pos:column="49">++<pos:position pos:line="101" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="101" pos:column="52"/></control>
        <block pos:line="102" pos:column="9">{
            <comment type="block" pos:line="103" pos:column="13">/* Check if previous byte was the escape byte. */</comment>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">escape_flag<pos:position pos:line="104" pos:column="28"/></name> <operator pos:line="104" pos:column="29">==<pos:position pos:line="104" pos:column="31"/></operator> <literal type="number" pos:line="104" pos:column="32">1<pos:position pos:line="104" pos:column="33"/></literal></expr>)<pos:position pos:line="104" pos:column="34"/></condition><then pos:line="104" pos:column="34">
            <block pos:line="105" pos:column="13">{
                <expr_stmt><expr><name pos:line="106" pos:column="17">escape_flag<pos:position pos:line="106" pos:column="28"/></name> <operator pos:line="106" pos:column="29">=<pos:position pos:line="106" pos:column="30"/></operator> <literal type="number" pos:line="106" pos:column="31">0<pos:position pos:line="106" pos:column="32"/></literal></expr>;<pos:position pos:line="106" pos:column="33"/></expr_stmt>
                <comment type="block" pos:line="107" pos:column="17">/* escape escape = single escape */</comment>
                <if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><operator pos:line="108" pos:column="21">(<pos:position pos:line="108" pos:column="22"/></operator><name><name pos:line="108" pos:column="22">receive_buffer<pos:position pos:line="108" pos:column="36"/></name><index pos:line="108" pos:column="36">[<expr><name pos:line="108" pos:column="37">i<pos:position pos:line="108" pos:column="38"/></name></expr>]<pos:position pos:line="108" pos:column="39"/></index></name> <operator pos:line="108" pos:column="40">==<pos:position pos:line="108" pos:column="42"/></operator> <name pos:line="108" pos:column="43">ESCAPE<pos:position pos:line="108" pos:column="49"/></name><operator pos:line="108" pos:column="49">)<pos:position pos:line="108" pos:column="50"/></operator>
                        <operator pos:line="109" pos:column="25">&amp;&amp;<pos:position pos:line="109" pos:column="35"/></operator> <operator pos:line="109" pos:column="28">(<pos:position pos:line="109" pos:column="29"/></operator><name pos:line="109" pos:column="29">package_buffer_pos<pos:position pos:line="109" pos:column="47"/></name> <operator pos:line="109" pos:column="48">&gt;=<pos:position pos:line="109" pos:column="53"/></operator> <literal type="number" pos:line="109" pos:column="51">0<pos:position pos:line="109" pos:column="52"/></literal><operator pos:line="109" pos:column="52">)<pos:position pos:line="109" pos:column="53"/></operator></expr>)<pos:position pos:line="109" pos:column="54"/></condition><then pos:line="109" pos:column="54">
                <block pos:line="110" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="111" pos:column="21">package_buffer<pos:position pos:line="111" pos:column="35"/></name><index pos:line="111" pos:column="35">[<expr><name pos:line="111" pos:column="36">package_buffer_pos<pos:position pos:line="111" pos:column="54"/></name></expr>]<pos:position pos:line="111" pos:column="55"/></index></name> <operator pos:line="111" pos:column="56">=<pos:position pos:line="111" pos:column="57"/></operator> <name pos:line="111" pos:column="58">ESCAPE<pos:position pos:line="111" pos:column="64"/></name></expr>;<pos:position pos:line="111" pos:column="65"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="112" pos:column="21">package_buffer_pos<pos:position pos:line="112" pos:column="39"/></name><operator pos:line="112" pos:column="39">++<pos:position pos:line="112" pos:column="41"/></operator></expr>;<pos:position pos:line="112" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="113" pos:column="18"/></block></then>
                <elseif pos:line="114" pos:column="17">else <if pos:line="114" pos:column="22">if <condition pos:line="114" pos:column="25">(<expr><name><name pos:line="114" pos:column="26">receive_buffer<pos:position pos:line="114" pos:column="40"/></name><index pos:line="114" pos:column="40">[<expr><name pos:line="114" pos:column="41">i<pos:position pos:line="114" pos:column="42"/></name></expr>]<pos:position pos:line="114" pos:column="43"/></index></name> <operator pos:line="114" pos:column="44">==<pos:position pos:line="114" pos:column="46"/></operator> <name pos:line="114" pos:column="47">PKT_BEGIN<pos:position pos:line="114" pos:column="56"/></name></expr>)<pos:position pos:line="114" pos:column="57"/></condition><then pos:line="114" pos:column="57">
                <block pos:line="115" pos:column="17">{
                    <expr_stmt><expr><name pos:line="116" pos:column="21">package_buffer_pos<pos:position pos:line="116" pos:column="39"/></name> <operator pos:line="116" pos:column="40">=<pos:position pos:line="116" pos:column="41"/></operator> <literal type="number" pos:line="116" pos:column="42">0<pos:position pos:line="116" pos:column="43"/></literal></expr>;<pos:position pos:line="116" pos:column="44"/></expr_stmt>
                }<pos:position pos:line="117" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="118" pos:column="17">else <if pos:line="118" pos:column="22">if  <condition pos:line="118" pos:column="26">(<expr><name><name pos:line="118" pos:column="27">receive_buffer<pos:position pos:line="118" pos:column="41"/></name><index pos:line="118" pos:column="41">[<expr><name pos:line="118" pos:column="42">i<pos:position pos:line="118" pos:column="43"/></name></expr>]<pos:position pos:line="118" pos:column="44"/></index></name> <operator pos:line="118" pos:column="45">==<pos:position pos:line="118" pos:column="47"/></operator> <name pos:line="118" pos:column="48">PKT_END<pos:position pos:line="118" pos:column="55"/></name></expr>)<pos:position pos:line="118" pos:column="56"/></condition><then pos:line="118" pos:column="56">
                <block pos:line="119" pos:column="17">{
                    <expr_stmt><expr><name pos:line="120" pos:column="21">end_flag<pos:position pos:line="120" pos:column="29"/></name> <operator pos:line="120" pos:column="30">=<pos:position pos:line="120" pos:column="31"/></operator> <literal type="number" pos:line="120" pos:column="32">1<pos:position pos:line="120" pos:column="33"/></literal></expr>;<pos:position pos:line="120" pos:column="34"/></expr_stmt>
                    <break pos:line="121" pos:column="21">break;<pos:position pos:line="121" pos:column="27"/></break>
                }<pos:position pos:line="122" pos:column="18"/></block></then></if></elseif>
                <else pos:line="123" pos:column="17">else
                <block pos:line="124" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="125" pos:column="21">DEBUG<pos:position pos:line="125" pos:column="26"/></name> <argument_list pos:line="125" pos:column="27">(<argument><expr><literal type="string" pos:line="125" pos:column="28">"ted plugin: Unknown escaped byte: %#x"<pos:position pos:line="125" pos:column="67"/></literal></expr></argument>,
                            <argument><expr><operator pos:line="126" pos:column="29">(<pos:position pos:line="126" pos:column="30"/></operator><name pos:line="126" pos:column="30">unsigned<pos:position pos:line="126" pos:column="38"/></name> <name pos:line="126" pos:column="39">int<pos:position pos:line="126" pos:column="42"/></name><operator pos:line="126" pos:column="42">)<pos:position pos:line="126" pos:column="43"/></operator> <name><name pos:line="126" pos:column="44">receive_buffer<pos:position pos:line="126" pos:column="58"/></name><index pos:line="126" pos:column="58">[<expr><name pos:line="126" pos:column="59">i<pos:position pos:line="126" pos:column="60"/></name></expr>]<pos:position pos:line="126" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="126" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="63"/></expr_stmt>
                }<pos:position pos:line="127" pos:column="18"/></block></else></if>
            }<pos:position pos:line="128" pos:column="14"/></block></then>
            <elseif pos:line="129" pos:column="13">else <if pos:line="129" pos:column="18">if <condition pos:line="129" pos:column="21">(<expr><name><name pos:line="129" pos:column="22">receive_buffer<pos:position pos:line="129" pos:column="36"/></name><index pos:line="129" pos:column="36">[<expr><name pos:line="129" pos:column="37">i<pos:position pos:line="129" pos:column="38"/></name></expr>]<pos:position pos:line="129" pos:column="39"/></index></name> <operator pos:line="129" pos:column="40">==<pos:position pos:line="129" pos:column="42"/></operator> <name pos:line="129" pos:column="43">ESCAPE<pos:position pos:line="129" pos:column="49"/></name></expr>)<pos:position pos:line="129" pos:column="50"/></condition><then pos:line="129" pos:column="50">
            <block pos:line="130" pos:column="13">{
                <expr_stmt><expr><name pos:line="131" pos:column="17">escape_flag<pos:position pos:line="131" pos:column="28"/></name> <operator pos:line="131" pos:column="29">=<pos:position pos:line="131" pos:column="30"/></operator> <literal type="number" pos:line="131" pos:column="31">1<pos:position pos:line="131" pos:column="32"/></literal></expr>;<pos:position pos:line="131" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="132" pos:column="14"/></block></then></if></elseif>
            <comment type="block" pos:line="133" pos:column="13">/* if we are in a package add byte to buffer
             * otherwise throw away */</comment>
            <elseif pos:line="135" pos:column="13">else <if pos:line="135" pos:column="18">if <condition pos:line="135" pos:column="21">(<expr><name pos:line="135" pos:column="22">package_buffer_pos<pos:position pos:line="135" pos:column="40"/></name> <operator pos:line="135" pos:column="41">&gt;=<pos:position pos:line="135" pos:column="46"/></operator> <literal type="number" pos:line="135" pos:column="44">0<pos:position pos:line="135" pos:column="45"/></literal></expr>)<pos:position pos:line="135" pos:column="46"/></condition><then pos:line="135" pos:column="46">
            <block pos:line="136" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="137" pos:column="17">package_buffer<pos:position pos:line="137" pos:column="31"/></name><index pos:line="137" pos:column="31">[<expr><name pos:line="137" pos:column="32">package_buffer_pos<pos:position pos:line="137" pos:column="50"/></name></expr>]<pos:position pos:line="137" pos:column="51"/></index></name> <operator pos:line="137" pos:column="52">=<pos:position pos:line="137" pos:column="53"/></operator> <name><name pos:line="137" pos:column="54">receive_buffer<pos:position pos:line="137" pos:column="68"/></name><index pos:line="137" pos:column="68">[<expr><name pos:line="137" pos:column="69">i<pos:position pos:line="137" pos:column="70"/></name></expr>]<pos:position pos:line="137" pos:column="71"/></index></name></expr>;<pos:position pos:line="137" pos:column="72"/></expr_stmt>
                <expr_stmt><expr><name pos:line="138" pos:column="17">package_buffer_pos<pos:position pos:line="138" pos:column="35"/></name><operator pos:line="138" pos:column="35">++<pos:position pos:line="138" pos:column="37"/></operator></expr>;<pos:position pos:line="138" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="139" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="140" pos:column="10"/></block></for> <comment type="block" pos:line="140" pos:column="11">/* for (i = 0; i &lt; receive_buffer_length; i++) */</comment>
    }<pos:position pos:line="141" pos:column="6"/></block></while> <comment type="block" pos:line="141" pos:column="7">/* while (end_flag == 0) */</comment>

    <comment type="block" pos:line="143" pos:column="5">/* Check for errors inside the loop. */</comment>
    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><operator pos:line="144" pos:column="9">(<pos:position pos:line="144" pos:column="10"/></operator><name pos:line="144" pos:column="10">end_flag<pos:position pos:line="144" pos:column="18"/></name> <operator pos:line="144" pos:column="19">==<pos:position pos:line="144" pos:column="21"/></operator> <literal type="number" pos:line="144" pos:column="22">0<pos:position pos:line="144" pos:column="23"/></literal><operator pos:line="144" pos:column="23">)<pos:position pos:line="144" pos:column="24"/></operator> <operator pos:line="144" pos:column="25">||<pos:position pos:line="144" pos:column="27"/></operator> <operator pos:line="144" pos:column="28">(<pos:position pos:line="144" pos:column="29"/></operator><name pos:line="144" pos:column="29">package_buffer_pos<pos:position pos:line="144" pos:column="47"/></name> <operator pos:line="144" pos:column="48">!=<pos:position pos:line="144" pos:column="50"/></operator> <name pos:line="144" pos:column="51">EXPECTED_PACKAGE_LENGTH<pos:position pos:line="144" pos:column="74"/></name><operator pos:line="144" pos:column="74">)<pos:position pos:line="144" pos:column="75"/></operator></expr>)<pos:position pos:line="144" pos:column="76"/></condition><then pos:line="144" pos:column="76">
        <block type="pseudo"><return pos:line="145" pos:column="9">return <expr><operator pos:line="145" pos:column="16">(<pos:position pos:line="145" pos:column="17"/></operator><operator pos:line="145" pos:column="17">-<pos:position pos:line="145" pos:column="18"/></operator><literal type="number" pos:line="145" pos:column="18">1<pos:position pos:line="145" pos:column="19"/></literal><operator pos:line="145" pos:column="19">)<pos:position pos:line="145" pos:column="20"/></operator></expr>;<pos:position pos:line="145" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="147" pos:column="5">/*
     * Power is at positions 247 and 248 (LSB first) in [10kW].
     * Voltage is at positions 251 and 252 (LSB first) in [.1V].
     *
     * Power is in 10 Watt steps
     * Voltage is in volts
     */</comment>
    <expr_stmt><expr><operator pos:line="154" pos:column="5">*<pos:position pos:line="154" pos:column="6"/></operator><name pos:line="154" pos:column="6">ret_power<pos:position pos:line="154" pos:column="15"/></name> <operator pos:line="154" pos:column="16">=<pos:position pos:line="154" pos:column="17"/></operator> <literal type="number" pos:line="154" pos:column="18">10.0<pos:position pos:line="154" pos:column="22"/></literal> <operator pos:line="154" pos:column="23">*<pos:position pos:line="154" pos:column="24"/></operator> <call pos:line="154" pos:column="25">(<name pos:line="154" pos:column="26">double<pos:position pos:line="154" pos:column="32"/></name>) <argument_list pos:line="154" pos:column="34">(<argument><expr><operator pos:line="154" pos:column="35">(<pos:position pos:line="154" pos:column="36"/></operator><operator pos:line="154" pos:column="36">(<pos:position pos:line="154" pos:column="37"/></operator><operator pos:line="154" pos:column="37">(<pos:position pos:line="154" pos:column="38"/></operator><name pos:line="154" pos:column="38">int<pos:position pos:line="154" pos:column="41"/></name><operator pos:line="154" pos:column="41">)<pos:position pos:line="154" pos:column="42"/></operator> <name><name pos:line="154" pos:column="43">package_buffer<pos:position pos:line="154" pos:column="57"/></name><index pos:line="154" pos:column="57">[<expr><literal type="number" pos:line="154" pos:column="58">248<pos:position pos:line="154" pos:column="61"/></literal></expr>]<pos:position pos:line="154" pos:column="62"/></index></name><operator pos:line="154" pos:column="62">)<pos:position pos:line="154" pos:column="63"/></operator> <operator pos:line="154" pos:column="64">*<pos:position pos:line="154" pos:column="65"/></operator> <literal type="number" pos:line="154" pos:column="66">256<pos:position pos:line="154" pos:column="69"/></literal><operator pos:line="154" pos:column="69">)<pos:position pos:line="154" pos:column="70"/></operator>
            <operator pos:line="155" pos:column="13">+<pos:position pos:line="155" pos:column="14"/></operator> <operator pos:line="155" pos:column="15">(<pos:position pos:line="155" pos:column="16"/></operator><operator pos:line="155" pos:column="16">(<pos:position pos:line="155" pos:column="17"/></operator><name pos:line="155" pos:column="17">int<pos:position pos:line="155" pos:column="20"/></name><operator pos:line="155" pos:column="20">)<pos:position pos:line="155" pos:column="21"/></operator> <name><name pos:line="155" pos:column="22">package_buffer<pos:position pos:line="155" pos:column="36"/></name><index pos:line="155" pos:column="36">[<expr><literal type="number" pos:line="155" pos:column="37">247<pos:position pos:line="155" pos:column="40"/></literal></expr>]<pos:position pos:line="155" pos:column="41"/></index></name><operator pos:line="155" pos:column="41">)<pos:position pos:line="155" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="155" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="156" pos:column="5">*<pos:position pos:line="156" pos:column="6"/></operator><name pos:line="156" pos:column="6">ret_voltage<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <literal type="number" pos:line="156" pos:column="20">0.1<pos:position pos:line="156" pos:column="23"/></literal> <operator pos:line="156" pos:column="24">*<pos:position pos:line="156" pos:column="25"/></operator> <call pos:line="156" pos:column="26">(<name pos:line="156" pos:column="27">double<pos:position pos:line="156" pos:column="33"/></name>) <argument_list pos:line="156" pos:column="35">(<argument><expr><operator pos:line="156" pos:column="36">(<pos:position pos:line="156" pos:column="37"/></operator><operator pos:line="156" pos:column="37">(<pos:position pos:line="156" pos:column="38"/></operator><operator pos:line="156" pos:column="38">(<pos:position pos:line="156" pos:column="39"/></operator><name pos:line="156" pos:column="39">int<pos:position pos:line="156" pos:column="42"/></name><operator pos:line="156" pos:column="42">)<pos:position pos:line="156" pos:column="43"/></operator> <name><name pos:line="156" pos:column="44">package_buffer<pos:position pos:line="156" pos:column="58"/></name><index pos:line="156" pos:column="58">[<expr><literal type="number" pos:line="156" pos:column="59">252<pos:position pos:line="156" pos:column="62"/></literal></expr>]<pos:position pos:line="156" pos:column="63"/></index></name><operator pos:line="156" pos:column="63">)<pos:position pos:line="156" pos:column="64"/></operator> <operator pos:line="156" pos:column="65">*<pos:position pos:line="156" pos:column="66"/></operator> <literal type="number" pos:line="156" pos:column="67">256<pos:position pos:line="156" pos:column="70"/></literal><operator pos:line="156" pos:column="70">)<pos:position pos:line="156" pos:column="71"/></operator>
            <operator pos:line="157" pos:column="13">+<pos:position pos:line="157" pos:column="14"/></operator> <operator pos:line="157" pos:column="15">(<pos:position pos:line="157" pos:column="16"/></operator><operator pos:line="157" pos:column="16">(<pos:position pos:line="157" pos:column="17"/></operator><name pos:line="157" pos:column="17">int<pos:position pos:line="157" pos:column="20"/></name><operator pos:line="157" pos:column="20">)<pos:position pos:line="157" pos:column="21"/></operator> <name><name pos:line="157" pos:column="22">package_buffer<pos:position pos:line="157" pos:column="36"/></name><index pos:line="157" pos:column="36">[<expr><literal type="number" pos:line="157" pos:column="37">251<pos:position pos:line="157" pos:column="40"/></literal></expr>]<pos:position pos:line="157" pos:column="41"/></index></name><operator pos:line="157" pos:column="41">)<pos:position pos:line="157" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="157" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="159" pos:column="5">/* success */</comment>
    <return pos:line="160" pos:column="5">return <expr><operator pos:line="160" pos:column="12">(<pos:position pos:line="160" pos:column="13"/></operator><literal type="number" pos:line="160" pos:column="13">0<pos:position pos:line="160" pos:column="14"/></literal><operator pos:line="160" pos:column="14">)<pos:position pos:line="160" pos:column="15"/></operator></expr>;<pos:position pos:line="160" pos:column="16"/></return>
}<pos:position pos:line="161" pos:column="2"/></block></function></unit>
