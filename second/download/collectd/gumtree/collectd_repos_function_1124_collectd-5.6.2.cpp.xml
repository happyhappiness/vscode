<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1124_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cna_handle_system_data<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">hostname<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="57">/* {{{ */</comment>
                                  <parameter><decl><type><name pos:line="2" pos:column="35">cfg_system_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">cfg_system<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">na_elem_t<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">data<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">int<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">interval<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list> <block pos:line="3" pos:column="49">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">na_elem_t<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">instances<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">na_elem_iter_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">counter_iter<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">derive_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">disk_read<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="27">disk_written<pos:position pos:line="7" pos:column="39"/></name> <init pos:line="7" pos:column="40">= <expr><literal type="number" pos:line="7" pos:column="42">0<pos:position pos:line="7" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">derive_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">net_recv<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="26">net_sent<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><literal type="number" pos:line="8" pos:column="37">0<pos:position pos:line="8" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">derive_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">cpu_busy<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="26">cpu_total<pos:position pos:line="9" pos:column="35"/></name> <init pos:line="9" pos:column="36">= <expr><literal type="number" pos:line="9" pos:column="38">0<pos:position pos:line="9" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uint32_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">counter_flags<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">instance<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">cdtime_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">timestamp<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">timestamp<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">cna_child_get_cdtime<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">data<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="17" pos:column="3">instances<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">na_elem_child<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><call><name pos:line="17" pos:column="29">na_elem_child<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">data<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="49">"instances"<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="63">"instance-data"<pos:position pos:line="17" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">instances<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">NULL<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25"> <block pos:line="18" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ERROR<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><literal type="string" pos:line="19" pos:column="11">"netapp plugin: cna_handle_system_data: "<pos:position pos:line="19" pos:column="52"/></literal>
          <literal type="string" pos:line="20" pos:column="11">"na_elem_child (\"instances\") failed "<pos:position pos:line="20" pos:column="50"/></literal>
          <literal type="string" pos:line="21" pos:column="11">"for host %s."<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>,
          <argument><expr><name pos:line="22" pos:column="11">hostname<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><operator pos:line="23" pos:column="13">-<pos:position pos:line="23" pos:column="14"/></operator><literal type="number" pos:line="23" pos:column="14">1<pos:position pos:line="23" pos:column="15"/></literal><operator pos:line="23" pos:column="15">)<pos:position pos:line="23" pos:column="16"/></operator></expr>;<pos:position pos:line="23" pos:column="17"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">instance<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">na_child_get_string<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">instances<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="45">"name"<pos:position pos:line="26" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">instance<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">==<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">NULL<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24"> <block pos:line="27" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ERROR<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><literal type="string" pos:line="28" pos:column="11">"netapp plugin: cna_handle_system_data: "<pos:position pos:line="28" pos:column="52"/></literal>
          <literal type="string" pos:line="29" pos:column="11">"na_child_get_string (\"name\") failed "<pos:position pos:line="29" pos:column="51"/></literal>
          <literal type="string" pos:line="30" pos:column="11">"for host %s."<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>,
          <argument><expr><name pos:line="31" pos:column="11">hostname<pos:position pos:line="31" pos:column="19"/></name></expr></argument>)<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><operator pos:line="32" pos:column="13">-<pos:position pos:line="32" pos:column="14"/></operator><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal><operator pos:line="32" pos:column="15">)<pos:position pos:line="32" pos:column="16"/></operator></expr>;<pos:position pos:line="32" pos:column="17"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="35" pos:column="3">counter_iter<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">na_child_iterator<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><call><name pos:line="35" pos:column="36">na_elem_child<pos:position pos:line="35" pos:column="49"/></name><argument_list pos:line="35" pos:column="49">(<argument><expr><name pos:line="35" pos:column="50">instances<pos:position pos:line="35" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="61">"counters"<pos:position pos:line="35" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="74"/></expr_stmt>
  <for pos:line="36" pos:column="3">for <control pos:line="36" pos:column="7">(<init><decl><type><name pos:line="36" pos:column="8">na_elem_t<pos:position pos:line="36" pos:column="17"/></name> <modifier pos:line="36" pos:column="18">*<pos:position pos:line="36" pos:column="19"/></modifier></type><name pos:line="36" pos:column="19">counter<pos:position pos:line="36" pos:column="26"/></name> <init pos:line="36" pos:column="27">= <expr><call><name pos:line="36" pos:column="29">na_iterator_next<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><operator pos:line="36" pos:column="46">&amp;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="47">counter_iter<pos:position pos:line="36" pos:column="59"/></name></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="61"/></init> <condition><expr><name pos:line="36" pos:column="62">counter<pos:position pos:line="36" pos:column="69"/></name> <operator pos:line="36" pos:column="70">!=<pos:position pos:line="36" pos:column="72"/></operator> <name pos:line="36" pos:column="73">NULL<pos:position pos:line="36" pos:column="77"/></name></expr>;<pos:position pos:line="36" pos:column="78"/></condition>
       <incr><expr><name pos:line="37" pos:column="8">counter<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">na_iterator_next<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><operator pos:line="37" pos:column="35">&amp;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="36">counter_iter<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr></incr>)<pos:position pos:line="37" pos:column="50"/></control> <block pos:line="37" pos:column="51">{
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">const<pos:position pos:line="38" pos:column="10"/></specifier> <name pos:line="38" pos:column="11">char<pos:position pos:line="38" pos:column="15"/></name> <modifier pos:line="38" pos:column="16">*<pos:position pos:line="38" pos:column="17"/></modifier></type><name pos:line="38" pos:column="17">name<pos:position pos:line="38" pos:column="21"/></name></decl>;<pos:position pos:line="38" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">uint64_t<pos:position pos:line="39" pos:column="13"/></name></type> <name pos:line="39" pos:column="14">value<pos:position pos:line="39" pos:column="19"/></name></decl>;<pos:position pos:line="39" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="41" pos:column="5">name<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <call><name pos:line="41" pos:column="12">na_child_get_string<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">counter<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"name"<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">name<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">==<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">NULL<pos:position pos:line="42" pos:column="21"/></name></expr>)<pos:position pos:line="42" pos:column="22"/></condition><then pos:line="42" pos:column="22">
      <block type="pseudo"><continue pos:line="43" pos:column="7">continue;<pos:position pos:line="43" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="45" pos:column="5">value<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <call><name pos:line="45" pos:column="13">na_child_get_uint64<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">counter<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="42">"value"<pos:position pos:line="45" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="51">UINT64_MAX<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">value<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <name pos:line="46" pos:column="18">UINT64_MAX<pos:position pos:line="46" pos:column="28"/></name></expr>)<pos:position pos:line="46" pos:column="29"/></condition><then pos:line="46" pos:column="29">
      <block type="pseudo"><continue pos:line="47" pos:column="7">continue;<pos:position pos:line="47" pos:column="16"/></continue></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">!<pos:position pos:line="49" pos:column="10"/></operator><call><name pos:line="49" pos:column="10">strcmp<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><name pos:line="49" pos:column="17">name<pos:position pos:line="49" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="23">"disk_data_read"<pos:position pos:line="49" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41"> <block pos:line="49" pos:column="42">{
      <expr_stmt><expr><name pos:line="50" pos:column="7">disk_read<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <call pos:line="50" pos:column="19">(<name pos:line="50" pos:column="20">derive_t<pos:position pos:line="50" pos:column="28"/></name>)<argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">value<pos:position pos:line="50" pos:column="35"/></name> <operator pos:line="50" pos:column="36">*<pos:position pos:line="50" pos:column="37"/></operator> <literal type="number" pos:line="50" pos:column="38">1024<pos:position pos:line="50" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="51" pos:column="7">counter_flags<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">|=<pos:position pos:line="51" pos:column="23"/></operator> <literal type="number" pos:line="51" pos:column="24">0x01<pos:position pos:line="51" pos:column="28"/></literal></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then> <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if <condition pos:line="52" pos:column="15">(<expr><operator pos:line="52" pos:column="16">!<pos:position pos:line="52" pos:column="17"/></operator><call><name pos:line="52" pos:column="17">strcmp<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">name<pos:position pos:line="52" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="30">"disk_data_written"<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51"> <block pos:line="52" pos:column="52">{
      <expr_stmt><expr><name pos:line="53" pos:column="7">disk_written<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <call pos:line="53" pos:column="22">(<name pos:line="53" pos:column="23">derive_t<pos:position pos:line="53" pos:column="31"/></name>)<argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">value<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">*<pos:position pos:line="53" pos:column="40"/></operator> <literal type="number" pos:line="53" pos:column="41">1024<pos:position pos:line="53" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name pos:line="54" pos:column="7">counter_flags<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">|=<pos:position pos:line="54" pos:column="23"/></operator> <literal type="number" pos:line="54" pos:column="24">0x02<pos:position pos:line="54" pos:column="28"/></literal></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif> <elseif pos:line="55" pos:column="7">else <if pos:line="55" pos:column="12">if <condition pos:line="55" pos:column="15">(<expr><operator pos:line="55" pos:column="16">!<pos:position pos:line="55" pos:column="17"/></operator><call><name pos:line="55" pos:column="17">strcmp<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">name<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="30">"net_data_recv"<pos:position pos:line="55" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="47"/></condition><then pos:line="55" pos:column="47"> <block pos:line="55" pos:column="48">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">net_recv<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call pos:line="56" pos:column="18">(<name pos:line="56" pos:column="19">derive_t<pos:position pos:line="56" pos:column="27"/></name>)<argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">value<pos:position pos:line="56" pos:column="34"/></name> <operator pos:line="56" pos:column="35">*<pos:position pos:line="56" pos:column="36"/></operator> <literal type="number" pos:line="56" pos:column="37">1024<pos:position pos:line="56" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">counter_flags<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">|=<pos:position pos:line="57" pos:column="23"/></operator> <literal type="number" pos:line="57" pos:column="24">0x04<pos:position pos:line="57" pos:column="28"/></literal></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if></elseif> <elseif pos:line="58" pos:column="7">else <if pos:line="58" pos:column="12">if <condition pos:line="58" pos:column="15">(<expr><operator pos:line="58" pos:column="16">!<pos:position pos:line="58" pos:column="17"/></operator><call><name pos:line="58" pos:column="17">strcmp<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><name pos:line="58" pos:column="24">name<pos:position pos:line="58" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="30">"net_data_sent"<pos:position pos:line="58" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="47"/></condition><then pos:line="58" pos:column="47"> <block pos:line="58" pos:column="48">{
      <expr_stmt><expr><name pos:line="59" pos:column="7">net_sent<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <call pos:line="59" pos:column="18">(<name pos:line="59" pos:column="19">derive_t<pos:position pos:line="59" pos:column="27"/></name>)<argument_list pos:line="59" pos:column="28">(<argument><expr><name pos:line="59" pos:column="29">value<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">*<pos:position pos:line="59" pos:column="36"/></operator> <literal type="number" pos:line="59" pos:column="37">1024<pos:position pos:line="59" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">counter_flags<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">|=<pos:position pos:line="60" pos:column="23"/></operator> <literal type="number" pos:line="60" pos:column="24">0x08<pos:position pos:line="60" pos:column="28"/></literal></expr>;<pos:position pos:line="60" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if></elseif> <elseif pos:line="61" pos:column="7">else <if pos:line="61" pos:column="12">if <condition pos:line="61" pos:column="15">(<expr><operator pos:line="61" pos:column="16">!<pos:position pos:line="61" pos:column="17"/></operator><call><name pos:line="61" pos:column="17">strcmp<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">name<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="30">"cpu_busy"<pos:position pos:line="61" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="42"/></condition><then pos:line="61" pos:column="42"> <block pos:line="61" pos:column="43">{
      <expr_stmt><expr><name pos:line="62" pos:column="7">cpu_busy<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <operator pos:line="62" pos:column="18">(<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">derive_t<pos:position pos:line="62" pos:column="27"/></name><operator pos:line="62" pos:column="27">)<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="28">value<pos:position pos:line="62" pos:column="33"/></name></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">counter_flags<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">|=<pos:position pos:line="63" pos:column="23"/></operator> <literal type="number" pos:line="63" pos:column="24">0x10<pos:position pos:line="63" pos:column="28"/></literal></expr>;<pos:position pos:line="63" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if></elseif> <elseif pos:line="64" pos:column="7">else <if pos:line="64" pos:column="12">if <condition pos:line="64" pos:column="15">(<expr><operator pos:line="64" pos:column="16">!<pos:position pos:line="64" pos:column="17"/></operator><call><name pos:line="64" pos:column="17">strcmp<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">name<pos:position pos:line="64" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="30">"cpu_elapsed_time"<pos:position pos:line="64" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="50"/></condition><then pos:line="64" pos:column="50"> <block pos:line="64" pos:column="51">{
      <expr_stmt><expr><name pos:line="65" pos:column="7">cpu_total<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">=<pos:position pos:line="65" pos:column="18"/></operator> <operator pos:line="65" pos:column="19">(<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="20">derive_t<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">)<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">value<pos:position pos:line="65" pos:column="34"/></name></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">counter_flags<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">|=<pos:position pos:line="66" pos:column="23"/></operator> <literal type="number" pos:line="66" pos:column="24">0x20<pos:position pos:line="66" pos:column="28"/></literal></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if></elseif> <elseif pos:line="67" pos:column="7">else <if pos:line="67" pos:column="12">if <condition pos:line="67" pos:column="15">(<expr><operator pos:line="67" pos:column="16">(<pos:position pos:line="67" pos:column="17"/></operator><name><name pos:line="67" pos:column="17">cfg_system<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">flags<pos:position pos:line="67" pos:column="34"/></name></name> <operator pos:line="67" pos:column="35">&amp;<pos:position pos:line="67" pos:column="40"/></operator> <name pos:line="67" pos:column="37">CFG_SYSTEM_OPS<pos:position pos:line="67" pos:column="51"/></name><operator pos:line="67" pos:column="51">)<pos:position pos:line="67" pos:column="52"/></operator> <operator pos:line="67" pos:column="53">&amp;&amp;<pos:position pos:line="67" pos:column="63"/></operator> <operator pos:line="67" pos:column="56">(<pos:position pos:line="67" pos:column="57"/></operator><name pos:line="67" pos:column="57">value<pos:position pos:line="67" pos:column="62"/></name> <operator pos:line="67" pos:column="63">&gt;<pos:position pos:line="67" pos:column="67"/></operator> <literal type="number" pos:line="67" pos:column="65">0<pos:position pos:line="67" pos:column="66"/></literal><operator pos:line="67" pos:column="66">)<pos:position pos:line="67" pos:column="67"/></operator> <operator pos:line="67" pos:column="68">&amp;&amp;<pos:position pos:line="67" pos:column="78"/></operator>
               <operator pos:line="68" pos:column="16">(<pos:position pos:line="68" pos:column="17"/></operator><call><name pos:line="68" pos:column="17">strlen<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name pos:line="68" pos:column="24">name<pos:position pos:line="68" pos:column="28"/></name></expr></argument>)<pos:position pos:line="68" pos:column="29"/></argument_list></call> <operator pos:line="68" pos:column="30">&gt;<pos:position pos:line="68" pos:column="34"/></operator> <literal type="number" pos:line="68" pos:column="32">4<pos:position pos:line="68" pos:column="33"/></literal><operator pos:line="68" pos:column="33">)<pos:position pos:line="68" pos:column="34"/></operator> <operator pos:line="68" pos:column="35">&amp;&amp;<pos:position pos:line="68" pos:column="45"/></operator>
               <operator pos:line="69" pos:column="16">(<pos:position pos:line="69" pos:column="17"/></operator><operator pos:line="69" pos:column="17">!<pos:position pos:line="69" pos:column="18"/></operator><call><name pos:line="69" pos:column="18">strcmp<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">name<pos:position pos:line="69" pos:column="29"/></name> <operator pos:line="69" pos:column="30">+<pos:position pos:line="69" pos:column="31"/></operator> <call><name pos:line="69" pos:column="32">strlen<pos:position pos:line="69" pos:column="38"/></name><argument_list pos:line="69" pos:column="38">(<argument><expr><name pos:line="69" pos:column="39">name<pos:position pos:line="69" pos:column="43"/></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call> <operator pos:line="69" pos:column="45">-<pos:position pos:line="69" pos:column="46"/></operator> <literal type="number" pos:line="69" pos:column="47">4<pos:position pos:line="69" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="50">"_ops"<pos:position pos:line="69" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call><operator pos:line="69" pos:column="57">)<pos:position pos:line="69" pos:column="58"/></operator></expr>)<pos:position pos:line="69" pos:column="59"/></condition><then pos:line="69" pos:column="59"> <block pos:line="69" pos:column="60">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">submit_derive<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">hostname<pos:position pos:line="70" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="31">instance<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="41">"disk_ops_complex"<pos:position pos:line="70" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="61">name<pos:position pos:line="70" pos:column="65"/></name></expr></argument>,
                    <argument><expr><operator pos:line="71" pos:column="21">(<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">derive_t<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">)<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">value<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">timestamp<pos:position pos:line="71" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="49">interval<pos:position pos:line="71" pos:column="57"/></name></expr></argument>)<pos:position pos:line="71" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="73" pos:column="4"/></block></for> <comment type="block" pos:line="73" pos:column="5">/* for (counter) */</comment>

  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><operator pos:line="75" pos:column="7">(<pos:position pos:line="75" pos:column="8"/></operator><name><name pos:line="75" pos:column="8">cfg_system<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">flags<pos:position pos:line="75" pos:column="25"/></name></name> <operator pos:line="75" pos:column="26">&amp;<pos:position pos:line="75" pos:column="31"/></operator> <name pos:line="75" pos:column="28">CFG_SYSTEM_DISK<pos:position pos:line="75" pos:column="43"/></name><operator pos:line="75" pos:column="43">)<pos:position pos:line="75" pos:column="44"/></operator> <operator pos:line="75" pos:column="45">&amp;&amp;<pos:position pos:line="75" pos:column="55"/></operator>
      <operator pos:line="76" pos:column="7">(<pos:position pos:line="76" pos:column="8"/></operator><call><name pos:line="76" pos:column="8">HAS_ALL_FLAGS<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">counter_flags<pos:position pos:line="76" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="37">0x01<pos:position pos:line="76" pos:column="41"/></literal> <operator pos:line="76" pos:column="42">|<pos:position pos:line="76" pos:column="43"/></operator> <literal type="number" pos:line="76" pos:column="44">0x02<pos:position pos:line="76" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call><operator pos:line="76" pos:column="49">)<pos:position pos:line="76" pos:column="50"/></operator></expr>)<pos:position pos:line="76" pos:column="51"/></condition><then pos:line="76" pos:column="51">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="5">submit_two_derive<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><name pos:line="77" pos:column="23">hostname<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="33">instance<pos:position pos:line="77" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="43">"disk_octets"<pos:position pos:line="77" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="58">NULL<pos:position pos:line="77" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="64">disk_read<pos:position pos:line="77" pos:column="73"/></name></expr></argument>,
                      <argument><expr><name pos:line="78" pos:column="23">disk_written<pos:position pos:line="78" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="37">timestamp<pos:position pos:line="78" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="48">interval<pos:position pos:line="78" pos:column="56"/></name></expr></argument>)<pos:position pos:line="78" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="58"/></expr_stmt></block></then></if>

  <if pos:line="80" pos:column="3">if <condition pos:line="80" pos:column="6">(<expr><operator pos:line="80" pos:column="7">(<pos:position pos:line="80" pos:column="8"/></operator><name><name pos:line="80" pos:column="8">cfg_system<pos:position pos:line="80" pos:column="18"/></name><operator pos:line="80" pos:column="18">-&gt;<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="20">flags<pos:position pos:line="80" pos:column="25"/></name></name> <operator pos:line="80" pos:column="26">&amp;<pos:position pos:line="80" pos:column="31"/></operator> <name pos:line="80" pos:column="28">CFG_SYSTEM_NET<pos:position pos:line="80" pos:column="42"/></name><operator pos:line="80" pos:column="42">)<pos:position pos:line="80" pos:column="43"/></operator> <operator pos:line="80" pos:column="44">&amp;&amp;<pos:position pos:line="80" pos:column="54"/></operator>
      <operator pos:line="81" pos:column="7">(<pos:position pos:line="81" pos:column="8"/></operator><call><name pos:line="81" pos:column="8">HAS_ALL_FLAGS<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">counter_flags<pos:position pos:line="81" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="37">0x04<pos:position pos:line="81" pos:column="41"/></literal> <operator pos:line="81" pos:column="42">|<pos:position pos:line="81" pos:column="43"/></operator> <literal type="number" pos:line="81" pos:column="44">0x08<pos:position pos:line="81" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="49"/></argument_list></call><operator pos:line="81" pos:column="49">)<pos:position pos:line="81" pos:column="50"/></operator></expr>)<pos:position pos:line="81" pos:column="51"/></condition><then pos:line="81" pos:column="51">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="5">submit_two_derive<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><name pos:line="82" pos:column="23">hostname<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">instance<pos:position pos:line="82" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="43">"if_octets"<pos:position pos:line="82" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">NULL<pos:position pos:line="82" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="62">net_recv<pos:position pos:line="82" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="72">net_sent<pos:position pos:line="82" pos:column="80"/></name></expr></argument>,
                      <argument><expr><name pos:line="83" pos:column="23">timestamp<pos:position pos:line="83" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="34">interval<pos:position pos:line="83" pos:column="42"/></name></expr></argument>)<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="44"/></expr_stmt></block></then></if>

  <if pos:line="85" pos:column="3">if <condition pos:line="85" pos:column="6">(<expr><operator pos:line="85" pos:column="7">(<pos:position pos:line="85" pos:column="8"/></operator><name><name pos:line="85" pos:column="8">cfg_system<pos:position pos:line="85" pos:column="18"/></name><operator pos:line="85" pos:column="18">-&gt;<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="20">flags<pos:position pos:line="85" pos:column="25"/></name></name> <operator pos:line="85" pos:column="26">&amp;<pos:position pos:line="85" pos:column="31"/></operator> <name pos:line="85" pos:column="28">CFG_SYSTEM_CPU<pos:position pos:line="85" pos:column="42"/></name><operator pos:line="85" pos:column="42">)<pos:position pos:line="85" pos:column="43"/></operator> <operator pos:line="85" pos:column="44">&amp;&amp;<pos:position pos:line="85" pos:column="54"/></operator>
      <operator pos:line="86" pos:column="7">(<pos:position pos:line="86" pos:column="8"/></operator><call><name pos:line="86" pos:column="8">HAS_ALL_FLAGS<pos:position pos:line="86" pos:column="21"/></name><argument_list pos:line="86" pos:column="21">(<argument><expr><name pos:line="86" pos:column="22">counter_flags<pos:position pos:line="86" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="37">0x10<pos:position pos:line="86" pos:column="41"/></literal> <operator pos:line="86" pos:column="42">|<pos:position pos:line="86" pos:column="43"/></operator> <literal type="number" pos:line="86" pos:column="44">0x20<pos:position pos:line="86" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="49"/></argument_list></call><operator pos:line="86" pos:column="49">)<pos:position pos:line="86" pos:column="50"/></operator></expr>)<pos:position pos:line="86" pos:column="51"/></condition><then pos:line="86" pos:column="51"> <block pos:line="86" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">submit_derive<pos:position pos:line="87" pos:column="18"/></name><argument_list pos:line="87" pos:column="18">(<argument><expr><name pos:line="87" pos:column="19">hostname<pos:position pos:line="87" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="29">instance<pos:position pos:line="87" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="39">"cpu"<pos:position pos:line="87" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="46">"system"<pos:position pos:line="87" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="56">cpu_busy<pos:position pos:line="87" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="66">timestamp<pos:position pos:line="87" pos:column="75"/></name></expr></argument>,
                  <argument><expr><name pos:line="88" pos:column="19">interval<pos:position pos:line="88" pos:column="27"/></name></expr></argument>)<pos:position pos:line="88" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">submit_derive<pos:position pos:line="89" pos:column="18"/></name><argument_list pos:line="89" pos:column="18">(<argument><expr><name pos:line="89" pos:column="19">hostname<pos:position pos:line="89" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="29">instance<pos:position pos:line="89" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="39">"cpu"<pos:position pos:line="89" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="46">"idle"<pos:position pos:line="89" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="54">cpu_total<pos:position pos:line="89" pos:column="63"/></name> <operator pos:line="89" pos:column="64">-<pos:position pos:line="89" pos:column="65"/></operator> <name pos:line="89" pos:column="66">cpu_busy<pos:position pos:line="89" pos:column="74"/></name></expr></argument>,
                  <argument><expr><name pos:line="90" pos:column="19">timestamp<pos:position pos:line="90" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="30">interval<pos:position pos:line="90" pos:column="38"/></name></expr></argument>)<pos:position pos:line="90" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></then></if>

  <return pos:line="93" pos:column="3">return <expr><operator pos:line="93" pos:column="10">(<pos:position pos:line="93" pos:column="11"/></operator><literal type="number" pos:line="93" pos:column="11">0<pos:position pos:line="93" pos:column="12"/></literal><operator pos:line="93" pos:column="12">)<pos:position pos:line="93" pos:column="13"/></operator></expr>;<pos:position pos:line="93" pos:column="14"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
