<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_354_collectd-4.4.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">open_connection<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">arg<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sockaddr_un<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">addr<pos:position pos:line="3" pos:column="32"/></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">path<pos:position pos:line="5" pos:column="19"/></name>  <init pos:line="5" pos:column="21">= <expr><ternary><condition><expr><operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">==<pos:position pos:line="5" pos:column="31"/></operator> <name pos:line="5" pos:column="32">sock_file<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">)<pos:position pos:line="5" pos:column="42"/></operator></expr> ?<pos:position pos:line="5" pos:column="44"/></condition><then pos:line="5" pos:column="44"> <expr><name pos:line="5" pos:column="45">SOCK_PATH<pos:position pos:line="5" pos:column="54"/></name></expr> <pos:position pos:line="5" pos:column="55"/></then><else pos:line="5" pos:column="55">: <expr><name pos:line="5" pos:column="57">sock_file<pos:position pos:line="5" pos:column="66"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">group<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><ternary><condition><expr><operator pos:line="6" pos:column="23">(<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">==<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">sock_group<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">)<pos:position pos:line="6" pos:column="43"/></operator></expr> ?<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45"> <expr><name pos:line="6" pos:column="46">COLLECTD_GRP_NAME<pos:position pos:line="6" pos:column="63"/></name></expr> <pos:position pos:line="6" pos:column="64"/></then><else pos:line="6" pos:column="64">: <expr><name pos:line="6" pos:column="66">sock_group<pos:position pos:line="6" pos:column="76"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="6" pos:column="77"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* create UNIX socket */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">errno<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">connector_socket<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">=<pos:position pos:line="10" pos:column="38"/></operator> <call><name pos:line="10" pos:column="39">socket<pos:position pos:line="10" pos:column="45"/></name> <argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">PF_UNIX<pos:position pos:line="10" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">SOCK_STREAM<pos:position pos:line="10" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="69">0<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call><operator pos:line="10" pos:column="71">)<pos:position pos:line="10" pos:column="72"/></operator></expr>)<pos:position pos:line="10" pos:column="73"/></condition><then pos:line="10" pos:column="73"> <block pos:line="10" pos:column="74">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">char<pos:position pos:line="11" pos:column="21"/></name></type> <name><name pos:line="11" pos:column="22">errbuf<pos:position pos:line="11" pos:column="28"/></name><index pos:line="11" pos:column="28">[<expr><literal type="number" pos:line="11" pos:column="29">1024<pos:position pos:line="11" pos:column="33"/></literal></expr>]<pos:position pos:line="11" pos:column="34"/></index></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">disabled<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="28">1<pos:position pos:line="12" pos:column="29"/></literal></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">log_err<pos:position pos:line="13" pos:column="24"/></name> <argument_list pos:line="13" pos:column="25">(<argument><expr><literal type="string" pos:line="13" pos:column="26">"socket() failed: %s"<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="14" pos:column="33">sstrerror<pos:position pos:line="14" pos:column="42"/></name> <argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">errno<pos:position pos:line="14" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">errbuf<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="59">sizeof <argument_list pos:line="14" pos:column="66">(<argument><expr><name pos:line="14" pos:column="67">errbuf<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">pthread_exit<pos:position pos:line="15" pos:column="29"/></name> <argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">(<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">void<pos:position pos:line="15" pos:column="36"/></name> <operator pos:line="15" pos:column="37">*<pos:position pos:line="15" pos:column="38"/></operator><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator><literal type="number" pos:line="15" pos:column="39">1<pos:position pos:line="15" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="18" pos:column="9">addr<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">.<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">sun_family<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">AF_UNIX<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strncpy<pos:position pos:line="20" pos:column="16"/></name> <argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">addr<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">.<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">sun_path<pos:position pos:line="20" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">path<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><call pos:line="20" pos:column="39">(<name pos:line="20" pos:column="40">size_t<pos:position pos:line="20" pos:column="46"/></name>)<argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">UNIX_PATH_MAX<pos:position pos:line="20" pos:column="61"/></name> <operator pos:line="20" pos:column="62">-<pos:position pos:line="20" pos:column="63"/></operator> <literal type="number" pos:line="20" pos:column="64">1<pos:position pos:line="20" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">addr<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">sun_path<pos:position pos:line="21" pos:column="22"/></name><index pos:line="21" pos:column="22">[<expr><name pos:line="21" pos:column="23">UNIX_PATH_MAX<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">-<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="39">1<pos:position pos:line="21" pos:column="40"/></literal></expr>]<pos:position pos:line="21" pos:column="41"/></index></name> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <literal type="char" pos:line="21" pos:column="44">'\0'<pos:position pos:line="21" pos:column="48"/></literal></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">unlink<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name><name pos:line="22" pos:column="17">addr<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">sun_path<pos:position pos:line="22" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name pos:line="24" pos:column="9">errno<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">bind<pos:position pos:line="25" pos:column="23"/></name> <argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">connector_socket<pos:position pos:line="25" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="43">(<pos:position pos:line="25" pos:column="44"/></operator>struct <name pos:line="25" pos:column="51">sockaddr<pos:position pos:line="25" pos:column="59"/></name> <operator pos:line="25" pos:column="60">*<pos:position pos:line="25" pos:column="61"/></operator><operator pos:line="25" pos:column="61">)<pos:position pos:line="25" pos:column="62"/></operator><operator pos:line="25" pos:column="62">&amp;<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="63">addr<pos:position pos:line="25" pos:column="67"/></name></expr></argument>,
				<argument><expr><call><name pos:line="26" pos:column="33">offsetof<pos:position pos:line="26" pos:column="41"/></name> <argument_list pos:line="26" pos:column="42">(<argument><expr pos:line="26" pos:column="43">struct <name pos:line="26" pos:column="50">sockaddr_un<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="63">sun_path<pos:position pos:line="26" pos:column="71"/></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call>
					<operator pos:line="27" pos:column="41">+<pos:position pos:line="27" pos:column="42"/></operator> <call><name pos:line="27" pos:column="43">strlen<pos:position pos:line="27" pos:column="49"/></name><argument_list pos:line="27" pos:column="49">(<argument><expr><name><name pos:line="27" pos:column="50">addr<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">.<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="55">sun_path<pos:position pos:line="27" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66"> <block pos:line="27" pos:column="67">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name></type> <name><name pos:line="28" pos:column="22">errbuf<pos:position pos:line="28" pos:column="28"/></name><index pos:line="28" pos:column="28">[<expr><literal type="number" pos:line="28" pos:column="29">1024<pos:position pos:line="28" pos:column="33"/></literal></expr>]<pos:position pos:line="28" pos:column="34"/></index></name></decl>;<pos:position pos:line="28" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">disabled<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">=<pos:position pos:line="29" pos:column="27"/></operator> <literal type="number" pos:line="29" pos:column="28">1<pos:position pos:line="29" pos:column="29"/></literal></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">close<pos:position pos:line="30" pos:column="22"/></name> <argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">connector_socket<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">connector_socket<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">=<pos:position pos:line="31" pos:column="35"/></operator> <operator pos:line="31" pos:column="36">-<pos:position pos:line="31" pos:column="37"/></operator><literal type="number" pos:line="31" pos:column="37">1<pos:position pos:line="31" pos:column="38"/></literal></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">log_err<pos:position pos:line="32" pos:column="24"/></name> <argument_list pos:line="32" pos:column="25">(<argument><expr><literal type="string" pos:line="32" pos:column="26">"bind() failed: %s"<pos:position pos:line="32" pos:column="45"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="33" pos:column="33">sstrerror<pos:position pos:line="33" pos:column="42"/></name> <argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">errno<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">errbuf<pos:position pos:line="33" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="59">sizeof <argument_list pos:line="33" pos:column="66">(<argument><expr><name pos:line="33" pos:column="67">errbuf<pos:position pos:line="33" pos:column="73"/></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">pthread_exit<pos:position pos:line="34" pos:column="29"/></name> <argument_list pos:line="34" pos:column="30">(<argument><expr><operator pos:line="34" pos:column="31">(<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">void<pos:position pos:line="34" pos:column="36"/></name> <operator pos:line="34" pos:column="37">*<pos:position pos:line="34" pos:column="38"/></operator><operator pos:line="34" pos:column="38">)<pos:position pos:line="34" pos:column="39"/></operator><literal type="number" pos:line="34" pos:column="39">1<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">errno<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">-<pos:position pos:line="38" pos:column="14"/></operator><literal type="number" pos:line="38" pos:column="14">1<pos:position pos:line="38" pos:column="15"/></literal> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <call><name pos:line="38" pos:column="19">listen<pos:position pos:line="38" pos:column="25"/></name> <argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">connector_socket<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="45">5<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="48"/></condition><then pos:line="38" pos:column="48"> <block pos:line="38" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">char<pos:position pos:line="39" pos:column="21"/></name></type> <name><name pos:line="39" pos:column="22">errbuf<pos:position pos:line="39" pos:column="28"/></name><index pos:line="39" pos:column="28">[<expr><literal type="number" pos:line="39" pos:column="29">1024<pos:position pos:line="39" pos:column="33"/></literal></expr>]<pos:position pos:line="39" pos:column="34"/></index></name></decl>;<pos:position pos:line="39" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><name pos:line="40" pos:column="17">disabled<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="28">1<pos:position pos:line="40" pos:column="29"/></literal></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">close<pos:position pos:line="41" pos:column="22"/></name> <argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">connector_socket<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">connector_socket<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">=<pos:position pos:line="42" pos:column="35"/></operator> <operator pos:line="42" pos:column="36">-<pos:position pos:line="42" pos:column="37"/></operator><literal type="number" pos:line="42" pos:column="37">1<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">log_err<pos:position pos:line="43" pos:column="24"/></name> <argument_list pos:line="43" pos:column="25">(<argument><expr><literal type="string" pos:line="43" pos:column="26">"listen() failed: %s"<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="44" pos:column="33">sstrerror<pos:position pos:line="44" pos:column="42"/></name> <argument_list pos:line="44" pos:column="43">(<argument><expr><name pos:line="44" pos:column="44">errno<pos:position pos:line="44" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="51">errbuf<pos:position pos:line="44" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="59">sizeof <argument_list pos:line="44" pos:column="66">(<argument><expr><name pos:line="44" pos:column="67">errbuf<pos:position pos:line="44" pos:column="73"/></name></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">pthread_exit<pos:position pos:line="45" pos:column="29"/></name> <argument_list pos:line="45" pos:column="30">(<argument><expr><operator pos:line="45" pos:column="31">(<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">void<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">*<pos:position pos:line="45" pos:column="38"/></operator><operator pos:line="45" pos:column="38">)<pos:position pos:line="45" pos:column="39"/></operator><literal type="number" pos:line="45" pos:column="39">1<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<block pos:line="48" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="49" pos:column="17">struct<pos:position pos:line="49" pos:column="23"/></name> <name pos:line="49" pos:column="24">group<pos:position pos:line="49" pos:column="29"/></name></name></type> <name pos:line="49" pos:column="30">sg<pos:position pos:line="49" pos:column="32"/></name></decl>;<pos:position pos:line="49" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="50" pos:column="17">struct<pos:position pos:line="50" pos:column="23"/></name> <name pos:line="50" pos:column="24">group<pos:position pos:line="50" pos:column="29"/></name></name> <modifier pos:line="50" pos:column="30">*<pos:position pos:line="50" pos:column="31"/></modifier></type><name pos:line="50" pos:column="31">grp<pos:position pos:line="50" pos:column="34"/></name></decl>;<pos:position pos:line="50" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">char<pos:position pos:line="51" pos:column="21"/></name></type> <name><name pos:line="51" pos:column="22">grbuf<pos:position pos:line="51" pos:column="27"/></name><index pos:line="51" pos:column="27">[<expr><literal type="number" pos:line="51" pos:column="28">2048<pos:position pos:line="51" pos:column="32"/></literal></expr>]<pos:position pos:line="51" pos:column="33"/></index></name></decl>;<pos:position pos:line="51" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">int<pos:position pos:line="52" pos:column="20"/></name></type> <name pos:line="52" pos:column="21">status<pos:position pos:line="52" pos:column="27"/></name></decl>;<pos:position pos:line="52" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="54" pos:column="17">grp<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">NULL<pos:position pos:line="54" pos:column="27"/></name></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">status<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">=<pos:position pos:line="55" pos:column="25"/></operator> <call><name pos:line="55" pos:column="26">getgrnam_r<pos:position pos:line="55" pos:column="36"/></name> <argument_list pos:line="55" pos:column="37">(<argument><expr><name pos:line="55" pos:column="38">group<pos:position pos:line="55" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="45">&amp;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="46">sg<pos:position pos:line="55" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="50">grbuf<pos:position pos:line="55" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="57">sizeof <argument_list pos:line="55" pos:column="64">(<argument><expr><name pos:line="55" pos:column="65">grbuf<pos:position pos:line="55" pos:column="70"/></name></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="55" pos:column="73">&amp;<pos:position pos:line="55" pos:column="78"/></operator><name pos:line="55" pos:column="74">grp<pos:position pos:line="55" pos:column="77"/></name></expr></argument>)<pos:position pos:line="55" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="79"/></expr_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">status<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">!=<pos:position pos:line="56" pos:column="30"/></operator> <literal type="number" pos:line="56" pos:column="31">0<pos:position pos:line="56" pos:column="32"/></literal></expr>)<pos:position pos:line="56" pos:column="33"/></condition><then pos:line="56" pos:column="33">
		<block pos:line="57" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">char<pos:position pos:line="58" pos:column="29"/></name></type> <name><name pos:line="58" pos:column="30">errbuf<pos:position pos:line="58" pos:column="36"/></name><index pos:line="58" pos:column="36">[<expr><literal type="number" pos:line="58" pos:column="37">1024<pos:position pos:line="58" pos:column="41"/></literal></expr>]<pos:position pos:line="58" pos:column="42"/></index></name></decl>;<pos:position pos:line="58" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">log_warn<pos:position pos:line="59" pos:column="33"/></name> <argument_list pos:line="59" pos:column="34">(<argument><expr><literal type="string" pos:line="59" pos:column="35">"getgrnam_r (%s) failed: %s"<pos:position pos:line="59" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="65">group<pos:position pos:line="59" pos:column="70"/></name></expr></argument>,
					<argument><expr><call><name pos:line="60" pos:column="41">sstrerror<pos:position pos:line="60" pos:column="50"/></name> <argument_list pos:line="60" pos:column="51">(<argument><expr><name pos:line="60" pos:column="52">errno<pos:position pos:line="60" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="59">errbuf<pos:position pos:line="60" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="67">sizeof <argument_list pos:line="60" pos:column="74">(<argument><expr><name pos:line="60" pos:column="75">errbuf<pos:position pos:line="60" pos:column="81"/></name></expr></argument>)<pos:position pos:line="60" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="85"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then>
		<elseif pos:line="62" pos:column="17">else <if pos:line="62" pos:column="22">if <condition pos:line="62" pos:column="25">(<expr><name pos:line="62" pos:column="26">grp<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">==<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">NULL<pos:position pos:line="62" pos:column="37"/></name></expr>)<pos:position pos:line="62" pos:column="38"/></condition><then pos:line="62" pos:column="38">
		<block pos:line="63" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">log_warn<pos:position pos:line="64" pos:column="33"/></name> <argument_list pos:line="64" pos:column="34">(<argument><expr><literal type="string" pos:line="64" pos:column="35">"No such group: `%s'"<pos:position pos:line="64" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="58">group<pos:position pos:line="64" pos:column="63"/></name></expr></argument>)<pos:position pos:line="64" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if></elseif>
		<else pos:line="66" pos:column="17">else
		<block pos:line="67" pos:column="17">{
			<expr_stmt><expr><name pos:line="68" pos:column="25">status<pos:position pos:line="68" pos:column="31"/></name> <operator pos:line="68" pos:column="32">=<pos:position pos:line="68" pos:column="33"/></operator> <call><name pos:line="68" pos:column="34">chown<pos:position pos:line="68" pos:column="39"/></name> <argument_list pos:line="68" pos:column="40">(<argument><expr><name pos:line="68" pos:column="41">path<pos:position pos:line="68" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="47">(<pos:position pos:line="68" pos:column="48"/></operator><name pos:line="68" pos:column="48">uid_t<pos:position pos:line="68" pos:column="53"/></name><operator pos:line="68" pos:column="53">)<pos:position pos:line="68" pos:column="54"/></operator> <operator pos:line="68" pos:column="55">-<pos:position pos:line="68" pos:column="56"/></operator><literal type="number" pos:line="68" pos:column="56">1<pos:position pos:line="68" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="59">grp<pos:position pos:line="68" pos:column="62"/></name><operator pos:line="68" pos:column="62">-&gt;<pos:position pos:line="68" pos:column="67"/></operator><name pos:line="68" pos:column="64">gr_gid<pos:position pos:line="68" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="72"/></expr_stmt>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">status<pos:position pos:line="69" pos:column="35"/></name> <operator pos:line="69" pos:column="36">!=<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">0<pos:position pos:line="69" pos:column="40"/></literal></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41">
			<block pos:line="70" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="71" pos:column="33">char<pos:position pos:line="71" pos:column="37"/></name></type> <name><name pos:line="71" pos:column="38">errbuf<pos:position pos:line="71" pos:column="44"/></name><index pos:line="71" pos:column="44">[<expr><literal type="number" pos:line="71" pos:column="45">1024<pos:position pos:line="71" pos:column="49"/></literal></expr>]<pos:position pos:line="71" pos:column="50"/></index></name></decl>;<pos:position pos:line="71" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="72" pos:column="33">log_warn<pos:position pos:line="72" pos:column="41"/></name> <argument_list pos:line="72" pos:column="42">(<argument><expr><literal type="string" pos:line="72" pos:column="43">"chown (%s, -1, %i) failed: %s"<pos:position pos:line="72" pos:column="74"/></literal></expr></argument>,
						<argument><expr><name pos:line="73" pos:column="49">path<pos:position pos:line="73" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="55">(<pos:position pos:line="73" pos:column="56"/></operator><name pos:line="73" pos:column="56">int<pos:position pos:line="73" pos:column="59"/></name><operator pos:line="73" pos:column="59">)<pos:position pos:line="73" pos:column="60"/></operator> <name><name pos:line="73" pos:column="61">grp<pos:position pos:line="73" pos:column="64"/></name><operator pos:line="73" pos:column="64">-&gt;<pos:position pos:line="73" pos:column="69"/></operator><name pos:line="73" pos:column="66">gr_gid<pos:position pos:line="73" pos:column="72"/></name></name></expr></argument>,
						<argument><expr><call><name pos:line="74" pos:column="49">sstrerror<pos:position pos:line="74" pos:column="58"/></name> <argument_list pos:line="74" pos:column="59">(<argument><expr><name pos:line="74" pos:column="60">errno<pos:position pos:line="74" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="67">errbuf<pos:position pos:line="74" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="75">sizeof <argument_list pos:line="74" pos:column="82">(<argument><expr><name pos:line="74" pos:column="83">errbuf<pos:position pos:line="74" pos:column="89"/></name></expr></argument>)<pos:position pos:line="74" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="93"/></expr_stmt>
			}<pos:position pos:line="75" pos:column="26"/></block></then></if>
		}<pos:position pos:line="76" pos:column="18"/></block></else></if>
	}<pos:position pos:line="77" pos:column="10"/></block>

	<expr_stmt><expr><name pos:line="79" pos:column="9">errno<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <literal type="number" pos:line="79" pos:column="17">0<pos:position pos:line="79" pos:column="18"/></literal></expr>;<pos:position pos:line="79" pos:column="19"/></expr_stmt>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><literal type="number" pos:line="80" pos:column="13">0<pos:position pos:line="80" pos:column="14"/></literal> <operator pos:line="80" pos:column="15">!=<pos:position pos:line="80" pos:column="17"/></operator> <call><name pos:line="80" pos:column="18">chmod<pos:position pos:line="80" pos:column="23"/></name> <argument_list pos:line="80" pos:column="24">(<argument><expr><name pos:line="80" pos:column="25">path<pos:position pos:line="80" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="31">sock_perms<pos:position pos:line="80" pos:column="41"/></name></expr></argument>)<pos:position pos:line="80" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="43"/></condition><then pos:line="80" pos:column="43"> <block pos:line="80" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="81" pos:column="17">char<pos:position pos:line="81" pos:column="21"/></name></type> <name><name pos:line="81" pos:column="22">errbuf<pos:position pos:line="81" pos:column="28"/></name><index pos:line="81" pos:column="28">[<expr><literal type="number" pos:line="81" pos:column="29">1024<pos:position pos:line="81" pos:column="33"/></literal></expr>]<pos:position pos:line="81" pos:column="34"/></index></name></decl>;<pos:position pos:line="81" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">log_warn<pos:position pos:line="82" pos:column="25"/></name> <argument_list pos:line="82" pos:column="26">(<argument><expr><literal type="string" pos:line="82" pos:column="27">"chmod() failed: %s"<pos:position pos:line="82" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="83" pos:column="33">sstrerror<pos:position pos:line="83" pos:column="42"/></name> <argument_list pos:line="83" pos:column="43">(<argument><expr><name pos:line="83" pos:column="44">errno<pos:position pos:line="83" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="51">errbuf<pos:position pos:line="83" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="83" pos:column="59">sizeof <argument_list pos:line="83" pos:column="66">(<argument><expr><name pos:line="83" pos:column="67">errbuf<pos:position pos:line="83" pos:column="73"/></name></expr></argument>)<pos:position pos:line="83" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="83" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="84" pos:column="10"/></block></then></if>

	<block pos:line="86" pos:column="9">{ <comment type="block" pos:line="86" pos:column="11">/* initialize collector threads */</comment>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">int<pos:position pos:line="87" pos:column="20"/></name></type> <name pos:line="87" pos:column="21">i<pos:position pos:line="87" pos:column="22"/></name>   <init pos:line="87" pos:column="25">= <expr><literal type="number" pos:line="87" pos:column="27">0<pos:position pos:line="87" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int<pos:position pos:line="88" pos:column="20"/></name></type> <name pos:line="88" pos:column="21">err<pos:position pos:line="88" pos:column="24"/></name> <init pos:line="88" pos:column="25">= <expr><literal type="number" pos:line="88" pos:column="27">0<pos:position pos:line="88" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="88" pos:column="29"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="90" pos:column="17">pthread_attr_t<pos:position pos:line="90" pos:column="31"/></name></type> <name pos:line="90" pos:column="32">ptattr<pos:position pos:line="90" pos:column="38"/></name></decl>;<pos:position pos:line="90" pos:column="39"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="92" pos:column="17">conns<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">.<pos:position pos:line="92" pos:column="23"/></operator><name pos:line="92" pos:column="23">head<pos:position pos:line="92" pos:column="27"/></name></name> <operator pos:line="92" pos:column="28">=<pos:position pos:line="92" pos:column="29"/></operator> <name pos:line="92" pos:column="30">NULL<pos:position pos:line="92" pos:column="34"/></name></expr>;<pos:position pos:line="92" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="93" pos:column="17">conns<pos:position pos:line="93" pos:column="22"/></name><operator pos:line="93" pos:column="22">.<pos:position pos:line="93" pos:column="23"/></operator><name pos:line="93" pos:column="23">tail<pos:position pos:line="93" pos:column="27"/></name></name> <operator pos:line="93" pos:column="28">=<pos:position pos:line="93" pos:column="29"/></operator> <name pos:line="93" pos:column="30">NULL<pos:position pos:line="93" pos:column="34"/></name></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="95" pos:column="17">pthread_attr_init<pos:position pos:line="95" pos:column="34"/></name> <argument_list pos:line="95" pos:column="35">(<argument><expr><operator pos:line="95" pos:column="36">&amp;<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="37">ptattr<pos:position pos:line="95" pos:column="43"/></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="96" pos:column="17">pthread_attr_setdetachstate<pos:position pos:line="96" pos:column="44"/></name> <argument_list pos:line="96" pos:column="45">(<argument><expr><operator pos:line="96" pos:column="46">&amp;<pos:position pos:line="96" pos:column="51"/></operator><name pos:line="96" pos:column="47">ptattr<pos:position pos:line="96" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="55">PTHREAD_CREATE_DETACHED<pos:position pos:line="96" pos:column="78"/></name></expr></argument>)<pos:position pos:line="96" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="80"/></expr_stmt>

		<expr_stmt><expr><name pos:line="98" pos:column="17">available_collectors<pos:position pos:line="98" pos:column="37"/></name> <operator pos:line="98" pos:column="38">=<pos:position pos:line="98" pos:column="39"/></operator> <name pos:line="98" pos:column="40">max_conns<pos:position pos:line="98" pos:column="49"/></name></expr>;<pos:position pos:line="98" pos:column="50"/></expr_stmt>

		<expr_stmt><expr><name pos:line="100" pos:column="17">collectors<pos:position pos:line="100" pos:column="27"/></name> <operator pos:line="100" pos:column="28">=<pos:position pos:line="100" pos:column="29"/></operator>
			<operator pos:line="101" pos:column="25">(<pos:position pos:line="101" pos:column="26"/></operator><name pos:line="101" pos:column="26">collector_t<pos:position pos:line="101" pos:column="37"/></name> <operator pos:line="101" pos:column="38">*<pos:position pos:line="101" pos:column="39"/></operator><operator pos:line="101" pos:column="39">*<pos:position pos:line="101" pos:column="40"/></operator><operator pos:line="101" pos:column="40">)<pos:position pos:line="101" pos:column="41"/></operator><call><name pos:line="101" pos:column="41">smalloc<pos:position pos:line="101" pos:column="48"/></name> <argument_list pos:line="101" pos:column="49">(<argument><expr><name pos:line="101" pos:column="50">max_conns<pos:position pos:line="101" pos:column="59"/></name> <operator pos:line="101" pos:column="60">*<pos:position pos:line="101" pos:column="61"/></operator> <sizeof pos:line="101" pos:column="62">sizeof <argument_list pos:line="101" pos:column="69">(<argument><expr><name pos:line="101" pos:column="70">collector_t<pos:position pos:line="101" pos:column="81"/></name> <operator pos:line="101" pos:column="82">*<pos:position pos:line="101" pos:column="83"/></operator></expr></argument>)<pos:position pos:line="101" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="101" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="86"/></expr_stmt>

		<for pos:line="103" pos:column="17">for <control pos:line="103" pos:column="21">(<init><expr><name pos:line="103" pos:column="22">i<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <literal type="number" pos:line="103" pos:column="26">0<pos:position pos:line="103" pos:column="27"/></literal></expr>;<pos:position pos:line="103" pos:column="28"/></init> <condition><expr><name pos:line="103" pos:column="29">i<pos:position pos:line="103" pos:column="30"/></name> <operator pos:line="103" pos:column="31">&lt;<pos:position pos:line="103" pos:column="35"/></operator> <name pos:line="103" pos:column="33">max_conns<pos:position pos:line="103" pos:column="42"/></name></expr>;<pos:position pos:line="103" pos:column="43"/></condition> <incr><expr><operator pos:line="103" pos:column="44">++<pos:position pos:line="103" pos:column="46"/></operator><name pos:line="103" pos:column="46">i<pos:position pos:line="103" pos:column="47"/></name></expr></incr>)<pos:position pos:line="103" pos:column="48"/></control> <block pos:line="103" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="104" pos:column="25">collectors<pos:position pos:line="104" pos:column="35"/></name><index pos:line="104" pos:column="35">[<expr><name pos:line="104" pos:column="36">i<pos:position pos:line="104" pos:column="37"/></name></expr>]<pos:position pos:line="104" pos:column="38"/></index></name> <operator pos:line="104" pos:column="39">=<pos:position pos:line="104" pos:column="40"/></operator> <operator pos:line="104" pos:column="41">(<pos:position pos:line="104" pos:column="42"/></operator><name pos:line="104" pos:column="42">collector_t<pos:position pos:line="104" pos:column="53"/></name> <operator pos:line="104" pos:column="54">*<pos:position pos:line="104" pos:column="55"/></operator><operator pos:line="104" pos:column="55">)<pos:position pos:line="104" pos:column="56"/></operator><call><name pos:line="104" pos:column="56">smalloc<pos:position pos:line="104" pos:column="63"/></name> <argument_list pos:line="104" pos:column="64">(<argument><expr><sizeof pos:line="104" pos:column="65">sizeof <argument_list pos:line="104" pos:column="72">(<argument><expr><name pos:line="104" pos:column="73">collector_t<pos:position pos:line="104" pos:column="84"/></name></expr></argument>)<pos:position pos:line="104" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="104" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">collectors<pos:position pos:line="105" pos:column="35"/></name><index pos:line="105" pos:column="35">[<expr><name pos:line="105" pos:column="36">i<pos:position pos:line="105" pos:column="37"/></name></expr>]<pos:position pos:line="105" pos:column="38"/></index></name><operator pos:line="105" pos:column="38">-&gt;<pos:position pos:line="105" pos:column="43"/></operator><name pos:line="105" pos:column="40">socket<pos:position pos:line="105" pos:column="46"/></name> <operator pos:line="105" pos:column="47">=<pos:position pos:line="105" pos:column="48"/></operator> <name pos:line="105" pos:column="49">NULL<pos:position pos:line="105" pos:column="53"/></name></expr>;<pos:position pos:line="105" pos:column="54"/></expr_stmt>

			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><literal type="number" pos:line="107" pos:column="29">0<pos:position pos:line="107" pos:column="30"/></literal> <operator pos:line="107" pos:column="31">!=<pos:position pos:line="107" pos:column="33"/></operator> <operator pos:line="107" pos:column="34">(<pos:position pos:line="107" pos:column="35"/></operator><name pos:line="107" pos:column="35">err<pos:position pos:line="107" pos:column="38"/></name> <operator pos:line="107" pos:column="39">=<pos:position pos:line="107" pos:column="40"/></operator> <call><name pos:line="107" pos:column="41">pthread_create<pos:position pos:line="107" pos:column="55"/></name> <argument_list pos:line="107" pos:column="56">(<argument><expr><operator pos:line="107" pos:column="57">&amp;<pos:position pos:line="107" pos:column="62"/></operator><name><name pos:line="107" pos:column="58">collectors<pos:position pos:line="107" pos:column="68"/></name><index pos:line="107" pos:column="68">[<expr><name pos:line="107" pos:column="69">i<pos:position pos:line="107" pos:column="70"/></name></expr>]<pos:position pos:line="107" pos:column="71"/></index></name><operator pos:line="107" pos:column="71">-&gt;<pos:position pos:line="107" pos:column="76"/></operator><name pos:line="107" pos:column="73">thread<pos:position pos:line="107" pos:column="79"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="81">&amp;<pos:position pos:line="107" pos:column="86"/></operator><name pos:line="107" pos:column="82">ptattr<pos:position pos:line="107" pos:column="88"/></name></expr></argument>,
							<argument><expr><name pos:line="108" pos:column="57">collect<pos:position pos:line="108" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="66">collectors<pos:position pos:line="108" pos:column="76"/></name><index pos:line="108" pos:column="76">[<expr><name pos:line="108" pos:column="77">i<pos:position pos:line="108" pos:column="78"/></name></expr>]<pos:position pos:line="108" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="108" pos:column="80"/></argument_list></call><operator pos:line="108" pos:column="80">)<pos:position pos:line="108" pos:column="81"/></operator></expr>)<pos:position pos:line="108" pos:column="82"/></condition><then pos:line="108" pos:column="82"> <block pos:line="108" pos:column="83">{
				<decl_stmt><decl><type><name pos:line="109" pos:column="33">char<pos:position pos:line="109" pos:column="37"/></name></type> <name><name pos:line="109" pos:column="38">errbuf<pos:position pos:line="109" pos:column="44"/></name><index pos:line="109" pos:column="44">[<expr><literal type="number" pos:line="109" pos:column="45">1024<pos:position pos:line="109" pos:column="49"/></literal></expr>]<pos:position pos:line="109" pos:column="50"/></index></name></decl>;<pos:position pos:line="109" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="110" pos:column="33">log_err<pos:position pos:line="110" pos:column="40"/></name> <argument_list pos:line="110" pos:column="41">(<argument><expr><literal type="string" pos:line="110" pos:column="42">"pthread_create() failed: %s"<pos:position pos:line="110" pos:column="71"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="111" pos:column="49">sstrerror<pos:position pos:line="111" pos:column="58"/></name> <argument_list pos:line="111" pos:column="59">(<argument><expr><name pos:line="111" pos:column="60">errno<pos:position pos:line="111" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="67">errbuf<pos:position pos:line="111" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="75">sizeof <argument_list pos:line="111" pos:column="82">(<argument><expr><name pos:line="111" pos:column="83">errbuf<pos:position pos:line="111" pos:column="89"/></name></expr></argument>)<pos:position pos:line="111" pos:column="90"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="111" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="93"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="112" pos:column="33">collectors<pos:position pos:line="112" pos:column="43"/></name><index pos:line="112" pos:column="43">[<expr><name pos:line="112" pos:column="44">i<pos:position pos:line="112" pos:column="45"/></name></expr>]<pos:position pos:line="112" pos:column="46"/></index></name><operator pos:line="112" pos:column="46">-&gt;<pos:position pos:line="112" pos:column="51"/></operator><name pos:line="112" pos:column="48">thread<pos:position pos:line="112" pos:column="54"/></name> <operator pos:line="112" pos:column="55">=<pos:position pos:line="112" pos:column="56"/></operator> <operator pos:line="112" pos:column="57">(<pos:position pos:line="112" pos:column="58"/></operator><name pos:line="112" pos:column="58">pthread_t<pos:position pos:line="112" pos:column="67"/></name><operator pos:line="112" pos:column="67">)<pos:position pos:line="112" pos:column="68"/></operator> <literal type="number" pos:line="112" pos:column="69">0<pos:position pos:line="112" pos:column="70"/></literal></expr>;<pos:position pos:line="112" pos:column="71"/></expr_stmt>
			}<pos:position pos:line="113" pos:column="26"/></block></then></if>
		}<pos:position pos:line="114" pos:column="18"/></block></for>

		<expr_stmt><expr><call><name pos:line="116" pos:column="17">pthread_attr_destroy<pos:position pos:line="116" pos:column="37"/></name> <argument_list pos:line="116" pos:column="38">(<argument><expr><operator pos:line="116" pos:column="39">&amp;<pos:position pos:line="116" pos:column="44"/></operator><name pos:line="116" pos:column="40">ptattr<pos:position pos:line="116" pos:column="46"/></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="117" pos:column="10"/></block>

	<while pos:line="119" pos:column="9">while <condition pos:line="119" pos:column="15">(<expr><literal type="number" pos:line="119" pos:column="16">1<pos:position pos:line="119" pos:column="17"/></literal></expr>)<pos:position pos:line="119" pos:column="18"/></condition> <block pos:line="119" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="120" pos:column="17">int<pos:position pos:line="120" pos:column="20"/></name></type> <name pos:line="120" pos:column="21">remote<pos:position pos:line="120" pos:column="27"/></name> <init pos:line="120" pos:column="28">= <expr><literal type="number" pos:line="120" pos:column="30">0<pos:position pos:line="120" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="120" pos:column="32"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="122" pos:column="17">conn_t<pos:position pos:line="122" pos:column="23"/></name> <modifier pos:line="122" pos:column="24">*<pos:position pos:line="122" pos:column="25"/></modifier></type><name pos:line="122" pos:column="25">connection<pos:position pos:line="122" pos:column="35"/></name></decl>;<pos:position pos:line="122" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="124" pos:column="17">pthread_mutex_lock<pos:position pos:line="124" pos:column="35"/></name> <argument_list pos:line="124" pos:column="36">(<argument><expr><operator pos:line="124" pos:column="37">&amp;<pos:position pos:line="124" pos:column="42"/></operator><name pos:line="124" pos:column="38">available_mutex<pos:position pos:line="124" pos:column="53"/></name></expr></argument>)<pos:position pos:line="124" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="55"/></expr_stmt>

		<while pos:line="126" pos:column="17">while <condition pos:line="126" pos:column="23">(<expr><literal type="number" pos:line="126" pos:column="24">0<pos:position pos:line="126" pos:column="25"/></literal> <operator pos:line="126" pos:column="26">==<pos:position pos:line="126" pos:column="28"/></operator> <name pos:line="126" pos:column="29">available_collectors<pos:position pos:line="126" pos:column="49"/></name></expr>)<pos:position pos:line="126" pos:column="50"/></condition> <block pos:line="126" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="127" pos:column="25">pthread_cond_wait<pos:position pos:line="127" pos:column="42"/></name> <argument_list pos:line="127" pos:column="43">(<argument><expr><operator pos:line="127" pos:column="44">&amp;<pos:position pos:line="127" pos:column="49"/></operator><name pos:line="127" pos:column="45">collector_available<pos:position pos:line="127" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="66">&amp;<pos:position pos:line="127" pos:column="71"/></operator><name pos:line="127" pos:column="67">available_mutex<pos:position pos:line="127" pos:column="82"/></name></expr></argument>)<pos:position pos:line="127" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="84"/></expr_stmt>
		}<pos:position pos:line="128" pos:column="18"/></block></while>

		<expr_stmt><expr><operator pos:line="130" pos:column="17">--<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="19">available_collectors<pos:position pos:line="130" pos:column="39"/></name></expr>;<pos:position pos:line="130" pos:column="40"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="132" pos:column="17">pthread_mutex_unlock<pos:position pos:line="132" pos:column="37"/></name> <argument_list pos:line="132" pos:column="38">(<argument><expr><operator pos:line="132" pos:column="39">&amp;<pos:position pos:line="132" pos:column="44"/></operator><name pos:line="132" pos:column="40">available_mutex<pos:position pos:line="132" pos:column="55"/></name></expr></argument>)<pos:position pos:line="132" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="57"/></expr_stmt>

		<do pos:line="134" pos:column="17">do <block pos:line="134" pos:column="20">{
			<expr_stmt><expr><name pos:line="135" pos:column="25">errno<pos:position pos:line="135" pos:column="30"/></name> <operator pos:line="135" pos:column="31">=<pos:position pos:line="135" pos:column="32"/></operator> <literal type="number" pos:line="135" pos:column="33">0<pos:position pos:line="135" pos:column="34"/></literal></expr>;<pos:position pos:line="135" pos:column="35"/></expr_stmt>
			<if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><operator pos:line="136" pos:column="29">-<pos:position pos:line="136" pos:column="30"/></operator><literal type="number" pos:line="136" pos:column="30">1<pos:position pos:line="136" pos:column="31"/></literal> <operator pos:line="136" pos:column="32">==<pos:position pos:line="136" pos:column="34"/></operator> <operator pos:line="136" pos:column="35">(<pos:position pos:line="136" pos:column="36"/></operator><name pos:line="136" pos:column="36">remote<pos:position pos:line="136" pos:column="42"/></name> <operator pos:line="136" pos:column="43">=<pos:position pos:line="136" pos:column="44"/></operator> <call><name pos:line="136" pos:column="45">accept<pos:position pos:line="136" pos:column="51"/></name> <argument_list pos:line="136" pos:column="52">(<argument><expr><name pos:line="136" pos:column="53">connector_socket<pos:position pos:line="136" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="71">NULL<pos:position pos:line="136" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="77">NULL<pos:position pos:line="136" pos:column="81"/></name></expr></argument>)<pos:position pos:line="136" pos:column="82"/></argument_list></call><operator pos:line="136" pos:column="82">)<pos:position pos:line="136" pos:column="83"/></operator></expr>)<pos:position pos:line="136" pos:column="84"/></condition><then pos:line="136" pos:column="84"> <block pos:line="136" pos:column="85">{
				<if pos:line="137" pos:column="33">if <condition pos:line="137" pos:column="36">(<expr><name pos:line="137" pos:column="37">EINTR<pos:position pos:line="137" pos:column="42"/></name> <operator pos:line="137" pos:column="43">!=<pos:position pos:line="137" pos:column="45"/></operator> <name pos:line="137" pos:column="46">errno<pos:position pos:line="137" pos:column="51"/></name></expr>)<pos:position pos:line="137" pos:column="52"/></condition><then pos:line="137" pos:column="52"> <block pos:line="137" pos:column="53">{
					<decl_stmt><decl><type><name pos:line="138" pos:column="41">char<pos:position pos:line="138" pos:column="45"/></name></type> <name><name pos:line="138" pos:column="46">errbuf<pos:position pos:line="138" pos:column="52"/></name><index pos:line="138" pos:column="52">[<expr><literal type="number" pos:line="138" pos:column="53">1024<pos:position pos:line="138" pos:column="57"/></literal></expr>]<pos:position pos:line="138" pos:column="58"/></index></name></decl>;<pos:position pos:line="138" pos:column="59"/></decl_stmt>
					<expr_stmt><expr><name pos:line="139" pos:column="41">disabled<pos:position pos:line="139" pos:column="49"/></name> <operator pos:line="139" pos:column="50">=<pos:position pos:line="139" pos:column="51"/></operator> <literal type="number" pos:line="139" pos:column="52">1<pos:position pos:line="139" pos:column="53"/></literal></expr>;<pos:position pos:line="139" pos:column="54"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="140" pos:column="41">close<pos:position pos:line="140" pos:column="46"/></name> <argument_list pos:line="140" pos:column="47">(<argument><expr><name pos:line="140" pos:column="48">connector_socket<pos:position pos:line="140" pos:column="64"/></name></expr></argument>)<pos:position pos:line="140" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="66"/></expr_stmt>
					<expr_stmt><expr><name pos:line="141" pos:column="41">connector_socket<pos:position pos:line="141" pos:column="57"/></name> <operator pos:line="141" pos:column="58">=<pos:position pos:line="141" pos:column="59"/></operator> <operator pos:line="141" pos:column="60">-<pos:position pos:line="141" pos:column="61"/></operator><literal type="number" pos:line="141" pos:column="61">1<pos:position pos:line="141" pos:column="62"/></literal></expr>;<pos:position pos:line="141" pos:column="63"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="142" pos:column="41">log_err<pos:position pos:line="142" pos:column="48"/></name> <argument_list pos:line="142" pos:column="49">(<argument><expr><literal type="string" pos:line="142" pos:column="50">"accept() failed: %s"<pos:position pos:line="142" pos:column="71"/></literal></expr></argument>,
							<argument><expr><call><name pos:line="143" pos:column="57">sstrerror<pos:position pos:line="143" pos:column="66"/></name> <argument_list pos:line="143" pos:column="67">(<argument><expr><name pos:line="143" pos:column="68">errno<pos:position pos:line="143" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="75">errbuf<pos:position pos:line="143" pos:column="81"/></name></expr></argument>, <argument><expr><sizeof pos:line="143" pos:column="83">sizeof <argument_list pos:line="143" pos:column="90">(<argument><expr><name pos:line="143" pos:column="91">errbuf<pos:position pos:line="143" pos:column="97"/></name></expr></argument>)<pos:position pos:line="143" pos:column="98"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="143" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="143" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="101"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="144" pos:column="41">pthread_exit<pos:position pos:line="144" pos:column="53"/></name> <argument_list pos:line="144" pos:column="54">(<argument><expr><operator pos:line="144" pos:column="55">(<pos:position pos:line="144" pos:column="56"/></operator><name pos:line="144" pos:column="56">void<pos:position pos:line="144" pos:column="60"/></name> <operator pos:line="144" pos:column="61">*<pos:position pos:line="144" pos:column="62"/></operator><operator pos:line="144" pos:column="62">)<pos:position pos:line="144" pos:column="63"/></operator><literal type="number" pos:line="144" pos:column="63">1<pos:position pos:line="144" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="66"/></expr_stmt>
				}<pos:position pos:line="145" pos:column="34"/></block></then></if>
			}<pos:position pos:line="146" pos:column="26"/></block></then></if>
		}<pos:position pos:line="147" pos:column="18"/></block> while <condition pos:line="147" pos:column="25">(<expr><name pos:line="147" pos:column="26">EINTR<pos:position pos:line="147" pos:column="31"/></name> <operator pos:line="147" pos:column="32">==<pos:position pos:line="147" pos:column="34"/></operator> <name pos:line="147" pos:column="35">errno<pos:position pos:line="147" pos:column="40"/></name></expr>)<pos:position pos:line="147" pos:column="41"/></condition>;<pos:position pos:line="147" pos:column="42"/></do>

		<expr_stmt><expr><name pos:line="149" pos:column="17">connection<pos:position pos:line="149" pos:column="27"/></name> <operator pos:line="149" pos:column="28">=<pos:position pos:line="149" pos:column="29"/></operator> <operator pos:line="149" pos:column="30">(<pos:position pos:line="149" pos:column="31"/></operator><name pos:line="149" pos:column="31">conn_t<pos:position pos:line="149" pos:column="37"/></name> <operator pos:line="149" pos:column="38">*<pos:position pos:line="149" pos:column="39"/></operator><operator pos:line="149" pos:column="39">)<pos:position pos:line="149" pos:column="40"/></operator><call><name pos:line="149" pos:column="40">smalloc<pos:position pos:line="149" pos:column="47"/></name> <argument_list pos:line="149" pos:column="48">(<argument><expr><sizeof pos:line="149" pos:column="49">sizeof <argument_list pos:line="149" pos:column="56">(<argument><expr><name pos:line="149" pos:column="57">conn_t<pos:position pos:line="149" pos:column="63"/></name></expr></argument>)<pos:position pos:line="149" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="66"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="151" pos:column="17">connection<pos:position pos:line="151" pos:column="27"/></name><operator pos:line="151" pos:column="27">-&gt;<pos:position pos:line="151" pos:column="32"/></operator><name pos:line="151" pos:column="29">socket<pos:position pos:line="151" pos:column="35"/></name></name> <operator pos:line="151" pos:column="36">=<pos:position pos:line="151" pos:column="37"/></operator> <call><name pos:line="151" pos:column="38">fdopen<pos:position pos:line="151" pos:column="44"/></name> <argument_list pos:line="151" pos:column="45">(<argument><expr><name pos:line="151" pos:column="46">remote<pos:position pos:line="151" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="54">"r"<pos:position pos:line="151" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="152" pos:column="17">connection<pos:position pos:line="152" pos:column="27"/></name><operator pos:line="152" pos:column="27">-&gt;<pos:position pos:line="152" pos:column="32"/></operator><name pos:line="152" pos:column="29">next<pos:position pos:line="152" pos:column="33"/></name></name>   <operator pos:line="152" pos:column="36">=<pos:position pos:line="152" pos:column="37"/></operator> <name pos:line="152" pos:column="38">NULL<pos:position pos:line="152" pos:column="42"/></name></expr>;<pos:position pos:line="152" pos:column="43"/></expr_stmt>

		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><name pos:line="154" pos:column="21">NULL<pos:position pos:line="154" pos:column="25"/></name> <operator pos:line="154" pos:column="26">==<pos:position pos:line="154" pos:column="28"/></operator> <name><name pos:line="154" pos:column="29">connection<pos:position pos:line="154" pos:column="39"/></name><operator pos:line="154" pos:column="39">-&gt;<pos:position pos:line="154" pos:column="44"/></operator><name pos:line="154" pos:column="41">socket<pos:position pos:line="154" pos:column="47"/></name></name></expr>)<pos:position pos:line="154" pos:column="48"/></condition><then pos:line="154" pos:column="48"> <block pos:line="154" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="155" pos:column="25">close<pos:position pos:line="155" pos:column="30"/></name> <argument_list pos:line="155" pos:column="31">(<argument><expr><name pos:line="155" pos:column="32">remote<pos:position pos:line="155" pos:column="38"/></name></expr></argument>)<pos:position pos:line="155" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="40"/></expr_stmt>
			<continue pos:line="156" pos:column="25">continue;<pos:position pos:line="156" pos:column="34"/></continue>
		}<pos:position pos:line="157" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="159" pos:column="17">pthread_mutex_lock<pos:position pos:line="159" pos:column="35"/></name> <argument_list pos:line="159" pos:column="36">(<argument><expr><operator pos:line="159" pos:column="37">&amp;<pos:position pos:line="159" pos:column="42"/></operator><name pos:line="159" pos:column="38">conns_mutex<pos:position pos:line="159" pos:column="49"/></name></expr></argument>)<pos:position pos:line="159" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="51"/></expr_stmt>

		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><name pos:line="161" pos:column="21">NULL<pos:position pos:line="161" pos:column="25"/></name> <operator pos:line="161" pos:column="26">==<pos:position pos:line="161" pos:column="28"/></operator> <name><name pos:line="161" pos:column="29">conns<pos:position pos:line="161" pos:column="34"/></name><operator pos:line="161" pos:column="34">.<pos:position pos:line="161" pos:column="35"/></operator><name pos:line="161" pos:column="35">head<pos:position pos:line="161" pos:column="39"/></name></name></expr>)<pos:position pos:line="161" pos:column="40"/></condition><then pos:line="161" pos:column="40"> <block pos:line="161" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="162" pos:column="25">conns<pos:position pos:line="162" pos:column="30"/></name><operator pos:line="162" pos:column="30">.<pos:position pos:line="162" pos:column="31"/></operator><name pos:line="162" pos:column="31">head<pos:position pos:line="162" pos:column="35"/></name></name> <operator pos:line="162" pos:column="36">=<pos:position pos:line="162" pos:column="37"/></operator> <name pos:line="162" pos:column="38">connection<pos:position pos:line="162" pos:column="48"/></name></expr>;<pos:position pos:line="162" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="163" pos:column="25">conns<pos:position pos:line="163" pos:column="30"/></name><operator pos:line="163" pos:column="30">.<pos:position pos:line="163" pos:column="31"/></operator><name pos:line="163" pos:column="31">tail<pos:position pos:line="163" pos:column="35"/></name></name> <operator pos:line="163" pos:column="36">=<pos:position pos:line="163" pos:column="37"/></operator> <name pos:line="163" pos:column="38">connection<pos:position pos:line="163" pos:column="48"/></name></expr>;<pos:position pos:line="163" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="164" pos:column="18"/></block></then>
		<else pos:line="165" pos:column="17">else <block pos:line="165" pos:column="22">{
			<expr_stmt><expr><name><name pos:line="166" pos:column="25">conns<pos:position pos:line="166" pos:column="30"/></name><operator pos:line="166" pos:column="30">.<pos:position pos:line="166" pos:column="31"/></operator><name pos:line="166" pos:column="31">tail<pos:position pos:line="166" pos:column="35"/></name><operator pos:line="166" pos:column="35">-&gt;<pos:position pos:line="166" pos:column="40"/></operator><name pos:line="166" pos:column="37">next<pos:position pos:line="166" pos:column="41"/></name></name> <operator pos:line="166" pos:column="42">=<pos:position pos:line="166" pos:column="43"/></operator> <name pos:line="166" pos:column="44">connection<pos:position pos:line="166" pos:column="54"/></name></expr>;<pos:position pos:line="166" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="167" pos:column="25">conns<pos:position pos:line="167" pos:column="30"/></name><operator pos:line="167" pos:column="30">.<pos:position pos:line="167" pos:column="31"/></operator><name pos:line="167" pos:column="31">tail<pos:position pos:line="167" pos:column="35"/></name></name> <operator pos:line="167" pos:column="36">=<pos:position pos:line="167" pos:column="37"/></operator> <name><name pos:line="167" pos:column="38">conns<pos:position pos:line="167" pos:column="43"/></name><operator pos:line="167" pos:column="43">.<pos:position pos:line="167" pos:column="44"/></operator><name pos:line="167" pos:column="44">tail<pos:position pos:line="167" pos:column="48"/></name><operator pos:line="167" pos:column="48">-&gt;<pos:position pos:line="167" pos:column="53"/></operator><name pos:line="167" pos:column="50">next<pos:position pos:line="167" pos:column="54"/></name></name></expr>;<pos:position pos:line="167" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="168" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="170" pos:column="17">pthread_mutex_unlock<pos:position pos:line="170" pos:column="37"/></name> <argument_list pos:line="170" pos:column="38">(<argument><expr><operator pos:line="170" pos:column="39">&amp;<pos:position pos:line="170" pos:column="44"/></operator><name pos:line="170" pos:column="40">conns_mutex<pos:position pos:line="170" pos:column="51"/></name></expr></argument>)<pos:position pos:line="170" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="53"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="172" pos:column="17">pthread_cond_signal<pos:position pos:line="172" pos:column="36"/></name> <argument_list pos:line="172" pos:column="37">(<argument><expr><operator pos:line="172" pos:column="38">&amp;<pos:position pos:line="172" pos:column="43"/></operator><name pos:line="172" pos:column="39">conn_available<pos:position pos:line="172" pos:column="53"/></name></expr></argument>)<pos:position pos:line="172" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="173" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="174" pos:column="9">pthread_exit<pos:position pos:line="174" pos:column="21"/></name> <argument_list pos:line="174" pos:column="22">(<argument><expr><operator pos:line="174" pos:column="23">(<pos:position pos:line="174" pos:column="24"/></operator><name pos:line="174" pos:column="24">void<pos:position pos:line="174" pos:column="28"/></name> <operator pos:line="174" pos:column="29">*<pos:position pos:line="174" pos:column="30"/></operator><operator pos:line="174" pos:column="30">)<pos:position pos:line="174" pos:column="31"/></operator><literal type="number" pos:line="174" pos:column="31">0<pos:position pos:line="174" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="34"/></expr_stmt>
}<pos:position pos:line="175" pos:column="2"/></block></function></unit>
