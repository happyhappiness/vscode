<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_666_collectd-4.10.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">PyObject<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type><name pos:line="1" pos:column="18">Values_repr<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">PyObject<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">s<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">PyObject<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">ret<pos:position pos:line="2" pos:column="22"/></name></decl>, <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="2" pos:column="25">tmp<pos:position pos:line="2" pos:column="28"/></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">PyObject<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">l_interval<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">NULL<pos:position pos:line="3" pos:column="43"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="46">l_values<pos:position pos:line="3" pos:column="54"/></name> <init pos:line="3" pos:column="55">= <expr><name pos:line="3" pos:column="57">NULL<pos:position pos:line="3" pos:column="61"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="63">*<pos:position pos:line="3" pos:column="64"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="64">l_meta<pos:position pos:line="3" pos:column="70"/></name> <init pos:line="3" pos:column="71">= <expr><name pos:line="3" pos:column="73">NULL<pos:position pos:line="3" pos:column="77"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="79">*<pos:position pos:line="3" pos:column="80"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="80">l_closing<pos:position pos:line="3" pos:column="89"/></name> <init pos:line="3" pos:column="90">= <expr><name pos:line="3" pos:column="92">NULL<pos:position pos:line="3" pos:column="96"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="97"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">Values<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">self<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">(<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">Values<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></operator><operator pos:line="4" pos:column="33">)<pos:position pos:line="4" pos:column="34"/></operator> <name pos:line="4" pos:column="35">s<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">l_interval<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">==<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="17">l_interval<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">=<pos:position pos:line="7" pos:column="29"/></operator> <call><name pos:line="7" pos:column="30">cpy_string_to_unicode_or_bytes<pos:position pos:line="7" pos:column="60"/></name><argument_list pos:line="7" pos:column="60">(<argument><expr><literal type="string" pos:line="7" pos:column="61">",interval="<pos:position pos:line="7" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="75"/></expr_stmt></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">l_values<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">==<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="25">NULL<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">l_values<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <call><name pos:line="9" pos:column="28">cpy_string_to_unicode_or_bytes<pos:position pos:line="9" pos:column="58"/></name><argument_list pos:line="9" pos:column="58">(<argument><expr><literal type="string" pos:line="9" pos:column="59">",values="<pos:position pos:line="9" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">l_meta<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">==<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">NULL<pos:position pos:line="10" pos:column="27"/></name></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">l_meta<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <call><name pos:line="11" pos:column="26">cpy_string_to_unicode_or_bytes<pos:position pos:line="11" pos:column="56"/></name><argument_list pos:line="11" pos:column="56">(<argument><expr><literal type="string" pos:line="11" pos:column="57">",meta="<pos:position pos:line="11" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="67"/></expr_stmt></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">l_closing<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">==<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">l_closing<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <call><name pos:line="13" pos:column="29">cpy_string_to_unicode_or_bytes<pos:position pos:line="13" pos:column="59"/></name><argument_list pos:line="13" pos:column="59">(<argument><expr><literal type="string" pos:line="13" pos:column="60">")"<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></expr_stmt></block></then></if>
	
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">l_interval<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">NULL<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">||<pos:position pos:line="15" pos:column="34"/></operator> <name pos:line="15" pos:column="35">l_values<pos:position pos:line="15" pos:column="43"/></name> <operator pos:line="15" pos:column="44">==<pos:position pos:line="15" pos:column="46"/></operator> <name pos:line="15" pos:column="47">NULL<pos:position pos:line="15" pos:column="51"/></name> <operator pos:line="15" pos:column="52">||<pos:position pos:line="15" pos:column="54"/></operator> <name pos:line="15" pos:column="55">l_meta<pos:position pos:line="15" pos:column="61"/></name> <operator pos:line="15" pos:column="62">==<pos:position pos:line="15" pos:column="64"/></operator> <name pos:line="15" pos:column="65">NULL<pos:position pos:line="15" pos:column="69"/></name> <operator pos:line="15" pos:column="70">||<pos:position pos:line="15" pos:column="72"/></operator> <name pos:line="15" pos:column="73">l_closing<pos:position pos:line="15" pos:column="82"/></name> <operator pos:line="15" pos:column="83">==<pos:position pos:line="15" pos:column="85"/></operator> <name pos:line="15" pos:column="86">NULL<pos:position pos:line="15" pos:column="90"/></name></expr>)<pos:position pos:line="15" pos:column="91"/></condition><then pos:line="15" pos:column="91">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">NULL<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return></block></then></if>
	
	<expr_stmt><expr><name pos:line="18" pos:column="9">ret<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">cpy_common_repr<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">s<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">self<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">interval<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">!=<pos:position pos:line="19" pos:column="30"/></operator> <literal type="number" pos:line="19" pos:column="31">0<pos:position pos:line="19" pos:column="32"/></literal></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33"> <block pos:line="19" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">CPY_STRCAT<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><operator pos:line="20" pos:column="28">&amp;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="29">ret<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">l_interval<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">tmp<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">PyInt_FromLong<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name><name pos:line="21" pos:column="38">self<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="44">interval<pos:position pos:line="21" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">CPY_SUBSTITUTE<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">PyObject_Repr<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">tmp<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">tmp<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">CPY_STRCAT_AND_DEL<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><operator pos:line="23" pos:column="36">&amp;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="37">ret<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">tmp<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">self<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">values<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">&amp;&amp;<pos:position pos:line="25" pos:column="36"/></operator> <operator pos:line="25" pos:column="29">(<pos:position pos:line="25" pos:column="30"/></operator><operator pos:line="25" pos:column="30">!<pos:position pos:line="25" pos:column="31"/></operator><call><name pos:line="25" pos:column="31">PyList_Check<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">(<argument><expr><name><name pos:line="25" pos:column="44">self<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">values<pos:position pos:line="25" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call> <operator pos:line="25" pos:column="58">||<pos:position pos:line="25" pos:column="60"/></operator> <call><name pos:line="25" pos:column="61">PySequence_Length<pos:position pos:line="25" pos:column="78"/></name><argument_list pos:line="25" pos:column="78">(<argument><expr><name><name pos:line="25" pos:column="79">self<pos:position pos:line="25" pos:column="83"/></name><operator pos:line="25" pos:column="83">-&gt;<pos:position pos:line="25" pos:column="88"/></operator><name pos:line="25" pos:column="85">values<pos:position pos:line="25" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="92"/></argument_list></call> <operator pos:line="25" pos:column="93">&gt;<pos:position pos:line="25" pos:column="97"/></operator> <literal type="number" pos:line="25" pos:column="95">0<pos:position pos:line="25" pos:column="96"/></literal><operator pos:line="25" pos:column="96">)<pos:position pos:line="25" pos:column="97"/></operator></expr>)<pos:position pos:line="25" pos:column="98"/></condition><then pos:line="25" pos:column="98"> <block pos:line="25" pos:column="99">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">CPY_STRCAT<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><operator pos:line="26" pos:column="28">&amp;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="29">ret<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">l_values<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">tmp<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">PyObject_Repr<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name><name pos:line="27" pos:column="37">self<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">values<pos:position pos:line="27" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">CPY_STRCAT_AND_DEL<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><operator pos:line="28" pos:column="36">&amp;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="37">ret<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">tmp<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">self<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">meta<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">&amp;&amp;<pos:position pos:line="30" pos:column="34"/></operator> <operator pos:line="30" pos:column="27">(<pos:position pos:line="30" pos:column="28"/></operator><operator pos:line="30" pos:column="28">!<pos:position pos:line="30" pos:column="29"/></operator><call><name pos:line="30" pos:column="29">PyDict_Check<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name><name pos:line="30" pos:column="42">self<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">-&gt;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="48">meta<pos:position pos:line="30" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call> <operator pos:line="30" pos:column="54">||<pos:position pos:line="30" pos:column="56"/></operator> <call><name pos:line="30" pos:column="57">PyDict_Size<pos:position pos:line="30" pos:column="68"/></name><argument_list pos:line="30" pos:column="68">(<argument><expr><name><name pos:line="30" pos:column="69">self<pos:position pos:line="30" pos:column="73"/></name><operator pos:line="30" pos:column="73">-&gt;<pos:position pos:line="30" pos:column="78"/></operator><name pos:line="30" pos:column="75">meta<pos:position pos:line="30" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="80"/></argument_list></call> <operator pos:line="30" pos:column="81">&gt;<pos:position pos:line="30" pos:column="85"/></operator> <literal type="number" pos:line="30" pos:column="83">0<pos:position pos:line="30" pos:column="84"/></literal><operator pos:line="30" pos:column="84">)<pos:position pos:line="30" pos:column="85"/></operator></expr>)<pos:position pos:line="30" pos:column="86"/></condition><then pos:line="30" pos:column="86"> <block pos:line="30" pos:column="87">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">CPY_STRCAT<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><operator pos:line="31" pos:column="28">&amp;<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="29">ret<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">l_meta<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">tmp<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">PyObject_Repr<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name><name pos:line="32" pos:column="37">self<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">meta<pos:position pos:line="32" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">CPY_STRCAT_AND_DEL<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><operator pos:line="33" pos:column="36">&amp;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="37">ret<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">tmp<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">CPY_STRCAT<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><operator pos:line="35" pos:column="20">&amp;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="21">ret<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="26">l_closing<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">ret<pos:position pos:line="36" pos:column="19"/></name></expr>;<pos:position pos:line="36" pos:column="20"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
