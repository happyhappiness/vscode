<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_171_collectd-4.2.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apc_query_server<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">host<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">port<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">apc_detail_s<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">apcups_detail<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type>     <name pos:line="4" pos:column="17">n<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type>    <name><name pos:line="5" pos:column="17">recvline<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">1024<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name>   <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">tokptr<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name>   <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">toksaveptr<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name>   <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">key<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">double<pos:position pos:line="9" pos:column="15"/></name></type>  <name pos:line="9" pos:column="17">value<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><specifier pos:line="11" pos:column="9">static<pos:position pos:line="11" pos:column="15"/></specifier> <name pos:line="11" pos:column="16">complain_t<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">compl<pos:position pos:line="11" pos:column="32"/></operator></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">APCMAIN<pos:position pos:line="13" pos:column="12"/></name></expr></cpp:if>
<cpp:define pos:line="14" pos:column="1"># <cpp:directive pos:line="14" pos:column="3">define<pos:position pos:line="14" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="10">PRINT_VALUE<pos:position pos:line="14" pos:column="21"/></name><parameter_list pos:line="14" pos:column="21">(<parameter><type><name pos:line="14" pos:column="22">name<pos:position pos:line="14" pos:column="26"/></name></type></parameter>, <parameter><type><name pos:line="14" pos:column="28">val<pos:position pos:line="14" pos:column="31"/></name></type></parameter>)<pos:position pos:line="14" pos:column="32"/></parameter_list></cpp:macro> <cpp:value pos:line="14" pos:column="33">printf("  Found property: name = %s; value = %f;\n", name, val)<pos:position pos:line="14" pos:column="96"/></cpp:value></cpp:define>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="16" pos:column="1"># <cpp:directive pos:line="16" pos:column="3">define<pos:position pos:line="16" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="16" pos:column="10">PRINT_VALUE<pos:position pos:line="16" pos:column="21"/></name><parameter_list pos:line="16" pos:column="21">(<parameter><type><name pos:line="16" pos:column="22">name<pos:position pos:line="16" pos:column="26"/></name></type></parameter>, <parameter><type><name pos:line="16" pos:column="28">val<pos:position pos:line="16" pos:column="31"/></name></type></parameter>)<pos:position pos:line="16" pos:column="32"/></parameter_list></cpp:macro></cpp:define> <comment type="block" pos:line="16" pos:column="33">/**/</comment>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">global_sockfd<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">&lt;<pos:position pos:line="19" pos:column="31"/></operator> <literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
	<block pos:line="20" pos:column="9">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">global_sockfd<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <call><name pos:line="21" pos:column="38">net_open<pos:position pos:line="21" pos:column="46"/></name> <argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">host<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">NULL<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="60">port<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call><operator pos:line="21" pos:column="65">)<pos:position pos:line="21" pos:column="66"/></operator> <operator pos:line="21" pos:column="67">&lt;<pos:position pos:line="21" pos:column="71"/></operator> <literal type="number" pos:line="21" pos:column="69">0<pos:position pos:line="21" pos:column="70"/></literal></expr>)<pos:position pos:line="21" pos:column="71"/></condition><then pos:line="21" pos:column="71">
		<block pos:line="22" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">plugin_complain<pos:position pos:line="23" pos:column="40"/></name> <argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">LOG_ERR<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="51">&amp;<pos:position pos:line="23" pos:column="56"/></operator><operator pos:line="23" pos:column="52">compl<pos:position pos:line="23" pos:column="57"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="59">"apcups plugin: "<pos:position pos:line="23" pos:column="76"/></literal>
					<literal type="string" pos:line="24" pos:column="41">"Connecting to the apcupsd failed."<pos:position pos:line="24" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
			<return pos:line="25" pos:column="25">return <expr><operator pos:line="25" pos:column="32">(<pos:position pos:line="25" pos:column="33"/></operator><operator pos:line="25" pos:column="33">-<pos:position pos:line="25" pos:column="34"/></operator><literal type="number" pos:line="25" pos:column="34">1<pos:position pos:line="25" pos:column="35"/></literal><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator></expr>;<pos:position pos:line="25" pos:column="37"/></return>
		}<pos:position pos:line="26" pos:column="18"/></block></then>
		<else pos:line="27" pos:column="17">else
		<block pos:line="28" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">plugin_relief<pos:position pos:line="29" pos:column="38"/></name> <argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">LOG_NOTICE<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="52">&amp;<pos:position pos:line="29" pos:column="57"/></operator><operator pos:line="29" pos:column="53">compl<pos:position pos:line="29" pos:column="58"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="60">"apcups plugin: "<pos:position pos:line="29" pos:column="77"/></literal>
					<literal type="string" pos:line="30" pos:column="41">"Connection re-established to the apcupsd."<pos:position pos:line="30" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="86"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></else></if>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">net_send<pos:position pos:line="34" pos:column="21"/></name> <argument_list pos:line="34" pos:column="22">(<argument><expr><operator pos:line="34" pos:column="23">&amp;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="24">global_sockfd<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="39">"status"<pos:position pos:line="34" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="49">6<pos:position pos:line="34" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call> <operator pos:line="34" pos:column="52">&lt;<pos:position pos:line="34" pos:column="56"/></operator> <literal type="number" pos:line="34" pos:column="54">0<pos:position pos:line="34" pos:column="55"/></literal></expr>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56">
	<block pos:line="35" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">ERROR<pos:position pos:line="36" pos:column="22"/></name> <argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="string" pos:line="36" pos:column="24">"apcups plugin: Writing to the socket failed."<pos:position pos:line="36" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="72"/></expr_stmt>
		<return pos:line="37" pos:column="17">return <expr><operator pos:line="37" pos:column="24">(<pos:position pos:line="37" pos:column="25"/></operator><operator pos:line="37" pos:column="25">-<pos:position pos:line="37" pos:column="26"/></operator><literal type="number" pos:line="37" pos:column="26">1<pos:position pos:line="37" pos:column="27"/></literal><operator pos:line="37" pos:column="27">)<pos:position pos:line="37" pos:column="28"/></operator></expr>;<pos:position pos:line="37" pos:column="29"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<while pos:line="40" pos:column="9">while <condition pos:line="40" pos:column="15">(<expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">n<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <call><name pos:line="40" pos:column="21">net_recv<pos:position pos:line="40" pos:column="29"/></name> <argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">&amp;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="32">global_sockfd<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="47">recvline<pos:position pos:line="40" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="57">sizeof <argument_list pos:line="40" pos:column="64">(<argument><expr><name pos:line="40" pos:column="65">recvline<pos:position pos:line="40" pos:column="73"/></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></sizeof> <operator pos:line="40" pos:column="75">-<pos:position pos:line="40" pos:column="76"/></operator> <literal type="number" pos:line="40" pos:column="77">1<pos:position pos:line="40" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="79"/></argument_list></call><operator pos:line="40" pos:column="79">)<pos:position pos:line="40" pos:column="80"/></operator> <operator pos:line="40" pos:column="81">&gt;<pos:position pos:line="40" pos:column="85"/></operator> <literal type="number" pos:line="40" pos:column="83">0<pos:position pos:line="40" pos:column="84"/></literal></expr>)<pos:position pos:line="40" pos:column="85"/></condition>
	<block pos:line="41" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">assert<pos:position pos:line="42" pos:column="23"/></name> <argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">n<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">&lt;<pos:position pos:line="42" pos:column="31"/></operator> <sizeof pos:line="42" pos:column="29">sizeof <argument_list pos:line="42" pos:column="36">(<argument><expr><name pos:line="42" pos:column="37">recvline<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">recvline<pos:position pos:line="43" pos:column="25"/></name><index pos:line="43" pos:column="25">[<expr><name pos:line="43" pos:column="26">n<pos:position pos:line="43" pos:column="27"/></name></expr>]<pos:position pos:line="43" pos:column="28"/></index></name> <operator pos:line="43" pos:column="29">=<pos:position pos:line="43" pos:column="30"/></operator> <literal type="char" pos:line="43" pos:column="31">'\0'<pos:position pos:line="43" pos:column="35"/></literal></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">APCMAIN<pos:position pos:line="44" pos:column="12"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">printf<pos:position pos:line="45" pos:column="23"/></name> <argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"net_recv = `%s';\n"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">recvline<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="46" pos:column="8">/* if APCMAIN */</comment>

		<expr_stmt><expr><name pos:line="48" pos:column="17">toksaveptr<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">=<pos:position pos:line="48" pos:column="29"/></operator> <name pos:line="48" pos:column="30">NULL<pos:position pos:line="48" pos:column="34"/></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">tokptr<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <call><name pos:line="49" pos:column="26">strtok_r<pos:position pos:line="49" pos:column="34"/></name> <argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">recvline<pos:position pos:line="49" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="46">" :\t"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="54">&amp;<pos:position pos:line="49" pos:column="59"/></operator><name pos:line="49" pos:column="55">toksaveptr<pos:position pos:line="49" pos:column="65"/></name></expr></argument>)<pos:position pos:line="49" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="67"/></expr_stmt>
		<while pos:line="50" pos:column="17">while <condition pos:line="50" pos:column="23">(<expr><name pos:line="50" pos:column="24">tokptr<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">!=<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">NULL<pos:position pos:line="50" pos:column="38"/></name></expr>)<pos:position pos:line="50" pos:column="39"/></condition>
		<block pos:line="51" pos:column="17">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">key<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">=<pos:position pos:line="52" pos:column="30"/></operator> <name pos:line="52" pos:column="31">tokptr<pos:position pos:line="52" pos:column="37"/></name></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><operator pos:line="53" pos:column="29">(<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">tokptr<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">=<pos:position pos:line="53" pos:column="38"/></operator> <call><name pos:line="53" pos:column="39">strtok_r<pos:position pos:line="53" pos:column="47"/></name> <argument_list pos:line="53" pos:column="48">(<argument><expr><name pos:line="53" pos:column="49">NULL<pos:position pos:line="53" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="55">" :\t"<pos:position pos:line="53" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="63">&amp;<pos:position pos:line="53" pos:column="68"/></operator><name pos:line="53" pos:column="64">toksaveptr<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call><operator pos:line="53" pos:column="75">)<pos:position pos:line="53" pos:column="76"/></operator> <operator pos:line="53" pos:column="77">==<pos:position pos:line="53" pos:column="79"/></operator> <name pos:line="53" pos:column="80">NULL<pos:position pos:line="53" pos:column="84"/></name></expr>)<pos:position pos:line="53" pos:column="85"/></condition><then pos:line="53" pos:column="85">
				<block type="pseudo"><continue pos:line="54" pos:column="33">continue;<pos:position pos:line="54" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="55" pos:column="25">value<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">=<pos:position pos:line="55" pos:column="32"/></operator> <call><name pos:line="55" pos:column="33">atof<pos:position pos:line="55" pos:column="37"/></name> <argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">tokptr<pos:position pos:line="55" pos:column="45"/></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="57" pos:column="25">PRINT_VALUE<pos:position pos:line="57" pos:column="36"/></name> <argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">key<pos:position pos:line="57" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="43">value<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>

			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><call><name pos:line="59" pos:column="29">strcmp<pos:position pos:line="59" pos:column="35"/></name> <argument_list pos:line="59" pos:column="36">(<argument><expr><literal type="string" pos:line="59" pos:column="37">"LINEV"<pos:position pos:line="59" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="46">key<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call> <operator pos:line="59" pos:column="51">==<pos:position pos:line="59" pos:column="53"/></operator> <literal type="number" pos:line="59" pos:column="54">0<pos:position pos:line="59" pos:column="55"/></literal></expr>)<pos:position pos:line="59" pos:column="56"/></condition><then pos:line="59" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="33">apcups_detail<pos:position pos:line="60" pos:column="46"/></name><operator pos:line="60" pos:column="46">-&gt;<pos:position pos:line="60" pos:column="51"/></operator><name pos:line="60" pos:column="48">linev<pos:position pos:line="60" pos:column="53"/></name></name> <operator pos:line="60" pos:column="54">=<pos:position pos:line="60" pos:column="55"/></operator> <name pos:line="60" pos:column="56">value<pos:position pos:line="60" pos:column="61"/></name></expr>;<pos:position pos:line="60" pos:column="62"/></expr_stmt></block></then>
			<elseif pos:line="61" pos:column="25">else <if pos:line="61" pos:column="30">if <condition pos:line="61" pos:column="33">(<expr><call><name pos:line="61" pos:column="34">strcmp<pos:position pos:line="61" pos:column="40"/></name> <argument_list pos:line="61" pos:column="41">(<argument><expr><literal type="string" pos:line="61" pos:column="42">"BATTV"<pos:position pos:line="61" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">key<pos:position pos:line="61" pos:column="54"/></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call> <operator pos:line="61" pos:column="56">==<pos:position pos:line="61" pos:column="58"/></operator> <literal type="number" pos:line="61" pos:column="59">0<pos:position pos:line="61" pos:column="60"/></literal></expr>)<pos:position pos:line="61" pos:column="61"/></condition><then pos:line="61" pos:column="61"> 
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="33">apcups_detail<pos:position pos:line="62" pos:column="46"/></name><operator pos:line="62" pos:column="46">-&gt;<pos:position pos:line="62" pos:column="51"/></operator><name pos:line="62" pos:column="48">battv<pos:position pos:line="62" pos:column="53"/></name></name> <operator pos:line="62" pos:column="54">=<pos:position pos:line="62" pos:column="55"/></operator> <name pos:line="62" pos:column="56">value<pos:position pos:line="62" pos:column="61"/></name></expr>;<pos:position pos:line="62" pos:column="62"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="63" pos:column="25">else <if pos:line="63" pos:column="30">if <condition pos:line="63" pos:column="33">(<expr><call><name pos:line="63" pos:column="34">strcmp<pos:position pos:line="63" pos:column="40"/></name> <argument_list pos:line="63" pos:column="41">(<argument><expr><literal type="string" pos:line="63" pos:column="42">"ITEMP"<pos:position pos:line="63" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">key<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call> <operator pos:line="63" pos:column="56">==<pos:position pos:line="63" pos:column="58"/></operator> <literal type="number" pos:line="63" pos:column="59">0<pos:position pos:line="63" pos:column="60"/></literal></expr>)<pos:position pos:line="63" pos:column="61"/></condition><then pos:line="63" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="64" pos:column="33">apcups_detail<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">-&gt;<pos:position pos:line="64" pos:column="51"/></operator><name pos:line="64" pos:column="48">itemp<pos:position pos:line="64" pos:column="53"/></name></name> <operator pos:line="64" pos:column="54">=<pos:position pos:line="64" pos:column="55"/></operator> <name pos:line="64" pos:column="56">value<pos:position pos:line="64" pos:column="61"/></name></expr>;<pos:position pos:line="64" pos:column="62"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="65" pos:column="25">else <if pos:line="65" pos:column="30">if <condition pos:line="65" pos:column="33">(<expr><call><name pos:line="65" pos:column="34">strcmp<pos:position pos:line="65" pos:column="40"/></name> <argument_list pos:line="65" pos:column="41">(<argument><expr><literal type="string" pos:line="65" pos:column="42">"LOADPCT"<pos:position pos:line="65" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">key<pos:position pos:line="65" pos:column="56"/></name></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call> <operator pos:line="65" pos:column="58">==<pos:position pos:line="65" pos:column="60"/></operator> <literal type="number" pos:line="65" pos:column="61">0<pos:position pos:line="65" pos:column="62"/></literal></expr>)<pos:position pos:line="65" pos:column="63"/></condition><then pos:line="65" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="33">apcups_detail<pos:position pos:line="66" pos:column="46"/></name><operator pos:line="66" pos:column="46">-&gt;<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="48">loadpct<pos:position pos:line="66" pos:column="55"/></name></name> <operator pos:line="66" pos:column="56">=<pos:position pos:line="66" pos:column="57"/></operator> <name pos:line="66" pos:column="58">value<pos:position pos:line="66" pos:column="63"/></name></expr>;<pos:position pos:line="66" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="67" pos:column="25">else <if pos:line="67" pos:column="30">if <condition pos:line="67" pos:column="33">(<expr><call><name pos:line="67" pos:column="34">strcmp<pos:position pos:line="67" pos:column="40"/></name> <argument_list pos:line="67" pos:column="41">(<argument><expr><literal type="string" pos:line="67" pos:column="42">"BCHARGE"<pos:position pos:line="67" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="53">key<pos:position pos:line="67" pos:column="56"/></name></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call> <operator pos:line="67" pos:column="58">==<pos:position pos:line="67" pos:column="60"/></operator> <literal type="number" pos:line="67" pos:column="61">0<pos:position pos:line="67" pos:column="62"/></literal></expr>)<pos:position pos:line="67" pos:column="63"/></condition><then pos:line="67" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="68" pos:column="33">apcups_detail<pos:position pos:line="68" pos:column="46"/></name><operator pos:line="68" pos:column="46">-&gt;<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="48">bcharge<pos:position pos:line="68" pos:column="55"/></name></name> <operator pos:line="68" pos:column="56">=<pos:position pos:line="68" pos:column="57"/></operator> <name pos:line="68" pos:column="58">value<pos:position pos:line="68" pos:column="63"/></name></expr>;<pos:position pos:line="68" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="69" pos:column="25">else <if pos:line="69" pos:column="30">if <condition pos:line="69" pos:column="33">(<expr><call><name pos:line="69" pos:column="34">strcmp<pos:position pos:line="69" pos:column="40"/></name> <argument_list pos:line="69" pos:column="41">(<argument><expr><literal type="string" pos:line="69" pos:column="42">"OUTPUTV"<pos:position pos:line="69" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="53">key<pos:position pos:line="69" pos:column="56"/></name></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call> <operator pos:line="69" pos:column="58">==<pos:position pos:line="69" pos:column="60"/></operator> <literal type="number" pos:line="69" pos:column="61">0<pos:position pos:line="69" pos:column="62"/></literal></expr>)<pos:position pos:line="69" pos:column="63"/></condition><then pos:line="69" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="33">apcups_detail<pos:position pos:line="70" pos:column="46"/></name><operator pos:line="70" pos:column="46">-&gt;<pos:position pos:line="70" pos:column="51"/></operator><name pos:line="70" pos:column="48">outputv<pos:position pos:line="70" pos:column="55"/></name></name> <operator pos:line="70" pos:column="56">=<pos:position pos:line="70" pos:column="57"/></operator> <name pos:line="70" pos:column="58">value<pos:position pos:line="70" pos:column="63"/></name></expr>;<pos:position pos:line="70" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="71" pos:column="25">else <if pos:line="71" pos:column="30">if <condition pos:line="71" pos:column="33">(<expr><call><name pos:line="71" pos:column="34">strcmp<pos:position pos:line="71" pos:column="40"/></name> <argument_list pos:line="71" pos:column="41">(<argument><expr><literal type="string" pos:line="71" pos:column="42">"LINEFREQ"<pos:position pos:line="71" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="54">key<pos:position pos:line="71" pos:column="57"/></name></expr></argument>)<pos:position pos:line="71" pos:column="58"/></argument_list></call> <operator pos:line="71" pos:column="59">==<pos:position pos:line="71" pos:column="61"/></operator> <literal type="number" pos:line="71" pos:column="62">0<pos:position pos:line="71" pos:column="63"/></literal></expr>)<pos:position pos:line="71" pos:column="64"/></condition><then pos:line="71" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="72" pos:column="33">apcups_detail<pos:position pos:line="72" pos:column="46"/></name><operator pos:line="72" pos:column="46">-&gt;<pos:position pos:line="72" pos:column="51"/></operator><name pos:line="72" pos:column="48">linefreq<pos:position pos:line="72" pos:column="56"/></name></name> <operator pos:line="72" pos:column="57">=<pos:position pos:line="72" pos:column="58"/></operator> <name pos:line="72" pos:column="59">value<pos:position pos:line="72" pos:column="64"/></name></expr>;<pos:position pos:line="72" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="73" pos:column="25">else <if pos:line="73" pos:column="30">if <condition pos:line="73" pos:column="33">(<expr><call><name pos:line="73" pos:column="34">strcmp<pos:position pos:line="73" pos:column="40"/></name> <argument_list pos:line="73" pos:column="41">(<argument><expr><literal type="string" pos:line="73" pos:column="42">"TIMELEFT"<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="54">key<pos:position pos:line="73" pos:column="57"/></name></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></call> <operator pos:line="73" pos:column="59">==<pos:position pos:line="73" pos:column="61"/></operator> <literal type="number" pos:line="73" pos:column="62">0<pos:position pos:line="73" pos:column="63"/></literal></expr>)<pos:position pos:line="73" pos:column="64"/></condition><then pos:line="73" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="33">apcups_detail<pos:position pos:line="74" pos:column="46"/></name><operator pos:line="74" pos:column="46">-&gt;<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="48">timeleft<pos:position pos:line="74" pos:column="56"/></name></name> <operator pos:line="74" pos:column="57">=<pos:position pos:line="74" pos:column="58"/></operator> <name pos:line="74" pos:column="59">value<pos:position pos:line="74" pos:column="64"/></name></expr>;<pos:position pos:line="74" pos:column="65"/></expr_stmt></block></then></if></elseif></if>

			<expr_stmt><expr><name pos:line="76" pos:column="25">tokptr<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">=<pos:position pos:line="76" pos:column="33"/></operator> <call><name pos:line="76" pos:column="34">strtok_r<pos:position pos:line="76" pos:column="42"/></name> <argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">NULL<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="50">":"<pos:position pos:line="76" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="76" pos:column="55">&amp;<pos:position pos:line="76" pos:column="60"/></operator><name pos:line="76" pos:column="56">toksaveptr<pos:position pos:line="76" pos:column="66"/></name></expr></argument>)<pos:position pos:line="76" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="77" pos:column="18"/></block></while> <comment type="block" pos:line="77" pos:column="19">/* while (tokptr != NULL) */</comment>
	}<pos:position pos:line="78" pos:column="10"/></block></while>
	
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">n<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">&lt;<pos:position pos:line="80" pos:column="19"/></operator> <literal type="number" pos:line="80" pos:column="17">0<pos:position pos:line="80" pos:column="18"/></literal></expr>)<pos:position pos:line="80" pos:column="19"/></condition><then pos:line="80" pos:column="19">
	<block pos:line="81" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">WARNING<pos:position pos:line="82" pos:column="24"/></name> <argument_list pos:line="82" pos:column="25">(<argument><expr><literal type="string" pos:line="82" pos:column="26">"apcups plugin: Error reading from socket"<pos:position pos:line="82" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="70"/></expr_stmt>
		<return pos:line="83" pos:column="17">return <expr><operator pos:line="83" pos:column="24">(<pos:position pos:line="83" pos:column="25"/></operator><operator pos:line="83" pos:column="25">-<pos:position pos:line="83" pos:column="26"/></operator><literal type="number" pos:line="83" pos:column="26">1<pos:position pos:line="83" pos:column="27"/></literal><operator pos:line="83" pos:column="27">)<pos:position pos:line="83" pos:column="28"/></operator></expr>;<pos:position pos:line="83" pos:column="29"/></return>
	}<pos:position pos:line="84" pos:column="10"/></block></then></if>

	<return pos:line="86" pos:column="9">return <expr><operator pos:line="86" pos:column="16">(<pos:position pos:line="86" pos:column="17"/></operator><literal type="number" pos:line="86" pos:column="17">0<pos:position pos:line="86" pos:column="18"/></literal><operator pos:line="86" pos:column="18">)<pos:position pos:line="86" pos:column="19"/></operator></expr>;<pos:position pos:line="86" pos:column="20"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
