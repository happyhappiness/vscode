<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_568_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_init<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">plugin_register_shutdown<pos:position pos:line="3" pos:column="33"/></name> <argument_list pos:line="3" pos:column="34">(<argument><expr><literal type="string" pos:line="3" pos:column="35">"network"<pos:position pos:line="3" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="46">network_shutdown<pos:position pos:line="3" pos:column="62"/></name></expr></argument>)<pos:position pos:line="3" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">send_buffer_ptr<pos:position pos:line="5" pos:column="24"/></name>  <operator pos:line="5" pos:column="26">=<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="28">send_buffer<pos:position pos:line="5" pos:column="39"/></name></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">send_buffer_fill<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">=<pos:position pos:line="6" pos:column="27"/></operator> <literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="18">send_buffer_vl<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="34">'\0'<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="40">sizeof <argument_list pos:line="7" pos:column="47">(<argument><expr><name pos:line="7" pos:column="48">send_buffer_vl<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">memset<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">send_buffer_type<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="35">'\0'<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="41">sizeof <argument_list pos:line="8" pos:column="48">(<argument><expr><name pos:line="8" pos:column="49">send_buffer_type<pos:position pos:line="8" pos:column="65"/></name></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">cache_tree<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <call><name pos:line="10" pos:column="22">avl_create<pos:position pos:line="10" pos:column="32"/></name> <argument_list pos:line="10" pos:column="33">(<argument><expr><operator pos:line="10" pos:column="34">(<pos:position pos:line="10" pos:column="35"/></operator><call><call><name pos:line="10" pos:column="35">int<pos:position pos:line="10" pos:column="38"/></name> <argument_list pos:line="10" pos:column="39">(<argument><expr><operator pos:line="10" pos:column="40">*<pos:position pos:line="10" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call> <argument_list pos:line="10" pos:column="43">(<argument><expr><specifier pos:line="10" pos:column="44">const<pos:position pos:line="10" pos:column="49"/></specifier> <name pos:line="10" pos:column="50">void<pos:position pos:line="10" pos:column="54"/></name> <operator pos:line="10" pos:column="55">*<pos:position pos:line="10" pos:column="56"/></operator></expr></argument>, <argument><expr><specifier pos:line="10" pos:column="58">const<pos:position pos:line="10" pos:column="63"/></specifier> <name pos:line="10" pos:column="64">void<pos:position pos:line="10" pos:column="68"/></name> <operator pos:line="10" pos:column="69">*<pos:position pos:line="10" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call><operator pos:line="10" pos:column="71">)<pos:position pos:line="10" pos:column="72"/></operator> <name pos:line="10" pos:column="73">strcmp<pos:position pos:line="10" pos:column="79"/></name></expr></argument>)<pos:position pos:line="10" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="81"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">cache_flush_last<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <call><name pos:line="11" pos:column="28">time<pos:position pos:line="11" pos:column="32"/></name> <argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* setup socket(s) and so on */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">sending_sockets<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">!=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">NULL<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">plugin_register_write<pos:position pos:line="15" pos:column="38"/></name> <argument_list pos:line="15" pos:column="39">(<argument><expr><literal type="string" pos:line="15" pos:column="40">"network"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">network_write<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">listen_sockets_num<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">!=<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">0<pos:position pos:line="17" pos:column="37"/></literal><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator> <operator pos:line="17" pos:column="39">&amp;&amp;<pos:position pos:line="17" pos:column="49"/></operator> <operator pos:line="17" pos:column="42">(<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">listen_thread<pos:position pos:line="17" pos:column="56"/></name> <operator pos:line="17" pos:column="57">==<pos:position pos:line="17" pos:column="59"/></operator> <literal type="number" pos:line="17" pos:column="60">0<pos:position pos:line="17" pos:column="61"/></literal><operator pos:line="17" pos:column="61">)<pos:position pos:line="17" pos:column="62"/></operator></expr>)<pos:position pos:line="17" pos:column="63"/></condition><then pos:line="17" pos:column="63">
	<block pos:line="18" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">status<pos:position pos:line="19" pos:column="27"/></name></decl>;<pos:position pos:line="19" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="21" pos:column="17">status<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">pthread_create<pos:position pos:line="21" pos:column="40"/></name> <argument_list pos:line="21" pos:column="41">(<argument><expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="43">listen_thread<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">NULL<pos:position pos:line="21" pos:column="62"/></name></expr></argument> <comment type="block" pos:line="21" pos:column="63">/* no attributes */</comment>,
				<argument><expr><name pos:line="22" pos:column="33">receive_thread<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">NULL<pos:position pos:line="22" pos:column="53"/></name></expr></argument> <comment type="block" pos:line="22" pos:column="54">/* no argument */</comment>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">status<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">!=<pos:position pos:line="24" pos:column="30"/></operator> <literal type="number" pos:line="24" pos:column="31">0<pos:position pos:line="24" pos:column="32"/></literal></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33">
		<block pos:line="25" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">char<pos:position pos:line="26" pos:column="29"/></name></type> <name><name pos:line="26" pos:column="30">errbuf<pos:position pos:line="26" pos:column="36"/></name><index pos:line="26" pos:column="36">[<expr><literal type="number" pos:line="26" pos:column="37">1024<pos:position pos:line="26" pos:column="41"/></literal></expr>]<pos:position pos:line="26" pos:column="42"/></index></name></decl>;<pos:position pos:line="26" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">ERROR<pos:position pos:line="27" pos:column="30"/></name> <argument_list pos:line="27" pos:column="31">(<argument><expr><literal type="string" pos:line="27" pos:column="32">"network: pthread_create failed: %s"<pos:position pos:line="27" pos:column="68"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="28" pos:column="41">sstrerror<pos:position pos:line="28" pos:column="50"/></name> <argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">errno<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="59">errbuf<pos:position pos:line="28" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="29" pos:column="49">sizeof <argument_list pos:line="29" pos:column="56">(<argument><expr><name pos:line="29" pos:column="57">errbuf<pos:position pos:line="29" pos:column="63"/></name></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal><operator pos:line="32" pos:column="18">)<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
