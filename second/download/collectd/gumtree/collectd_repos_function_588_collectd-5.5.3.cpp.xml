<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_588_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">agg_instance_t<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">agg_instance_create<pos:position pos:line="1" pos:column="43"/></name> <parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">data_set_t<pos:position pos:line="1" pos:column="55"/></name> <specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">ds<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="67">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">value_list_t<pos:position pos:line="2" pos:column="17"/></name> <specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">vl<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">aggregation_t<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">agg<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">agg_instance_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">inst<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">DEBUG<pos:position pos:line="6" pos:column="8"/></name> <argument_list pos:line="6" pos:column="9">(<argument><expr><literal type="string" pos:line="6" pos:column="10">"aggregation plugin: Creating new instance."<pos:position pos:line="6" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">inst<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">malloc<pos:position pos:line="8" pos:column="16"/></name> <argument_list pos:line="8" pos:column="17">(<argument><expr><sizeof pos:line="8" pos:column="18">sizeof <argument_list pos:line="8" pos:column="25">(<argument><expr><operator pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">inst<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">inst<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">NULL<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20">
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ERROR<pos:position pos:line="11" pos:column="10"/></name> <argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"aggregation plugin: malloc() failed."<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">NULL<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">)<pos:position pos:line="12" pos:column="18"/></operator></expr>;<pos:position pos:line="12" pos:column="19"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memset<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">inst<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="20">sizeof <argument_list pos:line="14" pos:column="27">(<argument><expr><operator pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">inst<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">pthread_mutex_init<pos:position pos:line="15" pos:column="21"/></name> <argument_list pos:line="15" pos:column="22">(<argument><expr><operator pos:line="15" pos:column="23">&amp;<pos:position pos:line="15" pos:column="28"/></operator><name><name pos:line="15" pos:column="24">inst<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">lock<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>, <comment type="block" pos:line="15" pos:column="36">/* attr = */</comment> <argument><expr><name pos:line="15" pos:column="49">NULL<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="17" pos:column="3">inst<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">ds_type<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name><name pos:line="17" pos:column="19">ds<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">ds<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal></expr>]<pos:position pos:line="17" pos:column="28"/></index></name><operator pos:line="17" pos:column="28">.<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">type<pos:position pos:line="17" pos:column="33"/></name></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">agg_instance_create_name<pos:position pos:line="19" pos:column="27"/></name> <argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">inst<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">vl<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">agg<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="21" pos:column="3">inst<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">min<pos:position pos:line="21" pos:column="12"/></name></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">NAN<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">inst<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">-&gt;<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="9">max<pos:position pos:line="22" pos:column="12"/></name></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">NAN<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define<pos:position pos:line="24" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">INIT_STATE<pos:position pos:line="24" pos:column="19"/></name><parameter_list pos:line="24" pos:column="19">(<parameter><type><name pos:line="24" pos:column="20">field<pos:position pos:line="24" pos:column="25"/></name></type></parameter>)<pos:position pos:line="24" pos:column="26"/></parameter_list></cpp:macro> <cpp:value pos:line="24" pos:column="27">do { \
  inst-&gt;state_ ## field = NULL; \
  if (agg-&gt;calc_ ## field) { \
    inst-&gt;state_ ## field = malloc (sizeof (*inst-&gt;state_ ## field)); \
    if (inst-&gt;state_ ## field == NULL) { \
      agg_instance_destroy (inst); \
      free (inst); \
      ERROR ("aggregation plugin: malloc() failed."); \
      return (NULL); \
    } \
    memset (inst-&gt;state_ ## field, 0, sizeof (*inst-&gt;state_ ## field)); \
  } \
} while (0)<pos:position pos:line="36" pos:column="12"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="38" pos:column="3">INIT_STATE<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">num<pos:position pos:line="38" pos:column="18"/></name></expr></argument>)<pos:position pos:line="38" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">INIT_STATE<pos:position pos:line="39" pos:column="13"/></name> <argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">sum<pos:position pos:line="39" pos:column="18"/></name></expr></argument>)<pos:position pos:line="39" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">INIT_STATE<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">average<pos:position pos:line="40" pos:column="22"/></name></expr></argument>)<pos:position pos:line="40" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">INIT_STATE<pos:position pos:line="41" pos:column="13"/></name> <argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">min<pos:position pos:line="41" pos:column="18"/></name></expr></argument>)<pos:position pos:line="41" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">INIT_STATE<pos:position pos:line="42" pos:column="13"/></name> <argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">max<pos:position pos:line="42" pos:column="18"/></name></expr></argument>)<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">INIT_STATE<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">stddev<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>

<cpp:undef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">undef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">INIT_STATE<pos:position pos:line="45" pos:column="18"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">pthread_mutex_lock<pos:position pos:line="47" pos:column="21"/></name> <argument_list pos:line="47" pos:column="22">(<argument><expr><operator pos:line="47" pos:column="23">&amp;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="24">agg_instance_list_lock<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">inst<pos:position pos:line="48" pos:column="7"/></name><operator pos:line="48" pos:column="7">-&gt;<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="9">next<pos:position pos:line="48" pos:column="13"/></name></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">agg_instance_list_head<pos:position pos:line="48" pos:column="38"/></name></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name pos:line="49" pos:column="3">agg_instance_list_head<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <name pos:line="49" pos:column="28">inst<pos:position pos:line="49" pos:column="32"/></name></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">pthread_mutex_unlock<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><operator pos:line="50" pos:column="25">&amp;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="26">agg_instance_list_lock<pos:position pos:line="50" pos:column="48"/></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>

  <return pos:line="52" pos:column="3">return <expr><operator pos:line="52" pos:column="10">(<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">inst<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
