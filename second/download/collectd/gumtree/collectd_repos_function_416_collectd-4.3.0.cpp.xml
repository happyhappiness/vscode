<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_416_collectd-4.3.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">init_pi<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">dTHXa<pos:position pos:line="3" pos:column="14"/></name> <argument_list pos:line="3" pos:column="15">(<argument><expr><name pos:line="3" pos:column="16">NULL<pos:position pos:line="3" pos:column="20"/></name></expr></argument>)<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="22"/></expr_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">NULL<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">!=<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">perl_threads<pos:position pos:line="5" pos:column="33"/></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">log_info<pos:position pos:line="8" pos:column="17"/></name> <argument_list pos:line="8" pos:column="18">(<argument><expr><literal type="string" pos:line="8" pos:column="19">"Initializing Perl interpreter..."<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">COLLECT_DEBUG<pos:position pos:line="9" pos:column="18"/></name></expr></cpp:if>
	<block pos:line="10" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">i<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

		<for pos:line="13" pos:column="17">for <control pos:line="13" pos:column="21">(<init><expr><name pos:line="13" pos:column="22">i<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></init> <condition><expr><name pos:line="13" pos:column="29">i<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">&lt;<pos:position pos:line="13" pos:column="35"/></operator> <name pos:line="13" pos:column="33">argc<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></condition> <incr><expr><operator pos:line="13" pos:column="39">++<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">i<pos:position pos:line="13" pos:column="42"/></name></expr></incr>)<pos:position pos:line="13" pos:column="43"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">log_debug<pos:position pos:line="14" pos:column="34"/></name> <argument_list pos:line="14" pos:column="35">(<argument><expr><literal type="string" pos:line="14" pos:column="36">"argv[%i] = \"%s\""<pos:position pos:line="14" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="57">i<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="60">argv<pos:position pos:line="14" pos:column="64"/></name><index pos:line="14" pos:column="64">[<expr><name pos:line="14" pos:column="65">i<pos:position pos:line="14" pos:column="66"/></name></expr>]<pos:position pos:line="14" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt></block></for>
	}<pos:position pos:line="15" pos:column="10"/></block>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="16" pos:column="8">/* COLLECT_DEBUG */</comment>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal> <operator pos:line="18" pos:column="15">!=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">pthread_key_create<pos:position pos:line="18" pos:column="36"/></name> <argument_list pos:line="18" pos:column="37">(<argument><expr><operator pos:line="18" pos:column="38">&amp;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="39">perl_thr_key<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">c_ithread_destructor<pos:position pos:line="18" pos:column="73"/></name></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="75"/></condition><then pos:line="18" pos:column="75"> <block pos:line="18" pos:column="76">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">log_err<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="string" pos:line="19" pos:column="26">"init_pi: pthread_key_create failed"<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt>

		<comment type="block" pos:line="21" pos:column="17">/* this must not happen - cowardly giving up if it does */</comment>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">exit<pos:position pos:line="22" pos:column="21"/></name> <argument_list pos:line="22" pos:column="22">(<argument><expr><literal type="number" pos:line="22" pos:column="23">1<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">PERL_SYS_INIT3<pos:position pos:line="25" pos:column="23"/></name> <argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">argc<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="33">argv<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="39">&amp;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="40">environ<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">perl_threads<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <operator pos:line="27" pos:column="24">(<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">c_ithread_list_t<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">*<pos:position pos:line="27" pos:column="43"/></operator><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator><call><name pos:line="27" pos:column="44">smalloc<pos:position pos:line="27" pos:column="51"/></name> <argument_list pos:line="27" pos:column="52">(<argument><expr><sizeof pos:line="27" pos:column="53">sizeof <argument_list pos:line="27" pos:column="60">(<argument><expr><name pos:line="27" pos:column="61">c_ithread_list_t<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="80"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">memset<pos:position pos:line="28" pos:column="15"/></name> <argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">perl_threads<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="31">0<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="34">sizeof <argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">c_ithread_list_t<pos:position pos:line="28" pos:column="58"/></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">pthread_mutex_init<pos:position pos:line="30" pos:column="27"/></name> <argument_list pos:line="30" pos:column="28">(<argument><expr><operator pos:line="30" pos:column="29">&amp;<pos:position pos:line="30" pos:column="34"/></operator><name><name pos:line="30" pos:column="30">perl_threads<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">mutex<pos:position pos:line="30" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">NULL<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt>
	<comment type="block" pos:line="31" pos:column="9">/* locking the mutex should not be necessary at this point
	 * but let's just do it for the sake of completeness */</comment>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">pthread_mutex_lock<pos:position pos:line="33" pos:column="27"/></name> <argument_list pos:line="33" pos:column="28">(<argument><expr><operator pos:line="33" pos:column="29">&amp;<pos:position pos:line="33" pos:column="34"/></operator><name><name pos:line="33" pos:column="30">perl_threads<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">mutex<pos:position pos:line="33" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="35" pos:column="9">perl_threads<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">head<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">=<pos:position pos:line="35" pos:column="29"/></operator> <call><name pos:line="35" pos:column="30">c_ithread_create<pos:position pos:line="35" pos:column="46"/></name> <argument_list pos:line="35" pos:column="47">(<argument><expr><name pos:line="35" pos:column="48">NULL<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">perl_threads<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">-&gt;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="23">tail<pos:position pos:line="36" pos:column="27"/></name></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <name><name pos:line="36" pos:column="30">perl_threads<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">-&gt;<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="44">head<pos:position pos:line="36" pos:column="48"/></name></name></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">NULL<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">==<pos:position pos:line="38" pos:column="20"/></operator> <operator pos:line="38" pos:column="21">(<pos:position pos:line="38" pos:column="22"/></operator><name><name pos:line="38" pos:column="22">perl_threads<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">-&gt;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="36">head<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">-&gt;<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="42">interp<pos:position pos:line="38" pos:column="48"/></name></name> <operator pos:line="38" pos:column="49">=<pos:position pos:line="38" pos:column="50"/></operator> <call><name pos:line="38" pos:column="51">perl_alloc<pos:position pos:line="38" pos:column="61"/></name> <argument_list pos:line="38" pos:column="62">()<pos:position pos:line="38" pos:column="64"/></argument_list></call><operator pos:line="38" pos:column="64">)<pos:position pos:line="38" pos:column="65"/></operator></expr>)<pos:position pos:line="38" pos:column="66"/></condition><then pos:line="38" pos:column="66"> <block pos:line="38" pos:column="67">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">log_err<pos:position pos:line="39" pos:column="24"/></name> <argument_list pos:line="39" pos:column="25">(<argument><expr><literal type="string" pos:line="39" pos:column="26">"init_pi: Not enough memory."<pos:position pos:line="39" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">exit<pos:position pos:line="40" pos:column="21"/></name> <argument_list pos:line="40" pos:column="22">(<argument><expr><literal type="number" pos:line="40" pos:column="23">3<pos:position pos:line="40" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="43" pos:column="9">aTHX<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <name><name pos:line="43" pos:column="16">perl_threads<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">-&gt;<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="30">head<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">-&gt;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="36">interp<pos:position pos:line="43" pos:column="42"/></name></name></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">pthread_mutex_unlock<pos:position pos:line="44" pos:column="29"/></name> <argument_list pos:line="44" pos:column="30">(<argument><expr><operator pos:line="44" pos:column="31">&amp;<pos:position pos:line="44" pos:column="36"/></operator><name><name pos:line="44" pos:column="32">perl_threads<pos:position pos:line="44" pos:column="44"/></name><operator pos:line="44" pos:column="44">-&gt;<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="46">mutex<pos:position pos:line="44" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">perl_construct<pos:position pos:line="46" pos:column="23"/></name> <argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">aTHX<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><name pos:line="48" pos:column="9">PL_exit_flags<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">|=<pos:position pos:line="48" pos:column="25"/></operator> <name pos:line="48" pos:column="26">PERL_EXIT_DESTRUCT_END<pos:position pos:line="48" pos:column="48"/></name></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><literal type="number" pos:line="50" pos:column="13">0<pos:position pos:line="50" pos:column="14"/></literal> <operator pos:line="50" pos:column="15">!=<pos:position pos:line="50" pos:column="17"/></operator> <macro><name pos:line="50" pos:column="18">perl_parse<pos:position pos:line="50" pos:column="28"/></name> <argument_list pos:line="50" pos:column="29">(<argument pos:line="50" pos:column="30">aTHX_ xs_init<pos:position pos:line="50" pos:column="43"/></argument>, <argument pos:line="50" pos:column="45">argc<pos:position pos:line="50" pos:column="49"/></argument>, <argument pos:line="50" pos:column="51">argv<pos:position pos:line="50" pos:column="55"/></argument>, <argument pos:line="50" pos:column="57">NULL<pos:position pos:line="50" pos:column="61"/></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></macro></expr>)<pos:position pos:line="50" pos:column="63"/></condition><then pos:line="50" pos:column="63"> <block pos:line="50" pos:column="64">{
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">log_err<pos:position pos:line="51" pos:column="24"/></name> <argument_list pos:line="51" pos:column="25">(<argument><expr><literal type="string" pos:line="51" pos:column="26">"init_pi: Unable to bootstrap Collectd."<pos:position pos:line="51" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">exit<pos:position pos:line="52" pos:column="21"/></name> <argument_list pos:line="52" pos:column="22">(<argument><expr><literal type="number" pos:line="52" pos:column="23">1<pos:position pos:line="52" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="55" pos:column="9">/* Set $0 to "collectd" because perl_parse() has to set it to "-e". */</comment>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">sv_setpv<pos:position pos:line="56" pos:column="17"/></name> <argument_list pos:line="56" pos:column="18">(<argument><expr><call><name pos:line="56" pos:column="19">get_sv<pos:position pos:line="56" pos:column="25"/></name> <argument_list pos:line="56" pos:column="26">(<argument><expr><literal type="string" pos:line="56" pos:column="27">"0"<pos:position pos:line="56" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="32">0<pos:position pos:line="56" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="36">"collectd"<pos:position pos:line="56" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">perl_run<pos:position pos:line="58" pos:column="17"/></name> <argument_list pos:line="58" pos:column="18">(<argument><expr><name pos:line="58" pos:column="19">aTHX<pos:position pos:line="58" pos:column="23"/></name></expr></argument>)<pos:position pos:line="58" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">plugin_register_log<pos:position pos:line="60" pos:column="28"/></name> <argument_list pos:line="60" pos:column="29">(<argument><expr><literal type="string" pos:line="60" pos:column="30">"perl"<pos:position pos:line="60" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="38">perl_log<pos:position pos:line="60" pos:column="46"/></name></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">plugin_register_notification<pos:position pos:line="61" pos:column="37"/></name> <argument_list pos:line="61" pos:column="38">(<argument><expr><literal type="string" pos:line="61" pos:column="39">"perl"<pos:position pos:line="61" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="47">perl_notify<pos:position pos:line="61" pos:column="58"/></name></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">plugin_register_init<pos:position pos:line="62" pos:column="29"/></name> <argument_list pos:line="62" pos:column="30">(<argument><expr><literal type="string" pos:line="62" pos:column="31">"perl"<pos:position pos:line="62" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">perl_init<pos:position pos:line="62" pos:column="48"/></name></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="64" pos:column="9">plugin_register_read<pos:position pos:line="64" pos:column="29"/></name> <argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"perl"<pos:position pos:line="64" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">perl_read<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">plugin_register_write<pos:position pos:line="66" pos:column="30"/></name> <argument_list pos:line="66" pos:column="31">(<argument><expr><literal type="string" pos:line="66" pos:column="32">"perl"<pos:position pos:line="66" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="40">perl_write<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">plugin_register_shutdown<pos:position pos:line="67" pos:column="33"/></name> <argument_list pos:line="67" pos:column="34">(<argument><expr><literal type="string" pos:line="67" pos:column="35">"perl"<pos:position pos:line="67" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">perl_shutdown<pos:position pos:line="67" pos:column="56"/></name></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>
	<return pos:line="68" pos:column="9">return <expr><literal type="number" pos:line="68" pos:column="16">0<pos:position pos:line="68" pos:column="17"/></literal></expr>;<pos:position pos:line="68" pos:column="18"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
