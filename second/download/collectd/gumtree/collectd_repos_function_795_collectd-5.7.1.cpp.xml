<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_795_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_ppp<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">u_char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">pkt<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">len<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <block pos:line="1" pos:column="51">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">buf<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><name pos:line="2" pos:column="12">PCAP_SNAPLEN<pos:position pos:line="2" pos:column="24"/></name></expr>]<pos:position pos:line="2" pos:column="25"/></index></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">unsigned<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">short<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">us<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">short<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">proto<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">len<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">&lt;<pos:position pos:line="5" pos:column="15"/></operator> <literal type="number" pos:line="5" pos:column="13">2<pos:position pos:line="5" pos:column="14"/></literal></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></return></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">*<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">pkt<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">==<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">PPP_ADDRESS_VAL<pos:position pos:line="7" pos:column="30"/></name> <operator pos:line="7" pos:column="31">&amp;&amp;<pos:position pos:line="7" pos:column="41"/></operator> <operator pos:line="7" pos:column="34">*<pos:position pos:line="7" pos:column="35"/></operator><operator pos:line="7" pos:column="35">(<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">pkt<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">+<pos:position pos:line="7" pos:column="41"/></operator> <literal type="number" pos:line="7" pos:column="42">1<pos:position pos:line="7" pos:column="43"/></literal><operator pos:line="7" pos:column="43">)<pos:position pos:line="7" pos:column="44"/></operator> <operator pos:line="7" pos:column="45">==<pos:position pos:line="7" pos:column="47"/></operator> <name pos:line="7" pos:column="48">PPP_CONTROL_VAL<pos:position pos:line="7" pos:column="63"/></name></expr>)<pos:position pos:line="7" pos:column="64"/></condition><then pos:line="7" pos:column="64"> <block pos:line="7" pos:column="65">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">pkt<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">+=<pos:position pos:line="8" pos:column="11"/></operator> <literal type="number" pos:line="8" pos:column="12">2<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt> <comment type="block" pos:line="8" pos:column="15">/* ACFC not used */</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">len<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">-=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="number" pos:line="9" pos:column="12">2<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">len<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&lt;<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="13">2<pos:position pos:line="11" pos:column="14"/></literal></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><literal type="number" pos:line="12" pos:column="12">0<pos:position pos:line="12" pos:column="13"/></literal></expr>;<pos:position pos:line="12" pos:column="14"/></return></block></then></if>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">*<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">pkt<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">%<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">2<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">proto<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <operator pos:line="14" pos:column="13">*<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">pkt<pos:position pos:line="14" pos:column="17"/></name></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt> <comment type="block" pos:line="14" pos:column="19">/* PFC is used */</comment>
    <expr_stmt><expr><name pos:line="15" pos:column="5">pkt<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">++<pos:position pos:line="15" pos:column="10"/></operator></expr>;<pos:position pos:line="15" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">len<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">--<pos:position pos:line="16" pos:column="10"/></operator></expr>;<pos:position pos:line="16" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then> <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">memcpy<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><operator pos:line="18" pos:column="12">&amp;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="13">us<pos:position pos:line="18" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="17">pkt<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="22">sizeof<argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">us<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">proto<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">ntohs<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">us<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">pkt<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">+=<pos:position pos:line="20" pos:column="11"/></operator> <literal type="number" pos:line="20" pos:column="12">2<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">len<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">-=<pos:position pos:line="21" pos:column="11"/></operator> <literal type="number" pos:line="21" pos:column="12">2<pos:position pos:line="21" pos:column="13"/></literal></expr>;<pos:position pos:line="21" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></else></if>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">ETHERTYPE_IP<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">!=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">proto<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">&amp;&amp;<pos:position pos:line="23" pos:column="39"/></operator> <name pos:line="23" pos:column="32">PPP_IP<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">!=<pos:position pos:line="23" pos:column="41"/></operator> <name pos:line="23" pos:column="42">proto<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">memcpy<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><name pos:line="25" pos:column="10">buf<pos:position pos:line="25" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="15">pkt<pos:position pos:line="25" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">len<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
  <return pos:line="26" pos:column="3">return <expr><call><name pos:line="26" pos:column="10">handle_ip<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><operator pos:line="26" pos:column="20">(<pos:position pos:line="26" pos:column="21"/></operator>struct <name pos:line="26" pos:column="28">ip<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></operator><operator pos:line="26" pos:column="32">)<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">buf<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">len<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
