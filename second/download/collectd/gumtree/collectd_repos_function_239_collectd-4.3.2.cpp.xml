<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_239_collectd-4.3.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">csnmp_init<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">host_definition_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">host<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">host_head<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="20">NULL<pos:position pos:line="6" pos:column="24"/></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">NOTICE<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="string" pos:line="8" pos:column="13">"snmp plugin: No host has been defined."<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><operator pos:line="9" pos:column="13">-<pos:position pos:line="9" pos:column="14"/></operator><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal><operator pos:line="9" pos:column="15">)<pos:position pos:line="9" pos:column="16"/></operator></expr>;<pos:position pos:line="9" pos:column="17"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">call_snmp_init_once<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">()<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">threads_num<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
  <for pos:line="15" pos:column="3">for <control pos:line="15" pos:column="7">(<init><expr><name pos:line="15" pos:column="8">host<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">host_head<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></init> <condition><expr><name pos:line="15" pos:column="26">host<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">!=<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="34">NULL<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></condition> <incr><expr><name pos:line="15" pos:column="40">host<pos:position pos:line="15" pos:column="44"/></name> <operator pos:line="15" pos:column="45">=<pos:position pos:line="15" pos:column="46"/></operator> <name><name pos:line="15" pos:column="47">host<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">-&gt;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="53">next<pos:position pos:line="15" pos:column="57"/></name></name></expr></incr>)<pos:position pos:line="15" pos:column="58"/></control>
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">threads_num<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">++<pos:position pos:line="17" pos:column="18"/></operator></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* We need to initialize `interval' here, because `interval_g' isn't
     * initialized during `configure'. */</comment>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">host<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">next_update<pos:position pos:line="20" pos:column="22"/></name></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">time<pos:position pos:line="20" pos:column="29"/></name> <argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">NULL<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">host<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">interval<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">==<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29">
    <block pos:line="22" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="23" pos:column="7">host<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">interval<pos:position pos:line="23" pos:column="21"/></name></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">interval_g<pos:position pos:line="23" pos:column="34"/></name></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <elseif pos:line="25" pos:column="5">else <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><name><name pos:line="25" pos:column="14">host<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">interval<pos:position pos:line="25" pos:column="28"/></name></name> <operator pos:line="25" pos:column="29">&lt;<pos:position pos:line="25" pos:column="33"/></operator> <name pos:line="25" pos:column="31">interval_g<pos:position pos:line="25" pos:column="41"/></name></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42">
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">host<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">interval<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">interval_g<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">WARNING<pos:position pos:line="28" pos:column="14"/></name> <argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="string" pos:line="28" pos:column="16">"snmp plugin: Data for host `%s' will be collected every %i seconds."<pos:position pos:line="28" pos:column="85"/></literal></expr></argument>,
	  <argument><expr><name><name pos:line="29" pos:column="11">host<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">name<pos:position pos:line="29" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="23">host<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">interval<pos:position pos:line="29" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">csnmp_host_open_session<pos:position pos:line="32" pos:column="28"/></name> <argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">host<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></for> <comment type="block" pos:line="33" pos:column="5">/* for (host) */</comment>

  <comment type="block" pos:line="35" pos:column="3">/* Now start the reading threads */</comment>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">threads_num<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&gt;<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="21">3<pos:position pos:line="36" pos:column="22"/></literal></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23">
  <block pos:line="37" pos:column="3">{
    <expr_stmt><expr><name pos:line="38" pos:column="5">threads_num<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <literal type="number" pos:line="38" pos:column="19">3<pos:position pos:line="38" pos:column="20"/></literal> <operator pos:line="38" pos:column="21">+<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">(<pos:position pos:line="38" pos:column="24"/></operator><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">threads_num<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">-<pos:position pos:line="38" pos:column="38"/></operator> <literal type="number" pos:line="38" pos:column="39">3<pos:position pos:line="38" pos:column="40"/></literal><operator pos:line="38" pos:column="40">)<pos:position pos:line="38" pos:column="41"/></operator> <operator pos:line="38" pos:column="42">/<pos:position pos:line="38" pos:column="43"/></operator> <literal type="number" pos:line="38" pos:column="44">10<pos:position pos:line="38" pos:column="46"/></literal><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">threads_num<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">&gt;<pos:position pos:line="39" pos:column="25"/></operator> <literal type="number" pos:line="39" pos:column="23">10<pos:position pos:line="39" pos:column="25"/></literal></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="7">threads_num<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">10<pos:position pos:line="40" pos:column="23"/></literal></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="43" pos:column="3">threads<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">pthread_t<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">*<pos:position pos:line="43" pos:column="25"/></operator><operator pos:line="43" pos:column="25">)<pos:position pos:line="43" pos:column="26"/></operator> <call><name pos:line="43" pos:column="27">malloc<pos:position pos:line="43" pos:column="33"/></name> <argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">threads_num<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">*<pos:position pos:line="43" pos:column="48"/></operator> <sizeof pos:line="43" pos:column="49">sizeof <argument_list pos:line="43" pos:column="56">(<argument><expr><name pos:line="43" pos:column="57">pthread_t<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">threads<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">==<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">NULL<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23">
  <block pos:line="45" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ERROR<pos:position pos:line="46" pos:column="10"/></name> <argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">"snmp plugin: malloc failed."<pos:position pos:line="46" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">(<pos:position pos:line="47" pos:column="13"/></operator><operator pos:line="47" pos:column="13">-<pos:position pos:line="47" pos:column="14"/></operator><literal type="number" pos:line="47" pos:column="14">1<pos:position pos:line="47" pos:column="15"/></literal><operator pos:line="47" pos:column="15">)<pos:position pos:line="47" pos:column="16"/></operator></expr>;<pos:position pos:line="47" pos:column="17"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">memset<pos:position pos:line="49" pos:column="9"/></name> <argument_list pos:line="49" pos:column="10">(<argument><expr><name pos:line="49" pos:column="11">threads<pos:position pos:line="49" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="20">'\0'<pos:position pos:line="49" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="26">threads_num<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">*<pos:position pos:line="49" pos:column="39"/></operator> <sizeof pos:line="49" pos:column="40">sizeof <argument_list pos:line="49" pos:column="47">(<argument><expr><name pos:line="49" pos:column="48">pthread_t<pos:position pos:line="49" pos:column="57"/></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="60"/></expr_stmt>

  <for pos:line="51" pos:column="3">for <control pos:line="51" pos:column="7">(<init><expr><name pos:line="51" pos:column="8">i<pos:position pos:line="51" pos:column="9"/></name> <operator pos:line="51" pos:column="10">=<pos:position pos:line="51" pos:column="11"/></operator> <literal type="number" pos:line="51" pos:column="12">0<pos:position pos:line="51" pos:column="13"/></literal></expr>;<pos:position pos:line="51" pos:column="14"/></init> <condition><expr><name pos:line="51" pos:column="15">i<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">&lt;<pos:position pos:line="51" pos:column="21"/></operator> <name pos:line="51" pos:column="19">threads_num<pos:position pos:line="51" pos:column="30"/></name></expr>;<pos:position pos:line="51" pos:column="31"/></condition> <incr><expr><name pos:line="51" pos:column="32">i<pos:position pos:line="51" pos:column="33"/></name><operator pos:line="51" pos:column="33">++<pos:position pos:line="51" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="36"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="7">pthread_create<pos:position pos:line="52" pos:column="21"/></name> <argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">threads<pos:position pos:line="52" pos:column="30"/></name> <operator pos:line="52" pos:column="31">+<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="33">i<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">NULL<pos:position pos:line="52" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="42">csnmp_read_thread<pos:position pos:line="52" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="61">(<pos:position pos:line="52" pos:column="62"/></operator><name pos:line="52" pos:column="62">void<pos:position pos:line="52" pos:column="66"/></name> <operator pos:line="52" pos:column="67">*<pos:position pos:line="52" pos:column="68"/></operator><operator pos:line="52" pos:column="68">)<pos:position pos:line="52" pos:column="69"/></operator> <literal type="number" pos:line="52" pos:column="70">0<pos:position pos:line="52" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="73"/></expr_stmt></block></for>

  <return pos:line="54" pos:column="3">return <expr><operator pos:line="54" pos:column="10">(<pos:position pos:line="54" pos:column="11"/></operator><literal type="number" pos:line="54" pos:column="11">0<pos:position pos:line="54" pos:column="12"/></literal><operator pos:line="54" pos:column="12">)<pos:position pos:line="54" pos:column="13"/></operator></expr>;<pos:position pos:line="54" pos:column="14"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
