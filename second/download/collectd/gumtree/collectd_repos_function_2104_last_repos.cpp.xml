<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2104_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mb_read_data<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">mb_host_t<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">host<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">mb_slave_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">slave<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="61">/* {{{ */</comment>
                        <parameter><decl><type><name pos:line="2" pos:column="25">mb_data_t<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">data<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list> <block pos:line="2" pos:column="42">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">uint16_t<pos:position pos:line="3" pos:column="11"/></name></type> <name><name pos:line="3" pos:column="12">values<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">2<pos:position pos:line="3" pos:column="20"/></literal></expr>]<pos:position pos:line="3" pos:column="21"/></index></name> <init pos:line="3" pos:column="22">= <expr><block pos:line="3" pos:column="24">{<expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr>}<pos:position pos:line="3" pos:column="27"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">values_num<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">data_set_t<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ds<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">host<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">)<pos:position pos:line="8" pos:column="21"/></operator> <operator pos:line="8" pos:column="22">||<pos:position pos:line="8" pos:column="24"/></operator> <operator pos:line="8" pos:column="25">(<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">slave<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">==<pos:position pos:line="8" pos:column="34"/></operator> <name pos:line="8" pos:column="35">NULL<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">)<pos:position pos:line="8" pos:column="40"/></operator> <operator pos:line="8" pos:column="41">||<pos:position pos:line="8" pos:column="43"/></operator> <operator pos:line="8" pos:column="44">(<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">data<pos:position pos:line="8" pos:column="49"/></name> <operator pos:line="8" pos:column="50">==<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">NULL<pos:position pos:line="8" pos:column="57"/></name><operator pos:line="8" pos:column="57">)<pos:position pos:line="8" pos:column="58"/></operator></expr>)<pos:position pos:line="8" pos:column="59"/></condition><then pos:line="8" pos:column="59">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">EINVAL<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">ds<pos:position pos:line="11" pos:column="5"/></name> <operator pos:line="11" pos:column="6">=<pos:position pos:line="11" pos:column="7"/></operator> <call><name pos:line="11" pos:column="8">plugin_get_ds<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name><name pos:line="11" pos:column="22">data<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">type<pos:position pos:line="11" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">ds<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">==<pos:position pos:line="12" pos:column="12"/></operator> <name pos:line="12" pos:column="13">NULL<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18"> <block pos:line="12" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"Modbus plugin: Type \"%s\" is not defined."<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="57">data<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">-&gt;<pos:position pos:line="13" pos:column="66"/></operator><name pos:line="13" pos:column="63">type<pos:position pos:line="13" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">ds<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">ds_num<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">!=<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="21">1<pos:position pos:line="17" pos:column="22"/></literal></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23"> <block pos:line="17" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"Modbus plugin: The type \"%s\" has %zu data sources. "<pos:position pos:line="18" pos:column="66"/></literal>
          <literal type="string" pos:line="19" pos:column="11">"I can only handle data sets with only one data source."<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="20" pos:column="11">data<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">type<pos:position pos:line="20" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="23">ds<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">ds_num<pos:position pos:line="20" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><operator pos:line="24" pos:column="7">(<pos:position pos:line="24" pos:column="8"/></operator><name><name pos:line="24" pos:column="8">ds<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">ds<pos:position pos:line="24" pos:column="14"/></name><index pos:line="24" pos:column="14">[<expr><literal type="number" pos:line="24" pos:column="15">0<pos:position pos:line="24" pos:column="16"/></literal></expr>]<pos:position pos:line="24" pos:column="17"/></index></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">type<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">!=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">DS_TYPE_GAUGE<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">)<pos:position pos:line="24" pos:column="40"/></operator> <operator pos:line="24" pos:column="41">&amp;&amp;<pos:position pos:line="24" pos:column="51"/></operator>
      <operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator><name><name pos:line="25" pos:column="8">data<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">register_type<pos:position pos:line="25" pos:column="27"/></name></name> <operator pos:line="25" pos:column="28">!=<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">REG_TYPE_INT32<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">)<pos:position pos:line="25" pos:column="46"/></operator> <operator pos:line="25" pos:column="47">&amp;&amp;<pos:position pos:line="25" pos:column="57"/></operator>
      <operator pos:line="26" pos:column="7">(<pos:position pos:line="26" pos:column="8"/></operator><name><name pos:line="26" pos:column="8">data<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">register_type<pos:position pos:line="26" pos:column="27"/></name></name> <operator pos:line="26" pos:column="28">!=<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">REG_TYPE_UINT32<pos:position pos:line="26" pos:column="46"/></name><operator pos:line="26" pos:column="46">)<pos:position pos:line="26" pos:column="47"/></operator></expr>)<pos:position pos:line="26" pos:column="48"/></condition><then pos:line="26" pos:column="48"> <block pos:line="26" pos:column="49">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">NOTICE<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(
        <argument><expr><literal type="string" pos:line="28" pos:column="9">"Modbus plugin: The data source of type \"%s\" is %s, not gauge. "<pos:position pos:line="28" pos:column="75"/></literal>
        <literal type="string" pos:line="29" pos:column="9">"This will most likely result in problems, because the register type "<pos:position pos:line="29" pos:column="79"/></literal>
        <literal type="string" pos:line="30" pos:column="9">"is not UINT32."<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="31" pos:column="9">data<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">-&gt;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="15">type<pos:position pos:line="31" pos:column="19"/></name></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="21">DS_TYPE_TO_STRING<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name><name pos:line="31" pos:column="39">ds<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">ds<pos:position pos:line="31" pos:column="45"/></name><index pos:line="31" pos:column="45">[<expr><literal type="number" pos:line="31" pos:column="46">0<pos:position pos:line="31" pos:column="47"/></literal></expr>]<pos:position pos:line="31" pos:column="48"/></index></name><operator pos:line="31" pos:column="48">.<pos:position pos:line="31" pos:column="49"/></operator><name pos:line="31" pos:column="49">type<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">(<pos:position pos:line="34" pos:column="8"/></operator><name><name pos:line="34" pos:column="8">data<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">register_type<pos:position pos:line="34" pos:column="27"/></name></name> <operator pos:line="34" pos:column="28">==<pos:position pos:line="34" pos:column="30"/></operator> <name pos:line="34" pos:column="31">REG_TYPE_INT32<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">)<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="47">||<pos:position pos:line="34" pos:column="49"/></operator>
      <operator pos:line="35" pos:column="7">(<pos:position pos:line="35" pos:column="8"/></operator><name><name pos:line="35" pos:column="8">data<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">register_type<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">==<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">REG_TYPE_UINT32<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">)<pos:position pos:line="35" pos:column="47"/></operator> <operator pos:line="35" pos:column="48">||<pos:position pos:line="35" pos:column="50"/></operator>
      <operator pos:line="36" pos:column="7">(<pos:position pos:line="36" pos:column="8"/></operator><name><name pos:line="36" pos:column="8">data<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">register_type<pos:position pos:line="36" pos:column="27"/></name></name> <operator pos:line="36" pos:column="28">==<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="31">REG_TYPE_FLOAT<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">)<pos:position pos:line="36" pos:column="46"/></operator></expr>)<pos:position pos:line="36" pos:column="47"/></condition><then pos:line="36" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="5">values_num<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">2<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt></block></then>
  <else pos:line="38" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="5">values_num<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">1<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt></block></else></if>

  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name><name pos:line="41" pos:column="7">host<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">connection<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">==<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">NULL<pos:position pos:line="41" pos:column="31"/></name></expr>)<pos:position pos:line="41" pos:column="32"/></condition><then pos:line="41" pos:column="32"> <block pos:line="41" pos:column="33">{
    <expr_stmt><expr><name pos:line="42" pos:column="5">status<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <name pos:line="42" pos:column="14">EBADF<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then> <elseif pos:line="43" pos:column="5">else <if pos:line="43" pos:column="10">if <condition pos:line="43" pos:column="13">(<expr><name><name pos:line="43" pos:column="14">host<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">conntype<pos:position pos:line="43" pos:column="28"/></name></name> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="32">MBCONN_TCP<pos:position pos:line="43" pos:column="42"/></name></expr>)<pos:position pos:line="43" pos:column="43"/></condition><then pos:line="43" pos:column="43"> <block pos:line="43" pos:column="44">{
    <comment type="block" pos:line="44" pos:column="5">/* getpeername() is used only to determine if the socket is connected, not
     * because we're really interested in the peer's IP address. */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">getpeername<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><call><name pos:line="46" pos:column="21">modbus_get_socket<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><name><name pos:line="46" pos:column="39">host<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">-&gt;<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="45">connection<pos:position pos:line="46" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr></argument>,
                    <argument><expr><operator pos:line="47" pos:column="21">(<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">void<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">*<pos:position pos:line="47" pos:column="28"/></operator><operator pos:line="47" pos:column="28">)<pos:position pos:line="47" pos:column="29"/></operator><operator pos:line="47" pos:column="29">&amp;<pos:position pos:line="47" pos:column="34"/></operator><operator pos:line="47" pos:column="30">(<pos:position pos:line="47" pos:column="31"/></operator>struct <name pos:line="47" pos:column="38">sockaddr_storage<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">)<pos:position pos:line="47" pos:column="55"/></operator></expr></argument></argument_list></call></expr></condition><then><block pos:line="47" pos:column="55">{<expr_stmt><expr><literal type="number" pos:line="47" pos:column="56">0<pos:position pos:line="47" pos:column="57"/></literal></expr></expr_stmt>}<pos:position pos:line="47" pos:column="58"/></block></then></if><operator pos:line="47" pos:column="58">,<pos:position pos:line="47" pos:column="59"/></operator>
                    <expr_stmt><expr><operator pos:line="48" pos:column="21">&amp;<pos:position pos:line="48" pos:column="26"/></operator><operator pos:line="48" pos:column="22">(<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">socklen_t<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">)<pos:position pos:line="48" pos:column="33"/></operator><block pos:line="48" pos:column="33">{<expr pos:line="48" pos:column="34">sizeof<operator pos:line="48" pos:column="40">(<pos:position pos:line="48" pos:column="41"/></operator>struct <name pos:line="48" pos:column="48">sockaddr_storage<pos:position pos:line="48" pos:column="64"/></name><operator pos:line="48" pos:column="64">)<pos:position pos:line="48" pos:column="65"/></operator></expr>}<pos:position pos:line="48" pos:column="66"/></block></expr></expr_stmt>)<pos:position pos:line="48" pos:column="67"/></block> <expr_stmt><expr><operator pos:line="48" pos:column="68">!=<pos:position pos:line="48" pos:column="70"/></operator> <literal type="number" pos:line="48" pos:column="71">0<pos:position pos:line="48" pos:column="72"/></literal></expr></expr_stmt></then></if></elseif></if>)<pos:position pos:line="48" pos:column="73"/></block>
      <name pos:line="49" pos:column="7">status<pos:position pos:line="49" pos:column="13"/></name> <init pos:line="49" pos:column="14">= <expr><name pos:line="49" pos:column="16">errno<pos:position pos:line="49" pos:column="21"/></name></expr></init>;<pos:position pos:line="49" pos:column="22"/></function></unit>
