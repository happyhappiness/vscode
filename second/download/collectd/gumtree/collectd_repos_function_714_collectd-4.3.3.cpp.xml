<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_714_collectd-4.3.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">plugin_read_thread<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">args<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">llentry_t<pos:position pos:line="3" pos:column="18"/></name>   <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">le<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">read_func_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">rf<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>          <name pos:line="5" pos:column="22">status<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type>          <name pos:line="6" pos:column="22">done<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">pthread_mutex_lock<pos:position pos:line="8" pos:column="27"/></name> <argument_list pos:line="8" pos:column="28">(<argument><expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="30">read_lock<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>

	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">read_loop<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">!=<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr>)<pos:position pos:line="10" pos:column="31"/></condition>
	<block pos:line="11" pos:column="9">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">le<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">llist_head<pos:position pos:line="12" pos:column="32"/></name> <argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">list_read<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">done<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

		<while pos:line="15" pos:column="17">while <condition pos:line="15" pos:column="23">(<expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">read_loop<pos:position pos:line="15" pos:column="34"/></name> <operator pos:line="15" pos:column="35">!=<pos:position pos:line="15" pos:column="37"/></operator> <literal type="number" pos:line="15" pos:column="38">0<pos:position pos:line="15" pos:column="39"/></literal><operator pos:line="15" pos:column="39">)<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="41">&amp;&amp;<pos:position pos:line="15" pos:column="51"/></operator> <operator pos:line="15" pos:column="44">(<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">le<pos:position pos:line="15" pos:column="47"/></name> <operator pos:line="15" pos:column="48">!=<pos:position pos:line="15" pos:column="50"/></operator> <name pos:line="15" pos:column="51">NULL<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></expr>)<pos:position pos:line="15" pos:column="57"/></condition>
		<block pos:line="16" pos:column="17">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">rf<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">read_func_t<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">*<pos:position pos:line="17" pos:column="44"/></operator><operator pos:line="17" pos:column="44">)<pos:position pos:line="17" pos:column="45"/></operator> <name><name pos:line="17" pos:column="46">le<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">-&gt;<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="50">value<pos:position pos:line="17" pos:column="55"/></name></name></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>

			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name><name pos:line="19" pos:column="29">rf<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">needs_read<pos:position pos:line="19" pos:column="43"/></name></name> <operator pos:line="19" pos:column="44">!=<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="47">TODO<pos:position pos:line="19" pos:column="51"/></name></expr>)<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52">
			<block pos:line="20" pos:column="25">{
				<expr_stmt><expr><name pos:line="21" pos:column="33">le<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <name><name pos:line="21" pos:column="38">le<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">next<pos:position pos:line="21" pos:column="46"/></name></name></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
				<continue pos:line="22" pos:column="33">continue;<pos:position pos:line="22" pos:column="42"/></continue>
			}<pos:position pos:line="23" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="25" pos:column="25">/* We will do this read function */</comment>
			<expr_stmt><expr><name><name pos:line="26" pos:column="25">rf<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">needs_read<pos:position pos:line="26" pos:column="39"/></name></name> <operator pos:line="26" pos:column="40">=<pos:position pos:line="26" pos:column="41"/></operator> <name pos:line="26" pos:column="42">ACTIVE<pos:position pos:line="26" pos:column="48"/></name></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="28" pos:column="25">DEBUG<pos:position pos:line="28" pos:column="30"/></name> <argument_list pos:line="28" pos:column="31">(<argument><expr><literal type="string" pos:line="28" pos:column="32">"[thread #%5lu] plugin: plugin_read_thread: Handling %s"<pos:position pos:line="28" pos:column="88"/></literal></expr></argument>,
					<argument><expr><operator pos:line="29" pos:column="41">(<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="42">unsigned<pos:position pos:line="29" pos:column="50"/></name> <name pos:line="29" pos:column="51">long<pos:position pos:line="29" pos:column="55"/></name> <name pos:line="29" pos:column="56">int<pos:position pos:line="29" pos:column="59"/></name><operator pos:line="29" pos:column="59">)<pos:position pos:line="29" pos:column="60"/></operator> <call><name pos:line="29" pos:column="61">pthread_self<pos:position pos:line="29" pos:column="73"/></name> <argument_list pos:line="29" pos:column="74">()<pos:position pos:line="29" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="78">le<pos:position pos:line="29" pos:column="80"/></name><operator pos:line="29" pos:column="80">-&gt;<pos:position pos:line="29" pos:column="85"/></operator><name pos:line="29" pos:column="82">key<pos:position pos:line="29" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">pthread_mutex_unlock<pos:position pos:line="30" pos:column="45"/></name> <argument_list pos:line="30" pos:column="46">(<argument><expr><operator pos:line="30" pos:column="47">&amp;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="48">read_lock<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>

			<expr_stmt><expr><name pos:line="32" pos:column="25">status<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <call><name><name pos:line="32" pos:column="34">rf<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">-&gt;<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="38">callback<pos:position pos:line="32" pos:column="46"/></name></name> <argument_list pos:line="32" pos:column="47">()<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">done<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">++<pos:position pos:line="33" pos:column="31"/></operator></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>

			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name pos:line="35" pos:column="29">status<pos:position pos:line="35" pos:column="35"/></name> <operator pos:line="35" pos:column="36">!=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="39">0<pos:position pos:line="35" pos:column="40"/></literal></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41">
			<block pos:line="36" pos:column="25">{
				<if pos:line="37" pos:column="33">if <condition pos:line="37" pos:column="36">(<expr><name><name pos:line="37" pos:column="37">rf<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">-&gt;<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="41">wait_time<pos:position pos:line="37" pos:column="50"/></name></name> <operator pos:line="37" pos:column="51">&lt;<pos:position pos:line="37" pos:column="55"/></operator> <name pos:line="37" pos:column="53">interval_g<pos:position pos:line="37" pos:column="63"/></name></expr>)<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="41">rf<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">-&gt;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="45">wait_time<pos:position pos:line="38" pos:column="54"/></name></name> <operator pos:line="38" pos:column="55">=<pos:position pos:line="38" pos:column="56"/></operator> <name pos:line="38" pos:column="57">interval_g<pos:position pos:line="38" pos:column="67"/></name></expr>;<pos:position pos:line="38" pos:column="68"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="39" pos:column="33">rf<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">wait_left<pos:position pos:line="39" pos:column="46"/></name></name> <operator pos:line="39" pos:column="47">=<pos:position pos:line="39" pos:column="48"/></operator> <name><name pos:line="39" pos:column="49">rf<pos:position pos:line="39" pos:column="51"/></name><operator pos:line="39" pos:column="51">-&gt;<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="53">wait_time<pos:position pos:line="39" pos:column="62"/></name></name></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="40" pos:column="33">rf<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">-&gt;<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="37">wait_time<pos:position pos:line="40" pos:column="46"/></name></name> <operator pos:line="40" pos:column="47">=<pos:position pos:line="40" pos:column="48"/></operator> <name><name pos:line="40" pos:column="49">rf<pos:position pos:line="40" pos:column="51"/></name><operator pos:line="40" pos:column="51">-&gt;<pos:position pos:line="40" pos:column="56"/></operator><name pos:line="40" pos:column="53">wait_time<pos:position pos:line="40" pos:column="62"/></name></name> <operator pos:line="40" pos:column="63">*<pos:position pos:line="40" pos:column="64"/></operator> <literal type="number" pos:line="40" pos:column="65">2<pos:position pos:line="40" pos:column="66"/></literal></expr>;<pos:position pos:line="40" pos:column="67"/></expr_stmt>
				<if pos:line="41" pos:column="33">if <condition pos:line="41" pos:column="36">(<expr><name><name pos:line="41" pos:column="37">rf<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">wait_time<pos:position pos:line="41" pos:column="50"/></name></name> <operator pos:line="41" pos:column="51">&gt;<pos:position pos:line="41" pos:column="55"/></operator> <literal type="number" pos:line="41" pos:column="53">86400<pos:position pos:line="41" pos:column="58"/></literal></expr>)<pos:position pos:line="41" pos:column="59"/></condition><then pos:line="41" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="42" pos:column="41">rf<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">-&gt;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="45">wait_time<pos:position pos:line="42" pos:column="54"/></name></name> <operator pos:line="42" pos:column="55">=<pos:position pos:line="42" pos:column="56"/></operator> <literal type="number" pos:line="42" pos:column="57">86400<pos:position pos:line="42" pos:column="62"/></literal></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt></block></then></if>

				<expr_stmt><expr><call><name pos:line="44" pos:column="33">NOTICE<pos:position pos:line="44" pos:column="39"/></name> <argument_list pos:line="44" pos:column="40">(<argument><expr><literal type="string" pos:line="44" pos:column="41">"read-function of plugin `%s' "<pos:position pos:line="44" pos:column="72"/></literal>
						<literal type="string" pos:line="45" pos:column="49">"failed. Will suspend it for %i "<pos:position pos:line="45" pos:column="82"/></literal>
						<literal type="string" pos:line="46" pos:column="49">"seconds."<pos:position pos:line="46" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="61">le<pos:position pos:line="46" pos:column="63"/></name><operator pos:line="46" pos:column="63">-&gt;<pos:position pos:line="46" pos:column="68"/></operator><name pos:line="46" pos:column="65">key<pos:position pos:line="46" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="70">rf<pos:position pos:line="46" pos:column="72"/></name><operator pos:line="46" pos:column="72">-&gt;<pos:position pos:line="46" pos:column="77"/></operator><name pos:line="46" pos:column="74">wait_left<pos:position pos:line="46" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="85"/></expr_stmt>
			}<pos:position pos:line="47" pos:column="26"/></block></then>
			<else pos:line="48" pos:column="25">else
			<block pos:line="49" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="50" pos:column="33">rf<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">wait_left<pos:position pos:line="50" pos:column="46"/></name></name> <operator pos:line="50" pos:column="47">=<pos:position pos:line="50" pos:column="48"/></operator> <literal type="number" pos:line="50" pos:column="49">0<pos:position pos:line="50" pos:column="50"/></literal></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="51" pos:column="33">rf<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">wait_time<pos:position pos:line="51" pos:column="46"/></name></name> <operator pos:line="51" pos:column="47">=<pos:position pos:line="51" pos:column="48"/></operator> <name pos:line="51" pos:column="49">interval_g<pos:position pos:line="51" pos:column="59"/></name></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="52" pos:column="26"/></block></else></if>

			<expr_stmt><expr><call><name pos:line="54" pos:column="25">pthread_mutex_lock<pos:position pos:line="54" pos:column="43"/></name> <argument_list pos:line="54" pos:column="44">(<argument><expr><operator pos:line="54" pos:column="45">&amp;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="46">read_lock<pos:position pos:line="54" pos:column="55"/></name></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt>

			<expr_stmt><expr><name><name pos:line="56" pos:column="25">rf<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">-&gt;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="29">needs_read<pos:position pos:line="56" pos:column="39"/></name></name> <operator pos:line="56" pos:column="40">=<pos:position pos:line="56" pos:column="41"/></operator> <name pos:line="56" pos:column="42">DONE<pos:position pos:line="56" pos:column="46"/></name></expr>;<pos:position pos:line="56" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="57" pos:column="25">le<pos:position pos:line="57" pos:column="27"/></name> <operator pos:line="57" pos:column="28">=<pos:position pos:line="57" pos:column="29"/></operator> <name><name pos:line="57" pos:column="30">le<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">-&gt;<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="34">next<pos:position pos:line="57" pos:column="38"/></name></name></expr>;<pos:position pos:line="57" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="58" pos:column="18"/></block></while> <comment type="block" pos:line="58" pos:column="19">/* while (le != NULL) */</comment>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">(<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">read_loop<pos:position pos:line="60" pos:column="31"/></name> <operator pos:line="60" pos:column="32">!=<pos:position pos:line="60" pos:column="34"/></operator> <literal type="number" pos:line="60" pos:column="35">0<pos:position pos:line="60" pos:column="36"/></literal><operator pos:line="60" pos:column="36">)<pos:position pos:line="60" pos:column="37"/></operator> <operator pos:line="60" pos:column="38">&amp;&amp;<pos:position pos:line="60" pos:column="48"/></operator> <operator pos:line="60" pos:column="41">(<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="42">done<pos:position pos:line="60" pos:column="46"/></name> <operator pos:line="60" pos:column="47">==<pos:position pos:line="60" pos:column="49"/></operator> <literal type="number" pos:line="60" pos:column="50">0<pos:position pos:line="60" pos:column="51"/></literal><operator pos:line="60" pos:column="51">)<pos:position pos:line="60" pos:column="52"/></operator></expr>)<pos:position pos:line="60" pos:column="53"/></condition><then pos:line="60" pos:column="53">
		<block pos:line="61" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">DEBUG<pos:position pos:line="62" pos:column="30"/></name> <argument_list pos:line="62" pos:column="31">(<argument><expr><literal type="string" pos:line="62" pos:column="32">"[thread #%5lu] plugin: plugin_read_thread: Waiting on read_cond."<pos:position pos:line="62" pos:column="98"/></literal></expr></argument>,
					<argument><expr><operator pos:line="63" pos:column="41">(<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="42">unsigned<pos:position pos:line="63" pos:column="50"/></name> <name pos:line="63" pos:column="51">long<pos:position pos:line="63" pos:column="55"/></name> <name pos:line="63" pos:column="56">int<pos:position pos:line="63" pos:column="59"/></name><operator pos:line="63" pos:column="59">)<pos:position pos:line="63" pos:column="60"/></operator> <call><name pos:line="63" pos:column="61">pthread_self<pos:position pos:line="63" pos:column="73"/></name> <argument_list pos:line="63" pos:column="74">()<pos:position pos:line="63" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">pthread_cond_wait<pos:position pos:line="64" pos:column="42"/></name> <argument_list pos:line="64" pos:column="43">(<argument><expr><operator pos:line="64" pos:column="44">&amp;<pos:position pos:line="64" pos:column="49"/></operator><name pos:line="64" pos:column="45">read_cond<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="56">&amp;<pos:position pos:line="64" pos:column="61"/></operator><name pos:line="64" pos:column="57">read_lock<pos:position pos:line="64" pos:column="66"/></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
	}<pos:position pos:line="66" pos:column="10"/></block></while> <comment type="block" pos:line="66" pos:column="11">/* while (read_loop) */</comment>

	<expr_stmt><expr><call><name pos:line="68" pos:column="9">pthread_mutex_unlock<pos:position pos:line="68" pos:column="29"/></name> <argument_list pos:line="68" pos:column="30">(<argument><expr><operator pos:line="68" pos:column="31">&amp;<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="32">read_lock<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">pthread_exit<pos:position pos:line="70" pos:column="21"/></name> <argument_list pos:line="70" pos:column="22">(<argument><expr><name pos:line="70" pos:column="23">NULL<pos:position pos:line="70" pos:column="27"/></name></expr></argument>)<pos:position pos:line="70" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>
	<return pos:line="71" pos:column="9">return <expr><operator pos:line="71" pos:column="16">(<pos:position pos:line="71" pos:column="17"/></operator><operator pos:line="71" pos:column="17">(<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">void<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">*<pos:position pos:line="71" pos:column="24"/></operator><operator pos:line="71" pos:column="24">)<pos:position pos:line="71" pos:column="25"/></operator> <literal type="number" pos:line="71" pos:column="26">0<pos:position pos:line="71" pos:column="27"/></literal><operator pos:line="71" pos:column="27">)<pos:position pos:line="71" pos:column="28"/></operator></expr>;<pos:position pos:line="71" pos:column="29"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
