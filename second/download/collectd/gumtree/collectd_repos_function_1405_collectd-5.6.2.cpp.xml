<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1405_collectd-5.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_listval<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">FILE<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">fh<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">buffer<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">command<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier><modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">names<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cdtime_t<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">times<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">number<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DEBUG<pos:position pos:line="8" pos:column="8"/></name><argument_list pos:line="8" pos:column="8">(<argument><expr><literal type="string" pos:line="8" pos:column="9">"utils_cmd_listval: handle_listval (fh = %p, buffer = %s);"<pos:position pos:line="8" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="70">(<pos:position pos:line="8" pos:column="71"/></operator><name pos:line="8" pos:column="71">void<pos:position pos:line="8" pos:column="75"/></name> <operator pos:line="8" pos:column="76">*<pos:position pos:line="8" pos:column="77"/></operator><operator pos:line="8" pos:column="77">)<pos:position pos:line="8" pos:column="78"/></operator><name pos:line="8" pos:column="78">fh<pos:position pos:line="8" pos:column="80"/></name></expr></argument>,
        <argument><expr><name pos:line="9" pos:column="9">buffer<pos:position pos:line="9" pos:column="15"/></name></expr></argument>)<pos:position pos:line="9" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">command<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">NULL<pos:position pos:line="11" pos:column="17"/></name></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">status<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <call><name pos:line="12" pos:column="12">parse_string<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><operator pos:line="12" pos:column="25">&amp;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="26">buffer<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">command<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">!=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">print_to_socket<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">fh<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="25">"-1 Cannot parse command.\n"<pos:position pos:line="14" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free_everything_and_return<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">assert<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">command<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">!=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">strcasecmp<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><literal type="string" pos:line="19" pos:column="18">"LISTVAL"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">command<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call> <operator pos:line="19" pos:column="38">!=<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">0<pos:position pos:line="19" pos:column="42"/></literal></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43"> <block pos:line="19" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">print_to_socket<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">fh<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="25">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="59">command<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">free_everything_and_return<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><operator pos:line="21" pos:column="32">-<pos:position pos:line="21" pos:column="33"/></operator><literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><operator pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">buffer<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">!=<pos:position pos:line="24" pos:column="17"/></operator> <literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>)<pos:position pos:line="24" pos:column="20"/></condition><then pos:line="24" pos:column="20"> <block pos:line="24" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">print_to_socket<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">fh<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="25">"-1 Garbage after end of command: %s\n"<pos:position pos:line="25" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">buffer<pos:position pos:line="25" pos:column="72"/></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">free_everything_and_return<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">-<pos:position pos:line="26" pos:column="33"/></operator><literal type="number" pos:line="26" pos:column="33">1<pos:position pos:line="26" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">status<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <call><name pos:line="29" pos:column="12">uc_get_names<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><operator pos:line="29" pos:column="25">&amp;<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="26">names<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="34">times<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="41">&amp;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="42">number<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">status<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">!=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19"> <block pos:line="30" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">DEBUG<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><literal type="string" pos:line="31" pos:column="11">"command listval: uc_get_names failed with status %i"<pos:position pos:line="31" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="66">status<pos:position pos:line="31" pos:column="72"/></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">print_to_socket<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">fh<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="25">"-1 uc_get_names failed.\n"<pos:position pos:line="32" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">free_everything_and_return<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><operator pos:line="33" pos:column="32">-<pos:position pos:line="33" pos:column="33"/></operator><literal type="number" pos:line="33" pos:column="33">1<pos:position pos:line="33" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">print_to_socket<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">fh<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="23">"%i Value%s found\n"<pos:position pos:line="36" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="45">(<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="46">int<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">)<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">number<pos:position pos:line="36" pos:column="56"/></name></expr></argument>,
                  <argument><expr><ternary><condition><expr><operator pos:line="37" pos:column="19">(<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">number<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">==<pos:position pos:line="37" pos:column="29"/></operator> <literal type="number" pos:line="37" pos:column="30">1<pos:position pos:line="37" pos:column="31"/></literal><operator pos:line="37" pos:column="31">)<pos:position pos:line="37" pos:column="32"/></operator></expr> ?<pos:position pos:line="37" pos:column="34"/></condition><then pos:line="37" pos:column="34"> <expr><literal type="string" pos:line="37" pos:column="35">""<pos:position pos:line="37" pos:column="37"/></literal></expr> <pos:position pos:line="37" pos:column="38"/></then><else pos:line="37" pos:column="38">: <expr><literal type="string" pos:line="37" pos:column="40">"s"<pos:position pos:line="37" pos:column="43"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>
  <for pos:line="38" pos:column="3">for <control pos:line="38" pos:column="7">(<init><decl><type><name pos:line="38" pos:column="8">size_t<pos:position pos:line="38" pos:column="14"/></name></type> <name pos:line="38" pos:column="15">i<pos:position pos:line="38" pos:column="16"/></name> <init pos:line="38" pos:column="17">= <expr><literal type="number" pos:line="38" pos:column="19">0<pos:position pos:line="38" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="21"/></init> <condition><expr><name pos:line="38" pos:column="22">i<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">&lt;<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="26">number<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></condition> <incr><expr><name pos:line="38" pos:column="34">i<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">++<pos:position pos:line="38" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="38"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="5">print_to_socket<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">fh<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="25">"%.3f %s\n"<pos:position pos:line="39" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="38">CDTIME_T_TO_DOUBLE<pos:position pos:line="39" pos:column="56"/></name><argument_list pos:line="39" pos:column="56">(<argument><expr><name><name pos:line="39" pos:column="57">times<pos:position pos:line="39" pos:column="62"/></name><index pos:line="39" pos:column="62">[<expr><name pos:line="39" pos:column="63">i<pos:position pos:line="39" pos:column="64"/></name></expr>]<pos:position pos:line="39" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="68">names<pos:position pos:line="39" pos:column="73"/></name><index pos:line="39" pos:column="73">[<expr><name pos:line="39" pos:column="74">i<pos:position pos:line="39" pos:column="75"/></name></expr>]<pos:position pos:line="39" pos:column="76"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="78"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">free_everything_and_return<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><literal type="number" pos:line="41" pos:column="30">0<pos:position pos:line="41" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
