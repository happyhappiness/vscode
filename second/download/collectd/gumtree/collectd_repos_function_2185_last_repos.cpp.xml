<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2185_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_send_buffer_signed<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">sockent_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">se<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
                                       <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">in_buffer<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="3" pos:column="40">size_t<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">in_buffer_size<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list> <block pos:line="3" pos:column="63">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">BUFF_SIG_SIZE<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">+<pos:position pos:line="4" pos:column="30"/></operator> <name pos:line="4" pos:column="31">in_buffer_size<pos:position pos:line="4" pos:column="45"/></name></expr>]<pos:position pos:line="4" pos:column="46"/></index></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">buffer_offset<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">username_len<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">gcry_md_hd_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">hd<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">gcry_error_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">err<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">char<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">hash<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">hd<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <name pos:line="12" pos:column="8">NULL<pos:position pos:line="12" pos:column="12"/></name></expr>;<pos:position pos:line="12" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">err<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">gcry_md_open<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="23">hd<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">GCRY_MD_SHA256<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="43">GCRY_MD_FLAG_HMAC<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">err<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">!=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16"> <block pos:line="14" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">ERROR<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><literal type="string" pos:line="15" pos:column="11">"network plugin: Creating HMAC object failed: %s"<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="16" pos:column="11">gcry_strerror<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">err<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
    <return pos:line="17" pos:column="5">return;<pos:position pos:line="17" pos:column="12"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">err<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">gcry_md_setkey<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">hd<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="28">se<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">data<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">.<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">client<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">.<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="44">password<pos:position pos:line="20" pos:column="52"/></name></name></expr></argument>,
                       <argument><expr><call><name pos:line="21" pos:column="24">strlen<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name><name pos:line="21" pos:column="31">se<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">data<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">client<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">.<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="47">password<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">err<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">!=<pos:position pos:line="22" pos:column="13"/></operator> <literal type="number" pos:line="22" pos:column="14">0<pos:position pos:line="22" pos:column="15"/></literal></expr>)<pos:position pos:line="22" pos:column="16"/></condition><then pos:line="22" pos:column="16"> <block pos:line="22" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ERROR<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><literal type="string" pos:line="23" pos:column="11">"network plugin: gcry_md_setkey failed: %s"<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="56">gcry_strerror<pos:position pos:line="23" pos:column="69"/></name><argument_list pos:line="23" pos:column="69">(<argument><expr><name pos:line="23" pos:column="70">err<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">gcry_md_close<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">hd<pos:position pos:line="24" pos:column="21"/></name></expr></argument>)<pos:position pos:line="24" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    <return pos:line="25" pos:column="5">return;<pos:position pos:line="25" pos:column="12"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="28" pos:column="3">username_len<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">strlen<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name><name pos:line="28" pos:column="25">se<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">data<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">.<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">client<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">.<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="41">username<pos:position pos:line="28" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">username_len<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&gt;<pos:position pos:line="29" pos:column="24"/></operator> <operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">BUFF_SIG_SIZE<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">-<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">)<pos:position pos:line="29" pos:column="66"/></operator></expr>)<pos:position pos:line="29" pos:column="67"/></condition><then pos:line="29" pos:column="67"> <block pos:line="29" pos:column="68">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"network plugin: Username too long: %s"<pos:position pos:line="30" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="52">se<pos:position pos:line="30" pos:column="54"/></name><operator pos:line="30" pos:column="54">-&gt;<pos:position pos:line="30" pos:column="59"/></operator><name pos:line="30" pos:column="56">data<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">client<pos:position pos:line="30" pos:column="67"/></name><operator pos:line="30" pos:column="67">.<pos:position pos:line="30" pos:column="68"/></operator><name pos:line="30" pos:column="68">username<pos:position pos:line="30" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="78"/></expr_stmt>
    <return pos:line="31" pos:column="5">return;<pos:position pos:line="31" pos:column="12"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">memcpy<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><name pos:line="34" pos:column="10">buffer<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">+<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="47">se<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">data<pos:position pos:line="34" pos:column="55"/></name><operator pos:line="34" pos:column="55">.<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="56">client<pos:position pos:line="34" pos:column="62"/></name><operator pos:line="34" pos:column="62">.<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="63">username<pos:position pos:line="34" pos:column="71"/></name></name></expr></argument>,
         <argument><expr><name pos:line="35" pos:column="10">username_len<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">memcpy<pos:position pos:line="36" pos:column="9"/></name><argument_list pos:line="36" pos:column="9">(<argument><expr><name pos:line="36" pos:column="10">buffer<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">+<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="36" pos:column="45"/></name> <operator pos:line="36" pos:column="46">+<pos:position pos:line="36" pos:column="47"/></operator> <name pos:line="36" pos:column="48">username_len<pos:position pos:line="36" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="62">in_buffer<pos:position pos:line="36" pos:column="71"/></name></expr></argument>,
         <argument><expr><name pos:line="37" pos:column="10">in_buffer_size<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="39" pos:column="3">/* Initialize the `ps' structure. */</comment>
  <decl_stmt><decl><type><name pos:line="40" pos:column="3">part_signature_sha256_t<pos:position pos:line="40" pos:column="26"/></name></type> <name pos:line="40" pos:column="27">ps<pos:position pos:line="40" pos:column="29"/></name> <init pos:line="40" pos:column="30">= <expr><block pos:line="40" pos:column="32">{
      <expr><operator pos:line="41" pos:column="7">.<pos:position pos:line="41" pos:column="8"/></operator><name><name pos:line="41" pos:column="8">head<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">type<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <call><name pos:line="41" pos:column="20">htons<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">TYPE_SIGN_SHA256<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>,
      <expr><operator pos:line="42" pos:column="7">.<pos:position pos:line="42" pos:column="8"/></operator><name><name pos:line="42" pos:column="8">head<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">.<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">length<pos:position pos:line="42" pos:column="19"/></name></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <macro><name pos:line="42" pos:column="22">htons<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument pos:line="42" pos:column="28">PART_SIGNATURE_SHA256_SIZE + username_len<pos:position pos:line="42" pos:column="69"/></argument>)<pos:position pos:line="42" pos:column="70"/></argument_list></macro></expr>}<pos:position pos:line="42" pos:column="71"/></block></expr></init></decl>;<pos:position pos:line="42" pos:column="72"/></decl_stmt>

  <comment type="block" pos:line="44" pos:column="3">/* Calculate the hash value. */</comment>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">gcry_md_write<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">hd<pos:position pos:line="45" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="21">buffer<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">+<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="45" pos:column="56"/></name></expr></argument>,
                <argument><expr><name pos:line="46" pos:column="17">username_len<pos:position pos:line="46" pos:column="29"/></name> <operator pos:line="46" pos:column="30">+<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">in_buffer_size<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name pos:line="47" pos:column="3">hash<pos:position pos:line="47" pos:column="7"/></name> <operator pos:line="47" pos:column="8">=<pos:position pos:line="47" pos:column="9"/></operator> <call><name pos:line="47" pos:column="10">gcry_md_read<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name pos:line="47" pos:column="23">hd<pos:position pos:line="47" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="27">GCRY_MD_SHA256<pos:position pos:line="47" pos:column="41"/></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><name pos:line="48" pos:column="7">hash<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">==<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">NULL<pos:position pos:line="48" pos:column="19"/></name></expr>)<pos:position pos:line="48" pos:column="20"/></condition><then pos:line="48" pos:column="20"> <block pos:line="48" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">ERROR<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><literal type="string" pos:line="49" pos:column="11">"network plugin: gcry_md_read failed."<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">gcry_md_close<pos:position pos:line="50" pos:column="18"/></name><argument_list pos:line="50" pos:column="18">(<argument><expr><name pos:line="50" pos:column="19">hd<pos:position pos:line="50" pos:column="21"/></name></expr></argument>)<pos:position pos:line="50" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <return pos:line="51" pos:column="5">return;<pos:position pos:line="51" pos:column="12"/></return>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">memcpy<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name><name pos:line="53" pos:column="10">ps<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">.<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="13">hash<pos:position pos:line="53" pos:column="17"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="19">hash<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="25">sizeof<argument_list pos:line="53" pos:column="31">(<argument><expr><name><name pos:line="53" pos:column="32">ps<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">.<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">hash<pos:position pos:line="53" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="55" pos:column="3">/* Add the header */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">buffer_offset<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <literal type="number" pos:line="56" pos:column="19">0<pos:position pos:line="56" pos:column="20"/></literal></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">BUFFER_ADD<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">(<argument><expr><operator pos:line="58" pos:column="14">&amp;<pos:position pos:line="58" pos:column="19"/></operator><name><name pos:line="58" pos:column="15">ps<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">head<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">.<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">type<pos:position pos:line="58" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="29">sizeof<argument_list pos:line="58" pos:column="35">(<argument><expr><name><name pos:line="58" pos:column="36">ps<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">.<pos:position pos:line="58" pos:column="39"/></operator><name pos:line="58" pos:column="39">head<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">.<pos:position pos:line="58" pos:column="44"/></operator><name pos:line="58" pos:column="44">type<pos:position pos:line="58" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">BUFFER_ADD<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><operator pos:line="59" pos:column="14">&amp;<pos:position pos:line="59" pos:column="19"/></operator><name><name pos:line="59" pos:column="15">ps<pos:position pos:line="59" pos:column="17"/></name><operator pos:line="59" pos:column="17">.<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="18">head<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">.<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">length<pos:position pos:line="59" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="31">sizeof<argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">ps<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">.<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="41">head<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">.<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">length<pos:position pos:line="59" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">BUFFER_ADD<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><name><name pos:line="60" pos:column="14">ps<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">.<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">hash<pos:position pos:line="60" pos:column="21"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="23">sizeof<argument_list pos:line="60" pos:column="29">(<argument><expr><name><name pos:line="60" pos:column="30">ps<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">.<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="33">hash<pos:position pos:line="60" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="62" pos:column="3">assert<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">buffer_offset<pos:position pos:line="62" pos:column="23"/></name> <operator pos:line="62" pos:column="24">==<pos:position pos:line="62" pos:column="26"/></operator> <name pos:line="62" pos:column="27">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="62" pos:column="53"/></name></expr></argument>)<pos:position pos:line="62" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="64" pos:column="3">gcry_md_close<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">hd<pos:position pos:line="64" pos:column="19"/></name></expr></argument>)<pos:position pos:line="64" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="65" pos:column="3">hd<pos:position pos:line="65" pos:column="5"/></name> <operator pos:line="65" pos:column="6">=<pos:position pos:line="65" pos:column="7"/></operator> <name pos:line="65" pos:column="8">NULL<pos:position pos:line="65" pos:column="12"/></name></expr>;<pos:position pos:line="65" pos:column="13"/></expr_stmt>

  <expr_stmt><expr><name pos:line="67" pos:column="3">buffer_offset<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <name pos:line="67" pos:column="19">PART_SIGNATURE_SHA256_SIZE<pos:position pos:line="67" pos:column="45"/></name> <operator pos:line="67" pos:column="46">+<pos:position pos:line="67" pos:column="47"/></operator> <name pos:line="67" pos:column="48">username_len<pos:position pos:line="67" pos:column="60"/></name> <operator pos:line="67" pos:column="61">+<pos:position pos:line="67" pos:column="62"/></operator> <name pos:line="67" pos:column="63">in_buffer_size<pos:position pos:line="67" pos:column="77"/></name></expr>;<pos:position pos:line="67" pos:column="78"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">network_send_buffer_plain<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">se<pos:position pos:line="68" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="33">buffer<pos:position pos:line="68" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="41">buffer_offset<pos:position pos:line="68" pos:column="54"/></name></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
