<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_598_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">agg_instance_t<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">agg_instance_create<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">data_set_t<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">ds<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
                                           <parameter><decl><type><name pos:line="2" pos:column="44">value_list_t<pos:position pos:line="2" pos:column="56"/></name> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">vl<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="3" pos:column="44">aggregation_t<pos:position pos:line="3" pos:column="57"/></name> <modifier pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></modifier></type><name pos:line="3" pos:column="59">agg<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="63"/></parameter_list> <block pos:line="3" pos:column="64">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">agg_instance_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">inst<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">DEBUG<pos:position pos:line="6" pos:column="8"/></name><argument_list pos:line="6" pos:column="8">(<argument><expr><literal type="string" pos:line="6" pos:column="9">"aggregation plugin: Creating new instance."<pos:position pos:line="6" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">inst<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">calloc<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><literal type="number" pos:line="8" pos:column="17">1<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="20">sizeof<argument_list pos:line="8" pos:column="26">(<argument><expr><operator pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">inst<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">inst<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">NULL<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ERROR<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><literal type="string" pos:line="10" pos:column="11">"aggregation plugin: calloc() failed."<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">pthread_mutex_init<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><operator pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></operator><name><name pos:line="13" pos:column="23">inst<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">lock<pos:position pos:line="13" pos:column="33"/></name></name></expr></argument>, <comment type="block" pos:line="13" pos:column="35">/* attr = */</comment> <argument><expr><name pos:line="13" pos:column="48">NULL<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">inst<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">ds_type<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <name><name pos:line="15" pos:column="19">ds<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">ds<pos:position pos:line="15" pos:column="25"/></name><index pos:line="15" pos:column="25">[<expr><literal type="number" pos:line="15" pos:column="26">0<pos:position pos:line="15" pos:column="27"/></literal></expr>]<pos:position pos:line="15" pos:column="28"/></index></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">type<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">agg_instance_create_name<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">inst<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="34">vl<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">agg<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="19" pos:column="3">inst<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">-&gt;<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="9">min<pos:position pos:line="19" pos:column="12"/></name></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">NAN<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">inst<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">max<pos:position pos:line="20" pos:column="12"/></name></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">NAN<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>

<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define<pos:position pos:line="22" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">INIT_STATE<pos:position pos:line="22" pos:column="19"/></name><parameter_list pos:line="22" pos:column="19">(<parameter><type><name pos:line="22" pos:column="20">field<pos:position pos:line="22" pos:column="25"/></name></type></parameter>)<pos:position pos:line="22" pos:column="26"/></parameter_list></cpp:macro>                                                      \
  <cpp:value pos:line="23" pos:column="3">do {                                                                         \
    inst-&gt;state_##field = NULL;                                                \
    if (agg-&gt;calc_##field) {                                                   \
      inst-&gt;state_##field = calloc(1, sizeof(*inst-&gt;state_##field));           \
      if (inst-&gt;state_##field == NULL) {                                       \
        agg_instance_destroy(inst);                                            \
        free(inst);                                                            \
        ERROR("aggregation plugin: calloc() failed.");                         \
        return NULL;                                                           \
      }                                                                        \
    }                                                                          \
  } while (0)<pos:position pos:line="34" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">INIT_STATE<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">num<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">INIT_STATE<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name pos:line="37" pos:column="14">sum<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">INIT_STATE<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><name pos:line="38" pos:column="14">average<pos:position pos:line="38" pos:column="21"/></name></expr></argument>)<pos:position pos:line="38" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">INIT_STATE<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">min<pos:position pos:line="39" pos:column="17"/></name></expr></argument>)<pos:position pos:line="39" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">INIT_STATE<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">max<pos:position pos:line="40" pos:column="17"/></name></expr></argument>)<pos:position pos:line="40" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">INIT_STATE<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><name pos:line="41" pos:column="14">stddev<pos:position pos:line="41" pos:column="20"/></name></expr></argument>)<pos:position pos:line="41" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>

<cpp:undef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">undef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">INIT_STATE<pos:position pos:line="43" pos:column="18"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">pthread_mutex_lock<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><operator pos:line="45" pos:column="22">&amp;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="23">agg_instance_list_lock<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">inst<pos:position pos:line="46" pos:column="7"/></name><operator pos:line="46" pos:column="7">-&gt;<pos:position pos:line="46" pos:column="12"/></operator><name pos:line="46" pos:column="9">next<pos:position pos:line="46" pos:column="13"/></name></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <name pos:line="46" pos:column="16">agg_instance_list_head<pos:position pos:line="46" pos:column="38"/></name></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name pos:line="47" pos:column="3">agg_instance_list_head<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">=<pos:position pos:line="47" pos:column="27"/></operator> <name pos:line="47" pos:column="28">inst<pos:position pos:line="47" pos:column="32"/></name></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">pthread_mutex_unlock<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><operator pos:line="48" pos:column="24">&amp;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="25">agg_instance_list_lock<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt>

  <return pos:line="50" pos:column="3">return <expr><name pos:line="50" pos:column="10">inst<pos:position pos:line="50" pos:column="14"/></name></expr>;<pos:position pos:line="50" pos:column="15"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
