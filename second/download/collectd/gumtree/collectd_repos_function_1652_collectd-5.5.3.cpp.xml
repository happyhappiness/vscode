<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1652_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ntpd_get_name_from_address<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">buffer<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">size_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">buffer_size<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">info_peer_summary<pos:position pos:line="2" pos:column="41"/></name></name> <specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">peer_info<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">_Bool<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">do_reverse_lookup<pos:position pos:line="2" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="84"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_storage<pos:position pos:line="4" pos:column="32"/></name></name></type> <name pos:line="4" pos:column="33">sa<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">socklen_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">sa_len<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">flags<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name> <argument_list pos:line="9" pos:column="16">(<argument><expr><operator pos:line="9" pos:column="17">&amp;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="18">sa<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="25">sizeof <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">sa<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">peer_info<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">v6_flag<pos:position pos:line="11" pos:column="31"/></name></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
	<block pos:line="12" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">sockaddr_in6<pos:position pos:line="13" pos:column="36"/></name></name></type> <name pos:line="13" pos:column="37">sa6<pos:position pos:line="13" pos:column="40"/></name></decl>;<pos:position pos:line="13" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">assert<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><sizeof pos:line="15" pos:column="25">sizeof <argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">sa<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></sizeof> <operator pos:line="15" pos:column="37">&gt;=<pos:position pos:line="15" pos:column="42"/></operator> <sizeof pos:line="15" pos:column="40">sizeof <argument_list pos:line="15" pos:column="47">(<argument><expr><name pos:line="15" pos:column="48">sa6<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="17" pos:column="17">memset<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="26">sa6<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="31">0<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="34">sizeof <argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">sa6<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">sa6<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">sin6_family<pos:position pos:line="18" pos:column="32"/></name></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="35">AF_INET6<pos:position pos:line="18" pos:column="43"/></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">sa6<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">sin6_port<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <call><name pos:line="19" pos:column="33">htons<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><literal type="number" pos:line="19" pos:column="40">123<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">memcpy<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">(<argument><expr><operator pos:line="20" pos:column="25">&amp;<pos:position pos:line="20" pos:column="30"/></operator><name><name pos:line="20" pos:column="26">sa6<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">sin6_addr<pos:position pos:line="20" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="41">&amp;<pos:position pos:line="20" pos:column="46"/></operator><name><name pos:line="20" pos:column="42">peer_info<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">srcadr6<pos:position pos:line="20" pos:column="60"/></name></name></expr></argument>,
				<argument><expr><sizeof pos:line="21" pos:column="33">sizeof <argument_list pos:line="21" pos:column="40">(<argument><expr pos:line="21" pos:column="41">struct <name pos:line="21" pos:column="48">in6_addr<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">sa_len<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <sizeof pos:line="22" pos:column="26">sizeof <argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">sa6<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="24" pos:column="17">memcpy<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="26">sa<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="30">&amp;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="31">sa6<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="36">sizeof <argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">sa6<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then>
	<else pos:line="26" pos:column="9">else
	<block pos:line="27" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="28" pos:column="17">struct<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">sockaddr_in<pos:position pos:line="28" pos:column="35"/></name></name></type> <name pos:line="28" pos:column="36">sa4<pos:position pos:line="28" pos:column="39"/></name></decl>;<pos:position pos:line="28" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="30" pos:column="17">assert<pos:position pos:line="30" pos:column="23"/></name> <argument_list pos:line="30" pos:column="24">(<argument><expr><sizeof pos:line="30" pos:column="25">sizeof <argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">sa<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></sizeof> <operator pos:line="30" pos:column="37">&gt;=<pos:position pos:line="30" pos:column="42"/></operator> <sizeof pos:line="30" pos:column="40">sizeof <argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">sa4<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">memset<pos:position pos:line="32" pos:column="23"/></name> <argument_list pos:line="32" pos:column="24">(<argument><expr><operator pos:line="32" pos:column="25">&amp;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="26">sa4<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="31">0<pos:position pos:line="32" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="34">sizeof <argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">sa4<pos:position pos:line="32" pos:column="45"/></name></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">sa4<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">.<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="21">sin_family<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">AF_INET<pos:position pos:line="33" pos:column="41"/></name></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">sa4<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">.<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">sin_port<pos:position pos:line="34" pos:column="29"/></name></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <call><name pos:line="34" pos:column="32">htons<pos:position pos:line="34" pos:column="37"/></name> <argument_list pos:line="34" pos:column="38">(<argument><expr><literal type="number" pos:line="34" pos:column="39">123<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">memcpy<pos:position pos:line="35" pos:column="23"/></name> <argument_list pos:line="35" pos:column="24">(<argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name><name pos:line="35" pos:column="26">sa4<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">.<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">sin_addr<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="40">&amp;<pos:position pos:line="35" pos:column="45"/></operator><name><name pos:line="35" pos:column="41">peer_info<pos:position pos:line="35" pos:column="50"/></name><operator pos:line="35" pos:column="50">-&gt;<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="52">srcadr<pos:position pos:line="35" pos:column="58"/></name></name></expr></argument>,
				<argument><expr><sizeof pos:line="36" pos:column="33">sizeof <argument_list pos:line="36" pos:column="40">(<argument><expr pos:line="36" pos:column="41">struct <name pos:line="36" pos:column="48">in_addr<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">sa_len<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">=<pos:position pos:line="37" pos:column="25"/></operator> <sizeof pos:line="37" pos:column="26">sizeof <argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">sa4<pos:position pos:line="37" pos:column="37"/></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="39" pos:column="17">memcpy<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><operator pos:line="39" pos:column="25">&amp;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="26">sa<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="30">&amp;<pos:position pos:line="39" pos:column="35"/></operator><name pos:line="39" pos:column="31">sa4<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="36">sizeof <argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">sa4<pos:position pos:line="39" pos:column="47"/></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></else></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">do_reverse_lookup<pos:position pos:line="42" pos:column="31"/></name></expr>)<pos:position pos:line="42" pos:column="32"/></condition><then pos:line="42" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="17">flags<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">|=<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">NI_NUMERICHOST<pos:position pos:line="43" pos:column="40"/></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="45" pos:column="9">status<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">getnameinfo<pos:position pos:line="45" pos:column="29"/></name> <argument_list pos:line="45" pos:column="30">(<argument><expr><operator pos:line="45" pos:column="31">(<pos:position pos:line="45" pos:column="32"/></operator>struct <name pos:line="45" pos:column="39">sockaddr<pos:position pos:line="45" pos:column="47"/></name> <specifier pos:line="45" pos:column="48">const<pos:position pos:line="45" pos:column="53"/></specifier> <operator pos:line="45" pos:column="54">*<pos:position pos:line="45" pos:column="55"/></operator><operator pos:line="45" pos:column="55">)<pos:position pos:line="45" pos:column="56"/></operator> <operator pos:line="45" pos:column="57">&amp;<pos:position pos:line="45" pos:column="62"/></operator><name pos:line="45" pos:column="58">sa<pos:position pos:line="45" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="62">sa_len<pos:position pos:line="45" pos:column="68"/></name></expr></argument>,
			<argument><expr><name pos:line="46" pos:column="25">buffer<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="33">buffer_size<pos:position pos:line="46" pos:column="44"/></name></expr></argument>,
			<argument><expr><name pos:line="47" pos:column="25">NULL<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="31">0<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>, <comment type="block" pos:line="47" pos:column="34">/* No port name */</comment>
			<argument><expr><name pos:line="48" pos:column="25">flags<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">status<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">!=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="number" pos:line="49" pos:column="23">0<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
	<block pos:line="50" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">char<pos:position pos:line="51" pos:column="21"/></name></type> <name><name pos:line="51" pos:column="22">errbuf<pos:position pos:line="51" pos:column="28"/></name><index pos:line="51" pos:column="28">[<expr><literal type="number" pos:line="51" pos:column="29">1024<pos:position pos:line="51" pos:column="33"/></literal></expr>]<pos:position pos:line="51" pos:column="34"/></index></name></decl>;<pos:position pos:line="51" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">ERROR<pos:position pos:line="52" pos:column="22"/></name> <argument_list pos:line="52" pos:column="23">(<argument><expr><literal type="string" pos:line="52" pos:column="24">"ntpd plugin: getnameinfo failed: %s"<pos:position pos:line="52" pos:column="61"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="53" pos:column="33">(<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">status<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">==<pos:position pos:line="53" pos:column="43"/></operator> <name pos:line="53" pos:column="44">EAI_SYSTEM<pos:position pos:line="53" pos:column="54"/></name><operator pos:line="53" pos:column="54">)<pos:position pos:line="53" pos:column="55"/></operator></expr>
				?<pos:position pos:line="54" pos:column="34"/></condition><then pos:line="54" pos:column="34"> <expr><call><name pos:line="54" pos:column="35">sstrerror<pos:position pos:line="54" pos:column="44"/></name> <argument_list pos:line="54" pos:column="45">(<argument><expr><name pos:line="54" pos:column="46">errno<pos:position pos:line="54" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">errbuf<pos:position pos:line="54" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="61">sizeof <argument_list pos:line="54" pos:column="68">(<argument><expr><name pos:line="54" pos:column="69">errbuf<pos:position pos:line="54" pos:column="75"/></name></expr></argument>)<pos:position pos:line="54" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="77"/></argument_list></call></expr>
				<pos:position pos:line="55" pos:column="5"/></then><else pos:line="55" pos:column="33">: <expr><call><name pos:line="55" pos:column="35">gai_strerror<pos:position pos:line="55" pos:column="47"/></name> <argument_list pos:line="55" pos:column="48">(<argument><expr><name pos:line="55" pos:column="49">status<pos:position pos:line="55" pos:column="55"/></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
		<return pos:line="56" pos:column="17">return <expr><operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">-<pos:position pos:line="56" pos:column="26"/></operator><literal type="number" pos:line="56" pos:column="26">1<pos:position pos:line="56" pos:column="27"/></literal><operator pos:line="56" pos:column="27">)<pos:position pos:line="56" pos:column="28"/></operator></expr>;<pos:position pos:line="56" pos:column="29"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<return pos:line="59" pos:column="9">return <expr><operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal><operator pos:line="59" pos:column="18">)<pos:position pos:line="59" pos:column="19"/></operator></expr>;<pos:position pos:line="59" pos:column="20"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
