<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_189_collectd-4.7.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">init<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="23"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">PROCESSOR_CPU_LOAD_INFO<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">||<pos:position pos:line="3" pos:column="31"/></operator> <name pos:line="3" pos:column="32">PROCESSOR_TEMPERATURE<pos:position pos:line="3" pos:column="53"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">kern_return_t<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">status<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">port_host<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">mach_host_self<pos:position pos:line="6" pos:column="35"/></name> <argument_list pos:line="6" pos:column="36">()<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* FIXME: Free `cpu_list' if it's not NULL */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">status<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <call><name pos:line="9" pos:column="23">host_processors<pos:position pos:line="9" pos:column="38"/></name> <argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">port_host<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="51">&amp;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="52">cpu_list<pos:position pos:line="9" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="62">&amp;<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="63">cpu_list_len<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call><operator pos:line="9" pos:column="76">)<pos:position pos:line="9" pos:column="77"/></operator> <operator pos:line="9" pos:column="78">!=<pos:position pos:line="9" pos:column="80"/></operator> <name pos:line="9" pos:column="81">KERN_SUCCESS<pos:position pos:line="9" pos:column="93"/></name></expr>)<pos:position pos:line="9" pos:column="94"/></condition><then pos:line="9" pos:column="94">
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">ERROR<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"cpu plugin: host_processors returned %i"<pos:position pos:line="11" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="67">(<pos:position pos:line="11" pos:column="68"/></operator><name pos:line="11" pos:column="68">int<pos:position pos:line="11" pos:column="71"/></name><operator pos:line="11" pos:column="71">)<pos:position pos:line="11" pos:column="72"/></operator> <name pos:line="11" pos:column="73">status<pos:position pos:line="11" pos:column="79"/></name></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">cpu_list_len<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><operator pos:line="13" pos:column="25">-<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">DEBUG<pos:position pos:line="16" pos:column="14"/></name> <argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"host_processors returned %i %s"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="50">(<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="51">int<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">)<pos:position pos:line="16" pos:column="55"/></operator> <name pos:line="16" pos:column="56">cpu_list_len<pos:position pos:line="16" pos:column="68"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="16" pos:column="70">cpu_list_len<pos:position pos:line="16" pos:column="82"/></name> <operator pos:line="16" pos:column="83">==<pos:position pos:line="16" pos:column="85"/></operator> <literal type="number" pos:line="16" pos:column="86">1<pos:position pos:line="16" pos:column="87"/></literal></expr> ?<pos:position pos:line="16" pos:column="89"/></condition><then pos:line="16" pos:column="89"> <expr><literal type="string" pos:line="16" pos:column="90">"processor"<pos:position pos:line="16" pos:column="101"/></literal></expr> <pos:position pos:line="16" pos:column="102"/></then><else pos:line="16" pos:column="102">: <expr><literal type="string" pos:line="16" pos:column="104">"processors"<pos:position pos:line="16" pos:column="116"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="118"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">INFO<pos:position pos:line="17" pos:column="13"/></name> <argument_list pos:line="17" pos:column="14">(<argument><expr><literal type="string" pos:line="17" pos:column="15">"cpu plugin: Found %i processor%s."<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="52">(<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="53">int<pos:position pos:line="17" pos:column="56"/></name><operator pos:line="17" pos:column="56">)<pos:position pos:line="17" pos:column="57"/></operator> <name pos:line="17" pos:column="58">cpu_list_len<pos:position pos:line="17" pos:column="70"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="17" pos:column="72">cpu_list_len<pos:position pos:line="17" pos:column="84"/></name> <operator pos:line="17" pos:column="85">==<pos:position pos:line="17" pos:column="87"/></operator> <literal type="number" pos:line="17" pos:column="88">1<pos:position pos:line="17" pos:column="89"/></literal></expr> ?<pos:position pos:line="17" pos:column="91"/></condition><then pos:line="17" pos:column="91"> <expr><literal type="string" pos:line="17" pos:column="92">""<pos:position pos:line="17" pos:column="94"/></literal></expr> <pos:position pos:line="17" pos:column="95"/></then><else pos:line="17" pos:column="95">: <expr><literal type="string" pos:line="17" pos:column="97">"s"<pos:position pos:line="17" pos:column="100"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="102"/></expr_stmt>

	<expr_stmt><expr><name pos:line="19" pos:column="9">cpu_temp_retry_max<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="30">86400<pos:position pos:line="19" pos:column="35"/></literal> <operator pos:line="19" pos:column="36">/<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">interval_g<pos:position pos:line="19" pos:column="48"/></name></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
<comment type="block" pos:line="20" pos:column="1">/* #endif PROCESSOR_CPU_LOAD_INFO */</comment>

<cpp:elif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">elif<pos:position pos:line="22" pos:column="6"/></cpp:directive> <expr><call><name pos:line="22" pos:column="7">defined<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">HAVE_LIBKSTAT<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">kstat_t<pos:position pos:line="23" pos:column="16"/></name> <modifier pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></modifier></type><name pos:line="23" pos:column="18">ksp_chain<pos:position pos:line="23" pos:column="27"/></name></decl>;<pos:position pos:line="23" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="25" pos:column="9">numcpu<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">kc<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">==<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">NULL<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24">
		<block type="pseudo"><return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><operator pos:line="28" pos:column="25">-<pos:position pos:line="28" pos:column="26"/></operator><literal type="number" pos:line="28" pos:column="26">1<pos:position pos:line="28" pos:column="27"/></literal><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator></expr>;<pos:position pos:line="28" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="30" pos:column="9">/* Solaris doesn't count linear.. *sigh* */</comment>
	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">numcpu<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">0<pos:position pos:line="31" pos:column="24"/></literal></expr><operator pos:line="31" pos:column="24">,<pos:position pos:line="31" pos:column="25"/></operator> <expr><name pos:line="31" pos:column="26">ksp_chain<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <name><name pos:line="31" pos:column="38">kc<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">-&gt;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="42">kc_chain<pos:position pos:line="31" pos:column="50"/></name></name></expr>;<pos:position pos:line="31" pos:column="51"/></init>
			<condition><expr><operator pos:line="32" pos:column="25">(<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">numcpu<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">&lt;<pos:position pos:line="32" pos:column="37"/></operator> <name pos:line="32" pos:column="35">MAX_NUMCPU<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">)<pos:position pos:line="32" pos:column="46"/></operator> <operator pos:line="32" pos:column="47">&amp;&amp;<pos:position pos:line="32" pos:column="57"/></operator> <operator pos:line="32" pos:column="50">(<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="51">ksp_chain<pos:position pos:line="32" pos:column="60"/></name> <operator pos:line="32" pos:column="61">!=<pos:position pos:line="32" pos:column="63"/></operator> <name pos:line="32" pos:column="64">NULL<pos:position pos:line="32" pos:column="68"/></name><operator pos:line="32" pos:column="68">)<pos:position pos:line="32" pos:column="69"/></operator></expr>;<pos:position pos:line="32" pos:column="70"/></condition>
			<incr><expr><name pos:line="33" pos:column="25">ksp_chain<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">=<pos:position pos:line="33" pos:column="36"/></operator> <name><name pos:line="33" pos:column="37">ksp_chain<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">-&gt;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="48">ks_next<pos:position pos:line="33" pos:column="55"/></name></name></expr></incr>)<pos:position pos:line="33" pos:column="56"/></control>
		<block type="pseudo"><if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">strncmp<pos:position pos:line="34" pos:column="28"/></name> <argument_list pos:line="34" pos:column="29">(<argument><expr><name><name pos:line="34" pos:column="30">ksp_chain<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">-&gt;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="41">ks_module<pos:position pos:line="34" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="52">"cpu_stat"<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="64">8<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call> <operator pos:line="34" pos:column="67">==<pos:position pos:line="34" pos:column="69"/></operator> <literal type="number" pos:line="34" pos:column="70">0<pos:position pos:line="34" pos:column="71"/></literal></expr>)<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="25">ksp<pos:position pos:line="35" pos:column="28"/></name><index pos:line="35" pos:column="28">[<expr><name pos:line="35" pos:column="29">numcpu<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">++<pos:position pos:line="35" pos:column="37"/></operator></expr>]<pos:position pos:line="35" pos:column="38"/></index></name> <operator pos:line="35" pos:column="39">=<pos:position pos:line="35" pos:column="40"/></operator> <name pos:line="35" pos:column="41">ksp_chain<pos:position pos:line="35" pos:column="50"/></name></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt></block></then></if></block></for>
<comment type="block" pos:line="36" pos:column="1">/* #endif HAVE_LIBKSTAT */</comment>

<cpp:elif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">elif<pos:position pos:line="38" pos:column="6"/></cpp:directive> <expr><name pos:line="38" pos:column="7">CAN_USE_SYSCTL<pos:position pos:line="38" pos:column="21"/></name></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">size_t<pos:position pos:line="39" pos:column="15"/></name></type> <name pos:line="39" pos:column="16">numcpu_size<pos:position pos:line="39" pos:column="27"/></name></decl>;<pos:position pos:line="39" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">int<pos:position pos:line="40" pos:column="12"/></name></type> <name><name pos:line="40" pos:column="13">mib<pos:position pos:line="40" pos:column="16"/></name><index pos:line="40" pos:column="16">[<expr><literal type="number" pos:line="40" pos:column="17">2<pos:position pos:line="40" pos:column="18"/></literal></expr>]<pos:position pos:line="40" pos:column="19"/></index></name> <init pos:line="40" pos:column="20">= <expr><block pos:line="40" pos:column="22">{<expr><name pos:line="40" pos:column="23">CTL_HW<pos:position pos:line="40" pos:column="29"/></name></expr>, <expr><name pos:line="40" pos:column="31">HW_NCPU<pos:position pos:line="40" pos:column="38"/></name></expr>}<pos:position pos:line="40" pos:column="39"/></block></expr></init></decl>;<pos:position pos:line="40" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="41" pos:column="9">int<pos:position pos:line="41" pos:column="12"/></name></type> <name pos:line="41" pos:column="13">status<pos:position pos:line="41" pos:column="19"/></name></decl>;<pos:position pos:line="41" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="43" pos:column="9">numcpu<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">numcpu_size<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <sizeof pos:line="44" pos:column="23">sizeof <argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">numcpu<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><name pos:line="46" pos:column="9">status<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <call><name pos:line="46" pos:column="18">sysctl<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">mib<pos:position pos:line="46" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="31">STATIC_ARRAY_SIZE<pos:position pos:line="46" pos:column="48"/></name> <argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">mib<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr></argument>,
			<argument><expr><operator pos:line="47" pos:column="25">&amp;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="26">numcpu<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="34">&amp;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="35">numcpu_size<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">NULL<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="54">0<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">status<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <operator pos:line="48" pos:column="23">-<pos:position pos:line="48" pos:column="24"/></operator><literal type="number" pos:line="48" pos:column="24">1<pos:position pos:line="48" pos:column="25"/></literal></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26">
	<block pos:line="49" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">char<pos:position pos:line="50" pos:column="21"/></name></type> <name><name pos:line="50" pos:column="22">errbuf<pos:position pos:line="50" pos:column="28"/></name><index pos:line="50" pos:column="28">[<expr><literal type="number" pos:line="50" pos:column="29">1024<pos:position pos:line="50" pos:column="33"/></literal></expr>]<pos:position pos:line="50" pos:column="34"/></index></name></decl>;<pos:position pos:line="50" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">WARNING<pos:position pos:line="51" pos:column="24"/></name> <argument_list pos:line="51" pos:column="25">(<argument><expr><literal type="string" pos:line="51" pos:column="26">"cpu plugin: sysctl: %s"<pos:position pos:line="51" pos:column="50"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="52" pos:column="33">sstrerror<pos:position pos:line="52" pos:column="42"/></name> <argument_list pos:line="52" pos:column="43">(<argument><expr><name pos:line="52" pos:column="44">errno<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">errbuf<pos:position pos:line="52" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="59">sizeof <argument_list pos:line="52" pos:column="66">(<argument><expr><name pos:line="52" pos:column="67">errbuf<pos:position pos:line="52" pos:column="73"/></name></expr></argument>)<pos:position pos:line="52" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="77"/></expr_stmt>
		<return pos:line="53" pos:column="17">return <expr><operator pos:line="53" pos:column="24">(<pos:position pos:line="53" pos:column="25"/></operator><operator pos:line="53" pos:column="25">-<pos:position pos:line="53" pos:column="26"/></operator><literal type="number" pos:line="53" pos:column="26">1<pos:position pos:line="53" pos:column="27"/></literal><operator pos:line="53" pos:column="27">)<pos:position pos:line="53" pos:column="28"/></operator></expr>;<pos:position pos:line="53" pos:column="29"/></return>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>
<comment type="block" pos:line="55" pos:column="1">/* #endif CAN_USE_SYSCTL */</comment>

<cpp:elif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">elif<pos:position pos:line="57" pos:column="6"/></cpp:directive> <expr><call><name pos:line="57" pos:column="7">defined<pos:position pos:line="57" pos:column="14"/></name> <argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">HAVE_SYSCTLBYNAME<pos:position pos:line="57" pos:column="33"/></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">size_t<pos:position pos:line="58" pos:column="15"/></name></type> <name pos:line="58" pos:column="16">numcpu_size<pos:position pos:line="58" pos:column="27"/></name></decl>;<pos:position pos:line="58" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="60" pos:column="9">numcpu_size<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <sizeof pos:line="60" pos:column="23">sizeof <argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">numcpu<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>

	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">sysctlbyname<pos:position pos:line="62" pos:column="25"/></name> <argument_list pos:line="62" pos:column="26">(<argument><expr><literal type="string" pos:line="62" pos:column="27">"hw.ncpu"<pos:position pos:line="62" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="38">&amp;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="39">numcpu<pos:position pos:line="62" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="47">&amp;<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="48">numcpu_size<pos:position pos:line="62" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="61">NULL<pos:position pos:line="62" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="67">0<pos:position pos:line="62" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="69"/></argument_list></call> <operator pos:line="62" pos:column="70">&lt;<pos:position pos:line="62" pos:column="74"/></operator> <literal type="number" pos:line="62" pos:column="72">0<pos:position pos:line="62" pos:column="73"/></literal></expr>)<pos:position pos:line="62" pos:column="74"/></condition><then pos:line="62" pos:column="74">
	<block pos:line="63" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="64" pos:column="17">char<pos:position pos:line="64" pos:column="21"/></name></type> <name><name pos:line="64" pos:column="22">errbuf<pos:position pos:line="64" pos:column="28"/></name><index pos:line="64" pos:column="28">[<expr><literal type="number" pos:line="64" pos:column="29">1024<pos:position pos:line="64" pos:column="33"/></literal></expr>]<pos:position pos:line="64" pos:column="34"/></index></name></decl>;<pos:position pos:line="64" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">WARNING<pos:position pos:line="65" pos:column="24"/></name> <argument_list pos:line="65" pos:column="25">(<argument><expr><literal type="string" pos:line="65" pos:column="26">"cpu plugin: sysctlbyname: %s"<pos:position pos:line="65" pos:column="56"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="66" pos:column="33">sstrerror<pos:position pos:line="66" pos:column="42"/></name> <argument_list pos:line="66" pos:column="43">(<argument><expr><name pos:line="66" pos:column="44">errno<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">errbuf<pos:position pos:line="66" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="59">sizeof <argument_list pos:line="66" pos:column="66">(<argument><expr><name pos:line="66" pos:column="67">errbuf<pos:position pos:line="66" pos:column="73"/></name></expr></argument>)<pos:position pos:line="66" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="77"/></expr_stmt>
		<return pos:line="67" pos:column="17">return <expr><operator pos:line="67" pos:column="24">(<pos:position pos:line="67" pos:column="25"/></operator><operator pos:line="67" pos:column="25">-<pos:position pos:line="67" pos:column="26"/></operator><literal type="number" pos:line="67" pos:column="26">1<pos:position pos:line="67" pos:column="27"/></literal><operator pos:line="67" pos:column="27">)<pos:position pos:line="67" pos:column="28"/></operator></expr>;<pos:position pos:line="67" pos:column="29"/></return>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if>

	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">numcpu<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">!=<pos:position pos:line="70" pos:column="22"/></operator> <literal type="number" pos:line="70" pos:column="23">1<pos:position pos:line="70" pos:column="24"/></literal></expr>)<pos:position pos:line="70" pos:column="25"/></condition><then pos:line="70" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">NOTICE<pos:position pos:line="71" pos:column="23"/></name> <argument_list pos:line="71" pos:column="24">(<argument><expr><literal type="string" pos:line="71" pos:column="25">"cpu: Only one processor supported when using `sysctlbyname' (found %i)"<pos:position pos:line="71" pos:column="97"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="99">numcpu<pos:position pos:line="71" pos:column="105"/></name></expr></argument>)<pos:position pos:line="71" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="107"/></expr_stmt></block></then></if>
<comment type="block" pos:line="72" pos:column="1">/* #endif HAVE_SYSCTLBYNAME */</comment>

<cpp:elif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">elif<pos:position pos:line="74" pos:column="6"/></cpp:directive> <expr><call><name pos:line="74" pos:column="7">defined<pos:position pos:line="74" pos:column="14"/></name><argument_list pos:line="74" pos:column="14">(<argument><expr><name pos:line="74" pos:column="15">HAVE_LIBSTATGRAB<pos:position pos:line="74" pos:column="31"/></name></expr></argument>)<pos:position pos:line="74" pos:column="32"/></argument_list></call></expr></cpp:elif>
	<comment type="block" pos:line="75" pos:column="9">/* nothing to initialize */</comment>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="76" pos:column="8">/* HAVE_LIBSTATGRAB */</comment>

	<return pos:line="78" pos:column="9">return <expr><operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><literal type="number" pos:line="78" pos:column="17">0<pos:position pos:line="78" pos:column="18"/></literal><operator pos:line="78" pos:column="18">)<pos:position pos:line="78" pos:column="19"/></operator></expr>;<pos:position pos:line="78" pos:column="20"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
