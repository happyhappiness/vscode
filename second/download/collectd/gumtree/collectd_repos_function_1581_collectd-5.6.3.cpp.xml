<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1581_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">md_process<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">minor<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">path<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list> <block pos:line="1" pos:column="59">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">errbuf<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><literal type="number" pos:line="2" pos:column="15">1024<pos:position pos:line="2" pos:column="19"/></literal></expr>]<pos:position pos:line="2" pos:column="20"/></index></name></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">stat<pos:position pos:line="4" pos:column="14"/></name></name></type> <name pos:line="4" pos:column="15">st<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">mdu_array_info_t<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">array<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">gauge_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">disks_missing<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">fd<pos:position pos:line="8" pos:column="5"/></name> <operator pos:line="8" pos:column="6">=<pos:position pos:line="8" pos:column="7"/></operator> <call><name pos:line="8" pos:column="8">open<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">path<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">O_RDONLY<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">fd<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">&lt;<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">WARNING<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="string" pos:line="10" pos:column="13">"md: open(%s): %s"<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">path<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="39">sstrerror<pos:position pos:line="10" pos:column="48"/></name><argument_list pos:line="10" pos:column="48">(<argument><expr><name pos:line="10" pos:column="49">errno<pos:position pos:line="10" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">errbuf<pos:position pos:line="10" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="64">sizeof<argument_list pos:line="10" pos:column="70">(<argument><expr><name pos:line="10" pos:column="71">errbuf<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="81"/></expr_stmt>
    <return pos:line="11" pos:column="5">return;<pos:position pos:line="11" pos:column="12"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">fstat<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">fd<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="17">&amp;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="18">st<pos:position pos:line="14" pos:column="20"/></name></expr></argument>)<pos:position pos:line="14" pos:column="21"/></argument_list></call> <operator pos:line="14" pos:column="22">&lt;<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">WARNING<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"md: Unable to fstat file descriptor for %s: %s"<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="63">path<pos:position pos:line="15" pos:column="67"/></name></expr></argument>,
            <argument><expr><call><name pos:line="16" pos:column="13">sstrerror<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">errno<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">errbuf<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="38">sizeof<argument_list pos:line="16" pos:column="44">(<argument><expr><name pos:line="16" pos:column="45">errbuf<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">close<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">fd<pos:position pos:line="17" pos:column="13"/></name></expr></argument>)<pos:position pos:line="17" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
    <return pos:line="18" pos:column="5">return;<pos:position pos:line="18" pos:column="12"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">!<pos:position pos:line="21" pos:column="8"/></operator><call><name pos:line="21" pos:column="8">S_ISBLK<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name><name pos:line="21" pos:column="16">st<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">st_mode<pos:position pos:line="21" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <block pos:line="21" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">WARNING<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><literal type="string" pos:line="22" pos:column="13">"md: %s is no block device"<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">path<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">close<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><name pos:line="23" pos:column="11">fd<pos:position pos:line="23" pos:column="13"/></name></expr></argument>)<pos:position pos:line="23" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
    <return pos:line="24" pos:column="5">return;<pos:position pos:line="24" pos:column="12"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name><name pos:line="27" pos:column="7">st<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">.<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">st_rdev<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">!=<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">makedev<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">MD_MAJOR<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">minor<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <block pos:line="27" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">WARNING<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><literal type="string" pos:line="28" pos:column="13">"md: Major/minor of %s are %i:%i, should be %i:%i"<pos:position pos:line="28" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="65">path<pos:position pos:line="28" pos:column="69"/></name></expr></argument>,
            <argument><expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">int<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">)<pos:position pos:line="29" pos:column="18"/></operator><call><name pos:line="29" pos:column="18">major<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name><name pos:line="29" pos:column="24">st<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">st_rdev<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="29" pos:column="37">(<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">int<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">)<pos:position pos:line="29" pos:column="42"/></operator><call><name pos:line="29" pos:column="42">minor<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name><name pos:line="29" pos:column="48">st<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">.<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">st_rdev<pos:position pos:line="29" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="29" pos:column="61">(<pos:position pos:line="29" pos:column="62"/></operator><name pos:line="29" pos:column="62">int<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">)<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="66">MD_MAJOR<pos:position pos:line="29" pos:column="74"/></name></expr></argument>,
            <argument><expr><name pos:line="30" pos:column="13">minor<pos:position pos:line="30" pos:column="18"/></name></expr></argument>)<pos:position pos:line="30" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">close<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">fd<pos:position pos:line="31" pos:column="13"/></name></expr></argument>)<pos:position pos:line="31" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
    <return pos:line="32" pos:column="5">return;<pos:position pos:line="32" pos:column="12"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/* Retrieve md information */</comment>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><call><name pos:line="36" pos:column="7">ioctl<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">fd<pos:position pos:line="36" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="17">GET_ARRAY_INFO<pos:position pos:line="36" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="34">array<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call> <operator pos:line="36" pos:column="41">&lt;<pos:position pos:line="36" pos:column="45"/></operator> <literal type="number" pos:line="36" pos:column="43">0<pos:position pos:line="36" pos:column="44"/></literal></expr>)<pos:position pos:line="36" pos:column="45"/></condition><then pos:line="36" pos:column="45"> <block pos:line="36" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">WARNING<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><literal type="string" pos:line="37" pos:column="13">"md: Unable to retrieve array info from %s: %s"<pos:position pos:line="37" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="62">path<pos:position pos:line="37" pos:column="66"/></name></expr></argument>,
            <argument><expr><call><name pos:line="38" pos:column="13">sstrerror<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">errno<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">errbuf<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="38">sizeof<argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">errbuf<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">close<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><name pos:line="39" pos:column="11">fd<pos:position pos:line="39" pos:column="13"/></name></expr></argument>)<pos:position pos:line="39" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt>
    <return pos:line="40" pos:column="5">return;<pos:position pos:line="40" pos:column="12"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="43" pos:column="3">close<pos:position pos:line="43" pos:column="8"/></name><argument_list pos:line="43" pos:column="8">(<argument><expr><name pos:line="43" pos:column="9">fd<pos:position pos:line="43" pos:column="11"/></name></expr></argument>)<pos:position pos:line="43" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="13"/></expr_stmt>

  <comment type="block" pos:line="45" pos:column="3">/*
   * The mdu_array_info_t structure contains numbers of disks in the array.
   * However, disks are accounted for more than once:
   *
   * active:  Number of active (in sync) disks.
   * spare:   Number of stand-by disks.
   * working: Number of working disks. (active + sync)
   * failed:  Number of failed disks.
   * nr:      Number of physically present disks. (working + failed)
   * raid:    Number of disks in the RAID. This may be larger than "nr" if
   *          disks are missing and smaller than "nr" when spare disks are
   *          around.
   */</comment>
  <expr_stmt><expr><call><name pos:line="58" pos:column="3">md_submit<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">minor<pos:position pos:line="58" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="20">"active"<pos:position pos:line="58" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="58" pos:column="30">(<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="31">gauge_t<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">)<pos:position pos:line="58" pos:column="39"/></operator><name><name pos:line="58" pos:column="39">array<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">.<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="45">active_disks<pos:position pos:line="58" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">md_submit<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">minor<pos:position pos:line="59" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="20">"failed"<pos:position pos:line="59" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="30">(<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="31">gauge_t<pos:position pos:line="59" pos:column="38"/></name><operator pos:line="59" pos:column="38">)<pos:position pos:line="59" pos:column="39"/></operator><name><name pos:line="59" pos:column="39">array<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">.<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">failed_disks<pos:position pos:line="59" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">md_submit<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">minor<pos:position pos:line="60" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="20">"spare"<pos:position pos:line="60" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="29">(<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">gauge_t<pos:position pos:line="60" pos:column="37"/></name><operator pos:line="60" pos:column="37">)<pos:position pos:line="60" pos:column="38"/></operator><name><name pos:line="60" pos:column="38">array<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">.<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="44">spare_disks<pos:position pos:line="60" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>

  <expr_stmt><expr><name pos:line="62" pos:column="3">disks_missing<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <literal type="number" pos:line="62" pos:column="19">0.0<pos:position pos:line="62" pos:column="22"/></literal></expr>;<pos:position pos:line="62" pos:column="23"/></expr_stmt>
  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><name><name pos:line="63" pos:column="7">array<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">.<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">raid_disks<pos:position pos:line="63" pos:column="23"/></name></name> <operator pos:line="63" pos:column="24">&gt;<pos:position pos:line="63" pos:column="28"/></operator> <name><name pos:line="63" pos:column="26">array<pos:position pos:line="63" pos:column="31"/></name><operator pos:line="63" pos:column="31">.<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="32">nr_disks<pos:position pos:line="63" pos:column="40"/></name></name></expr>)<pos:position pos:line="63" pos:column="41"/></condition><then pos:line="63" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="5">disks_missing<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <call pos:line="64" pos:column="21">(<name pos:line="64" pos:column="22">gauge_t<pos:position pos:line="64" pos:column="29"/></name>)<argument_list pos:line="64" pos:column="30">(<argument><expr><name><name pos:line="64" pos:column="31">array<pos:position pos:line="64" pos:column="36"/></name><operator pos:line="64" pos:column="36">.<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="37">raid_disks<pos:position pos:line="64" pos:column="47"/></name></name> <operator pos:line="64" pos:column="48">-<pos:position pos:line="64" pos:column="49"/></operator> <name><name pos:line="64" pos:column="50">array<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">.<pos:position pos:line="64" pos:column="56"/></operator><name pos:line="64" pos:column="56">nr_disks<pos:position pos:line="64" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="65" pos:column="3">md_submit<pos:position pos:line="65" pos:column="12"/></name><argument_list pos:line="65" pos:column="12">(<argument><expr><name pos:line="65" pos:column="13">minor<pos:position pos:line="65" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="20">"missing"<pos:position pos:line="65" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="31">disks_missing<pos:position pos:line="65" pos:column="44"/></name></expr></argument>)<pos:position pos:line="65" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="46"/></expr_stmt>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
