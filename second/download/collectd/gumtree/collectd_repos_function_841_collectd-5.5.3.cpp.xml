<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_841_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_connect_unix<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">memcached_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">st<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">sockaddr_un<pos:position pos:line="3" pos:column="21"/></name></name></type> <name pos:line="3" pos:column="22">serv_addr<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">fd<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">memset<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><operator pos:line="6" pos:column="11">&amp;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="12">serv_addr<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="26">sizeof <argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">serv_addr<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">serv_addr<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">.<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">sun_family<pos:position pos:line="7" pos:column="23"/></name></name> <operator pos:line="7" pos:column="24">=<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">AF_UNIX<pos:position pos:line="7" pos:column="33"/></name></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">sstrncpy<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><name><name pos:line="8" pos:column="13">serv_addr<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">.<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">sun_path<pos:position pos:line="8" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="33">st<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">socket<pos:position pos:line="8" pos:column="43"/></name></name></expr></argument>,
      <argument><expr><sizeof pos:line="9" pos:column="7">sizeof <argument_list pos:line="9" pos:column="14">(<argument><expr><name><name pos:line="9" pos:column="15">serv_addr<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">.<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">sun_path<pos:position pos:line="9" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* create our socket descriptor */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">fd<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <call><name pos:line="12" pos:column="8">socket<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">AF_UNIX<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="25">SOCK_STREAM<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="38">0<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">fd<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">&lt;<pos:position pos:line="13" pos:column="14"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>)<pos:position pos:line="13" pos:column="14"/></condition><then pos:line="13" pos:column="14">
  <block pos:line="14" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name></type> <name><name pos:line="15" pos:column="10">errbuf<pos:position pos:line="15" pos:column="16"/></name><index pos:line="15" pos:column="16">[<expr><literal type="number" pos:line="15" pos:column="17">1024<pos:position pos:line="15" pos:column="21"/></literal></expr>]<pos:position pos:line="15" pos:column="22"/></index></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ERROR<pos:position pos:line="16" pos:column="10"/></name> <argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"memcached plugin: memcached_connect_unix: socket(2) failed: %s"<pos:position pos:line="16" pos:column="76"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="17" pos:column="9">sstrerror<pos:position pos:line="17" pos:column="18"/></name> <argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">errno<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">errbuf<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="35">sizeof <argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">errbuf<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><operator pos:line="18" pos:column="13">-<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal><operator pos:line="18" pos:column="15">)<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* connect to the memcached daemon */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">status<pos:position pos:line="22" pos:column="13"/></name> <init pos:line="22" pos:column="14">= <expr><call><name pos:line="22" pos:column="16">connect<pos:position pos:line="22" pos:column="23"/></name> <argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">fd<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator>struct <name pos:line="22" pos:column="37">sockaddr<pos:position pos:line="22" pos:column="45"/></name> <operator pos:line="22" pos:column="46">*<pos:position pos:line="22" pos:column="47"/></operator><operator pos:line="22" pos:column="47">)<pos:position pos:line="22" pos:column="48"/></operator><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">serv_addr<pos:position pos:line="22" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="60">sizeof<argument_list pos:line="22" pos:column="66">(<argument><expr><name pos:line="22" pos:column="67">serv_addr<pos:position pos:line="22" pos:column="76"/></name></expr></argument>)<pos:position pos:line="22" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="79"/></decl_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <literal type="number" pos:line="23" pos:column="17">0<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19">
  <block pos:line="24" pos:column="3">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">shutdown<pos:position pos:line="25" pos:column="15"/></name> <argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">fd<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="21">SHUT_RDWR<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">close<pos:position pos:line="26" pos:column="12"/></name> <argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">fd<pos:position pos:line="26" pos:column="16"/></name></expr></argument>)<pos:position pos:line="26" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="27" pos:column="7">fd<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><literal type="number" pos:line="27" pos:column="13">1<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <return pos:line="30" pos:column="3">return <expr><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">fd<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">)<pos:position pos:line="30" pos:column="14"/></operator></expr>;<pos:position pos:line="30" pos:column="15"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
