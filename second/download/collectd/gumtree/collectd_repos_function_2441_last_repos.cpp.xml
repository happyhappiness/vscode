<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2441_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lu_add_by_plugin<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">by_type_entry_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">by_type<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
                            <parameter><decl><type><name pos:line="2" pos:column="29">user_class_list_t<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">user_class_list<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list> <block pos:line="2" pos:column="65">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">user_class_list_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ptr<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">NULL<pos:position pos:line="3" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">identifier_match_t<pos:position pos:line="4" pos:column="21"/></name> <specifier pos:line="4" pos:column="22">const<pos:position pos:line="4" pos:column="27"/></specifier> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">match<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><operator pos:line="4" pos:column="37">&amp;<pos:position pos:line="4" pos:column="42"/></operator><name><name pos:line="4" pos:column="38">user_class_list<pos:position pos:line="4" pos:column="53"/></name><operator pos:line="4" pos:column="53">-&gt;<pos:position pos:line="4" pos:column="58"/></operator><name pos:line="4" pos:column="55">entry<pos:position pos:line="4" pos:column="60"/></name><operator pos:line="4" pos:column="60">.<pos:position pos:line="4" pos:column="61"/></operator><name pos:line="4" pos:column="61">match<pos:position pos:line="4" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Lookup user_class_list from the per-plugin structure. If this is the first
   * user_class to be added, the block returns immediately. Otherwise they will
   * set "ptr" to non-NULL. */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">match<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">plugin<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">is_regex<pos:position pos:line="9" pos:column="29"/></name></name></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <block pos:line="9" pos:column="31">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">by_type<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">wildcard_plugin_list<pos:position pos:line="10" pos:column="38"/></name></name> <operator pos:line="10" pos:column="39">==<pos:position pos:line="10" pos:column="41"/></operator> <name pos:line="10" pos:column="42">NULL<pos:position pos:line="10" pos:column="46"/></name></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47"> <block pos:line="10" pos:column="48">{
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">by_type<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">wildcard_plugin_list<pos:position pos:line="11" pos:column="36"/></name></name> <operator pos:line="11" pos:column="37">=<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">user_class_list<pos:position pos:line="11" pos:column="54"/></name></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>
      <return pos:line="12" pos:column="7">return <expr><literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">ptr<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <name><name pos:line="15" pos:column="11">by_type<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">wildcard_plugin_list<pos:position pos:line="15" pos:column="40"/></name></name></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>    <comment type="block" pos:line="16" pos:column="8">/* if (plugin is wildcard) */</comment>
  <else pos:line="17" pos:column="3">else <comment type="block" pos:line="17" pos:column="8">/* (plugin is not wildcard) */</comment>
  <block pos:line="18" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name></decl>;<pos:position pos:line="19" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">status<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator>
        <call><name pos:line="22" pos:column="9">c_avl_get<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name><name pos:line="22" pos:column="19">by_type<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">by_plugin_tree<pos:position pos:line="22" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="44">match<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">-&gt;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="51">plugin<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">.<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="58">str<pos:position pos:line="22" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="63">(<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="64">void<pos:position pos:line="22" pos:column="68"/></name> <operator pos:line="22" pos:column="69">*<pos:position pos:line="22" pos:column="70"/></operator><operator pos:line="22" pos:column="70">)<pos:position pos:line="22" pos:column="71"/></operator><operator pos:line="22" pos:column="71">&amp;<pos:position pos:line="22" pos:column="76"/></operator><name pos:line="22" pos:column="72">ptr<pos:position pos:line="22" pos:column="75"/></name></expr></argument>)<pos:position pos:line="22" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="77"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">status<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">!=<pos:position pos:line="24" pos:column="18"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <comment type="block" pos:line="24" pos:column="22">/* plugin not yet in tree */</comment>
    <block pos:line="25" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">char<pos:position pos:line="26" pos:column="11"/></name> <modifier pos:line="26" pos:column="12">*<pos:position pos:line="26" pos:column="13"/></modifier></type><name pos:line="26" pos:column="13">plugin_copy<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><call><name pos:line="26" pos:column="27">strdup<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name><name pos:line="26" pos:column="34">match<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-&gt;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="41">plugin<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">.<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="48">str<pos:position pos:line="26" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="53"/></decl_stmt>

      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">plugin_copy<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">==<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">NULL<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <block pos:line="28" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">ERROR<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><literal type="string" pos:line="29" pos:column="15">"utils_vl_lookup: strdup failed."<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">sfree<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">user_class_list<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">ENOMEM<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></return>
      }<pos:position pos:line="32" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="34" pos:column="7">status<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator>
          <call><name pos:line="35" pos:column="11">c_avl_insert<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><name><name pos:line="35" pos:column="24">by_type<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">by_plugin_tree<pos:position pos:line="35" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">plugin_copy<pos:position pos:line="35" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="62">user_class_list<pos:position pos:line="35" pos:column="77"/></name></expr></argument>)<pos:position pos:line="35" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="79"/></expr_stmt>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">status<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">!=<pos:position pos:line="36" pos:column="20"/></operator> <literal type="number" pos:line="36" pos:column="21">0<pos:position pos:line="36" pos:column="22"/></literal></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23"> <block pos:line="36" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">ERROR<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><literal type="string" pos:line="37" pos:column="15">"utils_vl_lookup: c_avl_insert(\"%s\") failed with status %i."<pos:position pos:line="37" pos:column="77"/></literal></expr></argument>,
              <argument><expr><name pos:line="38" pos:column="15">plugin_copy<pos:position pos:line="38" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">status<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">sfree<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">plugin_copy<pos:position pos:line="39" pos:column="26"/></name></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">sfree<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">user_class_list<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">status<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></return>
      }<pos:position pos:line="42" pos:column="8"/></block></then> <else pos:line="42" pos:column="9">else <block pos:line="42" pos:column="14">{
        <return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return>
      }<pos:position pos:line="44" pos:column="8"/></block></else></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if> <comment type="block" pos:line="45" pos:column="7">/* if (plugin not yet in tree) */</comment>
  }<pos:position pos:line="46" pos:column="4"/></block></else></if>   <comment type="block" pos:line="46" pos:column="7">/* if (plugin is not wildcard) */</comment>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">assert<pos:position pos:line="48" pos:column="9"/></name><argument_list pos:line="48" pos:column="9">(<argument><expr><name pos:line="48" pos:column="10">ptr<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">!=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">NULL<pos:position pos:line="48" pos:column="21"/></name></expr></argument>)<pos:position pos:line="48" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>

  <while pos:line="50" pos:column="3">while <condition pos:line="50" pos:column="9">(<expr><name><name pos:line="50" pos:column="10">ptr<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">next<pos:position pos:line="50" pos:column="19"/></name></name> <operator pos:line="50" pos:column="20">!=<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">NULL<pos:position pos:line="50" pos:column="27"/></name></expr>)<pos:position pos:line="50" pos:column="28"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="5">ptr<pos:position pos:line="51" pos:column="8"/></name> <operator pos:line="51" pos:column="9">=<pos:position pos:line="51" pos:column="10"/></operator> <name><name pos:line="51" pos:column="11">ptr<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">-&gt;<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="16">next<pos:position pos:line="51" pos:column="20"/></name></name></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt></block></while>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">ptr<pos:position pos:line="52" pos:column="6"/></name><operator pos:line="52" pos:column="6">-&gt;<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="8">next<pos:position pos:line="52" pos:column="12"/></name></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <name pos:line="52" pos:column="15">user_class_list<pos:position pos:line="52" pos:column="30"/></name></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>

  <return pos:line="54" pos:column="3">return <expr><literal type="number" pos:line="54" pos:column="10">0<pos:position pos:line="54" pos:column="11"/></literal></expr>;<pos:position pos:line="54" pos:column="12"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
