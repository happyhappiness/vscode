<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1491_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">hddtemp_query_daemon<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buffer<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">buffer_size<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <block pos:line="1" pos:column="64">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">fd<pos:position pos:line="2" pos:column="9"/></name></decl>;<pos:position pos:line="2" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">status<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">buffer_fill<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">host<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">port<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">addrinfo<pos:position pos:line="9" pos:column="18"/></name></name> <modifier pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></modifier></type><name pos:line="9" pos:column="20">ai_list<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">ai_return<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">host<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <name pos:line="12" pos:column="10">hddtemp_host<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">host<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">==<pos:position pos:line="13" pos:column="14"/></operator> <name pos:line="13" pos:column="15">NULL<pos:position pos:line="13" pos:column="19"/></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">host<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <name pos:line="14" pos:column="12">HDDTEMP_DEF_HOST<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">port<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name pos:line="16" pos:column="10">hddtemp_port<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">strlen<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">port<pos:position pos:line="17" pos:column="18"/></name></expr></argument>)<pos:position pos:line="17" pos:column="19"/></argument_list></call> <operator pos:line="17" pos:column="20">==<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="23">0<pos:position pos:line="17" pos:column="24"/></literal></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="5">port<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name pos:line="18" pos:column="12">HDDTEMP_DEF_PORT<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="20" pos:column="3">struct<pos:position pos:line="20" pos:column="9"/></name> <name pos:line="20" pos:column="10">addrinfo<pos:position pos:line="20" pos:column="18"/></name></name></type> <name pos:line="20" pos:column="19">ai_hints<pos:position pos:line="20" pos:column="27"/></name> <init pos:line="20" pos:column="28">= <expr><block pos:line="20" pos:column="30">{<expr><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">ai_flags<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">=<pos:position pos:line="20" pos:column="42"/></operator> <name pos:line="20" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="20" pos:column="56"/></name></expr>,
                              <expr><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">ai_family<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">AF_UNSPEC<pos:position pos:line="21" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="22" pos:column="31">.<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">ai_protocol<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">=<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">IPPROTO_TCP<pos:position pos:line="22" pos:column="57"/></name></expr>,
                              <expr><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">ai_socktype<pos:position pos:line="23" pos:column="43"/></name> <operator pos:line="23" pos:column="44">=<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="46">SOCK_STREAM<pos:position pos:line="23" pos:column="57"/></name></expr>}<pos:position pos:line="23" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="23" pos:column="59"/></decl_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">ai_return<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name pos:line="25" pos:column="20">getaddrinfo<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">host<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">port<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="44">&amp;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="45">ai_hints<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="55">&amp;<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="56">ai_list<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call><operator pos:line="25" pos:column="64">)<pos:position pos:line="25" pos:column="65"/></operator> <operator pos:line="25" pos:column="66">!=<pos:position pos:line="25" pos:column="68"/></operator> <literal type="number" pos:line="25" pos:column="69">0<pos:position pos:line="25" pos:column="70"/></literal></expr>)<pos:position pos:line="25" pos:column="71"/></condition><then pos:line="25" pos:column="71"> <block pos:line="25" pos:column="72">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">errbuf<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><literal type="number" pos:line="26" pos:column="17">1024<pos:position pos:line="26" pos:column="21"/></literal></expr>]<pos:position pos:line="26" pos:column="22"/></index></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ERROR<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><literal type="string" pos:line="27" pos:column="11">"hddtemp plugin: getaddrinfo (%s, %s): %s"<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">host<pos:position pos:line="27" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">port<pos:position pos:line="27" pos:column="65"/></name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="28" pos:column="11">(<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">ai_return<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">==<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">EAI_SYSTEM<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">)<pos:position pos:line="28" pos:column="36"/></operator></expr> ?<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38"> <expr><call><name pos:line="28" pos:column="39">sstrerror<pos:position pos:line="28" pos:column="48"/></name><argument_list pos:line="28" pos:column="48">(<argument><expr><name pos:line="28" pos:column="49">errno<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">errbuf<pos:position pos:line="28" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="64">sizeof<argument_list pos:line="28" pos:column="70">(<argument><expr><name pos:line="28" pos:column="71">errbuf<pos:position pos:line="28" pos:column="77"/></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>
                                    <pos:position pos:line="29" pos:column="37"/></then><else pos:line="29" pos:column="37">: <expr><call><name pos:line="29" pos:column="39">gai_strerror<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">ai_return<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="33" pos:column="3">fd<pos:position pos:line="33" pos:column="5"/></name> <operator pos:line="33" pos:column="6">=<pos:position pos:line="33" pos:column="7"/></operator> <operator pos:line="33" pos:column="8">-<pos:position pos:line="33" pos:column="9"/></operator><literal type="number" pos:line="33" pos:column="9">1<pos:position pos:line="33" pos:column="10"/></literal></expr>;<pos:position pos:line="33" pos:column="11"/></expr_stmt>
  <for pos:line="34" pos:column="3">for <control pos:line="34" pos:column="7">(<init><decl><type><name><name pos:line="34" pos:column="8">struct<pos:position pos:line="34" pos:column="14"/></name> <name pos:line="34" pos:column="15">addrinfo<pos:position pos:line="34" pos:column="23"/></name></name> <modifier pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></modifier><name pos:line="34" pos:column="25">ai_ptr<pos:position pos:line="34" pos:column="31"/></name></type> <init pos:line="34" pos:column="32">= <expr><name pos:line="34" pos:column="34">ai_list<pos:position pos:line="34" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="42"/></init> <condition><expr><name pos:line="34" pos:column="43">ai_ptr<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">!=<pos:position pos:line="34" pos:column="52"/></operator> <name pos:line="34" pos:column="53">NULL<pos:position pos:line="34" pos:column="57"/></name></expr>;<pos:position pos:line="34" pos:column="58"/></condition>
       <incr><expr><name pos:line="35" pos:column="8">ai_ptr<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name><name pos:line="35" pos:column="17">ai_ptr<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">ai_next<pos:position pos:line="35" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="35" pos:column="33"/></control> <block pos:line="35" pos:column="34">{
    <comment type="block" pos:line="36" pos:column="5">/* create our socket descriptor */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">fd<pos:position pos:line="37" pos:column="7"/></name> <operator pos:line="37" pos:column="8">=<pos:position pos:line="37" pos:column="9"/></operator> <call><name pos:line="37" pos:column="10">socket<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name><name pos:line="37" pos:column="17">ai_ptr<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">-&gt;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="25">ai_family<pos:position pos:line="37" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="36">ai_ptr<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-&gt;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="44">ai_socktype<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="57">ai_ptr<pos:position pos:line="37" pos:column="63"/></name><operator pos:line="37" pos:column="63">-&gt;<pos:position pos:line="37" pos:column="68"/></operator><name pos:line="37" pos:column="65">ai_protocol<pos:position pos:line="37" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="78"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">fd<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">&lt;<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="14">0<pos:position pos:line="38" pos:column="15"/></literal></expr>)<pos:position pos:line="38" pos:column="16"/></condition><then pos:line="38" pos:column="16"> <block pos:line="38" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">char<pos:position pos:line="39" pos:column="11"/></name></type> <name><name pos:line="39" pos:column="12">errbuf<pos:position pos:line="39" pos:column="18"/></name><index pos:line="39" pos:column="18">[<expr><literal type="number" pos:line="39" pos:column="19">1024<pos:position pos:line="39" pos:column="23"/></literal></expr>]<pos:position pos:line="39" pos:column="24"/></index></name></decl>;<pos:position pos:line="39" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">ERROR<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><literal type="string" pos:line="40" pos:column="13">"hddtemp plugin: socket: %s"<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="41" pos:column="13">sstrerror<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">errno<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="30">errbuf<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="38">sizeof<argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">errbuf<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
      <continue pos:line="42" pos:column="7">continue;<pos:position pos:line="42" pos:column="16"/></continue>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* connect to the hddtemp daemon */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">connect<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">fd<pos:position pos:line="46" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="21">(<pos:position pos:line="46" pos:column="22"/></operator>struct <name pos:line="46" pos:column="29">sockaddr<pos:position pos:line="46" pos:column="37"/></name> <operator pos:line="46" pos:column="38">*<pos:position pos:line="46" pos:column="39"/></operator><operator pos:line="46" pos:column="39">)<pos:position pos:line="46" pos:column="40"/></operator><name><name pos:line="46" pos:column="40">ai_ptr<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">-&gt;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="48">ai_addr<pos:position pos:line="46" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="57">ai_ptr<pos:position pos:line="46" pos:column="63"/></name><operator pos:line="46" pos:column="63">-&gt;<pos:position pos:line="46" pos:column="68"/></operator><name pos:line="46" pos:column="65">ai_addrlen<pos:position pos:line="46" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="77"/></condition><then pos:line="46" pos:column="77"> <block pos:line="46" pos:column="78">{
      <decl_stmt><decl><type><name pos:line="47" pos:column="7">char<pos:position pos:line="47" pos:column="11"/></name></type> <name><name pos:line="47" pos:column="12">errbuf<pos:position pos:line="47" pos:column="18"/></name><index pos:line="47" pos:column="18">[<expr><literal type="number" pos:line="47" pos:column="19">1024<pos:position pos:line="47" pos:column="23"/></literal></expr>]<pos:position pos:line="47" pos:column="24"/></index></name></decl>;<pos:position pos:line="47" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">INFO<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="string" pos:line="48" pos:column="12">"hddtemp plugin: connect (%s, %s) failed: %s"<pos:position pos:line="48" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="59">host<pos:position pos:line="48" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="65">port<pos:position pos:line="48" pos:column="69"/></name></expr></argument>,
           <argument><expr><call><name pos:line="49" pos:column="12">sstrerror<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">errno<pos:position pos:line="49" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="29">errbuf<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="37">sizeof<argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">errbuf<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">close<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">fd<pos:position pos:line="50" pos:column="15"/></name></expr></argument>)<pos:position pos:line="50" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="51" pos:column="7">fd<pos:position pos:line="51" pos:column="9"/></name> <operator pos:line="51" pos:column="10">=<pos:position pos:line="51" pos:column="11"/></operator> <operator pos:line="51" pos:column="12">-<pos:position pos:line="51" pos:column="13"/></operator><literal type="number" pos:line="51" pos:column="13">1<pos:position pos:line="51" pos:column="14"/></literal></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>
      <continue pos:line="52" pos:column="7">continue;<pos:position pos:line="52" pos:column="16"/></continue>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="55" pos:column="5">/* A socket could be opened and connecting succeeded. We're
     * done. */</comment>
    <break pos:line="57" pos:column="5">break;<pos:position pos:line="57" pos:column="11"/></break>
  }<pos:position pos:line="58" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="60" pos:column="3">freeaddrinfo<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><name pos:line="60" pos:column="16">ai_list<pos:position pos:line="60" pos:column="23"/></name></expr></argument>)<pos:position pos:line="60" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>

  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><name pos:line="62" pos:column="7">fd<pos:position pos:line="62" pos:column="9"/></name> <operator pos:line="62" pos:column="10">&lt;<pos:position pos:line="62" pos:column="14"/></operator> <literal type="number" pos:line="62" pos:column="12">0<pos:position pos:line="62" pos:column="13"/></literal></expr>)<pos:position pos:line="62" pos:column="14"/></condition><then pos:line="62" pos:column="14"> <block pos:line="62" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">ERROR<pos:position pos:line="63" pos:column="10"/></name><argument_list pos:line="63" pos:column="10">(<argument><expr><literal type="string" pos:line="63" pos:column="11">"hddtemp plugin: Could not connect to daemon."<pos:position pos:line="63" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
    <return pos:line="64" pos:column="5">return <expr><operator pos:line="64" pos:column="12">(<pos:position pos:line="64" pos:column="13"/></operator><operator pos:line="64" pos:column="13">-<pos:position pos:line="64" pos:column="14"/></operator><literal type="number" pos:line="64" pos:column="14">1<pos:position pos:line="64" pos:column="15"/></literal><operator pos:line="64" pos:column="15">)<pos:position pos:line="64" pos:column="16"/></operator></expr>;<pos:position pos:line="64" pos:column="17"/></return>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="67" pos:column="3">/* receive data from the hddtemp daemon */</comment>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">memset<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">(<argument><expr><name pos:line="68" pos:column="10">buffer<pos:position pos:line="68" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="18">'\0'<pos:position pos:line="68" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="24">buffer_size<pos:position pos:line="68" pos:column="35"/></name></expr></argument>)<pos:position pos:line="68" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="70" pos:column="3">buffer_fill<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <literal type="number" pos:line="70" pos:column="17">0<pos:position pos:line="70" pos:column="18"/></literal></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>
  <while pos:line="71" pos:column="3">while <condition pos:line="71" pos:column="9">(<expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">status<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <call><name pos:line="71" pos:column="20">read<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">fd<pos:position pos:line="71" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="29">buffer<pos:position pos:line="71" pos:column="35"/></name> <operator pos:line="71" pos:column="36">+<pos:position pos:line="71" pos:column="37"/></operator> <name pos:line="71" pos:column="38">buffer_fill<pos:position pos:line="71" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="51">buffer_size<pos:position pos:line="71" pos:column="62"/></name> <operator pos:line="71" pos:column="63">-<pos:position pos:line="71" pos:column="64"/></operator> <name pos:line="71" pos:column="65">buffer_fill<pos:position pos:line="71" pos:column="76"/></name></expr></argument>)<pos:position pos:line="71" pos:column="77"/></argument_list></call><operator pos:line="71" pos:column="77">)<pos:position pos:line="71" pos:column="78"/></operator> <operator pos:line="71" pos:column="79">!=<pos:position pos:line="71" pos:column="81"/></operator>
         <literal type="number" pos:line="72" pos:column="10">0<pos:position pos:line="72" pos:column="11"/></literal></expr>)<pos:position pos:line="72" pos:column="12"/></condition> <block pos:line="72" pos:column="13">{
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">status<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">==<pos:position pos:line="73" pos:column="18"/></operator> <operator pos:line="73" pos:column="19">-<pos:position pos:line="73" pos:column="20"/></operator><literal type="number" pos:line="73" pos:column="20">1<pos:position pos:line="73" pos:column="21"/></literal></expr>)<pos:position pos:line="73" pos:column="22"/></condition><then pos:line="73" pos:column="22"> <block pos:line="73" pos:column="23">{
      <decl_stmt><decl><type><name pos:line="74" pos:column="7">char<pos:position pos:line="74" pos:column="11"/></name></type> <name><name pos:line="74" pos:column="12">errbuf<pos:position pos:line="74" pos:column="18"/></name><index pos:line="74" pos:column="18">[<expr><literal type="number" pos:line="74" pos:column="19">1024<pos:position pos:line="74" pos:column="23"/></literal></expr>]<pos:position pos:line="74" pos:column="24"/></index></name></decl>;<pos:position pos:line="74" pos:column="25"/></decl_stmt>

      <if pos:line="76" pos:column="7">if <condition pos:line="76" pos:column="10">(<expr><operator pos:line="76" pos:column="11">(<pos:position pos:line="76" pos:column="12"/></operator><name pos:line="76" pos:column="12">errno<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">==<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="21">EAGAIN<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">)<pos:position pos:line="76" pos:column="28"/></operator> <operator pos:line="76" pos:column="29">||<pos:position pos:line="76" pos:column="31"/></operator> <operator pos:line="76" pos:column="32">(<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="33">errno<pos:position pos:line="76" pos:column="38"/></name> <operator pos:line="76" pos:column="39">==<pos:position pos:line="76" pos:column="41"/></operator> <name pos:line="76" pos:column="42">EINTR<pos:position pos:line="76" pos:column="47"/></name><operator pos:line="76" pos:column="47">)<pos:position pos:line="76" pos:column="48"/></operator></expr>)<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49">
        <block type="pseudo"><continue pos:line="77" pos:column="9">continue;<pos:position pos:line="77" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="79" pos:column="7">ERROR<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><literal type="string" pos:line="79" pos:column="13">"hddtemp plugin: Error reading from socket: %s"<pos:position pos:line="79" pos:column="60"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="80" pos:column="13">sstrerror<pos:position pos:line="80" pos:column="22"/></name><argument_list pos:line="80" pos:column="22">(<argument><expr><name pos:line="80" pos:column="23">errno<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="30">errbuf<pos:position pos:line="80" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="38">sizeof<argument_list pos:line="80" pos:column="44">(<argument><expr><name pos:line="80" pos:column="45">errbuf<pos:position pos:line="80" pos:column="51"/></name></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">close<pos:position pos:line="81" pos:column="12"/></name><argument_list pos:line="81" pos:column="12">(<argument><expr><name pos:line="81" pos:column="13">fd<pos:position pos:line="81" pos:column="15"/></name></expr></argument>)<pos:position pos:line="81" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="17"/></expr_stmt>
      <return pos:line="82" pos:column="7">return <expr><operator pos:line="82" pos:column="14">(<pos:position pos:line="82" pos:column="15"/></operator><operator pos:line="82" pos:column="15">-<pos:position pos:line="82" pos:column="16"/></operator><literal type="number" pos:line="82" pos:column="16">1<pos:position pos:line="82" pos:column="17"/></literal><operator pos:line="82" pos:column="17">)<pos:position pos:line="82" pos:column="18"/></operator></expr>;<pos:position pos:line="82" pos:column="19"/></return>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="84" pos:column="5">buffer_fill<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">+=<pos:position pos:line="84" pos:column="19"/></operator> <name pos:line="84" pos:column="20">status<pos:position pos:line="84" pos:column="26"/></name></expr>;<pos:position pos:line="84" pos:column="27"/></expr_stmt>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name pos:line="86" pos:column="9">buffer_fill<pos:position pos:line="86" pos:column="20"/></name> <operator pos:line="86" pos:column="21">&gt;=<pos:position pos:line="86" pos:column="26"/></operator> <name pos:line="86" pos:column="24">buffer_size<pos:position pos:line="86" pos:column="35"/></name></expr>)<pos:position pos:line="86" pos:column="36"/></condition><then pos:line="86" pos:column="36">
      <block type="pseudo"><break pos:line="87" pos:column="7">break;<pos:position pos:line="87" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="88" pos:column="4"/></block></while>

  <if pos:line="90" pos:column="3">if <condition pos:line="90" pos:column="6">(<expr><name pos:line="90" pos:column="7">buffer_fill<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">&gt;=<pos:position pos:line="90" pos:column="24"/></operator> <name pos:line="90" pos:column="22">buffer_size<pos:position pos:line="90" pos:column="33"/></name></expr>)<pos:position pos:line="90" pos:column="34"/></condition><then pos:line="90" pos:column="34"> <block pos:line="90" pos:column="35">{
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">buffer<pos:position pos:line="91" pos:column="11"/></name><index pos:line="91" pos:column="11">[<expr><name pos:line="91" pos:column="12">buffer_size<pos:position pos:line="91" pos:column="23"/></name> <operator pos:line="91" pos:column="24">-<pos:position pos:line="91" pos:column="25"/></operator> <literal type="number" pos:line="91" pos:column="26">1<pos:position pos:line="91" pos:column="27"/></literal></expr>]<pos:position pos:line="91" pos:column="28"/></index></name> <operator pos:line="91" pos:column="29">=<pos:position pos:line="91" pos:column="30"/></operator> <literal type="char" pos:line="91" pos:column="31">'\0'<pos:position pos:line="91" pos:column="35"/></literal></expr>;<pos:position pos:line="91" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">WARNING<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><literal type="string" pos:line="92" pos:column="13">"hddtemp plugin: Message from hddtemp has been "<pos:position pos:line="92" pos:column="61"/></literal>
            <literal type="string" pos:line="93" pos:column="13">"truncated."<pos:position pos:line="93" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></then> <elseif pos:line="94" pos:column="5">else <if pos:line="94" pos:column="10">if <condition pos:line="94" pos:column="13">(<expr><name pos:line="94" pos:column="14">buffer_fill<pos:position pos:line="94" pos:column="25"/></name> <operator pos:line="94" pos:column="26">==<pos:position pos:line="94" pos:column="28"/></operator> <literal type="number" pos:line="94" pos:column="29">0<pos:position pos:line="94" pos:column="30"/></literal></expr>)<pos:position pos:line="94" pos:column="31"/></condition><then pos:line="94" pos:column="31"> <block pos:line="94" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">WARNING<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><literal type="string" pos:line="95" pos:column="13">"hddtemp plugin: Peer has unexpectedly shut down "<pos:position pos:line="95" pos:column="63"/></literal>
            <literal type="string" pos:line="96" pos:column="13">"the socket. Buffer: `%s'"<pos:position pos:line="96" pos:column="39"/></literal></expr></argument>,
            <argument><expr><name pos:line="97" pos:column="13">buffer<pos:position pos:line="97" pos:column="19"/></name></expr></argument>)<pos:position pos:line="97" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">close<pos:position pos:line="98" pos:column="10"/></name><argument_list pos:line="98" pos:column="10">(<argument><expr><name pos:line="98" pos:column="11">fd<pos:position pos:line="98" pos:column="13"/></name></expr></argument>)<pos:position pos:line="98" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="15"/></expr_stmt>
    <return pos:line="99" pos:column="5">return <expr><operator pos:line="99" pos:column="12">(<pos:position pos:line="99" pos:column="13"/></operator><operator pos:line="99" pos:column="13">-<pos:position pos:line="99" pos:column="14"/></operator><literal type="number" pos:line="99" pos:column="14">1<pos:position pos:line="99" pos:column="15"/></literal><operator pos:line="99" pos:column="15">)<pos:position pos:line="99" pos:column="16"/></operator></expr>;<pos:position pos:line="99" pos:column="17"/></return>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="102" pos:column="3">close<pos:position pos:line="102" pos:column="8"/></name><argument_list pos:line="102" pos:column="8">(<argument><expr><name pos:line="102" pos:column="9">fd<pos:position pos:line="102" pos:column="11"/></name></expr></argument>)<pos:position pos:line="102" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="13"/></expr_stmt>
  <return pos:line="103" pos:column="3">return <expr><operator pos:line="103" pos:column="10">(<pos:position pos:line="103" pos:column="11"/></operator><literal type="number" pos:line="103" pos:column="11">0<pos:position pos:line="103" pos:column="12"/></literal><operator pos:line="103" pos:column="12">)<pos:position pos:line="103" pos:column="13"/></operator></expr>;<pos:position pos:line="103" pos:column="14"/></return>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
