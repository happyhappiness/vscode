<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1698_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">vg_read<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">vg_t<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">vg<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">vg_name<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <block pos:line="1" pos:column="51">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">dm_list<pos:position pos:line="2" pos:column="17"/></name></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">lvs<pos:position pos:line="2" pos:column="22"/></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">lvm_lv_list<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">lvl<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <specifier pos:line="4" pos:column="8">const<pos:position pos:line="4" pos:column="13"/></specifier> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">name<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <specifier pos:line="5" pos:column="8">const<pos:position pos:line="5" pos:column="13"/></specifier> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">attrs<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uint64_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">size<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">lvm_submit<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">vg_name<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"free"<pos:position pos:line="8" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="31">lvm_vg_get_free_size<pos:position pos:line="8" pos:column="51"/></name><argument_list pos:line="8" pos:column="51">(<argument><expr><name pos:line="8" pos:column="52">vg<pos:position pos:line="8" pos:column="54"/></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="57"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">lvs<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">lvm_vg_list_lvs<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">vg<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">lvs<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12"> <block pos:line="11" pos:column="13">{
    <comment type="block" pos:line="12" pos:column="5">/* no VGs are defined, which is not an error per se */</comment>
    <return pos:line="13" pos:column="5">return;<pos:position pos:line="13" pos:column="12"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <macro><name pos:line="16" pos:column="3">dm_list_iterate_items<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument pos:line="16" pos:column="25">lvl<pos:position pos:line="16" pos:column="28"/></argument>, <argument pos:line="16" pos:column="30">lvs<pos:position pos:line="16" pos:column="33"/></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></macro> <block pos:line="16" pos:column="35">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">name<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">lvm_lv_get_name<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name><name pos:line="17" pos:column="28">lvl<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">lv<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">attrs<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">get_lv_property_string<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name><name pos:line="18" pos:column="36">lvl<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">lv<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="45">"lv_attr"<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">size<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <call><name pos:line="19" pos:column="12">lvm_lv_get_size<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name><name pos:line="19" pos:column="28">lvl<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">lv<pos:position pos:line="19" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">name<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">||<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">attrs<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">==<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">NULL<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">||<pos:position pos:line="20" pos:column="41"/></operator> <name pos:line="20" pos:column="42">size<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">==<pos:position pos:line="20" pos:column="49"/></operator> <name pos:line="20" pos:column="50">NO_VALUE<pos:position pos:line="20" pos:column="58"/></name></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59">
      <block type="pseudo"><continue pos:line="21" pos:column="7">continue;<pos:position pos:line="21" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* Condition on volume type.  We want the reported sizes in the
       volume group to sum to the size of the volume group, so we ignore
       virtual volumes.  */</comment>
    <switch pos:line="26" pos:column="5">switch <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">attrs<pos:position pos:line="26" pos:column="18"/></name><index pos:line="26" pos:column="18">[<expr><literal type="number" pos:line="26" pos:column="19">0<pos:position pos:line="26" pos:column="20"/></literal></expr>]<pos:position pos:line="26" pos:column="21"/></index></name></expr>)<pos:position pos:line="26" pos:column="22"/></condition> <block pos:line="26" pos:column="23">{
    <case pos:line="27" pos:column="5">case <expr><literal type="char" pos:line="27" pos:column="10">'s'<pos:position pos:line="27" pos:column="13"/></literal></expr>:<pos:position pos:line="27" pos:column="14"/></case>
    <case pos:line="28" pos:column="5">case <expr><literal type="char" pos:line="28" pos:column="10">'S'<pos:position pos:line="28" pos:column="13"/></literal></expr>:<pos:position pos:line="28" pos:column="14"/></case>
      <comment type="block" pos:line="29" pos:column="7">/* Snapshot.  Also report used/free space. */</comment>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">report_lv_utilization<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name><name pos:line="30" pos:column="29">lvl<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">lv<pos:position pos:line="30" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">vg_name<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">name<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">size<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="59">"data_percent"<pos:position pos:line="30" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
      <break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break>
    <case pos:line="32" pos:column="5">case <expr><literal type="char" pos:line="32" pos:column="10">'t'<pos:position pos:line="32" pos:column="13"/></literal></expr>:<pos:position pos:line="32" pos:column="14"/></case>
      <comment type="block" pos:line="33" pos:column="7">/* Thin pool virtual volume.  We report the underlying data
         and metadata volumes, not this one.  Report used/free
         space, then ignore. */</comment>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">report_thin_pool_utilization<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name><name pos:line="36" pos:column="36">lvl<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-&gt;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="41">lv<pos:position pos:line="36" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">vg_name<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">size<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
      <continue pos:line="37" pos:column="7">continue;<pos:position pos:line="37" pos:column="16"/></continue>
    <case pos:line="38" pos:column="5">case <expr><literal type="char" pos:line="38" pos:column="10">'v'<pos:position pos:line="38" pos:column="13"/></literal></expr>:<pos:position pos:line="38" pos:column="14"/></case>
      <comment type="block" pos:line="39" pos:column="7">/* Virtual volume.  Ignore. */</comment>
      <continue pos:line="40" pos:column="7">continue;<pos:position pos:line="40" pos:column="16"/></continue>
    <case pos:line="41" pos:column="5">case <expr><literal type="char" pos:line="41" pos:column="10">'V'<pos:position pos:line="41" pos:column="13"/></literal></expr>:<pos:position pos:line="41" pos:column="14"/></case>
      <comment type="block" pos:line="42" pos:column="7">/* Thin volume or thin snapshot.  Ignore. */</comment>
      <continue pos:line="43" pos:column="7">continue;<pos:position pos:line="43" pos:column="16"/></continue>
    }<pos:position pos:line="44" pos:column="6"/></block></switch>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">lvm_submit<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">vg_name<pos:position pos:line="45" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="25">name<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">size<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
