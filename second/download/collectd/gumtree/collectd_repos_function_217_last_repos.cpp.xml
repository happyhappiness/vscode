<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_217_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rdt_preinit<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list> <block pos:line="1" pos:column="30">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">ret<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">g_rdt<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">!=<pos:position pos:line="4" pos:column="15"/></operator> <name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
    <comment type="block" pos:line="5" pos:column="5">/* already initialized if config callback was called before init callback */</comment>
    <return pos:line="6" pos:column="5">return <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">g_rdt<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">calloc<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><literal type="number" pos:line="9" pos:column="18">1<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="21">sizeof<argument_list pos:line="9" pos:column="27">(<argument><expr><operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">g_rdt<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">g_rdt<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ERROR<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">RDT_PLUGIN<pos:position pos:line="11" pos:column="21"/></name> <literal type="string" pos:line="11" pos:column="22">": Failed to allocate memory for rdt context."<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="70"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">ENOMEM<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">pqos_config<pos:position pos:line="15" pos:column="21"/></name></name></type> <name pos:line="15" pos:column="22">pqos<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><block pos:line="15" pos:column="29">{<expr><operator pos:line="15" pos:column="30">.<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">fd_log<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">=<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">-<pos:position pos:line="15" pos:column="41"/></operator><literal type="number" pos:line="15" pos:column="41">1<pos:position pos:line="15" pos:column="42"/></literal></expr>,
                             <expr><operator pos:line="16" pos:column="30">.<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">callback_log<pos:position pos:line="16" pos:column="43"/></name> <operator pos:line="16" pos:column="44">=<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="46">rdt_pqos_log<pos:position pos:line="16" pos:column="58"/></name></expr>,
                             <expr><operator pos:line="17" pos:column="30">.<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">context_log<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">=<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">NULL<pos:position pos:line="17" pos:column="49"/></name></expr>,
                             <expr><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">verbose<pos:position pos:line="18" pos:column="38"/></name> <operator pos:line="18" pos:column="39">=<pos:position pos:line="18" pos:column="40"/></operator> <literal type="number" pos:line="18" pos:column="41">0<pos:position pos:line="18" pos:column="42"/></literal></expr>}<pos:position pos:line="18" pos:column="43"/></block></expr></init></decl>;<pos:position pos:line="18" pos:column="44"/></decl_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">ret<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">pqos_init<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><operator pos:line="20" pos:column="19">&amp;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="20">pqos<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">ret<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">!=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">PQOS_RETVAL_OK<pos:position pos:line="21" pos:column="28"/></name></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29"> <block pos:line="21" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">RDT_PLUGIN<pos:position pos:line="22" pos:column="21"/></name> <literal type="string" pos:line="22" pos:column="22">": Error initializing PQoS library!"<pos:position pos:line="22" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
    <goto pos:line="23" pos:column="5">goto <name pos:line="23" pos:column="10">rdt_preinit_error1<pos:position pos:line="23" pos:column="28"/></name>;<pos:position pos:line="23" pos:column="29"/></goto>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">ret<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <call><name pos:line="26" pos:column="9">pqos_cap_get<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><operator pos:line="26" pos:column="22">&amp;<pos:position pos:line="26" pos:column="27"/></operator><name><name pos:line="26" pos:column="23">g_rdt<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">pqos_cap<pos:position pos:line="26" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="40">&amp;<pos:position pos:line="26" pos:column="45"/></operator><name><name pos:line="26" pos:column="41">g_rdt<pos:position pos:line="26" pos:column="46"/></name><operator pos:line="26" pos:column="46">-&gt;<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="48">pqos_cpu<pos:position pos:line="26" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">ret<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">!=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">PQOS_RETVAL_OK<pos:position pos:line="27" pos:column="28"/></name></expr>)<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29"> <block pos:line="27" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ERROR<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><name pos:line="28" pos:column="11">RDT_PLUGIN<pos:position pos:line="28" pos:column="21"/></name> <literal type="string" pos:line="28" pos:column="22">": Error retrieving PQoS capabilities."<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
    <goto pos:line="29" pos:column="5">goto <name pos:line="29" pos:column="10">rdt_preinit_error2<pos:position pos:line="29" pos:column="28"/></name>;<pos:position pos:line="29" pos:column="29"/></goto>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">ret<pos:position pos:line="32" pos:column="6"/></name> <operator pos:line="32" pos:column="7">=<pos:position pos:line="32" pos:column="8"/></operator> <call><name pos:line="32" pos:column="9">pqos_cap_get_type<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name><name pos:line="32" pos:column="27">g_rdt<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">pqos_cap<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">PQOS_CAP_TYPE_MON<pos:position pos:line="32" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="63">&amp;<pos:position pos:line="32" pos:column="68"/></operator><name><name pos:line="32" pos:column="64">g_rdt<pos:position pos:line="32" pos:column="69"/></name><operator pos:line="32" pos:column="69">-&gt;<pos:position pos:line="32" pos:column="74"/></operator><name pos:line="32" pos:column="71">cap_mon<pos:position pos:line="32" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="80"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">ret<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="14">PQOS_RETVAL_PARAM<pos:position pos:line="33" pos:column="31"/></name></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32"> <block pos:line="33" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">ERROR<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">RDT_PLUGIN<pos:position pos:line="34" pos:column="21"/></name> <literal type="string" pos:line="34" pos:column="22">": Error retrieving monitoring capabilities."<pos:position pos:line="34" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
    <goto pos:line="35" pos:column="5">goto <name pos:line="35" pos:column="10">rdt_preinit_error2<pos:position pos:line="35" pos:column="28"/></name>;<pos:position pos:line="35" pos:column="29"/></goto>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name><name pos:line="38" pos:column="7">g_rdt<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">cap_mon<pos:position pos:line="38" pos:column="21"/></name></name> <operator pos:line="38" pos:column="22">==<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">NULL<pos:position pos:line="38" pos:column="29"/></name></expr>)<pos:position pos:line="38" pos:column="30"/></condition><then pos:line="38" pos:column="30"> <block pos:line="38" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">ERROR<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(
        <argument><expr><name pos:line="40" pos:column="9">RDT_PLUGIN<pos:position pos:line="40" pos:column="19"/></name>
        <literal type="string" pos:line="41" pos:column="9">": Monitoring capability not detected. Nothing to do for the plugin."<pos:position pos:line="41" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt>
    <goto pos:line="42" pos:column="5">goto <name pos:line="42" pos:column="10">rdt_preinit_error2<pos:position pos:line="42" pos:column="28"/></name>;<pos:position pos:line="42" pos:column="29"/></goto>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="45" pos:column="3">/* Reset pqos monitoring groups registers */</comment>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">pqos_mon_reset<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">()<pos:position pos:line="46" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>

  <return pos:line="48" pos:column="3">return <expr><literal type="number" pos:line="48" pos:column="10">0<pos:position pos:line="48" pos:column="11"/></literal></expr>;<pos:position pos:line="48" pos:column="12"/></return>

<label><name pos:line="50" pos:column="1">rdt_preinit_error2<pos:position pos:line="50" pos:column="19"/></name>:<pos:position pos:line="50" pos:column="20"/></label>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">pqos_fini<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">()<pos:position pos:line="51" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>

<label><name pos:line="53" pos:column="1">rdt_preinit_error1<pos:position pos:line="53" pos:column="19"/></name>:<pos:position pos:line="53" pos:column="20"/></label>

  <expr_stmt><expr><call><name pos:line="55" pos:column="3">sfree<pos:position pos:line="55" pos:column="8"/></name><argument_list pos:line="55" pos:column="8">(<argument><expr><name pos:line="55" pos:column="9">g_rdt<pos:position pos:line="55" pos:column="14"/></name></expr></argument>)<pos:position pos:line="55" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="16"/></expr_stmt>

  <return pos:line="57" pos:column="3">return <expr><operator pos:line="57" pos:column="10">-<pos:position pos:line="57" pos:column="11"/></operator><literal type="number" pos:line="57" pos:column="11">1<pos:position pos:line="57" pos:column="12"/></literal></expr>;<pos:position pos:line="57" pos:column="13"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
