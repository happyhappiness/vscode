<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_678_collectd-4.3.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_write<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">data_set_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ds<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">value_list_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">vl<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* If the value is already in the cache, we have received it via the
	 * network. We write it again if forwarding is activated. It's then in
	 * the cache and should we receive it again we will ignore it. */</comment>
	<expr_stmt><expr><name pos:line="8" pos:column="9">status<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">cache_check<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">(<argument><expr><name><name pos:line="8" pos:column="31">ds<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">type<pos:position pos:line="8" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">vl<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">network_config_forward<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">==<pos:position pos:line="9" pos:column="39"/></operator> <literal type="number" pos:line="9" pos:column="40">0<pos:position pos:line="9" pos:column="41"/></literal><operator pos:line="9" pos:column="41">)<pos:position pos:line="9" pos:column="42"/></operator>
			<operator pos:line="10" pos:column="25">&amp;&amp;<pos:position pos:line="10" pos:column="35"/></operator> <operator pos:line="10" pos:column="28">(<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">status<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">!=<pos:position pos:line="10" pos:column="38"/></operator> <literal type="number" pos:line="10" pos:column="39">0<pos:position pos:line="10" pos:column="40"/></literal><operator pos:line="10" pos:column="40">)<pos:position pos:line="10" pos:column="41"/></operator></expr>)<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal><operator pos:line="11" pos:column="26">)<pos:position pos:line="11" pos:column="27"/></operator></expr>;<pos:position pos:line="11" pos:column="28"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">pthread_mutex_lock<pos:position pos:line="13" pos:column="27"/></name> <argument_list pos:line="13" pos:column="28">(<argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">send_buffer_lock<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">add_to_buffer<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">send_buffer_ptr<pos:position pos:line="15" pos:column="48"/></name></expr></argument>,
			<argument><expr><sizeof pos:line="16" pos:column="25">sizeof <argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">send_buffer<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></sizeof> <operator pos:line="16" pos:column="46">-<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">send_buffer_fill<pos:position pos:line="16" pos:column="64"/></name></expr></argument>,
			<argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="26">send_buffer_vl<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">send_buffer_type<pos:position pos:line="17" pos:column="58"/></name></expr></argument>,
			<argument><expr><name pos:line="18" pos:column="25">ds<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">vl<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">&gt;=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="23">0<pos:position pos:line="19" pos:column="24"/></literal></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25">
	<block pos:line="20" pos:column="9">{
		<comment type="block" pos:line="21" pos:column="17">/* status == bytes added to the buffer */</comment>
		<expr_stmt><expr><name pos:line="22" pos:column="17">send_buffer_fill<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">+=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">status<pos:position pos:line="22" pos:column="43"/></name></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">send_buffer_ptr<pos:position pos:line="23" pos:column="32"/></name>  <operator pos:line="23" pos:column="34">+=<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">status<pos:position pos:line="23" pos:column="43"/></name></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then>
	<else pos:line="25" pos:column="9">else
	<block pos:line="26" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">flush_buffer<pos:position pos:line="27" pos:column="29"/></name> <argument_list pos:line="27" pos:column="30">()<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>

		<expr_stmt><expr><name pos:line="29" pos:column="17">status<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <call><name pos:line="29" pos:column="26">add_to_buffer<pos:position pos:line="29" pos:column="39"/></name> <argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">send_buffer_ptr<pos:position pos:line="29" pos:column="56"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="30" pos:column="33">sizeof <argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">send_buffer<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></sizeof> <operator pos:line="30" pos:column="54">-<pos:position pos:line="30" pos:column="55"/></operator> <name pos:line="30" pos:column="56">send_buffer_fill<pos:position pos:line="30" pos:column="72"/></name></expr></argument>,
				<argument><expr><operator pos:line="31" pos:column="33">&amp;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="34">send_buffer_vl<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">send_buffer_type<pos:position pos:line="31" pos:column="66"/></name></expr></argument>,
				<argument><expr><name pos:line="32" pos:column="33">ds<pos:position pos:line="32" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="37">vl<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">status<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">&gt;=<pos:position pos:line="34" pos:column="33"/></operator> <literal type="number" pos:line="34" pos:column="31">0<pos:position pos:line="34" pos:column="32"/></literal></expr>)<pos:position pos:line="34" pos:column="33"/></condition><then pos:line="34" pos:column="33">
		<block pos:line="35" pos:column="17">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">send_buffer_fill<pos:position pos:line="36" pos:column="41"/></name> <operator pos:line="36" pos:column="42">+=<pos:position pos:line="36" pos:column="44"/></operator> <name pos:line="36" pos:column="45">status<pos:position pos:line="36" pos:column="51"/></name></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">send_buffer_ptr<pos:position pos:line="37" pos:column="40"/></name>  <operator pos:line="37" pos:column="42">+=<pos:position pos:line="37" pos:column="44"/></operator> <name pos:line="37" pos:column="45">status<pos:position pos:line="37" pos:column="51"/></name></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></else></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">status<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">&lt;<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="22">0<pos:position pos:line="41" pos:column="23"/></literal></expr>)<pos:position pos:line="41" pos:column="24"/></condition><then pos:line="41" pos:column="24">
	<block pos:line="42" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">ERROR<pos:position pos:line="43" pos:column="22"/></name> <argument_list pos:line="43" pos:column="23">(<argument><expr><literal type="string" pos:line="43" pos:column="24">"network plugin: Unable to append to the "<pos:position pos:line="43" pos:column="66"/></literal>
				<literal type="string" pos:line="44" pos:column="33">"buffer for some weird reason"<pos:position pos:line="44" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then>
	<elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><operator pos:line="46" pos:column="18">(<pos:position pos:line="46" pos:column="19"/></operator><sizeof pos:line="46" pos:column="19">sizeof <argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">send_buffer<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></sizeof> <operator pos:line="46" pos:column="40">-<pos:position pos:line="46" pos:column="41"/></operator> <name pos:line="46" pos:column="42">send_buffer_fill<pos:position pos:line="46" pos:column="58"/></name><operator pos:line="46" pos:column="58">)<pos:position pos:line="46" pos:column="59"/></operator> <operator pos:line="46" pos:column="60">&lt;<pos:position pos:line="46" pos:column="64"/></operator> <literal type="number" pos:line="46" pos:column="62">15<pos:position pos:line="46" pos:column="64"/></literal></expr>)<pos:position pos:line="46" pos:column="65"/></condition><then pos:line="46" pos:column="65">
	<block pos:line="47" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">flush_buffer<pos:position pos:line="48" pos:column="29"/></name> <argument_list pos:line="48" pos:column="30">()<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="51" pos:column="9">pthread_mutex_unlock<pos:position pos:line="51" pos:column="29"/></name> <argument_list pos:line="51" pos:column="30">(<argument><expr><operator pos:line="51" pos:column="31">&amp;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="32">send_buffer_lock<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>

	<return pos:line="53" pos:column="9">return <expr><operator pos:line="53" pos:column="16">(<pos:position pos:line="53" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">status<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">&lt;<pos:position pos:line="53" pos:column="29"/></operator> <literal type="number" pos:line="53" pos:column="27">0<pos:position pos:line="53" pos:column="28"/></literal><operator pos:line="53" pos:column="28">)<pos:position pos:line="53" pos:column="29"/></operator></expr> ?<pos:position pos:line="53" pos:column="31"/></condition><then pos:line="53" pos:column="31"> <expr><operator pos:line="53" pos:column="32">-<pos:position pos:line="53" pos:column="33"/></operator><literal type="number" pos:line="53" pos:column="33">1<pos:position pos:line="53" pos:column="34"/></literal></expr> <pos:position pos:line="53" pos:column="35"/></then><else pos:line="53" pos:column="35">: <expr><literal type="number" pos:line="53" pos:column="37">0<pos:position pos:line="53" pos:column="38"/></literal></expr></else></ternary><operator pos:line="53" pos:column="38">)<pos:position pos:line="53" pos:column="39"/></operator></expr>;<pos:position pos:line="53" pos:column="40"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
