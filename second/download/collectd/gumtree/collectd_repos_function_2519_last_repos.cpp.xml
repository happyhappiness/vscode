<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2519_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_sign_sha256<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">signature<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">signature_len<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">void<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">payload<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">payload_size<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">lcc_network_parse_options_t<pos:position pos:line="3" pos:column="57"/></name> <specifier pos:line="3" pos:column="58">const<pos:position pos:line="3" pos:column="63"/></specifier> <modifier pos:line="3" pos:column="64">*<pos:position pos:line="3" pos:column="65"/></modifier></type><name pos:line="3" pos:column="65">opts<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list> <block pos:line="3" pos:column="71">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name><name pos:line="4" pos:column="7">opts<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">-&gt;<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="13">password_lookup<pos:position pos:line="4" pos:column="28"/></name></name> <operator pos:line="4" pos:column="29">==<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">NULL<pos:position pos:line="4" pos:column="36"/></name></expr>)<pos:position pos:line="4" pos:column="37"/></condition><then pos:line="4" pos:column="37"> <block pos:line="4" pos:column="38">{
    <comment type="block" pos:line="5" pos:column="5">/* The sender signed the packet but we can't verify it. Handle it as if it
     * were unsigned, i.e. security level NONE. */</comment>
    <return pos:line="7" pos:column="5">return <expr><call><name pos:line="7" pos:column="12">network_parse<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">payload<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">payload_size<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="49">NONE<pos:position pos:line="7" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="55">opts<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></return>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">buffer_t<pos:position pos:line="10" pos:column="11"/></name> <modifier pos:line="10" pos:column="12">*<pos:position pos:line="10" pos:column="13"/></modifier></type><name pos:line="10" pos:column="13">b<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><operator pos:line="10" pos:column="17">&amp;<pos:position pos:line="10" pos:column="22"/></operator><operator pos:line="10" pos:column="18">(<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">buffer_t<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator><block pos:line="10" pos:column="28">{
      <expr><operator pos:line="11" pos:column="7">.<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">data<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">signature<pos:position pos:line="11" pos:column="24"/></name></expr>, <expr><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">len<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">=<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">signature_len<pos:position pos:line="11" pos:column="46"/></name></expr>,
  }<pos:position pos:line="12" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="5"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">uint8_t<pos:position pos:line="14" pos:column="10"/></name></type> <name><name pos:line="14" pos:column="11">hash<pos:position pos:line="14" pos:column="15"/></name><index pos:line="14" pos:column="15">[<expr><literal type="number" pos:line="14" pos:column="16">32<pos:position pos:line="14" pos:column="18"/></literal></expr>]<pos:position pos:line="14" pos:column="19"/></index></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">buffer_next<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">b<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">hash<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="28">sizeof<argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">hash<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">EINVAL<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">username<pos:position pos:line="18" pos:column="16"/></name><index pos:line="18" pos:column="16">[<expr><name><name pos:line="18" pos:column="17">b<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">len<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">+<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr>]<pos:position pos:line="18" pos:column="28"/></index></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memset<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">username<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="23">sizeof<argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">username<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">buffer_next<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">b<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">username<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="32">sizeof<argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">username<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></sizeof> <operator pos:line="20" pos:column="49">-<pos:position pos:line="20" pos:column="50"/></operator> <literal type="number" pos:line="20" pos:column="51">1<pos:position pos:line="20" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="54"/></condition><then pos:line="20" pos:column="54"> <block pos:line="20" pos:column="55">{
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">EINVAL<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="24" pos:column="3">char<pos:position pos:line="24" pos:column="7"/></name> <specifier pos:line="24" pos:column="8">const<pos:position pos:line="24" pos:column="13"/></specifier> <modifier pos:line="24" pos:column="14">*<pos:position pos:line="24" pos:column="15"/></modifier></type><name pos:line="24" pos:column="15">password<pos:position pos:line="24" pos:column="23"/></name> <init pos:line="24" pos:column="24">= <expr><call><name><name pos:line="24" pos:column="26">opts<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">password_lookup<pos:position pos:line="24" pos:column="47"/></name></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name pos:line="24" pos:column="48">username<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="58"/></decl_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">!<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">password<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><call><name pos:line="26" pos:column="12">network_parse<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">payload<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">payload_size<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">NONE<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">opts<pos:position pos:line="26" pos:column="59"/></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="61"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="28" pos:column="3">int<pos:position pos:line="28" pos:column="6"/></name></type> <name pos:line="28" pos:column="7">status<pos:position pos:line="28" pos:column="13"/></name> <init pos:line="28" pos:column="14">= <expr><call><name pos:line="28" pos:column="16">verify_sha256<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">payload<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">payload_size<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">username<pos:position pos:line="28" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="63">password<pos:position pos:line="28" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="73">hash<pos:position pos:line="28" pos:column="77"/></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="79"/></decl_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">status<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">!=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="17">0<pos:position pos:line="29" pos:column="18"/></literal></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19">
    <block type="pseudo"><return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">status<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></return></block></then></if>

  <return pos:line="32" pos:column="3">return <expr><call><name pos:line="32" pos:column="10">network_parse<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">payload<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">payload_size<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="47">SIGN<pos:position pos:line="32" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">opts<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
