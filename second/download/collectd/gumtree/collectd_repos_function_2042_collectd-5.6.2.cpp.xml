<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2042_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpusleep_read<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list> <block pos:line="1" pos:column="32">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">timespec<pos:position pos:line="2" pos:column="18"/></name></name></type> <name pos:line="2" pos:column="19">b<pos:position pos:line="2" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="22">m<pos:position pos:line="2" pos:column="23"/></name></decl>;<pos:position pos:line="2" pos:column="24"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name pos:line="3" pos:column="7">clock_gettime<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">CLOCK_BOOTTIME<pos:position pos:line="3" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="3" pos:column="37">&amp;<pos:position pos:line="3" pos:column="42"/></operator><name pos:line="3" pos:column="38">b<pos:position pos:line="3" pos:column="39"/></name></expr></argument>)<pos:position pos:line="3" pos:column="40"/></argument_list></call> <operator pos:line="3" pos:column="41">&lt;<pos:position pos:line="3" pos:column="45"/></operator> <literal type="number" pos:line="3" pos:column="43">0<pos:position pos:line="3" pos:column="44"/></literal></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45"> <block pos:line="3" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">ERROR<pos:position pos:line="4" pos:column="10"/></name><argument_list pos:line="4" pos:column="10">(<argument><expr><literal type="string" pos:line="4" pos:column="11">"cpusleep plugin: clock_boottime failed"<pos:position pos:line="4" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="53"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><operator pos:line="5" pos:column="12">(<pos:position pos:line="5" pos:column="13"/></operator><operator pos:line="5" pos:column="13">-<pos:position pos:line="5" pos:column="14"/></operator><literal type="number" pos:line="5" pos:column="14">1<pos:position pos:line="5" pos:column="15"/></literal><operator pos:line="5" pos:column="15">)<pos:position pos:line="5" pos:column="16"/></operator></expr>;<pos:position pos:line="5" pos:column="17"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">clock_gettime<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">CLOCK_MONOTONIC<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">m<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call> <operator pos:line="8" pos:column="42">&lt;<pos:position pos:line="8" pos:column="46"/></operator> <literal type="number" pos:line="8" pos:column="44">0<pos:position pos:line="8" pos:column="45"/></literal></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46"> <block pos:line="8" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ERROR<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><literal type="string" pos:line="9" pos:column="11">"cpusleep plugin: clock_monotonic failed"<pos:position pos:line="9" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator></expr>;<pos:position pos:line="10" pos:column="17"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="13" pos:column="3">// to avoid false positives in counter overflow due to reboot,</comment>
  <comment type="line" pos:line="14" pos:column="3">// derive is used. Sleep is calculated in milliseconds</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">derive_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">diffsec<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><name><name pos:line="15" pos:column="22">b<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">tv_sec<pos:position pos:line="15" pos:column="30"/></name></name> <operator pos:line="15" pos:column="31">-<pos:position pos:line="15" pos:column="32"/></operator> <name><name pos:line="15" pos:column="33">m<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">tv_sec<pos:position pos:line="15" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">derive_t<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">diffnsec<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><name><name pos:line="16" pos:column="23">b<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">tv_nsec<pos:position pos:line="16" pos:column="32"/></name></name> <operator pos:line="16" pos:column="33">-<pos:position pos:line="16" pos:column="34"/></operator> <name><name pos:line="16" pos:column="35">m<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">.<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">tv_nsec<pos:position pos:line="16" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">derive_t<pos:position pos:line="17" pos:column="11"/></name></type> <name pos:line="17" pos:column="12">sleep<pos:position pos:line="17" pos:column="17"/></name> <init pos:line="17" pos:column="18">= <expr><name pos:line="17" pos:column="20">diffsec<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">1000<pos:position pos:line="17" pos:column="34"/></literal> <operator pos:line="17" pos:column="35">+<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">diffnsec<pos:position pos:line="17" pos:column="45"/></name> <operator pos:line="17" pos:column="46">/<pos:position pos:line="17" pos:column="47"/></operator> <literal type="number" pos:line="17" pos:column="48">1000000<pos:position pos:line="17" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="56"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">cpusleep_submit<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">sleep<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>

  <return pos:line="21" pos:column="3">return <expr><operator pos:line="21" pos:column="10">(<pos:position pos:line="21" pos:column="11"/></operator><literal type="number" pos:line="21" pos:column="11">0<pos:position pos:line="21" pos:column="12"/></literal><operator pos:line="21" pos:column="12">)<pos:position pos:line="21" pos:column="13"/></operator></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
