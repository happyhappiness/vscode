<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1903_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ctail_init<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">timespec<pos:position pos:line="3" pos:column="18"/></name></name></type> <name pos:line="3" pos:column="19">cb_interval<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">str<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><literal type="number" pos:line="4" pos:column="12">255<pos:position pos:line="4" pos:column="15"/></literal></expr>]<pos:position pos:line="4" pos:column="16"/></index></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">user_data_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">ud<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">i<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">tail_match_list_num<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">WARNING<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"tail plugin: File list is empty. Returning an error."<pos:position pos:line="10" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="70"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memset<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><operator pos:line="14" pos:column="10">&amp;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="11">ud<pos:position pos:line="14" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="15">'\0'<pos:position pos:line="14" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="21">sizeof<argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">ud<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>

  <for pos:line="16" pos:column="3">for <control pos:line="16" pos:column="7">(<init><expr><name pos:line="16" pos:column="8">i<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></init> <condition><expr><name pos:line="16" pos:column="15">i<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="19">tail_match_list_num<pos:position pos:line="16" pos:column="38"/></name></expr>;<pos:position pos:line="16" pos:column="39"/></condition> <incr><expr><name pos:line="16" pos:column="40">i<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">++<pos:position pos:line="16" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="44"/></control>
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">ud<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">.<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">data<pos:position pos:line="18" pos:column="12"/></name></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">void<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator><name><name pos:line="18" pos:column="23">tail_match_list<pos:position pos:line="18" pos:column="38"/></name><index pos:line="18" pos:column="38">[<expr><name pos:line="18" pos:column="39">i<pos:position pos:line="18" pos:column="40"/></name></expr>]<pos:position pos:line="18" pos:column="41"/></index></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ssnprintf<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">str<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="20">sizeof<argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">str<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="33">"tail-%zu"<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">i<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">CDTIME_T_TO_TIMESPEC<pos:position pos:line="20" pos:column="25"/></name> <argument_list pos:line="20" pos:column="26">(<argument><expr><name><name pos:line="20" pos:column="27">tail_match_list_intervals<pos:position pos:line="20" pos:column="52"/></name><index pos:line="20" pos:column="52">[<expr><name pos:line="20" pos:column="53">i<pos:position pos:line="20" pos:column="54"/></name></expr>]<pos:position pos:line="20" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="57">&amp;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="58">cb_interval<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">plugin_register_complex_read<pos:position pos:line="21" pos:column="33"/></name> <argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">NULL<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">str<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">ctail_read<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">&amp;<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="59">cb_interval<pos:position pos:line="21" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="72">&amp;<pos:position pos:line="21" pos:column="77"/></operator><name pos:line="21" pos:column="73">ud<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></for>

  <return pos:line="24" pos:column="3">return <expr><operator pos:line="24" pos:column="10">(<pos:position pos:line="24" pos:column="11"/></operator><literal type="number" pos:line="24" pos:column="11">0<pos:position pos:line="24" pos:column="12"/></literal><operator pos:line="24" pos:column="12">)<pos:position pos:line="24" pos:column="13"/></operator></expr>;<pos:position pos:line="24" pos:column="14"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
