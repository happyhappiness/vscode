<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1737_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ovs_db_result_cb<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">ovs_db_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">pdb<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">yajl_val<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">jnode<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list> <block pos:line="1" pos:column="60">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">ovs_callback_t<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">cb<pos:position pos:line="2" pos:column="21"/></name> <init pos:line="2" pos:column="22">= <expr><name pos:line="2" pos:column="24">NULL<pos:position pos:line="2" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">yajl_val<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">jresult<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">yajl_val<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">jerror<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">yajl_val<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">jid<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name><name pos:line="6" pos:column="15">result_path<pos:position pos:line="6" pos:column="26"/></name><index pos:line="6" pos:column="26">[]<pos:position pos:line="6" pos:column="28"/></index></name> <init pos:line="6" pos:column="29">= <expr><block pos:line="6" pos:column="31">{<expr><literal type="string" pos:line="6" pos:column="32">"result"<pos:position pos:line="6" pos:column="40"/></literal></expr>, <expr><name pos:line="6" pos:column="42">NULL<pos:position pos:line="6" pos:column="46"/></name></expr>}<pos:position pos:line="6" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name><name pos:line="7" pos:column="15">error_path<pos:position pos:line="7" pos:column="25"/></name><index pos:line="7" pos:column="25">[]<pos:position pos:line="7" pos:column="27"/></index></name> <init pos:line="7" pos:column="28">= <expr><block pos:line="7" pos:column="30">{<expr><literal type="string" pos:line="7" pos:column="31">"error"<pos:position pos:line="7" pos:column="38"/></literal></expr>, <expr><name pos:line="7" pos:column="40">NULL<pos:position pos:line="7" pos:column="44"/></name></expr>}<pos:position pos:line="7" pos:column="45"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name><name pos:line="8" pos:column="15">id_path<pos:position pos:line="8" pos:column="22"/></name><index pos:line="8" pos:column="22">[]<pos:position pos:line="8" pos:column="24"/></index></name> <init pos:line="8" pos:column="25">= <expr><block pos:line="8" pos:column="27">{<expr><literal type="string" pos:line="8" pos:column="28">"id"<pos:position pos:line="8" pos:column="32"/></literal></expr>, <expr><name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr>}<pos:position pos:line="8" pos:column="39"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">jresult<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">yajl_tree_get<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">jnode<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">result_path<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="47">yajl_t_any<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">jerror<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">yajl_tree_get<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">jnode<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">error_path<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="45">yajl_t_any<pos:position pos:line="11" pos:column="55"/></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">jid<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">yajl_tree_get<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">jnode<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">id_path<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">yajl_t_string<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* check &amp; get result attributes */</comment>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">!<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">jresult<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">||<pos:position pos:line="15" pos:column="18"/></operator> <operator pos:line="15" pos:column="19">!<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">jerror<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">||<pos:position pos:line="15" pos:column="29"/></operator> <operator pos:line="15" pos:column="30">!<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">jid<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">-<pos:position pos:line="16" pos:column="13"/></operator><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></return></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* try to find registered callback */</comment>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">pthread_mutex_lock<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><operator pos:line="19" pos:column="22">&amp;<pos:position pos:line="19" pos:column="27"/></operator><name><name pos:line="19" pos:column="23">pdb<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">mutex<pos:position pos:line="19" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">cb<pos:position pos:line="20" pos:column="5"/></name> <operator pos:line="20" pos:column="6">=<pos:position pos:line="20" pos:column="7"/></operator> <call><name pos:line="20" pos:column="8">ovs_db_table_callback_get<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">pdb<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">jid<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">cb<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">!=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">NULL<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&amp;&amp;<pos:position pos:line="21" pos:column="28"/></operator> <name><name pos:line="21" pos:column="21">cb<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">result<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">call<pos:position pos:line="21" pos:column="36"/></name></name> <operator pos:line="21" pos:column="37">!=<pos:position pos:line="21" pos:column="39"/></operator> <name pos:line="21" pos:column="40">NULL<pos:position pos:line="21" pos:column="44"/></name></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <block pos:line="21" pos:column="46">{
    <comment type="block" pos:line="22" pos:column="5">/* call registered callback */</comment>
    <expr_stmt><expr><call><name><name pos:line="23" pos:column="5">cb<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">result<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">.<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">call<pos:position pos:line="23" pos:column="20"/></name></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">jresult<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="30">jerror<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* unlock owner of the reply */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">sem_post<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><operator pos:line="25" pos:column="14">&amp;<pos:position pos:line="25" pos:column="19"/></operator><name><name pos:line="25" pos:column="15">cb<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">result<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">.<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">sync<pos:position pos:line="25" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">pthread_mutex_unlock<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><operator pos:line="28" pos:column="24">&amp;<pos:position pos:line="28" pos:column="29"/></operator><name><name pos:line="28" pos:column="25">pdb<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">mutex<pos:position pos:line="28" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">0<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
