<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_169.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_values<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">ret_values_num<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">double<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier><modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ret_values<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier><modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">ret_values_names<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_un<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">sa<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">fh_in<pos:position pos:line="7" pos:column="20"/></name></decl>, <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="23">fh_out<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">buffer<pos:position pos:line="8" pos:column="20"/></name><index pos:line="8" pos:column="20">[<expr><literal type="number" pos:line="8" pos:column="21">4096<pos:position pos:line="8" pos:column="25"/></literal></expr>]<pos:position pos:line="8" pos:column="26"/></index></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">values_num<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">double<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">values<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier><modifier pos:line="12" pos:column="15">*<pos:position pos:line="12" pos:column="16"/></modifier></type><name pos:line="12" pos:column="16">values_names<pos:position pos:line="12" pos:column="28"/></name></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">i<pos:position pos:line="14" pos:column="14"/></name></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">fd<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">socket<pos:position pos:line="16" pos:column="20"/></name> <argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">PF_UNIX<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">SOCK_STREAM<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="44">0<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">fd<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">&lt;<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>)<pos:position pos:line="17" pos:column="20"/></condition><then pos:line="17" pos:column="20">
	<block pos:line="18" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">fprintf<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">stderr<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"socket failed: %s\n"<pos:position pos:line="19" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">strerror<pos:position pos:line="20" pos:column="41"/></name> <argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">errno<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">-<pos:position pos:line="21" pos:column="26"/></operator><literal type="number" pos:line="21" pos:column="26">1<pos:position pos:line="21" pos:column="27"/></literal><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator></expr>;<pos:position pos:line="21" pos:column="29"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">memset<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><operator pos:line="24" pos:column="17">&amp;<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="18">sa<pos:position pos:line="24" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="22">'\0'<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="28">sizeof <argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">sa<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">sa<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">.<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">sun_family<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">AF_UNIX<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strncpy<pos:position pos:line="26" pos:column="16"/></name> <argument_list pos:line="26" pos:column="17">(<argument><expr><name><name pos:line="26" pos:column="18">sa<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">sun_path<pos:position pos:line="26" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">socket_file_g<pos:position pos:line="26" pos:column="44"/></name></expr></argument>,
			<argument><expr><sizeof pos:line="27" pos:column="25">sizeof <argument_list pos:line="27" pos:column="32">(<argument><expr><name><name pos:line="27" pos:column="33">sa<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">sun_path<pos:position pos:line="27" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></sizeof> <operator pos:line="27" pos:column="46">-<pos:position pos:line="27" pos:column="47"/></operator> <literal type="number" pos:line="27" pos:column="48">1<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>

	<expr_stmt><expr><name pos:line="29" pos:column="9">status<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">connect<pos:position pos:line="29" pos:column="25"/></name> <argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">fd<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="31">(<pos:position pos:line="29" pos:column="32"/></operator>struct <name pos:line="29" pos:column="39">sockaddr<pos:position pos:line="29" pos:column="47"/></name> <operator pos:line="29" pos:column="48">*<pos:position pos:line="29" pos:column="49"/></operator><operator pos:line="29" pos:column="49">)<pos:position pos:line="29" pos:column="50"/></operator> <operator pos:line="29" pos:column="51">&amp;<pos:position pos:line="29" pos:column="56"/></operator><name pos:line="29" pos:column="52">sa<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="56">sizeof <argument_list pos:line="29" pos:column="63">(<argument><expr><name pos:line="29" pos:column="64">sa<pos:position pos:line="29" pos:column="66"/></name></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">status<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">!=<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="23">0<pos:position pos:line="30" pos:column="24"/></literal></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25">
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">fprintf<pos:position pos:line="32" pos:column="24"/></name> <argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">stderr<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="34">"connect failed: %s\n"<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="33" pos:column="33">strerror<pos:position pos:line="33" pos:column="41"/></name> <argument_list pos:line="33" pos:column="42">(<argument><expr><name pos:line="33" pos:column="43">errno<pos:position pos:line="33" pos:column="48"/></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><operator pos:line="34" pos:column="25">-<pos:position pos:line="34" pos:column="26"/></operator><literal type="number" pos:line="34" pos:column="26">1<pos:position pos:line="34" pos:column="27"/></literal><operator pos:line="34" pos:column="27">)<pos:position pos:line="34" pos:column="28"/></operator></expr>;<pos:position pos:line="34" pos:column="29"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">fh_in<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <call><name pos:line="37" pos:column="17">fdopen<pos:position pos:line="37" pos:column="23"/></name> <argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">fd<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="29">"r"<pos:position pos:line="37" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">fh_in<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">==<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">NULL<pos:position pos:line="38" pos:column="26"/></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27">
	<block pos:line="39" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">fprintf<pos:position pos:line="40" pos:column="24"/></name> <argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">stderr<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="34">"fdopen failed: %s\n"<pos:position pos:line="40" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="41" pos:column="33">strerror<pos:position pos:line="41" pos:column="41"/></name> <argument_list pos:line="41" pos:column="42">(<argument><expr><name pos:line="41" pos:column="43">errno<pos:position pos:line="41" pos:column="48"/></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">close<pos:position pos:line="42" pos:column="22"/></name> <argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">fd<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
		<return pos:line="43" pos:column="17">return <expr><operator pos:line="43" pos:column="24">(<pos:position pos:line="43" pos:column="25"/></operator><operator pos:line="43" pos:column="25">-<pos:position pos:line="43" pos:column="26"/></operator><literal type="number" pos:line="43" pos:column="26">1<pos:position pos:line="43" pos:column="27"/></literal><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator></expr>;<pos:position pos:line="43" pos:column="29"/></return>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="46" pos:column="9">fh_out<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <call><name pos:line="46" pos:column="18">fdopen<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">fd<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="30">"w"<pos:position pos:line="46" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">fh_out<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">==<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">NULL<pos:position pos:line="47" pos:column="27"/></name></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28">
	<block pos:line="48" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">fprintf<pos:position pos:line="49" pos:column="24"/></name> <argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">stderr<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="34">"fdopen failed: %s\n"<pos:position pos:line="49" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="50" pos:column="33">strerror<pos:position pos:line="50" pos:column="41"/></name> <argument_list pos:line="50" pos:column="42">(<argument><expr><name pos:line="50" pos:column="43">errno<pos:position pos:line="50" pos:column="48"/></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">fclose<pos:position pos:line="51" pos:column="23"/></name> <argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">fh_in<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
		<return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><operator pos:line="52" pos:column="25">-<pos:position pos:line="52" pos:column="26"/></operator><literal type="number" pos:line="52" pos:column="26">1<pos:position pos:line="52" pos:column="27"/></literal><operator pos:line="52" pos:column="27">)<pos:position pos:line="52" pos:column="28"/></operator></expr>;<pos:position pos:line="52" pos:column="29"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="55" pos:column="9">fprintf<pos:position pos:line="55" pos:column="16"/></name> <argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">fh_out<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"GETVAL %s/%s\n"<pos:position pos:line="55" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="44">hostname_g<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="56">value_string_g<pos:position pos:line="55" pos:column="70"/></name></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">fflush<pos:position pos:line="56" pos:column="15"/></name> <argument_list pos:line="56" pos:column="16">(<argument><expr><name pos:line="56" pos:column="17">fh_out<pos:position pos:line="56" pos:column="23"/></name></expr></argument>)<pos:position pos:line="56" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">fgets<pos:position pos:line="58" pos:column="18"/></name> <argument_list pos:line="58" pos:column="19">(<argument><expr><name pos:line="58" pos:column="20">buffer<pos:position pos:line="58" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="28">sizeof <argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">buffer<pos:position pos:line="58" pos:column="42"/></name></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">fh_in<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call> <operator pos:line="58" pos:column="52">==<pos:position pos:line="58" pos:column="54"/></operator> <name pos:line="58" pos:column="55">NULL<pos:position pos:line="58" pos:column="59"/></name></expr>)<pos:position pos:line="58" pos:column="60"/></condition><then pos:line="58" pos:column="60">
	<block pos:line="59" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">fprintf<pos:position pos:line="60" pos:column="24"/></name> <argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">stderr<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="34">"fgets failed: %s\n"<pos:position pos:line="60" pos:column="54"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="61" pos:column="33">strerror<pos:position pos:line="61" pos:column="41"/></name> <argument_list pos:line="61" pos:column="42">(<argument><expr><name pos:line="61" pos:column="43">errno<pos:position pos:line="61" pos:column="48"/></name></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">fclose<pos:position pos:line="62" pos:column="23"/></name> <argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">fh_in<pos:position pos:line="62" pos:column="30"/></name></expr></argument>)<pos:position pos:line="62" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">fclose<pos:position pos:line="63" pos:column="23"/></name> <argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">fh_out<pos:position pos:line="63" pos:column="31"/></name></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt>
		<return pos:line="64" pos:column="17">return <expr><operator pos:line="64" pos:column="24">(<pos:position pos:line="64" pos:column="25"/></operator><operator pos:line="64" pos:column="25">-<pos:position pos:line="64" pos:column="26"/></operator><literal type="number" pos:line="64" pos:column="26">1<pos:position pos:line="64" pos:column="27"/></literal><operator pos:line="64" pos:column="27">)<pos:position pos:line="64" pos:column="28"/></operator></expr>;<pos:position pos:line="64" pos:column="29"/></return>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">fclose<pos:position pos:line="66" pos:column="15"/></name> <argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">fh_in<pos:position pos:line="66" pos:column="22"/></name></expr></argument>)<pos:position pos:line="66" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt> <expr_stmt><expr><name pos:line="66" pos:column="25">fh_in<pos:position pos:line="66" pos:column="30"/></name> <operator pos:line="66" pos:column="31">=<pos:position pos:line="66" pos:column="32"/></operator> <name pos:line="66" pos:column="33">NULL<pos:position pos:line="66" pos:column="37"/></name></expr>;<pos:position pos:line="66" pos:column="38"/></expr_stmt> <expr_stmt><expr><name pos:line="66" pos:column="39">fd<pos:position pos:line="66" pos:column="41"/></name> <operator pos:line="66" pos:column="42">=<pos:position pos:line="66" pos:column="43"/></operator> <operator pos:line="66" pos:column="44">-<pos:position pos:line="66" pos:column="45"/></operator><literal type="number" pos:line="66" pos:column="45">1<pos:position pos:line="66" pos:column="46"/></literal></expr>;<pos:position pos:line="66" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">fclose<pos:position pos:line="67" pos:column="15"/></name> <argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">fh_out<pos:position pos:line="67" pos:column="23"/></name></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt> <expr_stmt><expr><name pos:line="67" pos:column="26">fh_out<pos:position pos:line="67" pos:column="32"/></name> <operator pos:line="67" pos:column="33">=<pos:position pos:line="67" pos:column="34"/></operator> <name pos:line="67" pos:column="35">NULL<pos:position pos:line="67" pos:column="39"/></name></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><name pos:line="69" pos:column="9">values_num<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">=<pos:position pos:line="69" pos:column="21"/></operator> <call><name pos:line="69" pos:column="22">atoi<pos:position pos:line="69" pos:column="26"/></name> <argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">buffer<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">values_num<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">&lt;<pos:position pos:line="70" pos:column="28"/></operator> <literal type="number" pos:line="70" pos:column="26">1<pos:position pos:line="70" pos:column="27"/></literal></expr>)<pos:position pos:line="70" pos:column="28"/></condition><then pos:line="70" pos:column="28">
		<block type="pseudo"><return pos:line="71" pos:column="17">return <expr><operator pos:line="71" pos:column="24">(<pos:position pos:line="71" pos:column="25"/></operator><operator pos:line="71" pos:column="25">-<pos:position pos:line="71" pos:column="26"/></operator><literal type="number" pos:line="71" pos:column="26">1<pos:position pos:line="71" pos:column="27"/></literal><operator pos:line="71" pos:column="27">)<pos:position pos:line="71" pos:column="28"/></operator></expr>;<pos:position pos:line="71" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="73" pos:column="9">values<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <operator pos:line="73" pos:column="18">(<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">double<pos:position pos:line="73" pos:column="25"/></name> <operator pos:line="73" pos:column="26">*<pos:position pos:line="73" pos:column="27"/></operator><operator pos:line="73" pos:column="27">)<pos:position pos:line="73" pos:column="28"/></operator> <call><name pos:line="73" pos:column="29">malloc<pos:position pos:line="73" pos:column="35"/></name> <argument_list pos:line="73" pos:column="36">(<argument><expr><name pos:line="73" pos:column="37">values_num<pos:position pos:line="73" pos:column="47"/></name> <operator pos:line="73" pos:column="48">*<pos:position pos:line="73" pos:column="49"/></operator> <sizeof pos:line="73" pos:column="50">sizeof <argument_list pos:line="73" pos:column="57">(<argument><expr><name pos:line="73" pos:column="58">double<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="67"/></expr_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">values<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">==<pos:position pos:line="74" pos:column="22"/></operator> <name pos:line="74" pos:column="23">NULL<pos:position pos:line="74" pos:column="27"/></name></expr>)<pos:position pos:line="74" pos:column="28"/></condition><then pos:line="74" pos:column="28">
	<block pos:line="75" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">fprintf<pos:position pos:line="76" pos:column="24"/></name> <argument_list pos:line="76" pos:column="25">(<argument><expr><name pos:line="76" pos:column="26">stderr<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="34">"malloc failed: %s\n"<pos:position pos:line="76" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="77" pos:column="33">strerror<pos:position pos:line="77" pos:column="41"/></name> <argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">errno<pos:position pos:line="77" pos:column="48"/></name></expr></argument>)<pos:position pos:line="77" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="51"/></expr_stmt>
		<return pos:line="78" pos:column="17">return <expr><operator pos:line="78" pos:column="24">(<pos:position pos:line="78" pos:column="25"/></operator><operator pos:line="78" pos:column="25">-<pos:position pos:line="78" pos:column="26"/></operator><literal type="number" pos:line="78" pos:column="26">1<pos:position pos:line="78" pos:column="27"/></literal><operator pos:line="78" pos:column="27">)<pos:position pos:line="78" pos:column="28"/></operator></expr>;<pos:position pos:line="78" pos:column="29"/></return>
	}<pos:position pos:line="79" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="81" pos:column="9">values_names<pos:position pos:line="81" pos:column="21"/></name> <operator pos:line="81" pos:column="22">=<pos:position pos:line="81" pos:column="23"/></operator> <operator pos:line="81" pos:column="24">(<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">char<pos:position pos:line="81" pos:column="29"/></name> <operator pos:line="81" pos:column="30">*<pos:position pos:line="81" pos:column="31"/></operator><operator pos:line="81" pos:column="31">*<pos:position pos:line="81" pos:column="32"/></operator><operator pos:line="81" pos:column="32">)<pos:position pos:line="81" pos:column="33"/></operator> <call><name pos:line="81" pos:column="34">malloc<pos:position pos:line="81" pos:column="40"/></name> <argument_list pos:line="81" pos:column="41">(<argument><expr><name pos:line="81" pos:column="42">values_num<pos:position pos:line="81" pos:column="52"/></name> <operator pos:line="81" pos:column="53">*<pos:position pos:line="81" pos:column="54"/></operator> <sizeof pos:line="81" pos:column="55">sizeof <argument_list pos:line="81" pos:column="62">(<argument><expr><name pos:line="81" pos:column="63">char<pos:position pos:line="81" pos:column="67"/></name> <operator pos:line="81" pos:column="68">*<pos:position pos:line="81" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="72"/></expr_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">values_names<pos:position pos:line="82" pos:column="25"/></name> <operator pos:line="82" pos:column="26">==<pos:position pos:line="82" pos:column="28"/></operator> <name pos:line="82" pos:column="29">NULL<pos:position pos:line="82" pos:column="33"/></name></expr>)<pos:position pos:line="82" pos:column="34"/></condition><then pos:line="82" pos:column="34">
	<block pos:line="83" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">fprintf<pos:position pos:line="84" pos:column="24"/></name> <argument_list pos:line="84" pos:column="25">(<argument><expr><name pos:line="84" pos:column="26">stderr<pos:position pos:line="84" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="34">"malloc failed: %s\n"<pos:position pos:line="84" pos:column="55"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="85" pos:column="33">strerror<pos:position pos:line="85" pos:column="41"/></name> <argument_list pos:line="85" pos:column="42">(<argument><expr><name pos:line="85" pos:column="43">errno<pos:position pos:line="85" pos:column="48"/></name></expr></argument>)<pos:position pos:line="85" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">free<pos:position pos:line="86" pos:column="21"/></name> <argument_list pos:line="86" pos:column="22">(<argument><expr><name pos:line="86" pos:column="23">values<pos:position pos:line="86" pos:column="29"/></name></expr></argument>)<pos:position pos:line="86" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="31"/></expr_stmt>
		<return pos:line="87" pos:column="17">return <expr><operator pos:line="87" pos:column="24">(<pos:position pos:line="87" pos:column="25"/></operator><operator pos:line="87" pos:column="25">-<pos:position pos:line="87" pos:column="26"/></operator><literal type="number" pos:line="87" pos:column="26">1<pos:position pos:line="87" pos:column="27"/></literal><operator pos:line="87" pos:column="27">)<pos:position pos:line="87" pos:column="28"/></operator></expr>;<pos:position pos:line="87" pos:column="29"/></return>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>

	<block pos:line="90" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">char<pos:position pos:line="91" pos:column="21"/></name> <modifier pos:line="91" pos:column="22">*<pos:position pos:line="91" pos:column="23"/></modifier></type><name pos:line="91" pos:column="23">ptr<pos:position pos:line="91" pos:column="26"/></name> <init pos:line="91" pos:column="27">= <expr><call><name pos:line="91" pos:column="29">strchr<pos:position pos:line="91" pos:column="35"/></name> <argument_list pos:line="91" pos:column="36">(<argument><expr><name pos:line="91" pos:column="37">buffer<pos:position pos:line="91" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="91" pos:column="45">' '<pos:position pos:line="91" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="49"/></argument_list></call> <operator pos:line="91" pos:column="50">+<pos:position pos:line="91" pos:column="51"/></operator> <literal type="number" pos:line="91" pos:column="52">1<pos:position pos:line="91" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="91" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">char<pos:position pos:line="92" pos:column="21"/></name> <modifier pos:line="92" pos:column="22">*<pos:position pos:line="92" pos:column="23"/></modifier></type><name pos:line="92" pos:column="23">key<pos:position pos:line="92" pos:column="26"/></name></decl>;<pos:position pos:line="92" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">char<pos:position pos:line="93" pos:column="21"/></name> <modifier pos:line="93" pos:column="22">*<pos:position pos:line="93" pos:column="23"/></modifier></type><name pos:line="93" pos:column="23">value<pos:position pos:line="93" pos:column="28"/></name></decl>;<pos:position pos:line="93" pos:column="29"/></decl_stmt>

		<expr_stmt><expr><name pos:line="95" pos:column="17">i<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">=<pos:position pos:line="95" pos:column="20"/></operator> <literal type="number" pos:line="95" pos:column="21">0<pos:position pos:line="95" pos:column="22"/></literal></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>
		<while pos:line="96" pos:column="17">while <condition pos:line="96" pos:column="23">(<expr><operator pos:line="96" pos:column="24">(<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="25">key<pos:position pos:line="96" pos:column="28"/></name> <operator pos:line="96" pos:column="29">=<pos:position pos:line="96" pos:column="30"/></operator> <call><name pos:line="96" pos:column="31">strtok<pos:position pos:line="96" pos:column="37"/></name> <argument_list pos:line="96" pos:column="38">(<argument><expr><name pos:line="96" pos:column="39">ptr<pos:position pos:line="96" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="44">" \t"<pos:position pos:line="96" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="50"/></argument_list></call><operator pos:line="96" pos:column="50">)<pos:position pos:line="96" pos:column="51"/></operator> <operator pos:line="96" pos:column="52">!=<pos:position pos:line="96" pos:column="54"/></operator> <name pos:line="96" pos:column="55">NULL<pos:position pos:line="96" pos:column="59"/></name></expr>)<pos:position pos:line="96" pos:column="60"/></condition>
		<block pos:line="97" pos:column="17">{
			<expr_stmt><expr><name pos:line="98" pos:column="25">ptr<pos:position pos:line="98" pos:column="28"/></name> <operator pos:line="98" pos:column="29">=<pos:position pos:line="98" pos:column="30"/></operator> <name pos:line="98" pos:column="31">NULL<pos:position pos:line="98" pos:column="35"/></name></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="99" pos:column="25">value<pos:position pos:line="99" pos:column="30"/></name> <operator pos:line="99" pos:column="31">=<pos:position pos:line="99" pos:column="32"/></operator> <call><name pos:line="99" pos:column="33">strchr<pos:position pos:line="99" pos:column="39"/></name> <argument_list pos:line="99" pos:column="40">(<argument><expr><name pos:line="99" pos:column="41">key<pos:position pos:line="99" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="99" pos:column="46">'='<pos:position pos:line="99" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="51"/></expr_stmt>
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">value<pos:position pos:line="100" pos:column="34"/></name> <operator pos:line="100" pos:column="35">==<pos:position pos:line="100" pos:column="37"/></operator> <name pos:line="100" pos:column="38">NULL<pos:position pos:line="100" pos:column="42"/></name></expr>)<pos:position pos:line="100" pos:column="43"/></condition><then pos:line="100" pos:column="43">
				<block type="pseudo"><continue pos:line="101" pos:column="33">continue;<pos:position pos:line="101" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><operator pos:line="102" pos:column="25">*<pos:position pos:line="102" pos:column="26"/></operator><name pos:line="102" pos:column="26">value<pos:position pos:line="102" pos:column="31"/></name> <operator pos:line="102" pos:column="32">=<pos:position pos:line="102" pos:column="33"/></operator> <literal type="char" pos:line="102" pos:column="34">'\0'<pos:position pos:line="102" pos:column="38"/></literal></expr>;<pos:position pos:line="102" pos:column="39"/></expr_stmt> <expr_stmt><expr><name pos:line="102" pos:column="40">value<pos:position pos:line="102" pos:column="45"/></name><operator pos:line="102" pos:column="45">++<pos:position pos:line="102" pos:column="47"/></operator></expr>;<pos:position pos:line="102" pos:column="48"/></expr_stmt>

			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><call><name pos:line="104" pos:column="29">ignore_ds<pos:position pos:line="104" pos:column="38"/></name> <argument_list pos:line="104" pos:column="39">(<argument><expr><name pos:line="104" pos:column="40">key<pos:position pos:line="104" pos:column="43"/></name></expr></argument>)<pos:position pos:line="104" pos:column="44"/></argument_list></call> <operator pos:line="104" pos:column="45">!=<pos:position pos:line="104" pos:column="47"/></operator> <literal type="number" pos:line="104" pos:column="48">0<pos:position pos:line="104" pos:column="49"/></literal></expr>)<pos:position pos:line="104" pos:column="50"/></condition><then pos:line="104" pos:column="50">
				<block type="pseudo"><continue pos:line="105" pos:column="33">continue;<pos:position pos:line="105" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><name><name pos:line="107" pos:column="25">values_names<pos:position pos:line="107" pos:column="37"/></name><index pos:line="107" pos:column="37">[<expr><name pos:line="107" pos:column="38">i<pos:position pos:line="107" pos:column="39"/></name></expr>]<pos:position pos:line="107" pos:column="40"/></index></name> <operator pos:line="107" pos:column="41">=<pos:position pos:line="107" pos:column="42"/></operator> <call><name pos:line="107" pos:column="43">strdup<pos:position pos:line="107" pos:column="49"/></name> <argument_list pos:line="107" pos:column="50">(<argument><expr><name pos:line="107" pos:column="51">key<pos:position pos:line="107" pos:column="54"/></name></expr></argument>)<pos:position pos:line="107" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="108" pos:column="25">values<pos:position pos:line="108" pos:column="31"/></name><index pos:line="108" pos:column="31">[<expr><name pos:line="108" pos:column="32">i<pos:position pos:line="108" pos:column="33"/></name></expr>]<pos:position pos:line="108" pos:column="34"/></index></name> <operator pos:line="108" pos:column="35">=<pos:position pos:line="108" pos:column="36"/></operator> <call><name pos:line="108" pos:column="37">atof<pos:position pos:line="108" pos:column="41"/></name> <argument_list pos:line="108" pos:column="42">(<argument><expr><name pos:line="108" pos:column="43">value<pos:position pos:line="108" pos:column="48"/></name></expr></argument>)<pos:position pos:line="108" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="50"/></expr_stmt>

			<expr_stmt><expr><name pos:line="110" pos:column="25">i<pos:position pos:line="110" pos:column="26"/></name><operator pos:line="110" pos:column="26">++<pos:position pos:line="110" pos:column="28"/></operator></expr>;<pos:position pos:line="110" pos:column="29"/></expr_stmt>
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><name pos:line="111" pos:column="29">i<pos:position pos:line="111" pos:column="30"/></name> <operator pos:line="111" pos:column="31">&gt;=<pos:position pos:line="111" pos:column="36"/></operator> <name pos:line="111" pos:column="34">values_num<pos:position pos:line="111" pos:column="44"/></name></expr>)<pos:position pos:line="111" pos:column="45"/></condition><then pos:line="111" pos:column="45">
				<block type="pseudo"><break pos:line="112" pos:column="33">break;<pos:position pos:line="112" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="113" pos:column="18"/></block></while>
		<expr_stmt><expr><name pos:line="114" pos:column="17">values_num<pos:position pos:line="114" pos:column="27"/></name> <operator pos:line="114" pos:column="28">=<pos:position pos:line="114" pos:column="29"/></operator> <name pos:line="114" pos:column="30">i<pos:position pos:line="114" pos:column="31"/></name></expr>;<pos:position pos:line="114" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="115" pos:column="10"/></block>

	<expr_stmt><expr><operator pos:line="117" pos:column="9">*<pos:position pos:line="117" pos:column="10"/></operator><name pos:line="117" pos:column="10">ret_values_num<pos:position pos:line="117" pos:column="24"/></name> <operator pos:line="117" pos:column="25">=<pos:position pos:line="117" pos:column="26"/></operator> <name pos:line="117" pos:column="27">values_num<pos:position pos:line="117" pos:column="37"/></name></expr>;<pos:position pos:line="117" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="118" pos:column="9">*<pos:position pos:line="118" pos:column="10"/></operator><name pos:line="118" pos:column="10">ret_values<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">=<pos:position pos:line="118" pos:column="22"/></operator> <name pos:line="118" pos:column="23">values<pos:position pos:line="118" pos:column="29"/></name></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="119" pos:column="9">*<pos:position pos:line="119" pos:column="10"/></operator><name pos:line="119" pos:column="10">ret_values_names<pos:position pos:line="119" pos:column="26"/></name> <operator pos:line="119" pos:column="27">=<pos:position pos:line="119" pos:column="28"/></operator> <name pos:line="119" pos:column="29">values_names<pos:position pos:line="119" pos:column="41"/></name></expr>;<pos:position pos:line="119" pos:column="42"/></expr_stmt>

	<return pos:line="121" pos:column="9">return <expr><operator pos:line="121" pos:column="16">(<pos:position pos:line="121" pos:column="17"/></operator><literal type="number" pos:line="121" pos:column="17">0<pos:position pos:line="121" pos:column="18"/></literal><operator pos:line="121" pos:column="18">)<pos:position pos:line="121" pos:column="19"/></operator></expr>;<pos:position pos:line="121" pos:column="20"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
