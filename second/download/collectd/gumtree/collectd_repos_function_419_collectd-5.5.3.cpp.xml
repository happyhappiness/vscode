<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_419_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mr_config_add_regex<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">mr_regex_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">re_head<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">oconfig_item_t<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">ci<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">mr_regex_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">re<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name><name pos:line="7" pos:column="14">ci<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">values_num<pos:position pos:line="7" pos:column="28"/></name></name> <operator pos:line="7" pos:column="29">!=<pos:position pos:line="7" pos:column="31"/></operator> <literal type="number" pos:line="7" pos:column="32">1<pos:position pos:line="7" pos:column="33"/></literal><operator pos:line="7" pos:column="33">)<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="35">||<pos:position pos:line="7" pos:column="37"/></operator> <operator pos:line="7" pos:column="38">(<pos:position pos:line="7" pos:column="39"/></operator><name><name pos:line="7" pos:column="39">ci<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">-&gt;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="43">values<pos:position pos:line="7" pos:column="49"/></name><index pos:line="7" pos:column="49">[<expr><literal type="number" pos:line="7" pos:column="50">0<pos:position pos:line="7" pos:column="51"/></literal></expr>]<pos:position pos:line="7" pos:column="52"/></index></name><operator pos:line="7" pos:column="52">.<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="53">type<pos:position pos:line="7" pos:column="57"/></name> <operator pos:line="7" pos:column="58">!=<pos:position pos:line="7" pos:column="60"/></operator> <name pos:line="7" pos:column="61">OCONFIG_TYPE_STRING<pos:position pos:line="7" pos:column="80"/></name><operator pos:line="7" pos:column="80">)<pos:position pos:line="7" pos:column="81"/></operator></expr>)<pos:position pos:line="7" pos:column="82"/></condition><then pos:line="7" pos:column="82">
	<block pos:line="8" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">log_warn<pos:position pos:line="9" pos:column="25"/></name> <argument_list pos:line="9" pos:column="26">(<argument><expr><literal type="string" pos:line="9" pos:column="27">"`%s' needs exactly one string argument."<pos:position pos:line="9" pos:column="68"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="70">ci<pos:position pos:line="9" pos:column="72"/></name><operator pos:line="9" pos:column="72">-&gt;<pos:position pos:line="9" pos:column="77"/></operator><name pos:line="9" pos:column="74">key<pos:position pos:line="9" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="79"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><operator pos:line="10" pos:column="25">-<pos:position pos:line="10" pos:column="26"/></operator><literal type="number" pos:line="10" pos:column="26">1<pos:position pos:line="10" pos:column="27"/></literal><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator></expr>;<pos:position pos:line="10" pos:column="29"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">re<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">mr_regex_t<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator> <call><name pos:line="13" pos:column="29">malloc<pos:position pos:line="13" pos:column="35"/></name> <argument_list pos:line="13" pos:column="36">(<argument><expr><sizeof pos:line="13" pos:column="37">sizeof <argument_list pos:line="13" pos:column="44">(<argument><expr><operator pos:line="13" pos:column="45">*<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">re<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">re<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">NULL<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24">
	<block pos:line="15" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">log_err<pos:position pos:line="16" pos:column="24"/></name> <argument_list pos:line="16" pos:column="25">(<argument><expr><literal type="string" pos:line="16" pos:column="26">"mr_config_add_regex: malloc failed."<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><operator pos:line="17" pos:column="25">-<pos:position pos:line="17" pos:column="26"/></operator><literal type="number" pos:line="17" pos:column="26">1<pos:position pos:line="17" pos:column="27"/></literal><operator pos:line="17" pos:column="27">)<pos:position pos:line="17" pos:column="28"/></operator></expr>;<pos:position pos:line="17" pos:column="29"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">memset<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">re<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="24">sizeof <argument_list pos:line="19" pos:column="31">(<argument><expr><operator pos:line="19" pos:column="32">*<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">re<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">re<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">next<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">NULL<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="22" pos:column="9">re<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">re_str<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">strdup<pos:position pos:line="22" pos:column="28"/></name> <argument_list pos:line="22" pos:column="29">(<argument><expr><name><name pos:line="22" pos:column="30">ci<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">values<pos:position pos:line="22" pos:column="40"/></name><index pos:line="22" pos:column="40">[<expr><literal type="number" pos:line="22" pos:column="41">0<pos:position pos:line="22" pos:column="42"/></literal></expr>]<pos:position pos:line="22" pos:column="43"/></index></name><operator pos:line="22" pos:column="43">.<pos:position pos:line="22" pos:column="44"/></operator><name><name pos:line="22" pos:column="44">value<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">.<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">string<pos:position pos:line="22" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">re<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">re_str<pos:position pos:line="23" pos:column="23"/></name></name> <operator pos:line="23" pos:column="24">==<pos:position pos:line="23" pos:column="26"/></operator> <name pos:line="23" pos:column="27">NULL<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32">
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">free<pos:position pos:line="25" pos:column="21"/></name> <argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">re<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">log_err<pos:position pos:line="26" pos:column="24"/></name> <argument_list pos:line="26" pos:column="25">(<argument><expr><literal type="string" pos:line="26" pos:column="26">"mr_config_add_regex: strdup failed."<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><operator pos:line="27" pos:column="24">(<pos:position pos:line="27" pos:column="25"/></operator><operator pos:line="27" pos:column="25">-<pos:position pos:line="27" pos:column="26"/></operator><literal type="number" pos:line="27" pos:column="26">1<pos:position pos:line="27" pos:column="27"/></literal><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator></expr>;<pos:position pos:line="27" pos:column="29"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">status<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">regcomp<pos:position pos:line="30" pos:column="25"/></name> <argument_list pos:line="30" pos:column="26">(<argument><expr><operator pos:line="30" pos:column="27">&amp;<pos:position pos:line="30" pos:column="32"/></operator><name><name pos:line="30" pos:column="28">re<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">re<pos:position pos:line="30" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="36">re<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">-&gt;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="40">re_str<pos:position pos:line="30" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">REG_EXTENDED<pos:position pos:line="30" pos:column="60"/></name> <operator pos:line="30" pos:column="61">|<pos:position pos:line="30" pos:column="62"/></operator> <name pos:line="30" pos:column="63">REG_NOSUB<pos:position pos:line="30" pos:column="72"/></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">status<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">!=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">0<pos:position pos:line="31" pos:column="24"/></literal></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25">
	<block pos:line="32" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">char<pos:position pos:line="33" pos:column="21"/></name></type> <name><name pos:line="33" pos:column="22">errmsg<pos:position pos:line="33" pos:column="28"/></name><index pos:line="33" pos:column="28">[<expr><literal type="number" pos:line="33" pos:column="29">1024<pos:position pos:line="33" pos:column="33"/></literal></expr>]<pos:position pos:line="33" pos:column="34"/></index></name></decl>;<pos:position pos:line="33" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">regerror<pos:position pos:line="34" pos:column="25"/></name> <argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">status<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="35">&amp;<pos:position pos:line="34" pos:column="40"/></operator><name><name pos:line="34" pos:column="36">re<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">-&gt;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="40">re<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="44">errmsg<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="52">sizeof <argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">errmsg<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">errmsg<pos:position pos:line="35" pos:column="23"/></name><index pos:line="35" pos:column="23">[<expr><sizeof pos:line="35" pos:column="24">sizeof <argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">errmsg<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></sizeof> <operator pos:line="35" pos:column="40">-<pos:position pos:line="35" pos:column="41"/></operator> <literal type="number" pos:line="35" pos:column="42">1<pos:position pos:line="35" pos:column="43"/></literal></expr>]<pos:position pos:line="35" pos:column="44"/></index></name> <operator pos:line="35" pos:column="45">=<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">0<pos:position pos:line="35" pos:column="48"/></literal></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">log_err<pos:position pos:line="36" pos:column="24"/></name> <argument_list pos:line="36" pos:column="25">(<argument><expr><literal type="string" pos:line="36" pos:column="26">"Compiling regex `%s' for `%s' failed: %s."<pos:position pos:line="36" pos:column="69"/></literal></expr></argument>, 
				<argument><expr><name><name pos:line="37" pos:column="33">re<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">re_str<pos:position pos:line="37" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="45">ci<pos:position pos:line="37" pos:column="47"/></name><operator pos:line="37" pos:column="47">-&gt;<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="49">key<pos:position pos:line="37" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">errmsg<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">free<pos:position pos:line="38" pos:column="21"/></name> <argument_list pos:line="38" pos:column="22">(<argument><expr><name><name pos:line="38" pos:column="23">re<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">-&gt;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="27">re_str<pos:position pos:line="38" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">free<pos:position pos:line="39" pos:column="21"/></name> <argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">re<pos:position pos:line="39" pos:column="25"/></name></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator><operator pos:line="40" pos:column="25">-<pos:position pos:line="40" pos:column="26"/></operator><literal type="number" pos:line="40" pos:column="26">1<pos:position pos:line="40" pos:column="27"/></literal><operator pos:line="40" pos:column="27">)<pos:position pos:line="40" pos:column="28"/></operator></expr>;<pos:position pos:line="40" pos:column="29"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">*<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">re_head<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">==<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">NULL<pos:position pos:line="43" pos:column="29"/></name></expr>)<pos:position pos:line="43" pos:column="30"/></condition><then pos:line="43" pos:column="30">
	<block pos:line="44" pos:column="9">{
		<expr_stmt><expr><operator pos:line="45" pos:column="17">*<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">re_head<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">=<pos:position pos:line="45" pos:column="27"/></operator> <name pos:line="45" pos:column="28">re<pos:position pos:line="45" pos:column="30"/></name></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then>
	<else pos:line="47" pos:column="9">else
	<block pos:line="48" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">mr_regex_t<pos:position pos:line="49" pos:column="27"/></name> <modifier pos:line="49" pos:column="28">*<pos:position pos:line="49" pos:column="29"/></modifier></type><name pos:line="49" pos:column="29">ptr<pos:position pos:line="49" pos:column="32"/></name></decl>;<pos:position pos:line="49" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="51" pos:column="17">ptr<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <operator pos:line="51" pos:column="23">*<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">re_head<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
		<while pos:line="52" pos:column="17">while <condition pos:line="52" pos:column="23">(<expr><name><name pos:line="52" pos:column="24">ptr<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">next<pos:position pos:line="52" pos:column="33"/></name></name> <operator pos:line="52" pos:column="34">!=<pos:position pos:line="52" pos:column="36"/></operator> <name pos:line="52" pos:column="37">NULL<pos:position pos:line="52" pos:column="41"/></name></expr>)<pos:position pos:line="52" pos:column="42"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">ptr<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <name><name pos:line="53" pos:column="31">ptr<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">next<pos:position pos:line="53" pos:column="40"/></name></name></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt></block></while>

		<expr_stmt><expr><name><name pos:line="55" pos:column="17">ptr<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">next<pos:position pos:line="55" pos:column="26"/></name></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <name pos:line="55" pos:column="29">re<pos:position pos:line="55" pos:column="31"/></name></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></else></if>

	<return pos:line="58" pos:column="9">return <expr><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><literal type="number" pos:line="58" pos:column="17">0<pos:position pos:line="58" pos:column="18"/></literal><operator pos:line="58" pos:column="18">)<pos:position pos:line="58" pos:column="19"/></operator></expr>;<pos:position pos:line="58" pos:column="20"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
