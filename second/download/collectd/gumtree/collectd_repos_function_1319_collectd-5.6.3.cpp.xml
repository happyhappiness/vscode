<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1319_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pinba_udp_read_callback_fn<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">sock<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">uint8_t<pos:position pos:line="3" pos:column="10"/></name></type> <name><name pos:line="3" pos:column="11">buffer<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><name pos:line="3" pos:column="18">PINBA_UDP_BUFFER_SIZE<pos:position pos:line="3" pos:column="39"/></name></expr>]<pos:position pos:line="3" pos:column="40"/></index></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_size<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <while pos:line="7" pos:column="3">while <condition pos:line="7" pos:column="9">(<expr><literal type="number" pos:line="7" pos:column="10">42<pos:position pos:line="7" pos:column="12"/></literal></expr>)<pos:position pos:line="7" pos:column="13"/></condition> <block pos:line="7" pos:column="14">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">buffer_size<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <sizeof pos:line="8" pos:column="19">sizeof<argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">buffer<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">status<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">recvfrom<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">sock<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">buffer<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">buffer_size<pos:position pos:line="9" pos:column="48"/></name> <operator pos:line="9" pos:column="49">-<pos:position pos:line="9" pos:column="50"/></operator> <literal type="number" pos:line="9" pos:column="51">1<pos:position pos:line="9" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">MSG_DONTWAIT<pos:position pos:line="9" pos:column="66"/></name></expr></argument>,
                      <comment type="block" pos:line="10" pos:column="23">/* from = */</comment> <argument><expr><name pos:line="10" pos:column="36">NULL<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <comment type="block" pos:line="10" pos:column="42">/* from len = */</comment> <argument><expr><literal type="number" pos:line="10" pos:column="59">0<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">status<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">char<pos:position pos:line="12" pos:column="11"/></name></type> <name><name pos:line="12" pos:column="12">errbuf<pos:position pos:line="12" pos:column="18"/></name><index pos:line="12" pos:column="18">[<expr><literal type="number" pos:line="12" pos:column="19">1024<pos:position pos:line="12" pos:column="23"/></literal></expr>]<pos:position pos:line="12" pos:column="24"/></index></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>

      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><operator pos:line="14" pos:column="11">(<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">errno<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">EINTR<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator>
<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">EWOULDBLOCK<pos:position pos:line="15" pos:column="19"/></name></cpp:ifdef>
          <operator pos:line="16" pos:column="11">||<pos:position pos:line="16" pos:column="13"/></operator> <operator pos:line="16" pos:column="14">(<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">errno<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">==<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">EWOULDBLOCK<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">)<pos:position pos:line="16" pos:column="36"/></operator>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
          <operator pos:line="18" pos:column="11">||<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">errno<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">EAGAIN<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">)<pos:position pos:line="18" pos:column="31"/></operator></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
        <continue pos:line="19" pos:column="9">continue;<pos:position pos:line="19" pos:column="18"/></continue>
      }<pos:position pos:line="20" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="22" pos:column="7">WARNING<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="string" pos:line="22" pos:column="15">"pinba plugin: recvfrom(2) failed: %s"<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="23" pos:column="15">sstrerror<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">errno<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">errbuf<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="40">sizeof<argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">errbuf<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><operator pos:line="24" pos:column="14">(<pos:position pos:line="24" pos:column="15"/></operator><operator pos:line="24" pos:column="15">-<pos:position pos:line="24" pos:column="16"/></operator><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal><operator pos:line="24" pos:column="17">)<pos:position pos:line="24" pos:column="18"/></operator></expr>;<pos:position pos:line="24" pos:column="19"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <elseif pos:line="25" pos:column="7">else <if pos:line="25" pos:column="12">if <condition pos:line="25" pos:column="15">(<expr><name pos:line="25" pos:column="16">status<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">==<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="26">0<pos:position pos:line="25" pos:column="27"/></literal></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28"> <block pos:line="25" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">DEBUG<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><literal type="string" pos:line="26" pos:column="13">"pinba plugin: recvfrom(2) returned unexpected status zero."<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="75"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><operator pos:line="27" pos:column="14">(<pos:position pos:line="27" pos:column="15"/></operator><operator pos:line="27" pos:column="15">-<pos:position pos:line="27" pos:column="16"/></operator><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal><operator pos:line="27" pos:column="17">)<pos:position pos:line="27" pos:column="18"/></operator></expr>;<pos:position pos:line="27" pos:column="19"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif> <else pos:line="28" pos:column="7">else <comment type="block" pos:line="28" pos:column="12">/* if (status &gt; 0) */</comment>
    <block pos:line="29" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">assert<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><operator pos:line="30" pos:column="14">(<pos:position pos:line="30" pos:column="15"/></operator><operator pos:line="30" pos:column="15">(<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">size_t<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">)<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">status<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator> <operator pos:line="30" pos:column="31">&lt;<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="33">buffer_size<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">buffer_size<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">size_t<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">)<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">status<pos:position pos:line="31" pos:column="35"/></name></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="32" pos:column="7">buffer<pos:position pos:line="32" pos:column="13"/></name><index pos:line="32" pos:column="13">[<expr><name pos:line="32" pos:column="14">buffer_size<pos:position pos:line="32" pos:column="25"/></name></expr>]<pos:position pos:line="32" pos:column="26"/></index></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="29">0<pos:position pos:line="32" pos:column="30"/></literal></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>

      <expr_stmt><expr><name pos:line="34" pos:column="7">status<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">pinba_process_stats_packet<pos:position pos:line="34" pos:column="42"/></name><argument_list pos:line="34" pos:column="42">(<argument><expr><name pos:line="34" pos:column="43">buffer<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">buffer_size<pos:position pos:line="34" pos:column="62"/></name></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><name pos:line="35" pos:column="11">status<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">!=<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="21">0<pos:position pos:line="35" pos:column="22"/></literal></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">DEBUG<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><literal type="string" pos:line="36" pos:column="15">"pinba plugin: Parsing packet failed."<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt></block></then></if>
      <return pos:line="37" pos:column="7">return <expr><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">status<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">)<pos:position pos:line="37" pos:column="22"/></operator></expr>;<pos:position pos:line="37" pos:column="23"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>
  }<pos:position pos:line="39" pos:column="4"/></block></while> <comment type="block" pos:line="39" pos:column="5">/* while (42) */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* not reached */</comment>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">assert<pos:position pos:line="42" pos:column="9"/></name><argument_list pos:line="42" pos:column="9">(<argument><expr><literal type="number" pos:line="42" pos:column="10">23<pos:position pos:line="42" pos:column="12"/></literal> <operator pos:line="42" pos:column="13">==<pos:position pos:line="42" pos:column="15"/></operator> <literal type="number" pos:line="42" pos:column="16">42<pos:position pos:line="42" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><operator pos:line="43" pos:column="11">-<pos:position pos:line="43" pos:column="12"/></operator><literal type="number" pos:line="43" pos:column="12">1<pos:position pos:line="43" pos:column="13"/></literal><operator pos:line="43" pos:column="13">)<pos:position pos:line="43" pos:column="14"/></operator></expr>;<pos:position pos:line="43" pos:column="15"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
