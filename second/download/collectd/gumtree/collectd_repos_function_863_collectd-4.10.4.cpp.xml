<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_863_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cna_handle_volume_perf_data<pos:position pos:line="1" pos:column="39"/></name> <parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">hostname<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="63">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">cfg_volume_perf_t<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">cvp<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">na_elem_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">data<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">int<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">interval<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">time_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">timestamp<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">na_elem_t<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">elem_instances<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">na_elem_iter_t<pos:position pos:line="6" pos:column="23"/></name></type> <name pos:line="6" pos:column="24">iter_instances<pos:position pos:line="6" pos:column="38"/></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">na_elem_t<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">elem_instance<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
	
	<expr_stmt><expr><name pos:line="9" pos:column="9">timestamp<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">time_t<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">)<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="30">na_child_get_uint64<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">(<argument><expr><name pos:line="9" pos:column="50">data<pos:position pos:line="9" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="56">"timestamp"<pos:position pos:line="9" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="69">0<pos:position pos:line="9" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">elem_instances<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <call><name pos:line="11" pos:column="26">na_elem_child<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">data<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="46">"instances"<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">elem_instances<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">==<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">NULL<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"netapp plugin: handle_volume_perf_data: "<pos:position pos:line="14" pos:column="66"/></literal>
				<literal type="string" pos:line="15" pos:column="33">"na_elem_child (\"instances\") failed "<pos:position pos:line="15" pos:column="72"/></literal>
				<literal type="string" pos:line="16" pos:column="33">"for host %s."<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="49">hostname<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><operator pos:line="17" pos:column="25">-<pos:position pos:line="17" pos:column="26"/></operator><literal type="number" pos:line="17" pos:column="26">1<pos:position pos:line="17" pos:column="27"/></literal><operator pos:line="17" pos:column="27">)<pos:position pos:line="17" pos:column="28"/></operator></expr>;<pos:position pos:line="17" pos:column="29"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="20" pos:column="9">iter_instances<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">na_child_iterator<pos:position pos:line="20" pos:column="43"/></name> <argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">elem_instances<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">elem_instance<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <call><name pos:line="21" pos:column="30">na_iterator_next<pos:position pos:line="21" pos:column="46"/></name><argument_list pos:line="21" pos:column="46">(<argument><expr><operator pos:line="21" pos:column="47">&amp;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="48">iter_instances<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></init>
			<condition><expr><name pos:line="22" pos:column="25">elem_instance<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">!=<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="42">NULL<pos:position pos:line="22" pos:column="46"/></name></expr>;<pos:position pos:line="22" pos:column="47"/></condition>
			<incr><expr><name pos:line="23" pos:column="25">elem_instance<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">=<pos:position pos:line="23" pos:column="40"/></operator> <call><name pos:line="23" pos:column="41">na_iterator_next<pos:position pos:line="23" pos:column="57"/></name><argument_list pos:line="23" pos:column="57">(<argument><expr><operator pos:line="23" pos:column="58">&amp;<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="59">iter_instances<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr></incr>)<pos:position pos:line="23" pos:column="75"/></control>
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">const<pos:position pos:line="25" pos:column="22"/></specifier> <name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name> <modifier pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></modifier></type><name pos:line="25" pos:column="29">name<pos:position pos:line="25" pos:column="33"/></name></decl>;<pos:position pos:line="25" pos:column="34"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="27" pos:column="17">data_volume_perf_t<pos:position pos:line="27" pos:column="35"/></name></type> <name pos:line="27" pos:column="36">perf_data<pos:position pos:line="27" pos:column="45"/></name></decl>;<pos:position pos:line="27" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">data_volume_perf_t<pos:position pos:line="28" pos:column="35"/></name> <modifier pos:line="28" pos:column="36">*<pos:position pos:line="28" pos:column="37"/></modifier></type><name pos:line="28" pos:column="37">v<pos:position pos:line="28" pos:column="38"/></name></decl>;<pos:position pos:line="28" pos:column="39"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="30" pos:column="17">na_elem_t<pos:position pos:line="30" pos:column="26"/></name> <modifier pos:line="30" pos:column="27">*<pos:position pos:line="30" pos:column="28"/></modifier></type><name pos:line="30" pos:column="28">elem_counters<pos:position pos:line="30" pos:column="41"/></name></decl>;<pos:position pos:line="30" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">na_elem_iter_t<pos:position pos:line="31" pos:column="31"/></name></type> <name pos:line="31" pos:column="32">iter_counters<pos:position pos:line="31" pos:column="45"/></name></decl>;<pos:position pos:line="31" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">na_elem_t<pos:position pos:line="32" pos:column="26"/></name> <modifier pos:line="32" pos:column="27">*<pos:position pos:line="32" pos:column="28"/></modifier></type><name pos:line="32" pos:column="28">elem_counter<pos:position pos:line="32" pos:column="40"/></name></decl>;<pos:position pos:line="32" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="34" pos:column="17">memset<pos:position pos:line="34" pos:column="23"/></name> <argument_list pos:line="34" pos:column="24">(<argument><expr><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="26">perf_data<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="37">0<pos:position pos:line="34" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="40">sizeof <argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">perf_data<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">perf_data<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">.<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="27">timestamp<pos:position pos:line="35" pos:column="36"/></name></name> <operator pos:line="35" pos:column="37">=<pos:position pos:line="35" pos:column="38"/></operator> <name pos:line="35" pos:column="39">timestamp<pos:position pos:line="35" pos:column="48"/></name></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>

		<expr_stmt><expr><name pos:line="37" pos:column="17">name<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <call><name pos:line="37" pos:column="24">na_child_get_string<pos:position pos:line="37" pos:column="43"/></name> <argument_list pos:line="37" pos:column="44">(<argument><expr><name pos:line="37" pos:column="45">elem_instance<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="60">"name"<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="68"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">name<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">==<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">NULL<pos:position pos:line="38" pos:column="33"/></name></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34">
			<block type="pseudo"><continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="41" pos:column="17">/* get_volume_perf may return NULL if this volume is to be ignored. */</comment>
		<expr_stmt><expr><name pos:line="42" pos:column="17">v<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <call><name pos:line="42" pos:column="21">get_volume_perf<pos:position pos:line="42" pos:column="36"/></name> <argument_list pos:line="42" pos:column="37">(<argument><expr><name pos:line="42" pos:column="38">cvp<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">name<pos:position pos:line="42" pos:column="47"/></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">v<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">==<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">NULL<pos:position pos:line="43" pos:column="30"/></name></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31">
			<block type="pseudo"><continue pos:line="44" pos:column="25">continue;<pos:position pos:line="44" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="46" pos:column="17">elem_counters<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <call><name pos:line="46" pos:column="33">na_elem_child<pos:position pos:line="46" pos:column="46"/></name> <argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">elem_instance<pos:position pos:line="46" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="63">"counters"<pos:position pos:line="46" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">elem_counters<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">==<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="38">NULL<pos:position pos:line="47" pos:column="42"/></name></expr>)<pos:position pos:line="47" pos:column="43"/></condition><then pos:line="47" pos:column="43">
			<block type="pseudo"><continue pos:line="48" pos:column="25">continue;<pos:position pos:line="48" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="50" pos:column="17">iter_counters<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">=<pos:position pos:line="50" pos:column="32"/></operator> <call><name pos:line="50" pos:column="33">na_child_iterator<pos:position pos:line="50" pos:column="50"/></name> <argument_list pos:line="50" pos:column="51">(<argument><expr><name pos:line="50" pos:column="52">elem_counters<pos:position pos:line="50" pos:column="65"/></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
		<for pos:line="51" pos:column="17">for <control pos:line="51" pos:column="21">(<init><expr><name pos:line="51" pos:column="22">elem_counter<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <call><name pos:line="51" pos:column="37">na_iterator_next<pos:position pos:line="51" pos:column="53"/></name><argument_list pos:line="51" pos:column="53">(<argument><expr><operator pos:line="51" pos:column="54">&amp;<pos:position pos:line="51" pos:column="59"/></operator><name pos:line="51" pos:column="55">iter_counters<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="70"/></init>
				<condition><expr><name pos:line="52" pos:column="33">elem_counter<pos:position pos:line="52" pos:column="45"/></name> <operator pos:line="52" pos:column="46">!=<pos:position pos:line="52" pos:column="48"/></operator> <name pos:line="52" pos:column="49">NULL<pos:position pos:line="52" pos:column="53"/></name></expr>;<pos:position pos:line="52" pos:column="54"/></condition>
				<incr><expr><name pos:line="53" pos:column="33">elem_counter<pos:position pos:line="53" pos:column="45"/></name> <operator pos:line="53" pos:column="46">=<pos:position pos:line="53" pos:column="47"/></operator> <call><name pos:line="53" pos:column="48">na_iterator_next<pos:position pos:line="53" pos:column="64"/></name><argument_list pos:line="53" pos:column="64">(<argument><expr><operator pos:line="53" pos:column="65">&amp;<pos:position pos:line="53" pos:column="70"/></operator><name pos:line="53" pos:column="66">iter_counters<pos:position pos:line="53" pos:column="79"/></name></expr></argument>)<pos:position pos:line="53" pos:column="80"/></argument_list></call></expr></incr>)<pos:position pos:line="53" pos:column="81"/></control>
		<block pos:line="54" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="55" pos:column="25">const<pos:position pos:line="55" pos:column="30"/></specifier> <name pos:line="55" pos:column="31">char<pos:position pos:line="55" pos:column="35"/></name> <modifier pos:line="55" pos:column="36">*<pos:position pos:line="55" pos:column="37"/></modifier></type><name pos:line="55" pos:column="37">name<pos:position pos:line="55" pos:column="41"/></name></decl>;<pos:position pos:line="55" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">uint64_t<pos:position pos:line="56" pos:column="33"/></name></type> <name pos:line="56" pos:column="34">value<pos:position pos:line="56" pos:column="39"/></name></decl>;<pos:position pos:line="56" pos:column="40"/></decl_stmt>

			<expr_stmt><expr><name pos:line="58" pos:column="25">name<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">=<pos:position pos:line="58" pos:column="31"/></operator> <call><name pos:line="58" pos:column="32">na_child_get_string<pos:position pos:line="58" pos:column="51"/></name> <argument_list pos:line="58" pos:column="52">(<argument><expr><name pos:line="58" pos:column="53">elem_counter<pos:position pos:line="58" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="67">"name"<pos:position pos:line="58" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="75"/></expr_stmt>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">name<pos:position pos:line="59" pos:column="33"/></name> <operator pos:line="59" pos:column="34">==<pos:position pos:line="59" pos:column="36"/></operator> <name pos:line="59" pos:column="37">NULL<pos:position pos:line="59" pos:column="41"/></name></expr>)<pos:position pos:line="59" pos:column="42"/></condition><then pos:line="59" pos:column="42">
				<block type="pseudo"><continue pos:line="60" pos:column="33">continue;<pos:position pos:line="60" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><name pos:line="62" pos:column="25">value<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <call><name pos:line="62" pos:column="33">na_child_get_uint64<pos:position pos:line="62" pos:column="52"/></name> <argument_list pos:line="62" pos:column="53">(<argument><expr><name pos:line="62" pos:column="54">elem_counter<pos:position pos:line="62" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="68">"value"<pos:position pos:line="62" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="77">UINT64_MAX<pos:position pos:line="62" pos:column="87"/></name></expr></argument>)<pos:position pos:line="62" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="89"/></expr_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">value<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">==<pos:position pos:line="63" pos:column="37"/></operator> <name pos:line="63" pos:column="38">UINT64_MAX<pos:position pos:line="63" pos:column="48"/></name></expr>)<pos:position pos:line="63" pos:column="49"/></condition><then pos:line="63" pos:column="49">
				<block type="pseudo"><continue pos:line="64" pos:column="33">continue;<pos:position pos:line="64" pos:column="42"/></continue></block></then></if>

			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><operator pos:line="66" pos:column="29">!<pos:position pos:line="66" pos:column="30"/></operator><call><name pos:line="66" pos:column="30">strcmp<pos:position pos:line="66" pos:column="36"/></name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">name<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="43">"read_data"<pos:position pos:line="66" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="56"/></condition><then pos:line="66" pos:column="56"> <block pos:line="66" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="67" pos:column="33">perf_data<pos:position pos:line="67" pos:column="42"/></name><operator pos:line="67" pos:column="42">.<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="43">read_bytes<pos:position pos:line="67" pos:column="53"/></name></name> <operator pos:line="67" pos:column="54">=<pos:position pos:line="67" pos:column="55"/></operator> <name pos:line="67" pos:column="56">value<pos:position pos:line="67" pos:column="61"/></name></expr>;<pos:position pos:line="67" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="68" pos:column="33">perf_data<pos:position pos:line="68" pos:column="42"/></name><operator pos:line="68" pos:column="42">.<pos:position pos:line="68" pos:column="43"/></operator><name pos:line="68" pos:column="43">flags<pos:position pos:line="68" pos:column="48"/></name></name> <operator pos:line="68" pos:column="49">|=<pos:position pos:line="68" pos:column="51"/></operator> <name pos:line="68" pos:column="52">HAVE_VOLUME_PERF_BYTES_READ<pos:position pos:line="68" pos:column="79"/></name></expr>;<pos:position pos:line="68" pos:column="80"/></expr_stmt>
			}<pos:position pos:line="69" pos:column="26"/></block></then> <elseif pos:line="69" pos:column="27">else <if pos:line="69" pos:column="32">if <condition pos:line="69" pos:column="35">(<expr><operator pos:line="69" pos:column="36">!<pos:position pos:line="69" pos:column="37"/></operator><call><name pos:line="69" pos:column="37">strcmp<pos:position pos:line="69" pos:column="43"/></name><argument_list pos:line="69" pos:column="43">(<argument><expr><name pos:line="69" pos:column="44">name<pos:position pos:line="69" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="50">"write_data"<pos:position pos:line="69" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="64"/></condition><then pos:line="69" pos:column="64"> <block pos:line="69" pos:column="65">{
				<expr_stmt><expr><name><name pos:line="70" pos:column="33">perf_data<pos:position pos:line="70" pos:column="42"/></name><operator pos:line="70" pos:column="42">.<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="43">write_bytes<pos:position pos:line="70" pos:column="54"/></name></name> <operator pos:line="70" pos:column="55">=<pos:position pos:line="70" pos:column="56"/></operator> <name pos:line="70" pos:column="57">value<pos:position pos:line="70" pos:column="62"/></name></expr>;<pos:position pos:line="70" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="71" pos:column="33">perf_data<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">.<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="43">flags<pos:position pos:line="71" pos:column="48"/></name></name> <operator pos:line="71" pos:column="49">|=<pos:position pos:line="71" pos:column="51"/></operator> <name pos:line="71" pos:column="52">HAVE_VOLUME_PERF_BYTES_WRITE<pos:position pos:line="71" pos:column="80"/></name></expr>;<pos:position pos:line="71" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="72" pos:column="26"/></block></then></if></elseif> <elseif pos:line="72" pos:column="27">else <if pos:line="72" pos:column="32">if <condition pos:line="72" pos:column="35">(<expr><operator pos:line="72" pos:column="36">!<pos:position pos:line="72" pos:column="37"/></operator><call><name pos:line="72" pos:column="37">strcmp<pos:position pos:line="72" pos:column="43"/></name><argument_list pos:line="72" pos:column="43">(<argument><expr><name pos:line="72" pos:column="44">name<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="50">"read_ops"<pos:position pos:line="72" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="62"/></condition><then pos:line="72" pos:column="62"> <block pos:line="72" pos:column="63">{
				<expr_stmt><expr><name><name pos:line="73" pos:column="33">perf_data<pos:position pos:line="73" pos:column="42"/></name><operator pos:line="73" pos:column="42">.<pos:position pos:line="73" pos:column="43"/></operator><name pos:line="73" pos:column="43">read_ops<pos:position pos:line="73" pos:column="51"/></name></name> <operator pos:line="73" pos:column="52">=<pos:position pos:line="73" pos:column="53"/></operator> <name pos:line="73" pos:column="54">value<pos:position pos:line="73" pos:column="59"/></name></expr>;<pos:position pos:line="73" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="74" pos:column="33">perf_data<pos:position pos:line="74" pos:column="42"/></name><operator pos:line="74" pos:column="42">.<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="43">flags<pos:position pos:line="74" pos:column="48"/></name></name> <operator pos:line="74" pos:column="49">|=<pos:position pos:line="74" pos:column="51"/></operator> <name pos:line="74" pos:column="52">HAVE_VOLUME_PERF_OPS_READ<pos:position pos:line="74" pos:column="77"/></name></expr>;<pos:position pos:line="74" pos:column="78"/></expr_stmt>
			}<pos:position pos:line="75" pos:column="26"/></block></then></if></elseif> <elseif pos:line="75" pos:column="27">else <if pos:line="75" pos:column="32">if <condition pos:line="75" pos:column="35">(<expr><operator pos:line="75" pos:column="36">!<pos:position pos:line="75" pos:column="37"/></operator><call><name pos:line="75" pos:column="37">strcmp<pos:position pos:line="75" pos:column="43"/></name><argument_list pos:line="75" pos:column="43">(<argument><expr><name pos:line="75" pos:column="44">name<pos:position pos:line="75" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="50">"write_ops"<pos:position pos:line="75" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="63"/></condition><then pos:line="75" pos:column="63"> <block pos:line="75" pos:column="64">{
				<expr_stmt><expr><name><name pos:line="76" pos:column="33">perf_data<pos:position pos:line="76" pos:column="42"/></name><operator pos:line="76" pos:column="42">.<pos:position pos:line="76" pos:column="43"/></operator><name pos:line="76" pos:column="43">write_ops<pos:position pos:line="76" pos:column="52"/></name></name> <operator pos:line="76" pos:column="53">=<pos:position pos:line="76" pos:column="54"/></operator> <name pos:line="76" pos:column="55">value<pos:position pos:line="76" pos:column="60"/></name></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">perf_data<pos:position pos:line="77" pos:column="42"/></name><operator pos:line="77" pos:column="42">.<pos:position pos:line="77" pos:column="43"/></operator><name pos:line="77" pos:column="43">flags<pos:position pos:line="77" pos:column="48"/></name></name> <operator pos:line="77" pos:column="49">|=<pos:position pos:line="77" pos:column="51"/></operator> <name pos:line="77" pos:column="52">HAVE_VOLUME_PERF_OPS_WRITE<pos:position pos:line="77" pos:column="78"/></name></expr>;<pos:position pos:line="77" pos:column="79"/></expr_stmt>
			}<pos:position pos:line="78" pos:column="26"/></block></then></if></elseif> <elseif pos:line="78" pos:column="27">else <if pos:line="78" pos:column="32">if <condition pos:line="78" pos:column="35">(<expr><operator pos:line="78" pos:column="36">!<pos:position pos:line="78" pos:column="37"/></operator><call><name pos:line="78" pos:column="37">strcmp<pos:position pos:line="78" pos:column="43"/></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">name<pos:position pos:line="78" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="50">"read_latency"<pos:position pos:line="78" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="66"/></condition><then pos:line="78" pos:column="66"> <block pos:line="78" pos:column="67">{
				<expr_stmt><expr><name><name pos:line="79" pos:column="33">perf_data<pos:position pos:line="79" pos:column="42"/></name><operator pos:line="79" pos:column="42">.<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="43">read_latency<pos:position pos:line="79" pos:column="55"/></name></name> <operator pos:line="79" pos:column="56">=<pos:position pos:line="79" pos:column="57"/></operator> <name pos:line="79" pos:column="58">value<pos:position pos:line="79" pos:column="63"/></name></expr>;<pos:position pos:line="79" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="80" pos:column="33">perf_data<pos:position pos:line="80" pos:column="42"/></name><operator pos:line="80" pos:column="42">.<pos:position pos:line="80" pos:column="43"/></operator><name pos:line="80" pos:column="43">flags<pos:position pos:line="80" pos:column="48"/></name></name> <operator pos:line="80" pos:column="49">|=<pos:position pos:line="80" pos:column="51"/></operator> <name pos:line="80" pos:column="52">HAVE_VOLUME_PERF_LATENCY_READ<pos:position pos:line="80" pos:column="81"/></name></expr>;<pos:position pos:line="80" pos:column="82"/></expr_stmt>
			}<pos:position pos:line="81" pos:column="26"/></block></then></if></elseif> <elseif pos:line="81" pos:column="27">else <if pos:line="81" pos:column="32">if <condition pos:line="81" pos:column="35">(<expr><operator pos:line="81" pos:column="36">!<pos:position pos:line="81" pos:column="37"/></operator><call><name pos:line="81" pos:column="37">strcmp<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">name<pos:position pos:line="81" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="50">"write_latency"<pos:position pos:line="81" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="67"/></condition><then pos:line="81" pos:column="67"> <block pos:line="81" pos:column="68">{
				<expr_stmt><expr><name><name pos:line="82" pos:column="33">perf_data<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">.<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="43">write_latency<pos:position pos:line="82" pos:column="56"/></name></name> <operator pos:line="82" pos:column="57">=<pos:position pos:line="82" pos:column="58"/></operator> <name pos:line="82" pos:column="59">value<pos:position pos:line="82" pos:column="64"/></name></expr>;<pos:position pos:line="82" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="83" pos:column="33">perf_data<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">.<pos:position pos:line="83" pos:column="43"/></operator><name pos:line="83" pos:column="43">flags<pos:position pos:line="83" pos:column="48"/></name></name> <operator pos:line="83" pos:column="49">|=<pos:position pos:line="83" pos:column="51"/></operator> <name pos:line="83" pos:column="52">HAVE_VOLUME_PERF_LATENCY_WRITE<pos:position pos:line="83" pos:column="82"/></name></expr>;<pos:position pos:line="83" pos:column="83"/></expr_stmt>
			}<pos:position pos:line="84" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="85" pos:column="18"/></block></for> <comment type="block" pos:line="85" pos:column="19">/* for (elem_counter) */</comment>

		<expr_stmt><expr><call><name pos:line="87" pos:column="17">submit_volume_perf_data<pos:position pos:line="87" pos:column="40"/></name> <argument_list pos:line="87" pos:column="41">(<argument><expr><name pos:line="87" pos:column="42">hostname<pos:position pos:line="87" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="52">v<pos:position pos:line="87" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="55">&amp;<pos:position pos:line="87" pos:column="60"/></operator><name pos:line="87" pos:column="56">perf_data<pos:position pos:line="87" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="67">interval<pos:position pos:line="87" pos:column="75"/></name></expr></argument>)<pos:position pos:line="87" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="88" pos:column="10"/></block></for> <comment type="block" pos:line="88" pos:column="11">/* for (volume) */</comment>

	<return pos:line="90" pos:column="9">return <expr><operator pos:line="90" pos:column="16">(<pos:position pos:line="90" pos:column="17"/></operator><literal type="number" pos:line="90" pos:column="17">0<pos:position pos:line="90" pos:column="18"/></literal><operator pos:line="90" pos:column="18">)<pos:position pos:line="90" pos:column="19"/></operator></expr>;<pos:position pos:line="90" pos:column="20"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
