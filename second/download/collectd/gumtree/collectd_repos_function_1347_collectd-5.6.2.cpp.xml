<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1347_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">swap_init<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list> <comment type="block" pos:line="1" pos:column="28">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">KERNEL_LINUX<pos:position pos:line="3" pos:column="17"/></name></expr></cpp:if>
  <expr_stmt><expr><name pos:line="4" pos:column="3">pagesize<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <operator pos:line="4" pos:column="14">(<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">derive_t<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">)<pos:position pos:line="4" pos:column="24"/></operator><call><name pos:line="4" pos:column="24">sysconf<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">_SC_PAGESIZE<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="46"/></expr_stmt>
<comment type="block" pos:line="5" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">elif<pos:position pos:line="7" pos:column="6"/></cpp:directive> <expr><name pos:line="7" pos:column="7">HAVE_SWAPCTL<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&amp;&amp;<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="23">HAVE_SWAPCTL_TWO_ARGS<pos:position pos:line="7" pos:column="44"/></name></expr></cpp:elif>
  <comment type="block" pos:line="8" pos:column="3">/* getpagesize(3C) tells me this does not fail.. */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">pagesize<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <operator pos:line="9" pos:column="14">(<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">derive_t<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">)<pos:position pos:line="9" pos:column="24"/></operator><call><name pos:line="9" pos:column="24">getpagesize<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">()<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
<comment type="block" pos:line="10" pos:column="1">/* #endif HAVE_SWAPCTL */</comment>

<cpp:elif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">elif<pos:position pos:line="12" pos:column="6"/></cpp:directive> <expr><call><name pos:line="12" pos:column="7">defined<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">VM_SWAPUSAGE<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr></cpp:elif>
<comment type="block" pos:line="13" pos:column="1">/* No init stuff */</comment>
<comment type="block" pos:line="14" pos:column="1">/* #endif defined(VM_SWAPUSAGE) */</comment>

<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><name pos:line="16" pos:column="7">HAVE_LIBKVM_GETSWAPINFO<pos:position pos:line="16" pos:column="30"/></name></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">errbuf<pos:position pos:line="17" pos:column="14"/></name><index pos:line="17" pos:column="14">[<expr><name pos:line="17" pos:column="15">_POSIX2_LINE_MAX<pos:position pos:line="17" pos:column="31"/></name></expr>]<pos:position pos:line="17" pos:column="32"/></index></name></decl>;<pos:position pos:line="17" pos:column="33"/></decl_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">kvm_obj<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">!=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">kvm_close<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">kvm_obj<pos:position pos:line="20" pos:column="22"/></name></expr></argument>)<pos:position pos:line="20" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">kvm_obj<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">NULL<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">kvm_pagesize<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">getpagesize<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">()<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><name pos:line="26" pos:column="3">kvm_obj<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">kvm_openfiles<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">NULL<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="33">"/dev/null"<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">NULL<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">O_RDONLY<pos:position pos:line="26" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="62">errbuf<pos:position pos:line="26" pos:column="68"/></name></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">kvm_obj<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">==<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">NULL<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23"> <block pos:line="28" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">ERROR<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><literal type="string" pos:line="29" pos:column="11">"swap plugin: kvm_openfiles failed, %s"<pos:position pos:line="29" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">errbuf<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>
<comment type="block" pos:line="32" pos:column="1">/* #endif HAVE_LIBKVM_GETSWAPINFO */</comment>

<cpp:elif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">elif<pos:position pos:line="34" pos:column="6"/></cpp:directive> <expr><name pos:line="34" pos:column="7">HAVE_LIBSTATGRAB<pos:position pos:line="34" pos:column="23"/></name></expr></cpp:elif>
<comment type="block" pos:line="35" pos:column="1">/* No init stuff */</comment>
<comment type="block" pos:line="36" pos:column="1">/* #endif HAVE_LIBSTATGRAB */</comment>

<cpp:elif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">elif<pos:position pos:line="38" pos:column="6"/></cpp:directive> <expr><name pos:line="38" pos:column="7">HAVE_PERFSTAT<pos:position pos:line="38" pos:column="20"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="39" pos:column="3">pagesize<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">getpagesize<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">()<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/* HAVE_PERFSTAT */</comment>

  <return pos:line="42" pos:column="3">return <expr><operator pos:line="42" pos:column="10">(<pos:position pos:line="42" pos:column="11"/></operator><literal type="number" pos:line="42" pos:column="11">0<pos:position pos:line="42" pos:column="12"/></literal><operator pos:line="42" pos:column="12">)<pos:position pos:line="42" pos:column="13"/></operator></expr>;<pos:position pos:line="42" pos:column="14"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
