<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1044_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wr_write<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">data_set_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">ds<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="44">/* {{{ */</comment>
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">value_list_t<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">vl<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">user_data_t<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ud<pos:position pos:line="3" pos:column="20"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="21"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">wr_node_t<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">node<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">ud<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">ident<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">512<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">key<pos:position pos:line="7" pos:column="11"/></name><index pos:line="7" pos:column="11">[<expr><literal type="number" pos:line="7" pos:column="12">512<pos:position pos:line="7" pos:column="15"/></literal></expr>]<pos:position pos:line="7" pos:column="16"/></index></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">value<pos:position pos:line="8" pos:column="13"/></name><index pos:line="8" pos:column="13">[<expr><literal type="number" pos:line="8" pos:column="14">512<pos:position pos:line="8" pos:column="17"/></literal></expr>]<pos:position pos:line="8" pos:column="18"/></index></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">value_size<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">value_ptr<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">i<pos:position pos:line="12" pos:column="8"/></name></decl>;<pos:position pos:line="12" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">status<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">FORMAT_VL<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">ident<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="30">sizeof <argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">ident<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">vl<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">ssnprintf<pos:position pos:line="17" pos:column="12"/></name> <argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">key<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="19">sizeof <argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">key<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">"collectd/%s"<pos:position pos:line="17" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">ident<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memset<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><name pos:line="19" pos:column="11">value<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="21">sizeof <argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">value<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">value_size<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <sizeof pos:line="20" pos:column="16">sizeof <argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">value<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="21" pos:column="3">value_ptr<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <operator pos:line="21" pos:column="15">&amp;<pos:position pos:line="21" pos:column="20"/></operator><name><name pos:line="21" pos:column="16">value<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>

<cpp:define pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">define<pos:position pos:line="23" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="23" pos:column="9">APPEND<pos:position pos:line="23" pos:column="15"/></name><parameter_list pos:line="23" pos:column="15">(<parameter><type><modifier pos:line="23" pos:column="16">...<pos:position pos:line="23" pos:column="19"/></modifier></type></parameter>)<pos:position pos:line="23" pos:column="20"/></parameter_list></cpp:macro> <cpp:value pos:line="23" pos:column="21">do {                                             \
  status = snprintf (value_ptr, value_size, __VA_ARGS__);            \
  if (((size_t) status) &gt; value_size)                                \
  {                                                                  \
    value_ptr += value_size;                                         \
    value_size = 0;                                                  \
  }                                                                  \
  else                                                               \
  {                                                                  \
    value_ptr += status;                                             \
    value_size -= status;                                            \
  }                                                                  \
} while (0)<pos:position pos:line="35" pos:column="12"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="37" pos:column="3">APPEND<pos:position pos:line="37" pos:column="9"/></name> <argument_list pos:line="37" pos:column="10">(<argument><expr><literal type="string" pos:line="37" pos:column="11">"%lu"<pos:position pos:line="37" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="18">(<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">unsigned<pos:position pos:line="37" pos:column="27"/></name> <name pos:line="37" pos:column="28">long<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">)<pos:position pos:line="37" pos:column="33"/></operator> <name><name pos:line="37" pos:column="34">vl<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">time<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
  <for pos:line="38" pos:column="3">for <control pos:line="38" pos:column="7">(<init><expr><name pos:line="38" pos:column="8">i<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></init> <condition><expr><name pos:line="38" pos:column="15">i<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">&lt;<pos:position pos:line="38" pos:column="21"/></operator> <name><name pos:line="38" pos:column="19">ds<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">ds_num<pos:position pos:line="38" pos:column="29"/></name></name></expr>;<pos:position pos:line="38" pos:column="30"/></condition> <incr><expr><name pos:line="38" pos:column="31">i<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">++<pos:position pos:line="38" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="35"/></control>
  <block pos:line="39" pos:column="3">{
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">ds<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">ds<pos:position pos:line="40" pos:column="15"/></name><index pos:line="40" pos:column="15">[<expr><name pos:line="40" pos:column="16">i<pos:position pos:line="40" pos:column="17"/></name></expr>]<pos:position pos:line="40" pos:column="18"/></index></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">type<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">==<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">DS_TYPE_COUNTER<pos:position pos:line="40" pos:column="42"/></name></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">APPEND<pos:position pos:line="41" pos:column="13"/></name> <argument_list pos:line="41" pos:column="14">(<argument><expr><literal type="string" pos:line="41" pos:column="15">"%llu"<pos:position pos:line="41" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="23">vl<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-&gt;<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="27">values<pos:position pos:line="41" pos:column="33"/></name><index pos:line="41" pos:column="33">[<expr><name pos:line="41" pos:column="34">i<pos:position pos:line="41" pos:column="35"/></name></expr>]<pos:position pos:line="41" pos:column="36"/></index></name><operator pos:line="41" pos:column="36">.<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">counter<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt></block></then>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><name><name pos:line="42" pos:column="14">ds<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">ds<pos:position pos:line="42" pos:column="20"/></name><index pos:line="42" pos:column="20">[<expr><name pos:line="42" pos:column="21">i<pos:position pos:line="42" pos:column="22"/></name></expr>]<pos:position pos:line="42" pos:column="23"/></index></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">type<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">==<pos:position pos:line="42" pos:column="31"/></operator> <name pos:line="42" pos:column="32">DS_TYPE_GAUGE<pos:position pos:line="42" pos:column="45"/></name></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="7">APPEND<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><literal type="string" pos:line="43" pos:column="15">"%g"<pos:position pos:line="43" pos:column="19"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="21">vl<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">-&gt;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="25">values<pos:position pos:line="43" pos:column="31"/></name><index pos:line="43" pos:column="31">[<expr><name pos:line="43" pos:column="32">i<pos:position pos:line="43" pos:column="33"/></name></expr>]<pos:position pos:line="43" pos:column="34"/></index></name><operator pos:line="43" pos:column="34">.<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="35">gauge<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><name><name pos:line="44" pos:column="14">ds<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">ds<pos:position pos:line="44" pos:column="20"/></name><index pos:line="44" pos:column="20">[<expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name></expr>]<pos:position pos:line="44" pos:column="23"/></index></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">type<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">==<pos:position pos:line="44" pos:column="31"/></operator> <name pos:line="44" pos:column="32">DS_TYPE_DERIVE<pos:position pos:line="44" pos:column="46"/></name></expr>)<pos:position pos:line="44" pos:column="47"/></condition><then pos:line="44" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="7">APPEND<pos:position pos:line="45" pos:column="13"/></name> <argument_list pos:line="45" pos:column="14">(<argument><expr><literal type="string" pos:line="45" pos:column="15">"%"<pos:position pos:line="45" pos:column="18"/></literal><name pos:line="45" pos:column="18">PRIi64<pos:position pos:line="45" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="26">vl<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">-&gt;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="30">values<pos:position pos:line="45" pos:column="36"/></name><index pos:line="45" pos:column="36">[<expr><name pos:line="45" pos:column="37">i<pos:position pos:line="45" pos:column="38"/></name></expr>]<pos:position pos:line="45" pos:column="39"/></index></name><operator pos:line="45" pos:column="39">.<pos:position pos:line="45" pos:column="40"/></operator><name pos:line="45" pos:column="40">derive<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="48"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">(<expr><name><name pos:line="46" pos:column="14">ds<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">-&gt;<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="18">ds<pos:position pos:line="46" pos:column="20"/></name><index pos:line="46" pos:column="20">[<expr><name pos:line="46" pos:column="21">i<pos:position pos:line="46" pos:column="22"/></name></expr>]<pos:position pos:line="46" pos:column="23"/></index></name><operator pos:line="46" pos:column="23">.<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="24">type<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">==<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">DS_TYPE_ABSOLUTE<pos:position pos:line="46" pos:column="48"/></name></expr>)<pos:position pos:line="46" pos:column="49"/></condition><then pos:line="46" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="7">APPEND<pos:position pos:line="47" pos:column="13"/></name> <argument_list pos:line="47" pos:column="14">(<argument><expr><literal type="string" pos:line="47" pos:column="15">"%"<pos:position pos:line="47" pos:column="18"/></literal><name pos:line="47" pos:column="18">PRIu64<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="26">vl<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">values<pos:position pos:line="47" pos:column="36"/></name><index pos:line="47" pos:column="36">[<expr><name pos:line="47" pos:column="37">i<pos:position pos:line="47" pos:column="38"/></name></expr>]<pos:position pos:line="47" pos:column="39"/></index></name><operator pos:line="47" pos:column="39">.<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="40">absolute<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt></block></then></if></elseif>
    <else pos:line="48" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="7">assert<pos:position pos:line="49" pos:column="13"/></name> <argument_list pos:line="49" pos:column="14">(<argument><expr><literal type="number" pos:line="49" pos:column="15">23<pos:position pos:line="49" pos:column="17"/></literal> <operator pos:line="49" pos:column="18">==<pos:position pos:line="49" pos:column="20"/></operator> <literal type="number" pos:line="49" pos:column="21">42<pos:position pos:line="49" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt></block></else></if>
  }<pos:position pos:line="50" pos:column="4"/></block></for>

<cpp:undef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">undef<pos:position pos:line="52" pos:column="7"/></cpp:directive> <name pos:line="52" pos:column="8">APPEND<pos:position pos:line="52" pos:column="14"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="54" pos:column="3">pthread_mutex_lock<pos:position pos:line="54" pos:column="21"/></name> <argument_list pos:line="54" pos:column="22">(<argument><expr><operator pos:line="54" pos:column="23">&amp;<pos:position pos:line="54" pos:column="28"/></operator><name><name pos:line="54" pos:column="24">node<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">lock<pos:position pos:line="54" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">node<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">conn<pos:position pos:line="56" pos:column="17"/></name></name> <operator pos:line="56" pos:column="18">==<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">NULL<pos:position pos:line="56" pos:column="25"/></name></expr>)<pos:position pos:line="56" pos:column="26"/></condition><then pos:line="56" pos:column="26">
  <block pos:line="57" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">node<pos:position pos:line="58" pos:column="9"/></name><operator pos:line="58" pos:column="9">-&gt;<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="11">conn<pos:position pos:line="58" pos:column="15"/></name></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <call><name pos:line="58" pos:column="18">credis_connect<pos:position pos:line="58" pos:column="32"/></name> <argument_list pos:line="58" pos:column="33">(<argument><expr><name><name pos:line="58" pos:column="34">node<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">-&gt;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="40">host<pos:position pos:line="58" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="46">node<pos:position pos:line="58" pos:column="50"/></name><operator pos:line="58" pos:column="50">-&gt;<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="52">port<pos:position pos:line="58" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="58">node<pos:position pos:line="58" pos:column="62"/></name><operator pos:line="58" pos:column="62">-&gt;<pos:position pos:line="58" pos:column="67"/></operator><name pos:line="58" pos:column="64">timeout<pos:position pos:line="58" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="73"/></expr_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">node<pos:position pos:line="59" pos:column="13"/></name><operator pos:line="59" pos:column="13">-&gt;<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="15">conn<pos:position pos:line="59" pos:column="19"/></name></name> <operator pos:line="59" pos:column="20">==<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">NULL<pos:position pos:line="59" pos:column="27"/></name></expr>)<pos:position pos:line="59" pos:column="28"/></condition><then pos:line="59" pos:column="28">
    <block pos:line="60" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">ERROR<pos:position pos:line="61" pos:column="12"/></name> <argument_list pos:line="61" pos:column="13">(<argument><expr><literal type="string" pos:line="61" pos:column="14">"write_redis plugin: Connecting to host \"%s\" (port %i) failed."<pos:position pos:line="61" pos:column="79"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="62" pos:column="11">(<pos:position pos:line="62" pos:column="12"/></operator><name><name pos:line="62" pos:column="12">node<pos:position pos:line="62" pos:column="16"/></name><operator pos:line="62" pos:column="16">-&gt;<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="18">host<pos:position pos:line="62" pos:column="22"/></name></name> <operator pos:line="62" pos:column="23">!=<pos:position pos:line="62" pos:column="25"/></operator> <name pos:line="62" pos:column="26">NULL<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">)<pos:position pos:line="62" pos:column="31"/></operator></expr> ?<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <expr><name><name pos:line="62" pos:column="34">node<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">-&gt;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="40">host<pos:position pos:line="62" pos:column="44"/></name></name></expr> <pos:position pos:line="62" pos:column="45"/></then><else pos:line="62" pos:column="45">: <expr><literal type="string" pos:line="62" pos:column="47">"localhost"<pos:position pos:line="62" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="63" pos:column="11">(<pos:position pos:line="63" pos:column="12"/></operator><name><name pos:line="63" pos:column="12">node<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">port<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">!=<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="26">0<pos:position pos:line="63" pos:column="27"/></literal><operator pos:line="63" pos:column="27">)<pos:position pos:line="63" pos:column="28"/></operator></expr> ?<pos:position pos:line="63" pos:column="30"/></condition><then pos:line="63" pos:column="30"> <expr><name><name pos:line="63" pos:column="31">node<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">-&gt;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="37">port<pos:position pos:line="63" pos:column="41"/></name></name></expr> <pos:position pos:line="63" pos:column="42"/></then><else pos:line="63" pos:column="42">: <expr><literal type="number" pos:line="63" pos:column="44">6379<pos:position pos:line="63" pos:column="48"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">pthread_mutex_unlock<pos:position pos:line="64" pos:column="27"/></name> <argument_list pos:line="64" pos:column="28">(<argument><expr><operator pos:line="64" pos:column="29">&amp;<pos:position pos:line="64" pos:column="34"/></operator><name><name pos:line="64" pos:column="30">node<pos:position pos:line="64" pos:column="34"/></name><operator pos:line="64" pos:column="34">-&gt;<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="36">lock<pos:position pos:line="64" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="42"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><operator pos:line="65" pos:column="14">(<pos:position pos:line="65" pos:column="15"/></operator><operator pos:line="65" pos:column="15">-<pos:position pos:line="65" pos:column="16"/></operator><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal><operator pos:line="65" pos:column="17">)<pos:position pos:line="65" pos:column="18"/></operator></expr>;<pos:position pos:line="65" pos:column="19"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="69" pos:column="3">/* "credis_zadd" doesn't handle a NULL pointer gracefully, so I'd rather
   * have a meaningful assertion message than a normal segmentation fault. */</comment>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">assert<pos:position pos:line="71" pos:column="9"/></name> <argument_list pos:line="71" pos:column="10">(<argument><expr><name><name pos:line="71" pos:column="11">node<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">-&gt;<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="17">conn<pos:position pos:line="71" pos:column="21"/></name></name> <operator pos:line="71" pos:column="22">!=<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">NULL<pos:position pos:line="71" pos:column="29"/></name></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="72" pos:column="3">status<pos:position pos:line="72" pos:column="9"/></name> <operator pos:line="72" pos:column="10">=<pos:position pos:line="72" pos:column="11"/></operator> <call><name pos:line="72" pos:column="12">credis_zadd<pos:position pos:line="72" pos:column="23"/></name> <argument_list pos:line="72" pos:column="24">(<argument><expr><name><name pos:line="72" pos:column="25">node<pos:position pos:line="72" pos:column="29"/></name><operator pos:line="72" pos:column="29">-&gt;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="31">conn<pos:position pos:line="72" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">key<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="42">(<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="43">double<pos:position pos:line="72" pos:column="49"/></name><operator pos:line="72" pos:column="49">)<pos:position pos:line="72" pos:column="50"/></operator> <name><name pos:line="72" pos:column="51">vl<pos:position pos:line="72" pos:column="53"/></name><operator pos:line="72" pos:column="53">-&gt;<pos:position pos:line="72" pos:column="58"/></operator><name pos:line="72" pos:column="55">time<pos:position pos:line="72" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="61">value<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="68"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="74" pos:column="3">credis_sadd<pos:position pos:line="74" pos:column="14"/></name> <argument_list pos:line="74" pos:column="15">(<argument><expr><name><name pos:line="74" pos:column="16">node<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">-&gt;<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="22">conn<pos:position pos:line="74" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="28">"collectd/values"<pos:position pos:line="74" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="47">ident<pos:position pos:line="74" pos:column="52"/></name></expr></argument>)<pos:position pos:line="74" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="54"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="76" pos:column="3">pthread_mutex_unlock<pos:position pos:line="76" pos:column="23"/></name> <argument_list pos:line="76" pos:column="24">(<argument><expr><operator pos:line="76" pos:column="25">&amp;<pos:position pos:line="76" pos:column="30"/></operator><name><name pos:line="76" pos:column="26">node<pos:position pos:line="76" pos:column="30"/></name><operator pos:line="76" pos:column="30">-&gt;<pos:position pos:line="76" pos:column="35"/></operator><name pos:line="76" pos:column="32">lock<pos:position pos:line="76" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="38"/></expr_stmt>

  <return pos:line="78" pos:column="3">return <expr><operator pos:line="78" pos:column="10">(<pos:position pos:line="78" pos:column="11"/></operator><literal type="number" pos:line="78" pos:column="11">0<pos:position pos:line="78" pos:column="12"/></literal><operator pos:line="78" pos:column="12">)<pos:position pos:line="78" pos:column="13"/></operator></expr>;<pos:position pos:line="78" pos:column="14"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
