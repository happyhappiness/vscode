<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1163_collectd-4.9.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cf_register_complex<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">type<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> (<modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><name pos:line="1" pos:column="50">callback<pos:position pos:line="1" pos:column="58"/></name>) <parameter_list pos:line="1" pos:column="60">(<parameter><decl><type><name pos:line="1" pos:column="61">oconfig_item_t<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list></function_decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">cf_complex_callback_t<pos:position pos:line="3" pos:column="30"/></name> <operator pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></operator><operator pos:line="3" pos:column="32">new<pos:position pos:line="3" pos:column="35"/></operator></expr>;<pos:position pos:line="3" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="5" pos:column="9">new<pos:position pos:line="5" pos:column="12"/></operator> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <operator pos:line="5" pos:column="15">(<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">cf_complex_callback_t<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><operator pos:line="5" pos:column="39">)<pos:position pos:line="5" pos:column="40"/></operator> <call><name pos:line="5" pos:column="41">malloc<pos:position pos:line="5" pos:column="47"/></name> <argument_list pos:line="5" pos:column="48">(<argument><expr><sizeof pos:line="5" pos:column="49">sizeof <argument_list pos:line="5" pos:column="56">(<argument><expr><name pos:line="5" pos:column="57">cf_complex_callback_t<pos:position pos:line="5" pos:column="78"/></name></expr></argument>)<pos:position pos:line="5" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="81"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">new<pos:position pos:line="6" pos:column="16"/></operator> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="20">NULL<pos:position pos:line="6" pos:column="24"/></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">(<pos:position pos:line="7" pos:column="25"/></operator><operator pos:line="7" pos:column="25">-<pos:position pos:line="7" pos:column="26"/></operator><literal type="number" pos:line="7" pos:column="26">1<pos:position pos:line="7" pos:column="27"/></literal><operator pos:line="7" pos:column="27">)<pos:position pos:line="7" pos:column="28"/></operator></expr>;<pos:position pos:line="7" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><operator pos:line="9" pos:column="9">new<pos:position pos:line="9" pos:column="12"/></operator><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">type<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">strdup<pos:position pos:line="9" pos:column="27"/></name> <argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">type<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">new<pos:position pos:line="10" pos:column="16"/></operator><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">type<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">==<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
	<block pos:line="11" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">sfree<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">new<pos:position pos:line="12" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><operator pos:line="13" pos:column="25">-<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="16" pos:column="9">new<pos:position pos:line="16" pos:column="12"/></operator><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">callback<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">callback<pos:position pos:line="16" pos:column="33"/></name></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="17" pos:column="9">new<pos:position pos:line="17" pos:column="12"/></operator><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">next<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">complex_callback_head<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">==<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">NULL<pos:position pos:line="19" pos:column="42"/></name></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
	<block pos:line="20" pos:column="9">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">complex_callback_head<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">=<pos:position pos:line="21" pos:column="40"/></operator> <operator pos:line="21" pos:column="41">new<pos:position pos:line="21" pos:column="44"/></operator></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then>
	<else pos:line="23" pos:column="9">else
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">cf_complex_callback_t<pos:position pos:line="25" pos:column="38"/></name> <modifier pos:line="25" pos:column="39">*<pos:position pos:line="25" pos:column="40"/></modifier></type><name pos:line="25" pos:column="40">last<pos:position pos:line="25" pos:column="44"/></name> <init pos:line="25" pos:column="45">= <expr><name pos:line="25" pos:column="47">complex_callback_head<pos:position pos:line="25" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="69"/></decl_stmt>
		<while pos:line="26" pos:column="17">while <condition pos:line="26" pos:column="23">(<expr><name><name pos:line="26" pos:column="24">last<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">next<pos:position pos:line="26" pos:column="34"/></name></name> <operator pos:line="26" pos:column="35">!=<pos:position pos:line="26" pos:column="37"/></operator> <name pos:line="26" pos:column="38">NULL<pos:position pos:line="26" pos:column="42"/></name></expr>)<pos:position pos:line="26" pos:column="43"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">last<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <name><name pos:line="27" pos:column="32">last<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">-&gt;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="38">next<pos:position pos:line="27" pos:column="42"/></name></name></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt></block></while>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">last<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">next<pos:position pos:line="28" pos:column="27"/></name></name> <operator pos:line="28" pos:column="28">=<pos:position pos:line="28" pos:column="29"/></operator> <operator pos:line="28" pos:column="30">new<pos:position pos:line="28" pos:column="33"/></operator></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></else></if>

	<return pos:line="31" pos:column="9">return <expr><operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal><operator pos:line="31" pos:column="18">)<pos:position pos:line="31" pos:column="19"/></operator></expr>;<pos:position pos:line="31" pos:column="20"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
